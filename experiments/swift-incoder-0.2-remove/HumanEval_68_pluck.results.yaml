language: swift
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqut7mqla.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpqut7mqla.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpqut7mqla.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    for i := 0; i < len(arr); i++ {\n\
    \        if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpg2rmuohc.swift:22:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpg2rmuohc.swift:22:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpg2rmuohc.swift:22:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    var smallestEven = arr[0]\n    var smallestIndex\
    \ = -1\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0\
    \ {\n            if smallestEven == arr[index] {\n                smallestEven\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    \n    if smallestIndex != -1 {\n        result = append(result,\
    \ smallestEven)\n        result = append(result, smallestIndex)\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpue8t8o_m.swift:36:18: error: cannot find 'append' in scope\n  \
    \      result = append(result, smallestEven)\n                 ^~~~~~\n/tmp/tmpue8t8o_m.swift:37:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallestIndex)\n\
    \                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    for index in 1..<arr.count {\n\
    \        if arr[index] < minValue {\n            minValue = arr[index]\n     \
    \       minIndex = index\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppxzeggrg/tmppxzeggrg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7710c9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7710992b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7710992988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77109917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppxzeggrg                        0x0000556ecd2df70b <unavailable> + 5899

    5    libc.so.6                          0x00002b7710e87460 __libc_start_main +
    245

    6    tmppxzeggrg                        0x0000556ecd2df1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 1..<arr.count {\n\
    \        if arr[index] < minValue {\n            minValue = arr[index]\n     \
    \       minIndex = index\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpej2rj6pu/tmpej2rj6pu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c6da19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c6d710b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c6d710988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c6d70f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej2rj6pu                        0x000055609869270b <unavailable> + 5899

    5    libc.so.6                          0x00002b8c6dc05460 __libc_start_main +
    245

    6    tmpej2rj6pu                        0x00005560986921f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfm8gjmz2/tmpfm8gjmz2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8beac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8be7bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8be7bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8be7bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm8gjmz2                        0x000055786b8fd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002af8becb1460 __libc_start_main +
    245

    6    tmpfm8gjmz2                        0x000055786b8fd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n  \
    \  \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if arr[index] < minValue {\n                minValue = arr[index]\n \
    \               minIndex = index\n            }\n        }\n    }\n    \n    if\
    \ minIndex == 0 {\n        return arr\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpwgrgzz65/tmpwgrgzz65.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e1c7f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e1c4ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e1c4ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e1c4eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgrgzz65                        0x00005571fa19f7cb <unavailable> + 6091

    5    libc.so.6                          0x00002b0e1c9e1460 __libc_start_main +
    245

    6    tmpwgrgzz65                        0x00005571fa19f2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqut7mqla.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpqut7mqla.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpqut7mqla.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpw71ndjuq/tmpw71ndjuq.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eed506c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eed1fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eed1fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eed1fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw71ndjuq                        0x000055d33c5257cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9eed6f2460 __libc_start_main +
    245

    6    tmpw71ndjuq                        0x000055d33c5252b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    var minIndex2 = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] >= minValue {\n            if arr[index]\
    \ % 2 == 0 {\n                if minIndex == 0 {\n                    minValue\
    \ = arr[index]\n                    minIndex = index\n                } else {\n\
    \                    if arr[index] < minValue {\n                        minValue\
    \ = arr[index]\n                        minIndex = index\n                   \
    \ }\n                }\n            } else {\n                if minIndex2 ==\
    \ 0 {\n                    minValue = arr[index]\n                    minIndex2\
    \ = index\n                } else {\n                    if arr[index] < minValue\
    \ {\n                        minValue = arr[index]\n                        minIndex2\
    \ = index\n                    }\n                }\n            }\n        }\n\
    \    }\n    return [minValue, minIndex, minIndex2]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpep3v9fz4/tmpep3v9fz4.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d1bcabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d1b9a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d1b9a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d1b9a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpep3v9fz4                        0x000055a83e67d5ec <unavailable> + 5612

    5    libc.so.6                          0x00002b1d1be97460 __libc_start_main +
    245

    6    tmpep3v9fz4                        0x000055a83e67d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if minValue == arr[index] {\n\
    \                minIndex = index\n            } else {\n                if arr[index]\
    \ < minValue {\n                    minValue = arr[index]\n                  \
    \  minIndex = index\n                }\n            }\n        }\n    }\n    \n\
    \    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpuconbaec/tmpuconbaec.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002accedef0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002accedbe7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002accedbe7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002accedbe67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuconbaec                        0x000055873595f70b <unavailable> + 5899

    5    libc.so.6                          0x00002accee0dc460 __libc_start_main +
    245

    6    tmpuconbaec                        0x000055873595f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEvenValue = arr[0]\n    var smallestIndex\
    \ = 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < smallestEvenValue\
    \ {\n            smallestEvenValue = arr[i]\n            smallestIndex = i\n \
    \       }\n    }\n    result.append(smallestEvenValue)\n    result.append(smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpohx9x8mk.swift:23:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpohx9x8mk.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpohx9x8mk.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEvenValue = arr[0]\n    var smallestIndex\
    \ = 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n  \
    \          if smallestEvenValue < arr[index] {\n                smallestEvenValue\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    if smallestIndex != 0 {\n        result = [smallestEvenValue,\
    \ smallestIndex]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp9jt41t4o/tmp9jt41t4o.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abee2631c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abee2328b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abee2328988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abee23277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9jt41t4o                        0x000055f36472b64c <unavailable> + 5708

    5    libc.so.6                          0x00002abee281d460 __libc_start_main +
    245

    6    tmp9jt41t4o                        0x000055f36472b259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n \
    \   \n    for value in arr {\n        if value == minValue {\n            if minIndex\
    \ == -1 {\n                minIndex = value\n            } else {\n          \
    \      if value < minValue {\n                    minIndex = value\n         \
    \           minValue = value\n                }\n            }\n        } else\
    \ {\n            if minIndex != -1 {\n                result.insert(minIndex,\
    \ minValue)\n                minIndex = -1\n                minValue = arr[0]\n\
    \            }\n        }\n    }\n    \n    if minIndex != -1 {\n        result.insert(minIndex,\
    \ minValue)\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmptgkd1su0.swift:37:24: error: no exact matches in call to instance\
    \ method 'insert'\n                result.insert(minIndex, minValue)\n       \
    \                ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n/tmp/tmptgkd1su0.swift:45:16: error: no exact matches in call\
    \ to instance method 'insert'\n        result.insert(minIndex, minValue)\n   \
    \            ^\nSwift.Array:11:37: note: incorrect labels for candidate (have:\
    \ '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Element, at i: Int)\n                                  \
    \  ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels for candidate\
    \ (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating func insert(_\
    \ newElement: __owned Self.Element, at i: Self.Index)\n                      \
    \              ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   // write your code here\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp10e66_va/tmp10e66_va.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f7a2a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f79fa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f79fa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f79f9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10e66_va                        0x000055a614b873bc <unavailable> + 5052

    5    libc.so.6                          0x00002b1f7a495460 __libc_start_main +
    245

    6    tmp10e66_va                        0x000055a614b86fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   // write your code here\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp10e66_va/tmp10e66_va.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f7a2a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f79fa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f79fa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f79f9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10e66_va                        0x000055a614b873bc <unavailable> + 5052

    5    libc.so.6                          0x00002b1f7a495460 __libc_start_main +
    245

    6    tmp10e66_va                        0x000055a614b86fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   // write your code here\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp10e66_va/tmp10e66_va.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f7a2a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f79fa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f79fa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f79f9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10e66_va                        0x000055a614b873bc <unavailable> + 5052

    5    libc.so.6                          0x00002b1f7a495460 __libc_start_main +
    245

    6    tmp10e66_va                        0x000055a614b86fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result = [minValue, minIndex]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp11oao60j/tmp11oao60j.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af01edf3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af01eaeab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af01eaea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af01eae97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11oao60j                        0x0000562f11ad666c <unavailable> + 5740

    5    libc.so.6                          0x00002af01efdf460 __libc_start_main +
    245

    6    tmp11oao60j                        0x0000562f11ad6279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dcbb8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dcb882561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8dcb882286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8dcb88213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8dcb881bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8dcb681e83 <unavailable> + 188035

    6    tmp293p2qbz                        0x000055570f5b5ff0 <unavailable> + 8176

    7    tmp293p2qbz                        0x000055570f5b57ee <unavailable> + 6126

    8    libc.so.6                          0x00002b8dcbd77460 __libc_start_main +
    245

    9    tmp293p2qbz                        0x000055570f5b52b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallest = 0\n    var smallestIndex = 0\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] % 2 == 0 {\n            if smallest\
    \ == 0 || arr[i] < arr[smallest] {\n                smallest = arr[i]\n      \
    \          smallestIndex = i\n            }\n        }\n    }\n    if smallest\
    \ != 0 {\n        result = append(result, smallest)\n        result = append(result,\
    \ smallestIndex)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpyqbfafjo.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpyqbfafjo.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpyqbfafjo.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpyqbfafjo.swift:32:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallest)\n\
    \                 ^~~~~~\n/tmp/tmpyqbfafjo.swift:33:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    if minIndex == -1\
    \ {\n        return result\n    }\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] == minValue {\n            result.insert(minIndex, arr[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpyoqdk1pm.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpyoqdk1pm.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpyoqdk1pm.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpyoqdk1pm.swift:32:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpyoqdk1pm.swift:32:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpyoqdk1pm.swift:32:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   // Your code here\n    var result = [Int]()\n    var minIndex = 0\n    var\
    \ minValue = arr[0]\n    for index in 0..<arr.count {\n        if arr[index] %\
    \ 2 == 0 {\n            if arr[index] < minValue {\n                minValue =\
    \ arr[index]\n                minIndex = index\n            }\n        }\n   \
    \ }\n    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpu8kumnma/tmpu8kumnma.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a60659c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a60350b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a60350988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a6034f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu8kumnma                        0x000055bab56f67cb <unavailable> + 6091

    5    libc.so.6                          0x00002b7a60845460 __libc_start_main +
    245

    6    tmpu8kumnma                        0x000055bab56f62b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpjz_fn025/tmpjz_fn025.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc6c122c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc6be19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc6be19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc6be187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjz_fn025                        0x0000562da71606bc <unavailable> + 5820

    5    libc.so.6                          0x00002abc6c30e460 __libc_start_main +
    245

    6    tmpjz_fn025                        0x0000562da71602c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if minValue == arr[index] {\n \
    \               minIndex = index\n            } else {\n                minValue\
    \ = arr[index]\n                minIndex = index\n            }\n        }\n \
    \   }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\n\
    assert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0,\
    \ 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr:\
    \ [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d23b30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d23827561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5d23827286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5d2382713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5d23826bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5d23626e83 <unavailable> + 188035

    6    tmp3phrbyqz                        0x0000561aec9f6f10 <unavailable> + 7952

    7    tmp3phrbyqz                        0x0000561aec9f672e <unavailable> + 5934

    8    libc.so.6                          0x00002b5d23d1c460 __libc_start_main +
    245

    9    tmp3phrbyqz                        0x0000561aec9f61f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallest = 0\n    var smallestIndex = 0\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < smallest {\n            smallest\
    \ = arr[i]\n            smallestIndex = i\n        }\n    }\n    result.append(smallest)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpipwxmnt6.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpipwxmnt6.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpipwxmnt6.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n\
    \                minValue = arr[index]\n                minIndex = index\n   \
    \         }\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp28bvixyo/tmp28bvixyo.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6ab0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6aad97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6aad97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6aad967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28bvixyo                        0x000056371b06970b <unavailable> + 5899

    5    libc.so.6                          0x00002af6ab28c460 __libc_start_main +
    245

    6    tmp28bvixyo                        0x000056371b0691f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minValue = arr[0]\n    var minIndex = 0\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 && arr[index] < minValue {\n            minValue\
    \ = arr[index]\n            minIndex = index\n        }\n    }\n    \n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmptz9zfywr/tmptz9zfywr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6eb6057c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6eb5d4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6eb5d4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6eb5d4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptz9zfywr                        0x000055779f8f770b <unavailable> + 5899

    5    libc.so.6                          0x00002b6eb6243460 __libc_start_main +
    245

    6    tmptz9zfywr                        0x000055779f8f71f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestEven > arr[index] {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    result\
    \ = [smallestEven, smallestIndex]\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpi6_22008/tmpi6_22008.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27e9d84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27e9a7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27e9a7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27e9a7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6_22008                        0x000055779aa9376b <unavailable> + 5995

    5    libc.so.6                          0x00002b27e9f70460 __libc_start_main +
    245

    6    tmpi6_22008                        0x000055779aa93259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    var minValue = arr[0]\n    var minIndex =\
    \ 0\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n\
    \            if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ if minIndex == arr.count {\n        return result\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdh6hofo7/tmpdh6hofo7.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf979dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf976d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf976d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf976d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdh6hofo7                        0x0000560d2feae7cb <unavailable> + 6091

    5    libc.so.6                          0x00002acf97bcb460 __libc_start_main +
    245

    6    tmpdh6hofo7                        0x0000560d2feae2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n\
    \        if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpzvmb83ei.swift:22:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpzvmb83ei.swift:22:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpzvmb83ei.swift:22:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfm8gjmz2/tmpfm8gjmz2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8beac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8be7bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8be7bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8be7bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm8gjmz2                        0x000055786b8fd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002af8becb1460 __libc_start_main +
    245

    6    tmpfm8gjmz2                        0x000055786b8fd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < smallest {\n   \
    \         smallest = arr[i]\n            smallestIndex = i\n        }\n    }\n\
    \    if smallest == 0 {\n        return result\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] == smallest {\n            result.append(smallest)\n\
    \            result.append(i)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpvgf44pp5.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpvgf44pp5.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpvgf44pp5.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpvgf44pp5.swift:32:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpvgf44pp5.swift:32:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpvgf44pp5.swift:32:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpq4wmr_u1.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpq4wmr_u1.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpq4wmr_u1.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n  \
    \  \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if arr[index] < minValue {\n                minValue = arr[index]\n \
    \               minIndex = index\n            }\n        }\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp07xdu8vw/tmp07xdu8vw.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f8ed56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f8ea4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f8ea4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f8ea4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07xdu8vw                        0x000055f1e4c237cb <unavailable> + 6091

    5    libc.so.6                          0x00002b8f8ef42460 __libc_start_main +
    245

    6    tmp07xdu8vw                        0x000055f1e4c232b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minVal = arr[0]\n    var minIndex = 0\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if arr[index] < minVal {\n\
    \                minVal = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    \n    return [minVal, minIndex]\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpr31d4oiq/tmpr31d4oiq.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b953c8b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b953c5aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b953c5ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b953c5ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr31d4oiq                        0x000055fa2092870b <unavailable> + 5899

    5    libc.so.6                          0x00002b953caa3460 __libc_start_main +
    245

    6    tmpr31d4oiq                        0x000055fa209281f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minValue = arr[0]\n    var minIndex = 0\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] >= minValue {\n            if arr[index] % 2 == 0 {\n\
    \                minValue = arr[index]\n                minIndex = index\n   \
    \         }\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp1fsvbql_/tmp1fsvbql_.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f26acec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f267c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f267c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f267c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1fsvbql_                        0x0000562a2ff6d5ec <unavailable> + 5612

    5    libc.so.6                          0x00002b6f26cba460 __libc_start_main +
    245

    6    tmp1fsvbql_                        0x0000562a2ff6d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < smallest {\n   \
    \         smallest = arr[i]\n            smallestIndex = i\n        }\n    }\n\
    \    if smallest == 0 {\n        return result\n    }\n    for i := 0; i < len(arr);\
    \ i++ {\n        if arr[i] == smallest {\n            result.insert(smallestIndex,\
    \ arr[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpjftryo15.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpjftryo15.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpjftryo15.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpjftryo15.swift:32:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpjftryo15.swift:32:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpjftryo15.swift:32:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            }\n        }\
    \ else {\n            if minValue < arr[index] {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpygqceybz/tmpygqceybz.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfcf15ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfcee55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfcee55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfcee547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygqceybz                        0x00005648bc43c6ac <unavailable> + 5804

    5    libc.so.6                          0x00002acfcf34a460 __libc_start_main +
    245

    6    tmpygqceybz                        0x00005648bc43c2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpyevcdzqb.swift:23:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpyevcdzqb.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpyevcdzqb.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            result.append(arr[index])\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpspv39c98/tmpspv39c98.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab89d957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab89d64eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab89d64e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab89d64d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspv39c98                        0x000055638bf1b6ac <unavailable> + 5804

    5    libc.so.6                          0x00002ab89db43460 __libc_start_main +
    245

    6    tmpspv39c98                        0x000055638bf1b2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ < arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result = [minValue, minIndex]\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpj1mcaovy/tmpj1mcaovy.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab01140cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab011103b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab011103988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0111027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1mcaovy                        0x000055ad984705ec <unavailable> + 5612

    5    libc.so.6                          0x00002ab0115f8460 __libc_start_main +
    245

    6    tmpj1mcaovy                        0x000055ad984701f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfm8gjmz2/tmpfm8gjmz2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8beac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8be7bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8be7bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8be7bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm8gjmz2                        0x000055786b8fd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002af8becb1460 __libc_start_main +
    245

    6    tmpfm8gjmz2                        0x000055786b8fd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ac824f21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac824c18561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac824c18286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac824c1813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac824c17bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ac824a17e83 <unavailable> + 188035

    6    tmp1dcz8tma                        0x000055a3c1d1e006 <unavailable> + 8198

    7    tmp1dcz8tma                        0x000055a3c1d1d7ee <unavailable> + 6126

    8    libc.so.6                          0x00002ac82510d460 __libc_start_main +
    245

    9    tmp1dcz8tma                        0x000055a3c1d1d2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqut7mqla.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpqut7mqla.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpqut7mqla.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    if minIndex == -1\
    \ {\n        return result\n    }\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] == minValue {\n            result.insert(minIndex, arr[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpyoqdk1pm.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpyoqdk1pm.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpyoqdk1pm.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpyoqdk1pm.swift:32:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpyoqdk1pm.swift:32:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpyoqdk1pm.swift:32:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int()\n    var minIndex = -1\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    if minIndex == -1\
    \ {\n        return result\n    }\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] == minValue {\n            result.insert(minIndex, arr[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwo_np2xk.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpwo_np2xk.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpwo_np2xk.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpwo_np2xk.swift:32:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpwo_np2xk.swift:32:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpwo_np2xk.swift:32:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallest = 0\n    var smallestIndex = 0\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] % 2 == 0 {\n            if smallest\
    \ == 0 || arr[i] < arr[smallest] {\n                smallest = arr[i]\n      \
    \          smallestIndex = i\n            }\n        }\n    }\n    if smallest\
    \ != 0 {\n        result = append(result, smallest)\n        result = append(result,\
    \ smallestIndex)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpyqbfafjo.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpyqbfafjo.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpyqbfafjo.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpyqbfafjo.swift:32:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallest)\n\
    \                 ^~~~~~\n/tmp/tmpyqbfafjo.swift:33:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for i\
    \ := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaqbsnnuj.swift:23:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpaqbsnnuj.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpaqbsnnuj.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int()\n    var minIndex = -1\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    if minValue == 0 {\n\
    \        return result\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] == minValue {\n            result.insert(minIndex, arr[i])\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpofang2pz.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpofang2pz.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpofang2pz.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpofang2pz.swift:32:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpofang2pz.swift:32:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpofang2pz.swift:32:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n  \
    \  \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if arr[index] < minValue {\n                minValue = arr[index]\n \
    \               minIndex = index\n            }\n        }\n    }\n    \n    if\
    \ minIndex == arr.count {\n        return result\n    }\n    \n    if minIndex\
    \ == 0 {\n        result = [minValue, minIndex]\n    } else {\n        result\
    \ = [minValue, minIndex]\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmi0nmef6/tmpmi0nmef6.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba15b1c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba15aebbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba15aebb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba15aeba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmi0nmef6                        0x000055bcfcf7e76b <unavailable> + 5995

    5    libc.so.6                          0x00002ba15b3b0460 __libc_start_main +
    245

    6    tmpmi0nmef6                        0x000055bcfcf7e259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    if minIndex == -1\
    \ {\n        return result\n    }\n    for i := 0; i < len(arr); i++ {\n     \
    \   if arr[i] == minValue {\n            result.insert(minIndex, arr[i])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpyoqdk1pm.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpyoqdk1pm.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpyoqdk1pm.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpyoqdk1pm.swift:32:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmpyoqdk1pm.swift:32:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpyoqdk1pm.swift:32:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for i\
    \ := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpaqbsnnuj.swift:23:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpaqbsnnuj.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpaqbsnnuj.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] >= minValue {\n            if arr[index]\
    \ % 2 == 0 {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    if minIndex == arr.count {\n \
    \       return result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpb6rkumv_/tmpb6rkumv_.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0736d80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0736a77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0736a77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0736a767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb6rkumv_                        0x0000563ef6c686ac <unavailable> + 5804

    5    libc.so.6                          0x00002b0736f6c460 __libc_start_main +
    245

    6    tmpb6rkumv_                        0x0000563ef6c682b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minValue = arr[0]\n    var minIndex = 0\n    \n    for index in 1..<arr.count\
    \ {\n        if arr[index] < minValue {\n            minValue = arr[index]\n \
    \           minIndex = index\n        }\n    }\n    \n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpqnpdyh1v/tmpqnpdyh1v.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4899a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4896a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4896a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af48969f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnpdyh1v                        0x000055e34e38a70b <unavailable> + 5899

    5    libc.so.6                          0x00002af489b95460 __libc_start_main +
    245

    6    tmpqnpdyh1v                        0x000055e34e38a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value == minValue {\n            minIndex += 1\n\
    \        }\n        if value < minValue {\n            minValue = value\n    \
    \        minIndex = 1\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5wd6v9nj/tmp5wd6v9nj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f93bc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f938bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f938bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f938be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wd6v9nj                        0x00005559240566fb <unavailable> + 5883

    5    libc.so.6                          0x00002b1f93db4460 __libc_start_main +
    245

    6    tmp5wd6v9nj                        0x00005559240561e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minValue = arr[0]\n    var minIndex = 0\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n\
    \                minValue = arr[index]\n                minIndex = index\n   \
    \         }\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppdwx__wg/tmppdwx__wg.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9d96b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9d93acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9d93ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9d93ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdwx__wg                        0x0000561fbf3d470b <unavailable> + 5899

    5    libc.so.6                          0x00002ae9d98a1460 __libc_start_main +
    245

    6    tmppdwx__wg                        0x0000561fbf3d41f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int()\n    var minIndex = -1\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == 0 || arr[index] < minValue {\n                minValue = arr[index]\n   \
    \             minIndex = index\n            }\n        }\n    }\n    if minIndex\
    \ == -1 {\n        return result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpyt9qcw2j/tmpyt9qcw2j.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8bb6250c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8bb5f47b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8bb5f47988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8bb5f467b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyt9qcw2j                        0x0000562ffd683a14 <unavailable> + 6676

    5    libc.so.6                          0x00002b8bb643c460 __libc_start_main +
    245

    6    tmpyt9qcw2j                        0x0000562ffd6832b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   // Write your code here\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpwl8m03wi/tmpwl8m03wi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7cff88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7cfc7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7cfc7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7cfc7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwl8m03wi                        0x0000560906cb43bc <unavailable> + 5052

    5    libc.so.6                          0x00002ba7d0174460 __libc_start_main +
    245

    6    tmpwl8m03wi                        0x0000560906cb3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty\
    \ {\n        return []\n    }\n    var minValue = arr[0]\n    var minIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if arr[index] < minValue {\n                minValue = arr[index]\n     \
    \           minIndex = index\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmpkwcew0ku/tmpkwcew0ku.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd75cd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd759c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd759c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd759c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwcew0ku                        0x0000564ff7f0c7ab <unavailable> + 6059

    5    libc.so.6                          0x00002afd75ebd460 __libc_start_main +
    245

    6    tmpkwcew0ku                        0x0000564ff7f0c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuxfqve1o.swift:23:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuxfqve1o.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuxfqve1o.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dcbb8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dcb882561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8dcb882286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8dcb88213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8dcb881bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8dcb681e83 <unavailable> + 188035

    6    tmp293p2qbz                        0x000055570f5b5ff0 <unavailable> + 8176

    7    tmp293p2qbz                        0x000055570f5b57ee <unavailable> + 6126

    8    libc.so.6                          0x00002b8dcbd77460 __libc_start_main +
    245

    9    tmp293p2qbz                        0x000055570f5b52b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if minValue == arr[index] {\n\
    \                minIndex = index\n            } else {\n                if arr[index]\
    \ < minValue {\n                    minValue = arr[index]\n                  \
    \  minIndex = index\n                }\n            }\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpqtld3q2a/tmpqtld3q2a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b346a481c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b346a178b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b346a178988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b346a1777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqtld3q2a                        0x000055f29df2f70b <unavailable> + 5899

    5    libc.so.6                          0x00002b346a66d460 __libc_start_main +
    245

    6    tmpqtld3q2a                        0x000055f29df2f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var minValue = arr[0]\n    var minIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if arr[index] < minValue {\n                minValue = arr[index]\n     \
    \           minIndex = index\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqu59nkn8.swift:20:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   // write your code here\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp10e66_va/tmp10e66_va.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f7a2a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f79fa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f79fa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f79f9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10e66_va                        0x000055a614b873bc <unavailable> + 5052

    5    libc.so.6                          0x00002b1f7a495460 __libc_start_main +
    245

    6    tmp10e66_va                        0x000055a614b86fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    for i := 1; i < len(arr); i++ {\n\
    \        if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpzvmb83ei.swift:22:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpzvmb83ei.swift:22:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpzvmb83ei.swift:22:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   // write your code here\n    var result = [Int]()\n    var minValue = arr[0]\n\
    \    var minIndex = 0\n    \n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            if arr[index] < minValue {\n                minValue\
    \ = arr[index]\n                minIndex = index\n            }\n        }\n \
    \   }\n    \n    result.append(minValue)\n    result.append(minIndex)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmpoz49us5h/tmpoz49us5h.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc44040c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc43d37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc43d37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc43d367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoz49us5h                        0x0000564314c697cb <unavailable> + 6091

    5    libc.so.6                          0x00002acc4422c460 __libc_start_main +
    245

    6    tmpoz49us5h                        0x0000564314c692b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              if minIndex == -1 {\n                    minIndex = index\n   \
    \             } else if arr[index] < minValue {\n                    minValue\
    \ = arr[index]\n                    minIndex = index\n                }\n    \
    \        }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpzwj7hflu/tmpzwj7hflu.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4e8a2cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab4e8723b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab4e8723988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4e87227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwj7hflu                        0x000055c1fd9867cb <unavailable> + 6091

    5    libc.so.6                          0x00002ab4e8c18460 __libc_start_main +
    245

    6    tmpzwj7hflu                        0x000055c1fd9862b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex\
    \ = 0\n    \n    for i in arr {\n        if smallestValue == i {\n           \
    \ smallestIndex += 1\n        } else {\n            if smallestIndex == 0 {\n\
    \                smallestValue = i\n                smallestIndex = 1\n      \
    \      } else {\n                if smallestValue < i {\n                    smallestValue\
    \ = i\n                    smallestIndex = 1\n                } else {\n     \
    \               smallestIndex += 1\n                }\n            }\n       \
    \ }\n    }\n    \n    if smallestIndex == 0 {\n        return result\n    } else\
    \ {\n        if smallestIndex == 1 {\n            return [ smallestValue, smallestIndex\
    \ ]\n        } else {\n            return [ smallestValue, smallestIndex ]\n \
    \       }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpbu3o95qk/tmpbu3o95qk.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b525b3dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b525b0d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b525b0d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b525b0d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbu3o95qk                        0x000055f5d7d855dc <unavailable> + 5596

    5    libc.so.6                          0x00002b525b5ca460 __libc_start_main +
    245

    6    tmpbu3o95qk                        0x000055f5d7d851e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    if smallest != 0 {\n        result = [smallest, smallestIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpys70almb/tmpys70almb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77909bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77906b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77906b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77906b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpys70almb                        0x0000555d39686954 <unavailable> + 6484

    5    libc.so.6                          0x00002b7790bab460 __libc_start_main +
    245

    6    tmpys70almb                        0x0000555d396861f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty\
    \ {\n        return []\n    }\n    \n    var minValue = arr[0]\n    var minIndex\
    \ = 0\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0\
    \ {\n            if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxxtrmd3c/tmpxxtrmd3c.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fb5289c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fb4f80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fb4f80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fb4f7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxtrmd3c                        0x000056434ec137ab <unavailable> + 6059

    5    libc.so.6                          0x00002b5fb5475460 __libc_start_main +
    245

    6    tmpxxtrmd3c                        0x000056434ec13299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minVal = arr[0]\n    var minIndex = 0\n    \n    for i in arr {\n    \
    \    if i % 2 == 0 {\n            if minVal < i {\n                minVal = i\n\
    \                minIndex = i\n            }\n        }\n    }\n    \n    return\
    \ [minVal, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp_vtebf8f/tmp_vtebf8f.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aef375a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef3729bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aef3729b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aef3729a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vtebf8f                        0x000055d8ad90061c <unavailable> + 5660

    5    libc.so.6                          0x00002aef37790460 __libc_start_main +
    245

    6    tmp_vtebf8f                        0x000055d8ad900229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n        \
    \        minIndex += 1\n            } else {\n                minValue = i\n \
    \               minIndex = 1\n            }\n        } else {\n            if\
    \ minValue == i {\n                minIndex += 1\n            }\n        }\n \
    \   }\n    if minIndex == 0 {\n        return result\n    }\n    if minIndex ==\
    \ 1 {\n        return [minValue, minIndex]\n    }\n    var minIndex2 = 0\n   \
    \ var minValue2 = arr[0]\n    for i in arr {\n        if i % 2 == 0 {\n      \
    \      if minValue2 == i {\n                minIndex2 += 1\n            } else\
    \ {\n                minValue2 = i\n                minIndex2 = 1\n          \
    \  }\n        } else {\n            if minValue2 == i {\n                minIndex2\
    \ += 1\n            }\n        }\n    }\n    if minIndex2 == 1 {\n        return\
    \ [minValue2, minIndex2]\n    }\n    if minIndex2 == 2 {\n        if minIndex\
    \ < minIndex2 {\n            return [minValue, minIndex]\n        } else {\n \
    \           return [minValue2, minIndex2]\n        }\n    }\n    if minIndex2\
    \ < minIndex {\n        return [minValue2, minIndex2]\n    } else {\n        return\
    \ [minValue, minIndex]\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d2f662c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d2f359561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7d2f359286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7d2f35913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7d2f358bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b7d2f158e83 <unavailable> + 188035

    6    tmpev5gqlmz                        0x0000561b2f6b600c <unavailable> + 8204

    7    tmpev5gqlmz                        0x0000561b2f6b57ae <unavailable> + 6062

    8    libc.so.6                          0x00002b7d2f84e460 __libc_start_main +
    245

    9    tmpev5gqlmz                        0x0000561b2f6b5279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if minValue == arr[index] {\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpcdeuz93q/tmpcdeuz93q.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9943b4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9943843b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9943843988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99438427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcdeuz93q                        0x000055f4de3905ec <unavailable> + 5612

    5    libc.so.6                          0x00002b9943d38460 __libc_start_main +
    245

    6    tmpcdeuz93q                        0x000055f4de3901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = 0\n\
    \    var index = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < smallestEven\
    \ {\n            smallestEven = arr[i]\n            smallestIndex = i\n      \
    \  }\n        if arr[i] == smallestEven {\n            result.append(smallestEven)\n\
    \            result.append(smallestIndex)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpiieg_ym4.swift:24:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpiieg_ym4.swift:24:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpiieg_ym4.swift:24:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    var minIndex2 = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] >= minValue {\n            if arr[index]\
    \ % 2 == 0 {\n                if minIndex2 < index {\n                    minValue\
    \ = arr[index]\n                    minIndex = index\n                    minIndex2\
    \ = index\n                }\n            } else {\n                if minIndex2\
    \ < index {\n                    minValue = arr[index]\n                    minIndex\
    \ = index\n                    minIndex2 = index\n                }\n        \
    \    }\n        }\n    }\n    return [minValue, minIndex, minIndex2]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp4j0ndz73/tmp4j0ndz73.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abef7665c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abef735cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abef735c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abef735b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4j0ndz73                        0x000055f81f8495ec <unavailable> + 5612

    5    libc.so.6                          0x00002abef7851460 __libc_start_main +
    245

    6    tmp4j0ndz73                        0x000055f81f8491f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for i in 1..<arr.count\
    \ {\n        if arr[i] < minValue {\n            minValue = arr[i]\n         \
    \   minIndex = i\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpla9qzfm_/tmpla9qzfm_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b665b1bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b665aeb5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b665aeb5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b665aeb47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpla9qzfm_                        0x000055b083c8870b <unavailable> + 5899

    5    libc.so.6                          0x00002b665b3aa460 __libc_start_main +
    245

    6    tmpla9qzfm_                        0x000055b083c881f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuxfqve1o.swift:23:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuxfqve1o.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuxfqve1o.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestEven == arr[index] {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    if\
    \ smallestIndex == arr.count {\n        return result\n    }\n    result.insert(smallestEven,\
    \ smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\n\
    assert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0,\
    \ 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr:\
    \ [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpwe8xnx0e.swift:34:12: error: no exact matches in call to instance\
    \ method 'insert'\n    result.insert(smallestEven, smallestIndex)\n          \
    \ ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty\
    \ {\n        return []\n    }\n    var minValue = arr[0]\n    var minIndex = 0\n\
    \    var minIndex2 = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            if arr[index] < minValue {\n                minValue\
    \ = arr[index]\n                minIndex = index\n            }\n            if\
    \ arr[index] < minIndex2 {\n                minIndex2 = index\n            }\n\
    \        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpz5lke8dp/tmpz5lke8dp.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2de7f24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2de7c1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2de7c1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2de7c1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz5lke8dp                        0x00005588826dd7ab <unavailable> + 6059

    5    libc.so.6                          0x00002b2de8110460 __libc_start_main +
    245

    6    tmpz5lke8dp                        0x00005588826dd299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpw71ndjuq/tmpw71ndjuq.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9eed506c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9eed1fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9eed1fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9eed1fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw71ndjuq                        0x000055d33c5257cb <unavailable> + 6091

    5    libc.so.6                          0x00002b9eed6f2460 __libc_start_main +
    245

    6    tmpw71ndjuq                        0x000055d33c5252b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    if arr.isEmpty() {\n        return result\n\
    \    }\n    \n    var smallestEvenValue: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n\
    \            if smallestEvenValue == 0 || arr[index] < smallestEvenValue {\n \
    \               smallestEvenValue = arr[index]\n                smallestIndex\
    \ = index\n            }\n        }\n    }\n    \n    if smallestEvenValue !=\
    \ 0 {\n        result.insert(smallestEvenValue, at: smallestIndex)\n    }\n  \
    \  \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp2hzgarh7.swift:23:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 1..<arr.count {\n\
    \        if arr[index] < minValue {\n            minValue = arr[index]\n     \
    \       minIndex = index\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpej2rj6pu/tmpej2rj6pu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c6da19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c6d710b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c6d710988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c6d70f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej2rj6pu                        0x000055609869270b <unavailable> + 5899

    5    libc.so.6                          0x00002b8c6dc05460 __libc_start_main +
    245

    6    tmpej2rj6pu                        0x00005560986921f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 1..<arr.count {\n\
    \        if arr[index] < minValue {\n            minValue = arr[index]\n     \
    \       minIndex = index\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpej2rj6pu/tmpej2rj6pu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c6da19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c6d710b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c6d710988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c6d70f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej2rj6pu                        0x000055609869270b <unavailable> + 5899

    5    libc.so.6                          0x00002b8c6dc05460 __libc_start_main +
    245

    6    tmpej2rj6pu                        0x00005560986921f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b3310107c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b330fdfe561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b330fdfe286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b330fdfe13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b330fdfdbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b330fbfde83 <unavailable> + 188035

    6    tmpfjdt0d9o                        0x000055c3bcae1ff0 <unavailable> + 8176

    7    tmpfjdt0d9o                        0x000055c3bcae17ee <unavailable> + 6126

    8    libc.so.6                          0x00002b33102f3460 __libc_start_main +
    245

    9    tmpfjdt0d9o                        0x000055c3bcae12b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpq4wmr_u1.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpq4wmr_u1.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpq4wmr_u1.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result = [minValue,\
    \ minIndex]\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp689snx4l.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp689snx4l.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp689snx4l.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n\
    \                minValue = arr[index]\n                minIndex = index\n   \
    \         }\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp28bvixyo/tmp28bvixyo.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6ab0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6aad97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6aad97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6aad967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28bvixyo                        0x000056371b06970b <unavailable> + 5899

    5    libc.so.6                          0x00002af6ab28c460 __libc_start_main +
    245

    6    tmp28bvixyo                        0x000056371b0691f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfm8gjmz2/tmpfm8gjmz2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8beac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8be7bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8be7bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8be7bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm8gjmz2                        0x000055786b8fd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002af8becb1460 __libc_start_main +
    245

    6    tmpfm8gjmz2                        0x000055786b8fd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dcbb8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dcb882561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8dcb882286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8dcb88213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8dcb881bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8dcb681e83 <unavailable> + 188035

    6    tmp293p2qbz                        0x000055570f5b5ff0 <unavailable> + 8176

    7    tmp293p2qbz                        0x000055570f5b57ee <unavailable> + 6126

    8    libc.so.6                          0x00002b8dcbd77460 __libc_start_main +
    245

    9    tmp293p2qbz                        0x000055570f5b52b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestValue < arr[index] {\n                smallestValue = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmkcqhiul/tmpmkcqhiul.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83641c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8363ec0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8363ec0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8363ebf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmkcqhiul                        0x0000565451c436ac <unavailable> + 5804

    5    libc.so.6                          0x00002b83643b5460 __libc_start_main +
    245

    6    tmpmkcqhiul                        0x0000565451c432b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for i := 1; i < len(arr); i++ {\n\
    \        if arr[i] < minValue {\n            minValue = arr[i]\n            minIndex\
    \ = i\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1us2jvlm.swift:22:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp1us2jvlm.swift:22:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp1us2jvlm.swift:22:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int64(0)\n    var minIndex = -1\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    if minIndex == -1 {\n        return\
    \ result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp1mswxg52.swift:26:31: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                minValue = arr[index]\n                   \
    \        ~~~^~~~~~~\n                           Int64(    )\n/tmp/tmp1mswxg52.swift:34:19:\
    \ error: cannot convert value of type 'Int64' to expected argument type 'Int'\n\
    \    result.append(minValue)\n                  ^\n                  Int(    )\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestValue == arr[index] {\n                smallestIndex = index\n\
    \            } else {\n                if smallestValue < arr[index] {\n     \
    \               smallestValue = arr[index]\n                    smallestIndex\
    \ = index\n                }\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdzp5ip1q/tmpdzp5ip1q.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73703a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7370099b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7370099988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73700987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzp5ip1q                        0x000055b5ab0e96ac <unavailable> + 5804

    5    libc.so.6                          0x00002b737058e460 __libc_start_main +
    245

    6    tmpdzp5ip1q                        0x000055b5ab0e92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallest = 0\n    var smallestIndex = 0\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] % 2 == 0 {\n            if smallest\
    \ == 0 {\n                smallest = arr[i]\n                smallestIndex = i\n\
    \            } else {\n                if arr[i] < smallest {\n              \
    \      smallest = arr[i]\n                    smallestIndex = i\n            \
    \    }\n            }\n        }\n    }\n    if smallest != 0 {\n        result\
    \ = append(result, smallest)\n        result = append(result, smallestIndex)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp0d_zrso_.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp0d_zrso_.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp0d_zrso_.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp0d_zrso_.swift:37:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallest)\n\
    \                 ^~~~~~\n/tmp/tmp0d_zrso_.swift:38:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if arr[index] < smallestValue {\n                smallestValue = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp2r7vypwc/tmp2r7vypwc.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afdafb03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afdaf7fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afdaf7fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afdaf7f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2r7vypwc                        0x0000557014ce87cb <unavailable> + 6091

    5    libc.so.6                          0x00002afdafcef460 __libc_start_main +
    245

    6    tmp2r7vypwc                        0x0000557014ce82b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 1..<arr.count {\n\
    \        if arr[index] < minValue {\n            minValue = arr[index]\n     \
    \       minIndex = index\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpej2rj6pu/tmpej2rj6pu.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c6da19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c6d710b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c6d710988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c6d70f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej2rj6pu                        0x000055609869270b <unavailable> + 5899

    5    libc.so.6                          0x00002b8c6dc05460 __libc_start_main +
    245

    6    tmpej2rj6pu                        0x00005560986921f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ > arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        } else {\n            if minValue == arr[index]\
    \ {\n                minIndex = index\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpg_5o7wpk/tmpg_5o7wpk.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba25d633c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25d32ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25d32a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba25d3297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg_5o7wpk                        0x000055e02ced47cb <unavailable> + 6091

    5    libc.so.6                          0x00002ba25d81f460 __libc_start_main +
    245

    6    tmpg_5o7wpk                        0x000055e02ced42b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfm8gjmz2/tmpfm8gjmz2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8beac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8be7bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8be7bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8be7bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm8gjmz2                        0x000055786b8fd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002af8becb1460 __libc_start_main +
    245

    6    tmpfm8gjmz2                        0x000055786b8fd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value % 2 == 0 {\n            if value < minValue\
    \ {\n                minValue = value\n                minIndex = arr.index(value)\n\
    \            }\n        } else {\n            if value < minValue {\n        \
    \        minValue = value\n                minIndex = arr.index(value)\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqdtcd347.swift:27:32: error: no exact matches in call to instance\
    \ method 'index'\n                minIndex = arr.index(value)\n              \
    \                 ^\nSwift.Array:7:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(after:)')\n    @inlinable public func index(after i: Int)\
    \ -> Int\n                           ^\nSwift.Array:9:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n/tmp/tmpqdtcd347.swift:32:32:\
    \ error: no exact matches in call to instance method 'index'\n               \
    \ minIndex = arr.index(value)\n                               ^\nSwift.Array:7:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Int) -> Int\n                     \
    \      ^\nSwift.Array:9:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(before:)')\n    @inlinable public func index(before i: Int) -> Int\n\
    \                           ^\nSwift.RandomAccessCollection:3:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(after:)')\n    @inlinable public\
    \ func index(after i: Self.Index) -> Self.Index\n                           ^\n\
    Swift.RandomAccessCollection:4:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(before:)')\n    @inlinable public func index(before i: Self.Index)\
    \ -> Self.Index\n                           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if arr[index] < smallestEven {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    if\
    \ smallestIndex == 0 {\n        return result\n    }\n    result.insert(smallestEven,\
    \ smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\n\
    assert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0,\
    \ 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr:\
    \ [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp7rxi0ash.swift:34:12: error: no exact matches in call to instance\
    \ method 'insert'\n    result.insert(smallestEven, smallestIndex)\n          \
    \ ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqut7mqla.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpqut7mqla.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpqut7mqla.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    for index in 0..<arr.count {\n\
    \        if arr[index] >= minValue {\n            if arr[index] % 2 == 0 {\n \
    \               minValue = arr[index]\n                minIndex = index\n    \
    \        }\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0de92qwf/tmp0de92qwf.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad8c2ea0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8c2b97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8c2b97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8c2b967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0de92qwf                        0x0000558b9f32e5ec <unavailable> + 5612

    5    libc.so.6                          0x00002ad8c308c460 __libc_start_main +
    245

    6    tmp0de92qwf                        0x0000558b9f32e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int()\n    var minIndex = -1\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpygh2dnsy.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpygh2dnsy.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpygh2dnsy.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int64(0)\n    var minIndex = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    if minIndex == -1\
    \ {\n        return result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp6goxlbu5.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp6goxlbu5.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp6goxlbu5.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp6goxlbu5.swift:32:19:\
    \ error: cannot convert value of type 'Int64' to expected argument type 'Int'\n\
    \    result.append(minValue)\n                  ^\n                  Int(    )\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    if arr.isEmpty() {\n        return result\n\
    \    }\n    \n    var smallestEvenValue = arr[0]\n    var smallestIndex = 0\n\
    \    \n    for index in 1..<arr.count {\n        if arr[index] % 2 == 0 {\n  \
    \          if arr[index] < smallestEvenValue {\n                smallestEvenValue\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    \n    if smallestEvenValue == 0 {\n        return result\n   \
    \ }\n    \n    result.insert(smallestEvenValue, at: smallestIndex)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp659thpsx.swift:23:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   // Write your code here\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpwl8m03wi/tmpwl8m03wi.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba7cff88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba7cfc7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba7cfc7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba7cfc7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwl8m03wi                        0x0000560906cb43bc <unavailable> + 5052

    5    libc.so.6                          0x00002ba7d0174460 __libc_start_main +
    245

    6    tmpwl8m03wi                        0x0000560906cb3fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              if arr[index] < minValue {\n                    minValue = arr[index]\n\
    \                    minIndex = index\n                }\n            }\n    \
    \    }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmp2o20srlb/tmp2o20srlb.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10c0da6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10c0a9db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10c0a9d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10c0a9c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2o20srlb                        0x000055ce40d617cb <unavailable> + 6091

    5    libc.so.6                          0x00002b10c0f92460 __libc_start_main +
    245

    6    tmp2o20srlb                        0x000055ce40d612b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if minValue == arr[index] {\n\
    \                minIndex = index\n            }\n            else {\n       \
    \         if minIndex == 0 {\n                    minIndex = index\n         \
    \       }\n                else {\n                    if arr[index] < minValue\
    \ {\n                        minValue = arr[index]\n                        minIndex\
    \ = index\n                    }\n                }\n            }\n        }\n\
    \    }\n    \n    if minIndex == 0 {\n        return []\n    }\n    \n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpmsgl257b/tmpmsgl257b.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fb76aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fb73a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fb73a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fb73a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmsgl257b                        0x000055bd8ff535ec <unavailable> + 5612

    5    libc.so.6                          0x00002b6fb789a460 __libc_start_main +
    245

    6    tmpmsgl257b                        0x000055bd8ff531f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    if minValue % 2 ==\
    \ 0 {\n        result = [minValue, minIndex]\n    } else {\n        for i := 0;\
    \ i < len(arr); i++ {\n            if arr[i] % 2 == 0 {\n                result\
    \ = [arr[i], i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgn47e9c_.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpgn47e9c_.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpgn47e9c_.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpgn47e9c_.swift:32:16:\
    \ error: expected type\n        for i := 0; i < len(arr); i++ {\n            \
    \   ^\n                <#type#>\n/tmp/tmpgn47e9c_.swift:32:16: error: expected\
    \ 'in' after for-each pattern\n        for i := 0; i < len(arr); i++ {\n     \
    \          ^\n/tmp/tmpgn47e9c_.swift:32:16: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < len(arr); i++ {\n               ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEvenValue = 0\n    var smallestIndex = 0\n\
    \    for i := 0; i < len(arr); i++ {\n        if arr[i] % 2 == 0 {\n         \
    \   if smallestEvenValue == 0 {\n                smallestEvenValue = arr[i]\n\
    \                smallestIndex = i\n            } else {\n                if arr[i]\
    \ < smallestEvenValue {\n                    smallestEvenValue = arr[i]\n    \
    \                smallestIndex = i\n                }\n            }\n       \
    \ }\n    }\n    if smallestEvenValue != 0 {\n        result = append(result, smallestEvenValue)\n\
    \        result = append(result, smallestIndex)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpvt_diaky.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpvt_diaky.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpvt_diaky.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpvt_diaky.swift:37:18:\
    \ error: cannot find 'append' in scope\n        result = append(result, smallestEvenValue)\n\
    \                 ^~~~~~\n/tmp/tmpvt_diaky.swift:38:18: error: cannot find 'append'\
    \ in scope\n        result = append(result, smallestIndex)\n                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfm8gjmz2/tmpfm8gjmz2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8beac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8be7bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8be7bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8be7bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm8gjmz2                        0x000055786b8fd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002af8becb1460 __libc_start_main +
    245

    6    tmpfm8gjmz2                        0x000055786b8fd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty\
    \ {\n        return []\n    }\n    var minValue = arr[0]\n    var minIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if arr[index] < minValue {\n                minValue = arr[index]\n     \
    \           minIndex = index\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: Exception
  stderr: 'tmpkwcew0ku/tmpkwcew0ku.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd75cd1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd759c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd759c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd759c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwcew0ku                        0x0000564ff7f0c7ab <unavailable> + 6059

    5    libc.so.6                          0x00002afd75ebd460 __libc_start_main +
    245

    6    tmpkwcew0ku                        0x0000564ff7f0c299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n  \
    \  \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if arr[index] < minValue {\n                minValue = arr[index]\n \
    \               minIndex = index\n            }\n        }\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpv79shgev/tmpv79shgev.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28c8ee2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28c8bd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28c8bd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28c8bd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv79shgev                        0x0000563d6abf57cb <unavailable> + 6091

    5    libc.so.6                          0x00002b28c90ce460 __libc_start_main +
    245

    6    tmpv79shgev                        0x0000563d6abf52b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = 0\n\
    \    var index = 0\n    for element in arr {\n        if element % 2 == 0 {\n\
    \            if smallestEven == element {\n                smallestEven = element\n\
    \                smallestIndex = index\n            }\n        }\n        index\
    \ += 1\n    }\n    result = [smallestEven, smallestIndex]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpr3cr8d7k/tmpr3cr8d7k.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8eaa78c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8ea76fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8ea76f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8ea76e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3cr8d7k                        0x0000555970e4f66c <unavailable> + 5740

    5    libc.so.6                          0x00002af8eac64460 __libc_start_main +
    245

    6    tmpr3cr8d7k                        0x0000555970e4f279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var minValue = arr[0]\n    var minIndex = 0\n\
    \    var minIndex2 = 0\n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            if arr[index] < minValue {\n                minValue\
    \ = arr[index]\n                minIndex = index\n            }\n            if\
    \ arr[index] < minValue {\n                minValue = arr[index]\n           \
    \     minIndex2 = index\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex, minIndex2]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpkga50cnm.swift:20:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] >= minValue {\n            result.append(arr[index])\n\
    \            if arr[index] == minValue {\n                minIndex = index\n \
    \           }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmph_t4gy1s/tmph_t4gy1s.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ed618cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ed5e83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ed5e83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ed5e827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph_t4gy1s                        0x000055719b79b6ac <unavailable> + 5804

    5    libc.so.6                          0x00002b4ed6378460 __libc_start_main +
    245

    6    tmph_t4gy1s                        0x000055719b79b2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    for index in 1..<arr.count\
    \ {\n        if arr[index] < minValue {\n            minValue = arr[index]\n \
    \           minIndex = index\n        }\n    }\n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpumylhi_b/tmpumylhi_b.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b377b3c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b377b0bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b377b0bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b377b0ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpumylhi_b                        0x00005581d02a870b <unavailable> + 5899

    5    libc.so.6                          0x00002b377b5b0460 __libc_start_main +
    245

    6    tmpumylhi_b                        0x00005581d02a81f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    if minValue % 2 ==\
    \ 0 {\n        result = [minValue, minIndex]\n    } else {\n        for i := 0;\
    \ i < len(arr); i++ {\n            if arr[i] % 2 == 0 {\n                result\
    \ = [arr[i], i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpgn47e9c_.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpgn47e9c_.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpgn47e9c_.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmpgn47e9c_.swift:32:16:\
    \ error: expected type\n        for i := 0; i < len(arr); i++ {\n            \
    \   ^\n                <#type#>\n/tmp/tmpgn47e9c_.swift:32:16: error: expected\
    \ 'in' after for-each pattern\n        for i := 0; i < len(arr); i++ {\n     \
    \          ^\n/tmp/tmpgn47e9c_.swift:32:16: error: expected Sequence expression\
    \ for for-each loop\n        for i := 0; i < len(arr); i++ {\n               ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpa95kdb6f/tmpa95kdb6f.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cf13b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cf10afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cf10af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cf10ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa95kdb6f                        0x00005563136e56bc <unavailable> + 5820

    5    libc.so.6                          0x00002b0cf15a4460 __libc_start_main +
    245

    6    tmpa95kdb6f                        0x00005563136e52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] >= minValue {\n            if arr[index]\
    \ % 2 == 0 {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp4vsgl4mi/tmp4vsgl4mi.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0279d38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0279a2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0279a2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0279a2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vsgl4mi                        0x000056460d3336ac <unavailable> + 5804

    5    libc.so.6                          0x00002b0279f24460 __libc_start_main +
    245

    6    tmp4vsgl4mi                        0x000056460d3332b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value == minValue {\n            if minIndex == -1\
    \ {\n                minIndex = value\n            } else {\n                if\
    \ value < minValue {\n                    minValue = value\n                 \
    \   minIndex = value\n                }\n            }\n        } else {\n   \
    \         if value < minValue {\n                minValue = value\n          \
    \      minIndex = value\n            }\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp3x6ap1yl/tmp3x6ap1yl.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93d6bfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93d68f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93d68f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93d68f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x6ap1yl                        0x0000563916bb062c <unavailable> + 5676

    5    libc.so.6                          0x00002b93d6dea460 __libc_start_main +
    245

    6    tmp3x6ap1yl                        0x0000563916bb0239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ < arr[index] {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpi3g7ij4p/tmpi3g7ij4p.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad47c4dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad47c1d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad47c1d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad47c1d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi3g7ij4p                        0x0000556fcce806ac <unavailable> + 5804

    5    libc.so.6                          0x00002ad47c6c7460 __libc_start_main +
    245

    6    tmpi3g7ij4p                        0x0000556fcce802b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n       \
    \         minValue = i\n                minIndex = i\n            }\n        }\
    \ else {\n            if minValue == i {\n                minIndex = i\n     \
    \       }\n        }\n    }\n    result = [minValue, minIndex]\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpm03mo_wz/tmpm03mo_wz.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d76cbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d769b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d769b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d769b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm03mo_wz                        0x0000560aa982f61c <unavailable> + 5660

    5    libc.so.6                          0x00002b3d76ea8460 __libc_start_main +
    245

    6    tmpm03mo_wz                        0x0000560aa982f229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEven = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestEven > arr[index] {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    result\
    \ = [smallestEven, smallestIndex]\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpi6_22008/tmpi6_22008.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27e9d84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27e9a7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27e9a7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27e9a7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi6_22008                        0x000055779aa9376b <unavailable> + 5995

    5    libc.so.6                          0x00002b27e9f70460 __libc_start_main +
    245

    6    tmpi6_22008                        0x000055779aa93259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    for index in 0..<arr.count {\n        if arr[index]\
    \ % 2 == 0 {\n            result.append(arr[index])\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpspv39c98/tmpspv39c98.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab89d957c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab89d64eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab89d64e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab89d64d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspv39c98                        0x000055638bf1b6ac <unavailable> + 5804

    5    libc.so.6                          0x00002ab89db43460 __libc_start_main +
    245

    6    tmpspv39c98                        0x000055638bf1b2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestIndex = 0\n    var smallestValue = arr[0]\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestValue == arr[index] {\n                smallestIndex = index\n\
    \            } else {\n                smallestValue = arr[index]\n          \
    \      smallestIndex = index\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4e30ff9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4e30cf0561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4e30cf0286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4e30cf013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4e30cefbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4e30aefe83 <unavailable> + 188035

    6    tmp6gw0wtwa                        0x000055a6f69f5ff0 <unavailable> + 8176

    7    tmp6gw0wtwa                        0x000055a6f69f57ee <unavailable> + 6126

    8    libc.so.6                          0x00002b4e311e5460 __libc_start_main +
    245

    9    tmp6gw0wtwa                        0x000055a6f69f52b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = -1\n        }\n        if value == minValue {\n      \
    \      minIndex += 1\n        }\n    }\n    if minIndex == -1 {\n        return\
    \ result\n    }\n    result.insert(minIndex, minValue)\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpztiv918t.swift:35:12: error: no exact matches in call to instance\
    \ method 'insert'\n    result.insert(minIndex, minValue)\n           ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty()\
    \ {\n        return []\n    }\n    var minValue = arr[0]\n    var minIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] >= minValue {\n     \
    \       if arr[index] % 2 == 0 {\n                minValue = arr[index]\n    \
    \            minIndex = index\n            }\n        }\n    }\n    return [minValue,\
    \ minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2, 3])\
    \ == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as\
    \ [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr:\
    \ [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\n\
    assert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) ==\
    \ [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpb5nvbce5.swift:20:12: error: cannot call value of non-function\
    \ type 'Bool'\n    if arr.isEmpty() {\n           ^      ~~\n                \
    \  \n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i in arr {\n        if i % 2 == 0 {\n            if minValue == i {\n      \
    \          minIndex = i\n            } else {\n                minValue = i\n\
    \                minIndex = i\n            }\n        } else {\n            if\
    \ minIndex == -1 {\n                minIndex = i\n            } else {\n     \
    \           if minIndex != i {\n                    minIndex = i\n           \
    \     }\n            }\n        }\n    }\n    if minIndex == -1 {\n        return\
    \ result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpo75_7at4/tmpo75_7at4.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74afba4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74af89bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74af89b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74af89a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo75_7at4                        0x000055fa241e96bc <unavailable> + 5820

    5    libc.so.6                          0x00002b74afd90460 __libc_start_main +
    245

    6    tmpo75_7at4                        0x000055fa241e92c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpuxfqve1o.swift:23:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpuxfqve1o.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpuxfqve1o.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpq4wmr_u1.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpq4wmr_u1.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpq4wmr_u1.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEvenIndex = 0\n    var smallestEvenValue =\
    \ arr[0]\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n\
    \            if smallestEvenValue > arr[index] {\n                smallestEvenValue\
    \ = arr[index]\n                smallestEvenIndex = index\n            }\n   \
    \     }\n    }\n    result.append(smallestEvenValue)\n    result.append(smallestEvenIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxj5eucwj/tmpxj5eucwj.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ee0141c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5edfe38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5edfe38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5edfe377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxj5eucwj                        0x0000561b462a17cb <unavailable> + 6091

    5    libc.so.6                          0x00002b5ee032d460 __libc_start_main +
    245

    6    tmpxj5eucwj                        0x0000561b462a12b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue > i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpa95kdb6f/tmpa95kdb6f.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0cf13b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0cf10afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0cf10af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0cf10ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa95kdb6f                        0x00005563136e56bc <unavailable> + 5820

    5    libc.so.6                          0x00002b0cf15a4460 __libc_start_main +
    245

    6    tmpa95kdb6f                        0x00005563136e52c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var index: Int = 0\n    for value in arr {\n        if value < smallest\
    \ {\n            smallest = value\n            smallestIndex = index\n       \
    \ }\n        if value == smallest {\n            result.append(value)\n      \
    \      index += 1\n        }\n    }\n    if result.isEmpty {\n        return result\n\
    \    }\n    if smallest == 0 {\n        return result\n    }\n    if smallest\
    \ == arr[0] {\n        return result\n    }\n    if smallest == arr[1] {\n   \
    \     return result\n    }\n    if smallest == arr[2] {\n        return result\n\
    \    }\n    if smallest == arr[3] {\n        return result\n    }\n    if smallest\
    \ == arr[4] {\n        return result\n    }\n    if smallest == arr[5] {\n   \
    \     return result\n    }\n    if smallest == arr[6] {\n        return result\n\
    \    }\n    if smallest == arr[7] {\n        return result\n    }\n    if smallest\
    \ == arr[8] {\n        return result\n    }\n    if smallest == arr[9] {\n   \
    \     return result\n    }\n    if smallest == arr[10] {\n        return result\n\
    \    }\n    if smallest == arr[11] {\n        return result\n    }\n    if smallest\
    \ == arr[12] {\n        return result\n    }\n    if smallest == arr[13] {\n \
    \       return result\n    }\n    if smallest == arr[14] {\n        return result\n\
    \    }\n    if smallest == arr[15] {\n        return result\n    }\n    if smallest\
    \ == arr[16] {\n        return result\n    }\n    if smallest == arr[17] {\n \
    \       return result\n    }\n    if smallest == arr[18] {\n        return result\n\
    \    }\n    if smallest == arr[19] {\n        return result\n    }\n    if smallest\
    \ == arr[20] {\n        return result\n    }\n    if smallest == arr[21] {\n \
    \       return result\n    }\n    if smallest == arr[22] {\n        return result\n\
    \    }\n    if smallest == arr[23] {\n        return result\n    }\n    if smallest\
    \ == arr[24] {\n        return result\n    }\n    if smallest == arr[25] {\n \
    \       return result\n    }\n    if smallest == arr[26] {\n        return result\n\
    \    }\n    if smallest == arr[27] {\n        return result\n    }\n    if smallest\
    \ == arr[28] {\n        return result\n    }\n    if smallest == arr[29] {\n \
    \       return result\n    }\n    if smallest == arr[30] {\n        return result\n\
    \    }\n    if smallest == arr[31] {\n        return result\n    }\n    if smallest\
    \ == arr[32] {\n        return result\n    }\n    if smallest == arr[33] {\n \
    \       return result\n    }\n    if smallest == arr[34] {\n        return result\n\
    \    }\n    if smallest == arr[35] {\n        return result\n    }\n    if smallest\
    \ == arr[36] {\n        return result\n    }\n    if smallest == arr[37] {\n \
    \       return result\n    }\n    if smallest == arr[38] {\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp4rbg7gpn.swift:177:48: error: expected '}' at end of brace statement\n\
    assert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])\n                            \
    \                   ^\n/tmp/tmp4rbg7gpn.swift:19:33: note: to match this opening\
    \ '{'\nfunc pluck(arr: [Int]) -> [Int] {\n                                ^\n\
    /tmp/tmp4rbg7gpn.swift:158:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmp4rbg7gpn.swift:22:9: warning: variable 'smallestIndex'\
    \ was written to, but never read\n    var smallestIndex: Int = 0\n        ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result = [minValue,\
    \ minIndex]\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp689snx4l.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp689snx4l.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp689snx4l.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minValue = arr[0]\n    var minIndex = 0\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n\
    \                minValue = arr[index]\n                minIndex = index\n   \
    \         }\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppdwx__wg/tmppdwx__wg.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9d96b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9d93acb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9d93ac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9d93ab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppdwx__wg                        0x0000561fbf3d470b <unavailable> + 5899

    5    libc.so.6                          0x00002ae9d98a1460 __libc_start_main +
    245

    6    tmppdwx__wg                        0x0000561fbf3d41f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpqut7mqla.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpqut7mqla.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpqut7mqla.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              if minIndex == 0 {\n                    minIndex = index\n    \
    \            } else {\n                    if minIndex < index {\n           \
    \             minIndex = index\n                    }\n                }\n   \
    \         }\n        }\n    }\n    if minIndex == 0 {\n        return result\n\
    \    }\n    if minIndex < arr.count {\n        result.insert(minIndex, arr[minIndex])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpap0h_qob.swift:42:16: error: no exact matches in call to instance\
    \ method 'insert'\n        result.insert(minIndex, arr[minIndex])\n          \
    \     ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value == minValue {\n            minIndex = arr.index(value)\n\
    \        }\n        if value % 2 == 0 {\n            result.append(value)\n  \
    \      }\n    }\n    if minIndex == -1 {\n        return result\n    }\n    return\
    \ result[minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp40_uvpm_.swift:25:28: error: no exact matches in call to instance\
    \ method 'index'\n            minIndex = arr.index(value)\n                  \
    \         ^\nSwift.Array:7:28: note: incorrect labels for candidate (have: '(_:)',\
    \ expected: '(after:)')\n    @inlinable public func index(after i: Int) -> Int\n\
    \                           ^\nSwift.Array:9:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(before:)')\n    @inlinable public func index(before\
    \ i: Int) -> Int\n                           ^\nSwift.RandomAccessCollection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(after:)')\n\
    \    @inlinable public func index(after i: Self.Index) -> Self.Index\n       \
    \                    ^\nSwift.RandomAccessCollection:4:28: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public func\
    \ index(before i: Self.Index) -> Self.Index\n                           ^\n/tmp/tmp40_uvpm_.swift:34:18:\
    \ error: cannot convert return expression of type 'Int' to return type '[Int]'\n\
    \    return result[minIndex]\n           ~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n  \
    \  \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if arr[index] < minValue {\n                minValue = arr[index]\n \
    \               minIndex = index\n            }\n        }\n    }\n    \n    if\
    \ minIndex == arr.count {\n        return arr\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp5pawsq4y/tmp5pawsq4y.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b622be7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b622bb72b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b622bb72988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b622bb717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5pawsq4y                        0x00005620e5caa7cb <unavailable> + 6091

    5    libc.so.6                          0x00002b622c067460 __libc_start_main +
    245

    6    tmp5pawsq4y                        0x00005620e5caa2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if minValue < arr[index] {\n\
    \                minValue = arr[index]\n                minIndex = index\n   \
    \         }\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmppwtc2j99/tmppwtc2j99.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff92873c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff9256ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff9256a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff925697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppwtc2j99                        0x0000564cef1505ec <unavailable> + 5612

    5    libc.so.6                          0x00002aff92a5f460 __libc_start_main +
    245

    6    tmppwtc2j99                        0x0000564cef1501f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 && arr[index] < minValue {\n            minValue\
    \ = arr[index]\n            minIndex = index\n        }\n    }\n    \n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0ek18o9y/tmp0ek18o9y.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0b9b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0b6adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0b6ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0b6ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ek18o9y                        0x00005606682a370b <unavailable> + 5899

    5    libc.so.6                          0x00002b6b0bba2460 __libc_start_main +
    245

    6    tmp0ek18o9y                        0x00005606682a31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    if arr.isEmpty {\n        return result\n\
    \    }\n    \n    var smallestEven = arr[0]\n    var smallestIndex = 0\n    \n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestEven > arr[index] {\n                smallestEven = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    \n\
    \    if smallestEven > 0 {\n        result.insert(smallestEven, smallestIndex)\n\
    \    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpm8yphq_s.swift:40:16: error: no exact matches in call to instance\
    \ method 'insert'\n        result.insert(smallestEven, smallestIndex)\n      \
    \         ^\nSwift.Array:11:37: note: incorrect labels for candidate (have: '(_:_:)',\
    \ expected: '(_:at:)')\n    @inlinable public mutating func insert(_ newElement:\
    \ __owned Element, at i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    var even: Int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i]\
    \ % 2 == 0 {\n            even = arr[i]\n        } else {\n            if even\
    \ < smallest {\n                smallest = even\n                smallestIndex\
    \ = i\n            }\n            even = 0\n        }\n    }\n    if smallest\
    \ == 0 {\n        return result\n    }\n    result.insert(smallest, smallestIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphcw0e2va.swift:24:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmphcw0e2va.swift:24:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmphcw0e2va.swift:24:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmphcw0e2va.swift:38:12:\
    \ error: no exact matches in call to instance method 'insert'\n    result.insert(smallest,\
    \ smallestIndex)\n           ^\nSwift.Array:11:37: note: incorrect labels for\
    \ candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Element, at i: Int)\n                    \
    \                ^\nSwift.RangeReplaceableCollection:6:37: note: incorrect labels\
    \ for candidate (have: '(_:_:)', expected: '(_:at:)')\n    @inlinable public mutating\
    \ func insert(_ newElement: __owned Self.Element, at i: Self.Index)\n        \
    \                            ^\n"
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              result.append(minValue)\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    if minValue\
    \ != arr[0] {\n        result.append(minValue)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpsupexbaj/tmpsupexbaj.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23da427c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23da11eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23da11e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23da11d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsupexbaj                        0x00005607d43ea6ac <unavailable> + 5804

    5    libc.so.6                          0x00002b23da613460 __libc_start_main +
    245

    6    tmpsupexbaj                        0x00005607d43ea2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var smallest: Int = 0\n    var smallestIndex: Int =\
    \ 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if smallest == 0 || arr[index] < smallest {\n                smallest\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    if smallest != 0 {\n        result = [smallest, smallestIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpys70almb/tmpys70almb.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77909bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77906b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77906b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77906b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpys70almb                        0x0000555d39686954 <unavailable> + 6484

    5    libc.so.6                          0x00002b7790bab460 __libc_start_main +
    245

    6    tmpys70almb                        0x0000555d396861f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] >= minValue {\n            if arr[index]\
    \ % 2 == 0 {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp4vsgl4mi/tmp4vsgl4mi.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0279d38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0279a2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0279a2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0279a2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vsgl4mi                        0x000056460d3336ac <unavailable> + 5804

    5    libc.so.6                          0x00002b0279f24460 __libc_start_main +
    245

    6    tmp4vsgl4mi                        0x000056460d3332b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfm8gjmz2/tmpfm8gjmz2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8beac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8be7bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8be7bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8be7bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm8gjmz2                        0x000055786b8fd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002af8becb1460 __libc_start_main +
    245

    6    tmpfm8gjmz2                        0x000055786b8fd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEvenValue = arr[0]\n    var smallestIndex\
    \ = 0\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n  \
    \          if smallestEvenValue == arr[index] {\n                smallestIndex\
    \ = index\n            } else {\n                smallestEvenValue = arr[index]\n\
    \                smallestIndex = index\n            }\n        }\n    }\n    result.append(smallestEvenValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0d1a1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0d1714561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ab0d1714286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ab0d171413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ab0d1713bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ab0d1513e83 <unavailable> + 188035

    6    tmpmmqfkjzw                        0x0000559fe8a14fe8 <unavailable> + 8168

    7    tmpmmqfkjzw                        0x0000559fe8a147ee <unavailable> + 6126

    8    libc.so.6                          0x00002ab0d1c09460 __libc_start_main +
    245

    9    tmpmmqfkjzw                        0x0000559fe8a142b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfm8gjmz2/tmpfm8gjmz2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8beac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8be7bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8be7bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8be7bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm8gjmz2                        0x000055786b8fd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002af8becb1460 __libc_start_main +
    245

    6    tmpfm8gjmz2                        0x000055786b8fd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    if minValue % 2 ==\
    \ 0 {\n        result = [minValue, minIndex]\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpa_2d57de.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpa_2d57de.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpa_2d57de.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpfd5gea0s.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpfd5gea0s.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpfd5gea0s.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 1..<arr.count\
    \ {\n        if arr[index] < minValue {\n            minValue = arr[index]\n \
    \           minIndex = index\n        }\n    }\n    \n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxha0b8zl/tmpxha0b8zl.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d177f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d174f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d174f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d174ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxha0b8zl                        0x0000559c5369170b <unavailable> + 5899

    5    libc.so.6                          0x00002b0d179e5460 __libc_start_main +
    245

    6    tmpxha0b8zl                        0x0000559c536911f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 {\n            if arr[index] < minValue {\n\
    \                minValue = arr[index]\n                minIndex = index\n   \
    \         }\n        }\n    }\n    \n    return [minValue, minIndex]\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp28bvixyo/tmp28bvixyo.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6ab0a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6aad97b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6aad97988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6aad967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28bvixyo                        0x000056371b06970b <unavailable> + 5899

    5    libc.so.6                          0x00002af6ab28c460 __libc_start_main +
    245

    6    tmp28bvixyo                        0x000056371b0691f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    var minValue = arr[0]\n    var minIndex =\
    \ 0\n    \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n\
    \            if arr[index] < minValue {\n                minValue = arr[index]\n\
    \                minIndex = index\n            }\n        }\n    }\n    \n   \
    \ if minIndex == 0 {\n        return result\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmphd3s35rz/tmphd3s35rz.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b414f659c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b414f350b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b414f350988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b414f34f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphd3s35rz                        0x000055b9923da7cb <unavailable> + 6091

    5    libc.so.6                          0x00002b414f845460 __libc_start_main +
    245

    6    tmphd3s35rz                        0x000055b9923da2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestValue == arr[index] {\n                smallestIndex = index\n\
    \            } else {\n                smallestValue = arr[index]\n          \
    \      smallestIndex = index\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002adda5f34c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adda5c2b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adda5c2b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adda5c2b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adda5c2abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002adda5a2ae83 <unavailable> + 188035

    6    tmp9g3h6bf0                        0x00005587a8a43fe8 <unavailable> + 8168

    7    tmp9g3h6bf0                        0x00005587a8a437ee <unavailable> + 6126

    8    libc.so.6                          0x00002adda6120460 __libc_start_main +
    245

    9    tmp9g3h6bf0                        0x00005587a8a432b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int64(0)\n    var minIndex = -1\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    if minValue == 0 {\n\
    \        return result\n    }\n    for i := 0; i < len(arr); i++ {\n        if\
    \ arr[i] == minValue {\n            result.insert(arr[i], i)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp5jyikpjp.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp5jyikpjp.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp5jyikpjp.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp5jyikpjp.swift:32:12:\
    \ error: expected type\n    for i := 0; i < len(arr); i++ {\n           ^\n  \
    \          <#type#>\n/tmp/tmp5jyikpjp.swift:32:12: error: expected 'in' after\
    \ for-each pattern\n    for i := 0; i < len(arr); i++ {\n           ^\n/tmp/tmp5jyikpjp.swift:32:12:\
    \ error: expected Sequence expression for for-each loop\n    for i := 0; i < len(arr);\
    \ i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 0..<arr.count\
    \ {\n        if arr[index] % 2 == 0 && arr[index] < minValue {\n            minValue\
    \ = arr[index]\n            minIndex = index\n        }\n    }\n    \n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp0ek18o9y/tmp0ek18o9y.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0b9b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0b6adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0b6ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0b6ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ek18o9y                        0x00005606682a370b <unavailable> + 5899

    5    libc.so.6                          0x00002b6b0bba2460 __libc_start_main +
    245

    6    tmp0ek18o9y                        0x00005606682a31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minValue = arr[0]\n    var minIndex = 0\n    var minIndex2 = 0\n    for i :=\
    \ 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n        if arr[i] < minValue\
    \ {\n            minValue = arr[i]\n            minIndex2 = i\n        }\n   \
    \ }\n    return [minValue, minIndex, minIndex2]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp6ynwjnor.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmp6ynwjnor.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmp6ynwjnor.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpq4wmr_u1.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpq4wmr_u1.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpq4wmr_u1.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ i := 0; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result.append(minValue)\n\
    \    result.append(minIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) ==\
    \ [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5,\
    \ 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\n\
    assert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1])\
    \ == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpq4wmr_u1.swift:23:12: error: expected type\n    for i := 0; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpq4wmr_u1.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 0; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpq4wmr_u1.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 0; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var minIndex = 0\n    var minValue = arr[0]\n    \n    for index in 1..<arr.count\
    \ {\n        if arr[index] < minValue {\n            minValue = arr[index]\n \
    \           minIndex = index\n        }\n    }\n    \n    return [minValue, minIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpxha0b8zl/tmpxha0b8zl.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d177f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d174f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d174f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d174ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxha0b8zl                        0x0000559c5369170b <unavailable> + 5899

    5    libc.so.6                          0x00002b0d179e5460 __libc_start_main +
    245

    6    tmpxha0b8zl                        0x0000559c536911f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              if minIndex == -1 {\n                    minIndex = index\n   \
    \             } else {\n                    if minIndex < index {\n          \
    \              minIndex = index\n                    }\n                }\n  \
    \          }\n        }\n    }\n    if minIndex == -1 {\n        return result\n\
    \    }\n    result.append(minValue)\n    result.append(minIndex)\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpj0cxr7nv/tmpj0cxr7nv.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b206c269c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b206bf60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b206bf60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b206bf5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj0cxr7nv                        0x0000561f717f56ac <unavailable> + 5804

    5    libc.so.6                          0x00002b206c455460 __libc_start_main +
    245

    6    tmpj0cxr7nv                        0x0000561f717f52b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = -1\n        }\n        if value == minValue {\n      \
    \      minIndex += 1\n        }\n    }\n    if minIndex == -1 {\n        return\
    \ result\n    }\n    result.insert(minIndex, minValue)\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [1, 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpztiv918t.swift:35:12: error: no exact matches in call to instance\
    \ method 'insert'\n    result.insert(minIndex, minValue)\n           ^\nSwift.Array:11:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\nSwift.RangeReplaceableCollection:6:37:\
    \ note: incorrect labels for candidate (have: '(_:_:)', expected: '(_:at:)')\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Self.Element,\
    \ at i: Self.Index)\n                                    ^\n"
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpfm8gjmz2/tmpfm8gjmz2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af8beac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af8be7bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af8be7bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af8be7bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfm8gjmz2                        0x000055786b8fd7cb <unavailable> + 6091

    5    libc.so.6                          0x00002af8becb1460 __libc_start_main +
    245

    6    tmpfm8gjmz2                        0x000055786b8fd2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpwcvqqm2w/tmpwcvqqm2w.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8aa09c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8aa06c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8aa06c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8aa06bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcvqqm2w                        0x000055929b5ce6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b8aa0bb5460 __libc_start_main +
    245

    6    tmpwcvqqm2w                        0x000055929b5ce2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = Int64(0)\n    var minIndex = -1\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == 0 || arr[index] < minValue {\n                minValue = arr[index]\n   \
    \             minIndex = index\n            }\n        }\n    }\n    if minIndex\
    \ == -1 {\n        return result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmp0nd4rk2o.swift:26:31: error: cannot assign value of type 'Int'\
    \ to type 'Int64'\n                minValue = arr[index]\n                   \
    \        ~~~^~~~~~~\n                           Int64(    )\n/tmp/tmp0nd4rk2o.swift:34:19:\
    \ error: cannot convert value of type 'Int64' to expected argument type 'Int'\n\
    \    result.append(minValue)\n                  ^\n                  Int(    )\n"
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestEvenIndex = 0\n    var smallestEvenValue =\
    \ arr[0]\n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n\
    \            if smallestEvenValue == arr[index] {\n                smallestEvenIndex\
    \ = index\n            } else {\n                smallestEvenValue = arr[index]\n\
    \                smallestEvenIndex = index\n            }\n        }\n    }\n\
    \    result.append(smallestEvenValue)\n    result.append(smallestEvenIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af533742c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af533439561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af533439286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af53343913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af533438bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af533238e83 <unavailable> + 188035

    6    tmp7b22b0wn                        0x000055858a5aeff0 <unavailable> + 8176

    7    tmp7b22b0wn                        0x000055858a5ae7ee <unavailable> + 6126

    8    libc.so.6                          0x00002af53392e460 __libc_start_main +
    245

    9    tmp7b22b0wn                        0x000055858a5ae2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    if arr.isEmpty\
    \ {\n        return []\n    }\n    var minValue = arr[0]\n    var minIndex = 0\n\
    \    for i := 1; i < arr.count; i++ {\n        if arr[i] < minValue {\n      \
    \      minValue = arr[i]\n            minIndex = i\n        }\n    }\n    return\
    \ [minValue, minIndex]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpo_a0s0ub.swift:25:12: error: expected type\n    for i := 1; i <\
    \ arr.count; i++ {\n           ^\n            <#type#>\n/tmp/tmpo_a0s0ub.swift:25:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < arr.count;\
    \ i++ {\n           ^\n/tmp/tmpo_a0s0ub.swift:25:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 1; i < arr.count; i++ {\n       \
    \    ^\n"
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for i\
    \ in arr {\n        if i % 2 == 0 {\n            if minValue < i {\n         \
    \       minValue = i\n                minIndex = i\n            }\n        } else\
    \ {\n            if minValue == i {\n                minIndex = i\n          \
    \  }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpwcvqqm2w/tmpwcvqqm2w.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8aa09c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8aa06c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8aa06c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8aa06bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwcvqqm2w                        0x000055929b5ce6bc <unavailable> + 5820

    5    libc.so.6                          0x00002b8aa0bb5460 __libc_start_main +
    245

    6    tmpwcvqqm2w                        0x000055929b5ce2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = -1\n        }\n        if value == minValue {\n      \
    \      minIndex += 1\n        }\n    }\n    if minIndex == -1 {\n        return\
    \ result\n    }\n    result.append(minValue)\n    result.append(minIndex)\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp6paporbn/tmp6paporbn.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af761652c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af761349b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af761349988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7613487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6paporbn                        0x000056450482c62c <unavailable> + 5676

    5    libc.so.6                          0x00002af76183e460 __libc_start_main +
    245

    6    tmp6paporbn                        0x000056450482c239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    if arr.isEmpty {\n        return result\n\
    \    }\n    \n    var smallestEvenValue = arr[0]\n    var smallestIndex = 0\n\
    \    \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n  \
    \          if arr[index] < smallestEvenValue {\n                smallestEvenValue\
    \ = arr[index]\n                smallestIndex = index\n            }\n       \
    \ }\n    }\n    \n    if smallestEvenValue == arr[0] {\n        return [smallestEvenValue,\
    \ smallestIndex]\n    }\n    \n    if smallestIndex == 0 {\n        return result\n\
    \    }\n    \n    var resultIndex = 0\n    \n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if arr[index] < smallestEvenValue\
    \ {\n                result.append(smallestEvenValue)\n                result.append(index)\n\
    \                resultIndex += 1\n            }\n        }\n    }\n    \n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpej28mwpv/tmpej28mwpv.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b967a6c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b967a3bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b967a3bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b967a3bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpej28mwpv                        0x0000560942c4e73c <unavailable> + 5948

    5    libc.so.6                          0x00002b967a8b2460 __libc_start_main +
    245

    6    tmpej28mwpv                        0x0000560942c4e349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = -1\n    var minValue = arr[0]\n    for\
    \ value in arr {\n        if value < minValue {\n            minValue = value\n\
    \            minIndex = -1\n        }\n        if value == minValue {\n      \
    \      minIndex += 1\n        }\n    }\n    if minIndex == -1 {\n        return\
    \ result\n    }\n    if minIndex == 0 {\n        return [0]\n    }\n    if minIndex\
    \ == arr.count {\n        return arr\n    }\n    if minIndex == arr.count - 1\
    \ {\n        return arr\n    }\n    if minIndex == arr.count - 2 {\n        return\
    \ arr\n    }\n    if minIndex == arr.count - 3 {\n        return arr\n    }\n\
    \    if minIndex == arr.count - 4 {\n        return arr\n    }\n    if minIndex\
    \ == arr.count - 5 {\n        return arr\n    }\n    if minIndex == arr.count\
    \ - 6 {\n        return arr\n    }\n    if minIndex == arr.count - 7 {\n     \
    \   return arr\n    }\n    if minIndex == arr.count - 8 {\n        return arr\n\
    \    }\n    if minIndex == arr.count - 9 {\n        return arr\n    }\n    if\
    \ minIndex == arr.count - 10 {\n        return arr\n    }\n    if minIndex ==\
    \ arr.count - 11 {\n        return arr\n    }\n    if minIndex == arr.count -\
    \ 12 {\n        return arr\n    }\n    if minIndex == arr.count - 13 {\n     \
    \   return arr\n    }\n    if minIndex == arr.count - 14 {\n        return arr\n\
    \    }\n    if minIndex == arr.count - 15 {\n        return arr\n    }\n    if\
    \ minIndex == arr.count - 16 {\n        return arr\n    }\n    if minIndex ==\
    \ arr.count - 17 {\n        return arr\n    }\n    if minIndex == arr.count -\
    \ 18 {\n        return arr\n    }\n    if minIndex == arr.count - 19 {\n     \
    \   return arr\n    }\n    if minIndex == arr.count - 20 {\n        return arr\n\
    \    }\n    if minIndex == arr.count - 21 {\n        return arr\n    }\n    if\
    \ minIndex == arr.count - 22 {\n        return arr\n    }\n    if minIndex ==\
    \ arr.count - 23 {\n        return arr\n    }\n    if minIndex == arr.count -\
    \ 24 {\n        return arr\n    }\n    if minIndex == arr.count - 25 {\n     \
    \   return arr\n    }\n    if minIndex == arr.count - 26 {\n        return arr\n\
    \    }\n    if minIndex == arr.count - 27 {\n        return arr\n    }\n    if\
    \ minIndex == arr.count - 28 {\n        return arr\n    }\n    if minIndex ==\
    \ arr.count \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmphwork18w.swift:125:29: error: expected '{' after 'if' condition\n\
    \    if minIndex == arr.count \n                            ^\n/tmp/tmphwork18w.swift:20:9:\
    \ warning: variable 'result' was never mutated; consider changing to 'let' constant\n\
    \    var result = [Int]()\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    \n    if arr.isEmpty {\n        return result\n\
    \    }\n    \n    var smallestEvenValue = arr[0]\n    var smallestIndex = 0\n\
    \    \n    for i in 1..<arr.count {\n        if arr[i] < smallestEvenValue {\n\
    \            smallestEvenValue = arr[i]\n            smallestIndex = i\n     \
    \   }\n    }\n    \n    if smallestEvenValue == 0 {\n        return result\n \
    \   }\n    \n    result.append(smallestEvenValue)\n    result.append(smallestIndex)\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp6f1ne0by/tmp6f1ne0by.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b334a66fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b334a366b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b334a366988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b334a3657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6f1ne0by                        0x000055db5345385b <unavailable> + 6235

    5    libc.so.6                          0x00002b334a85b460 __libc_start_main +
    245

    6    tmp6f1ne0by                        0x000055db53453349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ minIndex = 0\n    var minValue = arr[0]\n    for index in 0..<arr.count {\n\
    \        if arr[index] % 2 == 0 {\n            if minValue < arr[index] {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    return [minValue, minIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1,\
    \ 2, 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpcx3p89wa/tmpcx3p89wa.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e845f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e842f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e842f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e842ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcx3p89wa                        0x000055cb46da35ec <unavailable> + 5612

    5    libc.so.6                          0x00002b2e847e5460 __libc_start_main +
    245

    6    tmpcx3p89wa                        0x000055cb46da31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   // write your code here\n    \n    return arr\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp10e66_va/tmp10e66_va.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f7a2a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f79fa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f79fa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f79f9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10e66_va                        0x000055a614b873bc <unavailable> + 5052

    5    libc.so.6                          0x00002b1f7a495460 __libc_start_main +
    245

    6    tmp10e66_va                        0x000055a614b86fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if arr[index]\
    \ < minValue {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result = [minValue, minIndex]\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpe_ipa_f1/tmpe_ipa_f1.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abffec45c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abffe93cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abffe93c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abffe93b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_ipa_f1                        0x0000564e02d5b70b <unavailable> + 5899

    5    libc.so.6                          0x00002abffee31460 __libc_start_main +
    245

    6    tmpe_ipa_f1                        0x0000564e02d5b1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n    for index\
    \ in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n            if minValue\
    \ == arr[index] {\n                minIndex = index\n            } else {\n  \
    \              minValue = arr[index]\n                minIndex = index\n     \
    \       }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8dcbb8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8dcb882561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8dcb882286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8dcb88213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8dcb881bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8dcb681e83 <unavailable> + 188035

    6    tmp293p2qbz                        0x000055570f5b5ff0 <unavailable> + 8176

    7    tmp293p2qbz                        0x000055570f5b57ee <unavailable> + 6126

    8    libc.so.6                          0x00002b8dcbd77460 __libc_start_main +
    245

    9    tmp293p2qbz                        0x000055570f5b52b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013778
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    \n \
    \   var result = [Int]()\n    var minIndex = 0\n    var minValue = arr[0]\n  \
    \  \n    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n    \
    \        if arr[index] < minValue {\n                minValue = arr[index]\n \
    \               minIndex = index\n            }\n        }\n    }\n    \n    result.append(minValue)\n\
    \    result.append(minIndex)\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp07xdu8vw/tmp07xdu8vw.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f8ed56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f8ea4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f8ea4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f8ea4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp07xdu8vw                        0x000055f1e4c237cb <unavailable> + 6091

    5    libc.so.6                          0x00002b8f8ef42460 __libc_start_main +
    245

    6    tmp07xdu8vw                        0x000055f1e4c232b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var smallestValue = arr[0]\n    var smallestIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] % 2 == 0 {\n        \
    \    if smallestValue == arr[index] {\n                smallestIndex = index\n\
    \            } else {\n                if smallestValue < arr[index] {\n     \
    \               smallestValue = arr[index]\n                    smallestIndex\
    \ = index\n                }\n            }\n        }\n    }\n    result.append(smallestValue)\n\
    \    result.append(smallestIndex)\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(pluck(arr: [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [] as [Int]) == [] as [Int])\nassert(pluck(arr:\
    \ [5, 0, 3, 0, 4, 2]) == [0, 1])\nassert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0,\
    \ 3])\nassert(pluck(arr: [5, 4, 8, 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6,\
    \ 7, 1]) == [6, 1])\nassert(pluck(arr: [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmpdzp5ip1q/tmpdzp5ip1q.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73703a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7370099b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7370099988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73700987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdzp5ip1q                        0x000055b5ab0e96ac <unavailable> + 5804

    5    libc.so.6                          0x00002b737058e460 __libc_start_main +
    245

    6    tmpdzp5ip1q                        0x000055b5ab0e92b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013779
- exit_code: 1
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result: [Int] = []\n    var minIndex = 0\n    var minValue = arr[0]\n    for\
    \ i := 1; i < len(arr); i++ {\n        if arr[i] < minValue {\n            minValue\
    \ = arr[i]\n            minIndex = i\n        }\n    }\n    result = [minValue,\
    \ minIndex]\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(pluck(arr:\
    \ [4, 2, 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr:\
    \ [] as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: SyntaxError
  stderr: "/tmp/tmpb0iceifh.swift:23:12: error: expected type\n    for i := 1; i <\
    \ len(arr); i++ {\n           ^\n            <#type#>\n/tmp/tmpb0iceifh.swift:23:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 1; i < len(arr); i++\
    \ {\n           ^\n/tmp/tmpb0iceifh.swift:23:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 1; i < len(arr); i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660013780
- exit_code: -4
  program: "\n/// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n/// your task is to pluck one of the nodes and return it.\n///\
    \ The plucked node should be the node with the smallest even value.\n/// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n/// The plucked node should be returned in a list, [ smalest_value,\
    \ its index ],\n/// If there are no even values or the given array is empty, return\
    \ [].\n/// Example 1:\n/// Explanation: 2 has the smallest even value, and 2 has\
    \ the smallest index.\n/// Example 2:\n/// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index.\n/// Example 3:\n/// Example 4:\n/// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n/// so we will choose the\
    \ first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length\
    \ <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var\
    \ result = [Int]()\n    var minValue = arr[0]\n    var minIndex = 0\n    for index\
    \ in 0..<arr.count {\n        if arr[index] >= minValue {\n            if arr[index]\
    \ % 2 == 0 {\n                minValue = arr[index]\n                minIndex\
    \ = index\n            }\n        }\n    }\n    result.append(minValue)\n    result.append(minIndex)\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(pluck(arr: [4, 2,\
    \ 3]) == [2, 1])\nassert(pluck(arr: [1, 2, 3]) == [2, 1])\nassert(pluck(arr: []\
    \ as [Int]) == [] as [Int])\nassert(pluck(arr: [5, 0, 3, 0, 4, 2]) == [0, 1])\n\
    assert(pluck(arr: [1, 2, 3, 0, 5, 3]) == [0, 3])\nassert(pluck(arr: [5, 4, 8,\
    \ 4, 8]) == [4, 1])\nassert(pluck(arr: [7, 6, 7, 1]) == [6, 1])\nassert(pluck(arr:\
    \ [7, 9, 7, 1]) == [] as [Int])"
  status: Exception
  stderr: 'tmp4vsgl4mi/tmp4vsgl4mi.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0279d38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0279a2fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0279a2f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0279a2e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vsgl4mi                        0x000056460d3336ac <unavailable> + 5804

    5    libc.so.6                          0x00002b0279f24460 __libc_start_main +
    245

    6    tmp4vsgl4mi                        0x000056460d3332b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013780
