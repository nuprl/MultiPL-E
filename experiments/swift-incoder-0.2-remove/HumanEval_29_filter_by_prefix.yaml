name: HumanEval_29_filter_by_prefix
language: swift
prompt: "\n/// Filter an input list of strings only for ones that start with a given\
  \ prefix.\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_by_prefix(strings: [] as [String],\
  \ prefix: \"john\") == [] as [String])\nassert(filter_by_prefix(strings: [\"xxx\"\
  , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], prefix: \"xxx\") == [\"\
  xxx\", \"xxxAAA\", \"xxx\"])"
completions: ['    return strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter\
    \ {\n        $0.hasPrefix(prefix)\n    }", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", '    return
    strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter {\n      \
    \  $0.hasPrefix(prefix)\n    }", "    var filtered = [String]()\n    for s in\
    \ strings {\n        if s.hasPrefix(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter {\n      \
    \  $0.hasPrefix(prefix)\n    }", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    return\
    \ strings.filter { (string: String) -> Bool in\n        let prefixLength = string.characters.count\n\
    \        return string.hasPrefix(prefix)\n    }", '    return strings.filter{
    $0.hasPrefix(prefix) }', "    return strings.filter { (string: String) -> Bool\
    \ in\n        let prefixLength = string.characters.count\n        return string.hasPrefix(prefix)\n\
    \    }", "    var filtered = [String]()\n    for string in strings {\n       \
    \ if string.hasPrefix(prefix) {\n            filtered.append(string)\n       \
    \ }\n    }\n    return filtered", "    var filtered = [String]()\n    for s in\
    \ strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    var filtered = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", '    return
    strings.filter{ $0.hasPrefix(prefix) }', "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", '    return strings.filter{ $0.hasPrefix(prefix)
    }', '    return strings.filter{ $0.hasPrefix(prefix) }', "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.hasPrefix(prefix) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter\
    \ {\n        $0.hasPrefix(prefix)\n    }", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    return\
    \ strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    return strings.filter\
    \ { (string) -> Bool in\n        let prefixLength = string.characters.count\n\
    \        let prefixLength = prefixLength.advanced(by: prefix.characters.count)\n\
    \        return string.hasPrefix(prefix)\n    }", '    return strings.filter {
    $0.hasPrefix(prefix) }', '    return strings.filter{ $0.hasPrefix(prefix) }',
  "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    var filtered\
    \ = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.hasPrefix(prefix) }', "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.hasPrefix(prefix) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", "    return\
    \ strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    var filtered =\
    \ [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", " \
    \   var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", " \
    \   var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter\
    \ {\n        $0.hasPrefix(prefix)\n    }", '    return strings.filter{ $0.hasPrefix(prefix)
    }', '    return strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', '    return strings.filter{ $0.hasPrefix(prefix) }',
  "    var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter{
    $0.hasPrefix(prefix) }', "    var filtered = [String]()\n    for string in strings\
    \ {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter {\n      \
    \  $0.hasPrefix(prefix)\n    }", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    return strings.filter { (string: String) -> Bool in\n        let prefixLength\
    \ = string.characters.count\n        let prefixIndex = string.characters.index(string.startIndex,\
    \ offsetBy: prefixLength)\n        return prefixIndex != nil\n    }", '    return
    strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter {\n      \
    \  $0.hasPrefix(prefix)\n    }", "    var filtered = [String]()\n    for s in\
    \ strings {\n        if s.hasPrefix(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for string in strings {\n        if string.hasPrefix(prefix) {\n          \
    \  filtered.append(string)\n        }\n    }\n    return filtered", '    return
    strings.filter { $0.hasPrefix(prefix) }', "    var filtered = [String]()\n   \
    \ for string in strings {\n        if string.hasPrefix(prefix) {\n           \
    \ filtered.append(string)\n        }\n    }\n    return filtered", "    var filtered\
    \ = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", '    return
    strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter{ $0.hasPrefix(prefix)
    }', '    return strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter{
    $0.hasPrefix(prefix) }', "    return strings.filter {\n        $0.hasPrefix(prefix)\n\
    \    }", '    return strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter\
    \ { (string) -> Bool in\n        let stringWithoutPrefix = string.dropFirst(prefix.count)\n\
    \        return stringWithoutPrefix.startsWith(prefix)\n    }", '    return strings.filter{
    $0.hasPrefix(prefix) }', '    return strings.filter{ $0.hasPrefix(prefix) }',
  '    return strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter{
    $0.hasPrefix(prefix) }', "    return strings.filter {\n        $0.hasPrefix(prefix)\n\
    \    }", "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", " \
    \   var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", '    return
    strings.filter{ $0.hasPrefix(prefix) }', "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered", "    return strings.filter {\n      \
    \  $0.hasPrefix(prefix)\n    }", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    var filtered\
    \ = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    var filtered\
    \ = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter{
    $0.hasPrefix(prefix) }', "    var filtered = [String]()\n    for string in strings\
    \ {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter {\n      \
    \  $0.hasPrefix(prefix)\n    }", "    var filtered = [String]()\n    for string\
    \ in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter { (string)\
    \ -> Bool in\n        let prefixLength = string.characters.count\n        return\
    \ string.hasPrefix(prefix) && string.characters.count >= prefixLength\n    }",
  "    var filtered: [String] = []\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", " \
    \   var filtered = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", " \
    \   return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    var filtered\
    \ = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.hasPrefix(prefix) }', "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.hasPrefix(prefix) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", '    return
    strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter { (string)\
    \ -> Bool in\n        let prefixLength = string.characters.count\n        let\
    \ prefixLength = prefixLength < prefix.characters.count ? prefixLength : prefix.characters.count\n\
    \        return string.hasPrefix(prefix) && string.characters.count >= prefixLength\n\
    \    }", '    return strings.filter{ $0.hasPrefix(prefix) }', "    var filtered\
    \ = [String]()\n    for s in strings {\n        if s.startsWith(prefix) {\n  \
    \          filtered.append(s)\n        }\n    }\n    return filtered", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", '    return
    strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter { (string)\
    \ -> Bool in\n        let stringToCheck = string.lowercaseString\n        return\
    \ stringToCheck.hasPrefix(prefix.lowercaseString)\n    }", "    var filtered =\
    \ [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter { (string: String) -> Bool in\n        let stringPrefix\
    \ = string.prefix(upTo: prefix)\n        return stringPrefix.isEmpty == false\n\
    \    }", "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", " \
    \   var filtered: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter\
    \ {\n        $0.hasPrefix(prefix)\n    }", "    return strings.filter {\n    \
    \    $0.hasPrefix(prefix)\n    }", "    var filtered = [String]()\n    for string\
    \ in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter{
    $0.hasPrefix(prefix) }', "    return strings.filter { (string: String) -> Bool\
    \ in\n        let prefixLength = string.characters.count\n        return string.hasPrefix(prefix)\n\
    \    }", "    var filtered = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", " \
    \   var filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    return\
    \ strings.filter { (string: String) -> Bool in\n        let prefixLength = string.characters.count\n\
    \        return string.hasPrefix(prefix) && string.characters.count >= prefixLength\n\
    \    }", '    return strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter{
    $0.hasPrefix(prefix) }', "    return strings.filter { (string) -> Bool in\n  \
    \      let stringToCompare = string.lowercased().prefix(prefix.count)\n      \
    \  return stringToCompare.lowercased() == prefix\n    }", "    return strings.filter\
    \ {\n        $0.hasPrefix(prefix)\n    }", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    var\
    \ filtered: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.hasPrefix(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", " \
    \   return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    var filtered\
    \ = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", '    return
    strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter {\n      \
    \  $0.hasPrefix(prefix)\n    }", "    var filtered = [String]()\n    for string\
    \ in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered = [String]()\n    for\
    \ s in strings {\n        if s.startsWith(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered", "    return strings.filter { (string:\
    \ String) -> Bool in\n        return string.hasPrefix(prefix)\n    }", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  '    return strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter{
    $0.hasPrefix(prefix) }', "    var filtered = [String]()\n    for string in strings\
    \ {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for string in strings {\n        if string.hasPrefix(prefix) {\n          \
    \  filtered.append(string)\n        }\n    }\n    return filtered", "    return\
    \ strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    return strings.filter\
    \ { (string: String) -> Bool in\n        let stringPrefix = string.prefix(upTo:\
    \ prefix)\n        return stringPrefix != nil\n    }", "    var filtered = [String]()\n\
    \    for string in strings {\n        if string.hasPrefix(prefix) {\n        \
    \    filtered.append(string)\n        }\n    }\n    return filtered", "    var\
    \ filtered = [String]()\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    var filtered: [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter { (string: String) -> Bool in\n        let prefixLength\
    \ = string.characters.count\n        return string.hasPrefix(prefix) && prefixLength\
    \ == prefix.characters.count\n    }", '    return strings.filter{ $0.hasPrefix(prefix)
    }', '    return strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter
    { $0.hasPrefix(prefix) }', "    var filtered = [String]()\n    for s in strings\
    \ {\n        if s.hasPrefix(prefix) {\n            filtered.append(s)\n      \
    \  }\n    }\n    return filtered", "    var filtered = [String]()\n    for s in\
    \ strings {\n        if s.hasPrefix(prefix) {\n            filtered.append(s)\n\
    \        }\n    }\n    return filtered", "    var filtered: [String] = []\n  \
    \  for string in strings {\n        if string.hasPrefix(prefix) {\n          \
    \  filtered.append(string)\n        }\n    }\n    return filtered", "    var filtered:\
    \ [String] = []\n    for s in strings {\n        if s.startsWith(prefix) {\n \
    \           filtered.append(s)\n        }\n    }\n    return filtered", '    return
    strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter {\n      \
    \  $0.hasPrefix(prefix)\n    }", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    var filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", '    return
    strings.filter { $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix)
    }', "    var filtered: [String] = []\n    for string in strings {\n        if\
    \ string.hasPrefix(prefix) {\n            filtered.append(string)\n        }\n\
    \    }\n    return filtered", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", '    return
    strings.filter{ $0.hasPrefix(prefix) }', "    var filtered = [String]()\n    for\
    \ string in strings {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter { (string)\
    \ -> Bool in\n        let stringWithoutPrefix = string.dropFirst(prefix.count)\n\
    \        return stringWithoutPrefix.startsWith(prefix)\n    }", '    return strings.filter
    { $0.hasPrefix(prefix) }', "    var filtered = [String]()\n    for string in strings\
    \ {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    var\
    \ filtered = [String]()\n    for s in strings {\n        if s.startsWith(prefix)\
    \ {\n            filtered.append(s)\n        }\n    }\n    return filtered", " \
    \   return strings.filter {\n        $0.hasPrefix(prefix)\n    }", "    var filtered:\
    \ [String] = []\n    for string in strings {\n        if string.hasPrefix(prefix)\
    \ {\n            filtered.append(string)\n        }\n    }\n    return filtered",
  "    return strings.filter { (string: String) -> Bool in\n        let prefixLength\
    \ = string.characters.count\n        return string.hasPrefix(prefix)\n    }",
  '    return strings.filter{ $0.hasPrefix(prefix) }', "    return strings.filter\
    \ {\n        $0.hasPrefix(prefix)\n    }", "    return strings.filter {\n    \
    \    $0.hasPrefix(prefix)\n    }", '    return strings.filter{ $0.hasPrefix(prefix)
    }', "    return strings.filter { (string) -> Bool in\n        let stringToCheck\
    \ = string.lowercased()\n        let prefixToCheck = prefix.lowercased()\n   \
    \     return stringToCheck.hasPrefix(prefixToCheck)\n    }", '    return strings.filter{
    $0.hasPrefix(prefix) }', '    return strings.filter { $0.hasPrefix(prefix) }',
  '    return strings.filter{ $0.hasPrefix(prefix) }', '    return strings.filter{
    $0.hasPrefix(prefix) }', "    var filtered = [String]()\n    for string in strings\
    \ {\n        if string.hasPrefix(prefix) {\n            filtered.append(string)\n\
    \        }\n    }\n    return filtered", "    return strings.filter { (string:\
    \ String) -> Bool in\n        let prefixLength = string.characters.count\n   \
    \     return string.hasPrefix(prefix) && prefixLength == prefix.characters.count\n\
    \    }"]
stop_tokens:
- "\n}"
