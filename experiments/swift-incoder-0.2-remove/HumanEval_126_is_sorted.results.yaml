language: swift
name: HumanEval_126_is_sorted
results:
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] != x {\n\
    \            return false\n        }\n        seen[x] = x\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpooi8hqrc/tmpooi8hqrc.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0e3837c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0e352eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0e352e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0e352d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpooi8hqrc                        0x0000561bf3d075aa <unavailable> + 5546

    5    libc.so.6                          0x00002ac0e3a23460 __libc_start_main +
    245

    6    tmpooi8hqrc                        0x0000561bf3d07229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] == nil {\n            seen[num] = true\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp394x5lng.swift:9:22: warning: comparing non-optional value of type\
    \ 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n       \
    \    ~~~~~~~~~ ^  ~~~\n/tmp/tmp394x5lng.swift:10:25: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n  \
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpza0ujrrw/tmpza0ujrrw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153540dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1535104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1535104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15351037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza0ujrrw                        0x000055d8206cf5aa <unavailable> + 5546

    5    libc.so.6                          0x00002b15355f9460 __libc_start_main +
    245

    6    tmpza0ujrrw                        0x000055d8206cf229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] == nil {\n            seen[num] = true\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp394x5lng.swift:9:22: warning: comparing non-optional value of type\
    \ 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n       \
    \    ~~~~~~~~~ ^  ~~~\n/tmp/tmp394x5lng.swift:10:25: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n  \
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpza0ujrrw/tmpza0ujrrw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153540dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1535104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1535104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15351037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza0ujrrw                        0x000055d8206cf5aa <unavailable> + 5546

    5    libc.so.6                          0x00002b15355f9460 __libc_start_main +
    245

    6    tmpza0ujrrw                        0x000055d8206cf229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] != nil\
    \ {\n            return false\n        }\n        seen[num] = num\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvdox887b/tmpvdox887b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba37127c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba36e1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba36e1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba36e1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdox887b                        0x0000562d3be4f5aa <unavailable> + 5546

    5    libc.so.6                          0x00002aba37313460 __libc_start_main +
    245

    6    tmpvdox887b                        0x0000562d3be4f229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for num in lst {\n        if seen.contains(num)\
    \ {\n            return false\n        } else {\n            seen.insert(num)\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp6uwabcpv.swift:13:28: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(num)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.insert(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwnlty310.swift:12:28: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(num)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for num in lst {\n        if seen.contains(num)\
    \ {\n            return false\n        } else {\n            seen.append(num)\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxeoae3mu/tmpxeoae3mu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae304686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae30437db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae30437d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae30437c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxeoae3mu                        0x000056117c2c95ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae304872460 __libc_start_main +
    245

    6    tmpxeoae3mu                        0x000056117c2c9249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.append(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpnff3jbq8/tmpnff3jbq8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad856907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8565feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8565fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8565fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnff3jbq8                        0x00005642283e9716 <unavailable> + 5910

    5    libc.so.6                          0x00002ad856af3460 __libc_start_main +
    245

    6    tmpnff3jbq8                        0x00005642283e91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var flag\
    \ = true\n    for _ in lst {\n        if lst[i] == lst[j] {\n            i +=\
    \ 1\n            j += 1\n        } else {\n            flag = false\n        \
    \    break\n        }\n    }\n    return flag\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpmbilfnzs/tmpmbilfnzs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74d99ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74d96f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74d96f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74d96f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmbilfnzs                        0x000055be65a02646 <unavailable> + 5702

    5    libc.so.6                          0x00002b74d9beb460 __libc_start_main +
    245

    6    tmpmbilfnzs                        0x000055be65a02129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sorted\
    \ = false\n    for element in lst {\n        if i == j {\n            sorted =\
    \ true\n        }\n        if element < lst[j] {\n            sorted = false\n\
    \        }\n        if element == lst[j] {\n            i += 1\n        }\n  \
    \      j += 1\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpq8c_b53k/tmpq8c_b53k.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac852f56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac852c4db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac852c4d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac852c4c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8c_b53k                        0x00005559b44df646 <unavailable> + 5702

    5    libc.so.6                          0x00002ac853142460 __libc_start_main +
    245

    6    tmpq8c_b53k                        0x00005559b44df129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sorted\
    \ = false\n    for i < lst.count {\n        if i == 0 {\n            sorted =\
    \ true\n        }\n        if lst[i] == lst[j] {\n            i += 1\n       \
    \     j += 1\n        } else {\n            if sorted {\n                return\
    \ false\n            }\n            sorted = true\n            i += 1\n      \
    \  }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst:\
    \ [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwl7tpm4n.swift:10:11: error: expected 'in' after for-each pattern\n\
    \    for i < lst.count {\n          ^\n/tmp/tmpwl7tpm4n.swift:10:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < lst.count {\n   \
    \       ^~\n           \n/tmp/tmpwl7tpm4n.swift:10:11: error: '<' is not a prefix\
    \ unary operator\n    for i < lst.count {\n          ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.insert(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwnlty310.swift:12:28: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(num)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = false\n    for num in lst\
    \ {\n        if sorted {\n            return false\n        }\n        if num\
    \ == lst[0] {\n            sorted = true\n        } else {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpk460v3xd/tmpk460v3xd.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af45fc6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af45f963b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af45f963988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af45f9627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk460v3xd                        0x00005557fb35c577 <unavailable> + 5495

    5    libc.so.6                          0x00002af45fe58460 __libc_start_main +
    245

    6    tmpk460v3xd                        0x00005557fb35c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k\
    \ = 0\n    var dup = 0\n    for k in lst {\n        if i == j {\n            dup++\n\
    \        }\n        if k == lst[i] {\n            dup++\n        }\n        if\
    \ k == lst[j] {\n            dup++\n        }\n        if k == lst[k] {\n    \
    \        dup++\n        }\n        if dup > 1 {\n            return false\n  \
    \      }\n        i++\n        j++\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpiivj0wgi.swift:13:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            dup++\n               ^~\n/tmp/tmpiivj0wgi.swift:16:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  dup++\n               ^~\n/tmp/tmpiivj0wgi.swift:19:16: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            dup++\n          \
    \     ^~\n/tmp/tmpiivj0wgi.swift:22:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            dup++\n               ^~\n/tmp/tmpiivj0wgi.swift:27:10:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        i++\n\
    \         ^~\n/tmp/tmpiivj0wgi.swift:28:10: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n        j++\n         ^~\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] != nil\
    \ {\n            return false\n        }\n        seen[num] = num\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5])\
    \ == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpvdox887b/tmpvdox887b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba37127c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba36e1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba36e1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba36e1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvdox887b                        0x0000562d3be4f5aa <unavailable> + 5546

    5    libc.so.6                          0x00002aba37313460 __libc_start_main +
    245

    6    tmpvdox887b                        0x0000562d3be4f229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpza0ujrrw/tmpza0ujrrw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153540dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1535104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1535104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15351037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza0ujrrw                        0x000055d8206cf5aa <unavailable> + 5546

    5    libc.so.6                          0x00002b15355f9460 __libc_start_main +
    245

    6    tmpza0ujrrw                        0x000055d8206cf229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] != nil\
    \ { return false }\n        seen[num] = num\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpyozsasel/tmpyozsasel.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40de1e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40ddedbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40ddedb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40ddeda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyozsasel                        0x000055d9657a45aa <unavailable> + 5546

    5    libc.so.6                          0x00002b40de3d0460 __libc_start_main +
    245

    6    tmpyozsasel                        0x000055d9657a4229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.insert(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwnlty310.swift:12:28: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(num)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.append(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpnff3jbq8/tmpnff3jbq8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad856907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8565feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8565fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8565fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnff3jbq8                        0x00005642283e9716 <unavailable> + 5910

    5    libc.so.6                          0x00002ad856af3460 __libc_start_main +
    245

    6    tmpnff3jbq8                        0x00005642283e91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] != nil\
    \ {\n            return false\n        }\n        seen[x] = x\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_sorted(lst: [5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst:\
    \ [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1,\
    \ 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst: [] as [Int]) == true)\n\
    assert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\n\
    assert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\n\
    assert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpza0ujrrw/tmpza0ujrrw.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b153540dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1535104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1535104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15351037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpza0ujrrw                        0x000055d8206cf5aa <unavailable> + 5546

    5    libc.so.6                          0x00002b15355f9460 __libc_start_main +
    245

    6    tmpza0ujrrw                        0x000055d8206cf229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for x in lst\
    \ {\n        if sorted {\n            if x == x {\n                sorted = false\n\
    \            } else {\n                sorted = true\n            }\n        }\
    \ else {\n            sorted = true\n        }\n    }\n    return sorted\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpe12uc15g/tmpe12uc15g.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a2fa1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a2f714b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a2f714988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a2f7137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe12uc15g                        0x000055d09537c45a <unavailable> + 5210

    5    libc.so.6                          0x00002b0a2fc09460 __libc_start_main +
    245

    6    tmpe12uc15g                        0x000055d09537c0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] == nil {\n            seen[num] = true\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp394x5lng.swift:9:22: warning: comparing non-optional value of type\
    \ 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n       \
    \    ~~~~~~~~~ ^  ~~~\n/tmp/tmp394x5lng.swift:10:25: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n  \
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sorted\
    \ = false\n    for j in 0..<lst.count {\n        if lst[i] == lst[j] {\n     \
    \       i += 1\n        } else {\n            sorted = true\n            break\n\
    \        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpbyh4h261/tmpbyh4h261.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b992f315c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b992f00cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b992f00c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b992f00b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbyh4h261                        0x000055f2020b752a <unavailable> + 5418

    5    libc.so.6                          0x00002b992f501460 __libc_start_main +
    245

    6    tmpbyh4h261                        0x000055f2020b71a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = true\n    for num in lst\
    \ {\n        if sorted {\n            if num != lst[sorted.index(true)] {\n  \
    \              sorted = false\n            }\n        } else {\n            if\
    \ num != lst[sorted.index(true)] {\n                sorted = true\n          \
    \  }\n        }\n    }\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpfjy442vp.swift:10:34: error: value of type 'Bool' has no member\
    \ 'index'\n            if num != lst[sorted.index(true)] {\n                 \
    \         ~~~~~~ ^~~~~\n/tmp/tmpfjy442vp.swift:14:34: error: value of type 'Bool'\
    \ has no member 'index'\n            if num != lst[sorted.index(true)] {\n   \
    \                       ~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.append(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpnff3jbq8/tmpnff3jbq8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad856907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8565feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8565fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8565fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnff3jbq8                        0x00005642283e9716 <unavailable> + 5910

    5    libc.so.6                          0x00002ad856af3460 __libc_start_main +
    245

    6    tmpnff3jbq8                        0x00005642283e91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] == nil {\n            seen[num] = true\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp394x5lng.swift:9:22: warning: comparing non-optional value of type\
    \ 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n       \
    \    ~~~~~~~~~ ^  ~~~\n/tmp/tmp394x5lng.swift:10:25: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n  \
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var sorted\
    \ = false\n    for i < lst.count {\n        if i == j {\n            sorted =\
    \ true\n        } else {\n            if lst[i] > lst[j] {\n                sorted\
    \ = false\n            } else {\n                sorted = true\n            }\n\
    \        }\n        i += 1\n        j += 1\n    }\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp_ujvr_ja.swift:10:11: error: expected 'in' after for-each pattern\n\
    \    for i < lst.count {\n          ^\n/tmp/tmp_ujvr_ja.swift:10:11: error: unary\
    \ operator cannot be separated from its operand\n    for i < lst.count {\n   \
    \       ^~\n           \n/tmp/tmp_ujvr_ja.swift:10:11: error: '<' is not a prefix\
    \ unary operator\n    for i < lst.count {\n          ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        } else\
    \ {\n            seen[x - 1] = true\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmps4yqwbgn.swift:9:24: warning: comparing non-optional value of type\
    \ 'Int' to 'nil' always returns true\n        if seen[x - 1] != nil {\n      \
    \     ~~~~~~~~~~~ ^  ~~~\n/tmp/tmps4yqwbgn.swift:12:27: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[x - 1] = true\n\
    \                          ^~~~\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        } else\
    \ {\n            seen[x - 1] = x\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b25631a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2562e9f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2562e9f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2562e9f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2562e9ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2562c9ee83 <unavailable> + 188035

    6    tmpbfj1bwhx                        0x000055d54f68d153 <unavailable> + 8531

    7    tmpbfj1bwhx                        0x000055d54f68c4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b2563394460 __libc_start_main +
    245

    9    tmpbfj1bwhx                        0x000055d54f68c1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014069
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        } else\
    \ {\n            seen[x - 1] = x\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b25631a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2562e9f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2562e9f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2562e9f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2562e9ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b2562c9ee83 <unavailable> + 188035

    6    tmpbfj1bwhx                        0x000055d54f68d153 <unavailable> + 8531

    7    tmpbfj1bwhx                        0x000055d54f68c4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b2563394460 __libc_start_main +
    245

    9    tmpbfj1bwhx                        0x000055d54f68c1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014069
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for num in lst {\n        if seen[num] != nil\
    \ {\n            return false\n        } else {\n            seen[num] = num\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmp1ikh2e83/tmp1ikh2e83.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5bedd7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5beaceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5beace988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5beacd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ikh2e83                        0x000055bda22375aa <unavailable> + 5546

    5    libc.so.6                          0x00002ab5befc3460 __libc_start_main +
    245

    6    tmp1ikh2e83                        0x000055bda2237229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014069
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k\
    \ = lst.count\n    while i < k {\n        if lst[i] < lst[j] {\n            return\
    \ false\n        }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmphrbo66sn/tmphrbo66sn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f9d55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f9d255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f9d255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f9d2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphrbo66sn                        0x000055940ed49536 <unavailable> + 5430

    5    libc.so.6                          0x00002b5f9d74a460 __libc_start_main +
    245

    6    tmphrbo66sn                        0x000055940ed49019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014069
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.insert(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpgcl6bx05.swift:12:24: error: missing argument for parameter 'at'\
    \ in call\n        seen.insert(num)\n                       ^\n              \
    \         , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)' declared here\n\
    \    @inlinable public mutating func insert(_ newElement: __owned Element, at\
    \ i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.append(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpnff3jbq8/tmpnff3jbq8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad856907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8565feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8565fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8565fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnff3jbq8                        0x00005642283e9716 <unavailable> + 5910

    5    libc.so.6                          0x00002ad856af3460 __libc_start_main +
    245

    6    tmpnff3jbq8                        0x00005642283e91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] == nil {\n            seen[num] = true\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2,\
    \ 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmp394x5lng.swift:9:22: warning: comparing non-optional value of type\
    \ 'Int' to 'nil' always returns false\n        if seen[num] == nil {\n       \
    \    ~~~~~~~~~ ^  ~~~\n/tmp/tmp394x5lng.swift:10:25: error: cannot assign value\
    \ of type 'Bool' to subscript of type 'Int'\n            seen[num] = true\n  \
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = false\n    for x in lst\
    \ {\n        if !sorted {\n            sorted = true\n            if x == x {\n\
    \                return false\n            }\n        }\n        if x < x {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpyrn_ezz_/tmpyrn_ezz_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4884d7ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4884a75b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4884a75988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4884a747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyrn_ezz_                        0x000055eda833f45a <unavailable> + 5210

    5    libc.so.6                          0x00002b4884f6a460 __libc_start_main +
    245

    6    tmpyrn_ezz_                        0x000055eda833f0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014069
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: 1
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.insert(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: SyntaxError
  stderr: "/tmp/tmpwnlty310.swift:12:28: error: missing argument for parameter 'at'\
    \ in call\n            seen.insert(num)\n                           ^\n      \
    \                     , at: <#Int#>\nSwift.Array:11:37: note: 'insert(_:at:)'\
    \ declared here\n    @inlinable public mutating func insert(_ newElement: __owned\
    \ Element, at i: Int)\n                                    ^\n"
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.append(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpnff3jbq8/tmpnff3jbq8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad856907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8565feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8565fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8565fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnff3jbq8                        0x00005642283e9716 <unavailable> + 5910

    5    libc.so.6                          0x00002ad856af3460 __libc_start_main +
    245

    6    tmpnff3jbq8                        0x00005642283e91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    var k\
    \ = lst.count\n    while i < k {\n        if lst[i] < lst[j] {\n            return\
    \ false\n        }\n        i += 1\n        j += 1\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmphrbo66sn/tmphrbo66sn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f9d55ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f9d255b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f9d255988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f9d2547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphrbo66sn                        0x000055940ed49536 <unavailable> + 5430

    5    libc.so.6                          0x00002b5f9d74a460 __libc_start_main +
    245

    6    tmphrbo66sn                        0x000055940ed49019 <unavailable> + 4121

    '
  stdout: ''
  timestamp: 1660014069
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for x in lst {\n        if seen[x - 1] != x {\n\
    \            return false\n        }\n        seen[x] = 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpnjwp8as4/tmpnjwp8as4.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c0dc85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c0d97cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c0d97c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c0d97b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjwp8as4                        0x000055dc091c25aa <unavailable> + 5546

    5    libc.so.6                          0x00002b9c0de71460 __libc_start_main +
    245

    6    tmpnjwp8as4                        0x000055dc091c2229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660014069
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var sorted = false\n    for x in lst\
    \ {\n        if sorted {\n            return false\n        }\n        if x ==\
    \ x {\n            sorted = true\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxk41fz_0/tmpxk41fz_0.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b69fd273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b69fcf6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b69fcf6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69fcf697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxk41fz_0                        0x0000555faa6cd527 <unavailable> + 5415

    5    libc.so.6                          0x00002b69fd45f460 __libc_start_main +
    245

    6    tmpxk41fz_0                        0x0000555faa6cd0d9 <unavailable> + 4313

    '
  stdout: ''
  timestamp: 1660014069
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    guard lst.count > 1 else { return false\
    \ }\n    var seen = [Int]()\n    for num in lst {\n        if seen.contains(num)\
    \ {\n            return false\n        } else {\n            seen.append(num)\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpxeoae3mu/tmpxeoae3mu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae304686c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae30437db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae30437d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae30437c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxeoae3mu                        0x000056117c2c95ca <unavailable> + 5578

    5    libc.so.6                          0x00002ae304872460 __libc_start_main +
    245

    6    tmpxeoae3mu                        0x000056117c2c9249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        }\n  \
    \      seen.append(num)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmpnff3jbq8/tmpnff3jbq8.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad856907c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad8565feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad8565fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8565fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnff3jbq8                        0x00005642283e9716 <unavailable> + 5910

    5    libc.so.6                          0x00002ad856af3460 __libc_start_main +
    245

    6    tmpnff3jbq8                        0x00005642283e91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        }\n    \
    \    seen[num] = num\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b023917ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0238e71561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0238e71286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0238e7113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0238e70bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b0238c70e83 <unavailable> + 188035

    6    tmpz7bzlafe                        0x000055763f107137 <unavailable> + 8503

    7    tmpz7bzlafe                        0x000055763f1064e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b0239366460 __libc_start_main +
    245

    9    tmpz7bzlafe                        0x000055763f1061d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen.contains(num) {\n            return false\n        } else\
    \ {\n            seen.append(num)\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5, 6, 7]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) ==\
    \ false)\nassert(is_sorted(lst: [] as [Int]) == true)\nassert(is_sorted(lst: [1])\
    \ == true)\nassert(is_sorted(lst: [3, 2, 1]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 2, 2, 3, 4]) == false)\nassert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) ==\
    \ false)\nassert(is_sorted(lst: [1, 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'tmplnk5055b/tmplnk5055b.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d52054c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d51d4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d51d4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d51d4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk5055b                        0x000055cf38190716 <unavailable> + 5910

    5    libc.so.6                          0x00002b6d52240460 __libc_start_main +
    245

    6    tmplnk5055b                        0x000055cf381901f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for num in lst\
    \ {\n        if seen[num] != nil {\n            return false\n        } else {\n\
    \            seen[num] = num\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1,\
    \ 2, 3, 4, 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b564576fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5645466561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5645466286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b564546613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5645465bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b5645265e83 <unavailable> + 188035

    6    tmpiwu5793q                        0x0000563b7171b137 <unavailable> + 8503

    7    tmpiwu5793q                        0x0000563b7171a4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b564595b460 __libc_start_main +
    245

    9    tmpiwu5793q                        0x0000563b7171a1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
- exit_code: -4
  program: "\n/// Given a list of numbers, return whether or not they are sorted\n\
    /// in ascending order. If list has more than 1 duplicate of the same\n/// number,\
    \ return False. Assume no negative numbers and only integers.\n/// Examples\n\
    func is_sorted(lst: [Int]) -> Bool {\n    var seen = [Int]()\n    for x in lst\
    \ {\n        if seen[x - 1] != nil {\n            return false\n        }\n  \
    \      seen[x] = x\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_sorted(lst: [5]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4,\
    \ 5]) == true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5]) == false)\nassert(is_sorted(lst:\
    \ [1, 2, 3, 4, 5, 6]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4, 5, 6, 7]) ==\
    \ true)\nassert(is_sorted(lst: [1, 3, 2, 4, 5, 6, 7]) == false)\nassert(is_sorted(lst:\
    \ [] as [Int]) == true)\nassert(is_sorted(lst: [1]) == true)\nassert(is_sorted(lst:\
    \ [3, 2, 1]) == false)\nassert(is_sorted(lst: [1, 2, 2, 2, 3, 4]) == false)\n\
    assert(is_sorted(lst: [1, 2, 3, 3, 3, 4]) == false)\nassert(is_sorted(lst: [1,\
    \ 2, 2, 3, 3, 4]) == true)\nassert(is_sorted(lst: [1, 2, 3, 4]) == true)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b24dc39ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24dc091561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24dc091286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24dc09113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24dc090bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b24dbe90e83 <unavailable> + 188035

    6    tmp1xnqus60                        0x000055aaa904c153 <unavailable> + 8531

    7    tmp1xnqus60                        0x000055aaa904b4e5 <unavailable> + 5349

    8    libc.so.6                          0x00002b24dc586460 __libc_start_main +
    245

    9    tmp1xnqus60                        0x000055aaa904b1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660014068
