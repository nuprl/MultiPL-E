language: swift
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxcmxhhv0.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpr5h6vfi_.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqyiw1bae.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpqyiw1bae.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpqyiw1bae.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        letterCount[letter] = (letterCount[letter] ?? 0) + 1\n    }\n   \
    \ return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6bem85cb.swift:9:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        letterCount[letter] = (letterCount[letter]\
    \ ?? 0) + 1\n                    ^\n/tmp/tmp6bem85cb.swift:9:44: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   letterCount[letter] = (letterCount[letter] ?? 0) + 1\n                   \
    \                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter\
    \ = \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_vahea6c.swift:11:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmp_vahea6c.swift:12:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmp_vahea6c.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmp_vahea6c.swift:16:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmp_vahea6c.swift:16:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:17:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmp_vahea6c.swift:17:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmps9xjg__7.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var max = 0\n    var maxLetter = \"\
    \"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > max {\n   \
    \         max = histogram[letter]\n            maxLetter = letter\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpsh78mhyd.swift:11:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpsh78mhyd.swift:12:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpsh78mhyd.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmpsh78mhyd.swift:16:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > max {\n                    ^\n/tmp/tmpsh78mhyd.swift:16:21: note: found candidate\
    \ with type '(Dictionary<String, Int>.Index) -> (key: String, value: Int)'\n \
    \       if histogram[letter] > max {\n                    ^\n/tmp/tmpsh78mhyd.swift:16:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > max {\n                    ^\n/tmp/tmpsh78mhyd.swift:16:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > max {\n           ~~~~~~~~~~~~~~~~~\
    \ ^ ~~~\n/tmp/tmpsh78mhyd.swift:16:30: note: overloads for '>' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        if histogram[letter]\
    \ > max {\n                             ^\n/tmp/tmpsh78mhyd.swift:17:28: error:\
    \ no exact matches in call to subscript \n            max = histogram[letter]\n\
    \                           ^\n/tmp/tmpsh78mhyd.swift:17:28: note: found candidate\
    \ with type '(Dictionary<String, Int>.Index) -> (key: String, value: Int)'\n \
    \           max = histogram[letter]\n                           ^\n/tmp/tmpsh78mhyd.swift:17:28:\
    \ note: found candidate with type '(String) -> @lvalue Int?'\n            max\
    \ = histogram[letter]\n                           ^\n/tmp/tmpsh78mhyd.swift:17:28:\
    \ note: found candidate with type '(Range<Dictionary<String, Int>.Index>) -> Slice<[String\
    \ : Int]>'\n            m"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    for letter in test.lowercased() {\n\
    \        if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5drvlcln.swift:9:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp5drvlcln.swift:10:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp5drvlcln.swift:12:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8u1knhm2.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmps9xjg__7.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        letterCount[letter] = (letterCount[letter] ?? 0) + 1\n   \
    \ }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_xeul_2t.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmppvvq68l3.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqyiw1bae.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpqyiw1bae.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpqyiw1bae.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter\
    \ = \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_vahea6c.swift:11:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmp_vahea6c.swift:12:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmp_vahea6c.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmp_vahea6c.swift:16:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmp_vahea6c.swift:16:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:17:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmp_vahea6c.swift:17:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        histogram[letter] = histogram.count\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2c5l49ha.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxcmxhhv0.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8u1knhm2.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        letterCount[letter] = (letterCount[letter] ?? 0) + 1\n    }\n    return\
    \ letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3bdw0a5t.swift:9:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        letterCount[letter] = (letterCount[letter]\
    \ ?? 0) + 1\n                    ^\n/tmp/tmp3bdw0a5t.swift:9:44: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   letterCount[letter] = (letterCount[letter] ?? 0) + 1\n                   \
    \                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter\
    \ = \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_vahea6c.swift:11:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmp_vahea6c.swift:12:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmp_vahea6c.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmp_vahea6c.swift:16:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmp_vahea6c.swift:16:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:17:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmp_vahea6c.swift:17:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter\
    \ = \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_vahea6c.swift:11:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmp_vahea6c.swift:12:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmp_vahea6c.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmp_vahea6c.swift:16:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmp_vahea6c.swift:16:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:17:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmp_vahea6c.swift:17:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    for letter in test.lowercased() {\n\
    \        if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5drvlcln.swift:9:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp5drvlcln.swift:10:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp5drvlcln.swift:12:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    for letter in test.lowercased() {\n\
    \        if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5drvlcln.swift:9:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp5drvlcln.swift:10:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp5drvlcln.swift:12:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpazg1a0yo.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpazg1a0yo.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpazg1a0yo.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxcmxhhv0.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    for letter in test.lowercased() {\n\
    \        if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5drvlcln.swift:9:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp5drvlcln.swift:10:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp5drvlcln.swift:12:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmikx2dqr.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqyiw1bae.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpqyiw1bae.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpqyiw1bae.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmps9xjg__7.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfvhm_twz.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpfvhm_twz.swift:9:34: error: value\
    \ of type '[String : Int]' has no member 'value'\n        if let count = histogram.value(forKey:\
    \ letter) {\n                       ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfvhm_twz.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpfvhm_twz.swift:9:34: error: value\
    \ of type '[String : Int]' has no member 'value'\n        if let count = histogram.value(forKey:\
    \ letter) {\n                       ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter\
    \ = \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_vahea6c.swift:11:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmp_vahea6c.swift:12:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmp_vahea6c.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmp_vahea6c.swift:16:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmp_vahea6c.swift:16:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:17:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmp_vahea6c.swift:17:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    for letter in test.lowercased() {\n\
    \        if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5drvlcln.swift:9:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp5drvlcln.swift:10:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp5drvlcln.swift:12:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxcmxhhv0.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmps9xjg__7.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    for letter in\
    \ test.lowercased() {\n        if let count = histogram[letter] {\n          \
    \  histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n        if histogram[letter] > maxCount {\n            maxCount\
    \ = histogram[letter]\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpifetjl1a.swift:10:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpifetjl1a.swift:11:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpifetjl1a.swift:13:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmpifetjl1a.swift:15:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmpifetjl1a.swift:15:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmpifetjl1a.swift:15:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmpifetjl1a.swift:15:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmpifetjl1a.swift:15:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmpifetjl1a.swift:16:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmpifetjl1a.swift:16:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmpifetjl1a.swift:16:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmpifetjl1a.swift:16:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter\
    \ = \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_vahea6c.swift:11:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmp_vahea6c.swift:12:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmp_vahea6c.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmp_vahea6c.swift:16:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmp_vahea6c.swift:16:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:17:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmp_vahea6c.swift:17:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        histogram[letter] = histogram.count\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp2c5l49ha.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter\
    \ = \"\"\n    for letter in test.lowercaseString.characters {\n        if let\
    \ count = histogram[letter] {\n            histogram[letter] = count + 1\n   \
    \     } else {\n            histogram[letter] = 1\n        }\n        if histogram[letter]\
    \ > maxCount {\n            maxCount = histogram[letter]\n            maxLetter\
    \ = letter\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp14tedapy.swift:10:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfvhm_twz.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpfvhm_twz.swift:9:34: error: value\
    \ of type '[String : Int]' has no member 'value'\n        if let count = histogram.value(forKey:\
    \ letter) {\n                       ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphz2e7j4s.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmppvvq68l3.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    for letter in test.lowercased() {\n\
    \        if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5drvlcln.swift:9:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp5drvlcln.swift:10:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp5drvlcln.swift:12:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxcmxhhv0.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqyiw1bae.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpqyiw1bae.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpqyiw1bae.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var max = 0\n    var maxLetter = \"\
    \"\n    for letter in test.lowercased() {\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n        if histogram[letter] > max {\n            max = histogram[letter]\n\
    \            maxLetter = letter\n        }\n    }\n    return histogram\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpsy_32q9s.swift:11:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpsy_32q9s.swift:11:40: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   histogram[letter] = (histogram[letter] ?? 0) + 1\n                       \
    \                ^\n/tmp/tmpsy_32q9s.swift:12:30: error: binary operator '>' cannot\
    \ be applied to operands of type '(key: String, value: Int)' and 'Int'\n     \
    \   if histogram[letter] > max {\n           ~~~~~~~~~~~~~~~~~ ^ ~~~\n/tmp/tmpsy_32q9s.swift:12:30:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n        if histogram[letter] > max {\n                         \
    \    ^\n/tmp/tmpsy_32q9s.swift:12:21: error: no exact matches in call to subscript\
    \ \n        if histogram[letter] > max {\n                    ^\n/tmp/tmpsy_32q9s.swift:12:21:\
    \ note: found candidate with type '(Dictionary<String, Int>.Index) -> (key: String,\
    \ value: Int)'\n        if histogram[letter] > max {\n                    ^\n\
    /tmp/tmpsy_32q9s.swift:12:21: note: candidate expects value of type 'String' for\
    \ parameter #1 (got 'Character')\n        if histogram[letter] > max {\n     \
    \               ^\n/tmp/tmpsy_32q9s.swift:13:28: error: no exact matches in call\
    \ to subscript \n            max = histogram[letter]\n                       \
    \    ^\n/tmp/tmpsy_32q9s.swift:13:28: note: found candidate with type '(Dictionary<String,\
    \ Int>.Index) -> (key: String, value: Int)'\n            max = histogram[letter]\n\
    \                           ^\n/tmp/tmpsy_32q9s.swift:13:28: note: found candidate\
    \ with type '(String) -> @lvalue Int?'\n            max = histogram[letter]\n\
    \                           ^\n/tmp/tmpsy_32q9s.swift:13:28: note: found candidate\
    \ with type '(Range<Dictionary<String, Int>.Index>) -> Slice<[String : Int]>'\n\
    \            max = histogram[letter]\n                           ^\n/tmp/tmpsy_32q9s.swift:13:28:\
    \ note: found candidate with type '((UnboundedRange_) -> ())"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxcmxhhv0.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpr5h6vfi_.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    for letter in\
    \ test.lowercaseString.unicodeScalars {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n        }\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9cp4dqju.swift:9:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfvhm_twz.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpfvhm_twz.swift:9:34: error: value\
    \ of type '[String : Int]' has no member 'value'\n        if let count = histogram.value(forKey:\
    \ letter) {\n                       ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfvhm_twz.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpfvhm_twz.swift:9:34: error: value\
    \ of type '[String : Int]' has no member 'value'\n        if let count = histogram.value(forKey:\
    \ letter) {\n                       ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxcmxhhv0.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter\
    \ = \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_vahea6c.swift:11:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmp_vahea6c.swift:12:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmp_vahea6c.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmp_vahea6c.swift:16:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmp_vahea6c.swift:16:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:17:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmp_vahea6c.swift:17:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    var maxCount = 0\n    for letter\
    \ in test.lowercaseString.characters {\n        if let count = letterCount[letter]\
    \ {\n            letterCount[letter] = count + 1\n            if count > maxCount\
    \ {\n                maxCount = count\n            }\n        } else {\n     \
    \       letterCount[letter] = 1\n        }\n    }\n    return letterCount\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8p_85ezd.swift:9:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    for letter in test.lowercased() {\n\
    \        if let count = result[letter] {\n            result[letter] = count +\
    \ 1\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5drvlcln.swift:9:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp5drvlcln.swift:10:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp5drvlcln.swift:12:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        histogram[letter] = histogram.getOrDefault(letter, 0) + 1\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpoy_a_txw.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmps9xjg__7.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount: [String : Int] = [:]\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9ixml737.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpazg1a0yo.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpazg1a0yo.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpazg1a0yo.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqyiw1bae.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpqyiw1bae.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpqyiw1bae.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter\
    \ = \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_vahea6c.swift:11:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmp_vahea6c.swift:12:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmp_vahea6c.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmp_vahea6c.swift:16:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmp_vahea6c.swift:16:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:17:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmp_vahea6c.swift:17:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var letters = test.characters\n   \
    \ for letter in letters {\n        if let count = histogram[letter] {\n      \
    \      histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5v8kwitr.swift:8:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5v8kwitr.swift:10:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = histogram[letter] {\n                                \
    \ ^\n/tmp/tmp5v8kwitr.swift:11:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            histogram[letter] = count +\
    \ 1\n                      ^\n/tmp/tmp5v8kwitr.swift:13:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            histogram[letter]\
    \ = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3sss5aaq.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpazg1a0yo.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpazg1a0yo.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpazg1a0yo.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3sss5aaq.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    for letter in\
    \ test.lowercased() {\n        if let count = histogram[letter] {\n          \
    \  histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n        if histogram[letter] > maxCount {\n            maxCount\
    \ = histogram[letter]\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpifetjl1a.swift:10:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpifetjl1a.swift:11:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpifetjl1a.swift:13:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmpifetjl1a.swift:15:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmpifetjl1a.swift:15:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmpifetjl1a.swift:15:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmpifetjl1a.swift:15:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmpifetjl1a.swift:15:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmpifetjl1a.swift:16:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmpifetjl1a.swift:16:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmpifetjl1a.swift:16:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmpifetjl1a.swift:16:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var max = 0\n    var maxLetter = \"\
    \"\n    var letter = \"\"\n    for letter in test.lowercased() {\n        histogram[letter]\
    \ = histogram.value(forKey: letter) ?? 0\n        if histogram[letter] > max {\n\
    \            max = histogram[letter]\n            maxLetter = letter\n       \
    \ }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnil3l1te.swift:12:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = histogram.value(forKey:\
    \ letter) ?? 0\n                  ^\n/tmp/tmpnil3l1te.swift:12:39: error: value\
    \ of type '[String : Int]' has no member 'value'\n        histogram[letter] =\
    \ histogram.value(forKey: letter) ?? 0\n                            ~~~~~~~~~\
    \ ^~~~~\n/tmp/tmpnil3l1te.swift:13:30: error: binary operator '>' cannot be applied\
    \ to operands of type '(key: String, value: Int)' and 'Int'\n        if histogram[letter]\
    \ > max {\n           ~~~~~~~~~~~~~~~~~ ^ ~~~\n/tmp/tmpnil3l1te.swift:13:30: note:\
    \ overloads for '>' exist with these partially matching parameter lists: (Int,\
    \ Int)\n        if histogram[letter] > max {\n                             ^\n\
    /tmp/tmpnil3l1te.swift:13:21: error: no exact matches in call to subscript \n\
    \        if histogram[letter] > max {\n                    ^\n/tmp/tmpnil3l1te.swift:13:21:\
    \ note: found candidate with type '(Dictionary<String, Int>.Index) -> (key: String,\
    \ value: Int)'\n        if histogram[letter] > max {\n                    ^\n\
    /tmp/tmpnil3l1te.swift:13:21: note: candidate expects value of type 'String' for\
    \ parameter #1 (got 'Character')\n        if histogram[letter] > max {\n     \
    \               ^\n/tmp/tmpnil3l1te.swift:14:28: error: no exact matches in call\
    \ to subscript \n            max = histogram[letter]\n                       \
    \    ^\n/tmp/tmpnil3l1te.swift:14:28: note: found candidate with type '(Dictionary<String,\
    \ Int>.Index) -> (key: String, value: Int)'\n            max = histogram[letter]\n\
    \                           ^\n/tmp/tmpnil3l1te.swift:14:28: note: found candidate\
    \ with type '(String) -> @lvalue Int?'\n            max = histogram[letter]\n\
    \                           ^\n/tmp/tmpnil3l1te.swift:14:28: note: found candidate\
    \ with type '(Range<Dictionary<String, Int>.Index>) -> Slice<[String : Int]>'\n\
    \            max = histogram[letter]\n                           ^\n/tmp/tmpnil3l1te.swift:14:28:\
    \ note: found candidate with type '((UnboundedRange_) -> ()) -> "
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqyiw1bae.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpqyiw1bae.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpqyiw1bae.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqyiw1bae.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpqyiw1bae.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpqyiw1bae.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    var max = 0\n    for letter in test.lowercased()\
    \ {\n        if let count = result[letter] {\n            result[letter] = count\
    \ + 1\n            if count > max {\n                max = count\n           \
    \ }\n        } else {\n            result[letter] = 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6ugvilk0.swift:10:31: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = result[letter] {\n\
    \                              ^\n/tmp/tmp6ugvilk0.swift:11:20: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       result[letter] = count + 1\n                   ^\n/tmp/tmp6ugvilk0.swift:16:20:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            result[letter] = 1\n                   ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqyiw1bae.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpqyiw1bae.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpqyiw1bae.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmppvvq68l3.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount: [String : Int] = [:]\n    for letter in test.lowercased()\
    \ {\n        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpazg1a0yo.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpazg1a0yo.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpazg1a0yo.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letters: [String: Int] = [:]\n    var maxCount = 0\n    for letter in\
    \ test.lowercased() {\n        if let count = letters[letter] {\n            letters[letter]\
    \ = count + 1\n        } else {\n            letters[letter] = 1\n        }\n\
    \        if letters[letter] > maxCount {\n            maxCount = letters[letter]\n\
    \        }\n    }\n    return letters\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpu3piw9_x.swift:10:32: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letters[letter] {\n\
    \                               ^\n/tmp/tmpu3piw9_x.swift:11:21: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       letters[letter] = count + 1\n                    ^\n/tmp/tmpu3piw9_x.swift:13:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letters[letter] = 1\n                    ^\n/tmp/tmpu3piw9_x.swift:15:19:\
    \ error: no exact matches in call to subscript \n        if letters[letter] >\
    \ maxCount {\n                  ^\n/tmp/tmpu3piw9_x.swift:15:19: note: found candidate\
    \ with type '(Dictionary<String, Int>.Index) -> (key: String, value: Int)'\n \
    \       if letters[letter] > maxCount {\n                  ^\n/tmp/tmpu3piw9_x.swift:15:19:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if letters[letter] > maxCount {\n                  ^\n/tmp/tmpu3piw9_x.swift:15:28:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if letters[letter] > maxCount {\n          \
    \ ~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmpu3piw9_x.swift:15:28: note: overloads for\
    \ '>' exist with these partially matching parameter lists: (Int, Int)\n      \
    \  if letters[letter] > maxCount {\n                           ^\n/tmp/tmpu3piw9_x.swift:16:31:\
    \ error: no exact matches in call to subscript \n            maxCount = letters[letter]\n\
    \                              ^\n/tmp/tmpu3piw9_x.swift:16:31: note: found candidate\
    \ with type '(Dictionary<String, Int>.Index) -> (key: String, value: Int)'\n \
    \           maxCount = letters[letter]\n                              ^\n/tmp/tmpu3piw9_x.swift:16:31:\
    \ note: found candidate with type '(String) -> @lvalue Int?'\n            maxCount\
    \ = letters[letter]\n                              ^\n/tmp/tmpu3piw9_x.swift:16:31:\
    \ note: found candidate with type '(Range<Dictionary<String, Int>.Index>) -> Slice<[String\
    \ : Int]"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        letterCount[letter] = (letterCount[letter] ?? 0) + 1\n    }\n    return\
    \ letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3bdw0a5t.swift:9:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        letterCount[letter] = (letterCount[letter]\
    \ ?? 0) + 1\n                    ^\n/tmp/tmp3bdw0a5t.swift:9:44: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   letterCount[letter] = (letterCount[letter] ?? 0) + 1\n                   \
    \                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var letters = test.characters\n   \
    \ for letter in letters {\n        if let count = histogram[letter] {\n      \
    \      histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5v8kwitr.swift:8:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5v8kwitr.swift:10:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = histogram[letter] {\n                                \
    \ ^\n/tmp/tmp5v8kwitr.swift:11:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            histogram[letter] = count +\
    \ 1\n                      ^\n/tmp/tmp5v8kwitr.swift:13:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            histogram[letter]\
    \ = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfvhm_twz.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpfvhm_twz.swift:9:34: error: value\
    \ of type '[String : Int]' has no member 'value'\n        if let count = histogram.value(forKey:\
    \ letter) {\n                       ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var max = 0\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n            if count > max {\n                max = count\n   \
    \         }\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpszvzc9fb.swift:9:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return histogram\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpq9offke4.swift:9:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        histogram[letter] = (histogram[letter]\
    \ ?? 0) + 1\n                  ^\n/tmp/tmpq9offke4.swift:9:40: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n        histogram[letter]\
    \ = (histogram[letter] ?? 0) + 1\n                                       ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.split(separator:\
    \ \" \") {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmphcwcu_co.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.split(separator: \"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.unicodeScalars\
    \ {\n        if let count = histogram.value(forKey: letter) {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfvhm_twz.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.unicodeScalars {\n\
    \                  ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmpfvhm_twz.swift:9:34: error: value\
    \ of type '[String : Int]' has no member 'value'\n        if let count = histogram.value(forKey:\
    \ letter) {\n                       ~~~~~~~~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    for letter in\
    \ test.lowercased() {\n        if let count = histogram[letter] {\n          \
    \  histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n        if histogram[letter] > maxCount {\n            maxCount\
    \ = histogram[letter]\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpifetjl1a.swift:10:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpifetjl1a.swift:11:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpifetjl1a.swift:13:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmpifetjl1a.swift:15:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmpifetjl1a.swift:15:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmpifetjl1a.swift:15:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmpifetjl1a.swift:15:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmpifetjl1a.swift:15:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmpifetjl1a.swift:16:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmpifetjl1a.swift:16:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmpifetjl1a.swift:16:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmpifetjl1a.swift:16:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var maxCount = 0\n    var maxLetter\
    \ = \"\"\n    for letter in test.lowercased() {\n        if let count = histogram[letter]\
    \ {\n            histogram[letter] = count + 1\n        } else {\n           \
    \ histogram[letter] = 1\n        }\n        if histogram[letter] > maxCount {\n\
    \            maxCount = histogram[letter]\n            maxLetter = letter\n  \
    \      }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_vahea6c.swift:11:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmp_vahea6c.swift:12:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmp_vahea6c.swift:14:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n/tmp/tmp_vahea6c.swift:16:30:\
    \ error: binary operator '>' cannot be applied to operands of type '(key: String,\
    \ value: Int)' and 'Int'\n        if histogram[letter] > maxCount {\n        \
    \   ~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~\n/tmp/tmp_vahea6c.swift:16:30: note: overloads\
    \ for '>' exist with these partially matching parameter lists: (Int, Int)\n  \
    \      if histogram[letter] > maxCount {\n                             ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ error: no exact matches in call to subscript \n        if histogram[letter]\
    \ > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:16:21:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \        if histogram[letter] > maxCount {\n                    ^\n/tmp/tmp_vahea6c.swift:17:33:\
    \ error: no exact matches in call to subscript \n            maxCount = histogram[letter]\n\
    \                                ^\n/tmp/tmp_vahea6c.swift:17:33: note: found\
    \ candidate with type '(Dictionary<String, Int>.Index) -> (key: String, value:\
    \ Int)'\n            maxCount = histogram[letter]\n                          \
    \      ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with type '(String)\
    \ -> @lvalue Int?'\n            maxCount = histogram[letter]\n               \
    \                 ^\n/tmp/tmp_vahea6c.swift:17:33: note: found candidate with\
    \ type '(Range<Dictionary<"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = letterCount[letter] {\n            letterCount[letter]\
    \ = count + 1\n        } else {\n            letterCount[letter] = 1\n       \
    \ }\n    }\n    return letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqyiw1bae.swift:9:36: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = letterCount[letter]\
    \ {\n                                   ^\n/tmp/tmpqyiw1bae.swift:10:25: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = count + 1\n                        ^\n/tmp/tmpqyiw1bae.swift:12:25:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            letterCount[letter] = 1\n                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var result: [String : Int] = [:]\n    var maxCount = 0\n    for char in test.lowercaseString.unicodeScalars\
    \ {\n        let count = test.lowercaseString.unicodeScalars.filter({ $0 == char\
    \ }).count\n        if count > maxCount {\n            maxCount = count\n    \
    \    }\n        result[char] = count\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3u84mis0.swift:9:22: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for char in test.lowercaseString.unicodeScalars {\n \
    \               ~~~~ ^~~~~~~~~~~~~~~\n/tmp/tmp3u84mis0.swift:10:26: error: value\
    \ of type 'String' has no member 'lowercaseString'\n        let count = test.lowercaseString.unicodeScalars.filter({\
    \ $0 == char }).count\n                    ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var letterCount = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        letterCount[letter] = (letterCount[letter] ?? 0) + 1\n    }\n    return\
    \ letterCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3bdw0a5t.swift:9:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        letterCount[letter] = (letterCount[letter]\
    \ ?? 0) + 1\n                    ^\n/tmp/tmp3bdw0a5t.swift:9:44: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   letterCount[letter] = (letterCount[letter] ?? 0) + 1\n                   \
    \                        ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    var letters = test.characters\n   \
    \ for letter in letters {\n        if let count = histogram[letter] {\n      \
    \      histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp5v8kwitr.swift:8:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    var letters = test.characters\n                   \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp5v8kwitr.swift:10:34:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if let count = histogram[letter] {\n                                \
    \ ^\n/tmp/tmp5v8kwitr.swift:11:23: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            histogram[letter] = count +\
    \ 1\n                      ^\n/tmp/tmp5v8kwitr.swift:13:23: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            histogram[letter]\
    \ = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercased() {\n\
    \        if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpc5b5ho1e.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if let count = histogram[letter]\
    \ {\n                                 ^\n/tmp/tmpc5b5ho1e.swift:10:23: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = count + 1\n                      ^\n/tmp/tmpc5b5ho1e.swift:12:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            histogram[letter] = 1\n                      ^\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpppkd9dte.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmps9xjg__7.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\nfunc histogram(test: String) -> [String : Int] {\n\
    \    var histogram = [String : Int]()\n    for letter in test.lowercaseString.characters\
    \ {\n        histogram[letter] = (histogram[letter] ?? 0) + 1\n    }\n    return\
    \ histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmps9xjg__7.swift:8:24: error: value of type 'String' has no member\
    \ 'lowercaseString'\n    for letter in test.lowercaseString.characters {\n   \
    \               ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009528
