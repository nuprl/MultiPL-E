language: swift
name: HumanEval_105_by_length
results:
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var index = 0\n    var last = 0\n    var lastDigit: Int?\n    for\
    \ number in arr {\n        if number > 9 {\n            lastDigit = number\n \
    \       } else {\n            if lastDigit == nil {\n                last = number\n\
    \            } else {\n                if number == lastDigit {\n            \
    \        last = number\n                } else {\n                    result.append(String(last))\n\
    \                    last = number\n                }\n            }\n       \
    \ }\n    }\n    result.append(String(last))\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmppchnzhz9/tmppchnzhz9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7667a86c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b766777db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b766777d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b766777c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppchnzhz9                        0x000055b1af1b98b1 <unavailable> + 6321

    5    libc.so.6                          0x00002b7667c72460 __libc_start_main +
    245

    6    tmppchnzhz9                        0x000055b1af1b9359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let eleven = arr[10]\n    let\
    \ twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen = arr[13]\n \
    \   let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen = arr[16]\n\
    \    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty = arr[19]\n\
    \    let thirty = arr[20]\n    let forty = arr[21]\n    let fifty = arr[22]\n\
    \    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty = arr[25]\n\
    \    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand = arr[28]\n\
    \    let million = arr[29]\n    let billion = arr[30]\n    let trillion = arr[31]\n\
    \    let quadrillion = arr[32]\n    let quintillion = arr[33]\n    let sextillion\
    \ = arr[34]\n    let septillion = arr[35]\n    let octillion = arr[36]\n    let\
    \ nonillion = arr[37]\n    let decillion = arr[38]\n    let undecillion = arr[39]\n\
    \    let duodecillion = arr[40]\n    let tredecillion = arr[41]\n    let quattuordecillion\
    \ = arr[42]\n    let quindecillion = arr[43]\n    let sexdecillion = arr[44]\n\
    \    let septendecillion = arr[45]\n    let octodecillion = arr[46]\n    let novemdecillion\
    \ = arr[47]\n    let vigintillion = arr[48]\n    let unvigintillion = arr[49]\n\
    \    let duovigintillion = arr[50]\n    let trevigintillion = arr[51]\n    let\
    \ quattuorvigintillion = arr[52]\n    let quinvigintillion = arr[53]\n    let\
    \ sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n    let octovigin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprzcl_i12.swift:69:9: error: type annotation missing in pattern\n\
    \    let octovigin\n        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let eleven = arr[10]\n    let\
    \ twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen = arr[13]\n \
    \   let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen = arr[16]\n\
    \    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty = arr[19]\n\
    \    let thirty = arr[20]\n    let forty = arr[21]\n    let fifty = arr[22]\n\
    \    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty = arr[25]\n\
    \    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand = arr[28]\n\
    \    let million = arr[29]\n    let billion = arr[30]\n    let trillion = arr[31]\n\
    \    let quadrillion = arr[32]\n    let quintillion = arr[33]\n    let sextillion\
    \ = arr[34]\n    let septillion = arr[35]\n    let octillion = arr[36]\n    let\
    \ nonillion = arr[37]\n    let decillion = arr[38]\n    let undecillion = arr[39]\n\
    \    let duodecillion = arr[40]\n    let tredecillion = arr[41]\n    let quattuordecillion\
    \ = arr[42]\n    let quindecillion = arr[43]\n    let sexdecillion = arr[44]\n\
    \    let septendecillion = arr[45]\n    let octodecillion = arr[46]\n    let novemdecillion\
    \ = arr[47]\n    let vigintillion = arr[48]\n    let unvigintillion = arr[49]\n\
    \    let duovigintillion = arr[50]\n    let trevigintillion = arr[51]\n    let\
    \ quattuorvigintillion = arr[52]\n    let quinvigintillion = arr[53]\n    let\
    \ sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n    let octovigin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprzcl_i12.swift:69:9: error: type annotation missing in pattern\n\
    \    let octovigin\n        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for i in arr {\n        if i < min {\n            min\
    \ = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n\
    \    var reversed = [Int]()\n    for i in arr {\n        reversed.append(max -\
    \ i)\n    }\n    for i in reversed {\n        result.append(names[i])\n    }\n\
    \    for i in arr {\n        if i < min {\n            result.append(names[i])\n\
    \        }\n        if i > max {\n            result.append(names[i])\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9hn42s76.swift:17:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmp9hn42s76.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp9hn42s76.swift:20:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmp9hn42s76.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp9hn42s76.swift:28:23: error: cannot find 'names' in scope\n\
    \        result.append(names[i])\n                      ^~~~~\n/tmp/tmp9hn42s76.swift:32:27:\
    \ error: cannot find 'names' in scope\n            result.append(names[i])\n \
    \                         ^~~~~\n/tmp/tmp9hn42s76.swift:35:27: error: cannot find\
    \ 'names' in scope\n            result.append(names[i])\n                    \
    \      ^~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n > 0 && n < 10 {\n           \
    \ result.append(name[n - 1])\n        } else {\n            result.append(String(format:\
    \ \"%0*d\", i, n))\n        }\n        i += 1\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5z3uzbou.swift:13:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[n - 1])\n                          ^~~~\n/tmp/tmp5z3uzbou.swift:15:33:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \            result.append(String(format: \"%0*d\", i, n))\n                 \
    \               ^~~~~~~~~\n                                                 radix:\
    \  uppercase: \n/tmp/tmp5z3uzbou.swift:19:19: error: cannot convert return expression\
    \ of type '()' to return type '[String]'\n    return result.reverse()\n      \
    \     ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var reversed = arr.reverse()\n\
    \    for i in reversed.indices {\n        let digit = reversed[i]\n        if\
    \ digit > 9 {\n            continue\n        }\n        let index = Int(digit)\n\
    \        if index == 0 {\n            result.append(One)\n        } else if index\
    \ == 1 {\n            result.append(Two)\n        } else if index == 2 {\n   \
    \         result.append(Three)\n        } else if index == 3 {\n            result.append(Four)\n\
    \        } else if index == 4 {\n            result.append(Five)\n        } else\
    \ if index == 5 {\n            result.append(Six)\n        } else if index ==\
    \ 6 {\n            result.append(Seven)\n        } else if index == 7 {\n    \
    \        result.append(Eight)\n        } else if index == 8 {\n            result.append(Nine)\n\
    \        } else {\n            result.append(digit)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsplcyq0o.swift:13:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    var reversed = arr.reverse()\n       \
    \            ~~~ ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let eleven = arr[10]\n    let\
    \ twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen = arr[13]\n \
    \   let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen = arr[16]\n\
    \    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty = arr[19]\n\
    \    let thirty = arr[20]\n    let forty = arr[21]\n    let fifty = arr[22]\n\
    \    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty = arr[25]\n\
    \    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand = arr[28]\n\
    \    let million = arr[29]\n    let billion = arr[30]\n    let trillion = arr[31]\n\
    \    let quadrillion = arr[32]\n    let quintillion = arr[33]\n    let sextillion\
    \ = arr[34]\n    let septillion = arr[35]\n    let octillion = arr[36]\n    let\
    \ nonillion = arr[37]\n    let decillion = arr[38]\n    let undecillion = arr[39]\n\
    \    let duodecillion = arr[40]\n    let tredecillion = arr[41]\n    let quattuordecillion\
    \ = arr[42]\n    let quindecillion = arr[43]\n    let sexdecillion = arr[44]\n\
    \    let septendecillion = arr[45]\n    let octodecillion = arr[46]\n    let novemdecillion\
    \ = arr[47]\n    let vigintillion = arr[48]\n    let unvigintillion = arr[49]\n\
    \    let duovigintillion = arr[50]\n    let trevigintillion = arr[51]\n    let\
    \ quattuorvigintillion = arr[52]\n    let quinvigintillion = arr[53]\n    let\
    \ sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n    let octovigin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprzcl_i12.swift:69:9: error: type annotation missing in pattern\n\
    \    let octovigin\n        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var i = 0\n    while i < arr.count {\n        if arr[i] < min ||\
    \ arr[i] > max {\n            i += 1\n            continue\n        }\n      \
    \  let digit = arr[i] - min\n        let name = String(digit)\n        result.append(name)\n\
    \        i += 1\n    }\n    for index in 0..<result.count {\n        let name\
    \ = result[index]\n        let digit = Int(name)\n        let reverse = digit\
    \ % 10\n        result[index] = String(reverse)\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbem_x2a3.swift:29:23: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        let reverse = digit % 10\n  \
    \                    ^\n/tmp/tmpbem_x2a3.swift:28:13: note: short-circuit using\
    \ 'guard' to exit this function early if the optional value contains 'nil'\n \
    \       let digit = Int(name)\n            ^\n        guard                 else\
    \ { return <#default value#> }\n/tmp/tmpbem_x2a3.swift:28:21: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        let\
    \ digit = Int(name)\n                    ^\n                              ?? <#default\
    \ value#>\n/tmp/tmpbem_x2a3.swift:28:21: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        let digit = Int(name)\n\
    \                    ^\n                             !\n/tmp/tmpbem_x2a3.swift:29:23:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let reverse = digit % 10\n                      ^\n         \
    \             (     ?? <#default value#>)\n/tmp/tmpbem_x2a3.swift:29:23: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        let reverse = digit % 10\n                      ^\n                 \
    \          !\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = 1\n    let max = 9\n    var result = [String]()\n\
    \    for n in arr {\n        let digit = n % 10\n        let name = String(digit)\n\
    \        if digit >= min && digit <= max {\n            result.append(name)\n\
    \        }\n    }\n    for n in result {\n        let digit = Int(n)!\n      \
    \  let name = String(digit)\n        if digit >= min && digit <= max {\n     \
    \       result.remove(at: result.index(of: name))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcp6pb7r1.swift:24:38: error: value of optional type 'Array<String>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<String>.Index'\
    \ (aka 'Int')\n            result.remove(at: result.index(of: name))\n       \
    \                              ^\n/tmp/tmpcp6pb7r1.swift:24:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.remove(at: result.index(of: name))\n                        \
    \             ^\n                                                     ?? <#default\
    \ value#>\n/tmp/tmpcp6pb7r1.swift:24:38: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result.remove(at:\
    \ result.index(of: name))\n                                     ^\n          \
    \                                          !\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var index = 0\n    while index < arr.count {\n        let value =\
    \ arr[index]\n        if value < 1 || value > 9 {\n            index += 1\n  \
    \          continue\n        }\n        let digit = value - 1 // zero based index\n\
    \        let name = digitToName(digit)\n        result.append(name)\n        index\
    \ += 1\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpago0byy4.swift:18:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmpago0byy4.swift:22:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var reversed = [Int]()\n    for number in arr {\n        reversed.append(number)\n\
    \    }\n    reversed.reverse()\n    for number in reversed {\n        let index\
    \ = Int(number) - 1\n        if index < 0 || index >= 10 {\n            continue\n\
    \        }\n        result.append(names[index])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvsieb4p5.swift:20:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        let digit = number % 10\n        let name =\
    \ digitToName(digit)\n        result.append(name)\n        number /= 10\n    }\n\
    \    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6_d8sroa.swift:12:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmp6_d8sroa.swift:14:16:\
    \ error: left side of mutating operator isn't mutable: 'number' is a 'let' constant\n\
    \        number /= 10\n        ~~~~~~ ^\n/tmp/tmp6_d8sroa.swift:16:19: error:\
    \ cannot convert return expression of type '()' to return type '[String]'\n  \
    \  return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    if arr.isEmpty {\n        return result\n    }\n    let firstDigit\
    \ = arr[0]\n    let lastDigit = arr[arr.count - 1]\n    let firstDigitName = ones[firstDigit]\n\
    \    let lastDigitName = ones[lastDigit]\n    if firstDigit == lastDigit {\n \
    \       result.append(firstDigitName)\n        return result\n    }\n    if firstDigit\
    \ > lastDigit {\n        let temp = firstDigit\n        firstDigit = lastDigit\n\
    \        lastDigit = temp\n    }\n    let firstDigitIndex = arr.index(of: firstDigit)!\n\
    \    let lastDigitIndex = arr.index(of: lastDigit)!\n    let firstDigitName =\
    \ ones[firstDigit]\n    let lastDigitName = ones[lastDigit]\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<lastDigitIndex\
    \ {\n        result.append(ones[arr[i]])\n    }\n    for i in firstDigitIndex..<last\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprma2hi7z.swift:81:36: error: expected '{' to start the body of\
    \ for-each loop\n    for i in firstDigitIndex..<last\n                       \
    \            ^\n/tmp/tmprma2hi7z.swift:15:26: error: cannot find 'ones' in scope\n\
    \    let firstDigitName = ones[firstDigit]\n                         ^~~~\n/tmp/tmprma2hi7z.swift:16:25:\
    \ error: cannot find 'ones' in scope\n    let lastDigitName = ones[lastDigit]\n\
    \                        ^~~~\n/tmp/tmprma2hi7z.swift:23:9: error: cannot assign\
    \ to value: 'firstDigit' is a 'let' constant\n        firstDigit = lastDigit\n\
    \        ^~~~~~~~~~\n/tmp/tmprma2hi7z.swift:13:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let firstDigit = arr[0]\n    ^~~\n    var\n/tmp/tmprma2hi7z.swift:24:9:\
    \ error: cannot assign to value: 'lastDigit' is a 'let' constant\n        lastDigit\
    \ = temp\n        ^~~~~~~~~\n/tmp/tmprma2hi7z.swift:14:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let lastDigit = arr[arr.count - 1]\n    ^~~\n\
    \    var\n/tmp/tmprma2hi7z.swift:26:31: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    let firstDigitIndex = arr.index(of: firstDigit)!\n\
    \                              ^\n/tmp/tmprma2hi7z.swift:26:31: note: use 'firstIndex(of:)'\
    \ instead\n    let firstDigitIndex = arr.index(of: firstDigit)!\n            \
    \                  ^~~~~\n                              firstIndex\n/tmp/tmprma2hi7z.swift:27:30:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n    let lastDigitIndex\
    \ = arr.index(of: lastDigit)!\n                             ^\n/tmp/tmprma2hi7z.swift:27:30:\
    \ note: use 'firstIndex(of:)' instead\n    let lastDigitIndex = arr.index(of:\
    \ lastDigit)!\n                             ^~~~~\n                          \
    \   firstIndex\n/tmp/tmprma2hi7z.swift:28:26: error: cannot find 'ones' in scope\n\
    \    let firstDigitName = ones[firstDigit]\n                         ^~~~\n/tmp/tmprma2hi7z.swift:29:25:\
    \ error: cannot find 'ones' in scope\n    let lastDigitName = ones[lastDigit]\n\
    \                        ^~~~\n/tmp/tmprma2hi7z.swift:31:23: error: cannot find\
    \ 'ones' in scope\n       "
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  let index = Int(number) - 1\n            result.append(names[index])\n    \
    \    }\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpewh9ia2w.swift:13:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[index])\n                          ^~~~~\n/tmp/tmpewh9ia2w.swift:16:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        let digit = String(number)\n        result.append(digits[digit])\n\
    \    }\n    return result.reverse().map { digits[$0] }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpobds2jtm.swift:15:23: error: cannot find 'digits' in scope\n  \
    \      result.append(digits[digit])\n                      ^~~~~~\n/tmp/tmpobds2jtm.swift:17:35:\
    \ error: cannot find 'digits' in scope\n    return result.reverse().map { digits[$0]\
    \ }\n                                  ^~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var reversed = arr.reverse()\n    for n in reversed {\n       \
    \ if n < min || n > max {\n            continue\n        }\n        let index\
    \ = n - min\n        result.append(names[index])\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq9i677n8.swift:15:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    var reversed = arr.reverse()\n       \
    \            ~~~ ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for element in arr {\n        if element > max {\n  \
    \          max = element\n        }\n        if element < min {\n            min\
    \ = element\n        }\n    }\n    var reversed = [String]()\n    for i in min..<max\
    \ {\n        reversed.append(String(format: \"%2d\", i))\n    }\n    for element\
    \ in reversed {\n        if element == \"0\" {\n            result.append(\"\"\
    )\n        } else {\n            result.append(by_length_array[element])\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprzffi16i.swift:17:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = element\n            ^~~\n/tmp/tmprzffi16i.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmprzffi16i.swift:20:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = element\n            ^~~\n/tmp/tmprzffi16i.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmprzffi16i.swift:25:31: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        reversed.append(String(format:\
    \ \"%2d\", i))\n                              ^~~~~~~\n                      \
    \         repeating      count: \n/tmp/tmprzffi16i.swift:31:27: error: cannot\
    \ find 'by_length_array' in scope\n            result.append(by_length_array[element])\n\
    \                          ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = \"One\"\n \
    \   let two = \"Two\"\n    let three = \"Three\"\n    let four = \"Four\"\n  \
    \  let five = \"Five\"\n    let six = \"Six\"\n    let seven = \"Seven\"\n   \
    \ let eight = \"Eight\"\n    let nine = \"Nine\"\n    let ten = \"Ten\"\n    let\
    \ eleven = \"Eleven\"\n    let twelve = \"Twelve\"\n    let thirteen = \"Thirteen\"\
    \n    let fourteen = \"Fourteen\"\n    let fifteen = \"Fifteen\"\n    let sixteen\
    \ = \"Sixteen\"\n    let seventeen = \"Seventeen\"\n    let eighteen = \"Eighteen\"\
    \n    let nineteen = \"Nineteen\"\n    let twenty = \"Twenty\"\n    let thirty\
    \ = \"Thirty\"\n    let forty = \"Forty\"\n    let fifty = \"Fifty\"\n    let\
    \ sixty = \"Sixty\"\n    let seventy = \"Seventy\"\n    let eighty = \"Eighty\"\
    \n    let ninety = \"Ninety\"\n    let hundred = \"Hundred\"\n    let thousand\
    \ = \"Thousand\"\n    let million = \"Million\"\n    let billion = \"Billion\"\
    \n    let trillion = \"Trillion\"\n    let quadrillion = \"Quadrillion\"\n   \
    \ let quintillion = \"Quintillion\"\n    let sextillion = \"Sextillion\"\n   \
    \ let septillion = \"Septillion\"\n    let octillion = \"Octillion\"\n    let\
    \ nonillion = \"Nonillion\"\n    let decillion = \"Decillion\"\n    let undecillion\
    \ = \"Undecillion\"\n    let duodecillion = \"Duodecillion\"\n    let tredecillion\
    \ = \"Tredecillion\"\n    let quattuordecillion = \"Quattuordecillion\"\n    let\
    \ quindecillion = \"Quindecillion\"\n    let sexdecillion = \"Sexdecillion\"\n\
    \    let septendecillion = \"Septendecillion\"\n    let octodecillion = \"Octodecillion\"\
    \n    let novemdecillion = \"Novemdecillion\"\n    let vigintillion = \"Vigintillion\"\
    \n    let unvigin\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpon2a0n55.swift:62:9: error: type annotation missing in pattern\n\
    \    let unvigin\n        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var numbers = [String]()\n    for number in arr {\n        switch number\
    \ {\n        case 1:\n            numbers.append(\"One\")\n        case 2:\n \
    \           numbers.append(\"Two\")\n        case 3:\n            numbers.append(\"\
    Three\")\n        case 4:\n            numbers.append(\"Four\")\n        case\
    \ 5:\n            numbers.append(\"Five\")\n        case 6:\n            numbers.append(\"\
    Six\")\n        case 7:\n            numbers.append(\"Seven\")\n        case 8:\n\
    \            numbers.append(\"Eight\")\n        case 9:\n            numbers.append(\"\
    Nine\")\n        default:\n            continue\n        }\n    }\n    for number\
    \ in numbers {\n        result.append(number)\n    }\n    for number in arr {\n\
    \        switch number {\n        case 1:\n            numbers.append(\"One\"\
    )\n        case 2:\n            numbers.append(\"Two\")\n        case 3:\n   \
    \         numbers.append(\"Three\")\n        case 4:\n            numbers.append(\"\
    Four\")\n        case 5:\n            numbers.append(\"Five\")\n        case 6:\n\
    \            numbers.append(\"Six\")\n        case 7:\n            numbers.append(\"\
    Seven\")\n        case 8:\n            numbers.append(\"Eight\")\n        case\
    \ 9:\n            numbers.append(\"Nine\")\n        default:\n            continue\n\
    \        }\n    }\n    for number in numbers {\n        result.append(number)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpo4o4z_h6/tmpo4o4z_h6.swift:81: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b006a560c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b006a257b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b006a257988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b006a2567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4o4z_h6                        0x000055e2a9bd5841 <unavailable> + 6209

    5    libc.so.6                          0x00002b006a74c460 __libc_start_main +
    245

    6    tmpo4o4z_h6                        0x000055e2a9bd52e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number <= 9 {\n            result.append(String(number))\n\
    \        } else {\n            let index = number - 10\n            result.append(String(index))\n\
    \        }\n    }\n    return result.reverse().map { names[index($0)] }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi487sk3i.swift:18:35: error: cannot find 'names' in scope\n   \
    \ return result.reverse().map { names[index($0)] }\n                         \
    \         ^~~~~\n/tmp/tmpi487sk3i.swift:18:41: error: cannot find 'index' in scope\n\
    \    return result.reverse().map { names[index($0)] }\n                      \
    \                  ^~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var i = 0\n    while i < arr.count {\n        let num = arr[i]\n \
    \       if num < 1 || num > 9 {\n            i += 1\n            continue\n  \
    \      }\n        result.append(String(num))\n        i += 1\n    }\n    if i\
    \ == arr.count {\n        return result\n    }\n    let reversed = result.reverse()\n\
    \    for num in reversed {\n        result.append(String(num))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpms24q53g.swift:23:9: warning: constant 'reversed' inferred to have\
    \ type '()', which may be unexpected\n    let reversed = result.reverse()\n  \
    \      ^\n/tmp/tmpms24q53g.swift:23:9: note: add an explicit type annotation to\
    \ silence this warning\n    let reversed = result.reverse()\n        ^\n     \
    \           : ()\n/tmp/tmpms24q53g.swift:24:16: error: for-in loop requires '()'\
    \ to conform to 'Sequence'\n    for num in reversed {\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var i = 0\n    while i < arr.count {\n        if arr[i] < min {\n\
    \            i += 1\n            continue\n        }\n        if arr[i] > max\
    \ {\n            i += 1\n            continue\n        }\n        let digit =\
    \ arr[i] - min\n        let name = digitToName(digit)\n        result.append(name)\n\
    \        i += 1\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1i3rnd0d.swift:26:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n > 0 && n < 10 {\n           \
    \ result.append(nameOfDigit(n))\n        } else {\n            result.append(nameOfDigit(n))\n\
    \        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n        \
    \    i += 1\n        }\n    }\n    for n in arr {\n        if n > 0 && n < 10\
    \ {\n            i += 1\n        }\n    }\n    for n in arr {\n        if n >\
    \ 0 && n < 10 {\n            i += 1\n        }\n    }\n    for n in arr {\n  \
    \      if n > 0 && n < 10 {\n            i += 1\n        }\n    }\n    for n in\
    \ arr {\n        if n > 0 && n < 10 {\n            i += 1\n        }\n    }\n\
    \    for n in arr {\n        if n > 0 && n < 10 {\n            i += 1\n      \
    \  }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n            i +=\
    \ 1\n        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n    \
    \        i += 1\n        }\n    }\n    for n in arr {\n        if n > 0 && n <\
    \ 10 {\n            i += 1\n        }\n    }\n    for n in arr {\n        if n\
    \ > 0 && n < 10 {\n            i += 1\n        }\n    }\n    for n in arr {\n\
    \        if n > 0 && n < 10 {\n            i += 1\n        }\n    }\n    for n\
    \ in arr {\n        if n > 0 && n < 10 {\n            i += 1\n        }\n    }\n\
    \    for n in arr {\n        if n > 0 && n < 10 {\n            i += 1\n      \
    \  }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n            i +=\
    \ 1\n        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n    \
    \        i += 1\n        }\n    }\n    for n in arr {\n        if n > 0 && n <\
    \ 10 {\n            i += 1\n        }\n    }\n    for n in arr {\n        if n\
    \ > 0 && n < 10 {\n            i += 1\n        }\n    }\n    for n in arr {\n\
    \        if n > 0 && n < 10 {\n            i += 1\n        }\n    }\n    for n\
    \ in arr {\n        if n > 0 && n < 10 {\n            i += 1\n        }\n    }\n\
    \    for n in arr {\n        if n > 0 && n < 10 {\n            i += 1\n      \
    \  }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n            i +=\
    \ 1\n        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n    \
    \        i += 1\n        }\n    }\n    for n in arr {\n        if n > 0 && n <\
    \ 10 {\n            i += 1\n        }\n    }\n    for n in arr {\n        if n\
    \ > 0 && n < 10 {\n            i += 1\n        }\n    }\n    for n in arr {\n\
    \        if n > 0 && n < 10 {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpio64cc2_.swift:160:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpio64cc2_.swift:138:18:\
    \ note: to match this opening '{'\n    for n in arr {\n                 ^\n/tmp/tmpio64cc2_.swift:160:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpio64cc2_.swift:8:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmpio64cc2_.swift:13:27: error: cannot find 'nameOfDigit'\
    \ in scope\n            result.append(nameOfDigit(n))\n                      \
    \    ^~~~~~~~~~~\n/tmp/tmpio64cc2_.swift:15:27: error: cannot find 'nameOfDigit'\
    \ in scope\n            result.append(nameOfDigit(n))\n                      \
    \    ^~~~~~~~~~~\n/tmp/tmpio64cc2_.swift:144:6: error: operator functions can\
    \ only be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        let digit = number % 10\n        let name =\
    \ digitToName(digit)\n        if name != nil {\n            result.append(name!)\n\
    \        }\n    }\n    if result.isEmpty {\n        return result\n    }\n   \
    \ let reversed = result.reverse()\n    for number in reversed {\n        let digit\
    \ = number % 10\n        let name = digitToName(digit)\n        if name != nil\
    \ {\n            result.append(name!)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy5k7dk3_.swift:12:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmpy5k7dk3_.swift:20:9:\
    \ warning: constant 'reversed' inferred to have type '()', which may be unexpected\n\
    \    let reversed = result.reverse()\n        ^\n/tmp/tmpy5k7dk3_.swift:20:9:\
    \ note: add an explicit type annotation to silence this warning\n    let reversed\
    \ = result.reverse()\n        ^\n                : ()\n/tmp/tmpy5k7dk3_.swift:21:19:\
    \ error: for-in loop requires '()' to conform to 'Sequence'\n    for number in\
    \ reversed {\n                  ^~~~~~~~\n/tmp/tmpy5k7dk3_.swift:23:20: error:\
    \ cannot find 'digitToName' in scope\n        let name = digitToName(digit)\n\
    \                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for number in arr {\n        let digit = number % 10\n        if digit\
    \ < 1 || digit > 9 {\n            continue\n        }\n        let index = digit\
    \ - 1 + 10\n        let name = ones[index] + \" \" + twos[index] + \" \" + threes[index]\
    \ + \" \" + fours[index] + \" \" + fives[index] + \" \" + sixs[index] + \" \"\
    \ + sevens[index] + \" \" + eights[index] + \" \" + nines[index]\n        result.append(name)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmbxrllfg.swift:16:20: error: cannot find 'ones' in scope\n    \
    \    let name = ones[index] + \" \" + twos[index] + \" \" + threes[index] + \"\
    \ \" + fours[index] + \" \" + fives[index] + \" \" + sixs[index] + \" \" + sevens[index]\
    \ + \" \" + eights[index] + \" \" + nines[index]\n                   ^~~~\n/tmp/tmpmbxrllfg.swift:16:40:\
    \ error: cannot find 'twos' in scope\n        let name = ones[index] + \" \" +\
    \ twos[index] + \" \" + threes[index] + \" \" + fours[index] + \" \" + fives[index]\
    \ + \" \" + sixs[index] + \" \" + sevens[index] + \" \" + eights[index] + \" \"\
    \ + nines[index]\n                                       ^~~~\n/tmp/tmpmbxrllfg.swift:16:60:\
    \ error: cannot find 'threes' in scope\n        let name = ones[index] + \" \"\
    \ + twos[index] + \" \" + threes[index] + \" \" + fours[index] + \" \" + fives[index]\
    \ + \" \" + sixs[index] + \" \" + sevens[index] + \" \" + eights[index] + \" \"\
    \ + nines[index]\n                                                           ^~~~~~\n\
    /tmp/tmpmbxrllfg.swift:16:82: error: cannot find 'fours' in scope\n        let\
    \ name = ones[index] + \" \" + twos[index] + \" \" + threes[index] + \" \" + fours[index]\
    \ + \" \" + fives[index] + \" \" + sixs[index] + \" \" + sevens[index] + \" \"\
    \ + eights[index] + \" \" + nines[index]\n                                   \
    \                                              ^~~~~\n/tmp/tmpmbxrllfg.swift:16:103:\
    \ error: cannot find 'fives' in scope\n        let name = ones[index] + \" \"\
    \ + twos[index] + \" \" + threes[index] + \" \" + fours[index] + \" \" + fives[index]\
    \ + \" \" + sixs[index] + \" \" + sevens[index] + \" \" + eights[index] + \" \"\
    \ + nines[index]\n                                                           \
    \                                           ^~~~~\n/tmp/tmpmbxrllfg.swift:16:124:\
    \ error: cannot find 'sixs' in scope\n        let name = ones[index] + \" \" +\
    \ twos[index] + \" \" + threes[index] + \" \" + fours[index] + \" \" + fives[index]\
    \ + \" \" + sixs[index] + \" \" + sevens[index] + \" \" + eights[index] + \" \"\
    \ + nines[index]\n                                                           \
    \                                                                "
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var reversed = arr.reverse()\n\
    \    var one = \"One\"\n    var two = \"Two\"\n    var three = \"Three\"\n   \
    \ var four = \"Four\"\n    var five = \"Five\"\n    var six = \"Six\"\n    var\
    \ seven = \"Seven\"\n    var eight = \"Eight\"\n    var nine = \"Nine\"\n    var\
    \ ten = \"Ten\"\n    var hundred = \"Hundred\"\n    var thousand = \"Thousand\"\
    \n    var million = \"Million\"\n    var billion = \"Billion\"\n    var trillion\
    \ = \"Trillion\"\n    var quadrillion = \"Quadrillion\"\n    var quintillion =\
    \ \"Quintillion\"\n    var sextillion = \"Sextillion\"\n    var septillion = \"\
    Septillion\"\n    var octillion = \"Octillion\"\n    var nonillion = \"Nonillion\"\
    \n    var decillion = \"Decillion\"\n    var undecillion = \"Undecillion\"\n \
    \   var duodecillion = \"Duodecillion\"\n    var tredecillion = \"Tredecillion\"\
    \n    var quattuordecillion = \"Quattuordecillion\"\n    var sexdecillion = \"\
    Sexdecillion\"\n    var septendecillion = \"Septendecillion\"\n    var octodecillion\
    \ = \"Octodecillion\"\n    var novemdecillion = \"Novemdecillion\"\n    var vigintillion\
    \ = \"Vigintillion\"\n    var unvigintillion = \"Unvigintillion\"\n    var duovigintillion\
    \ = \"Duovigintillion\"\n    var trevigintillion = \"Trevigintillion\"\n    var\
    \ quattuorvigintillion = \"Quattuorvigintillion\"\n    var sexvigintillion = \"\
    Sexvigintillion\"\n    var septenvigintillion = \"Septenvigintillion\"\n    var\
    \ octovigintillion = \"Octovigintillion\"\n    var novemvigintillion = \"Novemvigintillion\"\
    \n    var vigintillion = \"Vigintillion\"\n    var unvigintillion = \"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpj7na_rxh.swift:54:26: error: unterminated string literal\n    var\
    \ unvigintillion = \"\n                         ^\n/tmp/tmpj7na_rxh.swift:13:24:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \    var reversed = arr.reverse()\n                   ~~~ ^\n/tmp/tmpj7na_rxh.swift:53:9:\
    \ error: invalid redeclaration of 'vigintillion'\n    var vigintillion = \"Vigintillion\"\
    \n        ^\n/tmp/tmpj7na_rxh.swift:44:9: note: 'vigintillion' previously declared\
    \ here\n    var vigintillion = \"Vigintillion\"\n        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    if one > 9 {\n        one = one - 10\n    }\n    if\
    \ two > 9 {\n        two = two - 10\n    }\n    if three > 9 {\n        three\
    \ = three - 10\n    }\n    if four > 9 {\n        four = four - 10\n    }\n  \
    \  if five > 9 {\n        five = five - 10\n    }\n    if six > 9 {\n        six\
    \ = six - 10\n    }\n    if seven > 9 {\n        seven = seven - 10\n    }\n \
    \   if eight > 9 {\n        eight = eight - 10\n    }\n    if nine > 9 {\n   \
    \     nine = nine - 10\n    }\n    let oneStr = String(one)\n    let twoStr =\
    \ String(two)\n    let threeStr = String(three)\n    let fourStr = String(four)\n\
    \    let fiveStr = String(five)\n    let sixStr = String(six)\n    let sevenStr\
    \ = String(seven)\n    let eightStr = String(eight)\n    let nineStr = String(nine)\n\
    \    let oneReversed = oneStr.reversed()\n    let twoReversed = twoStr.reversed()\n\
    \    let threeReversed = threeStr.reversed()\n    let fourReversed = fourStr.reversed()\n\
    \    let fiveReversed = fiveStr.reversed()\n    let sixReversed = sixStr.reversed()\n\
    \    let sevenReversed = sevenStr.reversed()\n    let eightReversed = eightStr.reversed()\n\
    \    let nineReversed = nineStr.reversed()\n    let oneReversedStr = oneReversed.map\
    \ { String($0) }\n    let twoReversedStr = twoReversed.map { String($0) }\n  \
    \  let threeReversedStr = threeReversed.map { String($0) }\n    let fourReversedStr\
    \ = fourReversed.map { String($0) }\n    let fiveReversedStr = fiveReversed.map\
    \ { String($0) }\n    let sixReversedStr = sixReversed.map { String($0) }\n  \
    \  let sevenReversedStr = sevenReversed.map { String($0) }\n    let eightReversedStr\
    \ = eightReversed.map { String($0) }\n    let nineReverse\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2rrmzmkv.swift:23:9: error: cannot assign to value: 'one' is a\
    \ 'let' constant\n        one = one - 10\n        ^~~\n/tmp/tmp2rrmzmkv.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let one = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmp2rrmzmkv.swift:26:9: error: cannot assign to value: 'two' is\
    \ a 'let' constant\n        two = two - 10\n        ^~~\n/tmp/tmp2rrmzmkv.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let two = arr[1]\n    ^~~\n\
    \    var\n/tmp/tmp2rrmzmkv.swift:29:9: error: cannot assign to value: 'three'\
    \ is a 'let' constant\n        three = three - 10\n        ^~~~~\n/tmp/tmp2rrmzmkv.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let three = arr[2]\n   \
    \ ^~~\n    var\n/tmp/tmp2rrmzmkv.swift:32:9: error: cannot assign to value: 'four'\
    \ is a 'let' constant\n        four = four - 10\n        ^~~~\n/tmp/tmp2rrmzmkv.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let four = arr[3]\n    ^~~\n\
    \    var\n/tmp/tmp2rrmzmkv.swift:35:9: error: cannot assign to value: 'five' is\
    \ a 'let' constant\n        five = five - 10\n        ^~~~\n/tmp/tmp2rrmzmkv.swift:17:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let five = arr[4]\n    ^~~\n\
    \    var\n/tmp/tmp2rrmzmkv.swift:38:9: error: cannot assign to value: 'six' is\
    \ a 'let' constant\n        six = six - 10\n        ^~~\n/tmp/tmp2rrmzmkv.swift:18:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let six = arr[5]\n    ^~~\n\
    \    var\n/tmp/tmp2rrmzmkv.swift:41:9: error: cannot assign to value: 'seven'\
    \ is a 'let' constant\n        seven = seven - 10\n        ^~~~~\n/tmp/tmp2rrmzmkv.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let seven = arr[6]\n   \
    \ ^~~\n    var\n/tmp/tmp2rrmzmkv.swift:44:9: error: cannot assign to value: 'eight'\
    \ is a 'let' constant\n        eight = eight - 10\n        ^~~~~\n/tmp/tmp2rrmzmkv.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let eight = arr[7]\n   \
    \ ^~~\n    var\n/tmp/tmp2rrmzmkv.swift:47:9: error: cannot assign to value: 'nine'\
    \ is a 'let' constant\n        nine = nine - 10\n        ^~~~\n/tmp/tmp2rr"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        let digit = String(num)\n        let index = Int(digit)\n\
    \        let name = digits[index - 1]\n        result.append(name)\n    }\n  \
    \  return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsu692cal.swift:16:20: error: cannot find 'digits' in scope\n  \
    \      let name = digits[index - 1]\n                   ^~~~~~\n/tmp/tmpsu692cal.swift:16:27:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \        let name = digits[index - 1]\n                          ^\n/tmp/tmpsu692cal.swift:15:13:\
    \ note: short-circuit using 'guard' to exit this function early if the optional\
    \ value contains 'nil'\n        let index = Int(digit)\n            ^\n      \
    \  guard                  else { return <#default value#> }\n/tmp/tmpsu692cal.swift:15:21:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let index = Int(digit)\n                    ^\n             \
    \                  ?? <#default value#>\n/tmp/tmpsu692cal.swift:15:21: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        let\
    \ index = Int(digit)\n                    ^\n                              !\n\
    /tmp/tmpsu692cal.swift:16:27: note: coalesce using '??' to provide a default when\
    \ the optional value contains 'nil'\n        let name = digits[index - 1]\n  \
    \                        ^\n                          (     ?? <#default value#>)\n\
    /tmp/tmpsu692cal.swift:16:27: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        let name = digits[index - 1]\n\
    \                          ^\n                               !\n/tmp/tmpsu692cal.swift:19:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let firstDigit = arr[0]\n\
    \    switch firstDigit {\n    case 1:\n        result.append(\"One\")\n    case\
    \ 2:\n        result.append(\"Two\")\n    case 3:\n        result.append(\"Three\"\
    )\n    case 4:\n        result.append(\"Four\")\n    case 5:\n        result.append(\"\
    Five\")\n    case 6:\n        result.append(\"Six\")\n    case 7:\n        result.append(\"\
    Seven\")\n    case 8:\n        result.append(\"Eight\")\n    case 9:\n       \
    \ result.append(\"Nine\")\n    default:\n        return result\n    }\n    \n\
    \    let secondDigit = arr[1]\n    switch secondDigit {\n    case 1:\n       \
    \ result.append(\"One\")\n    case 2:\n        result.append(\"Two\")\n    case\
    \ 3:\n        result.append(\"Three\")\n    case 4:\n        result.append(\"\
    Four\")\n    case 5:\n        result.append(\"Five\")\n    case 6:\n        result.append(\"\
    Six\")\n    case 7:\n        result.append(\"Seven\")\n    case 8:\n        result.append(\"\
    Eight\")\n    case 9:\n        result.append(\"Nine\")\n    default:\n       \
    \ return result\n    }\n    \n    let thirdDigit = arr[2]\n    switch thirdDigit\
    \ {\n    case 1:\n        result.append(\"One\")\n    case 2:\n        result.append(\"\
    Two\")\n    case 3:\n        result.append(\"Three\")\n    case 4:\n        result.append(\"\
    Four\")\n    case 5:\n        result.append(\"Five\")\n    case 6:\n        result.append(\"\
    Six\")\n    case 7:\n        result.append(\"Seven\")\n    case 8:\n        result.append(\"\
    Eight\")\n    case 9:\n        result.append(\"Nine\")\n    default:\n       \
    \ return result\n    }\n    \n    let fourthDigit = arr[3]\n    switch fourthDigit\
    \ {\n    case 1:\n        result.append(\"One\")\n    case 2:\n        result.append(\"\
    Two\")\n    case 3:\n        result.append(\"Three\")\n    case 4:\n        result.append(\"\
    Four\")\n    case 5:\n        result.append(\"Five\")\n    case 6:\n        result.append(\"\
    Six\")\n    case 7:\n        result.append(\"Seven\")\n    case 8:\n        result.append(\"\
    Eight\")\n    case 9:\n        result.append(\"Nine\")\n    default:\n       \
    \ return result\n    }\n    \n    let fifthDigit = arr[4]\n    switch fifthDigit\
    \ {\n    case 1:\n        result.append(\"One\")\n    case 2:\n        result.append(\"\
    Two\")\n    case 3:\n        result.append(\"Three\")\n    case 4:\n        result.append(\"\
    Four\")\n    case 5:\n        result.append(\"Five\")\n    case 6:\n        result.append(\"\
    Six\")\n    case 7:\n        result.append(\"Seven\")\n    case 8:\n        result.append(\"\
    Eight\")\n    case 9:\n        result.append(\"Nine\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu6zmhj1g.swift:128:23: error: unterminated string literal\n   \
    \     result.append(\"Nine\n                      ^\n/tmp/tmpu6zmhj1g.swift:148:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpu6zmhj1g.swift:8:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmpu6zmhj1g.swift:128:23: error: missing argument\
    \ for parameter #1 in call\n        result.append(\"Nine\n                   \
    \   ^\n                      <#String#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n/tmp/tmpu6zmhj1g.swift:110:5: error: switch\
    \ must be exhaustive\n    switch fifthDigit {\n    ^\n/tmp/tmpu6zmhj1g.swift:110:5:\
    \ note: do you want to add a default clause?\n    switch fifthDigit {\n    ^\n\
    /tmp/tmpu6zmhj1g.swift:132:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    var j\
    \ = 0\n    var k = 0\n    for k in 0..<arr.count {\n        if arr[k] >= 1 &&\
    \ arr[k] <= 9 {\n            result.append(String(arr[k]))\n        }\n    }\n\
    \    for k in 0..<result.count {\n        if result[k] == \"\" {\n           \
    \ continue\n        }\n        for j in 0..<result.count {\n            if result[j]\
    \ == \"\" {\n                continue\n            }\n            if result[j]\
    \ == result[k] {\n                result[j] = result[k]\n            }\n     \
    \   }\n    }\n    for k in 0..<result.count {\n        if result[k] == \"\" {\n\
    \            result.remove(at: k)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpwkcv93nq/tmpwkcv93nq.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4cd894c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4cd58bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4cd58b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4cd58a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwkcv93nq                        0x000055c1865c6c11 <unavailable> + 7185

    5    libc.so.6                          0x00002af4cda80460 __libc_start_main +
    245

    6    tmpwkcv93nq                        0x000055c1865c66b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var i = 0\n    while i < arr.count {\n        if arr[i] >= 1 && arr[i]\
    \ <= 9 {\n            let digit = arr[i] - 1\n            let name = ones[digit]\n\
    \            result.append(name)\n        } else {\n            result.append(\"\
    \")\n        }\n        i += 1\n    }\n    return result.reverse()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp05y1930_.swift:14:24: error: cannot find 'ones' in scope\n    \
    \        let name = ones[digit]\n                       ^~~~\n/tmp/tmp05y1930_.swift:21:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for number in arr {\n        if number < 1 || number > 9 {\n     \
    \       continue\n        }\n        let digit = String(number)\n        let name\
    \ = digits[digit]\n        result.append(name)\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl5svx11a.swift:15:20: error: cannot find 'digits' in scope\n  \
    \      let name = digits[digit]\n                   ^~~~~~\n/tmp/tmpl5svx11a.swift:18:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n < 10 {\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n        } else {\n            result.append(String(format:\
    \ \"%d\\\"\", n - 10))\n        }\n    }\n    for n in arr {\n        if n < 10\
    \ {\n            result.append(String(format: \"%d\\\"\", n))\n        } else\
    \ {\n            result.append(String(format: \"%d\\\"\", n - 10))\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv_q2vnib.swift:13:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmpv_q2vnib.swift:15:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", n - 10))\n             \
    \                   ^~~~~~~\n                                 repeating      \
    \ count: \n/tmp/tmpv_q2vnib.swift:20:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmpv_q2vnib.swift:22:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", n - 10))\n             \
    \                   ^~~~~~~\n                                 repeating      \
    \ count: \n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for i in arr {\n        if i < min {\n            min\
    \ = i\n        } else if i > max {\n            max = i\n        }\n    }\n  \
    \  if min > 9 {\n        min = \"One\"\n    }\n    if max < 9 {\n        max =\
    \ \"Nine\"\n    }\n    for i in arr {\n        if i < min {\n            result.append(min)\n\
    \        } else if i > max {\n            result.append(max)\n        } else {\n\
    \            result.append(String(i))\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpka_e7cx3.swift:17:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmpka_e7cx3.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpka_e7cx3.swift:19:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmpka_e7cx3.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpka_e7cx3.swift:23:9: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n        min = \"One\"\n        ^~~\n/tmp/tmpka_e7cx3.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpka_e7cx3.swift:23:15: error: cannot assign value of type 'String'\
    \ to type 'Int'\n        min = \"One\"\n              ^~~~~\n/tmp/tmpka_e7cx3.swift:26:9:\
    \ error: cannot assign to value: 'max' is a 'let' constant\n        max = \"Nine\"\
    \n        ^~~\n/tmp/tmpka_e7cx3.swift:14:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let max = arr[0]\n    ^~~\n    var\n/tmp/tmpka_e7cx3.swift:26:15:\
    \ error: cannot assign value of type 'String' to type 'Int'\n        max = \"\
    Nine\"\n              ^~~~~~\n/tmp/tmpka_e7cx3.swift:30:27: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n            result.append(min)\n\
    \                          ^\n/tmp/tmpka_e7cx3.swift:32:27: error: cannot convert\
    \ value of type 'Int' to expected argument type 'String'\n            result.append(max)\n\
    \                          ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    if one == 1 && two == 2 && three\
    \ == 3 && four == 4 && five == 5 && six == 6 && seven == 7 && eight == 8 && nine\
    \ == 9 {\n        return arr\n    }\n    if one == 1 && two == 2 && three == 3\
    \ && four == 4 && five == 5 && six == 6 && seven == 7 && eight == 8 && nine ==\
    \ 9 {\n        return arr.reverse()\n    }\n    if one == 1 && two == 2 && three\
    \ == 3 && four == 4 && five == 5 && six == 6 && seven == 7 && eight == 8 && nine\
    \ == 9 {\n        return arr.reverse().map { $0.description }\n    }\n    if one\
    \ == 1 && two == 2 && three == 3 && four == 4 && five == 5 && six == 6 && seven\
    \ == 7 && eight == 8 && nine == 9 {\n        return arr.reverse().map { $0.description\
    \ }\n    }\n    if one == 1 && two == 2 && three == 3 && four == 4 && five ==\
    \ 5 && six == 6 && seven == 7 && eight == 8 && nine == 9 {\n        return arr.reverse().map\
    \ { $0.description }\n    }\n    if one == 1 && two == 2 && three == 3 && four\
    \ == 4 && five == 5 && six == 6 && seven == 7 && eight == 8 && nine == 9 {\n \
    \       return arr.reverse().map { $0.description }\n    }\n    if one == 1 &&\
    \ two == 2 && three == 3 && four == 4 && five == 5 && six == 6 && seven == 7 &&\
    \ eight == 8 && nine == 9 {\n        return arr.reverse().map { $0.description\
    \ }\n    }\n    if one == 1 && two == 2 && three == 3 && four == 4 && five ==\
    \ 5 && six == 6 && seven == 7 && eight == 8 && nine == 9 {\n        return arr.reverse().map\
    \ { $0.description }\n    }\n    if one == 1 && two == 2 && three == 3 && four\
    \ == 4 && five == 5 && six == 6 && seven == 7 && eight == 8 && nine == 9 {\n \
    \       return arr.reverse().map { \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmb0yap13.swift:68:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpmb0yap13.swift:47:122:\
    \ note: to match this opening '{'\n    if one == 1 && two == 2 && three == 3 &&\
    \ four == 4 && five == 5 && six == 6 && seven == 7 && eight == 8 && nine == 9\
    \ {\n                                                                        \
    \                                                 ^\n/tmp/tmpmb0yap13.swift:68:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpmb0yap13.swift:8:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmpmb0yap13.swift:24:16: error: cannot convert return\
    \ expression of type '[Int]' to return type '[String]'\n        return arr\n \
    \              ^\n/tmp/tmpmb0yap13.swift:24:16: note: arguments to generic parameter\
    \ 'Element' ('Int' and 'String') are expected to be equal\n        return arr\n\
    \               ^\n/tmp/tmpmb0yap13.swift:27:20: error: cannot convert return\
    \ expression of type '()' to return type '[String]'\n        return arr.reverse()\n\
    \               ~~~~^~~~~~~~~\n/tmp/tmpmb0yap13.swift:27:20: error: cannot use\
    \ mutating member on immutable value: 'arr' is a 'let' constant\n        return\
    \ arr.reverse()\n               ~~~ ^\n/tmp/tmpmb0yap13.swift:30:20: error: cannot\
    \ use mutating member on immutable value: 'arr' is a 'let' constant\n        return\
    \ arr.reverse().map { $0.description }\n               ~~~ ^\n/tmp/tmpmb0yap13.swift:30:30:\
    \ error: value of tuple type '()' has no member 'map'\n        return arr.reverse().map\
    \ { $0.description }\n               ~~~~~~~~~~~~~ ^~~\n/tmp/tmpmb0yap13.swift:33:20:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \        return arr.reverse().map { $0.description }\n               ~~~ ^\n/tmp/tmpmb0yap13.swift:"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    if arr.isEmpty {\n        return result\n    }\n    let minLength\
    \ = min(arr.count, 9)\n    for i in minLength...arr.count {\n        let digit\
    \ = arr[i]\n        let name = digitToName(digit)\n        result.append(name)\n\
    \    }\n    let maxLength = max(arr.count, 9)\n    for i in maxLength...arr.count\
    \ {\n        let digit = arr[i]\n        let name = digitToName(digit)\n     \
    \   result.append(name)\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphy2sged3.swift:16:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmphy2sged3.swift:22:20:\
    \ error: cannot find 'digitToName' in scope\n        let name = digitToName(digit)\n\
    \                   ^~~~~~~~~~~\n/tmp/tmphy2sged3.swift:25:19: error: cannot convert\
    \ return expression of type '()' to return type '[String]'\n    return result.reverse()\n\
    \           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    \n    if arr.isEmpty {\n        return result\n    }\n    \n    let one =\
    \ Int(One)\n    let two = Int(Two)\n    let three = Int(Three)\n    let four =\
    \ Int(Four)\n    let five = Int(Five)\n    let six = Int(Six)\n    let seven =\
    \ Int(Seven)\n    let eight = Int(Eight)\n    let nine = Int(Nine)\n    \n   \
    \ let minLength = min(arr.count, 9)\n    \n    for i in minLength..<arr.count\
    \ {\n        let digit = arr[i]\n        \n        if digit < one {\n        \
    \    result.append(String(digit))\n        } else if digit < two {\n         \
    \   result.append(String(digit))\n        } else if digit < three {\n        \
    \    result.append(String(digit))\n        } else if digit < four {\n        \
    \    result.append(String(digit))\n        } else if digit < five {\n        \
    \    result.append(String(digit))\n        } else if digit < six {\n         \
    \   result.append(String(digit))\n        } else if digit < seven {\n        \
    \    result.append(String(digit))\n        } else if digit < eight {\n       \
    \     result.append(String(digit))\n        } else if digit < nine {\n       \
    \     result.append(String(digit))\n        } else {\n            result.append(String(digit))\n\
    \        }\n    }\n    \n    for i in minLength..<arr.count {\n        let digit\
    \ = arr[i]\n        \n        if digit > one {\n            result.append(String(digit))\n\
    \        } else if digit > two {\n            result.append(String(digit))\n \
    \       } else if digit > three {\n            result.append(String(digit))\n\
    \        } else if digit > four {\n            result.append(String(digit))\n\
    \        } else if digit > five {\n            result.append(String(digit))\n\
    \        } else if digit > six {\n            result.append(String(digit))\n \
    \       } else if digit > seven {\n            result.append(String(digit))\n\
    \        } else if digit > eight {\n            result.append(String(digit))\n\
    \        } else if digit > nine {\n            result.append(String(digit))\n\
    \        } else {\n            result.append(String(digit))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx3sb1rf9.swift:15:19: error: cannot find 'One' in scope\n    let\
    \ one = Int(One)\n                  ^~~\n/tmp/tmpx3sb1rf9.swift:16:19: error:\
    \ cannot find 'Two' in scope\n    let two = Int(Two)\n                  ^~~\n\
    /tmp/tmpx3sb1rf9.swift:17:21: error: cannot find 'Three' in scope\n    let three\
    \ = Int(Three)\n                    ^~~~~\n/tmp/tmpx3sb1rf9.swift:18:20: error:\
    \ cannot find 'Four' in scope\n    let four = Int(Four)\n                   ^~~~\n\
    /tmp/tmpx3sb1rf9.swift:19:20: error: cannot find 'Five' in scope\n    let five\
    \ = Int(Five)\n                   ^~~~\n/tmp/tmpx3sb1rf9.swift:20:19: error: cannot\
    \ find 'Six' in scope\n    let six = Int(Six)\n                  ^~~\n/tmp/tmpx3sb1rf9.swift:21:21:\
    \ error: cannot find 'Seven' in scope\n    let seven = Int(Seven)\n          \
    \          ^~~~~\n/tmp/tmpx3sb1rf9.swift:22:21: error: cannot find 'Eight' in\
    \ scope\n    let eight = Int(Eight)\n                    ^~~~~\n/tmp/tmpx3sb1rf9.swift:23:20:\
    \ error: cannot find 'Nine' in scope\n    let nine = Int(Nine)\n             \
    \      ^~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  let name = ones[number-1]\n            result.append(name)\n        } else\
    \ {\n            result.append(String(number))\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbw2kfgot.swift:12:24: error: cannot find 'ones' in scope\n    \
    \        let name = ones[number-1]\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLength = arr.maxElement()\n\
    \    if maxLength < 10 {\n        return result\n    }\n    let one = String(format:\
    \ \"%0*d\", maxLength, 1) + \"One\"\n    let two = String(format: \"%0*d\", maxLength,\
    \ 2) + \"Two\"\n    let three = String(format: \"%0*d\", maxLength, 3) + \"Three\"\
    \n    let four = String(format: \"%0*d\", maxLength, 4) + \"Four\"\n    let five\
    \ = String(format: \"%0*d\", maxLength, 5) + \"Five\"\n    let six = String(format:\
    \ \"%0*d\", maxLength, 6) + \"Six\"\n    let seven = String(format: \"%0*d\",\
    \ maxLength, 7) + \"Seven\"\n    let eight = String(format: \"%0*d\", maxLength,\
    \ 8) + \"Eight\"\n    let nine = String(format: \"%0*d\", maxLength, 9) + \"Nine\"\
    \n    for element in arr {\n        if element < 10 {\n            result.append(one)\n\
    \        } else if element < 20 {\n            result.append(two)\n        } else\
    \ if element < 30 {\n            result.append(three)\n        } else if element\
    \ < 40 {\n            result.append(four)\n        } else if element < 50 {\n\
    \            result.append(five)\n        } else if element < 60 {\n         \
    \   result.append(six)\n        } else if element < 70 {\n            result.append(seven)\n\
    \        } else if element < 80 {\n            result.append(eight)\n        }\
    \ else if element < 90 {\n            result.append(nine)\n        } else {\n\
    \            result.append(String(element))\n        }\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxpdjld8x.swift:13:25: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    let maxLength = arr.maxElement()\n                    ~~~\
    \ ^~~~~~~~~~\n/tmp/tmpxpdjld8x.swift:17:21: error: incorrect argument labels in\
    \ call (have 'format:_:_:', expected '_:radix:uppercase:')\n    let one = String(format:\
    \ \"%0*d\", maxLength, 1) + \"One\"\n                    ^~~~~~~~~\n         \
    \                            radix:     uppercase: \n/tmp/tmpxpdjld8x.swift:17:15:\
    \ error: initializer 'init(_:radix:uppercase:)' requires that 'String' conform\
    \ to 'BinaryInteger'\n    let one = String(format: \"%0*d\", maxLength, 1) + \"\
    One\"\n              ^\nSwift.String:2:12: note: where 'T' = 'String'\n    public\
    \ init<T>(_ value: T, radix: Int = 10, uppercase: Bool = false) where T : BinaryInteger\n\
    \           ^\n/tmp/tmpxpdjld8x.swift:17:49: error: type 'Int' cannot be used\
    \ as a boolean; test for '!= 0' instead\n    let one = String(format: \"%0*d\"\
    , maxLength, 1) + \"One\"\n                                                ^\n\
    \                                                ( != 0)\n/tmp/tmpxpdjld8x.swift:18:21:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \    let two = String(format: \"%0*d\", maxLength, 2) + \"Two\"\n            \
    \        ^~~~~~~~~\n                                     radix:     uppercase:\
    \ \n/tmp/tmpxpdjld8x.swift:18:15: error: initializer 'init(_:radix:uppercase:)'\
    \ requires that 'String' conform to 'BinaryInteger'\n    let two = String(format:\
    \ \"%0*d\", maxLength, 2) + \"Two\"\n              ^\nSwift.String:2:12: note:\
    \ where 'T' = 'String'\n    public init<T>(_ value: T, radix: Int = 10, uppercase:\
    \ Bool = false) where T : BinaryInteger\n           ^\n/tmp/tmpxpdjld8x.swift:18:49:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ let two = String(format: \"%0*d\", maxLength, 2) + \"Two\"\n               \
    \                                 ^\n                                        \
    \        ( != 0)\n/tmp/tmpxpdjld8x.swift:19:23: error: incorrect argument labels\
    \ in call (have 'format:_:_:', expected"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 && $0 < 20 }\n    let hundreds = arr.filter{ $0 >= 20 }\n    let thousands\
    \ = arr.filter{ $0 >= 100 && $0 < 1000 }\n    let millions = arr.filter{ $0 >=\
    \ 1000 && $0 < 10000 }\n    let billions = arr.filter{ $0 >= 10000 && $0 < 1000000\
    \ }\n    let trillions = arr.filter{ $0 >= 1000000 && $0 < 100000000 }\n    let\
    \ quadrillions = arr.filter{ $0 >= 100000000 }\n    let onesAndTens = ones + tens\n\
    \    let onesAndHundreds = ones + hundreds\n    let onesAndThousands = ones +\
    \ thousands\n    let onesAndMillions = ones + millions\n    let onesAndBillions\
    \ = ones + billions\n    let onesAndTrillions = ones + trillions\n    let onesAndQuadrillions\
    \ = ones + quadrillions\n    let onesAndOnesAndTens = onesAndTens + onesAndHundreds\n\
    \    let onesAndOnesAndHundreds = onesAndOnesAndTens + onesAndThousands\n    let\
    \ onesAndOnesAndThousands = onesAndOnesAndHundreds + onesAndMillions\n    let\
    \ onesAndOnesAndMillions = onesAndOnesAndThousands + onesAndBillions\n    let\
    \ onesAndOnesAndBillions = onesAndOnesAndMillions + onesAndTrillions\n    let\
    \ onesAndOnesAndTrillions = onesAndOnesAndBillions + onesAndQuadrillions\n   \
    \ let onesAndOnesAndQuadrillions = onesAndOnesAndTrillions + onesAndOnesAndQuadrillions\n\
    \    let onesAndOnesAndOnesAndTens = onesAndOnesAndOnesAndTens + onesAndOnesAndHundreds\n\
    \    let onesAndOnesAndOnesAndHundreds = onesAndOnesAndOnesAndTens + onesAndOnesAndThousands\n\
    \    let onesAndOnesAndOnesAndThousands = onesAndOnesAndOnesAndHundreds + onesAndOnesAndMillions\n\
    \    let onesAndOnesAndOnesAndMillions = onesAndOnesAndOnesAndThousands + onesAndOnesAndBillions\n\
    \    let onesAndOnesAndOnesAndB\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsfrnh1ww.swift:31:64: error: use of local variable 'onesAndOnesAndQuadrillions'\
    \ before its declaration\n    let onesAndOnesAndQuadrillions = onesAndOnesAndTrillions\
    \ + onesAndOnesAndQuadrillions\n                                             \
    \                  ^\n/tmp/tmpsfrnh1ww.swift:31:9: note: 'onesAndOnesAndQuadrillions'\
    \ declared here\n    let onesAndOnesAndQuadrillions = onesAndOnesAndTrillions\
    \ + onesAndOnesAndQuadrillions\n        ^\n/tmp/tmpsfrnh1ww.swift:32:37: error:\
    \ use of local variable 'onesAndOnesAndOnesAndTens' before its declaration\n \
    \   let onesAndOnesAndOnesAndTens = onesAndOnesAndOnesAndTens + onesAndOnesAndHundreds\n\
    \                                    ^\n/tmp/tmpsfrnh1ww.swift:32:9: note: 'onesAndOnesAndOnesAndTens'\
    \ declared here\n    let onesAndOnesAndOnesAndTens = onesAndOnesAndOnesAndTens\
    \ + onesAndOnesAndHundreds\n        ^\n/tmp/tmpsfrnh1ww.swift:36:9: error: type\
    \ annotation missing in pattern\n    let onesAndOnesAndOnesAndB\n        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var i = 0\n    while i < arr.count {\n        if arr[i] < min {\n\
    \            i += 1\n            continue\n        }\n        if arr[i] > max\
    \ {\n            i += 1\n            continue\n        }\n        let digit =\
    \ arr[i] - min\n        let name = String(digit)\n        result.append(name)\n\
    \        i += 1\n    }\n    for index in 0..<result.count {\n        let name\
    \ = result[index]\n        let digit = Int(name) - min\n        let newDigit =\
    \ digit % 10\n        result[index] = String(newDigit)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgystpfii.swift:32:21: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        let digit = Int(name) - min\n\
    \                    ^\n/tmp/tmpgystpfii.swift:32:21: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        let digit\
    \ = Int(name) - min\n                    ^\n                    (         ?? <#default\
    \ value#>)\n/tmp/tmpgystpfii.swift:32:21: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        let digit = Int(name)\
    \ - min\n                    ^\n                             !\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var index = 0\n    while\
    \ index < arr.count {\n        let value = arr[index]\n        if value < 1 ||\
    \ value > 9 {\n            index += 1\n            continue\n        }\n     \
    \   let digit = value - 1 // value starts at 1\n        let name = ones[digit]\n\
    \        result.append(name)\n        index += 1\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzpti4bh8.swift:21:20: error: cannot find 'ones' in scope\n    \
    \    let name = ones[digit]\n                   ^~~~\n/tmp/tmpzpti4bh8.swift:25:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var len = arr.count\n    if len == 0 {\n        return result\n    }\n  \
    \  if len == 1 {\n        if arr[0] == 1 {\n            return [\"One\"]\n   \
    \     } else {\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        }\n    }\n    if len\
    \ == 2 {\n        if arr[0] == 1 && arr[1] == 2 {\n            return [\"One\"\
    , \"Two\"]\n        } else {\n            return [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        }\n  \
    \  }\n    if len == 3 {\n        if arr[0] == 1 && arr[1] == 2 && arr[2] == 3\
    \ {\n            return [\"One\", \"Two\", \"Three\"]\n        } else {\n    \
    \        return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"\
    Seven\", \"Eight\", \"Nine\"]\n        }\n    }\n    if len == 4 {\n        if\
    \ arr[0] == 1 && arr[1] == 2 && arr[2] == 3 && arr[3] == 4 {\n            return\
    \ [\"One\", \"Two\", \"Three\", \"Four\"]\n        } else {\n            return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]\n        }\n    }\n    if len == 5 {\n        if arr[0] == 1 && arr[1]\
    \ == 2 && arr[2] == 3 && arr[3] == 4 && arr[4] == 5 {\n            return [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\"]\n        } else {\n           \
    \ return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\"]\n        }\n    }\n    if len == 6 {\n        if arr[0]\
    \ == 1 && arr[1] == 2 && arr[2] == 3 && arr[3] == 4 && arr[4] == 5 && arr[5] ==\
    \ 6 {\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
    Six\"]\n        } else {\n            return [\"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        }\n    }\n\
    \    if len == 7 {\n        if arr[0] == 1 && arr[1] == 2 && arr[2] == 3 && arr[3]\
    \ == 4 && arr[4] == 5 && arr[5] == 6 && arr[6] == 7 {\n            return [\"\
    One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"]\n        }\
    \ else {\n            return [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        }\n    }\n    if len == 8\
    \ {\n        if arr[0] == 1 && arr[1] == 2 && arr[2] == 3 && arr[3] == 4 && arr[4]\
    \ == 5 && arr[5] == 6 && arr[6] == 7 && arr[7] == \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpskwhl2oi.swift:65:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpskwhl2oi.swift:84:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpskwhl2oi.swift:8:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpskwhl2oi.swift:68:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let hundred = arr[10]\n    let\
    \ thousand = arr[11]\n    let ten_thousand = arr[12]\n    let hundred_thousand\
    \ = arr[13]\n    let million = arr[14]\n    let billion = arr[15]\n    let trillion\
    \ = arr[16]\n    let quadrillion = arr[17]\n    let quintillion = arr[18]\n  \
    \  let sextillion = arr[19]\n    let septillion = arr[20]\n    let octillion =\
    \ arr[21]\n    let nonillion = arr[22]\n    let decillion = arr[23]\n    let undecillion\
    \ = arr[24]\n    let duodecillion = arr[25]\n    let tredecillion = arr[26]\n\
    \    let quattuordecillion = arr[27]\n    let quindecillion = arr[28]\n    let\
    \ sexdecillion = arr[29]\n    let septendecillion = arr[30]\n    let octodecillion\
    \ = arr[31]\n    let novemdecillion = arr[32]\n    let vigintillion = arr[33]\n\
    \    let unvigintillion = arr[34]\n    let duovigintillion = arr[35]\n    let\
    \ trevigintillion = arr[36]\n    let quattuorvigintillion = arr[37]\n    let quinvigintillion\
    \ = arr[38]\n    let sexvigintillion = arr[39]\n    let septenvigintillion = arr[40]\n\
    \    let octovigintillion = arr[41]\n    let novemvigintillion = arr[42]\n   \
    \ let vigintillion = arr[43]\n    let unvigintillion = arr[44]\n    let duovigintillion\
    \ = arr[45]\n    let trevigintillion = arr[46]\n    let quattuorvigintillion =\
    \ arr[47]\n    let quinvigintillion = arr[48]\n    let sexvigintillion = arr[49]\n\
    \    let septenvigintillion = arr[50]\n    let octovigintillion = arr[5\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6a5jv1tv.swift:65:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmp6a5jv1tv.swift:64:31: note: to match this opening '['\n    let octovigintillion\
    \ = arr[5\n                              ^\n/tmp/tmp6a5jv1tv.swift:56:9: error:\
    \ invalid redeclaration of 'vigintillion'\n    let vigintillion = arr[43]\n  \
    \      ^\n/tmp/tmp6a5jv1tv.swift:46:9: note: 'vigintillion' previously declared\
    \ here\n    let vigintillion = arr[33]\n        ^\n/tmp/tmp6a5jv1tv.swift:57:9:\
    \ error: invalid redeclaration of 'unvigintillion'\n    let unvigintillion = arr[44]\n\
    \        ^\n/tmp/tmp6a5jv1tv.swift:47:9: note: 'unvigintillion' previously declared\
    \ here\n    let unvigintillion = arr[34]\n        ^\n/tmp/tmp6a5jv1tv.swift:58:9:\
    \ error: invalid redeclaration of 'duovigintillion'\n    let duovigintillion =\
    \ arr[45]\n        ^\n/tmp/tmp6a5jv1tv.swift:48:9: note: 'duovigintillion' previously\
    \ declared here\n    let duovigintillion = arr[35]\n        ^\n/tmp/tmp6a5jv1tv.swift:59:9:\
    \ error: invalid redeclaration of 'trevigintillion'\n    let trevigintillion =\
    \ arr[46]\n        ^\n/tmp/tmp6a5jv1tv.swift:49:9: note: 'trevigintillion' previously\
    \ declared here\n    let trevigintillion = arr[36]\n        ^\n/tmp/tmp6a5jv1tv.swift:60:9:\
    \ error: invalid redeclaration of 'quattuorvigintillion'\n    let quattuorvigintillion\
    \ = arr[47]\n        ^\n/tmp/tmp6a5jv1tv.swift:50:9: note: 'quattuorvigintillion'\
    \ previously declared here\n    let quattuorvigintillion = arr[37]\n        ^\n\
    /tmp/tmp6a5jv1tv.swift:61:9: error: invalid redeclaration of 'quinvigintillion'\n\
    \    let quinvigintillion = arr[48]\n        ^\n/tmp/tmp6a5jv1tv.swift:51:9: note:\
    \ 'quinvigintillion' previously declared here\n    let quinvigintillion = arr[38]\n\
    \        ^\n/tmp/tmp6a5jv1tv.swift:62:9: error: invalid redeclaration of 'sexvigintillion'\n\
    \    let sexvigintillion = arr[49]\n        ^\n/tmp/tmp6a5jv1tv.swift:52:9: note:\
    \ 'sexvigintillion' previously declared here\n    let sexvigintillion = arr[39]\n\
    \        ^\n/tmp/tmp6a5jv1tv.swift:63:9: error: invalid redeclaration of 'septenvigintillion'\n\
    \    let septenvigintillion = arr[50]\n       "
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for value in arr {\n        if value < min {\n      \
    \      min = value\n        } else if value > max {\n            max = value\n\
    \        }\n    }\n    let one = String(format: \"%0*d\", 0, min)\n    let two\
    \ = String(format: \"%0*d\", 0, max)\n    let ones = String(format: \"%0*d\",\
    \ 0, 9)\n    let twos = String(format: \"%0*d\", 0, 9)\n    let onesAndTwos =\
    \ String(format: \"%0*d\", 0, 9)\n    let onesAndTwosAndThrees = String(format:\
    \ \"%0*d\", 0, 9)\n    let onesAndTwosAndThreesAndFours = String(format: \"%0*d\"\
    , 0, 9)\n    let onesAndTwosAndThreesAndFoursAndFives = String(format: \"%0*d\"\
    , 0, 9)\n    let onesAndTwosAndThreesAndFoursAndFivesAndSix = String(format: \"\
    %0*d\", 0, 9)\n    let onesAndTwosAndThreesAndFoursAndFivesAndSixAndSeven = String(format:\
    \ \"%0*d\", 0, 9)\n    let onesAndTwosAndThreesAndFoursAndFivesAndSixAndSevenAndEight\
    \ = String(format: \"%0*d\", 0, 9)\n    let onesAndTwosAndThreesAndFoursAndFivesAndSixAndSevenAndEightAndNine\
    \ = String(format: \"%0*d\", 0, 9)\n    let onesAndTwosAndThreesAndFoursAndFivesAndSixAndSevenAndEightAndNineAndTen\
    \ = String(format: \"%0*d\", 0, 9)\n    let onesAndTwosAndThreesAndFoursAndFivesAndSixAndSevenAndEightAndNineAndTenAndEleven\
    \ = String(format: \"%0*d\", 0, 9)\n    let onesAndTwosAndThreesAndFoursAndFivesAndSixAndSevenAndEightAndNineAndTenAndElevenAndTwelve\
    \ = String(format: \"%0*d\", 0, 9)\n    let onesAndTwosAndThreesAndFoursAndFivesAndSixAndSevenAndEightAndNineAndTenAndElevenAndTwelveAndThirteen\
    \ = String(format: \"%0*d\", 0, 9)\n    let onesAndTwosAndThreesAndFoursAndFivesAndSixAndSevenAndEightAndNineAndTenAndElevenAndTwelveAndThirteenAndFourteen\
    \ = String(format: \"%0*d\", 0, 9)\n    let \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplmljskj1.swift:39:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmplmljskj1.swift:17:13: error: cannot assign to value: 'min' is a 'let'\
    \ constant\n            min = value\n            ^~~\n/tmp/tmplmljskj1.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmplmljskj1.swift:19:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = value\n            ^~~\n/tmp/tmplmljskj1.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmplmljskj1.swift:22:21: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n    let one = String(format:\
    \ \"%0*d\", 0, min)\n                    ^~~~~~~~~\n                         \
    \            radix:  uppercase: \n/tmp/tmplmljskj1.swift:22:41: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    let one = String(format:\
    \ \"%0*d\", 0, min)\n                                        ^\n             \
    \                           (   != 0)\n/tmp/tmplmljskj1.swift:22:15: error: initializer\
    \ 'init(_:radix:uppercase:)' requires that 'String' conform to 'BinaryInteger'\n\
    \    let one = String(format: \"%0*d\", 0, min)\n              ^\nSwift.String:2:12:\
    \ note: where 'T' = 'String'\n    public init<T>(_ value: T, radix: Int = 10,\
    \ uppercase: Bool = false) where T : BinaryInteger\n           ^\n/tmp/tmplmljskj1.swift:23:21:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \    let two = String(format: \"%0*d\", 0, max)\n                    ^~~~~~~~~\n\
    \                                     radix:  uppercase: \n/tmp/tmplmljskj1.swift:23:41:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \ let two = String(format: \"%0*d\", 0, max)\n                               \
    \         ^\n                                        (   != 0)\n/tmp/tmplmljskj1.swift:23:15:\
    \ error: initializer 'init(_:radix:uppercase:)' requires that 'String' conform\
    \ to 'BinaryInteger'\n    let two = String(format: \"%0*d\", 0, ma"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    var result = [String]()\n    var i =\
    \ 0\n    while i < arr.count {\n        let j = i\n        while j < arr.count\
    \ && arr[j] < 10 {\n            j += 1\n        }\n        if j == i {\n     \
    \       result.append(String(arr[i]))\n        } else {\n            result.append(String(arr[i])\
    \ + \"-\" + String(arr[j]))\n        }\n        i = j\n    }\n    for index in\
    \ 0..<result.count {\n        let value = result[index]\n        let index = Int(value[value.startIndex])!\n\
    \        let name = One[index] ?? \"\"\n        result[index] = name\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_tkt4pfu.swift:17:15: error: left side of mutating operator isn't\
    \ mutable: 'j' is a 'let' constant\n            j += 1\n            ~ ^\n/tmp/tmp_tkt4pfu.swift:15:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let j = i\n        ^~~\n\
    \        var\n/tmp/tmp_tkt4pfu.swift:28:30: error: subscript 'subscript(_:)' requires\
    \ that 'String.Index' conform to 'RangeExpression'\n        let index = Int(value[value.startIndex])!\n\
    \                             ^\nSwift.Collection:2:23: note: where 'R' = 'String.Index'\n\
    \    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression,\
    \ Self.Index == R.Bound { get }\n                      ^\n/tmp/tmp_tkt4pfu.swift:29:20:\
    \ error: cannot find 'One' in scope\n        let name = One[index] ?? \"\"\n \
    \                  ^~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var reversed = arr.reverse()\n\
    \    for i in reversed.indices {\n        let digit = reversed[i]\n        if\
    \ digit < 10 {\n            result.append(String(digit))\n        } else {\n \
    \           let index = digit - 10\n            let name = ones[index] + \" \"\
    \ + twos[index] + \" \" + threes[index] + \" \" + fours[index] + \" \" + fives[index]\
    \ + \" \" + sixs[index] + \" \" + sevens[index] + \" \" + eights[index] + \" \"\
    \ + nines[index]\n            result.append(name)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3olh25ol.swift:13:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    var reversed = arr.reverse()\n       \
    \            ~~~ ^\n/tmp/tmp3olh25ol.swift:20:24: error: cannot find 'ones' in\
    \ scope\n            let name = ones[index] + \" \" + twos[index] + \" \" + threes[index]\
    \ + \" \" + fours[index] + \" \" + fives[index] + \" \" + sixs[index] + \" \"\
    \ + sevens[index] + \" \" + eights[index] + \" \" + nines[index]\n           \
    \            ^~~~\n/tmp/tmp3olh25ol.swift:20:44: error: cannot find 'twos' in\
    \ scope\n            let name = ones[index] + \" \" + twos[index] + \" \" + threes[index]\
    \ + \" \" + fours[index] + \" \" + fives[index] + \" \" + sixs[index] + \" \"\
    \ + sevens[index] + \" \" + eights[index] + \" \" + nines[index]\n           \
    \                                ^~~~\n/tmp/tmp3olh25ol.swift:20:64: error: cannot\
    \ find 'threes' in scope\n            let name = ones[index] + \" \" + twos[index]\
    \ + \" \" + threes[index] + \" \" + fours[index] + \" \" + fives[index] + \" \"\
    \ + sixs[index] + \" \" + sevens[index] + \" \" + eights[index] + \" \" + nines[index]\n\
    \                                                               ^~~~~~\n/tmp/tmp3olh25ol.swift:20:86:\
    \ error: cannot find 'fours' in scope\n            let name = ones[index] + \"\
    \ \" + twos[index] + \" \" + threes[index] + \" \" + fours[index] + \" \" + fives[index]\
    \ + \" \" + sixs[index] + \" \" + sevens[index] + \" \" + eights[index] + \" \"\
    \ + nines[index]\n                                                           \
    \                          ^~~~~\n/tmp/tmp3olh25ol.swift:20:107: error: cannot\
    \ find 'fives' in scope\n            let name = ones[index] + \" \" + twos[index]\
    \ + \" \" + threes[index] + \" \" + fours[index] + \" \" + fives[index] + \" \"\
    \ + sixs[index] + \" \" + sevens[index] + \" \" + eights[index] + \" \" + nines[index]\n\
    \                                                                            \
    \                              ^~~~~\n/tmp/tmp3olh25ol.swift:20:128: error: cannot\
    \ find 'sixs' in scope\n            let name = ones[index] + \" \" + twos[index]\
    \ + \" \" + threes[index] + \" \" + fours[index] + \" \" + fives[ind"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = \"One\"\n \
    \   let two = \"Two\"\n    let three = \"Three\"\n    let four = \"Four\"\n  \
    \  let five = \"Five\"\n    let six = \"Six\"\n    let seven = \"Seven\"\n   \
    \ let eight = \"Eight\"\n    let nine = \"Nine\"\n    let ten = \"Ten\"\n    let\
    \ eleven = \"Eleven\"\n    let twelve = \"Twelve\"\n    let thirteen = \"Thirteen\"\
    \n    let fourteen = \"Fourteen\"\n    let fifteen = \"Fifteen\"\n    let sixteen\
    \ = \"Sixteen\"\n    let seventeen = \"Seventeen\"\n    let eighteen = \"Eighteen\"\
    \n    let nineteen = \"Nineteen\"\n    let twenty = \"Twenty\"\n    let thirty\
    \ = \"Thirty\"\n    let forty = \"Forty\"\n    let fifty = \"Fifty\"\n    let\
    \ sixty = \"Sixty\"\n    let seventy = \"Seventy\"\n    let eighty = \"Eighty\"\
    \n    let ninety = \"Ninety\"\n    let hundred = \"Hundred\"\n    let thousand\
    \ = \"Thousand\"\n    let million = \"Million\"\n    let billion = \"Billion\"\
    \n    let trillion = \"Trillion\"\n    let quadrillion = \"Quadrillion\"\n   \
    \ let quintillion = \"Quintillion\"\n    let sextillion = \"Sextillion\"\n   \
    \ let septillion = \"Septellion\"\n    let octillion = \"Octillion\"\n    let\
    \ nonillion = \"Nonillion\"\n    let decillion = \"Decillion\"\n    let undecillion\
    \ = \"Undecillion\"\n    let duodecillion = \"Duodecillion\"\n    let tredecillion\
    \ = \"Tredecillion\"\n    let quattuordecillion = \"Quattuordecillion\"\n    let\
    \ quindecillion = \"Quindecillion\"\n    let sexdecillion = \"Sexdecillion\"\n\
    \    let septendecillion = \"Septemtendecillion\"\n    let octodecillion = \"\
    Octodecillion\"\n    let novemdecillion = \"Novemdecillion\"\n    let vigintillion\
    \ = \"Vigintillion\"\n    let unvigin\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf0jvlyqo.swift:62:9: error: type annotation missing in pattern\n\
    \    let unvigin\n        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    if one == 1 && two == 2 && three == 3 && four == 4\
    \ && five == 5 && six == 6 && seven == 7 && eight == 8 && nine == 9 {\n      \
    \  return arr\n    }\n    let reversed = arr.reverse()\n    let reversedString\
    \ = reversed.map { String($0) }\n    let oneString = reversedString.map { String($0)\
    \ }\n    let twoString = oneString.map { String($0) }\n    let threeString = twoString.map\
    \ { String($0) }\n    let fourString = threeString.map { String($0) }\n    let\
    \ fiveString = fourString.map { String($0) }\n    let sixString = fiveString.map\
    \ { String($0) }\n    let sevenString = sixString.map { String($0) }\n    let\
    \ eightString = sevenString.map { String($0) }\n    let nineString = eightString.map\
    \ { String($0) }\n    let oneReversed = oneString.reverse()\n    let twoReversed\
    \ = twoString.reverse()\n    let threeReversed = threeString.reverse()\n    let\
    \ fourReversed = fourString.reverse()\n    let fiveReversed = fiveString.reverse()\n\
    \    let sixReversed = sixString.reverse()\n    let sevenReversed = sevenString.reverse()\n\
    \    let eightReversed = eightString.reverse()\n    let nineReversed = nineString.reverse()\n\
    \    let oneReversedString = oneReversed.map { String($0) }\n    let twoReversedString\
    \ = twoReversed.map { String($0) }\n    let threeReversedString = threeReversed.map\
    \ { String($0) }\n    let fourReversedString = fourReversed.map { String($0) }\n\
    \    let fiveReversedString = fiveReversed.map { String($0) }\n    let sixReversedString\
    \ = sixReversed.map { String($0) }\n    let sevenReversedString = sevenReversed.map\
    \ { String($0) }\n    let eightReversedString = eightReversed.map { String($0)\
    \ }\n    let nineReversedString = nineReversed.map { String($0) }\n    let oneReversedReversed\
    \ = oneReversedString.reverse()\n    let twoReversedReversed = twoReversedString.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmomk5kk0.swift:23:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmpmomk5kk0.swift:23:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmpmomk5kk0.swift:25:24: error: cannot use mutating member on immutable value:\
    \ 'arr' is a 'let' constant\n    let reversed = arr.reverse()\n              \
    \     ~~~ ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var temp = [String]()\n    var i = 0\n    for n in arr {\n        if n >\
    \ 9 {\n            temp = append(temp, \"Nine\")\n        } else {\n         \
    \   temp = append(temp, nameOf(n))\n        }\n    }\n    temp = append(temp,\
    \ \"One\")\n    temp = append(temp, \"Two\")\n    temp = append(temp, \"Three\"\
    )\n    temp = append(temp, \"Four\")\n    temp = append(temp, \"Five\")\n    temp\
    \ = append(temp, \"Six\")\n    temp = append(temp, \"Seven\")\n    temp = append(temp,\
    \ \"Eight\")\n    temp = append(temp, \"Nine\")\n    for n in arr {\n        if\
    \ n > 9 {\n            temp = append(temp, \"Nine\")\n        } else {\n     \
    \       temp = append(temp, nameOf(n))\n        }\n    }\n    result = append(result,\
    \ temp)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp76h3i4b0.swift:14:20: error: cannot find 'append' in scope\n  \
    \          temp = append(temp, \"Nine\")\n                   ^~~~~~\n/tmp/tmp76h3i4b0.swift:16:20:\
    \ error: cannot find 'append' in scope\n            temp = append(temp, nameOf(n))\n\
    \                   ^~~~~~\n/tmp/tmp76h3i4b0.swift:16:33: error: cannot find 'nameOf'\
    \ in scope\n            temp = append(temp, nameOf(n))\n                     \
    \           ^~~~~~\n/tmp/tmp76h3i4b0.swift:19:12: error: cannot find 'append'\
    \ in scope\n    temp = append(temp, \"One\")\n           ^~~~~~\n/tmp/tmp76h3i4b0.swift:20:12:\
    \ error: cannot find 'append' in scope\n    temp = append(temp, \"Two\")\n   \
    \        ^~~~~~\n/tmp/tmp76h3i4b0.swift:21:12: error: cannot find 'append' in\
    \ scope\n    temp = append(temp, \"Three\")\n           ^~~~~~\n/tmp/tmp76h3i4b0.swift:22:12:\
    \ error: cannot find 'append' in scope\n    temp = append(temp, \"Four\")\n  \
    \         ^~~~~~\n/tmp/tmp76h3i4b0.swift:23:12: error: cannot find 'append' in\
    \ scope\n    temp = append(temp, \"Five\")\n           ^~~~~~\n/tmp/tmp76h3i4b0.swift:24:12:\
    \ error: cannot find 'append' in scope\n    temp = append(temp, \"Six\")\n   \
    \        ^~~~~~\n/tmp/tmp76h3i4b0.swift:25:12: error: cannot find 'append' in\
    \ scope\n    temp = append(temp, \"Seven\")\n           ^~~~~~\n/tmp/tmp76h3i4b0.swift:26:12:\
    \ error: cannot find 'append' in scope\n    temp = append(temp, \"Eight\")\n \
    \          ^~~~~~\n/tmp/tmp76h3i4b0.swift:27:12: error: cannot find 'append' in\
    \ scope\n    temp = append(temp, \"Nine\")\n           ^~~~~~\n/tmp/tmp76h3i4b0.swift:30:20:\
    \ error: cannot find 'append' in scope\n            temp = append(temp, \"Nine\"\
    )\n                   ^~~~~~\n/tmp/tmp76h3i4b0.swift:32:20: error: cannot find\
    \ 'append' in scope\n            temp = append(temp, nameOf(n))\n            \
    \       ^~~~~~\n/tmp/tmp76h3i4b0.swift:32:33: error: cannot find 'nameOf' in scope\n\
    \            temp = append(temp, nameOf(n))\n                                ^~~~~~\n\
    /tmp/tmp76h3i4b0.swift:35:14: error: cannot find 'append' in scope\n    result\
    \ = append(result, temp)\n             ^~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var index = 0\n    while index < arr.count {\n        let value\
    \ = arr[index]\n        if value < min || value > max {\n            index +=\
    \ 1\n            continue\n        }\n        let digit = value - min\n      \
    \  let name = String(digit)\n        result.append(name)\n        index += 1\n\
    \    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp73jgcxg6.swift:27:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n\
    \    let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let\
    \ five = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight =\
    \ arr[7]\n    let nine = arr[8]\n    let ten = arr[9]\n    let hundred = arr[10]\n\
    \    let thousand = arr[11]\n    let ten_thousand = arr[12]\n    let hundred_thousand\
    \ = arr[13]\n    let thousand_thousand = arr[14]\n    let hundred_thousand_thousand\
    \ = arr[15]\n    let thousand_thousand_thousand = arr[16]\n    let hundred_thousand_thousand_thousand\
    \ = arr[17]\n    let thousand_thousand_thousand_thousand = arr[18]\n    let hundred_thousand_thousand_thousand_thousand\
    \ = arr[19]\n    let thousand_thousand_thousand_thousand_thousand = arr[20]\n\
    \    let hundred_thousand_thousand_thousand_thousand_thousand = arr[21]\n    let\
    \ thousand_thousand_thousand_thousand_thousand_thousand = arr[22]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[23]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[24]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[25]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[26]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[27]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[28]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[29]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[30]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[31]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[32]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8wjkuqtv.swift:46:9: error: type annotation missing in pattern\n\
    \    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    while i < arr.count {\n        if arr[i] >= 1 && arr[i] <=\
    \ 9 {\n            result.append(name[arr[i]-1])\n        } else {\n         \
    \   result.append(\"\")\n        }\n        i += 1\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqfg7w6xr.swift:13:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[arr[i]-1])\n                          ^~~~\n/tmp/tmpqfg7w6xr.swift:19:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n > 0 && n < 10 {\n           \
    \ result.append(String(format: \"%@\", names[i]))\n        }\n        i += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2m3zp4i8.swift:13:48: error: cannot find 'names' in scope\n   \
    \         result.append(String(format: \"%@\", names[i]))\n                  \
    \                             ^~~~~\n/tmp/tmp2m3zp4i8.swift:13:33: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \          result.append(String(format: \"%@\", names[i]))\n                 \
    \               ^~~~~~~\n                                 repeating     count:\
    \ \n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(String(number))\n        }\n    }\n    if result.isEmpty {\n\
    \        return result\n    }\n    let reversed = result.reverse()\n    for number\
    \ in reversed {\n        if number == \"1\" {\n            result.removeFirst()\n\
    \        }\n        if number == \"2\" {\n            result.removeFirst()\n \
    \       }\n        if number == \"3\" {\n            result.removeFirst()\n  \
    \      }\n        if number == \"4\" {\n            result.removeFirst()\n   \
    \     }\n        if number == \"5\" {\n            result.removeFirst()\n    \
    \    }\n        if number == \"6\" {\n            result.removeFirst()\n     \
    \   }\n        if number == \"7\" {\n            result.removeFirst()\n      \
    \  }\n        if number == \"8\" {\n            result.removeFirst()\n       \
    \ }\n        if number == \"9\" {\n            result.removeFirst()\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpamguv1kp.swift:18:9: warning: constant 'reversed' inferred to have\
    \ type '()', which may be unexpected\n    let reversed = result.reverse()\n  \
    \      ^\n/tmp/tmpamguv1kp.swift:18:9: note: add an explicit type annotation to\
    \ silence this warning\n    let reversed = result.reverse()\n        ^\n     \
    \           : ()\n/tmp/tmpamguv1kp.swift:19:19: error: for-in loop requires '()'\
    \ to conform to 'Sequence'\n    for number in reversed {\n                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    for number\
    \ in arr {\n        if number < 1 || number > 9 {\n            continue\n    \
    \    }\n        i += 1\n        if i == 1 {\n            result.append(String(number))\n\
    \            continue\n        }\n        result.append(String(number))\n    \
    \    result.append(String(number - 1))\n    }\n    return result.reverse()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgejk_zdr.swift:26:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(String(number))\n        }\n    }\n    if result.isEmpty {\n\
    \        return result\n    }\n    var reversed = result.reverse()\n    var replaced\
    \ = [String]()\n    for number in reversed {\n        replaced.append(String(number))\n\
    \    }\n    for number in arr {\n        replaced[number-1] = \"\\(number)\"\n\
    \    }\n    return replaced\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpewy8etoi.swift:18:9: warning: variable 'reversed' inferred to have\
    \ type '()', which may be unexpected\n    var reversed = result.reverse()\n  \
    \      ^\n/tmp/tmpewy8etoi.swift:18:9: note: add an explicit type annotation to\
    \ silence this warning\n    var reversed = result.reverse()\n        ^\n     \
    \           : ()\n/tmp/tmpewy8etoi.swift:20:19: error: for-in loop requires '()'\
    \ to conform to 'Sequence'\n    for number in reversed {\n                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var reversed = [Int]()\n    var one = \"One\"\n    var two = \"Two\"\n  \
    \  var three = \"Three\"\n    var four = \"Four\"\n    var five = \"Five\"\n \
    \   var six = \"Six\"\n    var seven = \"Seven\"\n    var eight = \"Eight\"\n\
    \    var nine = \"Nine\"\n    var ten = \"Ten\"\n    var hundred = \"Hundred\"\
    \n    var thousand = \"Thousand\"\n    var million = \"Million\"\n    var billion\
    \ = \"Billion\"\n    var trillion = \"Trillion\"\n    var quadrillion = \"Quadrillion\"\
    \n    var quintillion = \"Quintillion\"\n    var sextillion = \"Sextillion\"\n\
    \    var septillion = \"Septillion\"\n    var octillion = \"Octillion\"\n    var\
    \ nonillion = \"Nonillion\"\n    var decillion = \"Decillion\"\n    var undecillion\
    \ = \"Undecillion\"\n    var duodecillion = \"Duodecillion\"\n    var tredecillion\
    \ = \"Tredecillion\"\n    var quattuordecillion = \"Quattuordecillion\"\n    var\
    \ sexdecillion = \"Sexdecillion\"\n    var septendecillion = \"Septendecillion\"\
    \n    var octodecillion = \"Octodecillion\"\n    var novemdecillion = \"Novemdecillion\"\
    \n    var vigintillion = \"Vigintillion\"\n    var unvigintillion = \"Unvigintillion\"\
    \n    var duovigintillion = \"Duovigintillion\"\n    var trevigintillion = \"\
    Trevigintillion\"\n    var quattuorvigintillion = \"Quattuorvigintillion\"\n \
    \   var sexvigintillion = \"Sexvigintillion\"\n    var septenvigintillion = \"\
    Septenvigintillion\"\n    var octovigintillion = \"Octovigintillion\"\n    var\
    \ novemvigintillion = \"Novemvigintillion\"\n    var vigintillion = \"Vigintillion\"\
    \n    var unvigintillion = \"Unvigintillion\"\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeq9jje3p.swift:52:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpeq9jje3p.swift:50:9: error: invalid redeclaration of 'vigintillion'\n\
    \    var vigintillion = \"Vigintillion\"\n        ^\n/tmp/tmpeq9jje3p.swift:41:9:\
    \ note: 'vigintillion' previously declared here\n    var vigintillion = \"Vigintillion\"\
    \n        ^\n/tmp/tmpeq9jje3p.swift:51:9: error: invalid redeclaration of 'unvigintillion'\n\
    \    var unvigintillion = \"Unvigintillion\"\n        ^\n/tmp/tmpeq9jje3p.swift:42:9:\
    \ note: 'unvigintillion' previously declared here\n    var unvigintillion = \"\
    Unvigintillion\"\n        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    var j\
    \ = 0\n    for element in arr {\n        if element < 1 || element > 9 {\n   \
    \         continue\n        }\n        i += 1\n        if i == 1 {\n         \
    \   result.append(One[element])\n            continue\n        }\n        if i\
    \ == 2 {\n            result.append(Two[element])\n            continue\n    \
    \    }\n        if i == 3 {\n            result.append(Three[element])\n     \
    \       continue\n        }\n        if i == 4 {\n            result.append(Four[element])\n\
    \            continue\n        }\n        if i == 5 {\n            result.append(Five[element])\n\
    \            continue\n        }\n        if i == 6 {\n            result.append(Six[element])\n\
    \            continue\n        }\n        if i == 7 {\n            result.append(Seven[element])\n\
    \            continue\n        }\n        if i == 8 {\n            result.append(Eight[element])\n\
    \            continue\n        }\n        if i == 9 {\n            result.append(Nine[element])\n\
    \            continue\n        }\n        j += 1\n        if j == 1 {\n      \
    \      result.append(One[element])\n            continue\n        }\n        if\
    \ j == 2 {\n            result.append(Two[element])\n            continue\n  \
    \      }\n        if j == 3 {\n            result.append(Three[element])\n   \
    \         continue\n        }\n        if j == 4 {\n            result.append(Four[element])\n\
    \            continue\n        }\n        if j == 5 {\n            result.append(Five[element])\n\
    \            continue\n        }\n        if j == 6 {\n            result.append(Six[element])\n\
    \            continue\n        }\n        if j == 7 {\n            result.append(Seven[element])\n\
    \            continue\n        }\n        if j == 8 {\n            result.append(Eight[element])\n\
    \            continue\n        }\n        if j == 9 {\n            result.append(Nine[element])\n\
    \            continue\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprhs_3vmp.swift:21:27: error: cannot find 'One' in scope\n     \
    \       result.append(One[element])\n                          ^~~\n/tmp/tmprhs_3vmp.swift:25:27:\
    \ error: cannot find 'Two' in scope\n            result.append(Two[element])\n\
    \                          ^~~\n/tmp/tmprhs_3vmp.swift:29:27: error: cannot find\
    \ 'Three' in scope\n            result.append(Three[element])\n              \
    \            ^~~~~\n/tmp/tmprhs_3vmp.swift:33:27: error: cannot find 'Four' in\
    \ scope\n            result.append(Four[element])\n                          ^~~~\n\
    /tmp/tmprhs_3vmp.swift:37:27: error: cannot find 'Five' in scope\n           \
    \ result.append(Five[element])\n                          ^~~~\n/tmp/tmprhs_3vmp.swift:41:27:\
    \ error: cannot find 'Six' in scope\n            result.append(Six[element])\n\
    \                          ^~~\n/tmp/tmprhs_3vmp.swift:45:27: error: cannot find\
    \ 'Seven' in scope\n            result.append(Seven[element])\n              \
    \            ^~~~~\n/tmp/tmprhs_3vmp.swift:49:27: error: cannot find 'Eight' in\
    \ scope\n            result.append(Eight[element])\n                         \
    \ ^~~~~\n/tmp/tmprhs_3vmp.swift:53:27: error: cannot find 'Nine' in scope\n  \
    \          result.append(Nine[element])\n                          ^~~~\n/tmp/tmprhs_3vmp.swift:58:27:\
    \ error: cannot find 'One' in scope\n            result.append(One[element])\n\
    \                          ^~~\n/tmp/tmprhs_3vmp.swift:62:27: error: cannot find\
    \ 'Two' in scope\n            result.append(Two[element])\n                  \
    \        ^~~\n/tmp/tmprhs_3vmp.swift:66:27: error: cannot find 'Three' in scope\n\
    \            result.append(Three[element])\n                          ^~~~~\n\
    /tmp/tmprhs_3vmp.swift:70:27: error: cannot find 'Four' in scope\n           \
    \ result.append(Four[element])\n                          ^~~~\n/tmp/tmprhs_3vmp.swift:74:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five[element])\n\
    \                          ^~~~\n/tmp/tmprhs_3vmp.swift:78:27: error: cannot find\
    \ 'Six' in scope\n            result.append(Six[element])\n                  \
    \        ^~~"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let eleven = arr[10]\n    let\
    \ twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen = arr[13]\n \
    \   let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen = arr[16]\n\
    \    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty = arr[19]\n\
    \    let thirty = arr[20]\n    let forty = arr[21]\n    let fifty = arr[22]\n\
    \    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty = arr[25]\n\
    \    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand = arr[28]\n\
    \    let million = arr[29]\n    let billion = arr[30]\n    let trillion = arr[31]\n\
    \    let quadrillion = arr[32]\n    let quintillion = arr[33]\n    let sextillion\
    \ = arr[34]\n    let septillion = arr[35]\n    let octillion = arr[36]\n    let\
    \ nonillion = arr[37]\n    let decillion = arr[38]\n    let undecillion = arr[39]\n\
    \    let duodecillion = arr[40]\n    let tredecillion = arr[41]\n    let quattuordecillion\
    \ = arr[42]\n    let quindecillion = arr[43]\n    let sexdecillion = arr[44]\n\
    \    let septendecillion = arr[45]\n    let octodecillion = arr[46]\n    let novemdecillion\
    \ = arr[47]\n    let vigintillion = arr[48]\n    let unvigintillion = arr[49]\n\
    \    let duovigintillion = arr[50]\n    let trevigintillion = arr[51]\n    let\
    \ quattuorvigintillion = arr[52]\n    let quinvigintillion = arr[53]\n    let\
    \ sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n    let octovigin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprzcl_i12.swift:69:9: error: type annotation missing in pattern\n\
    \    let octovigin\n        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxValue = max(arr)\n\
    \    let minValue = min(arr)\n    var reversedArray = [Int]()\n    for i in arr\
    \ {\n        reversedArray.append(maxValue - i)\n    }\n    for i in reversedArray\
    \ {\n        let index = reversedArray.index(of: i)\n        result.append(String(format:\
    \ \"%@\", names[index]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz70104tx.swift:13:27: error: missing argument for parameter #2\
    \ in call\n    let maxValue = max(arr)\n                          ^\n        \
    \                  , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable\
    \ public func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n             \
    \          ^\n/tmp/tmpz70104tx.swift:14:27: error: missing argument for parameter\
    \ #2 in call\n    let minValue = min(arr)\n                          ^\n     \
    \                     , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n\
    @inlinable public func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n    \
    \                   ^\n/tmp/tmpz70104tx.swift:20:35: warning: 'index(of:)' is\
    \ deprecated: renamed to 'firstIndex(of:)'\n        let index = reversedArray.index(of:\
    \ i)\n                                  ^\n/tmp/tmpz70104tx.swift:20:35: note:\
    \ use 'firstIndex(of:)' instead\n        let index = reversedArray.index(of: i)\n\
    \                                  ^~~~~\n                                  firstIndex\n\
    /tmp/tmpz70104tx.swift:21:44: error: cannot find 'names' in scope\n        result.append(String(format:\
    \ \"%@\", names[index]))\n                                           ^~~~~\n/tmp/tmpz70104tx.swift:21:29:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        result.append(String(format: \"%@\", names[index]))\n               \
    \             ^~~~~~~\n                             repeating     count: \n"
  stdout: ''
  timestamp: 1660014344
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    guard arr.count <= 9 else { return [] }\n    guard\
    \ arr.count >= 1 && arr.count <= 9 else { return [] }\n    \n    var result =\
    \ [String]()\n    \n    for number in arr {\n        switch number {\n       \
    \ case 1:\n            result.append(contentsOf: [\"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        case\
    \ 2:\n            result.append(contentsOf: [\"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\"])\n        case 3:\n\
    \            result.append(contentsOf: [\"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\"])\n        case 4:\n      \
    \      result.append(contentsOf: [\"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\", \"One\", \"Two\", \"Three\"])\n        case 5:\n            result.append(contentsOf:\
    \ [\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\"\
    , \"Four\"])\n        case 6:\n            result.append(contentsOf: [\"Six\"\
    , \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    ])\n        case 7:\n            result.append(contentsOf: [\"Seven\", \"Eight\"\
    , \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"])\n     \
    \   case 8:\n            result.append(contentsOf: [\"Eight\", \"Nine\", \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"])\n        case 9:\n\
    \            result.append(contentsOf: [\"Nine\", \"One\", \"Two\", \"Three\"\
    , \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"])\n        default:\n    \
    \        break\n        }\n    }\n    \n    return result.map { String($0) }.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpw7c2xf_h/tmpw7c2xf_h.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba62d080c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba62cd77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba62cd77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba62cd767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw7c2xf_h                        0x000055d44f1a4a91 <unavailable> + 6801

    5    libc.so.6                          0x00002ba62d26c460 __libc_start_main +
    245

    6    tmpw7c2xf_h                        0x000055d44f1a4539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        let digit = number % 10\n        let name =\
    \ digitToName(digit)\n        result.append(name)\n        number /= 10\n    }\n\
    \    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6_d8sroa.swift:12:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmp6_d8sroa.swift:14:16:\
    \ error: left side of mutating operator isn't mutable: 'number' is a 'let' constant\n\
    \        number /= 10\n        ~~~~~~ ^\n/tmp/tmp6_d8sroa.swift:16:19: error:\
    \ cannot convert return expression of type '()' to return type '[String]'\n  \
    \  return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var digits = \"\"\n    for digit in arr {\n        digits += String(digit)\n\
    \    }\n    digits = digits.reverse()\n    for digit in digits {\n        let\
    \ index = Int(digit)\n        if index >= 1 && index <= 9 {\n            let name\
    \ = String(index)\n            result.append(name)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp25p5a41d.swift:14:21: error: value of type 'String' has no member\
    \ 'reverse'\n    digits = digits.reverse()\n             ~~~~~~ ^~~~~~~\n/tmp/tmp25p5a41d.swift:16:21:\
    \ error: no exact matches in call to initializer \n        let index = Int(digit)\n\
    \                    ^\nSwift.Int:7:12: note: candidate expects value of type\
    \ 'Float16' for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n\
    \           ^\nSwift.Int:10:12: note: candidate expects value of type 'Float'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float)\n     \
    \      ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Double)\n        \
    \   ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Float80)\n           ^\nSwift.Int:28:12:\
    \ note: candidate expects value of type 'Builtin.Int64' for parameter #1 (got\
    \ 'Character')\n    public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12:\
    \ note: candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\nSwift.FixedWidthInteger:3:23:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'Character')\n\
    \    @inlinable public init?(_ description: String)\n                      ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let hundred = arr[10]\n    let\
    \ thousand = arr[11]\n    let tenthousand = arr[12]\n    let hundredthousand =\
    \ arr[13]\n    let onehundred = arr[14]\n    let onethousand = arr[15]\n    let\
    \ onehundredthousand = arr[16]\n    let onemillion = arr[17]\n    let onebillion\
    \ = arr[18]\n    let onetrillion = arr[19]\n    let onequadrillion = arr[20]\n\
    \    let onequintillion = arr[21]\n    let onesextillion = arr[22]\n    let oneseptillion\
    \ = arr[23]\n    let oneoctillion = arr[24]\n    let onenonillion = arr[25]\n\
    \    let onedecillion = arr[26]\n    let oneundecillion = arr[27]\n    let oneduodecillion\
    \ = arr[28]\n    let onetredecillion = arr[29]\n    let onequattuordecillion =\
    \ arr[30]\n    let onequindecillion = arr[31]\n    let onesexdecillion = arr[32]\n\
    \    let oneseptendecillion = arr[33]\n    let oneoctodecillion = arr[34]\n  \
    \  let onenovemdecillion = arr[35]\n    let onevigintillion = arr[36]\n    let\
    \ oneunvigintillion = arr[37]\n    let oneduovigintillion = arr[38]\n    let onetrevigintillion\
    \ = arr[39]\n    let onequattuorvigintillion = arr[40]\n    let onequinvigintillion\
    \ = arr[41]\n    let onesexvigintillion = arr[42]\n    let oneseptemvigintillion\
    \ = arr[43]\n    let oneoctovigintillion = arr[44]\n    let onenovemvigintillion\
    \ = arr[45]\n    let onetrigintillion = arr[46]\n    let oneuntrigintillion =\
    \ arr[47]\n    let oneduotrigintillion = arr[48]\n    let onetretrigintillion\
    \ = arr[\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzgm8bhab.swift:63:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpzgm8bhab.swift:62:34: error: missing argument for parameter #1 in\
    \ call\n    let onetretrigintillion = arr[\n                                 ^\n\
    \                                 <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)'\
    \ declared here\n    @inlinable public subscript(index: Int) -> Element { get\
    \ set }\n                      ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    var reversed = reverseArray(arr)\n    for number\
    \ in reversed {\n        let name = getName(number)\n        if number >= min\
    \ && number <= max {\n            result.append(name)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfv68yf_2.swift:13:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpfv68yf_2.swift:14:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmpfv68yf_2.swift:15:20: error: cannot find 'reverseArray' in scope\n\
    \    var reversed = reverseArray(arr)\n                   ^~~~~~~~~~~~\n/tmp/tmpfv68yf_2.swift:17:20:\
    \ error: cannot find 'getName' in scope\n        let name = getName(number)\n\
    \                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var numbers = [String]()\n    var index = 0\n    for number in arr {\n  \
    \      numbers.append(String(number))\n    }\n    numbers.sort(by: {\n       \
    \ guard let number = Int($0) else {\n            return false\n        }\n   \
    \     return number < 10\n    })\n    for number in numbers {\n        guard let\
    \ index = numbers.index(of: number) else {\n            return result\n      \
    \  }\n        result[index] = numbers[index].capitalized\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0xw3h28o.swift:15:22: error: contextual closure type '(String,\
    \ String) throws -> Bool' expects 2 arguments, but 1 was used in closure body\n\
    \    numbers.sort(by: {\n                     ^\n/tmp/tmp0xw3h28o.swift:22:35:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        guard\
    \ let index = numbers.index(of: number) else {\n                             \
    \     ^\n/tmp/tmp0xw3h28o.swift:22:35: note: use 'firstIndex(of:)' instead\n \
    \       guard let index = numbers.index(of: number) else {\n                 \
    \                 ^~~~~\n                                  firstIndex\n/tmp/tmp0xw3h28o.swift:25:40:\
    \ error: value of type 'String' has no member 'capitalized'\n        result[index]\
    \ = numbers[index].capitalized\n                        ~~~~~~~~~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let hundred = arr[10]\n    let\
    \ thousand = arr[11]\n    let ten_thousand = arr[12]\n    let hundred_thousand\
    \ = arr[13]\n    let thousand_thousand = arr[14]\n    let million = arr[15]\n\
    \    let billion = arr[16]\n    let trillion = arr[17]\n    let quadrillion =\
    \ arr[18]\n    let quintillion = arr[19]\n    let sextillion = arr[20]\n    let\
    \ septillion = arr[21]\n    let octillion = arr[22]\n    let nonillion = arr[23]\n\
    \    let decillion = arr[24]\n    let undecillion = arr[25]\n    let duodecillion\
    \ = arr[26]\n    let tredecillion = arr[27]\n    let quattuordecillion = arr[28]\n\
    \    let quindecillion = arr[29]\n    let sexdecillion = arr[30]\n    let septendecillion\
    \ = arr[31]\n    let octodecillion = arr[32]\n    let novemdecillion = arr[33]\n\
    \    let vigintillion = arr[34]\n    let unvigintillion = arr[35]\n    let duovigintillion\
    \ = arr[36]\n    let trevigintillion = arr[37]\n    let quattuorvigintillion =\
    \ arr[38]\n    let quinvigintillion = arr[39]\n    let sexvigintillion = arr[40]\n\
    \    let septenvigintillion = arr[41]\n    let octovigintillion = arr[42]\n  \
    \  let novemvigintillion = arr[43]\n    let vigintillions = arr[44]\n    let unvigintillions\
    \ = arr[45]\n    let duovigintillions = arr[46]\n    let trevigintillions = arr[47]\n\
    \    let quattuorvigintillions = arr[48]\n    let quinvigintillions = arr[49]\n\
    \    let sexvigintillions = arr[50]\n    let septenvigin\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptcfu1096.swift:64:9: error: type annotation missing in pattern\n\
    \    let septenvigin\n        ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number <= 9 {\n            result.append(String(number))\n\
    \        } else {\n            let index = number - 10\n            result.append(String(index))\n\
    \        }\n    }\n    return result.reverse().map {\n        switch $0 {\n  \
    \      case \"0\":\n            return \"Zero\"\n        case \"1\":\n       \
    \     return \"One\"\n        case \"2\":\n            return \"Two\"\n      \
    \  case \"3\":\n            return \"Three\"\n        case \"4\":\n          \
    \  return \"Four\"\n        case \"5\":\n            return \"Five\"\n       \
    \ case \"6\":\n            return \"Six\"\n        case \"7\":\n            return\
    \ \"Seven\"\n        case \"8\":\n            return \"Eight\"\n        case \"\
    9\":\n            return \"Nine\"\n        default:\n            return String($0)\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmph_7fyeh0.swift:18:29: error: value of tuple type '()' has no member\
    \ 'map'\n    return result.reverse().map {\n           ~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n\
    \    let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let\
    \ five = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight =\
    \ arr[7]\n    let nine = arr[8]\n    let ten = arr[9]\n    let eleven = arr[10]\n\
    \    let twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen = arr[13]\n\
    \    let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen = arr[16]\n\
    \    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty = arr[19]\n\
    \    let thirty = arr[20]\n    let forty = arr[21]\n    let fifty = arr[22]\n\
    \    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty = arr[25]\n\
    \    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand = arr[28]\n\
    \    let million = arr[29]\n    let billion = arr[30]\n    let trillion = arr[31]\n\
    \    let quadrillion = arr[32]\n    let quintillion = arr[33]\n    let sextillion\
    \ = arr[34]\n    let septillion = arr[35]\n    let octillion = arr[36]\n    let\
    \ nonillion = arr[37]\n    let decillion = arr[38]\n    let undecillion = arr[39]\n\
    \    let duodecillion = arr[40]\n    let tredecillion = arr[41]\n    let quattuordecillion\
    \ = arr[42]\n    let quindecillion = arr[43]\n    let sexdecillion = arr[44]\n\
    \    let septendecillion = arr[45]\n    let octodecillion = arr[46]\n    let novemdecillion\
    \ = arr[47]\n    let vigintillion = arr[48]\n    let unvigintillion = arr[49]\n\
    \    let duovigintillion = arr[50]\n    let trevigintillion = arr[51]\n    let\
    \ quattuorvigintillion = arr[52]\n    let quinvigintillion = arr[53]\n    let\
    \ sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n    let octovigintil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpinz3sdy9.swift:69:9: error: type annotation missing in pattern\n\
    \    let octovigintil\n        ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    \n    if arr.isEmpty {\n        return result\n    }\n    \n    let min =\
    \ 1\n    let max = 9\n    \n    for i in arr {\n        if min > i {\n       \
    \     min = i\n        }\n        if max < i {\n            max = i\n        }\n\
    \    }\n    \n    var reversed: [Int] = []\n    \n    for i in min..<max {\n \
    \       reversed.append(i)\n    }\n    \n    for i in reversed {\n        let\
    \ index = min..<max\n        let name = index.firstIndex(of: i)\n        \n  \
    \      if name != nil {\n            result.append(name!)\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwj9ft7ph.swift:20:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmpwj9ft7ph.swift:15:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = 1\n    ^~~\n \
    \   var\n/tmp/tmpwj9ft7ph.swift:23:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmpwj9ft7ph.swift:16:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = 9\n    ^~~\n \
    \   var\n/tmp/tmpwj9ft7ph.swift:38:31: error: cannot convert value of type 'Range<Int>.Index'\
    \ (aka 'Int') to expected argument type 'String'\n            result.append(name!)\n\
    \                              ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let hundred = arr[10]\n    let\
    \ thousand = arr[11]\n    let ten_thousand = arr[12]\n    let hundred_thousand\
    \ = arr[13]\n    let thousand_thousand = arr[14]\n    let hundred_thousand_thousand\
    \ = arr[15]\n    let thousand_thousand_thousand = arr[16]\n    let hundred_thousand_thousand_thousand\
    \ = arr[17]\n    let thousand_thousand_thousand_thousand = arr[18]\n    let hundred_thousand_thousand_thousand_thousand\
    \ = arr[19]\n    let thousand_thousand_thousand_thousand_thousand = arr[20]\n\
    \    let hundred_thousand_thousand_thousand_thousand_thousand = arr[21]\n    let\
    \ thousand_thousand_thousand_thousand_thousand_thousand = arr[22]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[23]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[24]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[25]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[26]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[27]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[28]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[29]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[30]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[31]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[32]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thous\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmporvio7ww.swift:46:9: error: type annotation missing in pattern\n\
    \    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thous\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for number in arr {\n        if number > 9 || number < 1 {\n     \
    \       continue\n        }\n        let digit = String(number)\n        let name\
    \ = digit.substringFromIndex(digit.startIndex.advancedBy(1))\n        result.append(name)\n\
    \    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0umu3n1i.swift:15:26: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        let name = digit.substringFromIndex(digit.startIndex.advancedBy(1))\n\
    \                   ~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp0umu3n1i.swift:15:62: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        let name =\
    \ digit.substringFromIndex(digit.startIndex.advancedBy(1))\n                 \
    \                           ~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp0umu3n1i.swift:18:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for number in arr {\n        if number > max {\n    \
    \        max = number\n        }\n        if number < min {\n            min =\
    \ number\n        }\n    }\n    let minDigit = String(min).characters.first!\n\
    \    let maxDigit = String(max).characters.first!\n    let minDigitName = ones[minDigit]\n\
    \    let maxDigitName = ones[maxDigit]\n    for number in arr {\n        let digit\
    \ = String(number).characters.first!\n        let digitName = ones[digit]\n  \
    \      if digit == minDigit {\n            result.append(minDigitName)\n     \
    \   } else if digit == maxDigit {\n            result.append(maxDigitName)\n \
    \       } else {\n            result.append(digitName)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf2meke1s.swift:17:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = number\n            ^~~\n/tmp/tmpf2meke1s.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpf2meke1s.swift:20:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = number\n            ^~~\n/tmp/tmpf2meke1s.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpf2meke1s.swift:23:32: error: 'characters' is unavailable: Please\
    \ use String directly\n    let minDigit = String(min).characters.first!\n    \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2meke1s.swift:24:32: error: 'characters' is unavailable:\
    \ Please use String directly\n    let maxDigit = String(max).characters.first!\n\
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2meke1s.swift:25:24: error: cannot find 'ones' in\
    \ scope\n    let minDigitName = ones[minDigit]\n                       ^~~~\n\
    /tmp/tmpf2meke1s.swift:26:24: error: cannot find 'ones' in scope\n    let maxDigitName\
    \ = ones[maxDigit]\n                       ^~~~\n/tmp/tmpf2meke1s.swift:28:36:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ digit = String(number).characters.first!\n                                 \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpf2meke1s.swift:29:25:\
    \ error: cannot find 'ones' in scope\n        let digitName = ones[digit]\n  \
    \                      ^~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for i in arr {\n        if i < min {\n            min\
    \ = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n\
    \    let reversedArray = Array(arr[min..<max])\n    for i in reversedArray {\n\
    \        let index = reversedArray.index(i)\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmsfxsdme.swift:17:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmpmsfxsdme.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpmsfxsdme.swift:20:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmpmsfxsdme.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpmsfxsdme.swift:25:35: error: no exact matches in call to instance\
    \ method 'index'\n        let index = reversedArray.index(i)\n               \
    \                   ^\nSwift.Array:7:28: note: incorrect labels for candidate\
    \ (have: '(_:)', expected: '(after:)')\n    @inlinable public func index(after\
    \ i: Int) -> Int\n                           ^\nSwift.Array:9:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(before:)')\n    @inlinable public\
    \ func index(before i: Int) -> Int\n                           ^\nSwift.Collection:3:28:\
    \ note: incorrect labels for candidate (have: '(_:)', expected: '(of:)')\n   \
    \ @inlinable public func index(of element: Self.Element) -> Self.Index?\n    \
    \                       ^\nSwift.RandomAccessCollection:3:28: note: incorrect\
    \ labels for candidate (have: '(_:)', expected: '(after:)')\n    @inlinable public\
    \ func index(after i: Self.Index) -> Self.Index\n                           ^\n\
    Swift.RandomAccessCollection:4:28: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(before:)')\n    @inlinable public func index(before i: Self.Index)\
    \ -> Self.Index\n                           ^\n/tmp/tmpmsfxsdme.swift:26:23: error:\
    \ cannot find 'names' in scope\n        result.append(names[index])\n        \
    \              ^~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    \n    if arr.isEmpty {\n        return result\n    }\n    \n    let one =\
    \ Int(One)\n    let two = Int(Two)\n    let three = Int(Three)\n    let four =\
    \ Int(Four)\n    let five = Int(Five)\n    let six = Int(Six)\n    let seven =\
    \ Int(Seven)\n    let eight = Int(Eight)\n    let nine = Int(Nine)\n    \n   \
    \ let minLength = min(arr.count, 9)\n    \n    for i in minLength..<arr.count\
    \ {\n        let digit = arr[i]\n        \n        if digit < one {\n        \
    \    result.append(String(digit))\n        } else if digit < two {\n         \
    \   result.append(String(digit))\n        } else if digit < three {\n        \
    \    result.append(String(digit))\n        } else if digit < four {\n        \
    \    result.append(String(digit))\n        } else if digit < five {\n        \
    \    result.append(String(digit))\n        } else if digit < six {\n         \
    \   result.append(String(digit))\n        } else if digit < seven {\n        \
    \    result.append(String(digit))\n        } else if digit < eight {\n       \
    \     result.append(String(digit))\n        } else if digit < nine {\n       \
    \     result.append(String(digit))\n        }\n    }\n    \n    for i in minLength..<arr.count\
    \ {\n        let digit = arr[i]\n        \n        if digit > one {\n        \
    \    result.append(String(digit))\n        } else if digit > two {\n         \
    \   result.append(String(digit))\n        } else if digit > three {\n        \
    \    result.append(String(digit))\n        } else if digit > four {\n        \
    \    result.append(String(digit))\n        } else if digit > five {\n        \
    \    result.append(String(digit))\n        } else if digit > six {\n         \
    \   result.append(String(digit))\n        } else if digit > seven {\n        \
    \    result.append(String(digit))\n        } else if digit > eight {\n       \
    \     result.append(String(digit))\n        } else if digit > nine {\n       \
    \     result.append(String(digit))\n        }\n    }\n    \n    for i in minLength..<arr.count\
    \ {\n        let digit = arr[i]\n        \n        if digit == one {\n       \
    \     result.append(String(one))\n        } else if digit == two {\n         \
    \   result.append(String(two))\n        } else if digit == three {\n         \
    \   result.append(String(three))\n        } else if digit == four {\n        \
    \    result.append(String(four))\n        } else if digit == five {\n        \
    \    result.append(String(five))\n        } else if digit == six {\n         \
    \   result.append(String(six))\n        \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaklxph1u.swift:110:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpaklxph1u.swift:75:36:\
    \ note: to match this opening '{'\n    for i in minLength..<arr.count {\n    \
    \                               ^\n/tmp/tmpaklxph1u.swift:110:63: error: expected\
    \ '}' at end of brace statement\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\n                                                    \
    \          ^\n/tmp/tmpaklxph1u.swift:8:40: note: to match this opening '{'\nfunc\
    \ by_length(arr: [Int]) -> [String] {\n                                      \
    \ ^\n/tmp/tmpaklxph1u.swift:15:19: error: cannot find 'One' in scope\n    let\
    \ one = Int(One)\n                  ^~~\n/tmp/tmpaklxph1u.swift:16:19: error:\
    \ cannot find 'Two' in scope\n    let two = Int(Two)\n                  ^~~\n\
    /tmp/tmpaklxph1u.swift:17:21: error: cannot find 'Three' in scope\n    let three\
    \ = Int(Three)\n                    ^~~~~\n/tmp/tmpaklxph1u.swift:18:20: error:\
    \ cannot find 'Four' in scope\n    let four = Int(Four)\n                   ^~~~\n\
    /tmp/tmpaklxph1u.swift:19:20: error: cannot find 'Five' in scope\n    let five\
    \ = Int(Five)\n                   ^~~~\n/tmp/tmpaklxph1u.swift:20:19: error: cannot\
    \ find 'Six' in scope\n    let six = Int(Six)\n                  ^~~\n/tmp/tmpaklxph1u.swift:21:21:\
    \ error: cannot find 'Seven' in scope\n    let seven = Int(Seven)\n          \
    \          ^~~~~\n/tmp/tmpaklxph1u.swift:22:21: error: cannot find 'Eight' in\
    \ scope\n    let eight = Int(Eight)\n                    ^~~~~\n/tmp/tmpaklxph1u.swift:23:20:\
    \ error: cannot find 'Nine' in scope\n    let nine = Int(Nine)\n             \
    \      ^~~~\n/tmp/tmpaklxph1u.swift:94:6: error: operator functions can only be\
    \ declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    \n    var result: [String] = []\n    \n    for i in\
    \ 0..<arr.count {\n        let num = arr[i]\n        \n        if num < 1 || num\
    \ > 9 {\n            continue\n        }\n        \n        let digit = num -\
    \ 10\n        \n        if digit < 0 {\n            digit = digit + 10\n     \
    \   }\n        \n        let name = digitToName(digit)\n        \n        result.append(name)\n\
    \    }\n    \n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyo86iaz1.swift:23:13: error: cannot assign to value: 'digit' is\
    \ a 'let' constant\n            digit = digit + 10\n            ^~~~~\n/tmp/tmpyo86iaz1.swift:20:9:\
    \ note: change 'let' to 'var' to make it mutable\n        let digit = num - 10\n\
    \        ^~~\n        var\n/tmp/tmpyo86iaz1.swift:26:20: error: cannot find 'digitToName'\
    \ in scope\n        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n\
    /tmp/tmpyo86iaz1.swift:31:19: error: cannot convert return expression of type\
    \ '()' to return type '[String]'\n    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for number in arr {\n        if number < min {\n    \
    \        min = number\n        } else if number > max {\n            max = number\n\
    \        }\n    }\n    let length = max - min + 1\n    for number in arr {\n \
    \       if number < min {\n            number = 9\n        } else if number >\
    \ max {\n            number = 1\n        }\n        let index = number - min\n\
    \        result.append(String(format: \"%0\\(length)d\", index))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmposifsb_u.swift:17:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = number\n            ^~~\n/tmp/tmposifsb_u.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmposifsb_u.swift:19:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = number\n            ^~~\n/tmp/tmposifsb_u.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmposifsb_u.swift:25:13: error: cannot assign to value: 'number'\
    \ is a 'let' constant\n            number = 9\n            ^~~~~~\n/tmp/tmposifsb_u.swift:27:13:\
    \ error: cannot assign to value: 'number' is a 'let' constant\n            number\
    \ = 1\n            ^~~~~~\n/tmp/tmposifsb_u.swift:30:29: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n        result.append(String(format:\
    \ \"%0\\(length)d\", index))\n                            ^~~~~~~\n          \
    \                   repeating               count: \n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for n in arr {\n        switch n {\n        case 1, 10, 11:\n           \
    \ result.append(String(format: \"%@\", One))\n        case 2, 20, 21:\n      \
    \      result.append(String(format: \"%@\", Two))\n        case 3, 30, 31:\n \
    \           result.append(String(format: \"%@\", Three))\n        case 4, 40,\
    \ 41:\n            result.append(String(format: \"%@\", Four))\n        case 5,\
    \ 50, 51:\n            result.append(String(format: \"%@\", Five))\n        case\
    \ 6, 60, 61:\n            result.append(String(format: \"%@\", Six))\n       \
    \ case 7, 70, 71:\n            result.append(String(format: \"%@\", Seven))\n\
    \        case 8, 80, 81:\n            result.append(String(format: \"%@\", Eight))\n\
    \        case 9, 90, 91:\n            result.append(String(format: \"%@\", Nine))\n\
    \        default:\n            continue\n        }\n    }\n    return result.reverse().map\
    \ { String(format: \"%@\", $0) }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4jyrerm3.swift:13:48: error: cannot find 'One' in scope\n     \
    \       result.append(String(format: \"%@\", One))\n                         \
    \                      ^~~\n/tmp/tmp4jyrerm3.swift:13:33: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n           \
    \ result.append(String(format: \"%@\", One))\n                               \
    \ ^~~~~~~\n                                 repeating     count: \n/tmp/tmp4jyrerm3.swift:15:48:\
    \ error: cannot find 'Two' in scope\n            result.append(String(format:\
    \ \"%@\", Two))\n                                               ^~~\n/tmp/tmp4jyrerm3.swift:15:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%@\", Two))\n                    \
    \            ^~~~~~~\n                                 repeating     count: \n\
    /tmp/tmp4jyrerm3.swift:17:48: error: cannot find 'Three' in scope\n          \
    \  result.append(String(format: \"%@\", Three))\n                            \
    \                   ^~~~~\n/tmp/tmp4jyrerm3.swift:17:33: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n           \
    \ result.append(String(format: \"%@\", Three))\n                             \
    \   ^~~~~~~\n                                 repeating     count: \n/tmp/tmp4jyrerm3.swift:19:48:\
    \ error: cannot find 'Four' in scope\n            result.append(String(format:\
    \ \"%@\", Four))\n                                               ^~~~\n/tmp/tmp4jyrerm3.swift:19:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%@\", Four))\n                   \
    \             ^~~~~~~\n                                 repeating     count: \n\
    /tmp/tmp4jyrerm3.swift:21:48: error: cannot find 'Five' in scope\n           \
    \ result.append(String(format: \"%@\", Five))\n                              \
    \                 ^~~~\n/tmp/tmp4jyrerm3.swift:21:33: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n      "
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(name[number])\n        } else {\n            result.append(String(number))\n\
    \        }\n    }\n    return result.reverse().map { $0.replaceFirst(\"^[0-9]\"\
    , \"\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphf3xh_90.swift:12:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[number])\n                          ^~~~\n/tmp/tmphf3xh_90.swift:17:29:\
    \ error: value of tuple type '()' has no member 'map'\n    return result.reverse().map\
    \ { $0.replaceFirst(\"^[0-9]\", \"\") }\n           ~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    \n    let one = \"One\"\n    let two = \"Two\"\n \
    \   let three = \"Three\"\n    let four = \"Four\"\n    let five = \"Five\"\n\
    \    let six = \"Six\"\n    let seven = \"Seven\"\n    let eight = \"Eight\"\n\
    \    let nine = \"Nine\"\n    \n    var result = [String]()\n    \n    for n in\
    \ arr {\n        switch n {\n        case 1:\n            result.append(one)\n\
    \        case 2:\n            result.append(two)\n        case 3:\n          \
    \  result.append(three)\n        case 4:\n            result.append(four)\n  \
    \      case 5:\n            result.append(five)\n        case 6:\n           \
    \ result.append(six)\n        case 7:\n            result.append(seven)\n    \
    \    case 8:\n            result.append(eight)\n        case 9:\n            result.append(nine)\n\
    \        default:\n            break\n        }\n    }\n    \n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: Exception
  stderr: 'tmpiympcbnh/tmpiympcbnh.swift:64: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2d3444cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2d34143b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2d34143988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2d341427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiympcbnh                        0x000055e3e1f2f8f1 <unavailable> + 6385

    5    libc.so.6                          0x00002b2d34638460 __libc_start_main +
    245

    6    tmpiympcbnh                        0x000055e3e1f2f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var index = 0\n    for number in arr {\n        if number > 9 {\n\
    \            number = number - 10\n        }\n        if number < 1 {\n      \
    \      number = 10 + number\n        }\n        result[index] = String(number)\n\
    \        index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq46e4ll8.swift:13:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmpq46e4ll8.swift:16:13:\
    \ error: cannot assign to value: 'number' is a 'let' constant\n            number\
    \ = 10 + number\n            ^~~~~~\n/tmp/tmpq46e4ll8.swift:19:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        index++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var numbers = arr.sorted()\n\
    \    var reversed = numbers.reversed()\n    var one = reversed.first(where: {\
    \ $0 == 1 })\n    var two = reversed.first(where: { $0 == 2 })\n    var three\
    \ = reversed.first(where: { $0 == 3 })\n    var four = reversed.first(where: {\
    \ $0 == 4 })\n    var five = reversed.first(where: { $0 == 5 })\n    var six =\
    \ reversed.first(where: { $0 == 6 })\n    var seven = reversed.first(where: {\
    \ $0 == 7 })\n    var eight = reversed.first(where: { $0 == 8 })\n    var nine\
    \ = reversed.first(where: { $0 == 9 })\n    \n    switch one! {\n    case 1:\n\
    \        result.append(contentsOf: [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n    case 2:\n        result.append(contentsOf:\
    \ [\"Two\", \"One\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n    case 3:\n        result.append(contentsOf: [\"Three\", \"Two\"\
    , \"One\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n   \
    \ case 4:\n        result.append(contentsOf: [\"Four\", \"Three\", \"Two\", \"\
    One\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n    case 5:\n    \
    \    result.append(contentsOf: [\"Five\", \"Four\", \"Three\", \"Two\", \"One\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n    case 6:\n        result.append(contentsOf:\
    \ [\"Six\", \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Seven\", \"Eight\"\
    , \"Nine\"])\n    case 7:\n        result.append(contentsOf: [\"Seven\", \"Six\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Eight\", \"Nine\"])\n   \
    \ case 8:\n        result.append(contentsOf: [\"Eight\", \"Seven\", \"Six\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"One\", \"Nine\"])\n    case 9:\n     \
    \   result.append(contentsOf: [\"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"One\"])\n    default:\n        break\n    }\n\
    \    switch two! {\n    case 1:\n        result.append(contentsOf: [\"One\", \"\
    Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    ])\n    case 2:\n        result.append(contentsOf: [\"Two\", \"One\", \"Three\"\
    , \"Four\", \"Five\", \"S\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmppu8cntu8.swift:51:75: error: unterminated string literal\n    \
    \    result.append(contentsOf: [\"Two\", \"One\", \"Three\", \"Four\", \"Five\"\
    , \"S\n                                                                      \
    \    ^\n/tmp/tmppu8cntu8.swift:71:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmppu8cntu8.swift:8:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmppu8cntu8.swift:47:5: error:\
    \ switch must be exhaustive\n    switch two! {\n    ^\n/tmp/tmppu8cntu8.swift:47:5:\
    \ note: do you want to add a default clause?\n    switch two! {\n    ^\n/tmp/tmppu8cntu8.swift:55:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmppu8cntu8.swift:13:9:\
    \ warning: variable 'numbers' was never mutated; consider changing to 'let' constant\n\
    \    var numbers = arr.sorted()\n    ~~~ ^\n    let\n/tmp/tmppu8cntu8.swift:14:9:\
    \ warning: variable 'reversed' was never mutated; consider changing to 'let' constant\n\
    \    var reversed = numbers.reversed()\n    ~~~ ^\n    let\n/tmp/tmppu8cntu8.swift:15:9:\
    \ warning: variable 'one' was never mutated; consider changing to 'let' constant\n\
    \    var one = reversed.first(where: { $0 == 1 })\n    ~~~ ^\n    let\n/tmp/tmppu8cntu8.swift:16:9:\
    \ warning: variable 'two' was never mutated; consider changing to 'let' constant\n\
    \    var two = reversed.first(where: { $0 == 2 })\n    ~~~ ^\n    let\n/tmp/tmppu8cntu8.swift:17:9:\
    \ warning: initialization of variable 'three' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var three = reversed.first(where:\
    \ { $0 == 3 })\n    ~~~~^~~~~\n    _\n/tmp/tmppu8cntu8.swift:18:9: warning: initialization\
    \ of variable 'four' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var four = reversed.first(where: { $0 == 4 })\n    ~~~~^~~~\n\
    \    _\n/tmp/tmppu8cntu8.swift"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = Int(One)\n\
    \    let two = Int(Two)\n    let three = Int(Three)\n    let four = Int(Four)\n\
    \    let five = Int(Five)\n    let six = Int(Six)\n    let seven = Int(Seven)\n\
    \    let eight = Int(Eight)\n    let nine = Int(Nine)\n    let ten = Int(Ten)\n\
    \    let hundred = Int(Hundred)\n    let thousand = Int(Thousand)\n    let million\
    \ = Int(Million)\n    let billion = Int(Billion)\n    let trillion = Int(Trillion)\n\
    \    let quadrillion = Int(Quadrillion)\n    let quintillion = Int(Quintillion)\n\
    \    let sextillion = Int(Sextillion)\n    let septillion = Int(Septillion)\n\
    \    let octillion = Int(Octillion)\n    let nonillion = Int(Nonillion)\n    let\
    \ decillion = Int(Decillion)\n    let undecillion = Int(Undecillion)\n    let\
    \ duodecillion = Int(Duodecillion)\n    let tredecillion = Int(Tredecillion)\n\
    \    let quattuordecillion = Int(Quattuordecillion)\n    let quindecillion = Int(Quindecillion)\n\
    \    let sexdecillion = Int(Sexdecillion)\n    let septendecillion = Int(Septendecillion)\n\
    \    let octodecillion = Int(Octodecillion)\n    let novemdecillion = Int(Novemdecillion)\n\
    \    let vigintillion = Int(Vigintillion)\n    let thousand = Int(Thousand)\n\
    \    let million = Int(Million)\n    let billion = Int(Billion)\n    let trillion\
    \ = Int(Trillion)\n    let quadrillion = Int(Quadrillion)\n    let quintillion\
    \ = Int(Quintillion)\n    let sextillion = Int(Sextillion)\n    let septillion\
    \ = Int(Septillion)\n    let octillion = Int(Octillion)\n    let nonillion = Int(Nonillion)\n\
    \    let decillion = Int(Decillion)\n    let undecillion = Int(Undecillion)\n\
    \    let duodecillion = Int(Duodecillion)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq40v85xr.swift:13:19: error: cannot find 'One' in scope\n    let\
    \ one = Int(One)\n                  ^~~\n/tmp/tmpq40v85xr.swift:14:19: error:\
    \ cannot find 'Two' in scope\n    let two = Int(Two)\n                  ^~~\n\
    /tmp/tmpq40v85xr.swift:15:21: error: cannot find 'Three' in scope\n    let three\
    \ = Int(Three)\n                    ^~~~~\n/tmp/tmpq40v85xr.swift:16:20: error:\
    \ cannot find 'Four' in scope\n    let four = Int(Four)\n                   ^~~~\n\
    /tmp/tmpq40v85xr.swift:17:20: error: cannot find 'Five' in scope\n    let five\
    \ = Int(Five)\n                   ^~~~\n/tmp/tmpq40v85xr.swift:18:19: error: cannot\
    \ find 'Six' in scope\n    let six = Int(Six)\n                  ^~~\n/tmp/tmpq40v85xr.swift:19:21:\
    \ error: cannot find 'Seven' in scope\n    let seven = Int(Seven)\n          \
    \          ^~~~~\n/tmp/tmpq40v85xr.swift:20:21: error: cannot find 'Eight' in\
    \ scope\n    let eight = Int(Eight)\n                    ^~~~~\n/tmp/tmpq40v85xr.swift:21:20:\
    \ error: cannot find 'Nine' in scope\n    let nine = Int(Nine)\n             \
    \      ^~~~\n/tmp/tmpq40v85xr.swift:22:19: error: cannot find 'Ten' in scope\n\
    \    let ten = Int(Ten)\n                  ^~~\n/tmp/tmpq40v85xr.swift:23:23:\
    \ error: cannot find 'Hundred' in scope\n    let hundred = Int(Hundred)\n    \
    \                  ^~~~~~~\n/tmp/tmpq40v85xr.swift:24:24: error: cannot find 'Thousand'\
    \ in scope\n    let thousand = Int(Thousand)\n                       ^~~~~~~~\n\
    /tmp/tmpq40v85xr.swift:25:23: error: cannot find 'Million' in scope\n    let million\
    \ = Int(Million)\n                      ^~~~~~~\n/tmp/tmpq40v85xr.swift:26:23:\
    \ error: cannot find 'Billion' in scope\n    let billion = Int(Billion)\n    \
    \                  ^~~~~~~\n/tmp/tmpq40v85xr.swift:27:24: error: cannot find 'Trillion'\
    \ in scope\n    let trillion = Int(Trillion)\n                       ^~~~~~~~\n\
    /tmp/tmpq40v85xr.swift:28:27: error: cannot find 'Quadrillion' in scope\n    let\
    \ quadrillion = Int(Quadrillion)\n                          ^~~~~~~~~~~\n/tmp/tmpq40v85xr.swift:29:27:\
    \ error: cannot find 'Quintillion' in scope\n    let quintillion = Int(Quintillion"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var arr2 = arr\n    arr2.reverse()\n    for n in arr2 {\n     \
    \   let index = min + n % 10\n        result.append(names[index])\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw4n_vkqr.swift:19:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        let digit = String(number)\n        let name = digits[digit]\n\
    \        result.append(name)\n    }\n    return result.reversed()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc3c_p7xn.swift:15:20: error: cannot find 'digits' in scope\n  \
    \      let name = digits[digit]\n                   ^~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    \n    if arr.isEmpty {\n        return result\n    }\n    \n    let min =\
    \ 1\n    let max = 9\n    \n    var reversed = arr.reverse()\n    \n    for number\
    \ in reversed {\n        let index = min..<max\n        let name = index.firstIndex(of:\
    \ number)\n        \n        if name != nil {\n            result.append(name!)\n\
    \        } else {\n            result.append(String(number))\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvhgr1jj2.swift:18:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    var reversed = arr.reverse()\n       \
    \            ~~~ ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var reversed = arr.reverse()\n\
    \    for number in reversed {\n        let index = Int(number) - 1\n        if\
    \ index < 0 || index > 9 {\n            continue\n        }\n        result.append(names[index])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6jrank3m.swift:13:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    var reversed = arr.reverse()\n       \
    \            ~~~ ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let hundred = arr[10]\n    let\
    \ thousand = arr[11]\n    let ten_thousand = arr[12]\n    let hundred_thousand\
    \ = arr[13]\n    let thousand_thousand = arr[14]\n    let hundred_thousand_thousand\
    \ = arr[15]\n    let thousand_thousand_thousand = arr[16]\n    let hundred_thousand_thousand_thousand\
    \ = arr[17]\n    let thousand_thousand_thousand_thousand = arr[18]\n    let hundred_thousand_thousand_thousand_thousand\
    \ = arr[19]\n    let thousand_thousand_thousand_thousand_thousand = arr[20]\n\
    \    let hundred_thousand_thousand_thousand_thousand_thousand = arr[21]\n    let\
    \ thousand_thousand_thousand_thousand_thousand_thousand = arr[22]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[23]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[24]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[25]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[26]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[27]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[28]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[29]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[30]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[31]\n    let thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand\
    \ = arr[32]\n    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thous\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmporvio7ww.swift:46:9: error: type annotation missing in pattern\n\
    \    let hundred_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thousand_thous\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    if arr.count < 10 {\n\
    \        return result\n    }\n    let one = arr[0]\n    let two = arr[1]\n  \
    \  let three = arr[2]\n    let four = arr[3]\n    let five = arr[4]\n    let six\
    \ = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n    let nine = arr[8]\n\
    \    let ten = arr[9]\n    let ten_one = arr[10 - 1]\n    let ten_two = arr[11\
    \ - 1]\n    let ten_three = arr[12 - 1]\n    let ten_four = arr[13 - 1]\n    let\
    \ ten_five = arr[14 - 1]\n    let ten_six = arr[15 - 1]\n    let ten_seven = arr[16\
    \ - 1]\n    let ten_eight = arr[17 - 1]\n    let ten_nine = arr[18 - 1]\n    let\
    \ ten_ten = arr[19 - 1]\n    let ten_ten_one = arr[20 - 1]\n    let ten_ten_two\
    \ = arr[21 - 1]\n    let ten_ten_three = arr[22 - 1]\n    let ten_ten_four = arr[23\
    \ - 1]\n    let ten_ten_five = arr[24 - 1]\n    let ten_ten_six = arr[25 - 1]\n\
    \    let ten_ten_seven = arr[26 - 1]\n    let ten_ten_eight = arr[27 - 1]\n  \
    \  let ten_ten_nine = arr[28 - 1]\n    let ten_ten_ten = arr[29 - 1]\n    let\
    \ ten_ten_ten_one = arr[30 - 1]\n    let ten_ten_ten_two = arr[31 - 1]\n    let\
    \ ten_ten_ten_three = arr[32 - 1]\n    let ten_ten_ten_four = arr[33 - 1]\n  \
    \  let ten_ten_ten_five = arr[34 - 1]\n    let ten_ten_ten_six = arr[35 - 1]\n\
    \    let ten_ten_ten_seven = arr[36 - 1]\n    let ten_ten_ten_eight = arr[37 -\
    \ 1]\n    let ten_ten_ten_nine = arr[38 - 1]\n    let ten_ten_ten_ten = arr[40\
    \ - 1]\n    let ten_ten_ten_ten_one = arr[41 - 1]\n    let ten_ten_ten_ten_two\
    \ = arr[42 - 1]\n    let ten_ten_ten_ten_three = arr[43 - 1]\n    let ten_ten_ten_ten_four\
    \ = arr[44 - 1]\n    let ten_ten_ten_ten_five = arr[45 - 1]\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpodzmvalx.swift:9:9: warning: variable 'result' was never mutated;\
    \ consider changing to 'let' constant\n    var result = [String]()\n    ~~~ ^\n\
    \    let\n/tmp/tmpodzmvalx.swift:16:9: warning: initialization of immutable value\
    \ 'one' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let one = arr[0]\n    ~~~~^~~\n    _\n/tmp/tmpodzmvalx.swift:17:9: warning:\
    \ initialization of immutable value 'two' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let two = arr[1]\n    ~~~~^~~\n    _\n\
    /tmp/tmpodzmvalx.swift:18:9: warning: initialization of immutable value 'three'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let three = arr[2]\n    ~~~~^~~~~\n    _\n/tmp/tmpodzmvalx.swift:19:9: warning:\
    \ initialization of immutable value 'four' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let four = arr[3]\n    ~~~~^~~~\n\
    \    _\n/tmp/tmpodzmvalx.swift:20:9: warning: initialization of immutable value\
    \ 'five' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let five = arr[4]\n    ~~~~^~~~\n    _\n/tmp/tmpodzmvalx.swift:21:9:\
    \ warning: initialization of immutable value 'six' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let six = arr[5]\n    ~~~~^~~\n \
    \   _\n/tmp/tmpodzmvalx.swift:22:9: warning: initialization of immutable value\
    \ 'seven' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let seven = arr[6]\n    ~~~~^~~~~\n    _\n/tmp/tmpodzmvalx.swift:23:9:\
    \ warning: initialization of immutable value 'eight' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let eight = arr[7]\n  \
    \  ~~~~^~~~~\n    _\n/tmp/tmpodzmvalx.swift:24:9: warning: initialization of immutable\
    \ value 'nine' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let nine = arr[8]\n    ~~~~^~~~\n    _\n/tmp/tmpodzmvalx.swift:25:9:\
    \ warning: initialization of immutable value 'ten' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    "
  stdout: ''
  timestamp: 1660014344
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var i = 0\n    while\
    \ i < arr.count {\n        let value = arr[i]\n        if value < 1 || value >\
    \ 9 {\n            i += 1\n            continue\n        }\n        let digit\
    \ = value - 1 + 10\n        result.append(String(digit))\n        i += 1\n   \
    \ }\n    for index in 0..<result.count {\n        let value = result[index]\n\
    \        if value < \"One\" || value > \"Nine\" {\n            result[index] =\
    \ \"\\(Int(value))\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpg8yoy7r_/tmpg8yoy7r_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9383513c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b938320ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b938320a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93832097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg8yoy7r_                        0x00005634f0676e51 <unavailable> + 7761

    5    libc.so.6                          0x00002b93836ff460 __libc_start_main +
    245

    6    tmpg8yoy7r_                        0x00005634f06768f9 <unavailable> + 6393

    '
  stdout: ''
  timestamp: 1660014344
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var last = 0\n    for num in arr {\n        if num > 9 {\n            last\
    \ = num\n        } else {\n            if last > 0 {\n                result.append(\"\
    \\(last)\")\n            }\n            result.append(\"\\(num)\")\n         \
    \   last = num\n        }\n    }\n    if last > 0 {\n        result.append(\"\\\
    (last)\")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpzapo19iq/tmpzapo19iq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31c909dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31c8d94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31c8d94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31c8d937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzapo19iq                        0x00005598fada4aa1 <unavailable> + 6817

    5    libc.so.6                          0x00002b31c9289460 __libc_start_main +
    245

    6    tmpzapo19iq                        0x00005598fada4549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[0]\n    let eleven = arr[1]\n    let\
    \ twelve = arr[2]\n    let thirteen = arr[3]\n    let fourteen = arr[4]\n    let\
    \ fifteen = arr[5]\n    let sixteen = arr[6]\n    let seventeen = arr[7]\n   \
    \ let eighteen = arr[8]\n    let nineteen = arr[9]\n    let hundred = arr[0]\n\
    \    let thousand = arr[1]\n    let million = arr[2]\n    let billion = arr[3]\n\
    \    let trillion = arr[4]\n    let quadrillion = arr[5]\n    let quintillion\
    \ = arr[6]\n    let sextillion = arr[7]\n    let septillion = arr[8]\n    let\
    \ octillion = arr[9]\n    let nonillion = arr[0]\n    let decillion = arr[1]\n\
    \    let undecillion = arr[2]\n    let duodecillion = arr[3]\n    let tredecillion\
    \ = arr[4]\n    let quattuordecillion = arr[5]\n    let quindecillion = arr[6]\n\
    \    let sexdecillion = arr[7]\n    let septendecillion = arr[8]\n    let octodecillion\
    \ = arr[9]\n    let novemdecillion = arr[0]\n    let vigintillion = arr[1]\n \
    \   let centillion = arr[2]\n    let uncentillion = arr[3]\n    let duocentillion\
    \ = arr[4]\n    let trecentillion = arr[5]\n    let quattuorcentillion = arr[6]\n\
    \    let quincentillion = arr[7]\n    let sexcentillion = arr[8]\n    let septencentillion\
    \ = arr[9]\n    let octocentillion = arr[0]\n    let novemcentillion = arr[1]\n\
    \    let vigintellion = arr[2]\n    let centellion = arr[3]\n    let uncentellion\
    \ = arr[4]\n    let duocentellion = arr[5]\n    let trecentellion = arr[6]\n \
    \   let quattuorcentellion = arr[7]\n    let quincentellion = arr[8]\n    let\
    \ sexcentellion = arr[9]\n    let \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_xtqoix4.swift:72:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmp_xtqoix4.swift:9:9: warning: variable 'result' was never mutated;\
    \ consider changing to 'let' constant\n    var result = [String]()\n    ~~~ ^\n\
    \    let\n/tmp/tmp_xtqoix4.swift:13:9: warning: initialization of immutable value\
    \ 'one' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let one = arr[0]\n    ~~~~^~~\n    _\n/tmp/tmp_xtqoix4.swift:14:9: warning:\
    \ initialization of immutable value 'two' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let two = arr[1]\n    ~~~~^~~\n    _\n\
    /tmp/tmp_xtqoix4.swift:15:9: warning: initialization of immutable value 'three'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let three = arr[2]\n    ~~~~^~~~~\n    _\n/tmp/tmp_xtqoix4.swift:16:9: warning:\
    \ initialization of immutable value 'four' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let four = arr[3]\n    ~~~~^~~~\n\
    \    _\n/tmp/tmp_xtqoix4.swift:17:9: warning: initialization of immutable value\
    \ 'five' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let five = arr[4]\n    ~~~~^~~~\n    _\n/tmp/tmp_xtqoix4.swift:18:9:\
    \ warning: initialization of immutable value 'six' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let six = arr[5]\n    ~~~~^~~\n \
    \   _\n/tmp/tmp_xtqoix4.swift:19:9: warning: initialization of immutable value\
    \ 'seven' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let seven = arr[6]\n    ~~~~^~~~~\n    _\n/tmp/tmp_xtqoix4.swift:20:9:\
    \ warning: initialization of immutable value 'eight' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let eight = arr[7]\n  \
    \  ~~~~^~~~~\n    _\n/tmp/tmp_xtqoix4.swift:21:9: warning: initialization of immutable\
    \ value 'nine' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let nine = arr[8]\n    ~~~~^~~~\n    _\n/tmp/tmp_xtqoix4.swift:22:9:\
    \ warning: initialization of immutable value 'ten' was ne"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for number in arr {\n        if number < 1 || number > 9 {\n\
    \            continue\n        }\n        i += 1\n        let digit = String(number)\n\
    \        result.append(name[digit])\n    }\n    for _ in 0..<i {\n        result.removeLast()\n\
    \    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3qjcmg20.swift:17:23: error: cannot find 'name' in scope\n    \
    \    result.append(name[digit])\n                      ^~~~\n/tmp/tmp3qjcmg20.swift:22:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLength = arr.maxElement()\n\
    \    let minLength = arr.minElement()\n    let maxDigit = maxLength % 10\n   \
    \ let minDigit = minLength % 10\n    let maxDigitName = String(maxDigit + 1)\n\
    \    let minDigitName = String(minDigit + 1)\n    for element in arr {\n     \
    \   let digit = element % 10\n        let digitName = String(digit + 1)\n    \
    \    if digit == minDigit {\n            result.append(minDigitName)\n       \
    \ } else if digit == maxDigit {\n            result.append(maxDigitName)\n   \
    \     } else {\n            result.append(digitName)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsvl53_bz.swift:13:25: error: value of type '[Int]' has no member\
    \ 'maxElement'\n    let maxLength = arr.maxElement()\n                    ~~~\
    \ ^~~~~~~~~~\n/tmp/tmpsvl53_bz.swift:14:25: error: value of type '[Int]' has no\
    \ member 'minElement'\n    let minLength = arr.minElement()\n                \
    \    ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let firstDigit = arr[0]\n\
    \    if firstDigit < 1 || firstDigit > 9 {\n        return result\n    }\n   \
    \ let lastDigit = arr[arr.count - 1]\n    if lastDigit < 1 || lastDigit > 9 {\n\
    \        return result\n    }\n    let firstDigitString = String(firstDigit)\n\
    \    let lastDigitString = String(lastDigit)\n    let firstDigitName = ones[firstDigit]\n\
    \    let lastDigitName = ones[lastDigit]\n    let firstDigitString = firstDigitName\n\
    \    let lastDigitString = lastDigitName\n    arr.reverse()\n    for element in\
    \ arr {\n        let element = String(element)\n        let elementName = ones[element]\n\
    \        result.append(elementName)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyt6km1s7.swift:23:26: error: cannot find 'ones' in scope\n    let\
    \ firstDigitName = ones[firstDigit]\n                         ^~~~\n/tmp/tmpyt6km1s7.swift:24:25:\
    \ error: cannot find 'ones' in scope\n    let lastDigitName = ones[lastDigit]\n\
    \                        ^~~~\n/tmp/tmpyt6km1s7.swift:27:9: error: cannot use\
    \ mutating member on immutable value: 'arr' is a 'let' constant\n    arr.reverse()\n\
    \    ~~~ ^\n/tmp/tmpyt6km1s7.swift:30:27: error: cannot find 'ones' in scope\n\
    \        let elementName = ones[element]\n                          ^~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n > 0 && n < 10 {\n           \
    \ result.append(name[n])\n        }\n    }\n    for n in arr {\n        if n >\
    \ 0 && n < 10 {\n            result.append(name[n])\n        }\n    }\n    for\
    \ n in arr {\n        if n > 0 && n < 10 {\n            result.append(name[n])\n\
    \        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n        \
    \    result.append(name[n])\n        }\n    }\n    for n in arr {\n        if\
    \ n > 0 && n < 10 {\n            result.append(name[n])\n        }\n    }\n  \
    \  for n in arr {\n        if n > 0 && n < 10 {\n            result.append(name[n])\n\
    \        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n        \
    \    result.append(name[n])\n        }\n    }\n    for n in arr {\n        if\
    \ n > 0 && n < 10 {\n            result.append(name[n])\n        }\n    }\n  \
    \  for n in arr {\n        if n > 0 && n < 10 {\n            result.append(name[n])\n\
    \        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n        \
    \    result.append(name[n])\n        }\n    }\n    for n in arr {\n        if\
    \ n > 0 && n < 10 {\n            result.append(name[n])\n        }\n    }\n  \
    \  for n in arr {\n        if n > 0 && n < 10 {\n            result.append(name[n])\n\
    \        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n        \
    \    result.append(name[n])\n        }\n    }\n    for n in arr {\n        if\
    \ n > 0 && n < 10 {\n            result.append(name[n])\n        }\n    }\n  \
    \  for n in arr {\n        if n > 0 && n < 10 {\n            result.append(name[n])\n\
    \        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n        \
    \    result.append(name[n])\n        }\n    }\n    for n in arr {\n        if\
    \ n > 0 && n < 10 {\n            result.append(name[n])\n        }\n    }\n  \
    \  for n in arr {\n        if n > 0 && n < 10 {\n            result.append(name[n])\n\
    \        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n        \
    \    result.append(name[n])\n        }\n    }\n    for n in arr {\n        if\
    \ n > 0 && n < 10 {\n            result.append(name[n])\n        }\n    }\n  \
    \  for n in arr {\n        if n > 0 && n < 10 {\n            result.append(name[n])\n\
    \        }\n    }\n    for n in arr {\n        if n > 0 && n < 10 {\n        \
    \    result.append(name[n])\n        }\n    }\n    for n in arr {\n        if\
    \ n > 0 && n < 10 {\n            result.append(name[n])\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcmvq9ym9.swift:144:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpcmvq9ym9.swift:121:18:\
    \ note: to match this opening '{'\n    for n in arr {\n                 ^\n/tmp/tmpcmvq9ym9.swift:144:63:\
    \ error: expected '}' at end of brace statement\nassert(by_length(arr: [9, 4,\
    \ 8]) == [\"Nine\", \"Eight\", \"Four\"])\n                                  \
    \                            ^\n/tmp/tmpcmvq9ym9.swift:8:40: note: to match this\
    \ opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n                    \
    \                   ^\n/tmp/tmpcmvq9ym9.swift:13:27: error: cannot find 'name'\
    \ in scope\n            result.append(name[n])\n                          ^~~~\n\
    /tmp/tmpcmvq9ym9.swift:18:27: error: cannot find 'name' in scope\n           \
    \ result.append(name[n])\n                          ^~~~\n/tmp/tmpcmvq9ym9.swift:23:27:\
    \ error: cannot find 'name' in scope\n            result.append(name[n])\n   \
    \                       ^~~~\n/tmp/tmpcmvq9ym9.swift:28:27: error: cannot find\
    \ 'name' in scope\n            result.append(name[n])\n                      \
    \    ^~~~\n/tmp/tmpcmvq9ym9.swift:33:27: error: cannot find 'name' in scope\n\
    \            result.append(name[n])\n                          ^~~~\n/tmp/tmpcmvq9ym9.swift:38:27:\
    \ error: cannot find 'name' in scope\n            result.append(name[n])\n   \
    \                       ^~~~\n/tmp/tmpcmvq9ym9.swift:43:27: error: cannot find\
    \ 'name' in scope\n            result.append(name[n])\n                      \
    \    ^~~~\n/tmp/tmpcmvq9ym9.swift:48:27: error: cannot find 'name' in scope\n\
    \            result.append(name[n])\n                          ^~~~\n/tmp/tmpcmvq9ym9.swift:53:27:\
    \ error: cannot find 'name' in scope\n            result.append(name[n])\n   \
    \                       ^~~~\n/tmp/tmpcmvq9ym9.swift:58:27: error: cannot find\
    \ 'name' in scope\n            result.append(name[n])\n                      \
    \    ^~~~\n/tmp/tmpcmvq9ym9.swift:63:27: error: cannot find 'name' in scope\n\
    \            result.ap"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    guard arr.count <= 9 else { return arr }\n    var\
    \ result = [String]()\n    var index = 0\n    while index < arr.count {\n    \
    \    let value = arr[index]\n        guard value >= 1 && value <= 9 else { continue\
    \ }\n        let name = String(value)\n        result.append(name)\n        index\
    \ += 1\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmodo5_ji.swift:10:40: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n    guard arr.count <= 9 else { return\
    \ arr }\n                                       ^\n/tmp/tmpmodo5_ji.swift:10:40:\
    \ note: arguments to generic parameter 'Element' ('Int' and 'String') are expected\
    \ to be equal\n    guard arr.count <= 9 else { return arr }\n                \
    \                       ^\n/tmp/tmpmodo5_ji.swift:20:19: error: cannot convert\
    \ return expression of type '()' to return type '[String]'\n    return result.reverse()\n\
    \           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for i in arr {\n        if i < min {\n            min\
    \ = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n\
    \    var reversed = [Int]()\n    for i in arr {\n        reversed.append(max -\
    \ i)\n    }\n    for i in reversed {\n        result.append(names[i])\n    }\n\
    \    for i in arr {\n        if i < min {\n            result.append(names[i])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb_1w50hu.swift:17:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmpb_1w50hu.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpb_1w50hu.swift:20:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmpb_1w50hu.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpb_1w50hu.swift:28:23: error: cannot find 'names' in scope\n\
    \        result.append(names[i])\n                      ^~~~~\n/tmp/tmpb_1w50hu.swift:32:27:\
    \ error: cannot find 'names' in scope\n            result.append(names[i])\n \
    \                         ^~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[arr.count-1]\n    for n in arr {\n        if min <= n && n <=\
    \ max {\n            result.append(nameOf(n))\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe_khuv1z.swift:17:27: error: cannot find 'nameOf' in scope\n  \
    \          result.append(nameOf(n))\n                          ^~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let hundred = arr[10]\n    let\
    \ thousand = arr[11]\n    let ten_thousand = arr[12]\n    let hundred_thousand\
    \ = arr[13]\n    let million = arr[14]\n    let billion = arr[15]\n    let trillion\
    \ = arr[16]\n    let quadrillion = arr[17]\n    let quintillion = arr[18]\n  \
    \  let sextillion = arr[19]\n    let septillion = arr[20]\n    let octillion =\
    \ arr[21]\n    let nonillion = arr[22]\n    let decillion = arr[23]\n    let undecillion\
    \ = arr[24]\n    let duodecillion = arr[25]\n    let tredecillion = arr[26]\n\
    \    let quattuordecillion = arr[27]\n    let quindecillion = arr[28]\n    let\
    \ sexdecillion = arr[29]\n    let septendecillion = arr[30]\n    let octodecillion\
    \ = arr[31]\n    let novemdecillion = arr[32]\n    let vigintillion = arr[33]\n\
    \    let centillion = arr[34]\n    let nonillion = arr[35]\n    let decillion\
    \ = arr[36]\n    let undecillion = arr[37]\n    let duodecillion = arr[38]\n \
    \   let tredecillion = arr[39]\n    let quattuordecillion = arr[40]\n    let quindecillion\
    \ = arr[41]\n    let sexdecillion = arr[42]\n    let septendecillion = arr[43]\n\
    \    let octodecillion = arr[44]\n    let novemdecillion = arr[45]\n    let vigintillion\
    \ = arr[46]\n    let centillion = arr[47]\n    let nonillion = arr[48]\n    let\
    \ decillion = arr[49]\n    let undecillion = arr[50]\n    let duodecillion = arr[51]\n\
    \    let tredecillion = arr[52]\n    let quattuordecillion = arr[53]\n    let\
    \ quindecillion = arr[54]\n    let sexdecillion = arr[55]\n    let sep\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4ojibpbm.swift:48:9: error: invalid redeclaration of 'nonillion'\n\
    \    let nonillion = arr[35]\n        ^\n/tmp/tmp4ojibpbm.swift:35:9: note: 'nonillion'\
    \ previously declared here\n    let nonillion = arr[22]\n        ^\n/tmp/tmp4ojibpbm.swift:49:9:\
    \ error: invalid redeclaration of 'decillion'\n    let decillion = arr[36]\n \
    \       ^\n/tmp/tmp4ojibpbm.swift:36:9: note: 'decillion' previously declared\
    \ here\n    let decillion = arr[23]\n        ^\n/tmp/tmp4ojibpbm.swift:50:9: error:\
    \ invalid redeclaration of 'undecillion'\n    let undecillion = arr[37]\n    \
    \    ^\n/tmp/tmp4ojibpbm.swift:37:9: note: 'undecillion' previously declared here\n\
    \    let undecillion = arr[24]\n        ^\n/tmp/tmp4ojibpbm.swift:51:9: error:\
    \ invalid redeclaration of 'duodecillion'\n    let duodecillion = arr[38]\n  \
    \      ^\n/tmp/tmp4ojibpbm.swift:38:9: note: 'duodecillion' previously declared\
    \ here\n    let duodecillion = arr[25]\n        ^\n/tmp/tmp4ojibpbm.swift:52:9:\
    \ error: invalid redeclaration of 'tredecillion'\n    let tredecillion = arr[39]\n\
    \        ^\n/tmp/tmp4ojibpbm.swift:39:9: note: 'tredecillion' previously declared\
    \ here\n    let tredecillion = arr[26]\n        ^\n/tmp/tmp4ojibpbm.swift:53:9:\
    \ error: invalid redeclaration of 'quattuordecillion'\n    let quattuordecillion\
    \ = arr[40]\n        ^\n/tmp/tmp4ojibpbm.swift:40:9: note: 'quattuordecillion'\
    \ previously declared here\n    let quattuordecillion = arr[27]\n        ^\n/tmp/tmp4ojibpbm.swift:54:9:\
    \ error: invalid redeclaration of 'quindecillion'\n    let quindecillion = arr[41]\n\
    \        ^\n/tmp/tmp4ojibpbm.swift:41:9: note: 'quindecillion' previously declared\
    \ here\n    let quindecillion = arr[28]\n        ^\n/tmp/tmp4ojibpbm.swift:55:9:\
    \ error: invalid redeclaration of 'sexdecillion'\n    let sexdecillion = arr[42]\n\
    \        ^\n/tmp/tmp4ojibpbm.swift:42:9: note: 'sexdecillion' previously declared\
    \ here\n    let sexdecillion = arr[29]\n        ^\n/tmp/tmp4ojibpbm.swift:56:9:\
    \ error: invalid redeclaration of 'septendecillion'\n    let septendecillion =\
    \ arr[43]\n        ^\n/tmp/tmp4ojibpbm.swift:43:9: note: 'septendecillion' previously\
    \ d"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var i = 0\n    while i < arr.count {\n        if arr[i] < min ||\
    \ arr[i] > max {\n            i += 1\n            continue\n        }\n      \
    \  let digit = arr[i] - min\n        let name = digitToName(digit)\n        result.append(name)\n\
    \        i += 1\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxm8lc4om.swift:22:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmpxm8lc4om.swift:26:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for i in 1..<arr.count {\n        if arr[i] < min {\n\
    \            min = arr[i]\n        } else if arr[i] > max {\n            max =\
    \ arr[i]\n        }\n    }\n    var reversed = [Int]()\n    for i in min..<max\
    \ {\n        reversed.append(i)\n    }\n    for i in reversed[0..<reversed.count]\
    \ {\n        let index = reversed.index(of: i)\n        if index != nil {\n  \
    \          result.append(names[index!])\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb77f3qth.swift:17:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = arr[i]\n            ^~~\n/tmp/tmpb77f3qth.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpb77f3qth.swift:19:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = arr[i]\n            ^~~\n/tmp/tmpb77f3qth.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpb77f3qth.swift:27:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: i)\n          \
    \                   ^\n/tmp/tmpb77f3qth.swift:27:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: i)\n                       \
    \      ^~~~~\n                             firstIndex\n/tmp/tmpb77f3qth.swift:29:27:\
    \ error: cannot find 'names' in scope\n            result.append(names[index!])\n\
    \                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let minLength = min(arr.count, 9)\n    var reversed\
    \ = [Int]()\n    for i in minLength...arr.count {\n        reversed.append(arr[i])\n\
    \    }\n    reversed.reverse()\n    var result = [String]()\n    for i in minLength...arr.count\
    \ {\n        result.append(nameFromIndex(i))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfg745vyo.swift:18:23: error: cannot find 'nameFromIndex' in scope\n\
    \        result.append(nameFromIndex(i))\n                      ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n\n    var result = [String]()\n    var reversed\
    \ = [Int]()\n    var one = Int(One)\n    var two = Int(Two)\n    var three = Int(Three)\n\
    \    var four = Int(Four)\n    var five = Int(Five)\n    var six = Int(Six)\n\
    \    var seven = Int(Seven)\n    var eight = Int(Eight)\n    var nine = Int(Nine)\n\
    \n    for i in arr {\n        reversed.append(i)\n    }\n\n    for i in reversed[0..<reversed.count]\
    \ {\n        if i <= 9 {\n            result.append(String(format: \"%@\", getDigitName(i)))\n\
    \        } else {\n            result.append(String(format: \"%@\", getDigitName(i)))\n\
    \        }\n    }\n\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpyi82gjpn.swift:15:19: error: cannot find 'One' in scope\n    var\
    \ one = Int(One)\n                  ^~~\n/tmp/tmpyi82gjpn.swift:16:19: error:\
    \ cannot find 'Two' in scope\n    var two = Int(Two)\n                  ^~~\n\
    /tmp/tmpyi82gjpn.swift:17:21: error: cannot find 'Three' in scope\n    var three\
    \ = Int(Three)\n                    ^~~~~\n/tmp/tmpyi82gjpn.swift:18:20: error:\
    \ cannot find 'Four' in scope\n    var four = Int(Four)\n                   ^~~~\n\
    /tmp/tmpyi82gjpn.swift:19:20: error: cannot find 'Five' in scope\n    var five\
    \ = Int(Five)\n                   ^~~~\n/tmp/tmpyi82gjpn.swift:20:19: error: cannot\
    \ find 'Six' in scope\n    var six = Int(Six)\n                  ^~~\n/tmp/tmpyi82gjpn.swift:21:21:\
    \ error: cannot find 'Seven' in scope\n    var seven = Int(Seven)\n          \
    \          ^~~~~\n/tmp/tmpyi82gjpn.swift:22:21: error: cannot find 'Eight' in\
    \ scope\n    var eight = Int(Eight)\n                    ^~~~~\n/tmp/tmpyi82gjpn.swift:23:20:\
    \ error: cannot find 'Nine' in scope\n    var nine = Int(Nine)\n             \
    \      ^~~~\n/tmp/tmpyi82gjpn.swift:31:48: error: cannot find 'getDigitName' in\
    \ scope\n            result.append(String(format: \"%@\", getDigitName(i)))\n\
    \                                               ^~~~~~~~~~~~\n/tmp/tmpyi82gjpn.swift:31:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%@\", getDigitName(i)))\n        \
    \                        ^~~~~~~\n                                 repeating \
    \    count: \n/tmp/tmpyi82gjpn.swift:33:48: error: cannot find 'getDigitName'\
    \ in scope\n            result.append(String(format: \"%@\", getDigitName(i)))\n\
    \                                               ^~~~~~~~~~~~\n/tmp/tmpyi82gjpn.swift:33:33:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%@\", getDigitName(i)))\n        \
    \                        ^~~~~~~\n                                 repeating \
    \    count: \n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let ones = arr.filter{ $0 <= 1 && $0 >= 9 }\n    let\
    \ tens = arr.filter{ $0 >= 10 && $0 <= 99 }\n    let hundreds = arr.filter{ $0\
    \ >= 100 && $0 <= 999 }\n    let thousands = arr.filter{ $0 >= 1000 && $0 <= 9999\
    \ }\n    let millions = arr.filter{ $0 >= 10000 && $0 <= 99999 }\n    let billions\
    \ = arr.filter{ $0 >= 100000 && $0 <= 999999 }\n    let trillions = arr.filter{\
    \ $0 >= 1000000 && $0 <= 9999999 }\n    let quadrillions = arr.filter{ $0 >= 10000000\
    \ && $0 <= 99999999 }\n    let quintillions = arr.filter{ $0 >= 100000000 && $0\
    \ <= 999999999 }\n    let sextillions = arr.filter{ $0 >= 1000000000 && $0 <=\
    \ 99999999999 }\n    let septillions = arr.filter{ $0 >= 10000000000 && $0 <=\
    \ 999999999999 }\n    let octillions = arr.filter{ $0 >= 100000000000 && $0 <=\
    \ 999999999999999 }\n    let nonillions = arr.filter{ $0 >= 1000000000000 && $0\
    \ <= 999999999999999999 }\n    let decillions = arr.filter{ $0 >= 100000000000000\
    \ && $0 <= 999999999999999999999 }\n    let undecillions = arr.filter{ $0 >= 10000000000000000\
    \ && $0 <= 9999999999999999999998 }\n    let duodecillions = arr.filter{ $0 >=\
    \ 100000000000000000 && $0 <= 99999999999999999999972 }\n    let tredecillions\
    \ = arr.filter{ $0 >= 10000000000000000100 && $0 <= 9999999999999999999997199\
    \ }\n    let quattuordecillions = arr.filter{ $0 >= 100000000000000001000 && $0\
    \ <= 999999999999999999999719999 }\n    let quindecillions = arr.filter{ $0 >=\
    \ 1000000000000000010000 && $0 <= 99999999999999999999971999999 }\n    let sexdecillions\
    \ = arr.filter{ $0 >= 10000000000000000100000 && $0 <= 99999999999999999999971999999999\
    \ }\n    let septendecillions = arr.filter{ $0 >= 100000000000000001000000 &&\
    \ $0 <= 999999999999999999999719999999999999 }\n    let octodecillions = arr.filter{\
    \ $0 >= 1000000000000000010000000 && $0 <= 999999999999999999999719999999999\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzvt_i16d.swift:51:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpzvt_i16d.swift:8:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpzvt_i16d.swift:35:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpzvt_i16d.swift:10:9:\
    \ warning: initialization of immutable value 'ones' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let ones = arr.filter{ $0 <= 1 &&\
    \ $0 >= 9 }\n    ~~~~^~~~\n    _\n/tmp/tmpzvt_i16d.swift:11:9: warning: initialization\
    \ of immutable value 'tens' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let tens = arr.filter{ $0 >= 10 && $0 <= 99 }\n \
    \   ~~~~^~~~\n    _\n/tmp/tmpzvt_i16d.swift:12:9: warning: initialization of immutable\
    \ value 'hundreds' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    let hundreds = arr.filter{ $0 >= 100 && $0 <= 999 }\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpzvt_i16d.swift:13:9: warning: initialization of immutable value\
    \ 'thousands' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let thousands = arr.filter{ $0 >= 1000 && $0 <= 9999 }\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpzvt_i16d.swift:14:9: warning: initialization of immutable value\
    \ 'millions' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let millions = arr.filter{ $0 >= 10000 && $0 <= 99999 }\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpzvt_i16d.swift:15:9: warning: initialization of immutable value\
    \ 'billions' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let billions = arr.filter{ $0 >= 100000 && $0 <= 999999 }\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmpzvt_i16d.swift:16:9: warning: initialization of immutable value\
    \ 'trillions' was never used; consider replacing with assignment to "
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    var result = [String]()\n    let one\
    \ = String(format: \"One\")\n    let two = String(format: \"Two\")\n    let three\
    \ = String(format: \"Three\")\n    let four = String(format: \"Four\")\n    let\
    \ five = String(format: \"Five\")\n    let six = String(format: \"Six\")\n   \
    \ let seven = String(format: \"Seven\")\n    let eight = String(format: \"Eight\"\
    )\n    let nine = String(format: \"Nine\")\n    let ten = String(format: \"Ten\"\
    )\n    let hundred = String(format: \"Hundred\")\n    let thousand = String(format:\
    \ \"Thousand\")\n    let million = String(format: \"Million\")\n    let billion\
    \ = String(format: \"Billion\")\n    let trillion = String(format: \"Trillion\"\
    )\n    let quadrillion = String(format: \"Quadrillion\")\n    let quintillion\
    \ = String(format: \"Quintillion\")\n    let sextillion = String(format: \"Sextillion\"\
    )\n    let septillion = String(format: \"Septillion\")\n    let octillion = String(format:\
    \ \"Octillion\")\n    let nonillion = String(format: \"Nonillion\")\n    let decillion\
    \ = String(format: \"Decillion\")\n    let undecillion = String(format: \"Undecillion\"\
    )\n    let duodecillion = String(format: \"Duodecillion\")\n    let tredecillion\
    \ = String(format: \"Tredecillion\")\n    let quattuordecillion = String(format:\
    \ \"Quattuordecillion\")\n    let quindecillion = String(format: \"Quindecillion\"\
    )\n    let sexdecillion = String(format: \"Sexdecillion\")\n    let septendecillion\
    \ = String(format: \"Septendecillion\")\n    let octodecillion = String(format:\
    \ \"Octodecillion\")\n    let novemdecillion = String(format: \"Novemdecillion\"\
    )\n    let vigintillion = String(format: \"Vigintillion\")\n    let unvigintillion\
    \ = String(format: \"Unvigintillion\")\n    let duovigintillion = String(format:\
    \ \"Duovigintillion\")\n    let trevigintillion = String(format: \"Trevigintillion\"\
    )\n    let quattuorvigintillion = String(format: \"Quattuorvigintillion\")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp39l2li0d.swift:13:15: error: no exact matches in call to initializer\
    \ \n    let one = String(format: \"One\")\n              ^\nSwift.String:4:23:\
    \ note: incorrect labels for candidate (have: '(format:)', expected: '(_:)')\n\
    \    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:3:12: note: incorrect labels for candidate\
    \ (have: '(format:)', expected: '(_:)')\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: incorrect labels for candidate (have: '(format:)',\
    \ expected: '(_:)')\n    public init<S>(_ characters: S) where S : Sequence, S.Element\
    \ == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: incorrect\
    \ labels for candidate (have: '(format:)', expected: '(_:)')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\n/tmp/tmp39l2li0d.swift:14:15: error: no exact matches in\
    \ call to initializer \n    let two = String(format: \"Two\")\n              ^\n\
    Swift.String:4:23: note: incorrect labels for candidate (have: '(format:)', expected:\
    \ '(_:)')\n    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\nSwift.String:3:12: note: incorrect labels for candidate\
    \ (have: '(format:)', expected: '(_:)')\n    public init<S>(_ other: S) where\
    \ S : LosslessStringConvertible, S : Sequence, S.Element == Character\n      \
    \     ^\nSwift.String:4:12: note: incorrect labels for candidate (have: '(format:)',\
    \ expected: '(_:)')\n    public init<S>(_ characters: S) where S : Sequence, S.Element\
    \ == Character\n           ^\nSwift.RangeReplaceableCollection:3:23: note: incorrect\
    \ labels for candidate (have: '(format:)', expected: '(_:)')\n    @inlinable public\
    \ init<S>(_ elements: S) where S : Sequence, Self.Element == S.Element\n     \
    \                 ^\n/tmp/tmp39l2li0d.swift:15:17: error: no exact matches in\
    \ call to initializer \n    let three = String(format: \"Three\")\n          \
    \      ^\nSwift."
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    for n in arr {\n    \
    \    let digit = String(format: \"%1d\", n)\n        if digit == \"1\" {\n   \
    \         result.append(contentsOf: [\"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"])\n        } else if digit ==\
    \ \"2\" {\n            result.append(contentsOf: [\"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\"])\n        } else\
    \ if digit == \"3\" {\n            result.append(contentsOf: [\"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\"])\n    \
    \    } else if digit == \"4\" {\n            result.append(contentsOf: [\"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\"\
    ])\n        } else if digit == \"5\" {\n            result.append(contentsOf:\
    \ [\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\"\
    , \"Four\"])\n        } else if digit == \"6\" {\n            result.append(contentsOf:\
    \ [\"Six\", \"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\"])\n        } else if digit == \"7\" {\n            result.append(contentsOf:\
    \ [\"Seven\", \"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\"])\n        } else if digit == \"8\" {\n            result.append(contentsOf:\
    \ [\"Eight\", \"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\"\
    , \"Seven\"])\n        } else if digit == \"9\" {\n            result.append(contentsOf:\
    \ [\"Nine\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\"])\n        } else {\n            result.append(digit)\n        }\n\
    \    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdob1mvat.swift:12:27: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        let digit = String(format:\
    \ \"%1d\", n)\n                          ^~~~~~~\n                           repeating\
    \      count: \n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number > 9 {\n            continue\n    \
    \    }\n        let name = ones[number]\n        result.append(name)\n    }\n\
    \    for number in arr.reverse() {\n        if number > 9 {\n            continue\n\
    \        }\n        let name = ones[number]\n        result.append(name)\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7qv4g8ta.swift:14:20: error: cannot find 'ones' in scope\n    \
    \    let name = ones[number]\n                   ^~~~\n/tmp/tmp7qv4g8ta.swift:17:23:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \    for number in arr.reverse() {\n                  ~~~ ^\n/tmp/tmp7qv4g8ta.swift:17:23:\
    \ error: for-in loop requires '()' to conform to 'Sequence'\n    for number in\
    \ arr.reverse() {\n                  ~~~~^~~~~~~~~\n/tmp/tmp7qv4g8ta.swift:21:20:\
    \ error: cannot find 'ones' in scope\n        let name = ones[number]\n      \
    \             ^~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    if min > 9 {\n        return result\n    }\n    if\
    \ max < 1 {\n        return result\n    }\n    if min == max {\n        let digit\
    \ = Int(min)\n        let name = ones[digit]\n        result.append(name)\n  \
    \      return result\n    }\n    let digit = Int(min)\n    let name = ones[digit]\n\
    \    let digit2 = Int(max)\n    let name2 = ones[digit2]\n    let digit3 = Int(min\
    \ - 1)\n    let name3 = ones[digit3]\n    let digit4 = Int(max - 1)\n    let name4\
    \ = ones[digit4]\n    let digit5 = Int(min + 1)\n    let name5 = ones[digit5]\n\
    \    let digit6 = Int(max + 1)\n    let name6 = ones[digit6]\n    let digit7 =\
    \ Int(min + 2)\n    let name7 = ones[digit7]\n    let digit8 = Int(max + 2)\n\
    \    let name8 = ones[digit8]\n    let digit9 = Int(min + 3)\n    let name9 =\
    \ ones[digit9]\n    let digit10 = Int(max + 3)\n    let name10 = ones[digit10]\n\
    \    let digit11 = Int(min + 4)\n    let name11 = ones[digit11]\n    let digit12\
    \ = Int(max + 4)\n    let name12 = ones[digit12]\n    let digit13 = Int(min +\
    \ 5)\n    let name13 = ones[digit13]\n    let digit14 = Int(max + 5)\n    let\
    \ name14 = ones[digit14]\n    let digit15 = Int(min + 6)\n    let name15 = ones[digit15]\n\
    \    let digit16 = Int(max + 6)\n    let name16 = ones[digit16]\n    let digit17\
    \ = Int(min + 7)\n    let name17 = ones[digit17]\n    let digit18 = Int(max +\
    \ 7)\n    let name18 = ones[digit18]\n    let digit19 = Int(min + 8)\n    let\
    \ name19 = ones[digit19]\n    let digit20 = Int(max + 8)\n    let name20 = ones[digit20]\n\
    \    let digit21 = Int(min + 9)\n    let name21 = ones[digit21]\n    let digit22\
    \ = Int(max + 9)\n    let name22 = ones[digit22]\n    let digit23 = Int(min +\
    \ 10)\n    let name23 = ones[digit23]\n    let digit24 = Int(max + 10)\n    let\
    \ name24 = ones[digit24]\n    let digit25 = Int(min + 11)\n    let name25 = ones[digit25]\n\
    \    let digit26 = Int(\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpaw1077m5.swift:78:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpaw1077m5.swift:13:22: error: missing argument for parameter #2 in\
    \ call\n    let min = min(arr)\n                     ^\n                     ,\
    \ <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public func\
    \ min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                       ^\n\
    /tmp/tmpaw1077m5.swift:14:22: error: missing argument for parameter #2 in call\n\
    \    let max = max(arr)\n                     ^\n                     , <#[Int]#>\n\
    Swift.max:1:24: note: 'max' declared here\n@inlinable public func max<T>(_ x:\
    \ T, _ y: T) -> T where T : Comparable\n                       ^\n/tmp/tmpaw1077m5.swift:23:20:\
    \ error: cannot find 'ones' in scope\n        let name = ones[digit]\n       \
    \            ^~~~\n/tmp/tmpaw1077m5.swift:28:16: error: cannot find 'ones' in\
    \ scope\n    let name = ones[digit]\n               ^~~~\n/tmp/tmpaw1077m5.swift:30:17:\
    \ error: cannot find 'ones' in scope\n    let name2 = ones[digit2]\n         \
    \       ^~~~\n/tmp/tmpaw1077m5.swift:32:17: error: cannot find 'ones' in scope\n\
    \    let name3 = ones[digit3]\n                ^~~~\n/tmp/tmpaw1077m5.swift:34:17:\
    \ error: cannot find 'ones' in scope\n    let name4 = ones[digit4]\n         \
    \       ^~~~\n/tmp/tmpaw1077m5.swift:36:17: error: cannot find 'ones' in scope\n\
    \    let name5 = ones[digit5]\n                ^~~~\n/tmp/tmpaw1077m5.swift:38:17:\
    \ error: cannot find 'ones' in scope\n    let name6 = ones[digit6]\n         \
    \       ^~~~\n/tmp/tmpaw1077m5.swift:40:17: error: cannot find 'ones' in scope\n\
    \    let name7 = ones[digit7]\n                ^~~~\n/tmp/tmpaw1077m5.swift:42:17:\
    \ error: cannot find 'ones' in scope\n    let name8 = ones[digit8]\n         \
    \       ^~~~\n/tmp/tmpaw1077m5.swift:44:17: error: cannot find 'ones' in scope\n\
    \    let name9 = ones[digit9]\n                ^~~~\n/tmp/tmpaw1077m5.swift:46:18:\
    \ error: cannot find 'ones' in scope\n    let name10 = ones[digit10]\n       \
    \          ^~~~\n/tmp/tmpaw1077m5.swift:48:18: error: cannot find 'ones' in scope\n\
    \    let name11 = ones[digit11]\n     "
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result: [String] = []\n    var reversed = arr.reverse()\n\
    \    for i in reversed {\n        let index = Int(i)\n        let digit = String(index)\n\
    \        let name = digitToName(digit)\n        result.append(name)\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa5a6699m.swift:11:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    var reversed = arr.reverse()\n       \
    \            ~~~ ^\n/tmp/tmpa5a6699m.swift:15:20: error: cannot find 'digitToName'\
    \ in scope\n        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    \n    var result = [String]()\n    \n    for n in\
    \ arr {\n        switch n {\n        case 1:\n            result.append(contentsOf:\
    \ ones)\n        case 2:\n            result.append(contentsOf: twos)\n      \
    \  case 3:\n            result.append(contentsOf: threes)\n        case 4:\n \
    \           result.append(contentsOf: fours)\n        case 5:\n            result.append(contentsOf:\
    \ fives)\n        case 6:\n            result.append(contentsOf: sixes)\n    \
    \    case 7:\n            result.append(contentsOf: sevens)\n        case 8:\n\
    \            result.append(contentsOf: eights)\n        case 9:\n            result.append(contentsOf:\
    \ nines)\n        default:\n            break\n        }\n    }\n    \n    for\
    \ n in arr.reversed() {\n        switch n {\n        case 1:\n            result.append(contentsOf:\
    \ ones)\n        case 2:\n            result.append(contentsOf: twos)\n      \
    \  case 3:\n            result.append(contentsOf: threes)\n        case 4:\n \
    \           result.append(contentsOf: fours)\n        case 5:\n            result.append(contentsOf:\
    \ fives)\n        case 6:\n            result.append(contentsOf: sixes)\n    \
    \    case 7:\n            result.append(contentsOf: sevens)\n        case 8:\n\
    \            result.append(contentsOf: eights)\n        case 9:\n            result.append(contentsOf:\
    \ nines)\n        default:\n            break\n        }\n    }\n    \n    for\
    \ n in arr {\n        result.append(contentsOf: nameOf(n))\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq1pk7i6f.swift:16:39: error: cannot find 'ones' in scope\n    \
    \        result.append(contentsOf: ones)\n                                   \
    \   ^~~~\n/tmp/tmpq1pk7i6f.swift:18:39: error: cannot find 'twos' in scope\n \
    \           result.append(contentsOf: twos)\n                                \
    \      ^~~~\n/tmp/tmpq1pk7i6f.swift:20:39: error: cannot find 'threes' in scope\n\
    \            result.append(contentsOf: threes)\n                             \
    \         ^~~~~~\n/tmp/tmpq1pk7i6f.swift:22:39: error: cannot find 'fours' in\
    \ scope\n            result.append(contentsOf: fours)\n                      \
    \                ^~~~~\n/tmp/tmpq1pk7i6f.swift:24:39: error: cannot find 'fives'\
    \ in scope\n            result.append(contentsOf: fives)\n                   \
    \                   ^~~~~\n/tmp/tmpq1pk7i6f.swift:26:39: error: cannot find 'sixes'\
    \ in scope\n            result.append(contentsOf: sixes)\n                   \
    \                   ^~~~~\n/tmp/tmpq1pk7i6f.swift:28:39: error: cannot find 'sevens'\
    \ in scope\n            result.append(contentsOf: sevens)\n                  \
    \                    ^~~~~~\n/tmp/tmpq1pk7i6f.swift:30:39: error: cannot find\
    \ 'eights' in scope\n            result.append(contentsOf: eights)\n         \
    \                             ^~~~~~\n/tmp/tmpq1pk7i6f.swift:32:39: error: cannot\
    \ find 'nines' in scope\n            result.append(contentsOf: nines)\n      \
    \                                ^~~~~\n/tmp/tmpq1pk7i6f.swift:41:39: error: cannot\
    \ find 'ones' in scope\n            result.append(contentsOf: ones)\n        \
    \                              ^~~~\n/tmp/tmpq1pk7i6f.swift:43:39: error: cannot\
    \ find 'twos' in scope\n            result.append(contentsOf: twos)\n        \
    \                              ^~~~\n/tmp/tmpq1pk7i6f.swift:45:39: error: cannot\
    \ find 'threes' in scope\n            result.append(contentsOf: threes)\n    \
    \                                  ^~~~~~\n/tmp/tmpq1pk7i6f.swift:47:39: error:\
    \ cannot find 'fours' in scope\n            result.append(contentsOf: fours)\n\
    \                                      ^~~~~\n/tmp/tmpq1pk7i6f.swift:49:39: err"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let hundred = arr[10]\n    let\
    \ thousand = arr[11]\n    let ten_thousand = arr[12]\n    let hundred_thousand\
    \ = arr[13]\n    let thousand_thousand = arr[14]\n    let million = arr[15]\n\
    \    let billion = arr[16]\n    let trillion = arr[17]\n    let quadrillion =\
    \ arr[18]\n    let quintillion = arr[19]\n    let sextillion = arr[20]\n    let\
    \ septillion = arr[21]\n    let octillion = arr[22]\n    let nonillion = arr[23]\n\
    \    let decillion = arr[24]\n    let undecillion = arr[25]\n    let duodecillion\
    \ = arr[26]\n    let tredecillion = arr[27]\n    let quattuordecillion = arr[28]\n\
    \    let quindecillion = arr[29]\n    let sexdecillion = arr[30]\n    let septendecillion\
    \ = arr[31]\n    let octodecillion = arr[32]\n    let novemdecillion = arr[33]\n\
    \    let vigintillion = arr[34]\n    let centillion = arr[35]\n    let nonillion\
    \ = arr[36]\n    let undecillion = arr[37]\n    let duodecillion = arr[38]\n \
    \   let tredecillion = arr[39]\n    let quattuordecillion = arr[40]\n    let quindecillion\
    \ = arr[41]\n    let sexdecillion = arr[42]\n    let septendecillion = arr[43]\n\
    \    let octodecillion = arr[44]\n    let novemdecillion = arr[45]\n    let vigintillion\
    \ = arr[46]\n    let centillion = arr[47]\n    let nonillion = arr[48]\n    let\
    \ undecillion = arr[49]\n    let duodecillion = arr[50]\n    let tredecillion\
    \ = arr[51]\n    let quattuordecillion = arr[52]\n    let quindecillion = arr[53]\n\
    \    let sexdecillion = arr[54]\n    let septendecillion = arr[55\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzsv88xxq.swift:69:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmpzsv88xxq.swift:68:30: note: to match this opening '['\n    let septendecillion\
    \ = arr[55\n                             ^\n/tmp/tmpzsv88xxq.swift:49:9: error:\
    \ invalid redeclaration of 'nonillion'\n    let nonillion = arr[36]\n        ^\n\
    /tmp/tmpzsv88xxq.swift:36:9: note: 'nonillion' previously declared here\n    let\
    \ nonillion = arr[23]\n        ^\n/tmp/tmpzsv88xxq.swift:50:9: error: invalid\
    \ redeclaration of 'undecillion'\n    let undecillion = arr[37]\n        ^\n/tmp/tmpzsv88xxq.swift:38:9:\
    \ note: 'undecillion' previously declared here\n    let undecillion = arr[25]\n\
    \        ^\n/tmp/tmpzsv88xxq.swift:51:9: error: invalid redeclaration of 'duodecillion'\n\
    \    let duodecillion = arr[38]\n        ^\n/tmp/tmpzsv88xxq.swift:39:9: note:\
    \ 'duodecillion' previously declared here\n    let duodecillion = arr[26]\n  \
    \      ^\n/tmp/tmpzsv88xxq.swift:52:9: error: invalid redeclaration of 'tredecillion'\n\
    \    let tredecillion = arr[39]\n        ^\n/tmp/tmpzsv88xxq.swift:40:9: note:\
    \ 'tredecillion' previously declared here\n    let tredecillion = arr[27]\n  \
    \      ^\n/tmp/tmpzsv88xxq.swift:53:9: error: invalid redeclaration of 'quattuordecillion'\n\
    \    let quattuordecillion = arr[40]\n        ^\n/tmp/tmpzsv88xxq.swift:41:9:\
    \ note: 'quattuordecillion' previously declared here\n    let quattuordecillion\
    \ = arr[28]\n        ^\n/tmp/tmpzsv88xxq.swift:54:9: error: invalid redeclaration\
    \ of 'quindecillion'\n    let quindecillion = arr[41]\n        ^\n/tmp/tmpzsv88xxq.swift:42:9:\
    \ note: 'quindecillion' previously declared here\n    let quindecillion = arr[29]\n\
    \        ^\n/tmp/tmpzsv88xxq.swift:55:9: error: invalid redeclaration of 'sexdecillion'\n\
    \    let sexdecillion = arr[42]\n        ^\n/tmp/tmpzsv88xxq.swift:43:9: note:\
    \ 'sexdecillion' previously declared here\n    let sexdecillion = arr[30]\n  \
    \      ^\n/tmp/tmpzsv88xxq.swift:56:9: error: invalid redeclaration of 'septendecillion'\n\
    \    let septendecillion = arr[43]\n        ^\n/tmp/tmpzsv88xxq.swift:44:9: note:\
    \ 'septendecillion' previously declared here\n    let se"
  stdout: ''
  timestamp: 1660014344
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var last: Int = 0\n    for num in arr {\n        if num > 9 {\n  \
    \          last = num\n        } else {\n            if last != 0 {\n        \
    \        result.append(String(last))\n            }\n            result.append(String(num))\n\
    \            last = 0\n        }\n    }\n    if last != 0 {\n        result.append(String(last))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpe3gpc3ut/tmpe3gpc3ut.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcbd01dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcbcd14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcbcd14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcbcd137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3gpc3ut                        0x000055f33dcea8b1 <unavailable> + 6321

    5    libc.so.6                          0x00002abcbd209460 __libc_start_main +
    245

    6    tmpe3gpc3ut                        0x000055f33dcea359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for n in arr {\n        switch n {\n        case 1:\n            result.append(one)\n\
    \        case 2:\n            result.append(two)\n        case 3:\n          \
    \  result.append(three)\n        case 4:\n            result.append(four)\n  \
    \      case 5:\n            result.append(five)\n        case 6:\n           \
    \ result.append(six)\n        case 7:\n            result.append(seven)\n    \
    \    case 8:\n            result.append(eight)\n        case 9:\n            result.append(nine)\n\
    \        default:\n            break\n        }\n    }\n    for n in arr.reverse()\
    \ {\n        switch n {\n        case 1:\n            result.append(one)\n   \
    \     case 2:\n            result.append(two)\n        case 3:\n            result.append(three)\n\
    \        case 4:\n            result.append(four)\n        case 5:\n         \
    \   result.append(five)\n        case 6:\n            result.append(six)\n   \
    \     case 7:\n            result.append(seven)\n        case 8:\n           \
    \ result.append(eight)\n        case 9:\n            result.append(nine)\n   \
    \     default:\n            break\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptpeaeamy.swift:13:27: error: cannot find 'one' in scope\n     \
    \       result.append(one)\n                          ^~~\n/tmp/tmptpeaeamy.swift:15:27:\
    \ error: cannot find 'two' in scope\n            result.append(two)\n        \
    \                  ^~~\n/tmp/tmptpeaeamy.swift:17:27: error: cannot find 'three'\
    \ in scope\n            result.append(three)\n                          ^~~~~\n\
    /tmp/tmptpeaeamy.swift:19:27: error: cannot find 'four' in scope\n           \
    \ result.append(four)\n                          ^~~~\n/tmp/tmptpeaeamy.swift:21:27:\
    \ error: cannot find 'five' in scope\n            result.append(five)\n      \
    \                    ^~~~\n/tmp/tmptpeaeamy.swift:23:27: error: cannot find 'six'\
    \ in scope\n            result.append(six)\n                          ^~~\n/tmp/tmptpeaeamy.swift:25:27:\
    \ error: cannot find 'seven' in scope\n            result.append(seven)\n    \
    \                      ^~~~~\n/tmp/tmptpeaeamy.swift:27:27: error: cannot find\
    \ 'eight' in scope\n            result.append(eight)\n                       \
    \   ^~~~~\n/tmp/tmptpeaeamy.swift:29:27: error: cannot find 'nine' in scope\n\
    \            result.append(nine)\n                          ^~~~\n/tmp/tmptpeaeamy.swift:34:18:\
    \ error: for-in loop requires '()' to conform to 'Sequence'\n    for n in arr.reverse()\
    \ {\n             ~~~~^~~~~~~~~\n/tmp/tmptpeaeamy.swift:34:18: error: cannot use\
    \ mutating member on immutable value: 'arr' is a 'let' constant\n    for n in\
    \ arr.reverse() {\n             ~~~ ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let hundred = arr[10]\n    let\
    \ thousand = arr[11]\n    let ten_thousand = arr[12]\n    let hundred_thousand\
    \ = arr[13]\n    let thousand_thousand = arr[14]\n    let million = arr[15]\n\
    \    let billion = arr[16]\n    let trillion = arr[17]\n    let quadrillion =\
    \ arr[18]\n    let quintillion = arr[19]\n    let sextillion = arr[20]\n    let\
    \ septillion = arr[21]\n    let octillion = arr[22]\n    let nonillion = arr[23]\n\
    \    let decillion = arr[24]\n    let undecillion = arr[25]\n    let duodecillion\
    \ = arr[26]\n    let tredecillion = arr[27]\n    let quattuordecillion = arr[28]\n\
    \    let quindecillion = arr[29]\n    let sexdecillion = arr[30]\n    let septendecillion\
    \ = arr[31]\n    let octodecillion = arr[32]\n    let novemdecillion = arr[33]\n\
    \    let vigintillion = arr[34]\n    let unvigintillion = arr[35]\n    let duovigintillion\
    \ = arr[36]\n    let trevigintillion = arr[37]\n    let quattuorvigintillion =\
    \ arr[38]\n    let quinvigintillion = arr[39]\n    let sexvigintillion = arr[40]\n\
    \    let septenvigintillion = arr[41]\n    let octovigintillion = arr[42]\n  \
    \  let novemvigintillion = arr[43]\n    let vigintillion = arr[44]\n    let unvigintillion\
    \ = arr[45]\n    let duovigintillion = arr[46]\n    let trevigintillion = arr[47]\n\
    \    let quattuorvigintillion = arr[48]\n    let quinvigintillion = arr[49]\n\
    \    let sexvigintillion = arr[50]\n    let septenvigintillion = arr[51]\n\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5qn1ydqz.swift:57:9: error: invalid redeclaration of 'vigintillion'\n\
    \    let vigintillion = arr[44]\n        ^\n/tmp/tmp5qn1ydqz.swift:47:9: note:\
    \ 'vigintillion' previously declared here\n    let vigintillion = arr[34]\n  \
    \      ^\n/tmp/tmp5qn1ydqz.swift:58:9: error: invalid redeclaration of 'unvigintillion'\n\
    \    let unvigintillion = arr[45]\n        ^\n/tmp/tmp5qn1ydqz.swift:48:9: note:\
    \ 'unvigintillion' previously declared here\n    let unvigintillion = arr[35]\n\
    \        ^\n/tmp/tmp5qn1ydqz.swift:59:9: error: invalid redeclaration of 'duovigintillion'\n\
    \    let duovigintillion = arr[46]\n        ^\n/tmp/tmp5qn1ydqz.swift:49:9: note:\
    \ 'duovigintillion' previously declared here\n    let duovigintillion = arr[36]\n\
    \        ^\n/tmp/tmp5qn1ydqz.swift:60:9: error: invalid redeclaration of 'trevigintillion'\n\
    \    let trevigintillion = arr[47]\n        ^\n/tmp/tmp5qn1ydqz.swift:50:9: note:\
    \ 'trevigintillion' previously declared here\n    let trevigintillion = arr[37]\n\
    \        ^\n/tmp/tmp5qn1ydqz.swift:61:9: error: invalid redeclaration of 'quattuorvigintillion'\n\
    \    let quattuorvigintillion = arr[48]\n        ^\n/tmp/tmp5qn1ydqz.swift:51:9:\
    \ note: 'quattuorvigintillion' previously declared here\n    let quattuorvigintillion\
    \ = arr[38]\n        ^\n/tmp/tmp5qn1ydqz.swift:62:9: error: invalid redeclaration\
    \ of 'quinvigintillion'\n    let quinvigintillion = arr[49]\n        ^\n/tmp/tmp5qn1ydqz.swift:52:9:\
    \ note: 'quinvigintillion' previously declared here\n    let quinvigintillion\
    \ = arr[39]\n        ^\n/tmp/tmp5qn1ydqz.swift:63:9: error: invalid redeclaration\
    \ of 'sexvigintillion'\n    let sexvigintillion = arr[50]\n        ^\n/tmp/tmp5qn1ydqz.swift:53:9:\
    \ note: 'sexvigintillion' previously declared here\n    let sexvigintillion =\
    \ arr[40]\n        ^\n/tmp/tmp5qn1ydqz.swift:64:9: error: invalid redeclaration\
    \ of 'septenvigintillion'\n    let septenvigintillion = arr[51]\n        ^\n/tmp/tmp5qn1ydqz.swift:54:9:\
    \ note: 'septenvigintillion' previously declared here\n    let septenvigintillion\
    \ = arr[41]\n        ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var i = 0\n    while i < arr.count {\n        if arr[i] < min ||\
    \ arr[i] > max {\n            i += 1\n            continue\n        }\n      \
    \  let digit = arr[i] - min\n        let name = String(digit)\n        result.append(name)\n\
    \        i += 1\n    }\n    return result.reverse().map { String($0) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc5a3q86t.swift:26:29: error: value of tuple type '()' has no member\
    \ 'map'\n    return result.reverse().map { String($0) }\n           ~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = \"One\"\n \
    \   let two = \"Two\"\n    let three = \"Three\"\n    let four = \"Four\"\n  \
    \  let five = \"Five\"\n    let six = \"Six\"\n    let seven = \"Seven\"\n   \
    \ let eight = \"Eight\"\n    let nine = \"Nine\"\n    let ten = \"Ten\"\n    let\
    \ hundred = \"Hundred\"\n    let thousand = \"Thousand\"\n    let million = \"\
    Million\"\n    let billion = \"Billion\"\n    let trillion = \"Trillion\"\n  \
    \  let quadrillion = \"Quadrillion\"\n    let quintillion = \"Quintillion\"\n\
    \    let sextillion = \"Sextillion\"\n    let septillion = \"Septillion\"\n  \
    \  let octillion = \"Octillion\"\n    let nonillion = \"Nonillion\"\n    let decillion\
    \ = \"Decillion\"\n    let undecillion = \"Undecillion\"\n    let duodecillion\
    \ = \"Duodecillion\"\n    let tredecillion = \"Tredecillion\"\n    let quattuordecillion\
    \ = \"Quattuordecillion\"\n    let quindecillion = \"Quindecillion\"\n    let\
    \ sexdecillion = \"Sexdecillion\"\n    let septendecillion = \"Septendecillion\"\
    \n    let octodecillion = \"Octodecillion\"\n    let novemdecillion = \"Novemdecillion\"\
    \n    let vigintillion = \"Vigintillion\"\n    let unvigintillion = \"Unvigintillion\"\
    \n    let duovigintillion = \"Duovigintillion\"\n    let trevigintillion = \"\
    Trevigintillion\"\n    let quattuorvigintillion = \"Quattuorvigintillion\"\n \
    \   let quinvigintillion = \"Quinvigintillion\"\n    let sexvigintillion = \"\
    Sexvigintillion\"\n    let septenvigintillion = \"Septenvigintillion\"\n    let\
    \ octovigintillion = \"Octovigintillion\"\n    let novemvigintillion = \"Novemvigintilli\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9fowkklj.swift:53:29: error: unterminated string literal\n    let\
    \ novemvigintillion = \"Novemvigintilli\n                            ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        let digit = number % 10\n        let name =\
    \ digitToName(digit)\n        result.append(name)\n        number /= 10\n    }\n\
    \    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6_d8sroa.swift:12:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmp6_d8sroa.swift:14:16:\
    \ error: left side of mutating operator isn't mutable: 'number' is a 'let' constant\n\
    \        number /= 10\n        ~~~~~~ ^\n/tmp/tmp6_d8sroa.swift:16:19: error:\
    \ cannot convert return expression of type '()' to return type '[String]'\n  \
    \  return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for n in arr {\n        if n >= 1 && n <= 9 {\n            result.append(nameOf(n))\n\
    \        }\n    }\n    return result.reverse().map { $0.replaceFirst(\"^[0-9]\"\
    , \"\") }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp086yrl17.swift:12:27: error: cannot find 'nameOf' in scope\n  \
    \          result.append(nameOf(n))\n                          ^~~~~~\n/tmp/tmp086yrl17.swift:15:29:\
    \ error: value of tuple type '()' has no member 'map'\n    return result.reverse().map\
    \ { $0.replaceFirst(\"^[0-9]\", \"\") }\n           ~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    var index = 0\n    for element in arr {\n        if element > 9 {\n\
    \            element = element - 10\n        }\n        result[index] = names[element]\n\
    \        index++\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjmuzw1xw.swift:13:13: error: cannot assign to value: 'element'\
    \ is a 'let' constant\n            element = element - 10\n            ^~~~~~~\n\
    /tmp/tmpjmuzw1xw.swift:15:25: error: cannot find 'names' in scope\n        result[index]\
    \ = names[element]\n                        ^~~~~\n/tmp/tmpjmuzw1xw.swift:16:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var min = arr[0]\n  \
    \  var max = arr[0]\n    for num in arr {\n        if num < min {\n          \
    \  min = num\n        } else if num > max {\n            max = num\n        }\n\
    \    }\n    var reversed = [Int]()\n    for num in arr {\n        reversed.append(num\
    \ - min)\n    }\n    for num in reversed {\n        let index = reversed.index(of:\
    \ num)\n        if index != nil {\n            result.append(reversed[index!])\n\
    \        }\n    }\n    for num in result {\n        let index = result.index(of:\
    \ num)\n        if index != nil {\n            result[index!] = names[num]\n \
    \       }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfiecoenu.swift:27:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: num)\n        \
    \                     ^\n/tmp/tmpfiecoenu.swift:27:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: num)\n                     \
    \        ^~~~~\n                             firstIndex\n/tmp/tmpfiecoenu.swift:29:35:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String'\n\
    \            result.append(reversed[index!])\n                               \
    \   ^\n/tmp/tmpfiecoenu.swift:33:28: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = result.index(of: num)\n          \
    \                 ^\n/tmp/tmpfiecoenu.swift:33:28: note: use 'firstIndex(of:)'\
    \ instead\n        let index = result.index(of: num)\n                       \
    \    ^~~~~\n                           firstIndex\n/tmp/tmpfiecoenu.swift:35:30:\
    \ error: cannot find 'names' in scope\n            result[index!] = names[num]\n\
    \                             ^~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = Int(One)\n\
    \    let ten = Int(Ten)\n    let hundred = Int(Hundred)\n    let thousand = Int(Thousand)\n\
    \    let million = Int(Million)\n    let billion = Int(Billion)\n    let trillion\
    \ = Int(Trillion)\n    let quadrillion = Int(Quadrillion)\n    let quintillion\
    \ = Int(Quintillion)\n    let sextillion = Int(Sextillion)\n    let septillion\
    \ = Int(Septillion)\n    let octillion = Int(Octillion)\n    let nonillion = Int(Nonillion)\n\
    \    let decillion = Int(Decillion)\n    let undecillion = Int(Undecillion)\n\
    \    let duodecillion = Int(Duodecillion)\n    let tredecillion = Int(Tredecillion)\n\
    \    let quattuordecillion = Int(Quattuordecillion)\n    let quindecillion = Int(Quindecillion)\n\
    \    let sexdecillion = Int(Sexdecillion)\n    let septendecillion = Int(Septendecillion)\n\
    \    let octodecillion = Int(Octodecillion)\n    let novemdecillion = Int(Novemdecillion)\n\
    \    let vigintillion = Int(Vigintillion)\n    let unvigintillion = Int(Unvigintillion)\n\
    \    let duovigintillion = Int(Duovigintillion)\n    let trevigintillion = Int(Trevigintillion)\n\
    \    let quattuorvigintillion = Int(Quattuorvigintillion)\n    let quinvigintillion\
    \ = Int(Quinvigintillion)\n    let sexvigintillion = Int(Sexvigintillion)\n  \
    \  let septenvigintillion = Int(Septenvigintillion)\n    let octovigintillion\
    \ = Int(Octovigintillion)\n    let novemvigintillion = Int(Novemvigintillion)\n\
    \    let novemvigintillion = Int(Novemvigintillion)\n    let novemvigintillion\
    \ = Int(Novemvigintillion)\n    let novemvigintillion = Int(Novemvigintil\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgsaj7q30.swift:49:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpgsaj7q30.swift:48:32: note: to match this opening '('\n    let novemvigintillion\
    \ = Int(Novemvigintil\n                               ^\n/tmp/tmpgsaj7q30.swift:13:19:\
    \ error: cannot find 'One' in scope\n    let one = Int(One)\n                \
    \  ^~~\n/tmp/tmpgsaj7q30.swift:14:19: error: cannot find 'Ten' in scope\n    let\
    \ ten = Int(Ten)\n                  ^~~\n/tmp/tmpgsaj7q30.swift:15:23: error:\
    \ cannot find 'Hundred' in scope\n    let hundred = Int(Hundred)\n           \
    \           ^~~~~~~\n/tmp/tmpgsaj7q30.swift:16:24: error: cannot find 'Thousand'\
    \ in scope\n    let thousand = Int(Thousand)\n                       ^~~~~~~~\n\
    /tmp/tmpgsaj7q30.swift:17:23: error: cannot find 'Million' in scope\n    let million\
    \ = Int(Million)\n                      ^~~~~~~\n/tmp/tmpgsaj7q30.swift:18:23:\
    \ error: cannot find 'Billion' in scope\n    let billion = Int(Billion)\n    \
    \                  ^~~~~~~\n/tmp/tmpgsaj7q30.swift:19:24: error: cannot find 'Trillion'\
    \ in scope\n    let trillion = Int(Trillion)\n                       ^~~~~~~~\n\
    /tmp/tmpgsaj7q30.swift:20:27: error: cannot find 'Quadrillion' in scope\n    let\
    \ quadrillion = Int(Quadrillion)\n                          ^~~~~~~~~~~\n/tmp/tmpgsaj7q30.swift:21:27:\
    \ error: cannot find 'Quintillion' in scope\n    let quintillion = Int(Quintillion)\n\
    \                          ^~~~~~~~~~~\n/tmp/tmpgsaj7q30.swift:22:26: error: cannot\
    \ find 'Sextillion' in scope\n    let sextillion = Int(Sextillion)\n         \
    \                ^~~~~~~~~~\n/tmp/tmpgsaj7q30.swift:23:26: error: cannot find\
    \ 'Septillion' in scope\n    let septillion = Int(Septillion)\n              \
    \           ^~~~~~~~~~\n/tmp/tmpgsaj7q30.swift:24:25: error: cannot find 'Octillion'\
    \ in scope\n    let octillion = Int(Octillion)\n                        ^~~~~~~~~\n\
    /tmp/tmpgsaj7q30.swift:25:25: error: cannot find 'Nonillion' in scope\n    let\
    \ nonillion = Int(Nonillion)\n                        ^~~~~~~~~\n/tmp/tmpgsaj7q30.swift:26:25:\
    \ error: cannot find 'Decillion' in scope\n    let decillion = Int(Deci"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    for num\
    \ in arr {\n        if num < 1 || num > 9 {\n            continue\n        }\n\
    \        let digit = String(num)\n        result.append(digit)\n        if i ==\
    \ 0 {\n            result.append(One)\n        }\n        if i == 1 {\n      \
    \      result.append(Two)\n        }\n        if i == 2 {\n            result.append(Three)\n\
    \        }\n        if i == 3 {\n            result.append(Four)\n        }\n\
    \        if i == 4 {\n            result.append(Five)\n        }\n        if i\
    \ == 5 {\n            result.append(Six)\n        }\n        if i == 6 {\n   \
    \         result.append(Seven)\n        }\n        if i == 7 {\n            result.append(Eight)\n\
    \        }\n        if i == 8 {\n            result.append(Nine)\n        }\n\
    \        i += 1\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq9_r6nuk.swift:21:27: error: cannot find 'One' in scope\n     \
    \       result.append(One)\n                          ^~~\n/tmp/tmpq9_r6nuk.swift:24:27:\
    \ error: cannot find 'Two' in scope\n            result.append(Two)\n        \
    \                  ^~~\n/tmp/tmpq9_r6nuk.swift:27:27: error: cannot find 'Three'\
    \ in scope\n            result.append(Three)\n                          ^~~~~\n\
    /tmp/tmpq9_r6nuk.swift:30:27: error: cannot find 'Four' in scope\n           \
    \ result.append(Four)\n                          ^~~~\n/tmp/tmpq9_r6nuk.swift:33:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five)\n      \
    \                    ^~~~\n/tmp/tmpq9_r6nuk.swift:36:27: error: cannot find 'Six'\
    \ in scope\n            result.append(Six)\n                          ^~~\n/tmp/tmpq9_r6nuk.swift:39:27:\
    \ error: cannot find 'Seven' in scope\n            result.append(Seven)\n    \
    \                      ^~~~~\n/tmp/tmpq9_r6nuk.swift:42:27: error: cannot find\
    \ 'Eight' in scope\n            result.append(Eight)\n                       \
    \   ^~~~~\n/tmp/tmpq9_r6nuk.swift:45:27: error: cannot find 'Nine' in scope\n\
    \            result.append(Nine)\n                          ^~~~\n/tmp/tmpq9_r6nuk.swift:49:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    \n    if arr.isEmpty {\n        return result\n    }\n    \n    let one =\
    \ Int(One)\n    let two = Int(Two)\n    let three = Int(Three)\n    let four =\
    \ Int(Four)\n    let five = Int(Five)\n    let six = Int(Six)\n    let seven =\
    \ Int(Seven)\n    let eight = Int(Eight)\n    let nine = Int(Nine)\n    \n   \
    \ let minLength = min(arr.count, 9)\n    \n    for i in 0..<minLength {\n    \
    \    let value = arr[i]\n        \n        if value < one {\n            result.append(One)\n\
    \        } else if value < two {\n            result.append(Two)\n        } else\
    \ if value < three {\n            result.append(Three)\n        } else if value\
    \ < four {\n            result.append(Four)\n        } else if value < five {\n\
    \            result.append(Five)\n        } else if value < six {\n          \
    \  result.append(Six)\n        } else if value < seven {\n            result.append(Seven)\n\
    \        } else if value < eight {\n            result.append(Eight)\n       \
    \ } else if value < nine {\n            result.append(Nine)\n        } else {\n\
    \            result.append(value)\n        }\n    }\n    \n    for i in minLength..<arr.count\
    \ {\n        let value = arr[i]\n        \n        if value > one {\n        \
    \    result.append(One)\n        } else if value > two {\n            result.append(Two)\n\
    \        } else if value > three {\n            result.append(Three)\n       \
    \ } else if value > four {\n            result.append(Four)\n        } else if\
    \ value > five {\n            result.append(Five)\n        } else if value > six\
    \ {\n            result.append(Six)\n        } else if value > seven {\n     \
    \       result.append(Seven)\n        } else if value > eight {\n            result.append(Eight)\n\
    \        } else if value > nine {\n            result.append(Nine)\n        }\
    \ else {\n            result.append(value)\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp28qm6t8x.swift:15:19: error: cannot find 'One' in scope\n    let\
    \ one = Int(One)\n                  ^~~\n/tmp/tmp28qm6t8x.swift:16:19: error:\
    \ cannot find 'Two' in scope\n    let two = Int(Two)\n                  ^~~\n\
    /tmp/tmp28qm6t8x.swift:17:21: error: cannot find 'Three' in scope\n    let three\
    \ = Int(Three)\n                    ^~~~~\n/tmp/tmp28qm6t8x.swift:18:20: error:\
    \ cannot find 'Four' in scope\n    let four = Int(Four)\n                   ^~~~\n\
    /tmp/tmp28qm6t8x.swift:19:20: error: cannot find 'Five' in scope\n    let five\
    \ = Int(Five)\n                   ^~~~\n/tmp/tmp28qm6t8x.swift:20:19: error: cannot\
    \ find 'Six' in scope\n    let six = Int(Six)\n                  ^~~\n/tmp/tmp28qm6t8x.swift:21:21:\
    \ error: cannot find 'Seven' in scope\n    let seven = Int(Seven)\n          \
    \          ^~~~~\n/tmp/tmp28qm6t8x.swift:22:21: error: cannot find 'Eight' in\
    \ scope\n    let eight = Int(Eight)\n                    ^~~~~\n/tmp/tmp28qm6t8x.swift:23:20:\
    \ error: cannot find 'Nine' in scope\n    let nine = Int(Nine)\n             \
    \      ^~~~\n/tmp/tmp28qm6t8x.swift:31:27: error: cannot find 'One' in scope\n\
    \            result.append(One)\n                          ^~~\n/tmp/tmp28qm6t8x.swift:33:27:\
    \ error: cannot find 'Two' in scope\n            result.append(Two)\n        \
    \                  ^~~\n/tmp/tmp28qm6t8x.swift:35:27: error: cannot find 'Three'\
    \ in scope\n            result.append(Three)\n                          ^~~~~\n\
    /tmp/tmp28qm6t8x.swift:37:27: error: cannot find 'Four' in scope\n           \
    \ result.append(Four)\n                          ^~~~\n/tmp/tmp28qm6t8x.swift:39:27:\
    \ error: cannot find 'Five' in scope\n            result.append(Five)\n      \
    \                    ^~~~\n/tmp/tmp28qm6t8x.swift:41:27: error: cannot find 'Six'\
    \ in scope\n            result.append(Six)\n                          ^~~\n/tmp/tmp28qm6t8x.swift:43:27:\
    \ error: cannot find 'Seven' in scope\n            result.append(Seven)\n    \
    \                      ^~~~~\n/tmp/tmp28qm6t8x.swift:45:27: error: cannot find\
    \ 'Eight' in scope\n            result.append(Eight)\n                       \
    \   ^~~~"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    \n    if arr.isEmpty {\n        return result\n    }\n    \n    let min =\
    \ arr[0]\n    let max = arr[arr.count - 1]\n    \n    if min < 1 || max < 1 ||\
    \ min > 9 || max > 9 {\n        return result\n    }\n    \n    var i = 0\n  \
    \  var j = 0\n    \n    for j in 0..<arr.count {\n        if arr[j] == min {\n\
    \            i += 1\n        }\n        if arr[j] == max {\n            i -= 1\n\
    \        }\n    }\n    \n    for j in 0..<arr.count {\n        if arr[j] < min\
    \ {\n            arr[j] = 9\n        }\n        if arr[j] > max {\n          \
    \  arr[j] = 9\n        }\n    }\n    \n    for j in 0..<arr.count {\n        if\
    \ arr[j] == 9 {\n            result.append(names[j])\n        }\n    }\n    \n\
    \    for j in 0..<arr.count {\n        if arr[j] == 9 {\n            arr[j] =\
    \ names[j].characters.last!\n        }\n    }\n    \n    for j in 0..<arr.count\
    \ {\n        if arr[j] == min {\n            arr[j] = 1\n        }\n        if\
    \ arr[j] == max {\n            arr[j] = 9\n        }\n    }\n    \n    for j in\
    \ 0..<arr.count {\n        if arr[j] < min {\n            arr[j] += 1\n      \
    \  }\n        if arr[j] > max {\n            arr[j] -= 1\n        }\n    }\n \
    \   \n    for j in 0..<arr.count {\n        if arr[j] == 1 {\n            result.append(names[j])\n\
    \        }\n    }\n    \n    for j in 0..<arr.count {\n        if arr[j] == 1\
    \ {\n            arr[j] = names[j].characters.first!\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptwuuv165.swift:36:16: error: cannot assign through subscript: 'arr'\
    \ is a 'let' constant\n            arr[j] = 9\n            ~~~^\n/tmp/tmptwuuv165.swift:39:16:\
    \ error: cannot assign through subscript: 'arr' is a 'let' constant\n        \
    \    arr[j] = 9\n            ~~~^\n/tmp/tmptwuuv165.swift:45:27: error: cannot\
    \ find 'names' in scope\n            result.append(names[j])\n               \
    \           ^~~~~\n/tmp/tmptwuuv165.swift:51:22: error: cannot find 'names' in\
    \ scope\n            arr[j] = names[j].characters.last!\n                    \
    \ ^~~~~\n/tmp/tmptwuuv165.swift:51:16: error: cannot assign through subscript:\
    \ 'arr' is a 'let' constant\n            arr[j] = names[j].characters.last!\n\
    \            ~~~^\n/tmp/tmptwuuv165.swift:57:16: error: cannot assign through\
    \ subscript: 'arr' is a 'let' constant\n            arr[j] = 1\n            ~~~^\n\
    /tmp/tmptwuuv165.swift:60:16: error: cannot assign through subscript: 'arr' is\
    \ a 'let' constant\n            arr[j] = 9\n            ~~~^\n/tmp/tmptwuuv165.swift:66:20:\
    \ error: left side of mutating operator isn't mutable: 'arr' is a 'let' constant\n\
    \            arr[j] += 1\n            ~~~    ^\n/tmp/tmptwuuv165.swift:69:20:\
    \ error: left side of mutating operator isn't mutable: 'arr' is a 'let' constant\n\
    \            arr[j] -= 1\n            ~~~    ^\n/tmp/tmptwuuv165.swift:75:27:\
    \ error: cannot find 'names' in scope\n            result.append(names[j])\n \
    \                         ^~~~~\n/tmp/tmptwuuv165.swift:81:22: error: cannot find\
    \ 'names' in scope\n            arr[j] = names[j].characters.first!\n        \
    \             ^~~~~\n/tmp/tmptwuuv165.swift:81:16: error: cannot assign through\
    \ subscript: 'arr' is a 'let' constant\n            arr[j] = names[j].characters.first!\n\
    \            ~~~^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    let len = arr.count\n    for i in 0..<len {\n        let num =\
    \ arr[i]\n        if num < min || num > max {\n            continue\n        }\n\
    \        let digit = num - min\n        let name = digitToName(digit)\n      \
    \  result.append(name)\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmo_06ivr.swift:22:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmpmo_06ivr.swift:25:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr.min()!\n\
    \    let max = arr.max()!\n    if min == max {\n        return arr\n    }\n  \
    \  let one = String(format: \"%d\\r\\n\", min)\n    let two = String(format: \"\
    %d\\r\\n\", max)\n    let three = String(format: \"%d\\r\\n\", min * 10)\n   \
    \ let four = String(format: \"%d\\r\\n\", max * 10)\n    let five = String(format:\
    \ \"%d\\r\\n\", min * 100)\n    let six = String(format: \"%d\\r\\n\", max * 100)\n\
    \    let seven = String(format: \"%d\\r\\n\", min * 1000)\n    let eight = String(format:\
    \ \"%d\\r\\n\", max * 1000)\n    let nine = String(format: \"%d\\r\\n\", min *\
    \ 10000)\n    let ten = String(format: \"%d\\r\\n\", max * 10000)\n    let hundred\
    \ = String(format: \"%d\\r\\n\", min * 100000)\n    let thousand = String(format:\
    \ \"%d\\r\\n\", max * 100000)\n    let tenThousand = String(format: \"%d\\r\\\
    n\", min * 1000000)\n    let hundredThousand = String(format: \"%d\\r\\n\", max\
    \ * 1000000)\n    let million = String(format: \"%d\\r\\n\", min * 10000000)\n\
    \    let billion = String(format: \"%d\\r\\n\", max * 10000000)\n    let trillion\
    \ = String(format: \"%d\\r\\n\", min * 100000000)\n    let quadrillion = String(format:\
    \ \"%d\\r\\n\", max * 100000000)\n    let quintillion = String(format: \"%d\\\
    r\\n\", min * 1000000000)\n    let sextillion = String(format: \"%d\\r\\n\", max\
    \ * 1000000000)\n    let septillion = String(format: \"%d\\r\\n\", min * 10000000000)\n\
    \    let octillion = String(format: \"%d\\r\\n\", max * 10000000000)\n    let\
    \ nonillion = String(format: \"%d\\r\\n\", min * 100000000000)\n    let decillion\
    \ = String(format: \"%d\\r\\n\", max * 100000000000)\n    let undecillion = String(format:\
    \ \"%d\\r\\n\", min * 1000000000000)\n    let duodecillion = String(format: \"\
    %d\\r\\n\", max * 1000000000000)\n    let tredecillion = String(format: \"%d\\\
    r\\n\", min * 10000000000000)\n    let quattuordecillion = String(format: \"%d\\\
    r\\n\", max * 10000000000000)\n    let sexdecillion = String(format: \"%d\\\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpezkpdayl.swift:46:43: error: invalid escape sequence in literal\n\
    \    let sexdecillion = String(format: \"%d\\\n                              \
    \            ^\n/tmp/tmpezkpdayl.swift:46:39: error: unterminated string literal\n\
    \    let sexdecillion = String(format: \"%d\\\n                              \
    \        ^\n/tmp/tmpezkpdayl.swift:16:16: error: cannot convert return expression\
    \ of type '[Int]' to return type '[String]'\n        return arr\n            \
    \   ^\n/tmp/tmpezkpdayl.swift:16:16: note: arguments to generic parameter 'Element'\
    \ ('Int' and 'String') are expected to be equal\n        return arr\n        \
    \       ^\n/tmp/tmpezkpdayl.swift:18:21: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n    let one = String(format:\
    \ \"%d\\r\\n\", min)\n                    ^~~~~~~\n                     repeating\
    \         count: \n/tmp/tmpezkpdayl.swift:19:21: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    let two = String(format:\
    \ \"%d\\r\\n\", max)\n                    ^~~~~~~\n                     repeating\
    \         count: \n/tmp/tmpezkpdayl.swift:20:23: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    let three = String(format:\
    \ \"%d\\r\\n\", min * 10)\n                      ^~~~~~~\n                   \
    \    repeating         count: \n/tmp/tmpezkpdayl.swift:21:22: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  let four = String(format: \"%d\\r\\n\", max * 10)\n                     ^~~~~~~\n\
    \                      repeating         count: \n/tmp/tmpezkpdayl.swift:22:22:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let five = String(format: \"%d\\r\\n\", min * 100)\n                    \
    \ ^~~~~~~\n                      repeating         count: \n/tmp/tmpezkpdayl.swift:23:21:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let six = String(format: \"%d\\r\\n\", max * 100)\n                    ^~~~~~~\n\
    \                   "
  stdout: ''
  timestamp: 1660014346
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let ones = arr.filter{ $0 <= 1 }\n    let tens = arr.filter{\
    \ $0 >= 10 }\n    let hundreds = arr.filter{ $0 >= 100 }\n    let thousands =\
    \ arr.filter{ $0 >= 1000 }\n    let millions = arr.filter{ $0 >= 1000000 }\n \
    \   let billions = arr.filter{ $0 >= 1000000000 }\n    let trillions = arr.filter{\
    \ $0 >= 1000000000000 }\n    let quadrillions = arr.filter{ $0 >= 1000000000000000\
    \ }\n    let quintillions = arr.filter{ $0 >= 1000000000000000000 }\n    let sextillions\
    \ = arr.filter{ $0 >= 1000000000000000000000 }\n    let septillions = arr.filter{\
    \ $0 >= 1000000000000000000000000 }\n    let octillions = arr.filter{ $0 >= 1000000000000000000000000000\
    \ }\n    let nonillions = arr.filter{ $0 >= 1000000000000000000000000000000 }\n\
    \    let decillions = arr.filter{ $0 >= 1000000000000000000000000000000000 }\n\
    \    let undecillions = arr.filter{ $0 >= 10000000000000000000000000000000001\
    \ }\n    let decillionsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let onesReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let tensReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let hundredsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let thousandsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let millionsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let billionsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let trillionsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let quadrillionsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let quintillionsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let sextillionsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let septillionsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let octillionsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let nonillionsReversed = arr.filter{ $0 <= 10000000000000000000000000000000001\
    \ }\n    let \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp36vhery9.swift:39:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmp36vhery9.swift:10:9: warning: initialization of immutable value 'ones'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let ones = arr.filter{ $0 <= 1 }\n    ~~~~^~~~\n    _\n/tmp/tmp36vhery9.swift:11:9:\
    \ warning: initialization of immutable value 'tens' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let tens = arr.filter{ $0 >= 10 }\n\
    \    ~~~~^~~~\n    _\n/tmp/tmp36vhery9.swift:12:9: warning: initialization of\
    \ immutable value 'hundreds' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let hundreds = arr.filter{ $0 >= 100 }\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp36vhery9.swift:13:9: warning: initialization of immutable value\
    \ 'thousands' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let thousands = arr.filter{ $0 >= 1000 }\n    ~~~~^~~~~~~~~\n    _\n\
    /tmp/tmp36vhery9.swift:14:9: warning: initialization of immutable value 'millions'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let millions = arr.filter{ $0 >= 1000000 }\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp36vhery9.swift:15:9:\
    \ warning: initialization of immutable value 'billions' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let billions = arr.filter{\
    \ $0 >= 1000000000 }\n    ~~~~^~~~~~~~\n    _\n/tmp/tmp36vhery9.swift:16:9: warning:\
    \ initialization of immutable value 'trillions' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let trillions = arr.filter{ $0 >=\
    \ 1000000000000 }\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp36vhery9.swift:17:9: warning:\
    \ initialization of immutable value 'quadrillions' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let quadrillions = arr.filter{ $0\
    \ >= 1000000000000000 }\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp36vhery9.swift:18:9:\
    \ warning: initialization of immutable value 'quintillions' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let quintil"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    if arr.isEmpty {\n        return result\n    }\n    var max: Int =\
    \ 9\n    for num in arr {\n        if num > max {\n            max = num\n   \
    \     }\n    }\n    for num in arr {\n        if num > max {\n            continue\n\
    \        }\n        if num < 1 {\n            continue\n        }\n        if\
    \ num < 10 {\n            result.append(String(num))\n            continue\n \
    \       }\n        let digit = String(num)\n        let index = Int(digit)\n \
    \       if index == 0 {\n            result.append(String(1))\n            continue\n\
    \        }\n        if index == 1 {\n            result.append(String(2))\n  \
    \          continue\n        }\n        if index == 2 {\n            result.append(String(3))\n\
    \            continue\n        }\n        if index == 3 {\n            result.append(String(4))\n\
    \            continue\n        }\n        if index == 4 {\n            result.append(String(5))\n\
    \            continue\n        }\n        if index == 5 {\n            result.append(String(6))\n\
    \            continue\n        }\n        if index == 6 {\n            result.append(String(7))\n\
    \            continue\n        }\n        if index == 7 {\n            result.append(String(8))\n\
    \            continue\n        }\n        if index == 8 {\n            result.append(String(9))\n\
    \            continue\n        }\n        if index == 9 {\n            result.append(String(10))\n\
    \            continue\n        }\n    }\n    return result.reverse()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf1kdsuqt.swift:73:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    \n    if arr.isEmpty {\n        return result\n    }\n    \n    let one =\
    \ Int(One)\n    let two = Int(Two)\n    let three = Int(Three)\n    let four =\
    \ Int(Four)\n    let five = Int(Five)\n    let six = Int(Six)\n    let seven =\
    \ Int(Seven)\n    let eight = Int(Eight)\n    let nine = Int(Nine)\n    \n   \
    \ let minLength = min(arr.count, 9)\n    \n    for index in 0..<minLength {\n\
    \        let value = arr[index]\n        \n        if value < one {\n        \
    \    result.append(String(value))\n        } else if value < two {\n         \
    \   result.append(String(value) + One)\n        } else if value < three {\n  \
    \          result.append(String(value) + Two)\n        } else if value < four\
    \ {\n            result.append(String(value) + Three)\n        } else if value\
    \ < five {\n            result.append(String(value) + Four)\n        } else if\
    \ value < six {\n            result.append(String(value) + Five)\n        } else\
    \ if value < seven {\n            result.append(String(value) + Six)\n       \
    \ } else if value < eight {\n            result.append(String(value) + Seven)\n\
    \        } else if value < nine {\n            result.append(String(value) + Eight)\n\
    \        } else {\n            result.append(String(value) + Nine)\n        }\n\
    \    }\n    \n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg3b4x3zr.swift:15:19: error: cannot find 'One' in scope\n    let\
    \ one = Int(One)\n                  ^~~\n/tmp/tmpg3b4x3zr.swift:16:19: error:\
    \ cannot find 'Two' in scope\n    let two = Int(Two)\n                  ^~~\n\
    /tmp/tmpg3b4x3zr.swift:17:21: error: cannot find 'Three' in scope\n    let three\
    \ = Int(Three)\n                    ^~~~~\n/tmp/tmpg3b4x3zr.swift:18:20: error:\
    \ cannot find 'Four' in scope\n    let four = Int(Four)\n                   ^~~~\n\
    /tmp/tmpg3b4x3zr.swift:19:20: error: cannot find 'Five' in scope\n    let five\
    \ = Int(Five)\n                   ^~~~\n/tmp/tmpg3b4x3zr.swift:20:19: error: cannot\
    \ find 'Six' in scope\n    let six = Int(Six)\n                  ^~~\n/tmp/tmpg3b4x3zr.swift:21:21:\
    \ error: cannot find 'Seven' in scope\n    let seven = Int(Seven)\n          \
    \          ^~~~~\n/tmp/tmpg3b4x3zr.swift:22:21: error: cannot find 'Eight' in\
    \ scope\n    let eight = Int(Eight)\n                    ^~~~~\n/tmp/tmpg3b4x3zr.swift:23:20:\
    \ error: cannot find 'Nine' in scope\n    let nine = Int(Nine)\n             \
    \      ^~~~\n/tmp/tmpg3b4x3zr.swift:33:43: error: cannot find 'One' in scope\n\
    \            result.append(String(value) + One)\n                            \
    \              ^~~\n/tmp/tmpg3b4x3zr.swift:35:43: error: cannot find 'Two' in\
    \ scope\n            result.append(String(value) + Two)\n                    \
    \                      ^~~\n/tmp/tmpg3b4x3zr.swift:37:43: error: cannot find 'Three'\
    \ in scope\n            result.append(String(value) + Three)\n               \
    \                           ^~~~~\n/tmp/tmpg3b4x3zr.swift:39:43: error: cannot\
    \ find 'Four' in scope\n            result.append(String(value) + Four)\n    \
    \                                      ^~~~\n/tmp/tmpg3b4x3zr.swift:41:43: error:\
    \ cannot find 'Five' in scope\n            result.append(String(value) + Five)\n\
    \                                          ^~~~\n/tmp/tmpg3b4x3zr.swift:43:43:\
    \ error: cannot find 'Six' in scope\n            result.append(String(value) +\
    \ Six)\n                                          ^~~\n/tmp/tmpg3b4x3zr.swift:45:43:\
    \ error: cannot find 'Seven' in scope\n  "
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 }\n    let tensReversed = tens.reverse()\n    let tensReversedStrings\
    \ = tensReversed.map { String($0) }\n    let tensReversedStringsSorted = tensReversedStrings.sorted()\n\
    \    let tensReversedStringsSortedStrings = tensReversedStringsSorted.map { String($0)\
    \ }\n    let tensReversedStringsSortedStringsReversed = tensReversedStringsSortedStrings.reverse()\n\
    \    let tensReversedStringsSortedStringsReversedStrings = tensReversedStringsSortedStringsReversed.map\
    \ { String($0) }\n    let tensReversedStringsSortedStringsReversedStringsReversed\
    \ = tensReversedStringsSortedStringsReversedStrings.reverse()\n    let tensReversedStringsSortedStringsReversedStringsReversedStrings\
    \ = tensReversedStringsSortedStringsReversedStringsReversed.map { String($0) }\n\
    \    let tensReversedStringsSortedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsSortedStringsReversedStringsReversedStrings.reverse()\n\
    \    let tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStrings.reverse()\n\
    \    let tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversed.map\
    \ { String($0) }\n    let tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed.map\
    \ { String($0) }\n    let tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed.map\
    \ { String($0) }\n    let tensReversed\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmt5al6jt.swift:12:29: error: cannot use mutating member on immutable\
    \ value: 'tens' is a 'let' constant\n    let tensReversed = tens.reverse()\n \
    \                      ~~~~ ^\n/tmp/tmpmt5al6jt.swift:11:5: note: change 'let'\
    \ to 'var' to make it mutable\n    let tens = arr.filter{ $0 >= 10 }\n    ^~~\n\
    \    var\n/tmp/tmpmt5al6jt.swift:21:97: error: cannot find 'tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStrings'\
    \ in scope\n    let tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStrings.reverse()\n\
    \                                                                            \
    \                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmt5al6jt.swift:23:112: error: use of local variable 'tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed'\
    \ before its declaration\n    let tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed.map\
    \ { String($0) }\n                                                           \
    \                                                    ^\n/tmp/tmpmt5al6jt.swift:23:9:\
    \ note: 'tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed'\
    \ declared here\n    let tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed.map\
    \ { String($0) }\n        ^\n/tmp/tmpmt5al6jt.swift:24:127: error: use of local\
    \ variable 'tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed'\
    \ before its declaration\n    let tensReversedStringsSortedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReve"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let eleven = arr[10]\n    let\
    \ twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen = arr[13]\n \
    \   let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen = arr[16]\n\
    \    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty = arr[19]\n\
    \    let thirty = arr[20]\n    let forty = arr[21]\n    let fifty = arr[22]\n\
    \    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty = arr[25]\n\
    \    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand = arr[28]\n\
    \    let million = arr[29]\n    let billion = arr[30]\n    let trillion = arr[31]\n\
    \    let onehundred = arr[32]\n    let onethousand = arr[33]\n    let onemillion\
    \ = arr[34]\n    let onebillion = arr[35]\n    let onetrillion = arr[36]\n   \
    \ let onehundredandone = arr[37]\n    let onethousandandone = arr[38]\n    let\
    \ onemillionandone = arr[39]\n    let onebillionandone = arr[40]\n    let onetrillionandone\
    \ = arr[41]\n    let onehundredandoneandone = arr[42]\n    let onethousandandoneandone\
    \ = arr[43]\n    let onemillionandoneandone = arr[44]\n    let onebillionandoneandone\
    \ = arr[45]\n    let onetrillionandoneandone = arr[46]\n    let onehundredandoneandoneandone\
    \ = arr[47]\n    let onethousandandoneandoneandone = arr[48]\n    let onemillionandoneandoneandone\
    \ = arr[49]\n    let onebillionandoneandoneandone = arr[50]\n    let onetrillionandoneandoneandone\
    \ = arr[51]\n    let onehundred\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp44k9l5vj.swift:65:9: error: type annotation missing in pattern\n\
    \    let onehundred\n        ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for num in arr {\n        if num < min {\n          \
    \  min = num\n        } else if num > max {\n            max = num\n        }\n\
    \    }\n    let one = String(format: \"%@\", One)\n    let two = String(format:\
    \ \"%@\", Two)\n    let three = String(format: \"%@\", Three)\n    let four =\
    \ String(format: \"%@\", Four)\n    let five = String(format: \"%@\", Five)\n\
    \    let six = String(format: \"%@\", Six)\n    let seven = String(format: \"\
    %@\", Seven)\n    let eight = String(format: \"%@\", Eight)\n    let nine = String(format:\
    \ \"%@\", Nine)\n    let ten = String(format: \"%@\", Ten)\n    let hundred =\
    \ String(format: \"%@\", Hundred)\n    let thousand = String(format: \"%@\", Thousand)\n\
    \    let million = String(format: \"%@\", Million)\n    let billion = String(format:\
    \ \"%@\", Billion)\n    let trillion = String(format: \"%@\", Trillion)\n    let\
    \ quadrillion = String(format: \"%@\", Quadrillion)\n    let quintillion = String(format:\
    \ \"%@\", Quintillion)\n    let sextillion = String(format: \"%@\", Sextillion)\n\
    \    let septillion = String(format: \"%@\", Septillion)\n    let octillion =\
    \ String(format: \"%@\", Octillion)\n    let nonillion = String(format: \"%@\"\
    , Nonillion)\n    let decillion = String(format: \"%@\", Decillion)\n    let undecillion\
    \ = String(format: \"%@\", Undecillion)\n    let duodecillion = String(format:\
    \ \"%@\", Duodecillion)\n    let tredecillion = String(format: \"%@\", Tredecillion)\n\
    \    let quattuordecillion = String(format: \"%@\", Quattuordecillion)\n    let\
    \ quindecillion = String(format: \"%@\", Quindecillion)\n    let sexdecillion\
    \ = String(format: \"%@\", Sexdecillion)\n    let septendecillion = String(format:\
    \ \"%@\", Septendecillion)\n    let oc\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpra2rmcy9.swift:17:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = num\n            ^~~\n/tmp/tmpra2rmcy9.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpra2rmcy9.swift:19:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = num\n            ^~~\n/tmp/tmpra2rmcy9.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpra2rmcy9.swift:22:36: error: cannot find 'One' in scope\n  \
    \  let one = String(format: \"%@\", One)\n                                   ^~~\n\
    /tmp/tmpra2rmcy9.swift:22:21: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    let one = String(format: \"%@\", One)\n  \
    \                  ^~~~~~~\n                     repeating     count: \n/tmp/tmpra2rmcy9.swift:23:36:\
    \ error: cannot find 'Two' in scope\n    let two = String(format: \"%@\", Two)\n\
    \                                   ^~~\n/tmp/tmpra2rmcy9.swift:23:21: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let two = String(format: \"%@\", Two)\n                    ^~~~~~~\n    \
    \                 repeating     count: \n/tmp/tmpra2rmcy9.swift:24:38: error:\
    \ cannot find 'Three' in scope\n    let three = String(format: \"%@\", Three)\n\
    \                                     ^~~~~\n/tmp/tmpra2rmcy9.swift:24:23: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let three = String(format: \"%@\", Three)\n                      ^~~~~~~\n\
    \                       repeating     count: \n/tmp/tmpra2rmcy9.swift:25:37: error:\
    \ cannot find 'Four' in scope\n    let four = String(format: \"%@\", Four)\n \
    \                                   ^~~~\n/tmp/tmpra2rmcy9.swift:25:22: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let four = String(format: \"%@\", Four)\n                     ^~~~~~~\n \
    \                     repeating     count: \n/tmp/tmpra2rmcy9.swift:26:37: error:\
    \ cannot find 'Fiv"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(numbers[number])\n        } else {\n            continue\n  \
    \      }\n    }\n    for number in arr.reverse() {\n        if number >= 1 &&\
    \ number <= 9 {\n            result.append(numbers[number])\n        } else {\n\
    \            continue\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzttp_dw3.swift:12:27: error: cannot find 'numbers' in scope\n \
    \           result.append(numbers[number])\n                          ^~~~~~~\n\
    /tmp/tmpzttp_dw3.swift:17:23: error: for-in loop requires '()' to conform to 'Sequence'\n\
    \    for number in arr.reverse() {\n                  ~~~~^~~~~~~~~\n/tmp/tmpzttp_dw3.swift:17:23:\
    \ error: cannot use mutating member on immutable value: 'arr' is a 'let' constant\n\
    \    for number in arr.reverse() {\n                  ~~~ ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let ones = arr.filter{ $0 < 10 }\n    let tens = arr.filter{\
    \ $0 >= 10 && $0 < 20 }\n    let hundreds = arr.filter{ $0 >= 20 }\n    let thousands\
    \ = arr.filter{ $0 >= 100 && $0 < 1000 }\n    let millions = arr.filter{ $0 >=\
    \ 1000 && $0 < 10000 }\n    let billions = arr.filter{ $0 >= 10000 && $0 < 100000\
    \ }\n    let trillions = arr.filter{ $0 >= 100000 && $0 < 1000000 }\n    let quadrillions\
    \ = arr.filter{ $0 >= 1000000 && $0 < 10000000 }\n    let quintillions = arr.filter{\
    \ $0 >= 10000000 && $0 < 100000000 }\n    let sextillions = arr.filter{ $0 >=\
    \ 100000000 && $0 < 1000000000 }\n    let septillions = arr.filter{ $0 >= 1000000000\
    \ && $0 < 10000000000 }\n    let octillions = arr.filter{ $0 >= 10000000000 &&\
    \ $0 < 100000000000 }\n    let nonillions = arr.filter{ $0 >= 100000000000 &&\
    \ $0 < 1000000000000 }\n    let decillions = arr.filter{ $0 >= 1000000000000 &&\
    \ $0 < 10000000000000 }\n    let undecillions = arr.filter{ $0 >= 10000000000000\
    \ && $0 < 100000000000000 }\n    let duodecillions = arr.filter{ $0 >= 100000000000000\
    \ && $0 < 1000000000000000 }\n    let tredecillions = arr.filter{ $0 >= 1000000000000000\
    \ && $0 < 10000000000000000 }\n    let quattuordecillions = arr.filter{ $0 >=\
    \ 10000000000000000 && $0 < 100000000000000000 }\n    let quindecillions = arr.filter{\
    \ $0 >= 100000000000000000 && $0 < 1000000000000000000 }\n    let sexdecillions\
    \ = arr.filter{ $0 >= 1000000000000000000 && $0 < 10000000000000000000 }\n   \
    \ let septendecillions = arr.filter{ $0 >= 10000000000000000000 && $0 < 100000000000000000000\
    \ }\n    let octodecillions = arr.filter{ $0 >= 100000000000000000000 && $0 <\
    \ 1000000000000000000000 }\n    let novemdecillions = arr.filter{ $0 >= 1000000000000000000000\
    \ && $0 < 10000000000000000000000 }\n    let vigintillions = arr.filter{ $0 >=\
    \ 10000000000000000000000 && \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3pd76nmq.swift:34:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp3pd76nmq.swift:53:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp3pd76nmq.swift:8:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmp3pd76nmq.swift:37:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr.min()!\n\
    \    let max = arr.max()!\n    if min == max {\n        return arr\n    }\n  \
    \  let one = String(format: \"%d\\tOne\", min)\n    let two = String(format: \"\
    %d\\tTwo\", min)\n    let three = String(format: \"%d\\tThree\", min)\n    let\
    \ four = String(format: \"%d\\tFour\", min)\n    let five = String(format: \"\
    %d\\tFive\", min)\n    let six = String(format: \"%d\\tSix\", min)\n    let seven\
    \ = String(format: \"%d\\tSeven\", min)\n    let eight = String(format: \"%d\\\
    tEight\", min)\n    let nine = String(format: \"%d\\tNine\", min)\n    let ten\
    \ = String(format: \"%d\\tTen\", min)\n    let eleven = String(format: \"%d\\\
    tEleven\", min)\n    let twelve = String(format: \"%d\\tTwelve\", min)\n    let\
    \ thirteen = String(format: \"%d\\tThirteen\", min)\n    let fourteen = String(format:\
    \ \"%d\\tFourteen\", min)\n    let fifteen = String(format: \"%d\\tFifteen\",\
    \ min)\n    let sixteen = String(format: \"%d\\tSixteen\", min)\n    let seventeen\
    \ = String(format: \"%d\\tSeventeen\", min)\n    let eighteen = String(format:\
    \ \"%d\\tEighteen\", min)\n    let nineteen = String(format: \"%d\\tNineteen\"\
    , min)\n    let twenty = String(format: \"%d\\tTwenty\", min)\n    let thirty\
    \ = String(format: \"%d\\tThirty\", min)\n    let forty = String(format: \"%d\\\
    tForty\", min)\n    let fifty = String(format: \"%d\\tFifty\", min)\n    let sixty\
    \ = String(format: \"%d\\tSixty\", min)\n    let seventy = String(format: \"%d\\\
    tSeventy\", min)\n    let eighty = String(format: \"%d\\tEighty\", min)\n    let\
    \ ninety = String(format: \"%d\\tNinety\", min)\n    let hundred = String(format:\
    \ \"%d\\tHundred\", min)\n    let thousand = String(format: \"%d\\tThousand\"\
    , min)\n    let million = String(format: \"%d\\tMillion\", min)\n    let billion\
    \ = String(format: \"%d\\tBillion\", min)\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmph4f8ciw7.swift:16:16: error: cannot convert return expression of\
    \ type '[Int]' to return type '[String]'\n        return arr\n               ^\n\
    /tmp/tmph4f8ciw7.swift:16:16: note: arguments to generic parameter 'Element' ('Int'\
    \ and 'String') are expected to be equal\n        return arr\n               ^\n\
    /tmp/tmph4f8ciw7.swift:18:21: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    let one = String(format: \"%d\\tOne\", min)\n\
    \                    ^~~~~~~\n                     repeating          count: \n\
    /tmp/tmph4f8ciw7.swift:19:21: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    let two = String(format: \"%d\\tTwo\", min)\n\
    \                    ^~~~~~~\n                     repeating          count: \n\
    /tmp/tmph4f8ciw7.swift:20:23: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    let three = String(format: \"%d\\tThree\"\
    , min)\n                      ^~~~~~~\n                       repeating      \
    \      count: \n/tmp/tmph4f8ciw7.swift:21:22: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    let four = String(format:\
    \ \"%d\\tFour\", min)\n                     ^~~~~~~\n                      repeating\
    \           count: \n/tmp/tmph4f8ciw7.swift:22:22: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    let five = String(format:\
    \ \"%d\\tFive\", min)\n                     ^~~~~~~\n                      repeating\
    \           count: \n/tmp/tmph4f8ciw7.swift:23:21: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    let six = String(format:\
    \ \"%d\\tSix\", min)\n                    ^~~~~~~\n                     repeating\
    \          count: \n/tmp/tmph4f8ciw7.swift:24:23: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    let seven = String(format:\
    \ \"%d\\tSeven\", min)\n                      ^~~~~~~\n                      \
    \ repeating            count: \n/tmp/tmph4f8ciw7.swift:25:23: e"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var last = 0\n    for num in arr {\n        if num < 1 || num > 9 {\n   \
    \         continue\n        }\n        let digit = String(num)\n        result.append(digit)\n\
    \        last = num\n    }\n    for num in result {\n        let digit = String(num)\n\
    \        if digit == \"0\" {\n            continue\n        }\n        let index\
    \ = last.distance(from: last.successor())\n        let name = digits[index - 1]\n\
    \        result[result.index(num)] = name\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpygucak99.swift:24:26: error: no exact matches in call to instance\
    \ method 'distance'\n        let index = last.distance(from: last.successor())\n\
    \                         ^\n/tmp/tmpygucak99.swift:24:26: note: found candidate\
    \ with type '(Int) -> Int'\n        let index = last.distance(from: last.successor())\n\
    \                         ^\n/tmp/tmpygucak99.swift:24:46: error: value of type\
    \ 'Int' has no member 'successor'\n        let index = last.distance(from: last.successor())\n\
    \                                        ~~~~ ^~~~~~~~~\n/tmp/tmpygucak99.swift:25:20:\
    \ error: cannot find 'digits' in scope\n        let name = digits[index - 1]\n\
    \                   ^~~~~~\n/tmp/tmpygucak99.swift:26:23: error: value of optional\
    \ type 'Array<String>.Index?' (aka 'Optional<Int>') must be unwrapped to a value\
    \ of type 'Array<String>.Index' (aka 'Int')\n        result[result.index(num)]\
    \ = name\n                      ^\n/tmp/tmpygucak99.swift:26:23: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     result[result.index(num)] = name\n                      ^\n            \
    \                     ?? <#default value#>\n/tmp/tmpygucak99.swift:26:23: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \        result[result.index(num)] = name\n                      ^\n         \
    \                       !\n/tmp/tmpygucak99.swift:26:29: error: missing argument\
    \ label 'of:' in call\n        result[result.index(num)] = name\n            \
    \                ^\n                            of: \n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for n in arr {\n        let digit = Int(n) % 10\n        if digit == 0 {\n\
    \            result.append(String(format: \"%d\\\"\", n))\n        } else {\n\
    \            result.append(String(format: \"%d\\\"\", digit - 1))\n        }\n\
    \    }\n    return result.reverse().map { String(format: \"%d\\\"\", Int($0))\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmps5mpkcs9.swift:13:33: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n            result.append(String(format:\
    \ \"%d\\\"\", n))\n                                ^~~~~~~\n                 \
    \                repeating       count: \n/tmp/tmps5mpkcs9.swift:15:33: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result.append(String(format: \"%d\\\"\", digit - 1))\n          \
    \                      ^~~~~~~\n                                 repeating   \
    \    count: \n/tmp/tmps5mpkcs9.swift:18:41: error: incorrect argument labels in\
    \ call (have 'format:_:', expected 'repeating:count:')\n    return result.reverse().map\
    \ { String(format: \"%d\\\"\", Int($0)) }\n                                  \
    \      ^~~~~~~\n                                         repeating       count:\
    \ \n/tmp/tmps5mpkcs9.swift:18:29: error: value of tuple type '()' has no member\
    \ 'map'\n    return result.reverse().map { String(format: \"%d\\\"\", Int($0))\
    \ }\n           ~~~~~~~~~~~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    let reversed = arr.reverse()\n    var\
    \ result = [String]()\n    for number in reversed {\n        let index = Int(number)\
    \ - 1\n        if index < 0 || index > 9 {\n            continue\n        }\n\
    \        result.append(names[index])\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4398dshp.swift:12:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    let reversed = arr.reverse()\n       \
    \            ~~~ ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var one = arr[0]\n  \
    \  var two = arr[1]\n    var three = arr[2]\n    var four = arr[3]\n    var five\
    \ = arr[4]\n    var six = arr[5]\n    var seven = arr[6]\n    var eight = arr[7]\n\
    \    var nine = arr[8]\n    var ten = arr[9]\n    var ten_one = arr[10 - 1]\n\
    \    var ten_two = arr[11 - 1]\n    var ten_three = arr[12 - 1]\n    var ten_four\
    \ = arr[13 - 1]\n    var ten_five = arr[14 - 1]\n    var ten_six = arr[15 - 1]\n\
    \    var ten_seven = arr[16 - 1]\n    var ten_eight = arr[17 - 1]\n    var ten_nine\
    \ = arr[18 - 1]\n    var eleven = arr[19 - 1]\n    var twelve = arr[20 - 1]\n\
    \    var thirteen = arr[21 - 1]\n    var fourteen = arr[22 - 1]\n    var fifteen\
    \ = arr[23 - 1]\n    var sixteen = arr[24 - 1]\n    var seventeen = arr[25 - 1]\n\
    \    var eighteen = arr[26 - 1]\n    var nineteen = arr[27 - 1]\n    var twenty\
    \ = arr[28 - 1]\n    var twenty_one = arr[29 - 1]\n    var twenty_two = arr[30\
    \ - 1]\n    var twenty_three = arr[31 - 1]\n    var twenty_four = arr[32 - 1]\n\
    \    var twenty_five = arr[33 - 1]\n    var twenty_six = arr[34 - 1]\n    var\
    \ twenty_seven = arr[35 - 1]\n    var twenty_eight = arr[36 - 1]\n    var twenty_nine\
    \ = arr[37 - 1]\n    var thirty = arr[40 - 1]\n    var thirty_one = arr[41 - 1]\n\
    \    var thirty_two = arr[42 - 1]\n    var thirty_three = arr[43 - 1]\n    var\
    \ thirty_four = arr[44 - 1]\n    var thirty_five = arr[45 - 1]\n    var thirty_six\
    \ = arr[46 - 1]\n    var thirty_seven = arr[47 - 1]\n    var thirty_eight = arr[48\
    \ - 1]\n    var thirty_nine = arr[49 - 1]\n    var forty = arr[50] - 1\n    var\
    \ forty_one = arr[51] - 1\n    var forty_two = arr[52] + 1\n    var forty_three\
    \ = arr[53] + 1\n    var forty_four = arr[54] + 1\n    var forty_five = arr[55]\
    \ + 1\n    var forty_six = arr[\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptr3tv4cw.swift:68:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmptr3tv4cw.swift:67:24: error: missing argument for parameter #1 in\
    \ call\n    var forty_six = arr[\n                       ^\n                 \
    \      <#Int#>\nSwift.Array:16:23: note: 'subscript(_:)' declared here\n    @inlinable\
    \ public subscript(index: Int) -> Element { get set }\n                      ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n\n    var result = [String]()\n    var reversed\
    \ = [Int]()\n    var one = Int(One)\n    var two = Int(Two)\n    var three = Int(Three)\n\
    \    var four = Int(Four)\n    var five = Int(Five)\n    var six = Int(Six)\n\
    \    var seven = Int(Seven)\n    var eight = Int(Eight)\n    var nine = Int(Nine)\n\
    \n    for i in arr {\n        reversed.append(i)\n    }\n\n    for i in reversed[0..<reversed.count]\
    \ {\n        if i < one {\n            result.append(String(One))\n        } else\
    \ if i < two {\n            result.append(String(Two))\n        } else if i <\
    \ three {\n            result.append(String(Three))\n        } else if i < four\
    \ {\n            result.append(String(Four))\n        } else if i < five {\n \
    \           result.append(String(Five))\n        } else if i < six {\n       \
    \     result.append(String(Six))\n        } else if i < seven {\n            result.append(String(Seven))\n\
    \        } else if i < eight {\n            result.append(String(Eight))\n   \
    \     } else if i < nine {\n            result.append(String(Nine))\n        }\
    \ else {\n            result.append(String(Zero))\n        }\n    }\n\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpn98nsw8b.swift:15:19: error: cannot find 'One' in scope\n    var\
    \ one = Int(One)\n                  ^~~\n/tmp/tmpn98nsw8b.swift:16:19: error:\
    \ cannot find 'Two' in scope\n    var two = Int(Two)\n                  ^~~\n\
    /tmp/tmpn98nsw8b.swift:17:21: error: cannot find 'Three' in scope\n    var three\
    \ = Int(Three)\n                    ^~~~~\n/tmp/tmpn98nsw8b.swift:18:20: error:\
    \ cannot find 'Four' in scope\n    var four = Int(Four)\n                   ^~~~\n\
    /tmp/tmpn98nsw8b.swift:19:20: error: cannot find 'Five' in scope\n    var five\
    \ = Int(Five)\n                   ^~~~\n/tmp/tmpn98nsw8b.swift:20:19: error: cannot\
    \ find 'Six' in scope\n    var six = Int(Six)\n                  ^~~\n/tmp/tmpn98nsw8b.swift:21:21:\
    \ error: cannot find 'Seven' in scope\n    var seven = Int(Seven)\n          \
    \          ^~~~~\n/tmp/tmpn98nsw8b.swift:22:21: error: cannot find 'Eight' in\
    \ scope\n    var eight = Int(Eight)\n                    ^~~~~\n/tmp/tmpn98nsw8b.swift:23:20:\
    \ error: cannot find 'Nine' in scope\n    var nine = Int(Nine)\n             \
    \      ^~~~\n/tmp/tmpn98nsw8b.swift:31:34: error: cannot find 'One' in scope\n\
    \            result.append(String(One))\n                                 ^~~\n\
    /tmp/tmpn98nsw8b.swift:33:34: error: cannot find 'Two' in scope\n            result.append(String(Two))\n\
    \                                 ^~~\n/tmp/tmpn98nsw8b.swift:35:34: error: cannot\
    \ find 'Three' in scope\n            result.append(String(Three))\n          \
    \                       ^~~~~\n/tmp/tmpn98nsw8b.swift:37:34: error: cannot find\
    \ 'Four' in scope\n            result.append(String(Four))\n                 \
    \                ^~~~\n/tmp/tmpn98nsw8b.swift:39:34: error: cannot find 'Five'\
    \ in scope\n            result.append(String(Five))\n                        \
    \         ^~~~\n/tmp/tmpn98nsw8b.swift:41:34: error: cannot find 'Six' in scope\n\
    \            result.append(String(Six))\n                                 ^~~\n\
    /tmp/tmpn98nsw8b.swift:43:34: error: cannot find 'Seven' in scope\n          \
    \  result.append(String(Seven))\n                                 ^~~~~\n/tmp/tmpn98nsw8b.swift:4"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    \n    if arr.isEmpty {\n        return result\n    }\n    \n    if arr.count\
    \ < 10 {\n        return result\n    }\n    \n    let min = 1\n    let max = 9\n\
    \    \n    for i in arr {\n        if min > i {\n            min = i\n       \
    \ }\n        \n        if max < i {\n            max = i\n        }\n    }\n \
    \   \n    let minStr = String(min)\n    let maxStr = String(max)\n    \n    for\
    \ i in arr {\n        let str = String(i)\n        \n        if str == minStr\
    \ {\n            result.append(One)\n        }\n        \n        if str == maxStr\
    \ {\n            result.append(Nine)\n        }\n        \n        if str == String(min)\
    \ + String(max) {\n            result.append(Two)\n        }\n        \n     \
    \   if str == String(min) - String(max) {\n            result.append(Three)\n\
    \        }\n        \n        if str == String(min) * String(max) {\n        \
    \    result.append(Four)\n        }\n        \n        if str == String(min) /\
    \ String(max) {\n            result.append(Five)\n        }\n        \n      \
    \  if str == String(min) % String(max) {\n            result.append(Six)\n   \
    \     }\n        \n        if str == String(min) + String(max) + String(min) +\
    \ String(max) {\n            result.append(Seven)\n        }\n        \n     \
    \   if str == String(min) + String(max) + String(min) - String(max) {\n      \
    \      result.append(Eight)\n        }\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr9jahxiy.swift:24:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = i\n            ^~~\n/tmp/tmpr9jahxiy.swift:19:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = 1\n    ^~~\n \
    \   var\n/tmp/tmpr9jahxiy.swift:28:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = i\n            ^~~\n/tmp/tmpr9jahxiy.swift:20:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = 9\n    ^~~\n \
    \   var\n/tmp/tmpr9jahxiy.swift:39:27: error: cannot find 'One' in scope\n   \
    \         result.append(One)\n                          ^~~\n/tmp/tmpr9jahxiy.swift:43:27:\
    \ error: cannot find 'Nine' in scope\n            result.append(Nine)\n      \
    \                    ^~~~\n/tmp/tmpr9jahxiy.swift:47:27: error: cannot find 'Two'\
    \ in scope\n            result.append(Two)\n                          ^~~\n/tmp/tmpr9jahxiy.swift:50:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        if str\
    \ == String(min) - String(max) {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr9jahxiy.swift:51:27: error: cannot find 'Three' in scope\n          \
    \  result.append(Three)\n                          ^~~~~\n/tmp/tmpr9jahxiy.swift:54:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        if str\
    \ == String(min) * String(max) {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr9jahxiy.swift:55:27: error: cannot find 'Four' in scope\n           \
    \ result.append(Four)\n                          ^~~~\n/tmp/tmpr9jahxiy.swift:58:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        if str\
    \ == String(min) / String(max) {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr9jahxiy.swift:59:27: error: cannot find 'Five' in scope\n           \
    \ result.append(Five)\n                          ^~~~\n/tmp/tmpr9jahxiy.swift:62:12:\
    \ error: t"
  stdout: ''
  timestamp: 1660014453
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        let index = number - 10\n        let name = ones[index] +\
    \ twos[index] + threes[index] + fours[index] + fives[index] + sixes[index] + sevens[index]\
    \ + eights[index] + nines[index]\n        result.append(name)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg9gu1fz0.swift:15:20: error: cannot find 'ones' in scope\n    \
    \    let name = ones[index] + twos[index] + threes[index] + fours[index] + fives[index]\
    \ + sixes[index] + sevens[index] + eights[index] + nines[index]\n            \
    \       ^~~~\n/tmp/tmpg9gu1fz0.swift:15:34: error: cannot find 'twos' in scope\n\
    \        let name = ones[index] + twos[index] + threes[index] + fours[index] +\
    \ fives[index] + sixes[index] + sevens[index] + eights[index] + nines[index]\n\
    \                                 ^~~~\n/tmp/tmpg9gu1fz0.swift:15:48: error: cannot\
    \ find 'threes' in scope\n        let name = ones[index] + twos[index] + threes[index]\
    \ + fours[index] + fives[index] + sixes[index] + sevens[index] + eights[index]\
    \ + nines[index]\n                                               ^~~~~~\n/tmp/tmpg9gu1fz0.swift:15:64:\
    \ error: cannot find 'fours' in scope\n        let name = ones[index] + twos[index]\
    \ + threes[index] + fours[index] + fives[index] + sixes[index] + sevens[index]\
    \ + eights[index] + nines[index]\n                                           \
    \                    ^~~~~\n/tmp/tmpg9gu1fz0.swift:15:79: error: cannot find 'fives'\
    \ in scope\n        let name = ones[index] + twos[index] + threes[index] + fours[index]\
    \ + fives[index] + sixes[index] + sevens[index] + eights[index] + nines[index]\n\
    \                                                                            \
    \  ^~~~~\n/tmp/tmpg9gu1fz0.swift:15:94: error: cannot find 'sixes' in scope\n\
    \        let name = ones[index] + twos[index] + threes[index] + fours[index] +\
    \ fives[index] + sixes[index] + sevens[index] + eights[index] + nines[index]\n\
    \                                                                            \
    \                 ^~~~~\n/tmp/tmpg9gu1fz0.swift:15:109: error: cannot find 'sevens'\
    \ in scope\n        let name = ones[index] + twos[index] + threes[index] + fours[index]\
    \ + fives[index] + sixes[index] + sevens[index] + eights[index] + nines[index]\n\
    \                                                                            \
    \                                ^~~~~~\n/tmp/tmpg9gu1fz0.swift:15:125: "
  stdout: ''
  timestamp: 1660014472
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  let name = ones[number-1]\n            result.append(name)\n        } else\
    \ {\n            result.append(String(number))\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbw2kfgot.swift:12:24: error: cannot find 'ones' in scope\n    \
    \        let name = ones[number-1]\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = arr[0]\n    let max = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] < min { min = arr[i] }\n        if arr[i]\
    \ > max { max = arr[i] }\n    }\n    let arr2 = arr.map { $0 }\n    let arr3 =\
    \ arr2.reverse()\n    let arr4 = arr3.map { $0.description }\n    return arr4\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpahcgsglf.swift:13:27: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n        if arr[i] < min { min = arr[i] }\n                 \
    \         ^~~\n/tmp/tmpahcgsglf.swift:10:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let min = arr[0]\n    ^~~\n    var\n/tmp/tmpahcgsglf.swift:14:27:\
    \ error: cannot assign to value: 'max' is a 'let' constant\n        if arr[i]\
    \ > max { max = arr[i] }\n                          ^~~\n/tmp/tmpahcgsglf.swift:11:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpahcgsglf.swift:17:21: error: cannot use mutating member on immutable\
    \ value: 'arr2' is a 'let' constant\n    let arr3 = arr2.reverse()\n         \
    \      ~~~~ ^\n/tmp/tmpahcgsglf.swift:16:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let arr2 = arr.map { $0 }\n    ^~~\n    var\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let eleven = arr[10]\n    let\
    \ twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen = arr[13]\n \
    \   let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen = arr[16]\n\
    \    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty = arr[19]\n\
    \    let thirty = arr[20]\n    let forty = arr[21]\n    let fifty = arr[22]\n\
    \    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty = arr[25]\n\
    \    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand = arr[28]\n\
    \    let million = arr[29]\n    let billion = arr[30]\n    let trillion = arr[31]\n\
    \    let quadrillion = arr[32]\n    let quintillion = arr[33]\n    let sextillion\
    \ = arr[34]\n    let septillion = arr[35]\n    let octillion = arr[36]\n    let\
    \ nonillion = arr[37]\n    let decillion = arr[38]\n    let undecillion = arr[39]\n\
    \    let duodecillion = arr[40]\n    let tredecillion = arr[41]\n    let quattuordecillion\
    \ = arr[42]\n    let quindecillion = arr[43]\n    let sexdecillion = arr[44]\n\
    \    let septendecillion = arr[45]\n    let octodecillion = arr[46]\n    let novemdecillion\
    \ = arr[47]\n    let vigintillion = arr[48]\n    let unvigintillion = arr[49]\n\
    \    let duovigintillion = arr[50]\n    let trevigintillion = arr[51]\n    let\
    \ quattuorvigintillion = arr[52]\n    let quinvigintillion = arr[53]\n    let\
    \ sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n    let octovigin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmprzcl_i12.swift:69:9: error: type annotation missing in pattern\n\
    \    let octovigin\n        ^\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let hundred = arr[10]\n    let\
    \ thousand = arr[11]\n    let ten_thousand = arr[12]\n    let hundred_thousand\
    \ = arr[13]\n    let thousand_thousand = arr[14]\n    let million = arr[15]\n\
    \    let billion = arr[16]\n    let trillion = arr[17]\n    let quadrillion =\
    \ arr[18]\n    let quintillion = arr[19]\n    let sextillion = arr[20]\n    let\
    \ septillion = arr[21]\n    let octillion = arr[22]\n    let nonillion = arr[23]\n\
    \    let decillion = arr[24]\n    let undecillion = arr[25]\n    let duodecillion\
    \ = arr[26]\n    let tredecillion = arr[27]\n    let quattuordecillion = arr[28]\n\
    \    let quindecillion = arr[29]\n    let sexdecillion = arr[30]\n    let septendecillion\
    \ = arr[31]\n    let octodecillion = arr[32]\n    let novemdecillion = arr[33]\n\
    \    let vigintillion = arr[34]\n    let centillion = arr[35]\n    let uncentillion\
    \ = arr[36]\n    let duocentillion = arr[37]\n    let trecentillion = arr[38]\n\
    \    let quattuorcentillion = arr[39]\n    let quincentillion = arr[40]\n    let\
    \ sexcentillion = arr[41]\n    let septencentillion = arr[42]\n    let octocentillion\
    \ = arr[43]\n    let novemcentillion = arr[44]\n    let vintillion = arr[45]\n\
    \    let unvintillion = arr[46]\n    let duodecillion = arr[47]\n    let tredecillion\
    \ = arr[48]\n    let quattuordecillion = arr[49]\n    let quindecillion = arr[50]\n\
    \    let sexdecillion = arr[51]\n    let septendecillion = arr[52]\n    let octodecillion\
    \ = arr[53]\n    let novemdec\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp94sop3nn.swift:60:9: error: invalid redeclaration of 'duodecillion'\n\
    \    let duodecillion = arr[47]\n        ^\n/tmp/tmp94sop3nn.swift:39:9: note:\
    \ 'duodecillion' previously declared here\n    let duodecillion = arr[26]\n  \
    \      ^\n/tmp/tmp94sop3nn.swift:61:9: error: invalid redeclaration of 'tredecillion'\n\
    \    let tredecillion = arr[48]\n        ^\n/tmp/tmp94sop3nn.swift:40:9: note:\
    \ 'tredecillion' previously declared here\n    let tredecillion = arr[27]\n  \
    \      ^\n/tmp/tmp94sop3nn.swift:62:9: error: invalid redeclaration of 'quattuordecillion'\n\
    \    let quattuordecillion = arr[49]\n        ^\n/tmp/tmp94sop3nn.swift:41:9:\
    \ note: 'quattuordecillion' previously declared here\n    let quattuordecillion\
    \ = arr[28]\n        ^\n/tmp/tmp94sop3nn.swift:63:9: error: invalid redeclaration\
    \ of 'quindecillion'\n    let quindecillion = arr[50]\n        ^\n/tmp/tmp94sop3nn.swift:42:9:\
    \ note: 'quindecillion' previously declared here\n    let quindecillion = arr[29]\n\
    \        ^\n/tmp/tmp94sop3nn.swift:64:9: error: invalid redeclaration of 'sexdecillion'\n\
    \    let sexdecillion = arr[51]\n        ^\n/tmp/tmp94sop3nn.swift:43:9: note:\
    \ 'sexdecillion' previously declared here\n    let sexdecillion = arr[30]\n  \
    \      ^\n/tmp/tmp94sop3nn.swift:65:9: error: invalid redeclaration of 'septendecillion'\n\
    \    let septendecillion = arr[52]\n        ^\n/tmp/tmp94sop3nn.swift:44:9: note:\
    \ 'septendecillion' previously declared here\n    let septendecillion = arr[31]\n\
    \        ^\n/tmp/tmp94sop3nn.swift:66:9: error: invalid redeclaration of 'octodecillion'\n\
    \    let octodecillion = arr[53]\n        ^\n/tmp/tmp94sop3nn.swift:45:9: note:\
    \ 'octodecillion' previously declared here\n    let octodecillion = arr[32]\n\
    \        ^\n/tmp/tmp94sop3nn.swift:67:9: error: type annotation missing in pattern\n\
    \    let novemdec\n        ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var reversed = [Int]()\n    for number in arr {\n        if number < 1 ||\
    \ number > 9 {\n            continue\n        }\n        reversed.append(number)\n\
    \    }\n    reversed.reverse()\n    for number in reversed {\n        let index\
    \ = Int(number) - 1\n        if index < 0 {\n            continue\n        }\n\
    \        result.append(String(index))\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmp3myowd9n/tmp3myowd9n.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c4912bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c48e22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c48e22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c48e217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3myowd9n                        0x00005640813e5bc1 <unavailable> + 7105

    5    libc.so.6                          0x00002b8c49317460 __libc_start_main +
    245

    6    tmp3myowd9n                        0x00005640813e5669 <unavailable> + 5737

    '
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    var result = [String]()\n    var i =\
    \ 0\n    for num in arr {\n        if num < 1 || num > 9 {\n            continue\n\
    \        }\n        result.append(String(num))\n    }\n    for num in arr.reverse()\
    \ {\n        if num < 1 || num > 9 {\n            continue\n        }\n      \
    \  result.append(String(num))\n    }\n    for num in arr {\n        if num < 1\
    \ || num > 9 {\n            continue\n        }\n        result.append(String(num))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpa3tm3dwm.swift:20:20: error: for-in loop requires '()' to conform\
    \ to 'Sequence'\n    for num in arr.reverse() {\n               ~~~~^~~~~~~~~\n\
    /tmp/tmpa3tm3dwm.swift:20:20: error: cannot use mutating member on immutable value:\
    \ 'arr' is a 'let' constant\n    for num in arr.reverse() {\n               ~~~\
    \ ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for n in arr {\n        let digit = String(format: \"%2d\", n)\n        if\
    \ digit == \"1\" {\n            result.append(\"One\")\n        } else if digit\
    \ == \"2\" {\n            result.append(\"Two\")\n        } else if digit == \"\
    3\" {\n            result.append(\"Three\")\n        } else if digit == \"4\"\
    \ {\n            result.append(\"Four\")\n        } else if digit == \"5\" {\n\
    \            result.append(\"Five\")\n        } else if digit == \"6\" {\n   \
    \         result.append(\"Six\")\n        } else if digit == \"7\" {\n       \
    \     result.append(\"Seven\")\n        } else if digit == \"8\" {\n         \
    \   result.append(\"Eight\")\n        } else if digit == \"9\" {\n           \
    \ result.append(\"Nine\")\n        } else {\n            result.append(digit)\n\
    \        }\n    }\n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5n09wx2x.swift:11:27: error: incorrect argument labels in call\
    \ (have 'format:_:', expected 'repeating:count:')\n        let digit = String(format:\
    \ \"%2d\", n)\n                          ^~~~~~~\n                           repeating\
    \      count: \n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var i = 0\n    while i < arr.count {\n        if arr[i] < min ||\
    \ arr[i] > max {\n            i += 1\n            continue\n        }\n      \
    \  let digit = arr[i] - min\n        let name = digitToName(digit)\n        result.append(name)\n\
    \        i += 1\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxm8lc4om.swift:22:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmpxm8lc4om.swift:26:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for number in arr {\n        if number > max {\n    \
    \        max = number\n        }\n        if number < min {\n            min =\
    \ number\n        }\n    }\n    let range = (max - min) + 1\n    var reversed\
    \ = [Int]()\n    for number in arr {\n        reversed.append(number - min)\n\
    \    }\n    for number in reversed {\n        let index = reversed.index(of: number)\n\
    \        result.append(String(format: \"%@\", names[index]))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl8lnjvuf.swift:17:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = number\n            ^~~\n/tmp/tmpl8lnjvuf.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpl8lnjvuf.swift:20:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = number\n            ^~~\n/tmp/tmpl8lnjvuf.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpl8lnjvuf.swift:29:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: number)\n     \
    \                        ^\n/tmp/tmpl8lnjvuf.swift:29:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: number)\n                  \
    \           ^~~~~\n                             firstIndex\n/tmp/tmpl8lnjvuf.swift:30:44:\
    \ error: cannot find 'names' in scope\n        result.append(String(format: \"\
    %@\", names[index]))\n                                           ^~~~~\n/tmp/tmpl8lnjvuf.swift:30:29:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        result.append(String(format: \"%@\", names[index]))\n               \
    \             ^~~~~~~\n                             repeating     count: \n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number >= 1 && number <= 9 {\n          \
    \  result.append(String(number))\n        }\n    }\n    for number in arr {\n\
    \        if number >= 10 && number <= 99 {\n            result.append(String(number))\n\
    \        }\n    }\n    for number in arr {\n        if number >= 100 && number\
    \ <= 999 {\n            result.append(String(number))\n        }\n    }\n    for\
    \ number in arr {\n        if number >= 1000 && number <= 9999 {\n           \
    \ result.append(String(number))\n        }\n    }\n    for number in arr {\n \
    \       if number >= 10000 && number <= 99999 {\n            result.append(String(number))\n\
    \        }\n    }\n    for number in arr {\n        if number >= 100000 && number\
    \ <= 999999 {\n            result.append(String(number))\n        }\n    }\n \
    \   for number in arr {\n        if number >= 1000000 && number <= 9999999 {\n\
    \            result.append(String(number))\n        }\n    }\n    for number in\
    \ arr {\n        if number >= 10000000 && number <= 99999999 {\n            result.append(String(number))\n\
    \        }\n    }\n    for number in arr {\n        if number >= 100000000 &&\
    \ number <= 999999999 {\n            result.append(String(number))\n        }\n\
    \    }\n    for number in arr {\n        if number >= 1000000000 && number <=\
    \ 99999999999 {\n            result.append(String(number))\n        }\n    }\n\
    \    for number in arr {\n        if number >= 10000000000 && number <= 999999999999\
    \ {\n            result.append(String(number))\n        }\n    }\n    for number\
    \ in arr {\n        if number >= 100000000000 && number <= 999999999999999 {\n\
    \            result.append(String(number))\n        }\n    }\n    for number in\
    \ arr {\n        if number >= 1000000000000 && number <= 999999999999999999 {\n\
    \            result.append(String(number))\n        }\n    }\n    for number in\
    \ arr {\n        if number >= 100000000000000 && number <= 999999999999999999999\
    \ {\n            result.append(String(number))\n        }\n    }\n    for number\
    \ in arr {\n        if number >= 1000000000000000 && number <= 999999999999999999999\
    \ {\n            result.append(String(number))\n        }\n    }\n    for number\
    \ in arr {\n        if number >= 10000000000000000 && number <= 999999999999999999999\
    \ {\n            result.append(String(number))\n        }\n    }\n    for number\
    \ in arr {\n        if number >= 100000000000000000 && number <= 999999999999999999999\
    \ {\n            result.append(String(number))\n        }\n    }\n    for number\
    \ in arr {\n        if number >= 1000000000000000000 && number <= 999999999999999999999\
    \ {\n            result.append(String(number))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6dzu85cc.swift:117:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp6dzu85cc.swift:95:23:\
    \ note: to match this opening '{'\n    for number in arr {\n                 \
    \     ^\n/tmp/tmp6dzu85cc.swift:117:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp6dzu85cc.swift:8:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmp6dzu85cc.swift:101:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number < 1 || number > 9 {\n            continue\n\
    \        }\n        let digit = String(number)\n        let index = Int(digit)\n\
    \        if index == 0 {\n            result.append(\"One\")\n        } else if\
    \ index == 1 {\n            result.append(\"Two\")\n        } else if index ==\
    \ 2 {\n            result.append(\"Three\")\n        } else if index == 3 {\n\
    \            result.append(\"Four\")\n        } else if index == 4 {\n       \
    \     result.append(\"Five\")\n        } else if index == 5 {\n            result.append(\"\
    Six\")\n        } else if index == 6 {\n            result.append(\"Seven\")\n\
    \        } else if index == 7 {\n            result.append(\"Eight\")\n      \
    \  } else if index == 8 {\n            result.append(\"Nine\")\n        } else\
    \ {\n            result.append(digit)\n        }\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4ky5poar.swift:38:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let min = arr[0]\n    let max = arr[0]\n    for i\
    \ in 1..<arr.count {\n        if arr[i] < min {\n            min = arr[i]\n  \
    \      }\n        if arr[i] > max {\n            max = arr[i]\n        }\n   \
    \ }\n    var result = [String]()\n    for i in min..<max {\n        let index\
    \ = Int(i) - 1\n        result.append(names[index])\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjr7r6ue5.swift:14:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = arr[i]\n            ^~~\n/tmp/tmpjr7r6ue5.swift:10:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpjr7r6ue5.swift:17:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = arr[i]\n            ^~~\n/tmp/tmpjr7r6ue5.swift:11:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmpjr7r6ue5.swift:23:23: error: cannot find 'names' in scope\n\
    \        result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for number in arr {\n        if number >= 1 && number <= 9 {\n   \
    \         let name = String(number)\n            result.append(name)\n       \
    \ }\n    }\n    for number in arr {\n        if number >= 10 && number <= 99 {\n\
    \            let name = String(number)\n            result.append(name)\n    \
    \    }\n    }\n    for number in arr {\n        if number >= 100 && number <=\
    \ 999 {\n            let name = String(number)\n            result.append(name)\n\
    \        }\n    }\n    for number in arr {\n        if number >= 1000 && number\
    \ <= 9999 {\n            let name = String(number)\n            result.append(name)\n\
    \        }\n    }\n    for number in arr {\n        if number >= 10000 && number\
    \ <= 99999 {\n            let name = String(number)\n            result.append(name)\n\
    \        }\n    }\n    for number in arr {\n        if number >= 100000 && number\
    \ <= 999999 {\n            let name = String(number)\n            result.append(name)\n\
    \        }\n    }\n    for number in arr {\n        if number >= 1000000 && number\
    \ <= 9999999 {\n            let name = String(number)\n            result.append(name)\n\
    \        }\n    }\n    for number in arr {\n        if number >= 10000000 && number\
    \ <= 99999999 {\n            let name = String(number)\n            result.append(name)\n\
    \        }\n    }\n    for number in arr {\n        if number >= 100000000 &&\
    \ number <= 999999999 {\n            let name = String(number)\n            result.append(name)\n\
    \        }\n    }\n    for number in arr {\n        if number >= 1000000000 &&\
    \ number <= 99999999999 {\n            let name = String(number)\n           \
    \ result.append(name)\n        }\n    }\n    for number in arr {\n        if number\
    \ >= 10000000000 && number <= 999999999999 {\n            let name = String(number)\n\
    \            result.append(name)\n        }\n    }\n    for number in arr {\n\
    \        if number >= 100000000000 && number <= 999999999999999 {\n          \
    \  let name = String(number)\n            result.append(name)\n        }\n   \
    \ }\n    for number in arr {\n        if number >= 1000000000000 && number <=\
    \ 999999999999999999 {\n            let name = String(number)\n            result.append(name)\n\
    \        }\n    }\n    for number in arr {\n        if number >= 100000000000000\
    \ && number <= 999999999999999999999 {\n            let name = String(number)\n\
    \            result.append(name)\n        }\n    }\n    for number in arr {\n\
    \        if number >= 1000000000000000 && number <= 999999999999999999999 {\n\
    \            let name = String(number)\n            result.append(name)\n    \
    \    }\n    }\n    for number in arr {\n        if number >= 10000000000000000\
    \ && number <= 999999999999999999999 {\n            let name = String(number)\n\
    \            result.append(name)\n        }\n    }\n    for number in arr {\n\
    \        if number >= \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpozmodjwj.swift:108:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpozmodjwj.swift:127:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpozmodjwj.swift:8:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpozmodjwj.swift:111:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    let one = \"One\"\n \
    \   let two = \"Two\"\n    let three = \"Three\"\n    let four = \"Four\"\n  \
    \  let five = \"Five\"\n    let six = \"Six\"\n    let seven = \"Seven\"\n   \
    \ let eight = \"Eight\"\n    let nine = \"Nine\"\n    let ten = \"Ten\"\n    let\
    \ hundred = \"Hundred\"\n    let thousand = \"Thousand\"\n    let million = \"\
    Million\"\n    let billion = \"Billion\"\n    let trillion = \"Trillion\"\n  \
    \  let quadrillion = \"Quadrillion\"\n    let quintillion = \"Quintillion\"\n\
    \    let sextillion = \"Sextillion\"\n    let septillion = \"Septillion\"\n  \
    \  let octillion = \"Octillion\"\n    let nonillion = \"Nonillion\"\n    let decillion\
    \ = \"Decillion\"\n    let undecillion = \"Undecillion\"\n    let duodecillion\
    \ = \"Duodecillion\"\n    let tredecillion = \"Tredecillion\"\n    let quattuordecillion\
    \ = \"Quattuordecillion\"\n    let quindecillion = \"Quindecillion\"\n    let\
    \ sexdecillion = \"Sexdecillion\"\n    let septendecillion = \"Septendecillion\"\
    \n    let octodecillion = \"Octodecillion\"\n    let novemdecillion = \"Novemdecillion\"\
    \n    let vigintillion = \"Vigintillion\"\n    let unvigintillion = \"Unvigintillion\"\
    \n    let duovigintillion = \"Duovigintillion\"\n    let trevigintillion = \"\
    Trevigintillion\"\n    let quattuorvigintillion = \"Quattuorvigintillion\"\n \
    \   let quinvigintillion = \"Quinvigintillion\"\n    let sexvigintillion = \"\
    Sexvigintillion\"\n    let septenvigintillion = \"Septenvigintillion\"\n    let\
    \ octovigintillion = \"Octovigintillion\"\n    let novemvigintillion = \"Novemvigintil\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsnd64xqc.swift:51:29: error: unterminated string literal\n    let\
    \ novemvigintillion = \"Novemvigintil\n                            ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    var i = 0\n    while i < arr.count {\n        let num = arr[i]\n\
    \        if num < min || num > max {\n            i += 1\n            continue\n\
    \        }\n        let digit = String(num)\n        let name = digits[digit]\n\
    \        result.append(name)\n        i += 1\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpz0p6ey74.swift:23:20: error: cannot find 'digits' in scope\n  \
    \      let name = digits[digit]\n                   ^~~~~~\n/tmp/tmpz0p6ey74.swift:27:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = min(arr)\n\
    \    let max = max(arr)\n    let range = max - min + 1\n    let digits = Int(pow(10.0,\
    \ Double(range)))\n    let digitNames = [\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    for i in arr {\n   \
    \     let index = i - min\n        let digit = Int(pow(10.0, Double(index)))\n\
    \        let name = digitNames[digit]\n        result.append(name)\n    }\n  \
    \  return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4vgls_du.swift:13:22: error: missing argument for parameter #2\
    \ in call\n    let min = min(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.min:1:24: note: 'min' declared here\n@inlinable public\
    \ func min<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp4vgls_du.swift:14:22: error: missing argument for parameter #2\
    \ in call\n    let max = max(arr)\n                     ^\n                  \
    \   , <#[Int]#>\nSwift.max:1:24: note: 'max' declared here\n@inlinable public\
    \ func max<T>(_ x: T, _ y: T) -> T where T : Comparable\n                    \
    \   ^\n/tmp/tmp4vgls_du.swift:15:27: error: binary operator '+' cannot be applied\
    \ to operands of type 'Duration' and 'Int'\n    let range = max - min + 1\n  \
    \              ~~~~~~~~~ ^ ~\n/tmp/tmp4vgls_du.swift:15:27: note: overloads for\
    \ '+' exist with these partially matching parameter lists: (Duration, Duration),\
    \ (Int, Int)\n    let range = max - min + 1\n                          ^\n/tmp/tmp4vgls_du.swift:16:22:\
    \ error: cannot find 'pow' in scope\n    let digits = Int(pow(10.0, Double(range)))\n\
    \                     ^~~\n/tmp/tmp4vgls_du.swift:20:25: error: cannot find 'pow'\
    \ in scope\n        let digit = Int(pow(10.0, Double(index)))\n              \
    \          ^~~\n/tmp/tmp4vgls_du.swift:24:19: error: cannot convert return expression\
    \ of type '()' to return type '[String]'\n    return result.reverse()\n      \
    \     ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for n in arr {\n        if n > max {\n            max\
    \ = n\n        }\n        if n < min {\n            min = n\n        }\n    }\n\
    \    for n in arr {\n        if n > max {\n            max = n\n        }\n  \
    \      if n < min {\n            min = n\n        }\n    }\n    let one = String(format:\
    \ \"%0*d\", 0, min)\n    let two = String(format: \"%0*d\", 0, max)\n    var reversed\
    \ = [Int]()\n    for n in arr {\n        reversed.append(n)\n    }\n    reversed.reverse()\n\
    \    for n in reversed {\n        let index = reversed.index(of: n)\n        if\
    \ index != nil {\n            let name = one[index!]\n            result.append(name)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmptbwsug2r.swift:17:13: error: cannot assign to value: 'max' is a\
    \ 'let' constant\n            max = n\n            ^~~\n/tmp/tmptbwsug2r.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmptbwsug2r.swift:20:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = n\n            ^~~\n/tmp/tmptbwsug2r.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmptbwsug2r.swift:25:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = n\n            ^~~\n/tmp/tmptbwsug2r.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmptbwsug2r.swift:28:13: error: cannot assign to value: 'min' is\
    \ a 'let' constant\n            min = n\n            ^~~\n/tmp/tmptbwsug2r.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmptbwsug2r.swift:31:21: error: incorrect argument labels in call\
    \ (have 'format:_:_:', expected '_:radix:uppercase:')\n    let one = String(format:\
    \ \"%0*d\", 0, min)\n                    ^~~~~~~~~\n                         \
    \            radix:  uppercase: \n/tmp/tmptbwsug2r.swift:31:41: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n    let one = String(format:\
    \ \"%0*d\", 0, min)\n                                        ^\n             \
    \                           (   != 0)\n/tmp/tmptbwsug2r.swift:31:15: error: initializer\
    \ 'init(_:radix:uppercase:)' requires that 'String' conform to 'BinaryInteger'\n\
    \    let one = String(format: \"%0*d\", 0, min)\n              ^\nSwift.String:2:12:\
    \ note: where 'T' = 'String'\n    public init<T>(_ value: T, radix: Int = 10,\
    \ uppercase: Bool = false) where T : BinaryInteger\n           ^\n/tmp/tmptbwsug2r.swift:32:21:\
    \ error: incorrect argument labels in call (have 'format:_:_:', expected '_:radix:uppercase:')\n\
    \    let two = String(format: \"%0*d\", 0, max)\n                    ^~~~~~~~~\n\
    \                                     radix:  uppercase: \n/tmp/tmptbwsu"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = \"One\"\n \
    \   let two = \"Two\"\n    let three = \"Three\"\n    let four = \"Four\"\n  \
    \  let five = \"Five\"\n    let six = \"Six\"\n    let seven = \"Seven\"\n   \
    \ let eight = \"Eight\"\n    let nine = \"Nine\"\n    let ten = \"Ten\"\n    let\
    \ hundred = \"Hundred\"\n    let thousand = \"Thousand\"\n    let million = \"\
    Million\"\n    let billion = \"Billion\"\n    let trillion = \"Trillion\"\n  \
    \  let quadrillion = \"Quadrillion\"\n    let quintillion = \"Quintillion\"\n\
    \    let sextillion = \"Sextillion\"\n    let septillion = \"Septillion\"\n  \
    \  let octillion = \"Octillion\"\n    let nonillion = \"Nonillion\"\n    let decillion\
    \ = \"Decillion\"\n    let undecillion = \"Undecillion\"\n    let duodecillion\
    \ = \"Duodecillion\"\n    let tredecillion = \"Tredecillion\"\n    let quattuordecillion\
    \ = \"Quattuordecillion\"\n    let quindecillion = \"Quindecillion\"\n    let\
    \ sexdecillion = \"Sexdecillion\"\n    let septendecillion = \"Septendecillion\"\
    \n    let octodecillion = \"Octodecillion\"\n    let novemdecillion = \"Novemdecillion\"\
    \n    let vigintillion = \"Vigintillion\"\n    let unvigintillion = \"Unvigintillion\"\
    \n    let duovigintillion = \"Duovigintillion\"\n    let trevigintillion = \"\
    Trevigintillion\"\n    let quattuorvigintillion = \"Quattuorvigintillion\"\n \
    \   let quinvigintillion = \"Quinvigintillion\"\n    let sexvigintillion = \"\
    Sexvigintillion\"\n    let septenvigintillion = \"Septenvigintillion\"\n    let\
    \ octovigintillion = \"Octovigintillion\"\n    let novemvigintillion = \"Novemvigintilli\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9fowkklj.swift:53:29: error: unterminated string literal\n    let\
    \ novemvigintillion = \"Novemvigintilli\n                            ^\n"
  stdout: ''
  timestamp: 1660014344
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[arr.count - 1]\n    var reversed = reverseArray(arr)\n    reversed\
    \ = reverseArray(reversed)\n    for number in reversed {\n        let index =\
    \ Int(number) - 1\n        if index >= min && index <= max {\n            result.append(names[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwbz0cbiw.swift:15:20: error: cannot find 'reverseArray' in scope\n\
    \    var reversed = reverseArray(arr)\n                   ^~~~~~~~~~~~\n/tmp/tmpwbz0cbiw.swift:16:16:\
    \ error: cannot find 'reverseArray' in scope\n    reversed = reverseArray(reversed)\n\
    \               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for num in arr {\n        if num > 0 && num < 10 {\n     \
    \       result.append(name[num])\n        } else {\n            result.append(\"\
    \")\n        }\n    }\n    for num in arr {\n        if num > 0 && num < 10 {\n\
    \            result[i] = name[num]\n            i += 1\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoj6l31mk.swift:13:27: error: cannot find 'name' in scope\n    \
    \        result.append(name[num])\n                          ^~~~\n/tmp/tmpoj6l31mk.swift:20:25:\
    \ error: cannot find 'name' in scope\n            result[i] = name[num]\n    \
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[0]\n    let eleven = arr[1]\n    let\
    \ twelve = arr[2]\n    let thirteen = arr[3]\n    let fourteen = arr[4]\n    let\
    \ fifteen = arr[5]\n    let sixteen = arr[6]\n    let seventeen = arr[7]\n   \
    \ let eighteen = arr[8]\n    let nineteen = arr[9]\n    let hundred = arr[0]\n\
    \    let thousand = arr[1]\n    let million = arr[2]\n    let billion = arr[3]\n\
    \    let trillion = arr[4]\n    let quadrillion = arr[5]\n    let quintillion\
    \ = arr[6]\n    let sextillion = arr[7]\n    let septillion = arr[8]\n    let\
    \ octillion = arr[9]\n    let nonillion = arr[0]\n    let decillion = arr[1]\n\
    \    let undecillion = arr[2]\n    let duodecillion = arr[3]\n    let tredecillion\
    \ = arr[4]\n    let quattuordecillion = arr[5]\n    let quindecillion = arr[6]\n\
    \    let sexdecillion = arr[7]\n    let septendecillion = arr[8]\n    let octodecillion\
    \ = arr[9]\n    let novemdecillion = arr[0]\n    let vigintillion = arr[1]\n \
    \   let centillion = arr[2]\n    let nonillion = arr[3]\n    let decillion = arr[4]\n\
    \    let undecillion = arr[5]\n    let duodecillion = arr[6]\n    let tredecillion\
    \ = arr[7]\n    let quattuordecillion = arr[8]\n    let quindecillion = arr[9]\n\
    \    let sexdecillion = arr[0]\n    let septendecillion = arr[1]\n    let octodecillion\
    \ = arr[2]\n    let novemdecillion = arr[3]\n    let vigintillion = arr[4]\n \
    \   let centillion = arr[5]\n    let nonillion = arr[6]\n    let decillion = arr[7]\n\
    \    let undecillion = arr[8]\n    let duodecillion = arr[9]\n    let tredecillion\
    \ = arr[0]\n    let quattuordecillion = arr[1]\n    let quindecilli\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp36g7xgu1.swift:55:9: error: invalid redeclaration of 'nonillion'\n\
    \    let nonillion = arr[3]\n        ^\n/tmp/tmp36g7xgu1.swift:42:9: note: 'nonillion'\
    \ previously declared here\n    let nonillion = arr[0]\n        ^\n/tmp/tmp36g7xgu1.swift:56:9:\
    \ error: invalid redeclaration of 'decillion'\n    let decillion = arr[4]\n  \
    \      ^\n/tmp/tmp36g7xgu1.swift:43:9: note: 'decillion' previously declared here\n\
    \    let decillion = arr[1]\n        ^\n/tmp/tmp36g7xgu1.swift:57:9: error: invalid\
    \ redeclaration of 'undecillion'\n    let undecillion = arr[5]\n        ^\n/tmp/tmp36g7xgu1.swift:44:9:\
    \ note: 'undecillion' previously declared here\n    let undecillion = arr[2]\n\
    \        ^\n/tmp/tmp36g7xgu1.swift:58:9: error: invalid redeclaration of 'duodecillion'\n\
    \    let duodecillion = arr[6]\n        ^\n/tmp/tmp36g7xgu1.swift:45:9: note:\
    \ 'duodecillion' previously declared here\n    let duodecillion = arr[3]\n   \
    \     ^\n/tmp/tmp36g7xgu1.swift:59:9: error: invalid redeclaration of 'tredecillion'\n\
    \    let tredecillion = arr[7]\n        ^\n/tmp/tmp36g7xgu1.swift:46:9: note:\
    \ 'tredecillion' previously declared here\n    let tredecillion = arr[4]\n   \
    \     ^\n/tmp/tmp36g7xgu1.swift:60:9: error: invalid redeclaration of 'quattuordecillion'\n\
    \    let quattuordecillion = arr[8]\n        ^\n/tmp/tmp36g7xgu1.swift:47:9: note:\
    \ 'quattuordecillion' previously declared here\n    let quattuordecillion = arr[5]\n\
    \        ^\n/tmp/tmp36g7xgu1.swift:61:9: error: invalid redeclaration of 'quindecillion'\n\
    \    let quindecillion = arr[9]\n        ^\n/tmp/tmp36g7xgu1.swift:48:9: note:\
    \ 'quindecillion' previously declared here\n    let quindecillion = arr[6]\n \
    \       ^\n/tmp/tmp36g7xgu1.swift:62:9: error: invalid redeclaration of 'sexdecillion'\n\
    \    let sexdecillion = arr[0]\n        ^\n/tmp/tmp36g7xgu1.swift:49:9: note:\
    \ 'sexdecillion' previously declared here\n    let sexdecillion = arr[7]\n   \
    \     ^\n/tmp/tmp36g7xgu1.swift:63:9: error: invalid redeclaration of 'septendecillion'\n\
    \    let septendecillion = arr[1]\n        ^\n/tmp/tmp36g7xgu1.swift:50:9: note:\
    \ 'septendecillion' previously declared here\n    "
  stdout: ''
  timestamp: 1660014345
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    \n    var result: [String] = []\n  \
    \  var lastDigit: Int = 0\n    \n    for digit in arr {\n        if digit > 9\
    \ {\n            lastDigit = digit\n        } else {\n            result.append(String(lastDigit))\n\
    \            result.append(String(digit))\n            lastDigit = 0\n       \
    \ }\n    }\n    \n    if lastDigit > 0 {\n        result.append(String(lastDigit))\n\
    \    }\n    \n    return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmplt398lmt/tmplt398lmt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b362aedac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b362abd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b362abd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b362abd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplt398lmt                        0x0000563905785961 <unavailable> + 6497

    5    libc.so.6                          0x00002b362b0c6460 __libc_start_main +
    245

    6    tmplt398lmt                        0x0000563905785409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    while i < arr.count {\n        let number = arr[i]\n     \
    \   if number >= 1 && number <= 9 {\n            result.append(String(number))\n\
    \        }\n        i += 1\n    }\n    if result.isEmpty {\n        return result\n\
    \    }\n    var reversed = result.reverse()\n    var i = 0\n    while i < reversed.count\
    \ {\n        let number = reversed[i]\n        if number >= 1 && number <= 9 {\n\
    \            reversed[i] = \"\\(number)\"\n        }\n        i += 1\n    }\n\
    \    return reversed\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp46dzf7yu.swift:21:9: warning: variable 'reversed' inferred to have\
    \ type '()', which may be unexpected\n    var reversed = result.reverse()\n  \
    \      ^\n/tmp/tmp46dzf7yu.swift:21:9: note: add an explicit type annotation to\
    \ silence this warning\n    var reversed = result.reverse()\n        ^\n     \
    \           : ()\n/tmp/tmp46dzf7yu.swift:22:9: error: invalid redeclaration of\
    \ 'i'\n    var i = 0\n        ^\n/tmp/tmp46dzf7yu.swift:10:9: note: 'i' previously\
    \ declared here\n    var i = 0\n        ^\n/tmp/tmp46dzf7yu.swift:23:24: error:\
    \ value of tuple type '()' has no member 'count'\n    while i < reversed.count\
    \ {\n              ~~~~~~~~ ^~~~~\n/tmp/tmp46dzf7yu.swift:24:30: error: value\
    \ of type '()' has no subscripts\n        let number = reversed[i]\n         \
    \            ~~~~~~~~^\n/tmp/tmp46dzf7yu.swift:26:21: error: value of type '()'\
    \ has no subscripts\n            reversed[i] = \"\\(number)\"\n            ~~~~~~~~^\n\
    /tmp/tmp46dzf7yu.swift:30:12: error: cannot convert return expression of type\
    \ '()' to return type '[String]'\n    return reversed\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number > 9 {\n            number = number\
    \ - 10\n        }\n        if number < 1 {\n            number = 10 + number\n\
    \        }\n        result.append(name[number])\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcokxfw3n.swift:12:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmpcokxfw3n.swift:15:13:\
    \ error: cannot assign to value: 'number' is a 'let' constant\n            number\
    \ = 10 + number\n            ^~~~~~\n/tmp/tmpcokxfw3n.swift:17:23: error: cannot\
    \ find 'name' in scope\n        result.append(name[number])\n                \
    \      ^~~~\n/tmp/tmpcokxfw3n.swift:19:19: error: cannot convert return expression\
    \ of type '()' to return type '[String]'\n    return result.reverse()\n      \
    \     ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for number in arr {\n        if number > 9 {\n           \
    \ number = number - 10\n        }\n        result.append(digits[number])\n   \
    \ }\n    for number in arr {\n        if number > 9 {\n            number = number\
    \ - 10\n        }\n        result.append(digits[number])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9y7pgzbj.swift:13:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmp9y7pgzbj.swift:15:23:\
    \ error: cannot find 'digits' in scope\n        result.append(digits[number])\n\
    \                      ^~~~~~\n/tmp/tmp9y7pgzbj.swift:19:13: error: cannot assign\
    \ to value: 'number' is a 'let' constant\n            number = number - 10\n \
    \           ^~~~~~\n/tmp/tmp9y7pgzbj.swift:21:23: error: cannot find 'digits'\
    \ in scope\n        result.append(digits[number])\n                      ^~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    var result = [String]()\n    var resultReversed =\
    \ [String]()\n    var resultReversedDigit = [String]()\n    var resultDigit =\
    \ [String]()\n    var resultDigitReversed = [String]()\n    var resultDigitReversedDigit\
    \ = [String]()\n    var resultDigitReversedDigitReversed = [String]()\n    var\
    \ resultDigitReversedDigitReversedReversed = [String]()\n    var resultDigitReversedDigitReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3hxp4xdh.swift:24:9: error: invalid redeclaration of 'resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversed'\n\
    \    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n        ^\n/tmp/tmp3hxp4xdh.swift:23:9: note: 'resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversed'\
    \ previously declared here\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n        ^\n/tmp/tmp3hxp4xdh.swift:27:9: error: invalid redeclaration\
    \ of 'resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed'\n\
    \    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n        ^\n/tmp/tmp3hxp4xdh.swift:26:9: note: 'resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed'\
    \ previously declared here\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n        ^\n/tmp/tmp3hxp4xdh.swift:31:9: error: invalid redeclaration\
    \ of 'resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed'\n\
    \    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n        ^\n/tmp/tmp3hxp4xdh.swift:30:9: note: 'resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed'\
    \ previously declared here\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = [String]()\n        ^\n/tmp/tmp3hxp4xdh.swift:32:9: error: type annotation\
    \ missing in pattern\n    var resultDigitReversedDigitReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for number in arr {\n        if number < 1 || number > 9 {\n     \
    \       continue\n        }\n        let digit = String(number)\n        let index\
    \ = Int(digit)\n        result.append(names[index])\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpg7401dzk.swift:16:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n/tmp/tmpg7401dzk.swift:18:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number > 9 {\n            continue\n    \
    \    }\n        let name = ones[number]\n        if let index = result.index(of:\
    \ name) {\n            result[index] = name\n        } else {\n            result.append(name)\n\
    \        }\n    }\n    result.reverse()\n    for number in arr {\n        if number\
    \ > 9 {\n            continue\n        }\n        let name = ones[number]\n  \
    \      if let index = result.index(of: name) {\n            result[index] = name\n\
    \        } else {\n            result.append(name)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvd546dql.swift:14:20: error: cannot find 'ones' in scope\n    \
    \    let name = ones[number]\n                   ^~~~\n/tmp/tmpvd546dql.swift:26:20:\
    \ error: cannot find 'ones' in scope\n        let name = ones[number]\n      \
    \             ^~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var index = 0\n    while index < arr.count {\n        let value = arr[index]\n\
    \        if value < 1 || value > 9 {\n            index = index + 1\n        \
    \    continue\n        }\n        let digit = String(value - 1)\n        let name\
    \ = ones[digit]\n        result.append(name)\n        index = index + 1\n    }\n\
    \    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkb5q6lv5.swift:18:20: error: cannot find 'ones' in scope\n    \
    \    let name = ones[digit]\n                   ^~~~\n/tmp/tmpkb5q6lv5.swift:22:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    while\
    \ i < arr.count {\n        let value = arr[i]\n        if value < 1 || value >\
    \ 9 {\n            i += 1\n            continue\n        }\n        let index\
    \ = value - 10\n        result.append(names[index])\n        i += 1\n    }\n \
    \   return result.reversed()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(by_length(arr:\
    \ [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp494sk80_.swift:21:23: error: cannot find 'names' in scope\n   \
    \     result.append(names[index])\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    if arr.count < 10 {\n\
    \        return result\n    }\n    let min = arr[0]\n    let max = arr[arr.count\
    \ - 1]\n    if min < 1 || max > 9 {\n        return result\n    }\n    let reversed\
    \ = arr.reverse()\n    for n in reversed {\n        let index = n % 10\n     \
    \   let name = String(index)\n        result.append(name)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqv6fqk3s.swift:21:24: error: cannot use mutating member on immutable\
    \ value: 'arr' is a 'let' constant\n    let reversed = arr.reverse()\n       \
    \            ~~~ ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var index = 0\n    for n in arr {\n        if n > 0 && n < 10 {\n       \
    \     result[index] = String(format: \"%@\", digits[Int(n)])\n            index\
    \ += 1\n        }\n    }\n    if index == 0 {\n        return arr\n    }\n   \
    \ for n in arr {\n        if n > 0 && n < 10 {\n            result[index] = String(format:\
    \ \"%@\", digits[Int(n)])\n            index += 1\n        }\n    }\n    return\
    \ result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpf2csn4nz.swift:13:50: error: cannot find 'digits' in scope\n  \
    \          result[index] = String(format: \"%@\", digits[Int(n)])\n          \
    \                                       ^~~~~~\n/tmp/tmpf2csn4nz.swift:13:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result[index] = String(format: \"%@\", digits[Int(n)])\n        \
    \                          ^~~~~~~\n                                   repeating\
    \     count: \n/tmp/tmpf2csn4nz.swift:18:16: error: cannot convert return expression\
    \ of type '[Int]' to return type '[String]'\n        return arr\n            \
    \   ^\n/tmp/tmpf2csn4nz.swift:18:16: note: arguments to generic parameter 'Element'\
    \ ('Int' and 'String') are expected to be equal\n        return arr\n        \
    \       ^\n/tmp/tmpf2csn4nz.swift:22:50: error: cannot find 'digits' in scope\n\
    \            result[index] = String(format: \"%@\", digits[Int(n)])\n        \
    \                                         ^~~~~~\n/tmp/tmpf2csn4nz.swift:22:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            result[index] = String(format: \"%@\", digits[Int(n)])\n        \
    \                          ^~~~~~~\n                                   repeating\
    \     count: \n/tmp/tmpf2csn4nz.swift:26:19: error: cannot convert return expression\
    \ of type '()' to return type '[String]'\n    return result.reverse()\n      \
    \     ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014346
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var index = 0\n    for number in arr {\n        if number > 9 {\n       \
    \     number = number - 10\n        }\n        result[index] = String(number)\n\
    \        index++\n    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoj_ra5ij.swift:13:13: error: cannot assign to value: 'number' is\
    \ a 'let' constant\n            number = number - 10\n            ^~~~~~\n/tmp/tmpoj_ra5ij.swift:16:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        index++\n\
    \             ^~\n/tmp/tmpoj_ra5ij.swift:18:19: error: cannot convert return expression\
    \ of type '()' to return type '[String]'\n    return result.reverse()\n      \
    \     ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    if arr.count < 2 {\n\
    \        return result\n    }\n    let lower = 1\n    let upper = 9\n    var reversed\
    \ = [Int]()\n    for n in arr {\n        if n < lower || n > upper {\n       \
    \     continue\n        }\n        reversed.append(n)\n    }\n    for i in reversed[0..<reversed.count]\
    \ {\n        let index = reversed.index(of: i)\n        let name = String(format:\
    \ \"%@\", arr[index])\n        result.append(name)\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmphypm_h80.swift:26:30: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = reversed.index(of: i)\n          \
    \                   ^\n/tmp/tmphypm_h80.swift:26:30: note: use 'firstIndex(of:)'\
    \ instead\n        let index = reversed.index(of: i)\n                       \
    \      ^~~~~\n                             firstIndex\n/tmp/tmphypm_h80.swift:27:26:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        let name = String(format: \"%@\", arr[index])\n                     \
    \    ^~~~~~~\n                          repeating     count: \n/tmp/tmphypm_h80.swift:27:45:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n        let\
    \ name = String(format: \"%@\", arr[index])\n                                \
    \            ^\n/tmp/tmphypm_h80.swift:26:13: note: short-circuit using 'guard'\
    \ to exit this function early if the optional value contains 'nil'\n        let\
    \ index = reversed.index(of: i)\n            ^\n        guard                \
    \             else { return <#default value#> }\n/tmp/tmphypm_h80.swift:26:30:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let index = reversed.index(of: i)\n                         \
    \    ^\n                                          ?? <#default value#>\n/tmp/tmphypm_h80.swift:26:30:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let index = reversed.index(of: i)\n                         \
    \    ^\n                                         !\n/tmp/tmphypm_h80.swift:27:45:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let name = String(format: \"%@\", arr[index])\n             \
    \                               ^\n                                          \
    \        ?? <#default value#>\n/tmp/tmphypm_h80.swift:27:45: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n        let\
    \ name = String(format"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result: [String]\
    \ = []\n    for number in arr {\n        let digit = number % 10\n        let\
    \ name = digitToName(digit)\n        result.append(name)\n        number /= 10\n\
    \    }\n    return result.reverse()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgzc49gr5.swift:12:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmpgzc49gr5.swift:14:16:\
    \ error: left side of mutating operator isn't mutable: 'number' is a 'let' constant\n\
    \        number /= 10\n        ~~~~~~ ^\n/tmp/tmpgzc49gr5.swift:16:19: error:\
    \ cannot convert return expression of type '()' to return type '[String]'\n  \
    \  return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    var result = [String]()\n    var last\
    \ = 0\n    for n in arr {\n        if n < 10 {\n            result.append(String(last))\n\
    \            last = n\n        } else {\n            let index = last + 9 - n\n\
    \            result.append(String(index))\n            last = index\n        }\n\
    \    }\n    result.append(String(last))\n    return result.reverse()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvoq8mira.swift:25:19: error: cannot convert return expression of\
    \ type '()' to return type '[String]'\n    return result.reverse()\n         \
    \  ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var index = 0\n    while index < arr.count {\n        let value = arr[index]\n\
    \        if value < 1 || value > 9 {\n            index = index + 1\n        \
    \    continue\n        }\n        let digit = value - 10\n        let name = digitToName(digit)\n\
    \        result.append(name)\n        index = index + 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0lk9r86a.swift:18:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for value in arr {\n        if value < min {\n      \
    \      min = value\n        }\n        if value > max {\n            max = value\n\
    \        }\n    }\n    var reversed = [Int]()\n    for i in min..<max {\n    \
    \    reversed.append(i)\n    }\n    reversed.reverse()\n    for value in reversed\
    \ {\n        let index = Int(value) - 1\n        let name = ones[Int(value)]\n\
    \        result.append(name)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmps4slsx2i.swift:17:13: error: cannot assign to value: 'min' is a\
    \ 'let' constant\n            min = value\n            ^~~\n/tmp/tmps4slsx2i.swift:13:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let min = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmps4slsx2i.swift:20:13: error: cannot assign to value: 'max' is\
    \ a 'let' constant\n            max = value\n            ^~~\n/tmp/tmps4slsx2i.swift:14:5:\
    \ note: change 'let' to 'var' to make it mutable\n    let max = arr[0]\n    ^~~\n\
    \    var\n/tmp/tmps4slsx2i.swift:30:20: error: cannot find 'ones' in scope\n \
    \       let name = ones[Int(value)]\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        let digit = number % 10\n        let name =\
    \ digitToName(digit)\n        if name != nil {\n            result.append(name!)\n\
    \        }\n    }\n    if result.isEmpty {\n        return result\n    }\n   \
    \ let reversed = result.reverse()\n    for number in reversed {\n        let digit\
    \ = number % 10\n        let name = digitToName(digit)\n        if name != nil\
    \ {\n            result.append(name!)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy5k7dk3_.swift:12:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmpy5k7dk3_.swift:20:9:\
    \ warning: constant 'reversed' inferred to have type '()', which may be unexpected\n\
    \    let reversed = result.reverse()\n        ^\n/tmp/tmpy5k7dk3_.swift:20:9:\
    \ note: add an explicit type annotation to silence this warning\n    let reversed\
    \ = result.reverse()\n        ^\n                : ()\n/tmp/tmpy5k7dk3_.swift:21:19:\
    \ error: for-in loop requires '()' to conform to 'Sequence'\n    for number in\
    \ reversed {\n                  ^~~~~~~~\n/tmp/tmpy5k7dk3_.swift:23:20: error:\
    \ cannot find 'digitToName' in scope\n        let name = digitToName(digit)\n\
    \                   ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014343
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var i = 0\n    for n in arr {\n        if n < 1 || n > 9 {\n            continue\n\
    \        }\n        result.append(String(format: \"%@\", getName(n)))\n    }\n\
    \    for n in arr {\n        if n < 1 || n > 9 {\n            continue\n     \
    \   }\n        result.append(String(format: \"%@\", getName(n)))\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqcds9_4r.swift:15:44: error: cannot find 'getName' in scope\n \
    \       result.append(String(format: \"%@\", getName(n)))\n                  \
    \                         ^~~~~~~\n/tmp/tmpqcds9_4r.swift:15:29: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \      result.append(String(format: \"%@\", getName(n)))\n                   \
    \         ^~~~~~~\n                             repeating     count: \n/tmp/tmpqcds9_4r.swift:21:44:\
    \ error: cannot find 'getName' in scope\n        result.append(String(format:\
    \ \"%@\", getName(n)))\n                                           ^~~~~~~\n/tmp/tmpqcds9_4r.swift:21:29:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \        result.append(String(format: \"%@\", getName(n)))\n                 \
    \           ^~~~~~~\n                             repeating     count: \n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        let digit = String(number)\n        if digit\
    \ == \"1\" {\n            result.append(contentsOf: ones)\n        } else if digit\
    \ == \"2\" {\n            result.append(contentsOf: twos)\n        } else if digit\
    \ == \"3\" {\n            result.append(contentsOf: threes)\n        } else if\
    \ digit == \"4\" {\n            result.append(contentsOf: fours)\n        } else\
    \ if digit == \"5\" {\n            result.append(contentsOf: fives)\n        }\
    \ else if digit == \"6\" {\n            result.append(contentsOf: sixes)\n   \
    \     } else if digit == \"7\" {\n            result.append(contentsOf: sevens)\n\
    \        } else if digit == \"8\" {\n            result.append(contentsOf: eights)\n\
    \        } else if digit == \"9\" {\n            result.append(contentsOf: nines)\n\
    \        } else {\n            continue\n        }\n    }\n    result.reverse()\n\
    \    for number in result {\n        let digit = String(number)\n        if digit\
    \ == \"1\" {\n            result.removeFirst()\n        } else if digit == \"\
    2\" {\n            result.removeFirst()\n        } else if digit == \"3\" {\n\
    \            result.removeFirst()\n        } else if digit == \"4\" {\n      \
    \      result.removeFirst()\n        } else if digit == \"5\" {\n            result.removeFirst()\n\
    \        } else if digit == \"6\" {\n            result.removeFirst()\n      \
    \  } else if digit == \"7\" {\n            result.removeFirst()\n        } else\
    \ if digit == \"8\" {\n            result.removeFirst()\n        } else if digit\
    \ == \"9\" {\n            result.removeFirst()\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0awcy8km.swift:13:39: error: cannot find 'ones' in scope\n    \
    \        result.append(contentsOf: ones)\n                                   \
    \   ^~~~\n/tmp/tmp0awcy8km.swift:15:39: error: cannot find 'twos' in scope\n \
    \           result.append(contentsOf: twos)\n                                \
    \      ^~~~\n/tmp/tmp0awcy8km.swift:17:39: error: cannot find 'threes' in scope\n\
    \            result.append(contentsOf: threes)\n                             \
    \         ^~~~~~\n/tmp/tmp0awcy8km.swift:19:39: error: cannot find 'fours' in\
    \ scope\n            result.append(contentsOf: fours)\n                      \
    \                ^~~~~\n/tmp/tmp0awcy8km.swift:21:39: error: cannot find 'fives'\
    \ in scope\n            result.append(contentsOf: fives)\n                   \
    \                   ^~~~~\n/tmp/tmp0awcy8km.swift:23:39: error: cannot find 'sixes'\
    \ in scope\n            result.append(contentsOf: sixes)\n                   \
    \                   ^~~~~\n/tmp/tmp0awcy8km.swift:25:39: error: cannot find 'sevens'\
    \ in scope\n            result.append(contentsOf: sevens)\n                  \
    \                    ^~~~~~\n/tmp/tmp0awcy8km.swift:27:39: error: cannot find\
    \ 'eights' in scope\n            result.append(contentsOf: eights)\n         \
    \                             ^~~~~~\n/tmp/tmp0awcy8km.swift:29:39: error: cannot\
    \ find 'nines' in scope\n            result.append(contentsOf: nines)\n      \
    \                                ^~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let maxLength = arr.maxElement()\n\
    \    let minLength = arr.minElement()\n    let maxDigit = maxLength % 10\n   \
    \ let minDigit = minLength % 10\n    let maxDigitName = String(maxDigit + 1)\n\
    \    let minDigitName = String(minDigit + 1)\n    var reversedArray = arr.reverse()\n\
    \    for i in reversedArray {\n        let digit = i % 10\n        let digitName\
    \ = String(digit)\n        let digitNameReversed = digitName.reversed()\n    \
    \    let digitNameReversedName = digitNameReversed.prefix(1) + digitNameReversed\n\
    \        let digitNameReversedNameString = digitNameReversedName.reversed()\n\
    \        let digitNameReversedNameStringReversed = digitNameReversedNameString.reversed()\n\
    \        let digitNameReversedNameStringReversedName = digitNameReversedNameStringReversed.prefix(1)\
    \ + digitNameReversedNameStringReversed\n        let digitNameReversedNameStringReversedNameString\
    \ = digitNameReversedNameStringReversedName.reversed()\n        let digitNameReversedNameStringReversedNameStringReversed\
    \ = digitNameReversedNameStringReversedNameStringReversed.prefix(1) + digitNameReversedNameStringReversedNameStringReversed\n\
    \        let digitNameReversedNameStringReversedNameStringReversedName = digitNameReversedNameStringReversedNameStringReversedName.reversed()\n\
    \        let digitNameReversedNameStringReversedNameStringReversedNameStringReversed\
    \ = digitNameReversedNameStringReversedNameStringReversedNameStringReversed.prefix(1)\
    \ + digitNameReversedNameStringReversedNameStringReversedNameStringReversed\n\
    \        let digitNameReversedNameStringReversedNameStringReversedNameStringReversedName\
    \ = digitNameReversedNameStringReversedNameStringReversedNameStringReversedNameStringReversed.prefix(1)\
    \ + digitNameReversedNameStringReversedNameStringReversedNameStringReversedNameStringReversedName\n\
    \        let digitNameReversedNameStringReversedNameStringReversedNameStringReversedNameStringReversedName\
    \ = digitNameReversedNameStringReversedNameStringReversedNameStringReversedNameStringReversedName.reversed()\n\
    \        let digitNameReversedNameStringReversedNameStringReversedNameStringReversedNameStringReversedNameStringReversed\
    \ = digitNameReversedNameStringReversedNameStringReversedNameStringReversedNameStringReversedNameStringReversed.prefix(1)\
    \ + digitNameReversedNameStringReversedNameStringReversedNameString\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpldtp3_xc.swift:54:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmpldtp3_xc.swift:8:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmpldtp3_xc.swift:13:25: error:\
    \ value of type '[Int]' has no member 'maxElement'\n    let maxLength = arr.maxElement()\n\
    \                    ~~~ ^~~~~~~~~~\n/tmp/tmpldtp3_xc.swift:14:25: error: value\
    \ of type '[Int]' has no member 'minElement'\n    let minLength = arr.minElement()\n\
    \                    ~~~ ^~~~~~~~~~\n/tmp/tmpldtp3_xc.swift:19:29: error: cannot\
    \ use mutating member on immutable value: 'arr' is a 'let' constant\n    var reversedArray\
    \ = arr.reverse()\n                        ~~~ ^\n/tmp/tmpldtp3_xc.swift:38:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpldtp3_xc.swift:29:69:\
    \ error: use of local variable 'digitNameReversedNameStringReversedNameStringReversed'\
    \ before its declaration\n        let digitNameReversedNameStringReversedNameStringReversed\
    \ = digitNameReversedNameStringReversedNameStringReversed.prefix(1) + digitNameReversedNameStringReversedNameStringReversed\n\
    \                                                                    ^\n/tmp/tmpldtp3_xc.swift:29:13:\
    \ note: 'digitNameReversedNameStringReversedNameStringReversed' declared here\n\
    \        let digitNameReversedNameStringReversedNameStringReversed = digitNameReversedNameStringReversedNameStringReversed.prefix(1)\
    \ + digitNameReversedNameStringReversedNameStringReversed\n            ^\n/tmp/tmpldtp3_xc.swift:29:135:\
    \ error: use of local variable 'digitNameReversedNameStringReversedNameStringReversed'\
    \ before its declaration\n        let digitNameReversedNameStringReversedNameStringReversed\
    \ = digitNameReversedNameStringReversedNameStringReversed.prefix(1) + digitNameReversedNameStringReversedNameStringReversed\n\
    \        "
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    var reversed = [Int]()\n    for n in arr {\n        reversed.append(n)\n\
    \    }\n    reversed.reverse()\n    for n in reversed {\n        let index = Int(n)\
    \ - 1\n        if index >= 0 && index < 10 {\n            result.append(names[index])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as\
    \ [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"])\n\
    assert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgsn20tz1.swift:18:27: error: cannot find 'names' in scope\n   \
    \         result.append(names[index])\n                          ^~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else {\n        return []\n    }\n    \n    var result = [String]()\n    \n\
    \    for n in arr {\n        switch n {\n        case 1:\n            result.append(contentsOf:\
    \ ones)\n        case 2:\n            result.append(contentsOf: twos)\n      \
    \  case 3:\n            result.append(contentsOf: threes)\n        case 4:\n \
    \           result.append(contentsOf: fours)\n        case 5:\n            result.append(contentsOf:\
    \ fives)\n        case 6:\n            result.append(contentsOf: sixes)\n    \
    \    case 7:\n            result.append(contentsOf: sevens)\n        case 8:\n\
    \            result.append(contentsOf: eights)\n        case 9:\n            result.append(contentsOf:\
    \ nines)\n        default:\n            break\n        }\n    }\n    \n    for\
    \ n in arr.reversed() {\n        switch n {\n        case 1:\n            result.append(contentsOf:\
    \ ones)\n        case 2:\n            result.append(contentsOf: twos)\n      \
    \  case 3:\n            result.append(contentsOf: threes)\n        case 4:\n \
    \           result.append(contentsOf: fours)\n        case 5:\n            result.append(contentsOf:\
    \ fives)\n        case 6:\n            result.append(contentsOf: sixes)\n    \
    \    case 7:\n            result.append(contentsOf: sevens)\n        case 8:\n\
    \            result.append(contentsOf: eights)\n        case 9:\n            result.append(contentsOf:\
    \ nines)\n        default:\n            break\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1,\
    \ 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\n\
    assert(by_length(arr: [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1,\
    \ 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpoj_fppoo.swift:18:39: error: cannot find 'ones' in scope\n    \
    \        result.append(contentsOf: ones)\n                                   \
    \   ^~~~\n/tmp/tmpoj_fppoo.swift:20:39: error: cannot find 'twos' in scope\n \
    \           result.append(contentsOf: twos)\n                                \
    \      ^~~~\n/tmp/tmpoj_fppoo.swift:22:39: error: cannot find 'threes' in scope\n\
    \            result.append(contentsOf: threes)\n                             \
    \         ^~~~~~\n/tmp/tmpoj_fppoo.swift:24:39: error: cannot find 'fours' in\
    \ scope\n            result.append(contentsOf: fours)\n                      \
    \                ^~~~~\n/tmp/tmpoj_fppoo.swift:26:39: error: cannot find 'fives'\
    \ in scope\n            result.append(contentsOf: fives)\n                   \
    \                   ^~~~~\n/tmp/tmpoj_fppoo.swift:28:39: error: cannot find 'sixes'\
    \ in scope\n            result.append(contentsOf: sixes)\n                   \
    \                   ^~~~~\n/tmp/tmpoj_fppoo.swift:30:39: error: cannot find 'sevens'\
    \ in scope\n            result.append(contentsOf: sevens)\n                  \
    \                    ^~~~~~\n/tmp/tmpoj_fppoo.swift:32:39: error: cannot find\
    \ 'eights' in scope\n            result.append(contentsOf: eights)\n         \
    \                             ^~~~~~\n/tmp/tmpoj_fppoo.swift:34:39: error: cannot\
    \ find 'nines' in scope\n            result.append(contentsOf: nines)\n      \
    \                                ^~~~~\n/tmp/tmpoj_fppoo.swift:43:39: error: cannot\
    \ find 'ones' in scope\n            result.append(contentsOf: ones)\n        \
    \                              ^~~~\n/tmp/tmpoj_fppoo.swift:45:39: error: cannot\
    \ find 'twos' in scope\n            result.append(contentsOf: twos)\n        \
    \                              ^~~~\n/tmp/tmpoj_fppoo.swift:47:39: error: cannot\
    \ find 'threes' in scope\n            result.append(contentsOf: threes)\n    \
    \                                  ^~~~~~\n/tmp/tmpoj_fppoo.swift:49:39: error:\
    \ cannot find 'fours' in scope\n            result.append(contentsOf: fours)\n\
    \                                      ^~~~~\n/tmp/tmpoj_fppoo.swift:51:39: err"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        let name = getName(number)\n        if name\
    \ != nil {\n            result.append(name!)\n        }\n    }\n    return result.reverse()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplja_urct.swift:11:20: error: cannot find 'getName' in scope\n \
    \       let name = getName(number)\n                   ^~~~~~~\n/tmp/tmplja_urct.swift:16:19:\
    \ error: cannot convert return expression of type '()' to return type '[String]'\n\
    \    return result.reverse()\n           ~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    let ten = arr[9]\n    let eleven = arr[10]\n    let\
    \ twelve = arr[11]\n    let thirteen = arr[12]\n    let fourteen = arr[13]\n \
    \   let fifteen = arr[14]\n    let sixteen = arr[15]\n    let seventeen = arr[16]\n\
    \    let eighteen = arr[17]\n    let nineteen = arr[18]\n    let twenty = arr[19]\n\
    \    let thirty = arr[20]\n    let fourty = arr[21]\n    let fifty = arr[22]\n\
    \    let sixty = arr[23]\n    let seventy = arr[24]\n    let eighty = arr[25]\n\
    \    let ninety = arr[26]\n    let hundred = arr[27]\n    let thousand = arr[28]\n\
    \    let million = arr[29]\n    let billion = arr[30]\n    let trillion = arr[31]\n\
    \    let quadrillion = arr[32]\n    let quintillion = arr[33]\n    let sextillion\
    \ = arr[34]\n    let septillion = arr[35]\n    let octillion = arr[36]\n    let\
    \ nonillion = arr[37]\n    let decillion = arr[38]\n    let undecillion = arr[39]\n\
    \    let duodecillion = arr[40]\n    let tredecillion = arr[41]\n    let quattuordecillion\
    \ = arr[42]\n    let quindecillion = arr[43]\n    let sexdecillion = arr[44]\n\
    \    let septendecillion = arr[45]\n    let octodecillion = arr[46]\n    let novemdecillion\
    \ = arr[47]\n    let vigintillion = arr[48]\n    let unvigintillion = arr[49]\n\
    \    let duovigintillion = arr[50]\n    let trevigintillion = arr[51]\n    let\
    \ quattuorvigintillion = arr[52]\n    let quinvigintillion = arr[53]\n    let\
    \ sexvigintillion = arr[54]\n    let septenvigintillion = arr[55]\n    let octovigin\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp54_hprow.swift:69:9: error: type annotation missing in pattern\n\
    \    let octovigin\n        ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let ones = arr.filter{ $0 <= 1 && $0 > 9 }\n    let\
    \ tens = arr.filter{ $0 <= 10 && $0 > 9 }\n    let hundreds = arr.filter{ $0 <=\
    \ 100 && $0 > 9 }\n    let thousands = arr.filter{ $0 <= 1000 && $0 > 9 }\n  \
    \  let millions = arr.filter{ $0 <= 10000 && $0 > 9 }\n    let billions = arr.filter{\
    \ $0 <= 100000 && $0 > 9 }\n    let trillions = arr.filter{ $0 <= 1000000 && $0\
    \ > 9 }\n    let quadrillions = arr.filter{ $0 <= 10000000 && $0 > 9 }\n    let\
    \ quintillions = arr.filter{ $0 <= 100000000 && $0 > 9 }\n    let sextillions\
    \ = arr.filter{ $0 <= 1000000000 && $0 > 9 }\n    let septillions = arr.filter{\
    \ $0 <= 10000000000 && $0 > 9 }\n    let octillions = arr.filter{ $0 <= 100000000000\
    \ && $0 > 9 }\n    let nonillions = arr.filter{ $0 <= 1000000000000 && $0 > 9\
    \ }\n    let decillions = arr.filter{ $0 <= 100000000000000 && $0 > 9 }\n    let\
    \ undecillions = arr.filter{ $0 <= 1000000000000000 && $0 > 9 }\n    let duodecillions\
    \ = arr.filter{ $0 <= 10000000000000000 && $0 > 9 }\n    let tredecillions = arr.filter{\
    \ $0 <= 100000000000000000 && $0 > 9 }\n    let quattuordecillions = arr.filter{\
    \ $0 <= 1000000000000000000 && $0 > 9 }\n    let quindecillions = arr.filter{\
    \ $0 <= 10000000000000000000 && $0 > 9 }\n    let sexdecillions = arr.filter{\
    \ $0 <= 100000000000000000000 && $0 > 9 }\n    let septendecillions = arr.filter{\
    \ $0 <= 10000000000000000000000 && $0 > 9 }\n    let octodecillions = arr.filter{\
    \ $0 <= 100000000000000000000000 && $0 > 9 }\n    let novemdecillions = arr.filter{\
    \ $0 <= 1000000000000000000000000 && $0 > 9 }\n    let vigintillions = arr.filter{\
    \ $0 <= 10000000000000000000000000 && $0 > 9 }\n    let thousandsOfThousands =\
    \ arr.filter{ $0 <= 100000000000000000000000000 && $0 > 9 }\n    let milli\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcnu9fi1s.swift:35:9: error: type annotation missing in pattern\n\
    \    let milli\n        ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: -4
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    var i = 0\n    for number\
    \ in arr {\n        if number < 1 || number > 9 {\n            continue\n    \
    \    }\n        let digit = String(number)\n        result.append(digit)\n   \
    \     i += 1\n        if i == 3 {\n            result.reverse()\n            i\
    \ = 0\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: Exception
  stderr: 'tmpusejksxu/tmpusejksxu.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24e429cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24e3f93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24e3f93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24e3f927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpusejksxu                        0x000056047209fa31 <unavailable> + 6705

    5    libc.so.6                          0x00002b24e4488460 __libc_start_main +
    245

    6    tmpusejksxu                        0x000056047209f4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014346
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        let digit = number % 10\n        if digit ==\
    \ 0 {\n            continue\n        }\n        let name = digitToName(digit)\n\
    \        result.append(name)\n    }\n    return result.reverse().map { digitToName($0)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\nassert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr:\
    \ [1, -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\"\
    , \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo0rb9ik2.swift:15:20: error: cannot find 'digitToName' in scope\n\
    \        let name = digitToName(digit)\n                   ^~~~~~~~~~~\n/tmp/tmpo0rb9ik2.swift:18:35:\
    \ error: cannot find 'digitToName' in scope\n    return result.reverse().map {\
    \ digitToName($0) }\n                                  ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = arr[0]\n  \
    \  let max = arr[0]\n    for i in arr {\n        if i < min {\n            min\
    \ = i\n        }\n        if i > max {\n            max = i\n        }\n    }\n\
    \    let one = String(format: \"%@\", One)\n    let two = String(format: \"%@\"\
    , Two)\n    let three = String(format: \"%@\", Three)\n    let four = String(format:\
    \ \"%@\", Four)\n    let five = String(format: \"%@\", Five)\n    let six = String(format:\
    \ \"%@\", Six)\n    let seven = String(format: \"%@\", Seven)\n    let eight =\
    \ String(format: \"%@\", Eight)\n    let nine = String(format: \"%@\", Nine)\n\
    \    let ten = String(format: \"%@\", Ten)\n    let hundred = String(format: \"\
    %@\", Hundred)\n    let thousand = String(format: \"%@\", Thousand)\n    let million\
    \ = String(format: \"%@\", Million)\n    let billion = String(format: \"%@\",\
    \ Billion)\n    let trillion = String(format: \"%@\", Trillion)\n    let quadrillion\
    \ = String(format: \"%@\", Quadrillion)\n    let quintillion = String(format:\
    \ \"%@\", Quintillion)\n    let sextillion = String(format: \"%@\", Sextillion)\n\
    \    let septillion = String(format: \"%@\", Septillion)\n    let octillion =\
    \ String(format: \"%@\", Octillion)\n    let nonillion = String(format: \"%@\"\
    , Nonillion)\n    let decillion = String(format: \"%@\", Decillion)\n    let undecillion\
    \ = String(format: \"%@\", Undecillion)\n    let duodecillion = String(format:\
    \ \"%@\", Duodecillion)\n    let tredecillion = String(format: \"%@\", Tredecillion)\n\
    \    let quattuordecillion = String(format: \"%@\", Quattuordecillion)\n    let\
    \ quindecillion = String(format: \"%@\", Quindecillion)\n    let sexdecillion\
    \ = String(format: \"%@\", Sexdecillion)\n    let septendecillion = String(format:\
    \ \"%@\", Septendecillion)\n    let octodecillion = \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4li8ln9s.swift:52:24: error: expected initial value after '='\n\
    \    let octodecillion = \n                       ^\n/tmp/tmp4li8ln9s.swift:17:13:\
    \ error: cannot assign to value: 'min' is a 'let' constant\n            min =\
    \ i\n            ^~~\n/tmp/tmp4li8ln9s.swift:13:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let min = arr[0]\n    ^~~\n    var\n/tmp/tmp4li8ln9s.swift:20:13:\
    \ error: cannot assign to value: 'max' is a 'let' constant\n            max =\
    \ i\n            ^~~\n/tmp/tmp4li8ln9s.swift:14:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let max = arr[0]\n    ^~~\n    var\n/tmp/tmp4li8ln9s.swift:23:36:\
    \ error: cannot find 'One' in scope\n    let one = String(format: \"%@\", One)\n\
    \                                   ^~~\n/tmp/tmp4li8ln9s.swift:23:21: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let one = String(format: \"%@\", One)\n                    ^~~~~~~\n    \
    \                 repeating     count: \n/tmp/tmp4li8ln9s.swift:24:36: error:\
    \ cannot find 'Two' in scope\n    let two = String(format: \"%@\", Two)\n    \
    \                               ^~~\n/tmp/tmp4li8ln9s.swift:24:21: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  let two = String(format: \"%@\", Two)\n                    ^~~~~~~\n      \
    \               repeating     count: \n/tmp/tmp4li8ln9s.swift:25:38: error: cannot\
    \ find 'Three' in scope\n    let three = String(format: \"%@\", Three)\n     \
    \                                ^~~~~\n/tmp/tmp4li8ln9s.swift:25:23: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  let three = String(format: \"%@\", Three)\n                      ^~~~~~~\n\
    \                       repeating     count: \n/tmp/tmp4li8ln9s.swift:26:37: error:\
    \ cannot find 'Four' in scope\n    let four = String(format: \"%@\", Four)\n \
    \                                   ^~~~\n/tmp/tmp4li8ln9s.swift:26:22: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let four = String(format: \"%@\", Four)\n          "
  stdout: ''
  timestamp: 1660014346
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = Int(One)\n\
    \    let two = Int(Two)\n    let three = Int(Three)\n    let four = Int(Four)\n\
    \    let five = Int(Five)\n    let six = Int(Six)\n    let seven = Int(Seven)\n\
    \    let eight = Int(Eight)\n    let nine = Int(Nine)\n    let ten = Int(Ten)\n\
    \    let hundred = Int(Hundred)\n    let thousand = Int(Thousand)\n    let million\
    \ = Int(Million)\n    let billion = Int(Billion)\n    let trillion = Int(Trillion)\n\
    \    let quadrillion = Int(Quadrillion)\n    let quintillion = Int(Quintillion)\n\
    \    let sextillion = Int(Sextillion)\n    let septillion = Int(Septillion)\n\
    \    let octillion = Int(Octillion)\n    let nonillion = Int(Nonillion)\n    let\
    \ decillion = Int(Decillion)\n    let undecillion = Int(Undecillion)\n    let\
    \ duodecillion = Int(Duodecillion)\n    let tredecillion = Int(Tredecillion)\n\
    \    let quattuordecillion = Int(Quattuordecillion)\n    let quindecillion = Int(Quindecillion)\n\
    \    let sexdecillion = Int(Sexdecillion)\n    let septendecillion = Int(Septendecillion)\n\
    \    let octodecillion = Int(Octodecillion)\n    let novemdecillion = Int(Novemdecillion)\n\
    \    let vigintillion = Int(Vigintillion)\n    let unvigintillion = Int(Unvigintillion)\n\
    \    let duovigintillion = Int(Duovigintillion)\n    let trevigintillion = Int(Trevigintillion)\n\
    \    let quattuorvigintillion = Int(Quattuorvigintillion)\n    let quinvigintillion\
    \ = Int(Quinvigintillion)\n    let sexvigintillion = Int(Sexvigintillion)\n  \
    \  let septenvigintillion = Int(Septenvigintillion)\n    let octovigintillion\
    \ = Int(Octovigintillion)\n    let novemvi\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqewuc0re.swift:13:19: error: cannot find 'One' in scope\n    let\
    \ one = Int(One)\n                  ^~~\n/tmp/tmpqewuc0re.swift:14:19: error:\
    \ cannot find 'Two' in scope\n    let two = Int(Two)\n                  ^~~\n\
    /tmp/tmpqewuc0re.swift:15:21: error: cannot find 'Three' in scope\n    let three\
    \ = Int(Three)\n                    ^~~~~\n/tmp/tmpqewuc0re.swift:16:20: error:\
    \ cannot find 'Four' in scope\n    let four = Int(Four)\n                   ^~~~\n\
    /tmp/tmpqewuc0re.swift:17:20: error: cannot find 'Five' in scope\n    let five\
    \ = Int(Five)\n                   ^~~~\n/tmp/tmpqewuc0re.swift:18:19: error: cannot\
    \ find 'Six' in scope\n    let six = Int(Six)\n                  ^~~\n/tmp/tmpqewuc0re.swift:19:21:\
    \ error: cannot find 'Seven' in scope\n    let seven = Int(Seven)\n          \
    \          ^~~~~\n/tmp/tmpqewuc0re.swift:20:21: error: cannot find 'Eight' in\
    \ scope\n    let eight = Int(Eight)\n                    ^~~~~\n/tmp/tmpqewuc0re.swift:21:20:\
    \ error: cannot find 'Nine' in scope\n    let nine = Int(Nine)\n             \
    \      ^~~~\n/tmp/tmpqewuc0re.swift:22:19: error: cannot find 'Ten' in scope\n\
    \    let ten = Int(Ten)\n                  ^~~\n/tmp/tmpqewuc0re.swift:23:23:\
    \ error: cannot find 'Hundred' in scope\n    let hundred = Int(Hundred)\n    \
    \                  ^~~~~~~\n/tmp/tmpqewuc0re.swift:24:24: error: cannot find 'Thousand'\
    \ in scope\n    let thousand = Int(Thousand)\n                       ^~~~~~~~\n\
    /tmp/tmpqewuc0re.swift:25:23: error: cannot find 'Million' in scope\n    let million\
    \ = Int(Million)\n                      ^~~~~~~\n/tmp/tmpqewuc0re.swift:26:23:\
    \ error: cannot find 'Billion' in scope\n    let billion = Int(Billion)\n    \
    \                  ^~~~~~~\n/tmp/tmpqewuc0re.swift:27:24: error: cannot find 'Trillion'\
    \ in scope\n    let trillion = Int(Trillion)\n                       ^~~~~~~~\n\
    /tmp/tmpqewuc0re.swift:28:27: error: cannot find 'Quadrillion' in scope\n    let\
    \ quadrillion = Int(Quadrillion)\n                          ^~~~~~~~~~~\n/tmp/tmpqewuc0re.swift:29:27:\
    \ error: cannot find 'Quintillion' in scope\n    let quintillion = Int(Quintillion"
  stdout: ''
  timestamp: 1660014346
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    for number in arr {\n        if number > 9 {\n            continue\n    \
    \    }\n        if number < 1 {\n            continue\n        }\n        let\
    \ name = ones[number]\n        result.append(name)\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmpznmx1rqk.swift:17:20: error: cannot find 'ones' in scope\n    \
    \    let name = ones[number]\n                   ^~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let one = arr[0]\n  \
    \  let two = arr[1]\n    let three = arr[2]\n    let four = arr[3]\n    let five\
    \ = arr[4]\n    let six = arr[5]\n    let seven = arr[6]\n    let eight = arr[7]\n\
    \    let nine = arr[8]\n    if one > 9 {\n        one = one - 10\n    }\n    if\
    \ two > 9 {\n        two = two - 10\n    }\n    if three > 9 {\n        three\
    \ = three - 10\n    }\n    if four > 9 {\n        four = four - 10\n    }\n  \
    \  if five > 9 {\n        five = five - 10\n    }\n    if six > 9 {\n        six\
    \ = six - 10\n    }\n    if seven > 9 {\n        seven = seven - 10\n    }\n \
    \   if eight > 9 {\n        eight = eight - 10\n    }\n    if nine > 9 {\n   \
    \     nine = nine - 10\n    }\n    if one < 1 {\n        one = 1\n    }\n    if\
    \ two < 1 {\n        two = 1\n    }\n    if three < 1 {\n        three = 1\n \
    \   }\n    if four < 1 {\n        four = 1\n    }\n    if five < 1 {\n       \
    \ five = 1\n    }\n    if six < 1 {\n        six = 0\n    }\n    if seven < 1\
    \ {\n        seven = 0\n    }\n    if eight < 1 {\n        eight = 0\n    }\n\
    \    if nine < 1 {\n        nine = 0\n    }\n    if one == 0 {\n        one =\
    \ \"One\"\n    }\n    if two == 0 {\n        two = \"Two\"\n    }\n    if three\
    \ == 0 {\n        three = \"Three\"\n    }\n    if four == 0 {\n        four =\
    \ \"Four\"\n    }\n    if five == 0 {\n        five = \"Five\"\n    }\n    if\
    \ six == 0 {\n        six = \"Six\"\n    }\n    if seven == 0 {\n        seven\
    \ = \"Seven\"\n    }\n    if eight == 0 {\n        eight = \"Eight\"\n    }\n\
    \    if nine == 0 {\n        nine = \"Nine\"\n    }\n    if one == 1 {\n     \
    \   one = \"One\"\n    }\n    if two == 1 {\n        two = \"Two\"\n    }\n  \
    \  if three == 1 {\n        three = \"Three\"\n    }\n    if four == 1 {\n   \
    \     four = \"Four\"\n    }\n    if five == 1 {\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"\
    Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6r6ejx6c.swift:136:63: error: expected '}' at end of brace statement\n\
    assert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n       \
    \                                                       ^\n/tmp/tmp6r6ejx6c.swift:8:40:\
    \ note: to match this opening '{'\nfunc by_length(arr: [Int]) -> [String] {\n\
    \                                       ^\n/tmp/tmp6r6ejx6c.swift:23:9: error:\
    \ cannot assign to value: 'one' is a 'let' constant\n        one = one - 10\n\
    \        ^~~\n/tmp/tmp6r6ejx6c.swift:13:5: note: change 'let' to 'var' to make\
    \ it mutable\n    let one = arr[0]\n    ^~~\n    var\n/tmp/tmp6r6ejx6c.swift:26:9:\
    \ error: cannot assign to value: 'two' is a 'let' constant\n        two = two\
    \ - 10\n        ^~~\n/tmp/tmp6r6ejx6c.swift:14:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let two = arr[1]\n    ^~~\n    var\n/tmp/tmp6r6ejx6c.swift:29:9:\
    \ error: cannot assign to value: 'three' is a 'let' constant\n        three =\
    \ three - 10\n        ^~~~~\n/tmp/tmp6r6ejx6c.swift:15:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let three = arr[2]\n    ^~~\n    var\n/tmp/tmp6r6ejx6c.swift:32:9:\
    \ error: cannot assign to value: 'four' is a 'let' constant\n        four = four\
    \ - 10\n        ^~~~\n/tmp/tmp6r6ejx6c.swift:16:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let four = arr[3]\n    ^~~\n    var\n/tmp/tmp6r6ejx6c.swift:35:9:\
    \ error: cannot assign to value: 'five' is a 'let' constant\n        five = five\
    \ - 10\n        ^~~~\n/tmp/tmp6r6ejx6c.swift:17:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let five = arr[4]\n    ^~~\n    var\n/tmp/tmp6r6ejx6c.swift:38:9:\
    \ error: cannot assign to value: 'six' is a 'let' constant\n        six = six\
    \ - 10\n        ^~~\n/tmp/tmp6r6ejx6c.swift:18:5: note: change 'let' to 'var'\
    \ to make it mutable\n    let six = arr[5]\n    ^~~\n    var\n/tmp/tmp6r6ejx6c.swift:41:9:\
    \ error: cannot assign to value: 'seven' is a 'let' constant\n        seven =\
    \ seven - 10\n        ^~~~~\n/tmp/tmp6r6ejx6c.swift:19:5: note: change 'let' to\
    \ 'var' to make it mutable\n    let seven = arr[6]\n    ^~~\n    var\n/tmp/tmp6r6ejx6c.swift:44:9:\
    \ erro"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    guard arr.count <= 9 else { return [] }\n    var result\
    \ = [String]()\n    var index = 0\n    while index < arr.count {\n        let\
    \ value = arr[index]\n        if value < 1 || value > 9 {\n            guard let\
    \ index = arr.index(of: value) else { return [] }\n            arr.remove(at:\
    \ index)\n        } else {\n            result.append(String(describing: value))\n\
    \        }\n        index += 1\n    }\n    guard arr.count > 0 else { return []\
    \ }\n    guard arr.count <= 9 else { return [] }\n    for value in arr {\n   \
    \     let index = arr.index(of: value)\n        arr.remove(at: index)\n      \
    \  result.append(String(describing: value))\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_dwy95zo.swift:16:35: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n            guard let index = arr.index(of: value) else\
    \ { return [] }\n                                  ^\n/tmp/tmp_dwy95zo.swift:16:35:\
    \ note: use 'firstIndex(of:)' instead\n            guard let index = arr.index(of:\
    \ value) else { return [] }\n                                  ^~~~~\n       \
    \                           firstIndex\n/tmp/tmp_dwy95zo.swift:17:17: error: cannot\
    \ use mutating member on immutable value: 'arr' is a 'let' constant\n        \
    \    arr.remove(at: index)\n            ~~~ ^\n/tmp/tmp_dwy95zo.swift:26:25: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        let index\
    \ = arr.index(of: value)\n                        ^\n/tmp/tmp_dwy95zo.swift:26:25:\
    \ note: use 'firstIndex(of:)' instead\n        let index = arr.index(of: value)\n\
    \                        ^~~~~\n                        firstIndex\n/tmp/tmp_dwy95zo.swift:27:13:\
    \ error: no exact matches in call to instance method 'remove'\n        arr.remove(at:\
    \ index)\n            ^\n/tmp/tmp_dwy95zo.swift:27:13: note: found candidate with\
    \ type '(Int) -> Int'\n        arr.remove(at: index)\n            ^\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    guard arr.count >\
    \ 0 else { return [] }\n    let minLength = min(arr.count, 9)\n    let maxLength\
    \ = max(arr.count, 9)\n    var result = [String]()\n    for i in minLength...maxLength\
    \ {\n        let index = arr.index(of: i)\n        if index != nil {\n       \
    \     result.append(names[index!])\n        }\n    }\n    return result.reversed()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\
    assert(by_length(arr: [] as [Int]) == [] as [String])\nassert(by_length(arr: [1,\
    \ -1, 55]) == [\"One\"])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\",\
    \ \"Two\", \"One\"])\nassert(by_length(arr: [9, 4, 8]) == [\"Nine\", \"Eight\"\
    , \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmplfz1n5g6.swift:14:25: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        let index = arr.index(of: i)\n               \
    \         ^\n/tmp/tmplfz1n5g6.swift:14:25: note: use 'firstIndex(of:)' instead\n\
    \        let index = arr.index(of: i)\n                        ^~~~~\n       \
    \                 firstIndex\n/tmp/tmplfz1n5g6.swift:16:27: error: cannot find\
    \ 'names' in scope\n            result.append(names[index!])\n               \
    \           ^~~~~\n"
  stdout: ''
  timestamp: 1660014345
- exit_code: 1
  program: "\n/// Given an array of integers, sort the integers that are between 1\
    \ and 9 inclusive,\n/// reverse the resulting array, and then replace each digit\
    \ by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"\
    Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// If the\
    \ array is empty, return an empty array:\n/// If the array has any strange number\
    \ ignore it:\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n\
    \    if arr.isEmpty {\n        return result\n    }\n    let min = 1\n    let\
    \ max = 9\n    let len = arr.count\n    let digits = (0..<len).map { arr[Int($0)]\
    \ }\n    let reversed = digits.reversed()\n    let one = \"One\"\n    let two\
    \ = \"Two\"\n    let three = \"Three\"\n    let four = \"Four\"\n    let five\
    \ = \"Five\"\n    let six = \"Six\"\n    let seven = \"Seven\"\n    let eight\
    \ = \"Eight\"\n    let nine = \"Nine\"\n    let oneDigit = one\n    let twoDigit\
    \ = two\n    let threeDigit = three\n    let fourDigit = four\n    let fiveDigit\
    \ = five\n    let sixDigit = six\n    let sevenDigit = seven\n    let eightDigit\
    \ = eight\n    let nineDigit = nine\n    let oneDigitReversed = oneDigit.reversed()\n\
    \    let twoDigitReversed = twoDigit.reversed()\n    let threeDigitReversed =\
    \ threeDigit.reversed()\n    let fourDigitReversed = fourDigit.reversed()\n  \
    \  let fiveDigitReversed = fiveDigit.reversed()\n    let sixDigitReversed = sixDigit.reversed()\n\
    \    let sevenDigitReversed = sevenDigit.reversed()\n    let eightDigitReversed\
    \ = eightDigit.reversed()\n    let nineDigitReversed = nineDigit.reversed()\n\
    \    let oneDigitReversedReversed = oneDigitReversed.reversed()\n    let twoDigitReversedReversed\
    \ = twoDigitReversed.reversed()\n    let threeDigitReversedReversed = threeDigitReversed.reversed()\n\
    \    let fourDigitReversedReversed = fourDigitReversed.reversed()\n    let fiveDigitReversedReversed\
    \ = fiveDigitReversed.reversed()\n    let sixDigitReversedReversed = sixDigitReversed.reversed()\n\
    \    let sevenDigitReversedReversed = sevenDigitReversed.reversed()\n    let eightDigitReversedReversed\
    \ = eightDigitReversed.reversed()\n    let nineDigitReversedReversed = nineDigitReversed.reversed()\n\
    \    let oneDigitReversedReversedReversed = oneDigitReversedReversed.reversed()\n\
    \    let twoDigitReversedReversedReversed = twoDigitReversedReversed.reversed()\n\
    \    let threeDigitReversedReversedReversed = threeDigitReversedReversed.reversed()\n\
    \    let fourDigitReversedReversedReversed = fourDigitReversedReversed.reversed()\n\
    \    let fiveDigitReversedReversedReversed = fiveDigitReversedReversed.reversed()\n\
    \    let sixDigitReversedReversedReversed = six\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\nassert(by_length(arr:\
    \ [] as [Int]) == [] as [String])\nassert(by_length(arr: [1, -1, 55]) == [\"One\"\
    ])\nassert(by_length(arr: [1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\nassert(by_length(arr:\
    \ [9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_ht6lwmd.swift:9:9: warning: variable 'result' was never mutated;\
    \ consider changing to 'let' constant\n    var result = [String]()\n    ~~~ ^\n\
    \    let\n/tmp/tmp_ht6lwmd.swift:13:9: warning: initialization of immutable value\
    \ 'min' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let min = 1\n    ~~~~^~~\n    _\n/tmp/tmp_ht6lwmd.swift:14:9: warning:\
    \ initialization of immutable value 'max' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let max = 9\n    ~~~~^~~\n    _\n/tmp/tmp_ht6lwmd.swift:17:9:\
    \ warning: initialization of immutable value 'reversed' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let reversed = digits.reversed()\n\
    \    ~~~~^~~~~~~~\n    _\n/tmp/tmp_ht6lwmd.swift:50:9: warning: initialization\
    \ of immutable value 'sixDigitReversedReversed' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sixDigitReversedReversed = sixDigitReversed.reversed()\n\
    \    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp_ht6lwmd.swift:51:9: warning:\
    \ initialization of immutable value 'sevenDigitReversedReversed' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    let sevenDigitReversedReversed\
    \ = sevenDigitReversed.reversed()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n\
    /tmp/tmp_ht6lwmd.swift:52:9: warning: initialization of immutable value 'eightDigitReversedReversed'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let eightDigitReversedReversed = eightDigitReversed.reversed()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp_ht6lwmd.swift:53:9: warning: initialization of immutable value\
    \ 'nineDigitReversedReversed' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    let nineDigitReversedReversed = nineDigitReversed.reversed()\n\
    \    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp_ht6lwmd.swift:54:9: warning:\
    \ initialization of immutable value 'oneDigitReversedReversedReversed' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    let on"
  stdout: ''
  timestamp: 1660014346
