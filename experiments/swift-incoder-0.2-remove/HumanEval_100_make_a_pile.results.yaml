language: swift
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    } else\
    \ {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmph3jj2z59/tmph3jj2z59.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcff1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcfeea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcfeea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcfeea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph3jj2z59                        0x0000563155bbf4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002abcff398460 __libc_start_main +
    245

    6    tmph3jj2z59                        0x0000563155bbf119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n   \
    \ if n % 2 == 1 {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpunv8bd46/tmpunv8bd46.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc755c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc752b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc752b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc752b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunv8bd46                        0x0000562913df44d2 <unavailable> + 5330

    5    libc.so.6                          0x00002acc757ae460 __libc_start_main +
    245

    6    tmpunv8bd46                        0x0000562913df4119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while n != 0 {\n        stones.append(n % 2 == 0 ? stones[level]\
    \ : stones[level] + 1)\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp2l2xdlpm.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp2l2xdlpm.swift:16:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    var nextLevel = 0\n    var nextLevelStones = 0\n    var\
    \ evenLevel = 0\n    var oddLevel = 0\n    var evenLevelStones = 0\n    var oddLevelStones\
    \ = 0\n    while level < n {\n        nextLevel = nextLevel + 2\n        nextLevelStones\
    \ = nextLevelStones + nextLevel\n        level = level + 1\n    }\n    if n %\
    \ 2 == 0 {\n        evenLevel = evenLevel + 2\n        evenLevelStones = evenLevelStones\
    \ + evenLevel\n    } else {\n        oddLevel = oddLevel + 2\n        oddLevelStones\
    \ = oddLevelStones + oddLevel\n    }\n    stones.append(nextLevelStones)\n   \
    \ stones.append(evenLevelStones)\n    stones.append(oddLevelStones)\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpzkyxhlc5/tmpzkyxhlc5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a09c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a06b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a06b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a06b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzkyxhlc5                        0x0000556e5bda14d2 <unavailable> + 5330

    5    libc.so.6                          0x00002af0a0bac460 __libc_start_main +
    245

    6    tmpzkyxhlc5                        0x0000556e5bda1119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n   \
    \ if n % 2 == 1 {\n        pile.append(n/2)\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp7shnwrxi/tmp7shnwrxi.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61441dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6143ed6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6143ed6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6143ed57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7shnwrxi                        0x00005617b93604d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b61443cb460 __libc_start_main +
    245

    6    tmp7shnwrxi                        0x00005617b9360119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        pile[level]\
    \ = stones\n        stones += (n % 2 == 0) ? 1 : -1\n        n /= 2\n        level++\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp0kooktvm.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp0kooktvm.swift:18:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 2\n     \
    \       level++\n        }\n        n = n / 2\n    }\n    return pile\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpset9kk7l.swift:21:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpset9kk7l.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile = append(pile, level)\n   \
    \     if n % 2 == 0 {\n            n /= 2\n        } else {\n            n = 3\
    \ * n + 1\n        }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpeizw1f3x.swift:14:16: error: cannot find 'append' in scope\n  \
    \      pile = append(pile, level)\n               ^~~~~~\n/tmp/tmpeizw1f3x.swift:16:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpeizw1f3x.swift:18:13: error: cannot\
    \ assign to value: 'n' is a 'let' constant\n            n = 3 * n + 1\n      \
    \      ^\n/tmp/tmpeizw1f3x.swift:20:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 1 {\n        pile.append(n/2)\n    }\n   \
    \ if n % 2 == 0 {\n        pile.append(n/2)\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpzquo21dp/tmpzquo21dp.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08613a6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b086109db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b086109d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b086109c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzquo21dp                        0x000056497b8bb4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b0861592460 __libc_start_main +
    245

    6    tmpzquo21dp                        0x000056497b8bb119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile[level] = n\n        n -= n\
    \ % 2 == 0 ? n / 2 : n / 2 + 1\n        level += 1\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpn5z5axji.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile: [Int] = []\n\
    \    var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 0 {\n            pile.append(stones)\n            stones = stones / 2\n\
    \        } else {\n            pile.append(stones)\n            stones = stones\
    \ / 2\n            pile.append(stones)\n            stones = stones / 2\n    \
    \    }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptywwxvnp.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var count = 0\n    for _ in 0..<n {\n        pile.append(count)\n        count\
    \ += 1\n    }\n    if n % 2 == 0 {\n        for _ in 0..<n {\n            pile.append(count\
    \ % 2)\n            count /= 2\n        }\n    } else {\n        for _ in 0..<n\
    \ {\n            pile.append(count % 2)\n            count /= 2\n        }\n \
    \   }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpr7_98j87/tmpr7_98j87.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34539cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34536c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34536c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34536c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr7_98j87                        0x000055a528aaf5c2 <unavailable> + 5570

    5    libc.so.6                          0x00002b3453bba460 __libc_start_main +
    245

    6    tmpr7_98j87                        0x000055a528aaf209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n / 2)\n    }\n \
    \   if n % 2 == 1 {\n        pile.append(n / 2 + 1)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpggg0fs9a/tmpggg0fs9a.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1742cd2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17429c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17429c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17429c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpggg0fs9a                        0x00005614dd4ae4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b1742ebe460 __libc_start_main +
    245

    6    tmpggg0fs9a                        0x00005614dd4ae119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while n > 0 {\n        if n % 2 == 1 {\n            stones[level]\
    \ = stones[level] + 1\n        }\n        level = level + 1\n        n = n / 2\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpnebv6202.swift:18:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = n\n    while stones > 0 {\n        pile.append(stones)\n\
    \        stones = stones % 2 == 0 ? stones / 2 : stones / 2 + 1\n        level++\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzplsfvlb.swift:17:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var stones = 0\n    var level = 0\n    while stones < n {\n        pile[level]\
    \ = stones\n        if stones % 2 == 0 {\n            stones += 1\n        } else\
    \ {\n            stones += 2\n        }\n        level += 1\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b01b42bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01b3fb1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b01b3fb1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b01b3fb113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b01b3fb0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b01b3db07ec <unavailable> + 186348

    6    tmp_y4djbw8                        0x00005579140a69ad <unavailable> + 6573

    7    tmp_y4djbw8                        0x00005579140a63eb <unavailable> + 5099

    8    libc.so.6                          0x00002b01b44a6460 __libc_start_main +
    245

    9    tmp_y4djbw8                        0x00005579140a6109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    while level < n {\n        if n % 2 == 0 {\n         \
    \   stones.append(n)\n            n /= 2\n        } else {\n            stones.append(n/2)\n\
    \            n /= 2\n        }\n        level++\n    }\n    return stones\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp9mbeolqf.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmp9mbeolqf.swift:19:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmp9mbeolqf.swift:21:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var levels = [Int]()\n\
    \    var stones = n\n    var level = 0\n    while stones > 0 {\n        levels.append(stones)\n\
    \        if stones % 2 == 0 {\n            stones = stones / 2\n        } else\
    \ {\n            stones = stones * 3 + 1\n        }\n        level++\n    }\n\
    \    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz3s90l50.swift:21:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n / 2)\n    } else\
    \ {\n        pile.append(n / 2 + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpf37b5j0j/tmpf37b5j0j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62fef2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62fbe9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62fbe9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62fbe87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf37b5j0j                        0x0000562ad28714d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ac6300de460 __libc_start_main +
    245

    6    tmpf37b5j0j                        0x0000562ad2871119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile[level] = n\n        n -= n\
    \ % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp55qf450h.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n/tmp/tmp55qf450h.swift:16:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        pile[level]\
    \ = stones\n        if n%2 == 0 {\n            stones += 2\n        } else {\n\
    \            stones += 3\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp668_teru.swift:21:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 1\n    while n >= level {\n        stones.append(level + 1)\n  \
    \      level = stones[level]\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpzxuvfj5n/tmpzxuvfj5n.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bad78bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bad482b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bad482988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bad4817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxuvfj5n                        0x00005569f95a6432 <unavailable> + 5170

    5    libc.so.6                          0x00002b9bad977460 __libc_start_main +
    245

    6    tmpzxuvfj5n                        0x00005569f95a6079 <unavailable> + 4217

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 0 {\n        pile = pile.append(n)\n    } else {\n        pile\
    \ = pile.append(n).append(n)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5o22pj82.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp5o22pj82.swift:15:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    stones.append(n)\n    if n % 2 == 0 {\n        stones.append(n/2)\n    }\n\
    \    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpw3irp3ol/tmpw3irp3ol.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7224eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7221e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7221e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7221e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw3irp3ol                        0x00005560b603d4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ac7226d6460 __libc_start_main +
    245

    6    tmpw3irp3ol                        0x00005560b603d119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile.append(level)\n        level\
    \ += n % 2 == 0 ? 1 : -1\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpkdstioee.swift:16:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n != 0 {\n        pile.append(level + 1)\n      \
    \  if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = (n\
    \ * 3) + 1\n        }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp58cfxfuv.swift:16:13: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n            n = n / 2\n            ^\n/tmp/tmp58cfxfuv.swift:18:13:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n            n = (n *\
    \ 3) + 1\n            ^\n/tmp/tmp58cfxfuv.swift:20:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ if n % 2 == 0 {\n        stones = stones + [n/2]\n    } else {\n        stones\
    \ = stones + [n/2] + 1\n    }\n    for _ in 1..(n-1)/2 {\n        stones = stones\
    \ + [n/2]\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptfe0mrr3.swift:15:35: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Array<Int>'\n        stones = stones + [n/2] + 1\n\
    \                                  ^\n/tmp/tmptfe0mrr3.swift:17:15: error: cannot\
    \ find operator '..' in scope; did you mean '...'?\n    for _ in 1..(n-1)/2 {\n\
    \              ^~\n              ...\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = 0\n    while stones_in_level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n   \
    \         stones_in_level += 1\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 2\n        }\n        n /= 2\n        level +=\
    \ 1\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz6opz0b8.swift:22:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        pile[level]\
    \ = stones\n        if stones % 2 == 0 {\n            stones += 1\n        } else\
    \ {\n            stones += 2\n        }\n        level += 1\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b52108ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52105e2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b52105e2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b52105e213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b52105e1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b52103e17ec <unavailable> + 186348

    6    tmp6x5zwtq6                        0x0000557089f089ad <unavailable> + 6573

    7    tmp6x5zwtq6                        0x0000557089f083eb <unavailable> + 5099

    8    libc.so.6                          0x00002b5210ad7460 __libc_start_main +
    245

    9    tmp6x5zwtq6                        0x0000557089f08109 <unavailable> + 4361

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while n != 0 {\n        if n % 2 == 0 {\n            stones[level]\
    \ = stones[level] + 1\n            n /= 2\n        } else {\n            stones[level]\
    \ = stones[level] + 1\n            n = n / 2\n        }\n        level++\n   \
    \ }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpj97_um6z.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpj97_um6z.swift:19:13:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n            n = n /\
    \ 2\n            ^\n/tmp/tmpj97_um6z.swift:21:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var count = 0\n    for _ in 0..<n {\n        pile.append(count)\n        if\
    \ n % 2 == 0 {\n            count += 1\n        } else {\n            count +=\
    \ 2\n        }\n        n -= 1\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpb_dsvdsm.swift:20:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.last! + 2)\n        } else {\n            stones.append(stones.last!\
    \ + 1)\n        }\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpd6zptr3m.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpd6zptr3m.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.count + 1)\n        } else {\n            stones.append(stones.count\
    \ + 2)\n        }\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpt2gpwucc.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpt2gpwucc.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var count = 0\n    var level = 0\n    while count < n {\n        stones.append(count)\n\
    \        if n % 2 == 0 {\n            count += 1\n        } else {\n         \
    \   count += 2\n        }\n        n /= 2\n        level++\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpfb930ite.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpfb930ite.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 0 {\n            pile[level] = stones\n            stones /= 2\n    \
    \    } else {\n            pile[level] = stones\n            stones /= 2\n   \
    \         stones += stones\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp28x6c8b0.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    while level < n {\n        if n % 2 == 1 {\n         \
    \   stones.append(n)\n        } else {\n            stones.append(n + level +\
    \ 1)\n        }\n        level += 1\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpxku1hqes/tmpxku1hqes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ad199bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ad1692b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ad1692988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ad16917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxku1hqes                        0x0000561c60b5e4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b0ad1b87460 __libc_start_main +
    245

    6    tmpxku1hqes                        0x0000561c60b5e119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n        }\n \
    \       n /= 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_ohjxjne.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp_ohjxjne.swift:17:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n\
    /tmp/tmp_ohjxjne.swift:19:11: error: left side of mutating operator isn't mutable:\
    \ 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile = append(pile, n)\n    if n % 2 == 0 {\n        pile = append(pile, n\
    \ / 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp4ks49380.swift:12:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n)\n           ^~~~~~\n/tmp/tmp4ks49380.swift:14:16: error:\
    \ cannot find 'append' in scope\n        pile = append(pile, n / 2)\n        \
    \       ^~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var levels = [0]\n    var level = 0\n    var nLevels = n\n    var nStones =\
    \ n\n    while nStones > 0 {\n        if nStones % 2 == 0 {\n            levels[level]\
    \ = nStones\n            level++\n            nStones /= 2\n        } else {\n\
    \            levels[level] = nStones\n            level++\n            nStones\
    \ /= 2\n            nStones -= 1\n        }\n    }\n    for level in 0..<level\
    \ {\n        stones += levels[level]\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpp5zeu8k_.swift:19:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpp5zeu8k_.swift:23:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  level++\n                 ^~\n/tmp/tmpp5zeu8k_.swift:29:25: error: no exact\
    \ matches in call to subscript \n        stones += levels[level]\n           \
    \             ^\nSwift.Array:3:35: note: candidate expects value of type 'Array<Int>'\
    \ for parameter #2 (got 'Int')\n    @inlinable public static func += (lhs: inout\
    \ [Element], rhs: [Element])\n                                  ^\nSwift.Array:17:23:\
    \ note: candidate expects value of type 'Range<Int>' for parameter #1 (got 'Int')\n\
    \    @inlinable public subscript(bounds: Range<Int>) -> ArraySlice<Element> {\
    \ get set }\n                      ^\nSwift.Collection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\nSwift.MutableCollection:3:23: note: candidate expects\
    \ value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get set }\n\
    \                      ^\n/tmp/tmpp5zeu8k_.swift:29:25: error: cannot convert\
    \ value of type 'Int' to expected argument type 'Array<Int>'\n        stones +=\
    \ levels[level]\n                        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 0 {\n        pile = pile.append(n)\n    } else {\n        pile\
    \ = pile.append(n).append(n)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5o22pj82.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp5o22pj82.swift:15:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n        } else\
    \ {\n            pile = pile.append(n / 2)\n        }\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpcd_3fh6x.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpcd_3fh6x.swift:17:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n\
    /tmp/tmpcd_3fh6x.swift:19:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n / 2)\n                   ~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = n\n    while stones > 0 {\n        pile[level]\
    \ = stones\n        if stones % 2 == 0 {\n            stones = stones / 2\n  \
    \      } else {\n            stones = stones * 3 + 1\n        }\n        level++\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6k28vgjg.swift:21:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var stones_in_next_level = n\n    if n % 2 == 0 {\n        stones_in_next_level\
    \ = stones_in_next_level / 2\n    }\n    for _ in 0..<stones_in_next_level {\n\
    \        stones.append(stones_in_next_level)\n        stones_in_next_level = stones_in_next_level\
    \ / 2\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpnez81824/tmpnez81824.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af619ac5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6197bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6197bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6197bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnez81824                        0x0000556d130c75c2 <unavailable> + 5570

    5    libc.so.6                          0x00002af619cb1460 __libc_start_main +
    245

    6    tmpnez81824                        0x0000556d130c7209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile = pile.append(n)\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp7zytt7hg.swift:12:17: error: cannot assign value of type '()' to\
    \ type '[Int]'\n    pile = pile.append(n)\n           ~~~~~^~~~~~~~~\n/tmp/tmp7zytt7hg.swift:14:21:\
    \ error: cannot assign value of type '()' to type '[Int]'\n        pile = pile.append(n)\n\
    \               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 1 {\n            pile[level] = stones\n            stones /= 2\n    \
    \    } else {\n            pile[level] = stones\n            stones /= 2\n   \
    \         stones /= 2\n        }\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpe0rhaeng.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var stonesCount = 0\n    var nextLevel = n - 1\n    if n % 2 == 1 {\n   \
    \     nextLevel = nextLevel + 1\n    }\n    for _ in 0..<nextLevel {\n       \
    \ stones.append(stonesCount)\n        stonesCount = stonesCount + 1\n    }\n \
    \   return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpr9r18gej/tmpr9r18gej.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba35815ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba357e51b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba357e51988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba357e507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9r18gej                        0x00005567f5a285c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ba358346460 __libc_start_main +
    245

    6    tmpr9r18gej                        0x00005567f5a28209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var levels = [Int]()\n    var level = 0\n    var stone = 0\n    while stone\
    \ < n {\n        if n % 2 == 0 {\n            stone = stone + 2\n        } else\
    \ {\n            stone = stone + 1\n        }\n        stones.append(stone)\n\
    \        levels.append(level)\n        level = level + 1\n        n = n - stone\n\
    \    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz98km7t1.swift:24:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n - stone\n        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    while n != 0 {\n        stones.append(n)\n        n /=\
    \ 2\n        level += 1\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_82uyh3x.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = n\n    while stones_in_level > 0\
    \ {\n        if stones_in_level % 2 == 1 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level -= stones_in_level / 2\n        } else {\n      \
    \      stones.append(stones_in_level)\n            stones_in_level -= stones_in_level\
    \ / 2\n            stones_in_level += stones_in_level / 2\n        }\n       \
    \ level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_jmhdckn.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    while level < n {\n        if n % 2 == 0 {\n         \
    \   stones.append(n)\n            n /= 2\n        } else {\n            n /= 2\n\
    \            stones.append(n)\n        }\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpbcozbdp9.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpbcozbdp9.swift:18:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpbcozbdp9.swift:21:14: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n        level++\n       \
    \      ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile: [Int] = [0]\n\
    \    var level = 1\n    while n != 0 {\n        pile[level] = n\n        n -=\
    \ n % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp634n0pjj.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n/tmp/tmp634n0pjj.swift:16:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.last! + 2)\n        } else {\n            stones.append(stones.last!\
    \ + 3)\n        }\n        n /= 2\n        level += 1\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmphcn9ee70.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 0 {\n        pile = pile.append(n)\n    } else {\n        pile\
    \ = pile.append(n).append(n)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5o22pj82.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp5o22pj82.swift:15:31: error: value of tuple type '()' has no member 'append'\n\
    \        pile = pile.append(n).append(n)\n               ~~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile: [Int] = []\n\
    \    var level = 0\n    while n > 0 {\n        if n % 2 == 0 {\n            pile[level]\
    \ = n\n            n /= 2\n        } else {\n            pile[level] = n\n   \
    \         n /= 2\n            n -= 1\n        }\n        level += 1\n    }\n \
    \   return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpuct5celh.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmpuct5celh.swift:19:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmpuct5celh.swift:20:15: error: left\
    \ side of mutating operator isn't mutable: 'n' is a 'let' constant\n         \
    \   n -= 1\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 2\n     \
    \       level++\n        }\n        n = n / 2\n    }\n    return pile\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpset9kk7l.swift:21:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpset9kk7l.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 0 {\n            pile.append(stones)\n            stones /= 2\n     \
    \   } else {\n            pile.append(stones)\n            stones /= 2\n     \
    \       pile.append(stones)\n            stones /= 2\n        }\n        level++\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpjzmfo9qu.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile: [Int] = []\n\
    \    var stones = 0\n    var level = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpkidozw25.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile.append(level)\n        level\
    \ += (n % 2 == 0 ? 1 : -1)\n        n /= 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6xavkps8.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var count = 0\n    if n % 2 == 0 {\n        pile = pile.append(n)\n      \
    \  count = count + 1\n    } else {\n        for _ in 0..<n {\n            pile\
    \ = pile.append(n)\n            count = count + 1\n        }\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmped9x699m.swift:14:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmped9x699m.swift:18:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile[level] = n\n        n -= n\
    \ % 2 == 0 ? n / 2 : n / 2 + 1\n        level += 1\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpn5z5axji.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        pile.append(stones)\n\
    \        if n % 2 == 0 {\n            stones += 2\n        } else {\n        \
    \    stones += 3\n        }\n        n /= 2\n        level++\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpre9at1bl.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpre9at1bl.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n   \
    \ return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpuho4kmve/tmpuho4kmve.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4530fd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4530cccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4530ccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4530ccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuho4kmve                        0x000055b9932194d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b45311c1460 __libc_start_main +
    245

    6    tmpuho4kmve                        0x000055b993219119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.last! + 2)\n        } else {\n            stones.append(stones.last!\
    \ + 1)\n        }\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpd6zptr3m.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpd6zptr3m.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile[level] = n\n        n -= n\
    \ % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp55qf450h.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n/tmp/tmp55qf450h.swift:16:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 1\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile.append(stones)\n            stones += 2\n       \
    \ } else {\n            pile.append(stones)\n            stones += 3\n       \
    \ }\n        n /= 2\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpsvlrcvz7.swift:22:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpsvlrcvz7.swift:23:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile[level] = n\n        n -= n\
    \ % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp55qf450h.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n/tmp/tmp55qf450h.swift:16:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n   \
    \ if n % 2 == 1 {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpunv8bd46/tmpunv8bd46.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc755c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc752b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc752b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc752b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunv8bd46                        0x0000562913df44d2 <unavailable> + 5330

    5    libc.so.6                          0x00002acc757ae460 __libc_start_main +
    245

    6    tmpunv8bd46                        0x0000562913df4119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    while n != 0 {\n        stones.append(n)\n        n /=\
    \ 2\n        level++\n    }\n    stones.reverse()\n    return stones\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpnf02qkqa.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpnf02qkqa.swift:16:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile = append(pile, Int(n))\n    if n % 2 == 0 {\n        pile = append(pile,\
    \ Int(n/2))\n    } else {\n        pile = append(pile, Int(n/2) + 1)\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpu_ljtqqj.swift:12:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, Int(n))\n           ^~~~~~\n/tmp/tmpu_ljtqqj.swift:14:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, Int(n/2))\n\
    \               ^~~~~~\n/tmp/tmpu_ljtqqj.swift:16:16: error: cannot find 'append'\
    \ in scope\n        pile = append(pile, Int(n/2) + 1)\n               ^~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while n != 0 {\n        stones[level] = n\n        n -= n\
    \ % 2 == 0 ? n / 2 : n\n        level += 1\n    }\n    return stones\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgoqeobfm.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n\n    \
    \    ~ ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n   \
    \ if n % 2 == 1 {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpunv8bd46/tmpunv8bd46.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc755c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc752b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc752b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc752b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunv8bd46                        0x0000562913df44d2 <unavailable> + 5330

    5    libc.so.6                          0x00002acc757ae460 __libc_start_main +
    245

    6    tmpunv8bd46                        0x0000562913df4119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    } else\
    \ {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmph3jj2z59/tmph3jj2z59.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcff1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcfeea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcfeea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcfeea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph3jj2z59                        0x0000563155bbf4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002abcff398460 __libc_start_main +
    245

    6    tmph3jj2z59                        0x0000563155bbf119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        stones.append(stones.count\
    \ + 1)\n        if n % 2 == 0 {\n            stones.append(stones.count + 1)\n\
    \        } else {\n            stones.append(stones.count - 1)\n        }\n  \
    \      n /= 2\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpabn160ed.swift:20:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpabn160ed.swift:21:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var stones_in_level = [Int]()\n    var current_level = 0\n    var current_stones\
    \ = 0\n    var next_stones = 0\n    var next_odd_stones = 0\n    var next_even_stones\
    \ = 0\n    for _ in 0..<n {\n        if n % 2 == 0 {\n            next_stones\
    \ += n\n        } else {\n            next_odd_stones += n\n        }\n      \
    \  stones.append(next_stones)\n        stones_in_level.append(next_stones)\n \
    \       current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stones\
    \ += n\n        }\n    }\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        next_stones += n\n        } else {\n            next_odd_stones += n\n\
    \        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stones\
    \ += n\n        }\n    }\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        next_stones += n\n        } else {\n            next_odd_stones += n\n\
    \        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stones\
    \ += n\n        }\n    }\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        next_stones += n\n        } else {\n            next_odd_stones += n\n\
    \        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stones\
    \ += n\n        }\n    }\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        next_stones += n\n        } else {\n            next_odd_stones += n\n\
    \        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stones\
    \ += n\n        }\n    }\n    for _ in 0..<n {\n        if n % 2 == 0 {\n    \
    \        next_stones += n\n        } else {\n            next_odd_stones += n\n\
    \        }\n        stones.append(next_stones)\n        stones_in_level.append(next_stones)\n\
    \        current_stones = next_stones\n        next_stones = 0\n        if n %\
    \ 2 == 0 {\n            next_stones += n\n        } else {\n            next_even_stone\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpv8kgdh2e.swift:131:61: error: expected '}' at end of brace statement\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])\n               \
    \                                             ^\n/tmp/tmpv8kgdh2e.swift:98:20:\
    \ note: to match this opening '{'\n    for _ in 0..<n {\n                   ^\n\
    /tmp/tmpv8kgdh2e.swift:131:61: error: expected '}' at end of brace statement\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])\n               \
    \                                             ^\n/tmp/tmpv8kgdh2e.swift:10:35:\
    \ note: to match this opening '{'\nfunc make_a_pile(n: Int) -> [Int] {\n     \
    \                             ^\n/tmp/tmpv8kgdh2e.swift:111:13: error: cannot\
    \ find 'next_even_stone' in scope\n            next_even_stone\n            ^~~~~~~~~~~~~~~\n\
    /tmp/tmpv8kgdh2e.swift:115:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = 0\n    while stones_in_level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n   \
    \         stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level++\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpul9_i3w2.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        pile = pile.append(n)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6a3u0mnu.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp6a3u0mnu.swift:16:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var count = 0\n    if n % 2 == 1 {\n        pile = pile.append(count)\n  \
    \      count = count + 1\n    }\n    for _ in 1...n {\n        if n % 2 == 0 {\n\
    \            pile = pile.append(count)\n            count = count + 1\n      \
    \  }\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp43v82h6g.swift:14:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(count)\n               ~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmp43v82h6g.swift:19:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(count)\n                   ~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmp43v82h6g.swift:22:9: error: cannot assign to value: 'n' is a 'let' constant\n\
    \        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    stones.append(n)\n    if n % 2 == 0 {\n        stones.append(stones.last!\
    \ * 2)\n    } else {\n        stones.append(stones.last! * 3)\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpfn7anfiq/tmpfn7anfiq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb396dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb393d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb393d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb393d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfn7anfiq                        0x000055f2791c6562 <unavailable> + 5474

    5    libc.so.6                          0x00002acb398c6460 __libc_start_main +
    245

    6    tmpfn7anfiq                        0x000055f2791c61a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while n > 0 {\n        stones[level] = n\n        level =\
    \ (level + 1) % 2\n        n = n / 2\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp4ivdh03_.swift:16:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        pile = pile.append(n)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6a3u0mnu.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp6a3u0mnu.swift:16:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n != 0 {\n        pile[level] = n\n        n -= n\
    \ % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpqtq7masw.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n/tmp/tmpqtq7masw.swift:16:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 1\n    while level < n {\n        if n % 2 == 1 {\n            stones.append(stones[level]\
    \ + 1)\n        } else {\n            stones.append(stones[level] * 2)\n     \
    \   }\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_p_atns7.swift:19:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    while n >= level {\n        stones.append(level + 1)\n\
    \        level = level * 2 + 1\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpltcly8pd/tmpltcly8pd.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0e6e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0e6b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0e6b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0e6b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpltcly8pd                        0x0000556f24d30442 <unavailable> + 5186

    5    libc.so.6                          0x00002ae0e705b460 __libc_start_main +
    245

    6    tmpltcly8pd                        0x0000556f24d30089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 1 {\n        pile.append(n/2)\n    }\n   \
    \ if n % 2 == 0 {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmprwzrwbbv/tmprwzrwbbv.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac7b3990c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac7b3687b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac7b3687988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac7b36867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprwzrwbbv                        0x000056070d5844d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ac7b3b7c460 __libc_start_main +
    245

    6    tmprwzrwbbv                        0x000056070d584119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var levels = [Int]()\n\
    \    var stones = n\n    var level = 1\n    while stones > 0 {\n        levels.append(stones)\n\
    \        stones = stones / 2\n        level = level + 1\n    }\n    return levels\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpz29rkgte/tmpz29rkgte.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1f090ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1f0601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1f0601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1f06007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz29rkgte                        0x0000564c958534d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ac1f0af6460 __libc_start_main +
    245

    6    tmpz29rkgte                        0x0000564c95853119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n / 2)\n    }\n \
    \   return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpdn6t1wmi/tmpdn6t1wmi.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c5e6c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c5e3b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c5e3b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c5e3b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdn6t1wmi                        0x0000555c638af4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b6c5e8ad460 __libc_start_main +
    245

    6    tmpdn6t1wmi                        0x0000555c638af119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var nLevels = n\n    var nStones = 0\n    while nLevels > 0 {\n        if\
    \ nLevels % 2 == 0 {\n            nStones += nLevels\n        } else {\n     \
    \       nStones += nLevels - 1\n        }\n        nLevels /= 2\n    }\n    pile\
    \ = pile.reverse()\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp1vtp260n.swift:22:17: error: cannot assign value of type '()' to\
    \ type '[Int]'\n    pile = pile.reverse()\n           ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n / 2)\n    }\n \
    \   return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpdn6t1wmi/tmpdn6t1wmi.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c5e6c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c5e3b8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c5e3b8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c5e3b77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdn6t1wmi                        0x0000555c638af4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b6c5e8ad460 __libc_start_main +
    245

    6    tmpdn6t1wmi                        0x0000555c638af119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        if n % 2 == 0 {\n            pile[level]\
    \ = n\n            n /= 2\n        } else {\n            pile[level] = n\n   \
    \         n /= 2\n            n -= 1\n        }\n        level += 1\n    }\n \
    \   return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp4aaqx5le.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmp4aaqx5le.swift:19:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmp4aaqx5le.swift:20:15: error: left\
    \ side of mutating operator isn't mutable: 'n' is a 'let' constant\n         \
    \   n -= 1\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 1\n    while n != 0 {\n        if n % 2 == 0 {\n            pile\
    \ = append(pile, level)\n        }\n        n /= 2\n        level += 1\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpuofw9zv5.swift:15:20: error: cannot find 'append' in scope\n  \
    \          pile = append(pile, level)\n                   ^~~~~~\n/tmp/tmpuofw9zv5.swift:17:11:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    stones.append(n)\n    if n % 2 == 0 {\n        stones.append(stones.last!\
    \ + 2)\n    } else {\n        stones.append(stones.last! + 3)\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpz4ayn3j4/tmpz4ayn3j4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a4fa55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a4f74cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a4f74c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a4f74b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz4ayn3j4                        0x0000556c70b19562 <unavailable> + 5474

    5    libc.so.6                          0x00002b7a4fc41460 __libc_start_main +
    245

    6    tmpz4ayn3j4                        0x0000556c70b191a9 <unavailable> + 4521

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile.append(level + 1)\n       \
    \ level += n % 2 == 0 ? 1 : 2\n        n = n / 2\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp29tac2dj.swift:16:9: error: cannot assign to value: 'n' is a 'let'\
    \ constant\n        n = n / 2\n        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n / 2)\n    } else\
    \ {\n        pile.append(n / 2 + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpf37b5j0j/tmpf37b5j0j.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac62fef2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac62fbe9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac62fbe9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac62fbe87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf37b5j0j                        0x0000562ad28714d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ac6300de460 __libc_start_main +
    245

    6    tmpf37b5j0j                        0x0000562ad2871119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    } else\
    \ {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmph3jj2z59/tmph3jj2z59.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcff1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcfeea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcfeea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcfeea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph3jj2z59                        0x0000563155bbf4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002abcff398460 __libc_start_main +
    245

    6    tmph3jj2z59                        0x0000563155bbf119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 1 {\n            pile.append(stones)\n            stones /= 2\n     \
    \   } else {\n            pile.append(stones)\n            stones /= 2\n     \
    \       stones /= 2\n        }\n        level += 1\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpay7zw8fr/tmpay7zw8fr.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba13a2f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba139fefb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba139fef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba139fee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpay7zw8fr                        0x0000558e636734d2 <unavailable> + 5330

    5    libc.so.6                          0x00002ba13a4e4460 __libc_start_main +
    245

    6    tmpay7zw8fr                        0x0000558e63673119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [1]\n   \
    \ var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.last! + 2)\n        } else {\n            stones.append(stones.last!\
    \ + 2)\n        }\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp6lx1dbi4.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp6lx1dbi4.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [1]\n   \
    \ var levels = [0]\n    var result = [Int]()\n    for _ in 0..<n {\n        if\
    \ n % 2 == 0 {\n            stones.append(stones.last! * 2)\n        } else {\n\
    \            stones.append(stones.last! * 3)\n        }\n        levels.append(stones.count)\n\
    \        stones.removeLast()\n    }\n    for level in levels {\n        result.append(level)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpbngsom2a/tmpbngsom2a.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae626ba1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae626898b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae626898988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6268977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbngsom2a                        0x0000555e422128c2 <unavailable> + 6338

    5    libc.so.6                          0x00002ae626d8d460 __libc_start_main +
    245

    6    tmpbngsom2a                        0x0000555e42212509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 1 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5a9kjsc2.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmp5a9kjsc2.swift:16:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n % 2 == 0 ? n : n + 2)\n              \
    \ ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    else {\n      \
    \  pile = pile.append(n / 2)\n        pile = pile.append(n / 2)\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpuporlatt.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpuporlatt.swift:16:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n / 2)\n               ~~~~~^~~~~~~~~~~~~\n\
    /tmp/tmpuporlatt.swift:17:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(n / 2)\n               ~~~~~^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while n != 0 {\n        stones.append(stones[level] + n %\
    \ 2)\n        n /= 2\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp3a56wd8r.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp3a56wd8r.swift:16:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 1 {\n        pile.append(pile[n/2] + pile[n/2\
    \ - 1])\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b2668a46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b266873d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b266873d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b266873d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b266873cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b266853ce83 <unavailable> + 188035

    6    tmppytjdpup                        0x00005570b9786aac <unavailable> + 6828

    7    tmppytjdpup                        0x00005570b978644b <unavailable> + 5195

    8    libc.so.6                          0x00002b2668c32460 __libc_start_main +
    245

    9    tmppytjdpup                        0x00005570b9786169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    } else\
    \ {\n        pile.append(n+1)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpcy78z0hl/tmpcy78z0hl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92fe964c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92fe65bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92fe65b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92fe65a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcy78z0hl                        0x00005654a2b194d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b92feb50460 __libc_start_main +
    245

    6    tmpcy78z0hl                        0x00005654a2b19119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile.append(stones)\n            stones += 2\n       \
    \ } else {\n            pile.append(stones)\n            stones += 3\n       \
    \ }\n        n /= 2\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpns24rrxl.swift:22:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpns24rrxl.swift:23:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n != 0 {\n        pile[level] = n\n        n -= n\
    \ % 2 == 0 ? n / 2 : n / 2 + 1\n        level += 1\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpmxv9dkx4.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while n != 0 {\n        if n % 2 == 1 {\n            stones.append(stones[level]\
    \ + 1)\n        }\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_y3waiuv.swift:17:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp_y3waiuv.swift:18:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = 0\n    while stones_in_level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n   \
    \         stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level++\n        n = n /\
    \ 2\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_8hl7q_k.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmp_8hl7q_k.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 2\n     \
    \       pile[level+1] = stones\n            stones += 2\n        }\n        level++\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmphnpzaur1.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        stones.append(stones.count\
    \ + 1)\n        if n%2 == 0 {\n            stones.append(stones.count + 1)\n \
    \       }\n        n /= 2\n        level++\n    }\n    return stones\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5g7_2tq7.swift:18:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmp5g7_2tq7.swift:19:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var levels = [Int]()\n    stones.append(n)\n    levels.append(n)\n    if\
    \ n % 2 == 0 {\n        levels.append(stones.last! + 2)\n    } else {\n      \
    \  levels.append(stones.last! + 3)\n    }\n    for _ in 1...n {\n        stones.append(stones.last!)\n\
    \        levels.append(stones.last!)\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmptnuwpd56/tmptnuwpd56.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af14f227c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af14ef1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af14ef1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af14ef1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptnuwpd56                        0x0000558fd979a662 <unavailable> + 5730

    5    libc.so.6                          0x00002af14f413460 __libc_start_main +
    245

    6    tmptnuwpd56                        0x0000558fd979a2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.count + 1)\n        } else {\n            stones.append(stones.count\
    \ + 2)\n        }\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpt2gpwucc.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpt2gpwucc.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var i = 0\n    while i < n {\n        if i % 2 == 0 {\n            pile.append(n)\n\
    \        } else {\n            pile.append(n + i)\n        }\n        i += 1\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpwk7ug0ss/tmpwk7ug0ss.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eb7e8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eb7b84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eb7b84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eb7b837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwk7ug0ss                        0x000055e8c646a4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b0eb8079460 __libc_start_main +
    245

    6    tmpwk7ug0ss                        0x000055e8c646a119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 0 {\n            pile[level] = stones\n            stones /= 2\n    \
    \    } else {\n            pile[level] = stones\n            stones /= 2\n   \
    \         stones += stones\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp28x6c8b0.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while n != 0 {\n        stones[level] = n\n        n -= n\
    \ % 2 == 0 ? n / 2 : n + 1\n        level++\n    }\n    return stones\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp4jxsfz6t.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n + 1\n\
    \        ~ ^\n/tmp/tmp4jxsfz6t.swift:16:14: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n != 0 {\n        pile[level] = n\n        n -= n\
    \ % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpqtq7masw.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n/tmp/tmpqtq7masw.swift:16:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        pile[level]\
    \ = stones\n        if n%2 == 0 {\n            stones += 2\n        } else {\n\
    \            stones += 3\n        }\n        n /= 2\n        level++\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpv345hyfp.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpv345hyfp.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var levels = [Int]()\n    var level = 0\n    var stone = 0\n    while stone\
    \ < n {\n        stone = stone + 2\n        stones.append(stone)\n        levels.append(level)\n\
    \        level = level + 1\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp09_n44y4/tmp09_n44y4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1f24d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1f21cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1f21ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1f21c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp09_n44y4                        0x000055cd7159a442 <unavailable> + 5186

    5    libc.so.6                          0x00002ae1f26bf460 __libc_start_main +
    245

    6    tmp09_n44y4                        0x000055cd7159a089 <unavailable> + 4233

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile = append(pile, level)\n   \
    \     n -= level\n        level += (n % 2 == 0) ? 1 : 2\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpawtrlytr.swift:14:16: error: cannot find 'append' in scope\n  \
    \      pile = append(pile, level)\n               ^~~~~~\n/tmp/tmpawtrlytr.swift:15:11:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \        n -= level\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.count + 1)\n        } else {\n            stones.append(stones.count\
    \ + 2)\n        }\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpt2gpwucc.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpt2gpwucc.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        pile.append(stones)\n\
    \        if n % 2 == 0 {\n            stones += 2\n        } else {\n        \
    \    stones += 3\n        }\n        n /= 2\n        level++\n    }\n    return\
    \ pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) == [3,\
    \ 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5)\
    \ == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpre9at1bl.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpre9at1bl.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 1 {\n        pile.append(n - 1)\n    }\n \
    \   return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpelfq1b1g/tmpelfq1b1g.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20f84f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20f81e9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20f81e9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20f81e87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpelfq1b1g                        0x000055c375cee4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b20f86de460 __libc_start_main +
    245

    6    tmpelfq1b1g                        0x000055c375cee119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [1]\n   \
    \ var level = 1\n    var result = [Int]()\n    while stones.count < n {\n    \
    \    if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n        } else\
    \ {\n            stones.append(stones.last! + 1)\n        }\n        level++\n\
    \    }\n    for _ in 0..<level {\n        result.append(stones.last!)\n      \
    \  stones.removeLast()\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpw_na4qhb.swift:20:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var count = 0\n    var next = 0\n    for _ in 0..<n {\n        pile.append(count)\n\
    \        if n % 2 == 0 {\n            next = next + 2\n        } else {\n    \
    \        next = next + 1\n        }\n        count = next\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmp47at7qd2/tmp47at7qd2.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2b3944c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2b363bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2b363b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2b363a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp47at7qd2                        0x000055612f1075c2 <unavailable> + 5570

    5    libc.so.6                          0x00002ae2b3b30460 __libc_start_main +
    245

    6    tmp47at7qd2                        0x000055612f107209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    } else\
    \ {\n        pile.append(n/2+1)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmplw1edjy5/tmplw1edjy5.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c90e74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c90b6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c90b6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c90b6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplw1edjy5                        0x00005647396ac4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b3c91060460 __libc_start_main +
    245

    6    tmplw1edjy5                        0x00005647396ac119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    while n > 0 {\n        pile[level] = n\n        level +=\
    \ (n % 2 == 0) ? 1 : 2\n        n /= 2\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmph6tnnb0j.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 2\n     \
    \       level++\n        }\n        n = n / 2\n    }\n    return pile\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpset9kk7l.swift:21:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpset9kk7l.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 1\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.count + 1)\n        } else {\n            stones.append(stones.count\
    \ + 2)\n        }\n        level++\n        n = n / 2\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpicnpb6g0.swift:19:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpicnpb6g0.swift:20:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile = append(pile, n / 2)\n    if n % 2 == 0 {\n        pile = append(pile,\
    \ n / 2)\n    } else {\n        pile = append(pile, n / 2)\n        pile = append(pile,\
    \ n / 2)\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpz71u0s56.swift:12:12: error: cannot find 'append' in scope\n  \
    \  pile = append(pile, n / 2)\n           ^~~~~~\n/tmp/tmpz71u0s56.swift:14:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n/tmp/tmpz71u0s56.swift:16:16: error: cannot find 'append'\
    \ in scope\n        pile = append(pile, n / 2)\n               ^~~~~~\n/tmp/tmpz71u0s56.swift:17:16:\
    \ error: cannot find 'append' in scope\n        pile = append(pile, n / 2)\n \
    \              ^~~~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 0 {\n            pile.append(stones)\n            stones /= 2\n     \
    \   } else {\n            pile.append(stones)\n            stones /= 2\n     \
    \       pile.append(stones)\n            stones /= 2\n        }\n        level++\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpjzmfo9qu.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile = pile.append(n)\n    if n % 2 == 0 {\n        pile = pile.append(n)\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp7zytt7hg.swift:12:17: error: cannot assign value of type '()' to\
    \ type '[Int]'\n    pile = pile.append(n)\n           ~~~~~^~~~~~~~~\n/tmp/tmp7zytt7hg.swift:14:21:\
    \ error: cannot assign value of type '()' to type '[Int]'\n        pile = pile.append(n)\n\
    \               ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [1]\n   \
    \ var levels = [0]\n    var result = [Int]()\n    for _ in 0..<n {\n        let\
    \ level = levels[stones.count-1]\n        stones.append(levels[stones.count-1])\n\
    \        levels.append(levels[stones.count-1])\n        if stones.count % 2 ==\
    \ 0 {\n            levels[stones.count-1] = levels[stones.count-1] + 1\n     \
    \   } else {\n            levels[stones.count-1] = levels[stones.count-1] - 1\n\
    \        }\n        result.append(levels[stones.count-1])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002af4436e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4433de561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af4433de286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af4433de13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af4433ddbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002af4431dde83 <unavailable> + 188035

    6    tmphlaawixg                        0x00005636f20e5de6 <unavailable> + 7654

    7    tmphlaawixg                        0x00005636f20e55eb <unavailable> + 5611

    8    libc.so.6                          0x00002af4438d3460 __libc_start_main +
    245

    9    tmphlaawixg                        0x00005636f20e5309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    else {\n      \
    \  var even = n / 2\n        var odd = n - even\n        pile = pile.append(even)\n\
    \        pile = pile.append(odd)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpr_x8pk2d.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpr_x8pk2d.swift:18:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(even)\n               ~~~~~^~~~~~~~~~~~\n\
    /tmp/tmpr_x8pk2d.swift:19:21: error: cannot assign value of type '()' to type\
    \ '[Int]'\n        pile = pile.append(odd)\n               ~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    stones.append(n)\n    if n % 2 == 1 {\n        stones.append(n + 2)\n   \
    \ }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpho8cshe2/tmpho8cshe2.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c40f75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c40c6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c40c6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c40c6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpho8cshe2                        0x000055c1716ee4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b4c41161460 __libc_start_main +
    245

    6    tmpho8cshe2                        0x000055c1716ee119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 2\n     \
    \       level++\n        }\n        n = n / 2\n    }\n    return pile\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpset9kk7l.swift:21:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmpset9kk7l.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile.append(stones)\n            stones += 2\n       \
    \ } else {\n            pile.append(stones)\n            stones += 3\n       \
    \ }\n        n /= 2\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpns24rrxl.swift:22:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpns24rrxl.swift:23:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n   \
    \ return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpuho4kmve/tmpuho4kmve.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4530fd5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4530cccb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4530ccc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4530ccb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuho4kmve                        0x000055b9932194d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b45311c1460 __libc_start_main +
    245

    6    tmpuho4kmve                        0x000055b993219119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n   \
    \ if n % 2 == 1 {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpunv8bd46/tmpunv8bd46.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc755c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc752b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc752b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc752b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunv8bd46                        0x0000562913df44d2 <unavailable> + 5330

    5    libc.so.6                          0x00002acc757ae460 __libc_start_main +
    245

    6    tmpunv8bd46                        0x0000562913df4119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = n\n    while stones_in_level > 0\
    \ {\n        if stones_in_level % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level -= stones_in_level / 2\n        } else {\n      \
    \      stones.append(stones_in_level)\n            stones_in_level -= stones_in_level\
    \ / 2 + 1\n        }\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpbkzfsucv.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n   \
    \ if n % 2 == 1 {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpunv8bd46/tmpunv8bd46.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc755c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc752b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc752b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc752b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunv8bd46                        0x0000562913df44d2 <unavailable> + 5330

    5    libc.so.6                          0x00002acc757ae460 __libc_start_main +
    245

    6    tmpunv8bd46                        0x0000562913df4119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    }\n   \
    \ if n % 2 == 1 {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmpunv8bd46/tmpunv8bd46.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc755c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc752b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc752b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc752b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunv8bd46                        0x0000562913df44d2 <unavailable> + 5330

    5    libc.so.6                          0x00002acc757ae460 __libc_start_main +
    245

    6    tmpunv8bd46                        0x0000562913df4119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var levels = [0]\n    var level = 0\n    var count = 0\n    while count < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(n)\n            levels.append(level\
    \ + 1)\n            count += 1\n        } else {\n            stones.append(n\
    \ - stones[level])\n            levels.append(level + 1)\n            count +=\
    \ 1\n        }\n        n /= 2\n        level += 1\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpejo01ldh.swift:25:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = 0\n    while stones_in_level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n   \
    \         stones_in_level += 1\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 1\n            stones_in_level += 2\n        }\n\
    \        n /= 2\n        level += 1\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpsm21hgr7.swift:23:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.count + 1)\n        } else {\n            stones.append(stones.count\
    \ + 2)\n        }\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpt2gpwucc.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpt2gpwucc.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = 0\n    while stones_in_level < n\
    \ {\n        if n % 2 == 0 {\n            stones.append(stones_in_level)\n   \
    \         stones_in_level += 2\n        } else {\n            stones.append(stones_in_level)\n\
    \            stones_in_level += 3\n        }\n        level++\n        n = n /\
    \ 2\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp_8hl7q_k.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmp_8hl7q_k.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while n >= 0 {\n        stones.append(stones[level] + 1)\n\
    \        if n % 2 == 0 {\n            stones.append(stones[level] + 1)\n     \
    \   }\n        n /= 2\n        level++\n    }\n    return stones\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmporrzvw0q.swift:18:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmporrzvw0q.swift:19:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        pile[level]\
    \ = stones\n        if n%2 == 0 {\n            stones += 2\n        } else {\n\
    \            stones += 1\n        }\n        n /= 2\n        level++\n    }\n\
    \    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3)\
    \ == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpfzguso7r.swift:21:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpfzguso7r.swift:22:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile: [Int] = []\n\
    \    var level = 0\n    while level < n {\n        if n % 2 == 0 {\n         \
    \   pile.append(n)\n            n /= 2\n        } else {\n            pile.append(n\
    \ / 2)\n            n = n / 2\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmplywuloat.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmplywuloat.swift:19:13:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n            n = n /\
    \ 2\n            ^\n/tmp/tmplywuloat.swift:21:14: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    while n != 0 {\n        stones.append(n)\n        n -=\
    \ n % 2 == 0 ? n / 2 : n / 2 + 1\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpmay6x4kt.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? n / 2 : n / 2 +\
    \ 1\n        ~ ^\n/tmp/tmpmay6x4kt.swift:16:14: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979138
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var i = 0\n    while i < n {\n        if i % 2 == 0 {\n            pile.append(n)\n\
    \        } else {\n            pile.append(n + i)\n        }\n        i += 1\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpwk7ug0ss/tmpwk7ug0ss.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eb7e8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eb7b84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eb7b84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eb7b837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwk7ug0ss                        0x000055e8c646a4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002b0eb8079460 __libc_start_main +
    245

    6    tmpwk7ug0ss                        0x000055e8c646a119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = n\n    while stones > 0 {\n        pile[level]\
    \ = stones\n        stones = stones % 2 == 0 ? stones + 1 : stones - 1\n     \
    \   level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8,\
    \ 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpgdnzseeq.swift:17:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 0 {\n            pile.append(stones)\n            stones /= 2\n     \
    \   } else {\n            pile.append(stones)\n            stones /= 2\n     \
    \       pile.append(stones)\n            stones /= 2\n        }\n        level++\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpjzmfo9qu.swift:24:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [1]\n   \
    \ var levels = [Int]()\n    var level = 0\n    while stones.count < n {\n    \
    \    if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n        } else\
    \ {\n            stones.append(stones.last! + 1)\n        }\n        n /= 2\n\
    \        levels.append(stones.count)\n    }\n    return levels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpyts7dqth.swift:20:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 1 {\n            pile[level] = stones\n            stones /= 2\n    \
    \    } else {\n            pile[level] = stones\n            stones /= 2\n   \
    \         stones += stones\n        }\n        level++\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp61sa5cct.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(n/2)\n    } else\
    \ {\n        pile.append(n/2 + 1)\n    }\n    return pile\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'tmph3jj2z59/tmph3jj2z59.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abcff1acc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abcfeea3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abcfeea3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abcfeea27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph3jj2z59                        0x0000563155bbf4d2 <unavailable> + 5330

    5    libc.so.6                          0x00002abcff398460 __libc_start_main +
    245

    6    tmph3jj2z59                        0x0000563155bbf119 <unavailable> + 4377

    '
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.count + 1)\n        } else {\n            stones.append(stones.count\
    \ + 2)\n        }\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpt2gpwucc.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpt2gpwucc.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   pile.append(n)\n    if n % 2 == 0 {\n        pile.append(make_a_pile(n/2))\n\
    \    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpbw4emvb9.swift:14:21: error: missing argument label 'contentsOf:'\
    \ in call\n        pile.append(make_a_pile(n/2))\n                    ^\n    \
    \                contentsOf: \n/tmp/tmpbw4emvb9.swift:14:33: error: missing argument\
    \ label 'n:' in call\n        pile.append(make_a_pile(n/2))\n                \
    \                ^\n                                n: \n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n        n = n / 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpzkjxdfom.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n/tmp/tmpzkjxdfom.swift:23:9:\
    \ error: cannot assign to value: 'n' is a 'let' constant\n        n = n / 2\n\
    \        ^\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   if n % 2 == 0 {\n        pile = pile.append(n)\n    }\n    for _ in 1...n\
    \ {\n        if n % 2 == 0 {\n            pile = pile.append(n)\n        } else\
    \ {\n            pile = pile.append(n)\n        }\n    }\n    return pile\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpbycc89ww.swift:13:21: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        pile = pile.append(n)\n               ~~~~~^~~~~~~~~\n\
    /tmp/tmpbycc89ww.swift:17:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n\
    /tmp/tmpbycc89ww.swift:19:25: error: cannot assign value of type '()' to type\
    \ '[Int]'\n            pile = pile.append(n)\n                   ~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    while n != 0 {\n        if n % 2 == 1 {\n            stones.append(n)\n\
    \            n /= 2\n        } else {\n            stones.append(n)\n        \
    \    n /= 2\n            n /= 2\n        }\n        level++\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp83ky7od4.swift:16:15: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n            n /= 2\n            ~ ^\n/tmp/tmp83ky7od4.swift:19:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 2\n            ~ ^\n/tmp/tmp83ky7od4.swift:20:15: error: left\
    \ side of mutating operator isn't mutable: 'n' is a 'let' constant\n         \
    \   n /= 2\n            ~ ^\n/tmp/tmp83ky7od4.swift:22:14: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        level++\n            \
    \ ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 1\n    var nextLevel = n / 2\n    if n % 2 == 0 {\n        nextLevel\
    \ = nextLevel + 1\n    }\n    for _ in 1...nextLevel {\n        stones.append(stones[level]\
    \ + 1)\n        level = level + 1\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c2159c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c1e50561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82c1e50286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82c1e5013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82c1e4fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b82c1c4fe83 <unavailable> + 188035

    6    tmp5usgg67r                        0x000055f067482d03 <unavailable> + 7427

    7    tmp5usgg67r                        0x000055f0674824eb <unavailable> + 5355

    8    libc.so.6                          0x00002b82c2345460 __libc_start_main +
    245

    9    tmp5usgg67r                        0x000055f067482209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 0\n    while stones.count < n {\n        if n % 2 == 0 {\n     \
    \       stones.append(stones.count + 1)\n        } else {\n            stones.append(stones.count\
    \ + 2)\n        }\n        n /= 2\n        level++\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpt2gpwucc.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n/tmp/tmpt2gpwucc.swift:20:14:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        level++\n\
    \             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 1\n    while n >= level {\n        stones.append(level + 1)\n  \
    \      level += (n % 2 == 0 ? 1 : 2)\n        n /= 2\n    }\n    return stones\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpvsph4ps1.swift:16:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 1\n    var stones = n\n    while stones > 0 {\n        if stones\
    \ % 2 == 1 {\n            pile = append(pile, stones)\n            stones = 0\n\
    \        } else {\n            pile = append(pile, stones)\n            stones\
    \ = stones / 2\n        }\n        level = level + 1\n    }\n    return pile\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpfeih304b.swift:16:20: error: cannot find 'append' in scope\n  \
    \          pile = append(pile, stones)\n                   ^~~~~~\n/tmp/tmpfeih304b.swift:19:20:\
    \ error: cannot find 'append' in scope\n            pile = append(pile, stones)\n\
    \                   ^~~~~~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ var level = 1\n    while n > 0 {\n        if n % 2 == 0 {\n            stones.append(stones[level])\n\
    \            level++\n        }\n        n /= 2\n    }\n    return stones\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp5xxep6dd.swift:16:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmp5xxep6dd.swift:18:11:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -4
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [0]\n   \
    \ if n % 2 == 1 {\n        stones.append(n)\n    }\n    for _ in 1...n {\n   \
    \     if n % 2 == 0 {\n            stones.append(stones.last! + 2)\n        }\
    \ else {\n            stones.append(stones.last! + 1)\n        }\n    }\n    return\
    \ stones\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(make_a_pile(n: 3) ==\
    \ [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Exception
  stderr: 'tmpd181ixz1/tmpd181ixz1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6261db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6261aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6261aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6261aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd181ixz1                        0x0000555c8011e602 <unavailable> + 5634

    5    libc.so.6                          0x00002b6261fa2460 __libc_start_main +
    245

    6    tmpd181ixz1                        0x0000555c8011e249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 2\n     \
    \       level++\n        }\n        n /= 2\n    }\n    return pile\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmp412fkgt7.swift:21:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            level++\n                 ^~\n/tmp/tmp412fkgt7.swift:23:11:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \        n /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = n\n\n    while stones_in_level >\
    \ 0 {\n        if stones_in_level % 2 == 0 {\n            stones.append(stones_in_level)\n\
    \            stones_in_level -= stones_in_level / 2\n        } else {\n      \
    \      stones.append(stones_in_level)\n            stones_in_level -= stones_in_level\
    \ / 2 + 1\n        }\n        level++\n    }\n    return stones\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpk8xbp4gy.swift:23:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    var stones_in_level = n\n    var next_odd_stones = n\n\
    \    var next_even_stones = n\n    if n % 2 == 0 {\n        next_odd_stones =\
    \ n + 1\n    } else {\n        next_even_stones = n + 1\n    }\n    while stones_in_level\
    \ > 0 {\n        stones.append(stones_in_level)\n        stones_in_level -= next_odd_stones\n\
    \        if stones_in_level % 2 == 0 {\n            stones_in_level += next_even_stones\n\
    \        }\n        level += 1\n        next_odd_stones = next_even_stones\n \
    \       next_even_stones = n\n    }\n    return stones\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4)\
    \ == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979142
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var stones = [Int]()\n\
    \    var level = 0\n    while n > 0 {\n        stones.append(n)\n        n -=\
    \ n % 2 == 0 ? 2 : 3\n        level += 1\n    }\n    return stones\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n:\
    \ 4) == [4, 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmpg4d8_g6g.swift:15:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n -= n % 2 == 0 ? 2 : 3\n        ~\
    \ ^\n"
  stdout: ''
  timestamp: 1659979137
- exit_code: 1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile = [Int]()\n \
    \   var level = 0\n    var stones = 0\n    while stones < n {\n        if n %\
    \ 2 == 0 {\n            pile[level] = stones\n            stones += 2\n      \
    \  } else {\n            pile[level] = stones\n            stones += 3\n     \
    \   }\n        level++\n    }\n    return pile\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(make_a_pile(n: 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4,\
    \ 6, 8, 10])\nassert(make_a_pile(n: 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n:\
    \ 6) == [6, 8, 10, 12, 14, 16])\nassert(make_a_pile(n: 8) == [8, 10, 12, 14, 16,\
    \ 18, 20, 22])"
  status: SyntaxError
  stderr: "/tmp/tmptbauaagb.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        level++\n             ^~\n"
  stdout: ''
  timestamp: 1659979136
- exit_code: -1
  program: "\n/// Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\n/// The first level has n stones.\n/// The number of stones in the\
    \ next level is:\n/// - the next odd number if n is odd.\n/// - the next even\
    \ number if n is even.\n/// Return the number of stones in each level in a list,\
    \ where element at index\n/// i represents the number of stones in the level (i+1).\n\
    /// Examples:\nfunc make_a_pile(n: Int) -> [Int] {\n    var levels = [Int]()\n\
    \    var stones = n\n    var level = 0\n    while stones > 0 {\n        levels.append(stones)\n\
    \        stones = stones % 2 == 0 ? stones + 1 : stones\n        level = level\
    \ + 1\n    }\n    return levels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(make_a_pile(n:\
    \ 3) == [3, 5, 7])\nassert(make_a_pile(n: 4) == [4, 6, 8, 10])\nassert(make_a_pile(n:\
    \ 5) == [5, 7, 9, 11, 13])\nassert(make_a_pile(n: 6) == [6, 8, 10, 12, 14, 16])\n\
    assert(make_a_pile(n: 8) == [8, 10, 12, 14, 16, 18, 20, 22])"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979142
