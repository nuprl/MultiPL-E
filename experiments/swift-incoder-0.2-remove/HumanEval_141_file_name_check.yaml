name: HumanEval_141_file_name_check
language: swift
prompt: "\n/// Create a function which takes a string representing a file's name,\
  \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\nfunc file_name_check(file_name:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(file_name_check(file_name: \"example.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"1example.dll\") == \"No\")\n\
  assert(file_name_check(file_name: \"s1sdf3.asd\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"K.dll\") == \"Yes\")\nassert(file_name_check(file_name: \"MY16FILE3.exe\") ==\
  \ \"Yes\")\nassert(file_name_check(file_name: \"His12FILE94.exe\") == \"No\")\n\
  assert(file_name_check(file_name: \"_Y.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"?aREYA.exe\") == \"No\")\nassert(file_name_check(file_name: \"/this_is_valid.dll\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"this_is_valid.wow\") == \"No\"\
  )\nassert(file_name_check(file_name: \"this_is_valid.txt\") == \"Yes\")\nassert(file_name_check(file_name:\
  \ \"this_is_valid.txtexe\") == \"No\")\nassert(file_name_check(file_name: \"#this2_i4s_5valid.ten\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"@this1_is6_valid.exe\") == \"\
  No\")\nassert(file_name_check(file_name: \"this_is_12valid.6exe4.txt\") == \"No\"\
  )\nassert(file_name_check(file_name: \"all.exe.txt\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_No.exe\") == \"Yes\")\nassert(file_name_check(file_name: \"Is3youfault.txt\"\
  ) == \"Yes\")\nassert(file_name_check(file_name: \"no_one#knows.dll\") == \"Yes\"\
  )\nassert(file_name_check(file_name: \"1I563_Yes3.exe\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"I563_Yes3.txtt\") == \"No\")\nassert(file_name_check(file_name: \"final..txt\"\
  ) == \"No\")\nassert(file_name_check(file_name: \"final132\") == \"No\")\nassert(file_name_check(file_name:\
  \ \"_f4indsartal132.\") == \"No\")\nassert(file_name_check(file_name: \".txt\")\
  \ == \"No\")\nassert(file_name_check(file_name: \"s.\") == \"No\")"
completions: ["    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern)\n    let match = regex.firstMatch(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    if let range = match.range {\n        let substring = file_name.substring(with:\
    \ range)\n        if substring.count == 0 || substring[0].isLetter == false ||\
    \ substring[1] != \".\" {\n            return \"No\"\n        }\n    }\n    return\
    \ \"Yes\"", "    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index + 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1", "    let pattern = \"^[0-9]{0,3}\\.[a-zA-Z]{0,3}$\"\n    let\
    \ regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let result\
    \ = regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.utf16.count))\n\
    \    if result != nil {\n        let range = NSMakeRange(result.range.location,\
    \ result.range.length)\n        let file_name = file_name.substring(with: range)\n\
    \        return file_name\n    } else {\n        return \"No\"\n    }", "    let\
    \ file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.dropFirst()\n    let\
    \ file_name = file_name.dropLast()\n    let file_name = file_name.dropFirst(while:\
    \ { $0.isLetter })\n    let file_name = file_name.dropLast(while: { $0.isLetter\
    \ })\n    let file_name = file_name.dropFirst(while: { $0.isDigit })\n    let\
    \ file_name = file_name.dropLast(while: { $0.isDigit })\n    let file_name = file_name.dropFirst(while:\
    \ { $0.isLetter })\n    let file_name = file_name.dropLast(while: { $0.isLetter\
    \ })\n    let file_name = file_name.dropFirst(while: { $0.isDigit })\n    let\
    \ file_name = file_name.dropLast(while: { $0.isDigit })\n    let file_name = file_name.dropFirst(while:\
    \ { $0.isLetter })\n    let file_name = file_name.dropLast(while: { $0.isLetter\
    \ })\n    let file_name = file_name.dropFirst(while: { $0.isDigit })\n    let\
    \ file_name = file_name.dropLast(while: { $0.isDigit })\n    let file_name = file_name.dropFirst(while:\
    \ { $0.isLetter })\n    let file_name = file_name.dropLast(while: { $0.isLetter\
    \ })\n    let file_name = file_name.dropFirst(while: { $0.isDigit })\n    let\
    \ file_name = file_name.dropLast(while: { $0.isDigit })\n    let file_name = file_name.dropFirst(while:\
    \ { $0.isLetter })\n    let file_name = file_name.dropLast(while: { $0.isLetter\
    \ })\n    let file_name = file_name.dropFirst(while: { $0.isDigit })\n    let\
    \ file_name = file_name.dropLast(while: { $0.isDigit })\n    let file_name = file_name.dropFirst(while:\
    \ { $0.isLetter })\n    let file_name = file_name.dropLast(while: { $0.isLetter\
    \ })\n    let file_name = file_name.dropFirst(while: { $0.isDigit })\n    let\
    \ file_name = file_name.dropLast(while: { $0.isDigit })\n    let file_name = file_name.dropFirst(while:\
    \ { $0.isLetter })\n    let file_name = file_name.dropLast(while: { $0.isLetter\
    \ })\n    let file_name = file_name.dropFirst(while: { $0.isDigit })\n    let\
    \ file_name = file_name.dropLast(while", "    let pattern = \"^[0-9]{3}\\.\"\n\
    \    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n   \
    \ let results = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf8.count))\n    if !results.isEmpty {\n        return\
    \ \"No\"\n    }\n    let pattern = \"^[a-zA-Z]{1}\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let results = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.utf8.count))\n    if !results.isEmpty\
    \ {\n        return \"No\"\n    }\n    let pattern = \"^[a-zA-Z]{1}\\.[a-zA-Z]{1}$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let results = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf8.count))\n    if !results.isEmpty {\n        return\
    \ \"No\"\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_substr = file_name[..<dot_index]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    let dot_substr_lowercased_count\
    \ = dot_substr_lowercased.count\n    \n    if dot_substr_lowercased_count > 3\
    \ {\n        return \"No\"\n    }\n    \n    if dot_substr_lowercased_count ==\
    \ 0 {\n        return \"No\"\n    }\n    \n    if dot_substr_lowercased.first\
    \ != dot_substr_lowercased.first {\n        return \"No\"\n    }\n    \n    if\
    \ dot_substr_lowercased.first == dot_substr_lowercased.first && dot_substr_lowercased.last\
    \ != dot_substr_lowercased.last {\n        return \"No\"\n    }\n    \n    if\
    \ dot_substr_lowercased.first == dot_substr_lowercased.first && dot_substr_lowercased.last\
    \ == dot_substr_lowercased.last && dot_substr_lowercased.count != 3 {\n      \
    \  return \"No\"\n    }\n    \n    if dot_substr_lowercased.first == dot_substr_lowercased.first\
    \ && dot_substr_lowercased.last == dot_substr_lowercased.last && dot_substr_lowercased.count\
    \ == 3 {\n        let dot_substr_lowercased_lowercased = dot_substr_lowercased.lowercased()\n\
    \        \n        if dot_substr_lowercased_lowercased != \"txt\" && dot_substr_lowercased_lowercased\
    \ != \"exe\" && dot_substr_lowercased_lowercased != \"dll\" {\n            return\
    \ \"No\"\n        }\n    }\n    \n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.rangeOfString(\".\").location\n    let dot_length\
    \ = file_name.rangeOfString(\".\").length\n    \n    if dot_index == NSNotFound\
    \ || dot_length < 2 || dot_length > 3 {\n        return \"No\"\n    }\n    \n\
    \    let first_letter = file_name.substringToIndex(dot_index)\n    if first_letter\
    \ != \"a\" && first_letter != \"b\" && first_letter != \"c\" && first_letter !=\
    \ \"d\" && first_letter != \"e\" && first_letter != \"f\" && first_letter != \"\
    g\" && first_letter != \"h\" && first_letter != \"i\" && first_letter != \"j\"\
    \ && first_letter != \"k\" && first_letter != \"l\" && first_letter != \"m\" &&\
    \ first_letter != \"n\" && first_letter != \"o\" && first_letter != \"p\" && first_letter\
    \ != \"q\" && first_letter != \"r\" && first_letter != \"s\" && first_letter !=\
    \ \"t\" && first_letter != \"u\" && first_letter != \"v\" && first_letter != \"\
    w\" && first_letter != \"x\" && first_letter != \"y\" && first_letter != \"z\"\
    \ {\n        return \"No\"\n    }\n    \n    let extension = file_name.substringFromIndex(dot_index)\n\
    \    if extension != \"txt\" && extension != \"exe\" && extension != \"dll\" {\n\
    \        return \"No\"\n    }\n    \n    return \"Yes\"", "    let regex = try!\
    \ NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z0-9]+$\")\n    return regex.firstMatch(in:\
    \ file_name, options: .regularExpression) != nil ? \"Yes\" : \"No\"", "    let\
    \ regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options:\
    \ [])\n    let result = regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count))\n    if result != nil {\n        let range = result.range\n\
    \        let start = range.lowerBound\n        let end = range.upperBound\n  \
    \      let substring = file_name[start..<end]\n        let regex = try! NSRegularExpression(pattern:\
    \ \"^[a-zA-Z]+$\", options: [])\n        let result = regex.firstMatch(in: substring,\
    \ options: [], range: NSMakeRange(0, substring.characters.count))\n        if\
    \ result != nil {\n            let range = result.range\n            let start\
    \ = range.lowerBound\n            let end = range.upperBound\n            let\
    \ substring = substring[start..<end]\n            if substring == \"txt\" || substring\
    \ == \"exe\" || substring == \"dll\" {\n                return \"Yes\"\n     \
    \       }\n        }\n    }\n    return \"No\"", "    let pattern = \"^[0-9]{1,3}\\\
    .\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n\
    \    let matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf8.count))\n    if matches.count == 0 {\n        return\
    \ \"No\"\n    }\n    if matches.count > 1 {\n        return \"No\"\n    }\n  \
    \  if matches.count == 1 {\n        let range = matches[0].range\n        let\
    \ start = range.lowerBound\n        let end = range.upperBound\n        let substring\
    \ = file_name[start..<end]\n        let allowed = NSCharacterSet(charactersIn:\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\").inverted\n       \
    \ if substring.rangeOfCharacter(from: allowed) == nil {\n            return \"\
    No\"\n        }\n    }\n    return \"Yes\"", "    if file_name.count > 3 {\n \
    \       return \"No\"\n    }\n    if file_name.contains(\".\") {\n        return\
    \ \"No\"\n    }\n    if file_name.starts(with: \"a\") || file_name.starts(with:\
    \ \"A\") {\n        return \"No\"\n    }\n    if file_name.ends(with: \"txt\"\
    ) || file_name.ends(with: \"exe\") || file_name.ends(with: \"dll\") {\n      \
    \  return \"Yes\"\n    }\n    return \"No\"", "    var file_name_check = file_name\n\
    \    if file_name_check.count > 3 {\n        file_name_check = file_name_check.substringToIndex(advance(file_name_check.startIndex,\
    \ 3))\n    }\n    if file_name_check.characters.first != nil {\n        file_name_check\
    \ = file_name_check.substringToIndex(advance(file_name_check.startIndex, 1))\n\
    \    }\n    if file_name_check.characters.first == nil {\n        file_name_check\
    \ = \"No\"\n    }\n    if file_name_check.characters.last != nil {\n        file_name_check\
    \ = file_name_check.substringFromIndex(advance(file_name_check.endIndex, 1))\n\
    \    }\n    if file_name_check.characters.last == nil {\n        file_name_check\
    \ = \"No\"\n    }\n    if file_name_check.characters.last != \"txt\" && file_name_check.characters.last\
    \ != \"exe\" && file_name_check.characters.last != \"dll\" {\n        file_name_check\
    \ = \"No\"\n    }\n    return file_name_check", "    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index!\
    \ - 1\n    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n\
    \    let dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let\
    \ dot_index = dot_index! - 1\n    let dot_index = dot_index! - 1\n    let dot_index\
    \ = ", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[^.]+$\"\
    )\n    let results = regex.matches(in: file_name, range: NSRange(location: 0,\
    \ length: file_name.utf16.count))\n    if !results.isEmpty {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[^.]+$\");\n    let results = regex.matches(in: file_name, range:\
    \ NSRange(location: 0, length: file_name.utf16.count))\n    if results.count ==\
    \ 0 {\n        return \"No\"\n    }\n    if results.count == 1 {\n        let\
    \ range = results.rangeAt(0)\n        let match = file_name[range]\n        let\
    \ range = NSRange(location: 0, length: match.utf16.count)\n        let matchRange\
    \ = NSRange(location: 0, length: match.utf16.count)\n        let matchString =\
    \ file_name[range]\n        let matchRange = NSRange(location: 0, length: match.utf16.count)\n\
    \        let matchString = file_name[range]\n        let matchRange = NSRange(location:\
    \ 0, length: match.utf16.count)\n        let matchString = file_name[range]\n\
    \        let matchRange = NSRange(location: 0, length: match.utf16.count)\n  \
    \      let matchString = file_name[range]\n        let matchRange = NSRange(location:\
    \ 0, length: match.utf16.count)\n        let matchString = file_name[range]\n\
    \        let matchRange = NSRange(location: 0, length: match.utf16.count)\n  \
    \      let matchString = file_name[range]\n        let matchRange = NSRange(location:\
    \ 0, length: match.utf16.count)\n        let matchString = file_name[range]\n\
    \        let matchRange = NSRange(location: 0, length: match.utf16.count)\n  \
    \      let matchString = file_name[range]\n        let matchRange = NSRange(location:\
    \ 0, length: match.utf16.count)\n        let matchString = file_name[range]\n\
    \        let matchRange = NSRange(location: 0, length: match.utf16.count)\n  \
    \      let matchString = file_name[range]\n        let matchRange = NSRange(location:\
    \ 0, length: match.utf16.count)\n        let matchString = file_name[range]\n\
    \        let matchRange = NSRange(location: 0, length: match.utf16.count)\n  \
    \      let matchString = file_name[range]\n        let matchRange = NSRange(location:\
    \ 0, length: match.utf16.count)\n        let matchString = file_name[range]\n\
    \        let matchRange = NSRange(location: 0, length: match.utf16.count)\n  \
    \      let matchString = file_name[range]\n        let matchRange = NSRange(location:\
    \ 0, length: match.utf16.count)\n        let matchString = file_name[range]\n\
    \        let matchRange = NSRange(location: 0, length: match.utf16.count)\n  \
    \      let matchString = file_name[range]\n        let matchRange = NSRange(location:\
    \ 0, length: match.utf16.count)\n        let matchString = file_name[range]\n\
    \        let matchRange = NSRange(location: 0, length: match.utf16.count)\n  \
    \      let matchString = file_name[range]\n        let matchRange = NSRange(location:\
    \ 0, length: match.utf16.", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_length = dot_index != nil\
    \ ? dot_index!.distance(from: dot_index!.startIndex, to: dot_index!.endIndex)\
    \ : 0\n    let dot_length = dot_length > 3 ? false : true\n    let first_letter\
    \ = file_name.substring(from: dot_index!.startIndex)\n    let first_letter = first_letter.isEmpty\
    \ ? false : first_letter.isLetter\n    let substring_valid = dot_length > 0 &&\
    \ first_letter && [\"txt\", \"exe\", \"dll\"].contains(substring_before: first_letter)\n\
    \    return substring_valid ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{0,3}\\\
    .[a-zA-Z]{0,1}$\"\n    let regex = try! NSRegularExpression(pattern: pattern)\n\
    \    let result = regex.firstMatch(in: file_name, options: .regularExpression)\n\
    \    if result != nil {\n        return result.rangeAt(1).length == 0 ? \"Yes\"\
    \ : \"No\"\n    }\n    return \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-z][a-z][a-z]$\", options: [])\n    let matches = regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    if matches.count > 0 {\n        return String(cString: file_name)\n    }\
    \ else {\n        return \"No\"\n    }", "    var file_name_check = \"No\"\n \
    \   if file_name.count > 3 {\n        file_name_check = \"Yes\"\n    }\n    if\
    \ file_name.contains(\".\") {\n        file_name_check = file_name_check + \"\
    Yes\"\n    }\n    if file_name.characters.first != \"\" && file_name.characters.first\
    \ != \"a\" && file_name.characters.first != \"A\" {\n        file_name_check =\
    \ file_name_check + \"Yes\"\n    }\n    if file_name.characters.last != \"txt\"\
    \ && file_name.characters.last != \"exe\" && file_name.characters.last != \"dll\"\
    \ {\n        file_name_check = file_name_check + \"No\"\n    }\n    return file_name_check",
  "    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.first\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.letters)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.uppercaseLetters)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.lowercaseLetters)\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet(charactersIn: \"0123456789\"))\n    if file_name == nil || file_name!.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name!.first == \"\" || file_name!.first\
    \ != \"a\" || file_name!.first != \"b\" || file_name!.first != \"c\" || file_name!.first\
    \ != \"d\" || file_name!.first != \"e\" || file_name!.first != \"f\" || file_name!.first\
    \ != \"g\" || file_name!.first != \"h\" || file_name!.first != \"i\" || file_name!.first\
    \ != \"j\" || file_name!.first != \"k\" || file_name!.first != \"l\" || file_name!.first\
    \ != \"m\" || file_name!.first != \"n\" || file_name!.first != \"o\" || file_name!.first\
    \ != \"p\" || file_name!.first != \"q\" || file_name!.first != \"r\" || file_name!.first\
    \ != \"s\" || file_name!.first != \"t\" || file_name!.first != \"u\" || file_name!.first\
    \ != \"v\" || file_name!.first != \"w\" || file_name!.first != \"x\" || file_name!.first\
    \ != \"y\" || file_name!.first != \"z\" {\n        return \"No\"\n    }\n    if\
    \ file_name!.last != \"txt\" || file_name!.last != \"exe\" || file_name!.last\
    \ != \"dll\" {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name\
    \ = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n", "    let file_name = file_name.lowercased()\n \
    \   let dot_index = file_name.rangeOfString(\".\").location\n    let dot_length\
    \ = file_name.rangeOfString(\".\").length\n    let dot_index = dot_index == nil\
    \ ? 0 : dot_index!\n    let dot_length = dot_length == nil ? 0 : dot_length!\n\
    \    let dot_index = dot_index == 0\n    let dot_length = dot_length == 0\n  \
    \  let dot_index = dot_index == 0\n    let dot_length = dot_length == 0\n    let\
    \ dot_index = dot_index == 0\n    let dot_length = dot_length == 0\n    let dot_index\
    \ = dot_index == 0\n    let dot_length = dot_length == 0\n    let dot_index =\
    \ dot_index == 0\n    let dot_length = dot_length == 0\n    let dot_index = dot_index\
    \ == 0\n    let dot_length = dot_length == 0\n    let dot_index = dot_index ==\
    \ 0\n    let dot_length = dot_length == 0\n    let dot_index = dot_index == 0\n\
    \    let dot_length = dot_length == 0\n    let dot_index = dot_index == 0\n  \
    \  let dot_length = dot_length == 0\n    let dot_index = dot_index == 0\n    let\
    \ dot_length = dot_length == 0\n    let dot_index = dot_index == 0\n    let dot_length\
    \ = dot_length == 0\n    let dot_index = dot_index == 0\n    let dot_length =\
    \ dot_length == 0\n    let dot_index = dot_index == 0\n    let dot_length = dot_length\
    \ == 0\n    let dot_index = dot_index == 0\n    let dot_length = dot_length ==\
    \ 0\n    let dot_index = dot_index == 0\n    let dot_length = dot_length == 0\n\
    \    let dot_index = dot_index == 0\n    let dot_length = dot_length == 0\n  \
    \  let dot_index = dot_index == 0\n    let dot_length = dot_length == 0\n    let\
    \ dot_index = dot_index == 0\n    let dot_length = dot_length == 0\n    let dot_index\
    \ = dot_index == 0\n    let dot_length = dot_length == 0\n    let dot_index =\
    \ dot_index == 0\n    let dot_length = dot_length == 0\n    let dot_index = dot_index\
    \ == 0\n    let dot_length = dot_length == 0\n    let dot_index = dot_index ==\
    \ 0\n    let dot_length = dot_length == 0\n    let dot_index = dot_index == 0\n\
    \    let dot_length = dot_length == 0\n    let dot_index = dot_index == 0\n  \
    \  let dot_length = dot_length == 0\n    let dot_index = dot_index == 0\n    let\
    \ dot_length = dot_length == 0\n    let dot_index = dot_index == 0\n    let dot_length\
    \ = dot_length == 0\n    let dot_index = dot_index == 0\n    let dot_length =\
    \ dot_length == 0\n    let dot_index = dot_index == 0\n    let dot_length = dot_length\
    \ == 0\n    let dot_index = dot_index == 0\n    let dot_length = dot_length ==\
    \ 0\n    let dot_index = dot_index == 0\n    let dot_length = dot_length == 0\n\
    \    let dot_index = dot_index == 0\n    let dot_length = dot_length == 0\n  \
    \  let dot_index = dot_index == 0\n    let dot_length = dot_length == 0\n    let\
    \ dot_index = dot_index == 0", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-z][a-z][a-z]$\", options: [])\n    let results = regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.utf8.count))\n\
    \    if !results.isEmpty {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\
    \ - 1\n    let first_letter = file_name[dot_index..<dot_index+1]\n    let first_letter\
    \ = first_letter?.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let file", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_substr = file_name[..<dot_index]\n    let dot_substr_lowercased =\
    \ dot_substr.lowercased()\n    let dot_substr_lowercased_has_no_digits = dot_substr_lowercased.rangeOfCharacter(from:\
    \ CharacterSet.decimalDigits) != nil\n    let dot_substr_lowercased_has_no_letters\
    \ = dot_substr_lowercased.rangeOfCharacter(from: CharacterSet.letters) != nil\n\
    \    let dot_substr_has_no_empty_substring = dot_substr.rangeOfString(\"\") ==\
    \ nil\n    let dot_substr_has_no_dot_or_empty = dot_substr.rangeOfString(\"..\"\
    ) == nil\n    let dot_substr_has_no_dot_or_empty_or_letters = dot_substr_lowercased.rangeOfString(\"\
    ..\") == nil\n    let dot_substr_has_no_dot_or_empty_or_letters_or_digits = dot_substr_lowercased.rangeOfString(\"\
    ..\") == nil\n    let dot_substr_has_no_dot_or_empty_or_letters_or_digits_or_empty\
    \ = dot_substr_lowercased.rangeOfString(\"..\") == nil\n    let dot_substr_has_no_dot_or_empty_or_letters_or_digits_or_empty_or_has_no_dot_or_empty\
    \ = dot_substr_lowercased.rangeOfString(\"..\") == nil\n    let dot_substr_has_no_dot_or_empty_or_letters_or_digits_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty\
    \ = dot_substr_lowercased.rangeOfString(\"..\") == nil\n    let dot_substr_has_no_dot_or_empty_or_letters_or_digits_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty\
    \ = dot_substr_lowercased.rangeOfString(\"..\") == nil\n    let dot_substr_has_no_dot_or_empty_or_letters_or_digits_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty\
    \ = dot_substr_lowercased.rangeOfString(\"..\") == nil\n    let dot_substr_has_no_dot_or_empty_or_letters_or_digits_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty\
    \ = dot_substr_lowercased.rangeOfString(\"..\") == nil\n    let dot_substr_has_no_dot_or_empty_or_letters_or_digits_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty_or_has_no_dot_or_empty\
    \ = dot_substr_lowercased.rangeOfString(\"", "    let pattern = \"^[0-9]{3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern)\n  \
    \  let result = regex.firstMatch(in: file_name, options: .caseInsensitive)\n \
    \   return result != nil ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z]+$\", options: [])\n    let results = regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.utf16.count))\n\
    \    if !results.isEmpty {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    var file_name = file_name\n    if file_name.count > 3 {\n        file_name.removeFirst(3)\n\
    \    }\n    if file_name.contains(\".\") {\n        file_name.removeFirst()\n\
    \    }\n    if file_name.starts(with: \"a\") && file_name.ends(with: \"z\") ||\
    \ file_name.starts(with: \"A\") && file_name.ends(with: \"Z\") {\n        file_name.removeFirst()\n\
    \    }\n    if file_name.contains(\".\") {\n        var dot_index = file_name.index(of:\
    \ \".\")\n        var dot_substr = file_name[dot_index...dot_index+1]\n      \
    \  var dot_substr_lowercase = dot_substr.lowercased()\n        if dot_substr_lowercase\
    \ == \"txt\" || dot_substr_lowercase == \"exe\" || dot_substr_lowercase == \"\
    dll\" {\n            file_name.removeFirst()\n        }\n    }\n    return file_name",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(upTo:\
    \ dot_index)\n    let last_letter = file_name.suffix(from: dot_index)\n    let\
    \ first_letter = first_letter?.lowercased()\n    let last_letter = last_letter?.lowercased()\n\
    \    let valid_letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    let valid_letters_count\
    \ = valid_letters.count\n    let valid_letters_count = valid_letters_count!\n\
    \    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1\n    let valid_letters_count\
    \ = valid_letters_count + 1\n    let valid_letters_count = valid_letters_count\
    \ + 1\n    let valid_letters_count = valid_letters_count + 1", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.rangeOfString(\".\"\
    ).location\n    let dot_length = file_name.rangeOfString(\".\").length\n    let\
    \ dot_range = dot_index..<dot_index+dot_length\n    let dot_range = dot_range.map\
    \ { $0.isLetter }\n    let dot_range = dot_range.filter { !$0 }\n    let dot_range\
    \ = dot_range.map { $0.isEmpty ? false : $0 }\n    let dot_range = dot_range.map\
    \ { $0.isNotEmpty }\n    let dot_range = dot_range.map { $0.isNotEmpty }\n   \
    \ let dot_range = dot_range.map { $0.isNotEmpty }\n    let dot_range = dot_range.map\
    \ { $0.isNotEmpty }\n    let dot_range = dot_range.map { $0.isNotEmpty }\n   \
    \ let dot_range = dot_range.map { $0.isNotEmpty }\n    let dot_range = dot_range.map\
    \ { $0.isNotEmpty }\n    let dot_range = dot_range.map { $0.isNotEmpty }\n   \
    \ let dot_range = dot_range.map { $0.isNotEmpty }\n    let dot_range = dot_range.map\
    \ { $0.isNotEmpty }\n    let dot_range = dot_range.map { $0.isNotEmpty }\n   \
    \ let dot_range = dot_range.map { $0.isNotEmpty }\n    let dot_range = dot_range.map\
    \ { $0.isNotEmpty }\n    let dot_range = dot_range.map { $0.isNotEmpty }\n   \
    \ let dot_range = dot_range.map { $0.isNotEmpty }\n    let dot_range = dot_range.map\
    \ { $0.isNotEmpty }\n    let dot_range = dot_range.map { $0.isNotEmpty }\n   \
    \ let dot_range = dot_range.map { $0.isNotEmpty }\n    let dot_range = dot_range.map\
    \ { $0.isNotEmpty }\n    let dot_range = dot_range.map { $0.isNotEmpty }\n   \
    \ let dot_range = dot_range.map { $0.isNotEmpty }\n    let dot_range = dot_range.map\
    \ { $0.isNotEmpty }\n    let dot_range = dot_range.map { $0.isNotEmpty }\n   \
    \ let dot_range = dot_range.map { $0.isNotEmpty }\n    let dot_range = dot_range.map\
    \ { $0.isNotEmpty }\n    let dot_range = dot_range.map { $0.isNotEmpty }\n   \
    \ let dot_range = dot_range.map { $0.isNotEmpty }\n    let dot_range = dot_range.map\
    \ { $0.isNotEmpty }\n    let dot_range = dot_range.map { $0.isNotEmpty }\n   \
    \ let dot_range = dot_range.map { $0.isNotEmpty }\n    let dot_range = dot_",
  "    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != ", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-z][a-z]+$\", options: [])\n    let matches = regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    if matches.count > 0 {\n        let match = matches.first\n        let range\
    \ = match.range\n        let start = range.lowerBound\n        let end = range.upperBound\n\
    \        let substr = file_name[start..<end]\n        if substr.count > 0 && substr.first\
    \ != \".\" {\n            return substr\n        } else {\n            return\
    \ \"No\"\n        }\n    } else {\n        return \"No\"\n    }", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.rangeOfString(\".\"\
    ).location\n    let dot_length = file_name.rangeOfString(\".\").length\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_length = dot_length\
    \ != nil ? dot_length! : 0\n    let dot_index = dot_index != nil ? dot_index!\
    \ : 0\n    let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_length = dot_length != nil\
    \ ? dot_length! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n \
    \   let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_index =\
    \ dot_index != nil ? dot_index! : 0\n    let dot_length = dot_length != nil ?\
    \ dot_length! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n   \
    \ let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_length = dot_length != nil ? dot_length!\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_length\
    \ = dot_length != nil ? dot_length! : 0\n    let dot_index = dot_index != nil\
    \ ? dot_index! : 0\n    let dot_length = dot_length != nil ? dot_length! : 0\n\
    \    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_length = dot_length\
    \ != nil ? dot_length! : 0\n    let dot_index = dot_index != nil ? dot_index!\
    \ : 0\n    let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_length = dot_length != nil\
    \ ? dot_length! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n \
    \   let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_index =\
    \ dot_index != nil ? dot_index! : 0\n    let dot_length = dot_length != nil ?\
    \ dot_length! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n   \
    \ let dot_length = dot_length != nil ? dot_length! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_length = dot_length != nil ? dot_length!\
    \ : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_length\
    \ = dot_length != nil ? dot_length! : 0\n    let dot_index = dot_", "    let pattern\
    \ = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    let result = regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.utf16.count))\n    if let range = result?.range {\n\
    \        let file_name = file_name.substring(with: range)\n        if file_name.contains(\"\
    .\") {\n            if let first_letter = file_name.first?.unicodeScalars.first\
    \ {\n                if first_letter >= \"a\" && first_letter <= \"z\" || first_letter\
    \ >= \"A\" && first_letter <= \"Z\" {\n                    return \"Yes\"\n  \
    \              }\n            }\n        }\n        return \"No\"\n    }\n   \
    \ return \"No\"", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_", "    let regex = try!\
    \ NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z0-9]+$\")\n    let matches\
    \ = regex.matches(in: file_name, options: [], range: NSMakeRange(0, file_name.utf16.count))\n\
    \    if matches.count > 0 {\n        let range = matches[0].range\n        let\
    \ start = range.lowerBound\n        let end = range.upperBound\n        let substr\
    \ = file_name[start..<end]\n        if substr.contains(\".\") {\n            if\
    \ substr.first != \"\" && substr.first! >= 'a' && substr.first! <= 'z' {\n   \
    \             if substr.last != \"txt\" && substr.last != \"exe\" && substr.last\
    \ != \"dll\" {\n                    return \"No\"\n                }\n       \
    \     }\n        }\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.dropFirst()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n\
    \    let file_name = file_name.dropLast()\n    let file_name = file_name.dropLast()\n",
  "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    let result = regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.utf16.count))\n    if result != nil {\n        return\
    \ String(file_name[Range(result.range, in: file_name)!])\n    } else {\n     \
    \   return \"No\"\n    }", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_length = dot_index! - file_name.startIndex\n\
    \    \n    if dot_length == 0 || dot_length > 3 {\n        return \"No\"\n   \
    \ }\n    \n    let first_letter = file_name[file_name.startIndex..<dot_index!]\n\
    \    \n    if first_letter != \"a\" && first_letter != \"b\" && first_letter !=\
    \ \"c\" && first_letter != \"d\" && first_letter != \"e\" && first_letter != \"\
    f\" && first_letter != \"g\" && first_letter != \"h\" && first_letter != \"i\"\
    \ && first_letter != \"j\" && first_letter != \"k\" && first_letter != \"l\" &&\
    \ first_letter != \"m\" && first_letter != \"n\" && first_letter != \"o\" && first_letter\
    \ != \"p\" && first_letter != \"q\" && first_letter != \"r\" && first_letter !=\
    \ \"s\" && first_letter != \"t\" && first_letter != \"u\" && first_letter != \"\
    v\" && first_letter != \"w\" && first_letter != \"x\" && first_letter != \"y\"\
    \ && first_letter != \"z\" {\n        return \"No\"\n    }\n    \n    let extension\
    \ = file_name[dot_index!..<file_name.endIndex]\n    \n    if extension != \"txt\"\
    \ && extension != \"exe\" && extension != \"dll\" {\n        return \"No\"\n \
    \   }\n    \n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name.substring(to: dot_index)\n    let letters =\
    \ first_letter..<first_letter + first_letter.count\n    let letters_set = Set(letters)\n\
    \    if dot_index == 0 {\n        return first_letter\n    } else if dot_index\
    \ == file_name.count - 1 {\n        return first_letter + first_letter.count\n\
    \    } else if dot_index == file_name.count - 2 {\n        return first_letter\
    \ + first_letter.count + letters.count\n    } else if dot_index == file_name.count\
    \ - 3 {\n        return first_letter + first_letter.count + letters.count + letters.count\n\
    \    } else if dot_index == file_name.count - 4 {\n        return first_letter\
    \ + first_letter.count + letters.count + letters.count + letters.count\n    }\
    \ else if dot_index == file_name.count - 5 {\n        return first_letter + first_letter.count\
    \ + letters.count + letters.count + letters.count + letters.count\n    } else\
    \ if dot_index == file_name.count - 6 {\n        return first_letter + first_letter.count\
    \ + letters.count + letters.count + letters.count + letters.count + letters.count\n\
    \    } else if dot_index == file_name.count - 7 {\n        return first_letter\
    \ + first_letter.count + letters.count + letters.count + letters.count + letters.count\
    \ + letters.count + letters.count\n    } else if dot_index == file_name.count\
    \ - 8 {\n        return first_letter + first_letter.count + letters.count + letters.count\
    \ + letters.count + letters.count + letters.count + letters.count + letters.count\n\
    \    } else if dot_index == file_name.count - 9 {\n        return first_letter\
    \ + first_letter.count + letters.count + letters.count + letters.count + letters.count\
    \ + letters.count + letters.count + letters.count + letters.count\n    } else\
    \ if dot_index == file_name.count - 10 {\n        return first_letter + first_letter.count\
    \ + letters.count + letters.count + letters.count + letters.count + letters.count\
    \ + letters.count + letters.count + letters.count + letters.count + letters.count\n\
    \    } else if dot_index == file_name.count - 11 {\n        return first_letter\
    \ + first_letter.count + letters.count + letters.count + letters.count + letters.count\
    \ + letters.count + ", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    .[a-z]{2,3}$\", options: NSRegularExpression.Options.caseInsensitive)\n    return\
    \ regex.firstMatch(in: file_name, options: NSRegularExpression.MatchingOptions(rawValue:\
    \ 0), range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length ==\
    \ 0 ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.components(separatedBy: \".\")\n    let file_name = file_name[0]\n\
    \    let file_name = file_name.range(of: \"[a-z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[A-Z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[0-9]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z.]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z.]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z.]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z.]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z.]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z.]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z.]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z.]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z.]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z.]\", options: .caseInsensitive)\n\
    \    let file_name = file_name.range(of: \"[^0-9a-z]\", options: .caseInsensitive)\n\
    \    let file_name = ", "    if file_name.count > 3 {\n        return \"\"\n \
    \   }\n    if file_name.contains(\".\") {\n        return \"\"\n    }\n    if\
    \ file_name.starts(with: \"a\") || file_name.starts(with: \"A\") {\n        return\
    \ \"\"\n    }\n    if file_name.ends(with: \"txt\") || file_name.ends(with: \"\
    exe\") || file_name.ends(with: \"dll\") {\n        return \"\"\n    }\n    return\
    \ \"\"", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern)\n    let result = regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count))\n\
    \    if result != nil {\n        return String(file_name[Range(result.range, in:\
    \ file_name)!])\n    } else {\n        return \"No\"\n    }", "    let regex =\
    \ try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options: [])\n\
    \    return regex.firstMatch(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf16.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_substr = file_name[dot_index..<dot_index+1]\n    let first_letter\
    \ = dot_substr.first\n    let letters = first_letter...first_letter + first_letter.isUppercase\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_substr = file_name[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    let dot_substr_lowercased_index\
    \ = dot_substr_lowercased.index(of: \".\")\n    let dot_substr_lowercased_substr\
    \ = dot_substr_lowercased[dot_substr_lowercased_index..<dot_substr_lowercased_index+1]\n\
    \    let dot_substr_lowercased_substr_lowercased = dot_substr_lowercased_substr.lowercased()\n\
    \    let dot_substr_lowercased_substr_lowercased_index = dot_substr_lowercased_substr_lowercased.index(of:\
    \ \".\")\n    let dot_substr_lowercased_substr_lowercased_substr = dot_substr_lowercased_substr_lowercased[dot_substr_lowercased_substr_lowercased_index..<dot_substr_lowercased_substr_lowercased_index+1]\n\
    \    let dot_substr_lowercased_substr_lowercased_substr_lowercased = dot_substr_lowercased_substr_lowercased_substr.lowercased()\n\
    \    let dot_substr_lowercased_substr_lowercased_substr_lowercased_index = dot_substr_lowercased_substr_lowercased_substr_lowercased.index(of:\
    \ \".\")\n    let dot_substr_lowercased_substr_lowercased_substr_lowercased_substr\
    \ = dot_substr_lowercased_substr_lowercased_substr_lowercased[dot_substr_lowercased_substr_lowercased_substr_lowercased_index..<dot_substr_lowercased_substr_lowercased_substr_lowercased_index+1]\n\
    \    let dot_substr_lowercased_substr_lowercased_substr_lowercased_substr_lowercased\
    \ = dot_substr_lowercased_substr_lowercased_substr_lowercased_substr_lowercased.lowercased()\n\
    \    let dot_substr_lowercased_substr_lowercased_substr_lowercased_substr_lowercased_index\
    \ = dot_substr_lowercased_substr_lowercased_substr_lowercased_substr_lowercased.index(of:\
    \ \".\")\n    let dot_substr_lowercased_substr_lowercased_substr_lowercased_substr_lowercased_substr\
    \ = dot_substr_lowercased_substr_lowercased_substr_lowercased_substr_lowercased[dot_substr_lowercased_substr_lowercased_substr_lowercased_substr_lowercased_substr_lowercased_index..<dot_substr_lowercased_substr_lowercased_substr_lowercased_substr_lowercased_substr_lowercased_index",
  "    let pattern = \"^[0-9]{3}\\.\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    let results = regex.matches(in: file_name, range: NSRange(location:\
    \ 0, length: file_name.utf16.count))\n    if !results.isEmpty {\n        return\
    \ \"No\"\n    }\n    let pattern = \"^[a-z][a-zA-Z0-9]*\\.\"\n    let regex =\
    \ try! NSRegularExpression(pattern: pattern)\n    let results = regex.matches(in:\
    \ file_name, range: NSRange(location: 0, length: file_name.utf16.count))\n   \
    \ if !results.isEmpty {\n        return \"No\"\n    }\n    return \"Yes\"", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.substring(to:\
    \ dot_index)\n    let first_letter = first_letter?.lowercased()\n    let letters\
    \ = first_letter?.characters\n    let letters = letters?.filter({ $0 != \"a\"\
    \ && $0 != \"b\" && $0 != \"c\" && $0 != \"d\" && $0 != \"e\" && $0 != \"f\" &&\
    \ $0 != \"g\" && $0 != \"h\" && $0 != \"i\" && $0 != \"j\" && $0 != \"k\" && $0\
    \ != \"l\" && $0 != \"m\" && $0 != \"n\" && $0 != \"o\" && $0 != \"p\" && $0 !=\
    \ \"q\" && $0 != \"r\" && $0 != \"s\" && $0 != \"t\" && $0 != \"u\" && $0 != \"\
    v\" && $0 != \"w\" && $0 != \"x\" && $0 != \"y\" && $0 != \"z\" })\n    let letters\
    \ = letters?.filter({ $0 != \"0\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"1\" })\n    let letters = letters?.filter({ $0 != \"2\" })\n    let letters\
    \ = letters?.filter({ $0 != \"3\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"4\" })\n    let letters = letters?.filter({ $0 != \"5\" })\n    let letters\
    \ = letters?.filter({ $0 != \"6\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"7\" })\n    let letters = letters?.filter({ $0 != \"8\" })\n    let letters\
    \ = letters?.filter({ $0 != \"9\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"a\" })\n    let letters = letters?.filter({ $0 != \"b\" })\n    let letters\
    \ = letters?.filter({ $0 != \"c\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"d\" })\n    let letters = letters?.filter({ $0 != \"e\" })\n    let letters\
    \ = letters?.filter({ $0 != \"f\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"g\" })\n    let letters = letters?.filter({ $0 != \"h\" })\n    let letters\
    \ = letters?.filter({ $0 != \"i\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"j\" })\n    let letters = letters?.filter({ $0 != \"k\" })\n    let letters\
    \ = letters?", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex =\
    \ try! NSRegularExpression(pattern: pattern, options: [])\n    let results = regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.utf16.count))\n\
    \    if !results.isEmpty {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[^.]+$\", options:\
    \ [])\n    let results = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf16.count))\n    if results.count == 0 {\n        return\
    \ \"No\"\n    }\n    if results.count > 1 {\n        return \"No\"\n    }\n  \
    \  if results.count > 0 {\n        let range = results[0].range\n        let start\
    \ = range.lowerBound\n        let end = range.upperBound\n        let substr =\
    \ file_name[start..<end]\n        if substr.count != 1 || substr[0] != 'a' ||\
    \ substr[1] != 'z' || substr[2] != 'A' || substr[3] != 'Z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"", "    let pattern = \"^[0-9]{3}\\\
    .\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n\
    \    let result = regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf8.count))\n    if result != nil {\n        let range = NSMakeRange(0,\
    \ result.range!.location)\n        let substring = file_name.substring(with: range)\n\
    \        let pattern = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n        let result = regex.firstMatch(in: substring,\
    \ options: [], range: NSMakeRange(0, substring.utf8.count))\n        if result\
    \ != nil {\n            let range = NSMakeRange(0, result.range!.location)\n \
    \           let substring = substring.substring(with: range)\n            if substring\
    \ == \"txt\" || substring == \"exe\" || substring == \"dll\" {\n             \
    \   return \"Yes\"\n            }\n        }\n    }\n    return \"No\"", "   \
    \ let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[^.]+$\", options:\
    \ [])\n    let result = regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count))\n    if let range = result.range {\n        let\
    \ start = file_name.index(range.lowerBound, offsetBy: 0)\n        let end = file_name.index(range.upperBound,\
    \ offsetBy: 0)\n        return file_name[start..<end]\n    } else {\n        return\
    \ \"No\"\n    }", "    var file_name_check: String = \"No\"\n    if let file_name\
    \ = file_name.lowercased(), let dot_index = file_name.rangeOfString(\".\") {\n\
    \        let dot_range = dot_index.startIndex..<dot_index.endIndex\n        let\
    \ dot_string = file_name[dot_range]\n        if dot_string.characters.count ==\
    \ 1 && dot_string.lowercased() == \"txt\" {\n            file_name_check = \"\
    Yes\"\n        }\n    }\n    return file_name_check", "    let file_name = file_name\n\
    \    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name[0]\n    let file_name = file_name.characters.count\n\
    \    let file_name = file_name.characters.count > 3 && file_name.characters.count\
    \ < 6 && file_name.characters.count != 0 && file_name.characters.first != \".\"\
    \ && file_name.characters.first != \"a\" && file_name.characters.first != \"b\"\
    \ && file_name.characters.first != \"c\" && file_name.characters.first != \"d\"\
    \ && file_name.characters.first != \"e\" && file_name.characters.first != \"f\"\
    \ && file_name.characters.first != \"g\" && file_name.characters.first != \"h\"\
    \ && file_name.characters.first != \"i\" && file_name.characters.first != \"j\"\
    \ && file_name.characters.first != \"k\" && file_name.characters.first != \"l\"\
    \ && file_name.characters.first != \"m\" && file_name.characters.first != \"n\"\
    \ && file_name.characters.first != \"o\" && file_name.characters.first != \"p\"\
    \ && file_name.characters.first != \"q\" && file_name.characters.first != \"r\"\
    \ && file_name.characters.first != \"s\" && file_name.characters.first != \"t\"\
    \ && file_name.characters.first != \"u\" && file_name.characters.first != \"v\"\
    \ && file_name.characters.first != \"w\" && file_name.characters.first != \"x\"\
    \ && file_name.characters.first != \"y\" && file_name.characters.first != \"z\"\
    \n    if file_name == \"true\" {\n        return \"Yes\"\n    } else {\n     \
    \   return \"No\"\n    }", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n\
    \    let regex = try! NSRegularExpression(pattern: pattern)\n    let result =\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.utf16.count))\n\
    \    \n    if let range = result?.range {\n        let file_name = file_name.substring(with:\
    \ range)\n        return file_name\n    } else {\n        return \"No\"\n    }",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name[..<dot_index]\n\
    \    let second_letter = file_name[dot_index..<file_name.count]\n    let first_letter\
    \ = first_letter?.unicodeScalars.first?.asciiString\n    let second_letter = second_letter?.unicodeScalars.first?.asciiString\n\
    \    if dot_index == 0 {\n        return first_letter == \"a\" || first_letter\
    \ == \"b\" || first_letter == \"c\" || first_letter == \"d\" || first_letter ==\
    \ \"e\" || first_letter == \"f\" || first_letter == \"g\" || first_letter == \"\
    h\" || first_letter == \"i\" || first_letter == \"j\" || first_letter == \"k\"\
    \ || first_letter == \"l\" || first_letter == \"m\" || first_letter == \"n\" ||\
    \ first_letter == \"o\" || first_letter == \"p\" || first_letter == \"q\" || first_letter\
    \ == \"r\" || first_letter == \"s\" || first_letter == \"t\" || first_letter ==\
    \ \"u\" || first_letter == \"v\" || first_letter == \"w\" || first_letter == \"\
    x\" || first_letter == \"y\" || first_letter == \"z\"\n    } else if dot_index\
    \ == file_name.count - 1 {\n        return second_letter == \"txt\" || second_letter\
    \ == \"exe\" || second_letter == \"dll\"\n    } else {\n        return first_letter\
    \ == \"a\" || first_letter == \"b\" || first_letter == \"c\" || first_letter ==\
    \ \"d\" || first_letter == \"e\" || first_letter == \"f\" || first_letter == \"\
    g\" || first_letter == \"h\" || first_letter == \"i\" || first_letter == \"j\"\
    \ || first_letter == \"k\" || first_letter == \"l\" || first_letter == \"m\" ||\
    \ first_letter == \"n\" || first_letter == \"o\" || first_letter == \"p\" || first_letter\
    \ == \"q\" || first_letter == \"r\" || first_letter == \"s\" || first_letter ==\
    \ \"t\" || first_letter == \"u\" || first_letter == \"v\" || first_letter == \"\
    w\" || first_letter == \"x\" || first_letter == \"y\" || first_letter == \"z\"\
    \n    }", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n   \
    \ let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_", "    if file_name.count > 3 {\n   \
    \     return \"No\"\n    }\n    if file_name.contains(\".\") {\n        return\
    \ \"No\"\n    }\n    if file_name.starts(with: \"a\") || file_name.starts(with:\
    \ \"A\") {\n        return \"No\"\n    }\n    if file_name.ends(with: \"txt\"\
    ) || file_name.ends(with: \"exe\") || file_name.ends(with: \"dll\") {\n      \
    \  return \"Yes\"\n    }\n    return \"No\"", "    let pattern = \"^[0-9]{1,3}\\\
    .[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern: pattern)\n  \
    \  return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).location == 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length > 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length > 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length > 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length > 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length > 0 &&\n\
    \        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).length\
    \ > 0 &&\n", "    let file_name = file_name.lowercased()\n    let dot_index =\
    \ file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let first_letter\
    \ = file_name.substring(from: dot_index!)\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.prefix(3)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter", "    let pattern = \"^[0-9]{3}\\.txt|exe|dll$\"\n    let\
    \ regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z0-9]+$\", options: .caseInsensitive)\n    return regex.firstMatch(in:\
    \ file_name, options: .regularExpression) != nil ? \"Yes\" : \"No\"", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.rangeOfString(\"\
    .\").location\n    let dot_length = file_name.rangeOfString(\".\").length\n  \
    \  \n    if dot_index == NSNotFound {\n        return \"No\"\n    }\n    \n  \
    \  if dot_length > 3 {\n        return \"No\"\n    }\n    \n    let first_letter\
    \ = file_name.substringToIndex(dot_index)\n    \n    if first_letter.isEmpty {\n\
    \        return \"No\"\n    }\n    \n    if first_letter != \"a\" && first_letter\
    \ != \"b\" && first_letter != \"c\" && first_letter != \"d\" && first_letter !=\
    \ \"e\" && first_letter != \"f\" && first_letter != \"g\" && first_letter != \"\
    h\" && first_letter != \"i\" && first_letter != \"j\" && first_letter != \"k\"\
    \ && first_letter != \"l\" && first_letter != \"m\" && first_letter != \"n\" &&\
    \ first_letter != \"o\" && first_letter != \"p\" && first_letter != \"q\" && first_letter\
    \ != \"r\" && first_letter != \"s\" && first_letter != \"t\" && first_letter !=\
    \ \"u\" && first_letter != \"v\" && first_letter != \"w\" && first_letter != \"\
    x\" && first_letter != \"y\" && first_letter != \"z\" {\n        return \"No\"\
    \n    }\n    \n    let extension = file_name.substringFromIndex(dot_index)\n \
    \   \n    if extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    \ {\n        return \"Yes\"\n    }\n    \n    return \"No\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.tri", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\", options: [])\n    return regex.firstMatch(in: file_name,\
    \ options: [], range: NSRange(location: 0, length: file_name.utf8.count)).rangeAt(1).length\
    \ == 0 ? \"No\" : \"Yes\"", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let first_letter = file_name.substring(to: dot_index)\n    let first_letter\
    \ = first_letter?.lowercased()\n    let letters = first_letter?.characters\n \
    \   let letters = letters?.filter({ $0 != \"a\" && $0 != \"b\" && $0 != \"c\"\
    \ && $0 != \"d\" && $0 != \"e\" && $0 != \"f\" && $0 != \"g\" && $0 != \"h\" &&\
    \ $0 != \"i\" && $0 != \"j\" && $0 != \"k\" && $0 != \"l\" && $0 != \"m\" && $0\
    \ != \"n\" && $0 != \"o\" && $0 != \"p\" && $0 != \"q\" && $0 != \"r\" && $0 !=\
    \ \"s\" && $0 != \"t\" && $0 != \"u\" && $0 != \"v\" && $0 != \"w\" && $0 != \"\
    x\" && $0 != \"y\" && $0 != \"z\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"0\" })\n    let letters = letters?.filter({ $0 != \"1\" })\n    let letters\
    \ = letters?.filter({ $0 != \"2\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"3\" })\n    let letters = letters?.filter({ $0 != \"4\" })\n    let letters\
    \ = letters?.filter({ $0 != \"5\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"6\" })\n    let letters = letters?.filter({ $0 != \"7\" })\n    let letters\
    \ = letters?.filter({ $0 != \"8\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"9\" })\n    let letters = letters?.filter({ $0 != \"a\" })\n    let letters\
    \ = letters?.filter({ $0 != \"b\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"c\" })\n    let letters = letters?.filter({ $0 != \"d\" })\n    let letters\
    \ = letters?.filter({ $0 != \"e\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"f\" })\n    let letters = letters?.filter({ $0 != \"g\" })\n    let letters\
    \ = letters?.filter({ $0 != \"h\" })\n    let letters = letters?.filter({ $0 !=\
    \ \"i\" })\n    let letters = letters?.filter({ $0 != \"j\" })\n    let letters\
    \ = letters?.filter({ $0 != \"k\" })\n    let letters = letters?", "    if file_name.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name.contains(\".\") {\n  \
    \      return \"No\"\n    }\n    if file_name.starts(with: \"a\") || file_name.starts(with:\
    \ \"A\") {\n        return \"No\"\n    }\n    if file_name.contains(\".\") {\n\
    \        let dotIndex = file_name.index(of: \".\")\n        let fileName = file_name[..<dotIndex]\n\
    \        let extension = file_name[dotIndex..<file_name.count]\n        if fileName.contains(\"\
    .txt\") || fileName.contains(\".exe\") || fileName.contains(\".dll\") {\n    \
    \        return \"Yes\"\n        }\n    }\n    return \"No\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let first_letter = file_name.prefix(dot_index)\n\
    \    let first_letter = first_letter!\n    let letters = first_letter...first_letter\
    \ + first_letter.count - 1\n    let letters = letters.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let last_letter\
    \ = file_name.suffix(dot_index)\n    let last_letter = last_letter!\n    let letters\
    \ = letters.lowercased()\n    let file_name = letters + \".\" + last_letter\n\
    \    return file_name", "    var file_name_check = \"No\"\n    \n    // Check\
    \ that the file name contains exactly one dot '.'\n    if file_name.contains(\"\
    .\") {\n        \n        // Check that the substring before the dot should not\
    \ be empty, and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \        if let first_letter = file_name.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicodeScalars.first?.unicode",
  "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options:\
    \ [])\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_length = dot_index! - file_name.startIndex\n    let dot_string\
    \ = file_name[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \"-\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \".\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \"-\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \".\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \"-\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \".\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \"-\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \".\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \"-\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \".\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \"-\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \".\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \"-\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \".\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \"-\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \".\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \"-\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n\
    \    let dot_index = dot_string.index(of: \".\")\n    let dot_string = dot_string[dot_index!..<dot_string.endIndex]\n",
  "    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    \\.[a-zA-Z0-9]+$\", options: [])\n    let results = regex.matches(in: file_name,\
    \ options: [], range: NSRange(location: 0, length: file_name.utf16.count))\n \
    \   if !results.isEmpty {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n   \
    \ let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let first_letter = file_name.prefix(dot_index)\n    let first_letter = first_letter!\n\
    \    let first_letter = first_letter?.uppercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalized()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.capitalize", "    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: .punctuationCharacters)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let\
    \ file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    if dot_index == nil || dot_index!\
    \ < 1 || dot_index! > 3 {\n        return \"No\"\n    }\n    if letter_index ==\
    \ nil || letter_index! < 1 || letter_index! > 3 {\n        return \"No\"\n   \
    \ }\n    if dot_index! == dot_index {\n        if letter_index! < dot_index! {\n\
    \            return \"No\"\n        }\n    }\n    if dot_index! == dot_index {\n\
    \        if letter_index! > dot_index! {\n            return \"No\"\n        }\n\
    \    }\n    if dot_index! == dot_index {\n        if letter_index! < dot_index!\
    \ {\n            return \"No\"\n        }\n    }\n    if dot_index! == dot_index\
    \ {\n        if letter_index! > dot_index! {\n            return \"No\"\n    \
    \    }\n    }\n    if dot_index! == dot_index {\n        if letter_index! < dot_index!\
    \ {\n            return \"No\"\n        }\n    }\n    if dot_index! == dot_index\
    \ {\n        if letter_index! > dot_index! {\n            return \"No\"\n    \
    \    }\n    }\n    if dot_index! == dot_index {\n        if letter_index! < dot_index!\
    \ {\n            return \"No\"\n        }\n    }\n    if dot_index! == dot_index\
    \ {\n        if letter_index! > dot_index! {\n            return \"No\"\n    \
    \    }\n    }\n    if dot_index! == dot_index {\n        if letter_index! < dot_index!\
    \ {\n            return \"No\"\n        }\n    }\n    if dot_index! == dot_index\
    \ {\n        if letter_index! > dot_index! {\n            return \"No\"\n    \
    \    }\n    }\n    if dot_index! == dot_index {\n        if letter_index! < dot_index!\
    \ {\n            return \"No\"\n        }", "    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let ", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[a-zA-Z0-9]+$\", options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 ? \"Yes\" : \"No\"", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n  \
    \  let regex = try! NSRegularExpression(pattern: pattern)\n    let result = regex.firstMatch(in:\
    \ file_name, options: .caseInsensitive)\n    \n    if let match = result {\n \
    \       return String(file_name[match.range])\n    } else {\n        return \"\
    No\"\n    }", "    if file_name.count > 3 {\n        return \"No\"\n    }\n  \
    \  if file_name.contains(\".\") {\n        return \"No\"\n    }\n    if file_name.starts(with:\
    \ \"a\") || file_name.starts(with: \"A\") {\n        return \"No\"\n    }\n  \
    \  if file_name.ends(with: \"txt\") || file_name.ends(with: \"exe\") || file_name.ends(with:\
    \ \"dll\") {\n        return \"Yes\"\n    }\n    return \"No\"", "    let pattern\
    \ = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.stringByReplacingMatchesInString(file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count), withTemplate: \"Yes\"\
    )", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.substring(to:\
    \ dot_index)\n    let first_letter = first_letter?.lowercased()\n    let first_letter\
    \ = first_letter?.prefix(2)\n    let first_letter = first_letter?.prefix(3)\n\
    \    if dot_index == nil || dot_index! >= file_name.count {\n        return \"\
    No\"\n    }\n    if dot_index! >= 3 || first_letter == nil || first_letter! >=\
    \ 'a' || first_letter! < 'z' {\n        return \"No\"\n    }\n    if dot_index!\
    \ >= 3 || first_letter! >= 'a' || first_letter! < 'z' || first_letter! >= 'A'\
    \ || first_letter! < 'Z' {\n        return \"No\"\n    }\n    if dot_index! >=\
    \ 3 || first_letter! >= 'a' || first_letter! < 'z' || first_letter! >= 'A' ||\
    \ first_letter! < 'Z' || first_letter! >= '0' || first_letter! < '9' {\n     \
    \   return \"No\"\n    }\n    if dot_index! >= 3 || first_letter! >= 'a' || first_letter!\
    \ < 'z' || first_letter! >= 'A' || first_letter! < 'Z' || first_letter! >= '0'\
    \ || first_letter! < '9' || file_name[dot_index!-1] != '.' {\n        return \"\
    No\"\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.tri", "    let file_name = file_name.lowercased()\n    let dot_index\
    \ = file_name.index(of: \".\")\n    let dot_substr = file_name[..<dot_index]\n\
    \    let dot_dot_index = dot_substr.index(of: \".\")\n    let dot_dot_substr =\
    \ dot_substr[..<dot_dot_index]\n    let dot_dot_dot_index = dot_dot_substr.index(of:\
    \ \".\")\n    let dot_dot_dot_substr = dot_dot_substr[..<dot_dot_dot_index]\n\
    \    let dot_dot_dot_dot_index = dot_dot_dot_substr.index(of: \".\")\n    let\
    \ dot_dot_dot_dot_substr = dot_dot_dot_substr[..<dot_dot_dot_dot_index]\n    let\
    \ dot_dot_dot_dot_dot_index = dot_dot_dot_dot_substr.index(of: \".\")\n    let\
    \ dot_dot_dot_dot_dot_substr = dot_dot_dot_dot_substr[..<dot_dot_dot_dot_dot_dot_index]\n\
    \    let dot_dot_dot_dot_dot_dot_index = dot_dot_dot_dot_dot_substr.index(of:\
    \ \".\")\n    let dot_dot_dot_dot_dot_dot_substr = dot_dot_dot_dot_dot_substr[..<dot_dot_dot_dot_dot_dot_dot_index]\n\
    \    let dot_dot_dot_dot_dot_dot_dot_index = dot_dot_dot_dot_dot_dot_dot_substr.index(of:\
    \ \".\")\n    let dot_dot_dot_dot_dot_dot_dot_substr = dot_dot_dot_dot_dot_dot_dot_dot_substr[..<dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index]\n\
    \    let dot_dot_dot_dot_dot_dot_dot_dot_substr = dot_dot_dot_dot_dot_dot_dot_dot_dot_substr[..<dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_",
  "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options:\
    \ [])\n    let matches = regex.matches(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf16.count))\n    if matches.count > 0 {\n        let range = matches[0].range\n\
    \        let start = range.lowerBound\n        let end = range.upperBound\n  \
    \      let substr = file_name[start..<end]\n        if !substr.contains(\".\"\
    ) {\n            return \"No\"\n        }\n        if !substr.starts(with: \"\
    a\") {\n            return \"No\"\n        }\n        if !substr.starts(with:\
    \ \"z\") {\n            return \"No\"\n        }\n        if !substr.starts(with:\
    \ \"A\") {\n            return \"No\"\n        }\n        if !substr.ends(with:\
    \ \"txt\") && !substr.ends(with: \"exe\") && !substr.ends(with: \"dll\") {\n \
    \           return \"No\"\n        }\n        return \"Yes\"\n    }\n    return\
    \ \"No\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.rangeOfString(\"\
    .\").location\n    let dot_length = file_name.rangeOfString(\".\").length\n  \
    \  let dot_dot_index = file_name.rangeOfString(\".\").location + dot_length\n\
    \    let dot_dot_length = file_name.rangeOfString(\".\").length\n    let dot_dot_dot_index\
    \ = file_name.rangeOfString(\".\").location + dot_dot_length\n    let dot_dot_dot_dot_index\
    \ = file_name.rangeOfString(\".\").location + dot_dot_dot_length\n    let dot_dot_dot_dot_dot_index\
    \ = file_name.rangeOfString(\".\").location + dot_dot_dot_dot_length\n    let\
    \ dot_dot_dot_dot_dot_dot_index = file_name.rangeOfString(\".\").location + dot_dot_dot_dot_dot_dot_length\n\
    \    let dot_dot_dot_dot_dot_dot_dot_index = file_name.rangeOfString(\".\").location\
    \ + dot_dot_dot_dot_dot_dot_dot_length\n    let dot_dot_dot_dot_dot_dot_dot_dot_index\
    \ = file_name.rangeOfString(\".\").location + dot_dot_dot_dot_dot_dot_dot_dot_dot_length\n\
    \    let dot_dot_dot_dot_dot_dot_dot_dot_index = file_name.rangeOfString(\".\"\
    ).location + dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length\n    let dot_dot_dot_dot_dot_dot_dot_dot_dot_index\
    \ = file_name.rangeOfString(\".\").location + dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length\n\
    \    let dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index = file_name.rangeOfString(\"\
    .\").location + dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length\n    let\
    \ dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index = file_name.rangeOfString(\".\"\
    ).location + dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length\n    let dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index\
    \ = file_name.rangeOfString(\".\").location + dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length\n\
    \    let dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index = file_name.rangeOfString(\"\
    .\").location + dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length\n\
    \    let dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index = file_name.rangeOfString(\"\
    .\").location + dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length\n\
    \    let dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index = file_name.rangeOfString(\"\
    .\").location + dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_length\n\
    \    let dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_index = ", " \
    \   let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"", " \
    \   if file_name.count > 3 {\n        return \"No\"\n    }\n    if file_name.contains(\"\
    .\") {\n        return \"No\"\n    }\n    if file_name.starts(with: \"a\") ||\
    \ file_name.starts(with: \"A\") {\n        return \"No\"\n    }\n    if file_name.ends(with:\
    \ \"txt\") || file_name.ends(with: \"exe\") || file_name.ends(with: \"dll\") {\n\
    \        return \"Yes\"\n    }\n    return \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\
    \ - 1\n    let first_letter = file_name[dot_index..<dot_index+1]\n    let letters\
    \ = first_letter..<first_letter + \"Z\".count\n    let letters = letters.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\
    \ - 1\n    let last_letter = file_name[dot_index..<dot_index+1]\n    let letters\
    \ = letters.lowercased()\n    let dot_index = file_name.index(of: \".\")\n   \
    \ let dot_index = dot_index! - 1\n    let extension = file_name[dot_index..<dot_index+1]\n\
    \    let extension = extension.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let second_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = letters.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let third_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = letters.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let fourth_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = letters.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let fifth_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = letters.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let sixth_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = letters.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let seventh_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = letters.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let eighth_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = letters.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let ninth_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = letters.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let tenth_letter = file_name[dot_index..<dot_index+1]\n\
    \    let letters = letters.lowercased()\n    let ", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[^.]+$\");\n    let results = regex.matches(in: file_name, range:\
    \ NSRange(location: 0, length: file_name.utf16.count))\n    if !results.isEmpty\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let first_letter = file_name.prefix(from:\
    \ dot_index)\n    let file_name = file_name.dropFirst(dot_index)\n    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let file_name = file_name.dropFirst(dot_index)\n    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let file_name = file_name.dropFirst(dot_index)\n\
    \    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let file_name = file_name.dropFirst(dot_index)\n    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let file_name = file_name.dropFirst(dot_index)\n    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let file_name = file_name.dropFirst(dot_index)\n\
    \    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let file_name = file_name.dropFirst(dot_index)\n    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let file_name = file_name.dropFirst(dot_index)\n    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let file_name = file_name.dropFirst(dot_index)\n\
    \    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let file_name = file_name.dropFirst(dot_index)\n    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let file_name = file_name.dropFirst(dot_index)\n    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let file_name = file_name.dropFirst(dot_index)\n\
    \    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let file_name = file_name.dropFirst(dot_index)\n    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let file_name = file_name.dropFirst(dot_index)\n    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let file_name = file_name.dropFirst(dot_index)\n\
    \    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let file_name = file_name.dropFirst(dot_index)\n    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let file_name = file_name.dropFirst(dot_index)\n    let file_name = file_name.lowercase",
  "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[^.]+$\")\n \
    \   let result = regex.firstMatch(in: file_name, options: .regularExpression)\n\
    \    if let range = result?.range(at: 1) {\n        let file_name = file_name[range]\n\
    \        let dot_index = file_name.index(file_name.startIndex, offsetBy: 1)\n\
    \        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index?.advanced(by:\
    \ 1)\n        let dot_index = dot_index?.advanced(by: 1)\n        let dot_index\
    \ = dot_index?.advanced(by: 1)\n        let dot_index = dot_index", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_", "    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.components(separatedBy: CharacterSet.letters)\n\
    \    let file_name = file_name[0]\n    let file_name = file_name.components(separatedBy:\
    \ CharacterSet.alphanumerics)\n    let file_name = file_name[0]\n    let file_name\
    \ = file_name.components(separatedBy: CharacterSet.symbols)\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.components(separatedBy: CharacterSet.newlines)\n\
    \    let file_name = file_name[0]\n    let file_name = file_name.components(separatedBy:\
    \ CharacterSet.whitespaces)\n    let file_name = file_name[0]\n    let file_name\
    \ = file_name.components(separatedBy: CharacterSet.symbols)\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.components(separatedBy: CharacterSet.newlines)\n\
    \    let file_name = file_name[0]\n    let file_name = file_name.components(separatedBy:\
    \ CharacterSet.whitespaces)\n    let file_name = file_name[0]\n    let file_name\
    \ = file_name.components(separatedBy: CharacterSet.alphanumerics)\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.components(separatedBy: CharacterSet.symbols)\n\
    \    let file_name = file_name[0]\n    let file_name = file_name.components(separatedBy:\
    \ CharacterSet.newlines)\n    let file_name = file_name[0]\n    let file_name\
    \ = file_name.components(separatedBy: CharacterSet.whitespaces)\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.components(separatedBy: CharacterSet.alphanumerics)\n\
    \    let file_name = file_name[0]\n    let file_name = file_name.components(separatedBy:\
    \ CharacterSet.symbols)\n    let file_name = file_name[0]\n    let file_name =\
    \ file_name.components(separatedBy: CharacterSet.newlines)\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.components(separatedBy: CharacterSet.whitespaces)\n\
    \    let file_name = file_name[0]\n    let file_name = file_name.components(separatedBy:\
    \ CharacterSet.alphanumerics)\n    let file_name = file_name[0]\n    let file_name\
    \ = file_name.components(separatedBy: CharacterSet.symbols)\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.components(separatedBy: CharacterSet.newlines)\n\
    \    let file_name = file_name[0]\n    let file_name = file_name.components(separatedBy:\
    \ CharacterSet.whitespaces)\n    let file_name = file_name[0]\n    let file_name\
    \ = file_name.components(separatedBy: CharacterSet.alphanumerics)", "    let regex\
    \ = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\")\n    let matches\
    \ = regex.matches(in: file_name, range: NSRange(location: 0, length: file_name.count))\n\
    \    if matches.count > 0 {\n        let match = matches.first\n        let range\
    \ = match.range\n        let start = range.lowerBound\n        let end = range.upperBound\n\
    \        let substring = file_name[start..<end]\n        if substring == \".\"\
    \ {\n            let regex = try! NSRegularExpression(pattern: \"^[a-zA-Z]+\"\
    )\n            let matches = regex.matches(in: file_name, range: NSRange(location:\
    \ start.advanced(by: 1), length: file_name.count - 1))\n            if matches.count\
    \ > 0 {\n                let match = matches.first\n                let range\
    \ = match.range\n                let start = range.lowerBound\n              \
    \  let end = range.upperBound\n                let substring = file_name[start..<end]\n\
    \                if substring != \"txt\" && substring != \"exe\" && substring\
    \ != \"dll\" {\n                    return \"No\"\n                }\n       \
    \     }\n        }\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_substr = file_name[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n\
    \    let dot_substr_lowercased = dot_substr.lowercased()\n    \n    let dot_index\
    \ = dot_substr.index(of: \".\")\n    let dot_substr = dot_substr[dot_index..<dot_index+1]\n",
  "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options:\
    \ [])\n    let matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    if matches.count > 0 {\n        return \"\
    Yes\"\n    } else {\n        return \"No\"\n    }", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index! - 1\n    let first_letter = file_name.substring(from:\
    \ dot_index)\n    let letters = first_letter\n    let letters_count = letters.count\n\
    \    let letters_count_min = letters.count\n    let letters_count_max = letters.count\n\
    \    let letters_count_range = letters_count_max - letters_count_min\n    let\
    \ letters_count_range_min = letters_count_min\n    let letters_count_range_max\
    \ = letters_count_max\n    let letters_count_range_range = letters_count_range_max\
    \ - letters_count_range_min\n    let letters_count_range_range_min = letters_count_range_min\n\
    \    let letters_count_range_range_max = letters_count_range_max\n    let letters_count_range_range_range\
    \ = letters_count_range_range_max - letters_count_range_range_min\n    let letters_count_range_range_range_min\
    \ = letters_count_range_range_min\n    let letters_count_range_range_range_max\
    \ = letters_count_range_range_max\n    let letters_count_range_range_range_range\
    \ = letters_count_range_range_range_max - letters_count_range_range_range_min\n\
    \    let letters_count_range_range_range_range_min = letters_count_range_range_range_min\n\
    \    let letters_count_range_range_range_range_max = letters_count_range_range_range_max\n\
    \    let letters_count_range_range_range_range_range = letters_count_range_range_range_range_max\
    \ - letters_count_range_range_range_range_min\n    let letters_count_range_range_range_range_range_min\
    \ = letters_count_range_range_range_range_min\n    let letters_count_range_range_range_range_range_max\
    \ = letters_count_range_range_range_range_range_max\n    let letters_count_range_range_range_range_range_range\
    \ = letters_count_range_range_range_range_range_max - letters_count_range_range_range_range_range_min\n\
    \    let letters_count_range_range_range_range_range_range_min = letters_count_range_range_range_range_range_range_min\n\
    \    let letters_count_range_range_range_range_range_range_max = letters_count_range_range_range_range_range_range_max\n\
    \    let letters_count_range_range_range_range_range_range_range = letters_count_range_range_range_range_range_range_range_max\
    \ - letters_count_range_range_range_range_range_range_range_min\n    let letters_count_range_range_range_range_range_range_range_range_min\
    \ = letters_count_range_range_range_range_range_range_range_range_min\n    let\
    \ letters_count_range_range_range_range_range_range_range_range_max = letters_count_range_range_range_range_range_range_range_range_range_max\n\
    \    let letters_count_range_range_range_range_range_range_range_range_range =\
    \ letters_count_range_range_range_range_range_range_range_range_range_range_max\
    \ - letters_count_range_", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let first_letter = file_name.prefix(upTo: dot_index)\n    let last_letter =\
    \ file_name.suffix(from: dot_index)\n    let valid_chars = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    let valid_chars = valid_chars.lowercased()\n    let first_letter = first_letter!\n\
    \    let last_letter = last_letter!\n    let first_letter_index = valid_chars.index(first_letter)\n\
    \    let last_letter_index = valid_chars.index(last_letter)\n    let first_letter_index\
    \ = first_letter_index!\n    let last_letter_index = last_letter_index!\n    if\
    \ dot_index == nil || dot_index! < 0 {\n        return \"No\"\n    }\n    if dot_index!\
    \ > dot_index {\n        return \"No\"\n    }\n    if first_letter_index == nil\
    \ || first_letter_index! < 0 {\n        return \"No\"\n    }\n    if first_letter_index!\
    \ > first_letter_index {\n        return \"No\"\n    }\n    if last_letter_index\
    \ == nil || last_letter_index! < 0 {\n        return \"No\"\n    }\n    if last_letter_index!\
    \ > last_letter_index {\n        return \"No\"\n    }\n    if first_letter_index!\
    \ != last_letter_index! {\n        return \"No\"\n    }\n    if first_letter_index!\
    \ != dot_index! {\n        return \"No\"\n    }\n    if first_letter_index! !=\
    \ 0 {\n        return \"No\"\n    }\n    if last_letter_index! != valid_chars.count\
    \ {\n        return \"No\"\n    }\n    if first_letter_index! != last_letter_index!\
    \ {\n        return \"No\"\n    }\n    if first_letter_index! != dot_index! {\n\
    \        return \"No\"\n    }\n    if first_letter_index! != 0 {\n        return\
    \ \"No\"\n    }\n    if dot_index! != valid_chars.count {\n        return \"No\"\
    \n    }\n    if dot_index! != dot_index! {\n        return \"No\"\n    }\n   \
    \ if dot_index! != dot_index! {\n        return \"No\"\n    }\n    if dot_index!\
    \ != dot_index! {\n        return \"No\"\n    }\n    if dot_index! != dot_index!\
    \ {\n        return \"No\"\n    }\n    if dot_index! != dot_index! {\n       \
    \ return \"No\"\n    }\n    if dot_index! != dot_index! {\n        return \"No\"\
    \n    }\n    if dot_index! != dot_index! {\n        return \"No\"\n    }\n   \
    \ if dot_index! != dot_index! {\n        return \"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]{0,3}$\", options: [])\n    let matches = regex.matches(in:\
    \ file_name, options: [], range: NSRange(location: 0, length: file_name.count))\n\
    \    if matches.count > 0 {\n        return file_name\n    } else {\n        return\
    \ \"No\"\n    }", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    \\.[^.]+$\")\n    let range = NSRange(location: 0, length: file_name.utf8.count)\n\
    \    return regex.firstMatch(in: file_name, options: [], range: range)?.range?.location\
    \ != nil ? \"Yes\" : \"No\"", "    let file_name = file_name\n    let file_name\
    \ = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.filter({$0.count > 1})\n    let file_name\
    \ = file_name.first\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters)\n\
    \    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(CharacterSet(charactersIn:\
    \ \"0123456789\")))\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet(charactersIn:\
    \ \".\"))\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet(charactersIn:\
    \ \"a...zA...Z\"))\n    if file_name == nil || file_name!.location != NSNotFound\
    \ {\n        return \"No\"\n    } else {\n        return \"Yes\"\n    }", "  \
    \  let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.substring(to:\
    \ dot_index)\n    let first_letter = first_letter?.lowercased()\n    let first_letter\
    \ = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_letter?.prefix(1)\n    let first_letter = first_letter?.prefix(1)\n\
    \    let first_letter = first_", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]{0,3}$\", options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.utf16.count)).rangeAt(1).location\
    \ == 0 ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n    let\
    \ dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n   \
    \ let dot_length = dot_index - dot_index!\n    let dot_length = dot_length!\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_length = dot_length\n    let dot_length = dot_length\n\
    \    let dot_length = dot_length\n    let dot_length = dot_length\n    let dot_length\
    \ = dot_length\n    let dot_", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-z][a-z][a-z]$\", options: [])\n    let result = regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count))\n\
    \    if result != nil {\n        return String(file_name[Range(result.range(at:\
    \ 1), in: file_name)!])\n    } else {\n        return \"No\"\n    }", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_substr = file_name[..<dot_index]\n    let dot_first_letter\
    \ = dot_substr.first\n    let dot_last_letter = dot_substr.last\n    let dot_first_letter_is_letter\
    \ = dot_first_letter >= 'a' && dot_first_letter <= 'z'\n    let dot_last_letter_is_letter\
    \ = dot_last_letter >= 'a' && dot_last_letter <= 'z'\n    let dot_first_letter_is_digit\
    \ = dot_first_letter >= '0' && dot_first_letter <= '9'\n    let dot_last_letter_is_digit\
    \ = dot_last_letter >= '0' && dot_last_letter <= '9'\n    let dot_first_letter_is_dot_or_exe\
    \ = dot_first_letter_is_letter || dot_first_letter_is_digit\n    let dot_last_letter_is_dot_or_exe\
    \ = dot_last_letter_is_letter || dot_last_letter_is_digit\n    let dot_first_letter_is_dot_or_exe_or_dll\
    \ = dot_first_letter_is_dot_or_exe || dot_last_letter_is_dot_or_exe\n    let dot_first_letter_is_dot_or_exe_or_dll_or_not\
    \ = dot_first_letter_is_dot_or_exe || dot_last_letter_is_dot_or_exe || dot_first_letter_is_dot_or_exe_or_dll\n\
    \    let dot_first_letter_is_dot_or_exe_or_dll_or_not_or_not = dot_first_letter_is_dot_or_exe\
    \ || dot_last_letter_is_dot_or_exe || dot_first_letter_is_dot_or_exe_or_dll\n\
    \    let dot_first_letter_is_dot_or_exe_or_dll_or_not_or_not_or_not = dot_first_letter_is_dot_or_exe\
    \ || dot_last_letter_is_dot_or_exe || dot_first_letter_is_dot_or_exe_or_dll\n\
    \    let dot_first_letter_is_dot_or_exe_or_dll_or_not_or_not_or_not_or_not = dot_first_letter_is_dot_or_exe\
    \ || dot_last_letter_is_dot_or_exe || dot_first_letter_is_dot_or_exe_or_dll\n\
    \    let dot_first_letter_is_dot_or_exe_or_dll_or_not_or_not_or_not_or_not_or_not\
    \ = dot_first_letter_is_dot_or_exe || dot_last_letter_is_dot_or_exe || dot_first_letter_is_dot_or_exe_or_dll\n\
    \    let dot_first_letter_is_dot_or_exe_or_dll_or_not_or_not_or_not_or_not_or_not_or_not\
    \ = dot_first_letter_is_dot_or_exe || dot_last_letter_is_dot_or_exe || dot_first_letter_is_dot_or_exe_or_dll\n\
    \    let dot_first_letter_is_dot_or_exe_or_dll_or_not_or_not_or_not_or_not_or_not_or_",
  "    let pattern = \"^[0-9]{3}\\.\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1).length == 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location\
    \ == 0 &&\n        file_name.substring(from: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location) == \".\" &&\n\
    \        file_name.substring(from: regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.count)).rangeAt(1).location + 1).rangeOfCharacter(from:\
    \ NSCharacterSet.letters) == nil &&\n        file_name.substring(from: regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count)).rangeAt(1).location\
    \ + 1).rangeOfCharacter(from: NSCharacterSet.letters) != nil\n        ? \"Yes\"\
    \ : \"No\"", "    let file_name = file_name.lowercased()\n    let dot_index =\
    \ file_name.index(of: \".\")\n    let dot_index = dot_index!\n    let first_letter\
    \ = file_name.substring(to: dot_index)\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.prefix(with: CharacterSet.letters)\n   \
    \ let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n    let first_letter = first_letter?.lowercased()\n \
    \   let first_letter = first_letter?.prefix(with: CharacterSet.letters)\n    let\
    \ first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n    let first_letter = first_letter?.lowercased()\n \
    \   let first_letter = first_letter?.prefix(with: CharacterSet.letters)\n    let\
    \ first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n    let first_letter = first_letter?.lowercased()\n \
    \   let first_letter = first_letter?.prefix(with: CharacterSet.letters)\n    let\
    \ first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n    let first_letter = first_letter?.lowercased()\n \
    \   let first_letter = first_letter?.prefix(with: CharacterSet.letters)\n    let\
    \ first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n    let first_letter = first_letter?.lowercased()\n \
    \   let first_letter = first_letter?.prefix(with: CharacterSet.letters)\n    let\
    \ first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n    let first_letter = first_letter?.lowercased()\n \
    \   let first_letter = first_letter?.prefix(with: CharacterSet.letters)\n    let\
    \ first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n    let first_letter = first_letter?.lowercased()\n \
    \   let first_letter = first_letter?.prefix(with: CharacterSet.letters)\n    let\
    \ first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n    let first_letter = first_letter?.lowercased()\n \
    \   let first_letter = first_letter?.prefix(with: CharacterSet.letters)\n    let\
    \ first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.prefix(with:\
    \ CharacterSet.letters)\n    let first_letter = first_letter?.", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let file_name = file_name.substring(from:\
    \ dot_index)\n    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"a\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<letter_index.advanced(by:\
    \ 1)]\n    let letter = letter.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"A\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<letter_index.advanced(by:\
    \ 1)]\n    let letter = letter.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"z\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<letter_index.advanced(by:\
    \ 1)]\n    let letter = letter.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"Z\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<letter_index.advanced(by:\
    \ 1)]\n    let letter = letter.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"0\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<letter_index.advanced(by:\
    \ 1)]\n    let letter = letter.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"9\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<letter_index.advanced(by:\
    \ 1)]\n    let letter = letter.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"_\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<letter_index.advanced(by:\
    \ 1)]\n    let letter = letter.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"-\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<letter_index.advanced(by:\
    \ 1)]\n    let letter = letter.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"'\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<letter_index.advanced(by:\
    \ 1)]\n    let letter = letter.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"\\\"\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<letter_index.advanced(by:\
    \ 1)]\n    let letter = letter.lowercased()\n    let letter_index = file_name.index(of:\
    \ \"-\")\n    let letter_index = letter_index!\n    let letter = file_name[letter_index..<",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.prefix(upTo:\
    \ dot_index)\n    let last_letter = file_name.suffix(from: dot_index)\n    let\
    \ letters = first_letter...last_letter\n    let letters_set = Set(letters)\n \
    \   let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n  \
    \  let results = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.utf16.count))\n    if results.count > 0 {\n        return\
    \ \"Yes\"\n    } else {\n        return \"No\"\n    }", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_substr = file_name[dot_index..<dot_index+1]\n\
    \    let first_letter = dot_substr.first\n    let letters = first_letter...first_letter\
    \ + first_letter.count\n    let dot_index = file_name.index(of: \".\")\n    let\
    \ dot_substr = file_name[dot_index..<dot_index+1]\n    let dot_substr_lowercased\
    \ = dot_substr.lowercased()\n    let dot_substr_lowercased_count = dot_substr_lowercased.count\n\
    \    if dot_substr_lowercased_count != 3 {\n        return \"No\"\n    }\n   \
    \ if dot_substr_lowercased != \"txt\" && dot_substr_lowercased != \"exe\" && dot_substr_lowercased\
    \ != \"dll\" {\n        return \"No\"\n    }\n    if dot_substr_lowercased ==\
    \ \"txt\" {\n        if letters != \"abcdefghijklmnopqrstuvwxyz\" {\n        \
    \    return \"No\"\n        }\n    }\n    if dot_substr_lowercased == \"exe\"\
    \ {\n        if letters != \"abcdefghijklmnopqrstuvwxyz\" {\n            return\
    \ \"No\"\n        }\n    }\n    if dot_substr_lowercased == \"dll\" {\n      \
    \  if letters != \"abcdefghijklmnopqrstuvwxyz\" {\n            return \"No\"\n\
    \        }\n    }\n    return \"Yes\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\")\n    let matches = regex.matches(in: file_name,\
    \ range: NSRange(location: 0, length: file_name.count))\n    if matches.count\
    \ == 0 {\n        return \"No\"\n    }\n    if matches.count == 1 {\n        let\
    \ range = matches[0].range\n        let start = range.lowerBound\n        let\
    \ end = range.upperBound\n        let substring = file_name[start..<end]\n   \
    \     if substring == \".\" {\n            return \"No\"\n        }\n        if\
    \ substring.count != 1 {\n            return \"No\"\n        }\n        if substring[0]\
    \ < 'a' || substring[0] > 'z' {\n            return \"No\"\n        }\n      \
    \  if substring[0] < 'A' || substring[0] > 'Z' {\n            return \"No\"\n\
    \        }\n    }\n    return \"Yes\"", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern)\n    return regex.firstMatch(in:\
    \ file_name, options: .regularExpression) != nil ? \"Yes\" : \"No\"", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.rangeOfString(\"\
    .\").location\n    let dot_length = file_name.rangeOfString(\".\").length\n  \
    \  \n    if dot_index == NSNotFound || dot_length < 2 || dot_length > 3 {\n  \
    \      return \"No\"\n    }\n    \n    let first_letter = file_name.substringToIndex(dot_index)\n\
    \    let letters = first_letter.uppercaseString.characters\n    \n    if letters.count\
    \ != 1 || letters.first! >= 'A' || letters.first! < 'Z' {\n        return \"No\"\
    \n    }\n    \n    let extension = file_name.substringFromIndex(dot_index+1)\n\
    \    \n    if extension.lowercaseString.rangeOfString(\"txt\") != nil ||\n   \
    \     extension.lowercaseString.rangeOfString(\"exe\") != nil ||\n        extension.lowercaseString.rangeOfString(\"\
    dll\") != nil {\n        return \"Yes\"\n    }\n    \n    return \"No\"", "  \
    \  var result = \"\"\n    \n    if file_name.count > 3 {\n        result = \"\
    No\"\n    }\n    else if file_name.count < 3 {\n        result = \"No\"\n    }\n\
    \    else if file_name.contains(\".\") {\n        result = \"No\"\n    }\n   \
    \ else if file_name.characters.first != nil {\n        let first_letter = file_name.characters.first!\n\
    \        \n        if first_letter >= 'a' && first_letter <= 'z' {\n         \
    \   if first_letter != first_letter.lowercased() {\n                result = \"\
    No\"\n            }\n        }\n        else if first_letter >= 'A' && first_letter\
    \ <= 'Z' {\n            if first_letter != first_letter.uppercased() {\n     \
    \           result = \"No\"\n            }\n        }\n    }\n    else if file_name.characters.last\
    \ != nil {\n        let last_letter = file_name.characters.last!\n        \n \
    \       if last_letter >= 'a' && last_letter <= 'z' {\n            if last_letter\
    \ != last_letter.lowercased() {\n                result = \"No\"\n           \
    \ }\n        }\n        else if last_letter >= 'A' && last_letter <= 'Z' {\n \
    \           if last_letter != last_letter.uppercased() {\n                result\
    \ = \"No\"\n            }\n        }\n    }\n    \n    return result", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n   \
    \ let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-z][a-z][a-z]$\", options: NSRegularExpression.Options.caseInsensitive)\n\
    \    let result = regex.firstMatch(in: file_name, options: NSRegularExpression.MatchingOptions(rawValue:\
    \ 0), range: NSMakeRange(0, file_name.utf16.count))\n    if result != nil {\n\
    \        return String(file_name[Range(result.range(at: 1), in: file_name)!])\n\
    \    } else {\n        return \"No\"\n    }", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.rangeOfString(\".\").location\n    let dot_length\
    \ = file_name.rangeOfString(\".\").length\n    let dot_first_letter = file_name.substringToIndex(dot_index\
    \ - 1)\n    let dot_second_letter = file_name.substringFromIndex(dot_index)\n\
    \    let dot_second_letter_lowercase = dot_second_letter.lowercased()\n    let\
    \ dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase = file_name.substringFromIndex(dot_second_letter_lowercase_index)\n\
    \    let dot_second_letter_lowercase = dot_second_letter_lowercase.lowercased()\n\
    \    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase = file_name.substringFromIndex(dot_second_letter_lowercase_index)\n\
    \    let dot_second_letter_lowercase = dot_second_letter_lowercase.lowercased()\n\
    \    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase = file_name.substringFromIndex(dot_second_letter_lowercase_index)\n\
    \    let dot_second_letter_lowercase = dot_second_letter_lowercase.lowercased()\n\
    \    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase = file_name.substringFromIndex(dot_second_letter_lowercase_index)\n\
    \    let dot_second_letter_lowercase = dot_second_letter_lowercase.lowercased()\n\
    \    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase = file_name.substringFromIndex(dot_second_letter_lowercase_index)\n\
    \    let dot_second_letter_lowercase = dot_second_letter_lowercase.lowercased()\n\
    \    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase = file_name.substringFromIndex(dot_second_letter_lowercase_index)\n\
    \    let dot_second_letter_lowercase = dot_second_letter_lowercase.lowercased()\n\
    \    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_second_letter_lowercase_index = dot_second_letter_lowercase.rangeOfString(\"\
    .\").location\n    let dot_", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[^.]+$\", options: [])\n    return regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).location != 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location\
    \ != file_name.characters.count - 1 &&\n        file_name[regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).location]\
    \ == \".\"\n        ? .Yes : .No", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\")\n    let matches = regex.matches(in: file_name,\
    \ options: .caseInsensitive)\n    if matches.count > 0 {\n        let match =\
    \ matches.first\n        let range = match.range\n        let start = range?.lowerBound\n\
    \        let end = range?.upperBound\n        let substring = file_name[start..<end]\n\
    \        if substring == \".\" {\n            let regex = try! NSRegularExpression(pattern:\
    \ \"^[a-zA-Z]+\")\n            let matches = regex.matches(in: file_name, options:\
    \ .caseInsensitive)\n            if matches.count > 0 {\n                return\
    \ \"Yes\"\n            }\n        }\n    }\n    return \"No\"", "    if file_name.count\
    \ > 3 {\n        return \"No\"\n    }\n    if file_name.contains(\".\") != true\
    \ {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).isEmpty()\
    \ != true {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"a\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"b\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"c\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"d\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"e\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"f\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"g\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"h\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"i\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"j\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"k\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"l\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"m\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"n\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"o\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"p\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"q\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"r\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"s\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"t\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"u\" {\n        return \"No\"\n    }\n    if file_name.substringToIndex(1).lowercased()\
    \ != \"v\" {\n        return \"No\"\n    }\n    if file_name.", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_length = dot_index! - file_name.startIndex\n    \n    if dot_length\
    \ == 0 || dot_length > 3 {\n        return \"No\"\n    }\n    \n    let first_letter\
    \ = file_name[file_name.startIndex..<dot_index!]\n    let first_letter = first_letter?.lowercased()\n\
    \    \n    if first_letter == nil || first_letter!.count != 1 || first_letter!.first\
    \ != first_letter!.first {\n        return \"No\"\n    }\n    \n    let extension\
    \ = file_name[dot_index!..<file_name.endIndex]\n    \n    if extension == nil\
    \ || extension!.count != 1 || extension!.first != \"txt\" || extension!.first\
    \ != \"exe\" || extension!.first != \"dll\" {\n        return \"No\"\n    }\n\
    \    \n    return \"Yes\"", "    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index\
    \ = dot_index - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index\
    \ - 1\n    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n\
    \    let dot_index = dot_index - 1\n    let dot_index = dot_index - 1\n    let\
    \ dot_index = dot_index - 1\n    let dot_index = dot_index - 1", "    let regex\
    \ = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\", options: .CaseInsensitive)\n\
    \    let result = regex.firstMatchInString(file_name, options: .CaseInsensitive,\
    \ range: NSMakeRange(0, file_name.characters.count))\n    if result != nil {\n\
    \        let range = result.rangeAtIndex(0)\n        let file_name = file_name.substringWithRange(range)\n\
    \        if file_name.characters.count != 3 || file_name.substringWithRange(range).characters.count\
    \ != 1 || file_name.substringWithRange(range).substringWithRange(range).characters.count\
    \ != 1 && file_name.substringWithRange(range).substringWithRange(range).characters.count\
    \ != 2 {\n            return \"No\"\n        }\n        return \"Yes\"\n    }\n\
    \    return \"No\"", "    let pattern = \"^[0-9]{0,3}\\.[a-zA-Z]{0,1}$\"\n   \
    \ let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    return\
    \ regex.firstMatch(in: file_name, options: [], range: NSRange(location: 0, length:\
    \ file_name.utf8.count))?.rangeAt(0) ?? \"\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\")\n    let result = regex.firstMatch(in: file_name,\
    \ options: [], range: NSRange(location: 0, length: file_name.count))\n    \n \
    \   if result != nil {\n        let range = result.range\n        let substring\
    \ = file_name.substring(with: range)\n        \n        if substring.characters.count\
    \ == 1 && substring.lowercased() == \"exe\" {\n            return \"Yes\"\n  \
    \      } else {\n            return \"No\"\n        }\n    } else {\n        return\
    \ \"No\"\n    }", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    return regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length > 0 &&\n        file_name.substring(with:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ >= 'a' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ <= 'z' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ >= 'A' &&\n        file_name.substring(with: regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).characters.first\
    \ <= 'Z'", "    let file_name = file_name\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_length = dot_index! - file_name.startIndex\n    let dot_string\
    \ = file_name[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string[dot_index!..<dot_length]\n    let dot_index = dot_string.index(of:\
    \ \".\")\n    let dot_length = dot_index! - dot_string.startIndex\n    let dot_string\
    \ = dot_string", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern, options: [])\n    let results =\
    \ regex.matches(in: file_name, options: [], range: NSRange(location: 0, length:\
    \ file_name.utf16.count))\n    if !results.isEmpty {\n        return \"No\"\n\
    \    }\n    return \"Yes\"", "    let pattern = \"^[0-9]{0,3}\\.[a-zA-Z]{0,3}$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern)\n    let results\
    \ = regex.matches(in: file_name, range: NSRange(location: 0, length: file_name.utf16.count))\n\
    \    if !results.isEmpty {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\")\n\
    \    let matches = regex.matches(in: file_name, range: NSRange(location: 0, length:\
    \ file_name.count))\n    if matches.count == 0 {\n        return \"No\"\n    }\
    \ else if matches.count == 1 {\n        let range = matches[0].range\n       \
    \ let start = range.lowerBound\n        let end = range.upperBound\n        let\
    \ substring = file_name[start..<end]\n        if substring == \".\" {\n      \
    \      return \"No\"\n        } else {\n            return \"Yes\"\n        }\n\
    \    } else {\n        return \"No\"\n    }", "    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != ", "    let regex\
    \ = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[^.]+$\", options: [])\n\
    \    let matches = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    \n    if matches.count == 0 {\n        return\
    \ \"No\"\n    }\n    \n    if matches.count > 1 {\n        return \"No\"\n   \
    \ }\n    \n    if matches.count == 1 {\n        let range = matches[0].range\n\
    \        let start = range.lowerBound\n        let end = range.upperBound\n  \
    \      \n        let substring = file_name[start..<end]\n        \n        if\
    \ substring.hasPrefix(\"..\") || substring.hasSuffix(\"..\") {\n            return\
    \ \"No\"\n        }\n        \n        if substring.hasPrefix(\".\") && substring.hasSuffix(\"\
    .txt\") || substring.hasSuffix(\".exe\") || substring.hasSuffix(\".dll\") {\n\
    \            return \"Yes\"\n        }\n    }\n    \n    return \"No\"", "   \
    \ let file_name = file_name\n    let file_name = file_name.lowercased()\n    let\
    \ file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name.first\n    let file_name = file_name.count\n    let file_name =\
    \ file_name.characters.count\n    let file_name = file_name.characters.contains(\"\
    0\")\n    let file_name = file_name.characters.contains(\"9\")\n    let file_name\
    \ = file_name.characters.contains(\".\")\n    let file_name = file_name.characters.contains(\"\
    a\")\n    let file_name = file_name.characters.contains(\"z\")\n    let file_name\
    \ = file_name.characters.contains(\"A\")\n    let file_name = file_name.characters.contains(\"\
    Z\")\n    let file_name = file_name.characters.contains(\"txt\")\n    let file_name\
    \ = file_name.characters.contains(\"exe\")\n    let file_name = file_name.characters.contains(\"\
    dll\")\n    let file_name = file_name.characters.contains(\"-\")\n    let file_name\
    \ = file_name.characters.contains(\"_\")\n    let file_name = file_name.characters.contains(\"\
    -\")\n    let file_name = file_name.characters.contains(\"_\")\n    let file_name\
    \ = file_name.characters.contains(\"-\")\n    let file_name = file_name.characters.contains(\"\
    _\")\n    let file_name = file_name.characters.contains(\"-\")\n    let file_name\
    \ = file_name.characters.contains(\"_\")\n    let file_name = file_name.characters.contains(\"\
    -\")\n    let file_name = file_name.characters.contains(\"_\")\n    let file_name\
    \ = file_name.characters.contains(\"-\")\n    let file_name = file_name.characters.contains(\"\
    _\")\n    let file_name = file_name.characters.contains(\"-\")\n    let file_name\
    \ = file_name.characters.contains(\"_\")\n    let file_name = file_name.characters.contains(\"\
    -\")\n    let file_name = file_name.characters.contains(\"_\")\n    let file_name\
    \ = file_name.characters.contains(\"-\")\n    let file_name = file_name.characters.contains(\"\
    _\")\n    let file_name = file_name.characters.contains(\"-\")\n    let file_name\
    \ = file_name.characters.contains(\"_\")\n    let file_name = file_name.characters.contains(\"\
    -\")\n    let file_name = file_name.characters.contains(\"_\")\n    let file_name\
    \ = file_name.characters.contains(\"-\")\n    let file_name = file_name.characters.contains(\"\
    _\")\n    let file_name = file_name.characters.contains(\"-\")\n    let file_name\
    \ = file_name.characters.contains(\"_\")\n    let file_name = file_name.characters.contains(\"\
    -\")\n    let file_name = file_name.characters.contains(\"_\")\n    let file_name\
    \ = file_name.characters.contains(\"-\")\n    let file_name = file_name.characters.contains(\"\
    _\")\n    let file_name = file_name.characters.contains(\"-\")\n    let file_name\
    \ = file_name.characters.contains(\"_\")\n    let file_name = file_name.characters.contains(\"\
    -\")\n    let file_name = file_name.characters.contains(\"", "    if file_name.count\
    \ > 3 {\n        return String()\n    }\n    if file_name.contains(\".\") {\n\
    \        return String()\n    }\n    if file_name.starts(with: \"a\") && file_name.ends(with:\
    \ \"z\") || file_name.starts(with: \"A\") && file_name.ends(with: \"Z\") {\n \
    \       return String()\n    }\n    if file_name.contains(\".\") {\n        return\
    \ String()\n    }\n    if file_name.contains(\".\") {\n        return String()\n\
    \    }\n    return String()", "    let file_name = file_name.lowercased()\n  \
    \  let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name[0]\n    let file_name = file_name.hasPrefix(\"a\")\n    let file_name\
    \ = file_name.hasPrefix(\"A\")\n    let file_name = file_name.hasSuffix(\"\")\n\
    \    let file_name = file_name.hasSuffix(\"txt\")\n    let file_name = file_name.hasSuffix(\"\
    exe\")\n    let file_name = file_name.hasSuffix(\"dll\")\n    let file_name =\
    \ file_name.hasPrefix(\"0\")\n    let file_name = file_name.hasPrefix(\"9\")\n\
    \    let file_name = file_name.hasSuffix(\"\")\n    let file_name = file_name.hasPrefix(\"\
    .\")\n    let file_name = file_name.hasSuffix(\"\")\n    return file_name ? \"\
    Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    .[a-zA-Z]+$\", options: [])\n    let result = regex.firstMatch(in: file_name,\
    \ options: [], range: NSMakeRange(0, file_name.characters.count))\n    \n    if\
    \ result != nil {\n        let range = NSMakeRange(0, result.range!.location)\n\
    \        let file_name = file_name.substring(with: range)\n        return file_name\n\
    \    } else {\n        return \"No\"\n    }", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.substring(from: dot_index!)\n    let file_name =\
    \ file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n    let\
    \ file_name = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.substring(from: dot_index!)\n    let file_name =\
    \ file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n    let\
    \ file_name = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let file_name = file_name.substring(from: dot_index!)\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.substring(from: dot_index!)\n    let file_name =\
    \ file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n    let\
    \ file_name = file_name.substring(from: dot_index!)\n    let file_name = file_name.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n    let file_name = file_name.substring(from:\
    \ dot_index!)\n    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAnd",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_length = dot_index! - file_name.startIndex\n    \n    if\
    \ dot_length == 0 {\n        return \"No\"\n    }\n    \n    if dot_length > 3\
    \ {\n        return \"No\"\n    }\n    \n    if dot_index! < 0 || dot_index! >=\
    \ file_name.count {\n        return \"No\"\n    }\n    \n    let first_letter\
    \ = file_name[dot_index! - 1]\n    \n    if first_letter < 'a' || first_letter\
    \ > 'z' {\n        return \"No\"\n    }\n    \n    if dot_length == 1 {\n    \
    \    if first_letter != '.' {\n            return \"No\"\n        }\n    }\n \
    \   \n    if dot_length == 2 && first_letter != '.' {\n        return \"No\"\n\
    \    }\n    \n    if dot_length == 3 && first_letter != '.' {\n        return\
    \ \"No\"\n    }\n    \n    if dot_length == 4 && first_letter != '.' {\n     \
    \   return \"No\"\n    }\n    \n    if dot_length == 5 && first_letter != '.'\
    \ {\n        return \"No\"\n    }\n    \n    if dot_length == 6 && first_letter\
    \ != '.' {\n        return \"No\"\n    }\n    \n    if dot_length == 7 && first_letter\
    \ != '.' {\n        return \"No\"\n    }\n    \n    if dot_length == 8 && first_letter\
    \ != '.' {\n        return \"No\"\n    }\n    \n    if dot_length == 9 && first_letter\
    \ != '.' {\n        return \"No\"\n    }\n    \n    return \"Yes\"", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_substr = file_name[..<dot_index]\n    let dot_first_letter\
    \ = dot_substr.first\n    let dot_last_letter = dot_substr.last\n    let dot_first_letter_is_latin_letter\
    \ = dot_first_letter.isLatinLetter\n    let dot_last_letter_is_latin_letter =\
    \ dot_last_letter.isLatinLetter\n    let dot_first_letter_is_valid_letter = dot_first_letter.isValidLetter\n\
    \    let dot_last_letter_is_valid_letter = dot_last_letter.isValidLetter\n   \
    \ let dot_first_letter_is_valid_digit = dot_first_letter.isValidDigit\n    let\
    \ dot_last_letter_is_valid_digit = dot_last_letter.isValidDigit\n    let dot_first_letter_is_valid_digit_or_letter\
    \ = dot_first_letter.isValidDigitOrLetter\n    let dot_last_letter_is_valid_digit_or_letter\
    \ = dot_last_letter.isValidDigitOrLetter\n    let dot_first_letter_is_valid_digit_or_letter_or_dot\
    \ = dot_first_letter.isValidDigitOrLetterOrDot\n    let dot_last_letter_is_valid_digit_or_letter_or_dot\
    \ = dot_last_letter.isValidDigitOrLetterOrDot\n    let dot_first_letter_is_valid_digit_or_letter_or_dot_or_dash\
    \ = dot_first_letter.isValidDigitOrLetterOrDotOrDash\n    let dot_last_letter_is_valid_digit_or_letter_or_dot_or_dash\
    \ = dot_last_letter.isValidDigitOrLetterOrDotOrDash\n    let dot_first_letter_is_valid_digit_or_letter_or_dot_or_dash_or_underscore\
    \ = dot_first_letter.isValidDigitOrLetterOrDotOrDashOrUnderscore\n    let dot_last_letter_is_valid_digit_or_letter_or_dot_or_dash_or_underscore\
    \ = dot_last_letter.isValidDigitOrLetterOrDotOrDashOrUnderscore\n    let dot_first_letter_is_valid_digit_or_letter_or_dot_or_dash_or_underscore_or_colon\
    \ = dot_first_letter.isValidDigitOrLetterOrDotOrDashOrUnderscoreOrColon\n    let\
    \ dot_last_letter_is_valid_digit_or_letter_or_dot_or_dash_or_underscore_or_colon\
    \ = dot_last_letter.isValidDigitOrLetterOrDotOrDashOrUnderscoreOrColon\n    let\
    \ dot_first_letter_is_valid_digit_or_letter_or_dot_or_dash_or_underscore_or_colon_or_colon\
    \ = dot_first_letter.isValidDigitOrLetterOrDotOrDashOrUnderscoreOrColonOrColon\n\
    \    let dot_last_letter_is_valid_digit_or_letter_or_dot_or_dash_or_underscore_or_colon_or_colon\
    \ = dot_last_letter.isValidDigitOrLetterOrDotOrDashOrUnderscoreOrColonOrColon\n\
    \    let dot_first_", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    .[a-zA-Z]+$\")\n    return regex.firstMatch(in: file_name, options: .regularExpression)\
    \ != nil ? \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\.[a-zA-Z]+$\")\n    let matches = regex.matches(in: file_name,\
    \ options: [], range: NSRange(location: 0, length: file_name.count))\n    if matches.count\
    \ > 0 {\n        let range = matches[0].range\n        let file_name = file_name[range]\n\
    \        return file_name\n    } else {\n        return \"No\"\n    }", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_substr = file_name[..<dot_index]\n    let dot_first_letter\
    \ = dot_substr.first\n    let dot_last_letter = dot_substr.last\n    \n    let\
    \ dot_first_letter_is_letter = dot_first_letter >= 'a' && dot_first_letter <=\
    \ 'z'\n    let dot_last_letter_is_letter = dot_last_letter >= 'a' && dot_last_letter\
    \ <= 'z'\n    \n    let dot_first_letter_is_digit = dot_first_letter >= '0' &&\
    \ dot_first_letter <= '9'\n    let dot_last_letter_is_digit = dot_last_letter\
    \ >= '0' && dot_last_letter <= '9'\n    \n    let dot_first_letter_is_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_or_dot_dot_",
  "    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let dot_index = file_name.firstIndex(of: \".\")\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index", "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n  \
    \  let regex = try! NSRegularExpression(pattern: pattern)\n    let match = regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.count))\n    if let\
    \ match = match {\n        let range = Range(match.range, in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.count))\n        let file_name = file_name[range]\n\
    \        return file_name\n    } else {\n        return \"No\"\n    }", "    let\
    \ pattern = \"^[0-9]{0,3}\\.[a-zA-Z]{0,3}$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    return regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.count)).rangeAt(1).length == 0 ? \"Yes\" : \"No\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_length = dot_index != nil ? dot_index!.distance(from: dot_index!.startIndex,\
    \ to: dot_index!.endIndex) : 1\n    let dot_length = dot_length < 3 ? 1 : dot_length\n\
    \    let dot_index = file_name.index(of: \".\", range: NSRange(dot_index!.startIndex,\
    \ dot_length))\n    let dot_length = dot_index != nil ? dot_index!.distance(from:\
    \ dot_index!.startIndex, to: dot_index!.endIndex) : 1\n    let dot_length = dot_length\
    \ < 3 ? 1 : dot_length\n    let dot_index = file_name.index(of: \".\", range:\
    \ NSRange(dot_index!.startIndex, dot_length))\n    let dot_length = dot_index\
    \ != nil ? dot_index!.distance(from: dot_index!.startIndex, to: dot_index!.endIndex)\
    \ : 1\n    let dot_length = dot_length < 3 ? 1 : dot_length\n    let dot_index\
    \ = file_name.index(of: \".\", range: NSRange(dot_index!.startIndex, dot_length))\n\
    \    let dot_length = dot_index != nil ? dot_index!.distance(from: dot_index!.startIndex,\
    \ to: dot_index!.endIndex) : 1\n    let dot_length = dot_length < 3 ? 1 : dot_length\n\
    \    let dot_index = file_name.index(of: \".\", range: NSRange(dot_index!.startIndex,\
    \ dot_length))\n    let dot_length = dot_index != nil ? dot_index!.distance(from:\
    \ dot_index!.startIndex, to: dot_index!.endIndex) : 1\n    let dot_length = dot_length\
    \ < 3 ? 1 : dot_length\n    let dot_index = file_name.index(of: \".\", range:\
    \ NSRange(dot_index!.startIndex, dot_length))\n    let dot_length = dot_index\
    \ != nil ? dot_index!.distance(from: dot_index!.startIndex, to: dot_index!.endIndex)\
    \ : 1\n    let dot_length = dot_length < 3 ? 1 : dot_length\n    let dot_index\
    \ = file_name.index(of: \".\", range: NSRange(dot_index!.startIndex, dot_length))\n\
    \    let dot_length = dot_index != nil ? dot_index!.distance(from: dot_index!.startIndex,\
    \ to: dot_index!.endIndex) : 1\n    let dot_length = dot_length < 3 ? 1 : dot_length\n\
    \    let dot_index = file_name.index(of: \".\", range: NSRange(dot_index!.startIndex,\
    \ dot_length))\n    let dot_length = dot_index != nil ? dot_index!.distance(from:\
    \ dot_index!", "    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let dot_index = file_name.firstIndex(of: \".\")\n    let dot_length = dot_index\
    \ != nil ? dot_index!.offset : file_name.count\n    let dot_length = dot_length\
    \ < 3 ? 3 : dot_length\n    let dot_index = file_name.firstIndex(of: \".\", range:\
    \ dot_index!.upperBound..<dot_length)\n    let dot_length = dot_index != nil ?\
    \ dot_index!.offset : file_name.count\n    let dot_length = dot_length < 3 ? 3\
    \ : dot_length\n    let dot_index = file_name.firstIndex(of: \".\", range: dot_index!.upperBound..<dot_length)\n\
    \    let dot_length = dot_index != nil ? dot_index!.offset : file_name.count\n\
    \    let dot_length = dot_length < 3 ? 3 : dot_length\n    let dot_index = file_name.firstIndex(of:\
    \ \".\", range: dot_index!.upperBound..<dot_length)\n    let dot_length = dot_index\
    \ != nil ? dot_index!.offset : file_name.count\n    let dot_length = dot_length\
    \ < 3 ? 3 : dot_length\n    let dot_index = file_name.firstIndex(of: \".\", range:\
    \ dot_index!.upperBound..<dot_length)\n    let dot_length = dot_index != nil ?\
    \ dot_index!.offset : file_name.count\n    let dot_length = dot_length < 3 ? 3\
    \ : dot_length\n    let dot_index = file_name.firstIndex(of: \".\", range: dot_index!.upperBound..<dot_length)\n\
    \    let dot_length = dot_index != nil ? dot_index!.offset : file_name.count\n\
    \    let dot_length = dot_length < 3 ? 3 : dot_length\n    let dot_index = file_name.firstIndex(of:\
    \ \".\", range: dot_index!.upperBound..<dot_length)\n    let dot_length = dot_index\
    \ != nil ? dot_index!.offset : file_name.count\n    let dot_length = dot_length\
    \ < 3 ? 3 : dot_length\n    let dot_index = file_name.firstIndex(of: \".\", range:\
    \ dot_index!.upperBound..<dot_length)\n    let dot_length = dot_index != nil ?\
    \ dot_index!.offset : file_name.count\n    let dot_length = dot_length < 3 ? 3\
    \ : dot_length\n    let dot_index = file_name.firstIndex(of: \".\", range: dot_index!.upperBound..<dot_length)\n\
    \    let dot_length = dot_index != nil ? dot_index!.offset : file_name.count\n\
    \    let dot_length = dot_length < 3 ? 3 : dot_length\n    let dot_index = file_name.firstIndex(of:\
    \ \".\", range", "    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let dot_index = file_name.firstIndex(of: \".\")\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let first_letter = file_name.substring(to: dot_index)\n\
    \    let letters = first_letter.uppercased()\n    let letters_count = letters.count\n\
    \    \n    if dot_index == 0 || dot_index == dot_index+1 || dot_index == dot_index+2\
    \ || dot_index == dot_index+3 || dot_index == dot_index+4 || dot_index == dot_index+5\
    \ || dot_index == dot_index+6 || dot_index == dot_index+7 || dot_index == dot_index+8\
    \ || dot_index == dot_index+9 || dot_index == dot_index+10 || dot_index == dot_index+11\
    \ || dot_index == dot_index+12 || dot_index == dot_index+13 || dot_index == dot_index+14\
    \ || dot_index == dot_index+15 || dot_index == dot_index+16 || dot_index == dot_index+17\
    \ || dot_index == dot_index+18 || dot_index == dot_index+19 || dot_index == dot_index+20\
    \ || dot_index == dot_index+21 || dot_index == dot_index+22 || dot_index == dot_index+23\
    \ || dot_index == dot_index+24 || dot_index == dot_index+25 || dot_index == dot_index+26\
    \ || dot_index == dot_index+27 || dot_index == dot_index+28 || dot_index == dot_index+29\
    \ || dot_index == dot_index+30 || dot_index == dot_index+31 || dot_index == dot_index+32\
    \ || dot_index == dot_index+33 || dot_index == dot_index+34 || dot_index == dot_index+35\
    \ || dot_index == dot_index+36 || dot_index == dot_index+37 || dot_index == dot_index+38\
    \ || dot_index == dot_index+39 || dot_index == dot_index+40 || dot_index == dot_index+41\
    \ || dot_index == dot_index+42 || dot_index == dot_index+43 || dot_index == dot_index+44\
    \ || dot_index == dot_index+45 || dot_index == dot_index+46 || dot_index == dot_index+47\
    \ || dot_index == dot_index+48 || dot_index == dot_index+49 || dot_index == dot_index+50\
    \ || dot_index == dot_index+51 || dot_index == dot_index+52 || dot_index == dot_index+53\
    \ || dot_index == dot_index+", "    let file_name = file_name.lowercased()\n \
    \   let dot_index = file_name.rangeOfString(\".\").location\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let first_letter = file_name[dot_index!..<file_name.count]\n\
    \    let first_letter = first_letter?.unicodeScalars.first\n    let first_letter\
    \ = first_letter?.uppercaseString\n    let first_letter = first_letter?.lowercaseString\n\
    \    let first_letter = first_letter?.capitalizedString\n    let first_letter\
    \ = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()\n\
    \    let first_letter = first_letter?.lowercased()\n    let first_letter = first_letter?.lowercased()",
  "    let pattern = \"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    let result = regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.utf16.count))\n    if result != nil {\n        let\
    \ range = NSRange(location: result.range.location, length: result.range.length)\n\
    \        return String(file_name[range])\n    } else {\n        return \"No\"\n\
    \    }", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    , options: [])\n    let matches = regex.matches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    if matches.count > 0 {\n\
    \        let range = matches[0].range\n        let file_name = file_name[range]\n\
    \        return file_name\n    } else {\n        return \"No\"\n    }", "    let\
    \ file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let dot_index = file_name.index(of: \".\")\n    if dot_index == nil || dot_index!\
    \ < 0 || dot_index! >= file_name.count - 1 {\n        return \"No\"\n    }\n \
    \   let first_letter = file_name[dot_index! - 1]\n    if first_letter < 'a' ||\
    \ first_letter > 'z' {\n        return \"No\"\n    }\n    let dot_count = file_name.components(separatedBy:\
    \ \".\").count\n    if dot_count > 2 {\n        return \"No\"\n    }\n    if dot_count\
    \ == 2 {\n        let dot_index = file_name.index(of: \".\", offsetBy: 1)\n  \
    \      if dot_index == nil || dot_index! < 0 || dot_index! >= file_name.count\
    \ - 1 {\n            return \"No\"\n        }\n        let dot_letter = file_name[dot_index!\
    \ - 1]\n        if dot_letter < 'a' || dot_letter > 'z' {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"", "    let regex = try! NSRegularExpression(pattern:\
    \ \"^[0-9]{3}\\\\.[^.]+$\", options: .caseInsensitive)\n    let results = regex.matches(in:\
    \ file_name, options: .anchored, range: NSRange(location: 0, length: file_name.count))\n\
    \    if !results.isEmpty {\n        return \"No\"\n    }\n    return \"Yes\"",
  "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let results = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.utf16.count))\n    if !results.isEmpty\
    \ {\n        return file_name\n    } else {\n        return \"No\"\n    }", " \
    \   let pattern = \"^[0-9]{3}\\.\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    let matches = regex.matches(in: file_name, options: [], range:\
    \ NSRange(location: 0, length: file_name.count))\n    if matches.count > 0 {\n\
    \        let range = matches[0].range\n        let start = range.lowerBound\n\
    \        let end = range.upperBound\n        let substr = file_name[start..<end]\n\
    \        let allowed = [\"txt\", \"exe\", \"dll\"]\n        if substr.count >\
    \ 0 && substr.first! >= 'a' && substr.first! < 'z' {\n            if substr.first!\
    \ >= 'A' && substr.first! < 'Z' {\n                if substr.last! >= 'a' && substr.last!\
    \ < 'z' {\n                    if substr.last! >= 'A' && substr.last! < 'Z' {\n\
    \                        return file_name\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return \"No\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_index = dot_index!\n    let first_letter = file_name.substring(to:\
    \ dot_index)\n    let letters = first_letter\n        .unicodeScalars\n      \
    \  .filter({$0.isLetter})\n        .filter({$0.isNotEmpty == true})\n        .filter({$0.first\
    \ >= 'a' && $0.first <= 'z'})\n        .filter({$0.first != '_'})\n        .filter({$0.first\
    \ != '-'})\n        .filter({$0.first != '~'})\n        .filter({$0.first != '$'})\n\
    \        .filter({$0.first != '%'})\n        .filter({$0.first != '^'})\n    \
    \    .filter({$0.first != '&'})\n        .filter({$0.first != '*'})\n        .filter({$0.first\
    \ != '('})\n        .filter({$0.first != ')'})\n        .filter({$0.first != '['})\n\
    \        .filter({$0.first != ']'})\n        .filter({$0.first != '{'})\n    \
    \    .filter({$0.first != '}'})\n        .filter({$0.first != '<'})\n        .filter({$0.first\
    \ != '>'})\n        .filter({$0.first != '?'})\n        .filter({$0.first != '/'})\n\
    \        .filter({$0.first != '\\\\'})\n        .filter({$0.first != '|'})\n \
    \       .filter({$0.first != '#'})\n        .filter({$0.first != '@'})\n     \
    \   .filter({$0.first != '$'})\n        .filter({$0.first != '%'})\n        .filter({$0.first\
    \ != '^'})\n        .filter({$0.first != '&'})\n        .filter({$0.first != '*'})\n\
    \        .filter({$0.first != '('})\n        .filter({$0.first != ')'})\n    \
    \    .filter({$0.first != '['})\n        .filter({$0.first != ']'})\n        .filter({$0.first\
    \ != '{'})\n        .filter({$0.first != '}'})\n        .filter({$0.first != '<'})\n\
    \        .filter({$0.first != '>'})\n        .filter({$0.first != '?'})\n    \
    \    .filter({$0.first != '/'})\n        .filter({$0.first != '\\\\'})\n     \
    \   .filter({$0.first != '|'})\n        .filter({$0.first != '#'})\n        .filter({$0.first\
    \ != '@'})\n        .filter({$0.first != '$'})\n        .filter({$0.", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_index = dot_index!\n    let first_letter = file_name.substring(to:\
    \ dot_index)\n    let first_letter = first_letter?.lowercased()\n    let first_letter_is_latin_alphabet\
    \ = first_letter?.hasPrefix(\"a\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    b\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    c\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    d\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    e\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    f\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    g\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    h\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    i\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    j\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    k\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    l\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    m\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    n\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    o\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    p\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    q\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    r\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    s\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    t\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    u\")\n    let first_letter_is_latin_alphabet = first_letter_is_latin_alphabet?.hasPrefix(\"\
    v\")\n    let first_letter_is_latin_alphabet = first_letter_is_lat", "    let\
    \ file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_length = dot_index != nil ? dot_index!.distance(from: dot_index!.startIndex,\
    \ to: dot_index!.endIndex) : 0\n    let dot_length = dot_length < 3 ? 3 : dot_length\n\
    \    let dot_index = file_name.index(of: \".\", range: dot_index!.endIndex..<dot_index!.endIndex.advanced(by:\
    \ dot_length))\n    let dot_length = dot_index != nil ? dot_index!.distance(from:\
    \ dot_index!.startIndex, to: dot_index!.endIndex) : 0\n    let dot_length = dot_length\
    \ < 3 ? 3 : dot_length\n    let dot_index = file_name.index(of: \".\", range:\
    \ dot_index!.endIndex..<dot_index!.endIndex.advanced(by: dot_length))\n    let\
    \ dot_length = dot_index != nil ? dot_index!.distance(from: dot_index!.startIndex,\
    \ to: dot_index!.endIndex) : 0\n    let dot_length = dot_length < 3 ? 3 : dot_length\n\
    \    let dot_index = file_name.index(of: \".\", range: dot_index!.endIndex..<dot_index!.endIndex.advanced(by:\
    \ dot_length))\n    let dot_length = dot_index != nil ? dot_index!.distance(from:\
    \ dot_index!.startIndex, to: dot_index!.endIndex) : 0\n    let dot_length = dot_length\
    \ < 3 ? 3 : dot_length\n    let dot_index = file_name.index(of: \".\", range:\
    \ dot_index!.endIndex..<dot_index!.endIndex.advanced(by: dot_length))\n    let\
    \ dot_length = dot_index != nil ? dot_index!.distance(from: dot_index!.startIndex,\
    \ to: dot_index!.endIndex) : 0\n    let dot_length = dot_length < 3 ? 3 : dot_length\n\
    \    let dot_index = file_name.index(of: \".\", range: dot_index!.endIndex..<dot_index!.endIndex.advanced(by:\
    \ dot_length))\n    let dot_length = dot_index != nil ? dot_index!.distance(from:\
    \ dot_index!.startIndex, to: dot_index!.endIndex) : 0\n    let dot_length = dot_length\
    \ < 3 ? 3 : dot_length\n    let dot_index = file_name.index(of: \".\", range:\
    \ dot_index!.endIndex..<dot_index!.endIndex.advanced(by: dot_length))\n    let\
    \ dot_length = dot_index != nil ? dot_index!.distance(from: dot_index!.start",
  "    let pattern = \"^[0-9]{0,3}\\.[a-zA-Z]{0,1}$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.utf16.count)).rangeAt(1).length == 0 &&\n  \
    \      regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.utf16.count)).rangeAt(1).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf16.count)).rangeAt(1).length > 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.utf16.count)).rangeAt(1).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf16.count)).rangeAt(1).rangeAt(0).length > 0 &&\n        regex.firstMatch(in:\
    \ file_name, options: [], range: NSMakeRange(0, file_name.utf16.count)).rangeAt(1).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf16.count)).rangeAt(1).rangeAt(0).rangeAt(0).length > 0 &&\n   \
    \     regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.utf16.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf16.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).length >\
    \ 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf16.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf16.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf16.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).location\
    \ == 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.utf16.count)).rangeAt(1).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).rangeAt(0).length\
    \ > 0 &&\n        regex.firstMatch(in: file_name, options: [], ", "    let pattern\
    \ = \"^[0-9]{3}\\.\"\n    let regex = try! NSRegularExpression(pattern: pattern)\n\
    \    let matches = regex.matches(in: file_name, range: NSRange(location: 0, length:\
    \ file_name.utf16.count))\n    if matches.count == 0 {\n        return \"No\"\n\
    \    }\n    if matches.count > 1 {\n        return \"No\"\n    }\n    if matches.count\
    \ == 1 && matches[0].rangeAt(0) == NSRange(location: 0, length: 1) {\n       \
    \ return \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0) == NSRange(location:\
    \ 0, length: 2) {\n        return \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0)\
    \ == NSRange(location: 0, length: 3) {\n        return \"No\"\n    }\n    if matches.count\
    \ > 1 && matches[0].rangeAt(0) == NSRange(location: 0, length: 4) {\n        return\
    \ \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0) == NSRange(location:\
    \ 0, length: 5) {\n        return \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0)\
    \ == NSRange(location: 0, length: 6) {\n        return \"No\"\n    }\n    if matches.count\
    \ > 1 && matches[0].rangeAt(0) == NSRange(location: 0, length: 7) {\n        return\
    \ \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0) == NSRange(location:\
    \ 0, length: 8) {\n        return \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0)\
    \ == NSRange(location: 0, length: 9) {\n        return \"No\"\n    }\n    if matches.count\
    \ > 1 && matches[0].rangeAt(0) == NSRange(location: 0, length: 10) {\n       \
    \ return \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0) == NSRange(location:\
    \ 0, length: 11) {\n        return \"No\"\n    }\n    if matches.count > 1 &&\
    \ matches[0].rangeAt(0) == NSRange(location: 0, length: 12) {\n        return\
    \ \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0) == NSRange(location:\
    \ 0, length: 13) {\n        return \"No\"\n    }\n    if matches.count > 1 &&\
    \ matches[0].rangeAt(0) == NSRange(location: 0, length: 14) {\n        return\
    \ \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0) == NSRange(location:\
    \ 0, length: 15) {\n        return \"No\"\n    }\n    if matches.count > 1 &&\
    \ matches[0].rangeAt(0) == NSRange(location: 0, length: 16) {\n        return\
    \ \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0) == NSRange(location:\
    \ 0, ", "    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name[0]\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.letters.union(.newlines))\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.letters.union(.whitespaces)) ?? 0\n    let file_name = file_name.rangeOfCharacter(from:\
    \ CharacterSet.letters.union(.whitespacesAndNewlines)) ?? 0\n    let file_name\
    \ = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.whitespacesAndNewlines))\
    \ ?? 0\n    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters.union(.white",
  "    let file_name = file_name.lowercased()\n    let file_name = file_name.trimmingCharacters(in:\
    \ .whitespacesAndNewlines)\n    let file_name = file_name.components(separatedBy:\
    \ \".\")\n    let file_name = file_name.filter({$0.count > 1})\n    let file_name\
    \ = file_name.filter({$0.first >= 'a' && $0.first <= 'z'})\n    let file_name\
    \ = file_name.filter({$0.first >= 'A' && $0.first <= 'Z'})\n    let file_name\
    \ = file_name.filter({$0.last == \"txt\" || $0.last == \"exe\" || $0.last == \"\
    dll\"})\n    if file_name.count != 3 {\n        return \"No\"\n    } else {\n\
    \        return \"Yes\"\n    }", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\
    \n    let regex = try! NSRegularExpression(pattern: pattern)\n    let result =\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.utf16.count))\n\
    \    if result != nil {\n        let range = NSMakeRange(result.range.location,\
    \ result.range.length)\n        let file_name = file_name.substring(with: range)\n\
    \        return file_name\n    }\n    return \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let file_name = file_name.substring(from: dot_index)\n    let file_name =\
    \ file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n    let file_name\
    \ = file_name.lowercased()\n    let letter_index = file_name.index(of: \"a\")\n\
    \    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"b\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"c\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"d\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"e\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"f\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"g\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"h\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"i\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"j\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"k\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"l\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"m\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"n\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"o\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"p\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"q\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"r\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"s\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"t\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"u\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"v\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"w\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"x\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(of:\
    \ \"y\")\n    let letter_index = letter_index!\n    let letter_index = file_name.index(",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_substr = file_name[dot_index..<file_name.endIndex]\n   \
    \ let dot_substr_lowercase = dot_substr.lowercased()\n    let dot_substr_lowercase_index\
    \ = dot_substr_lowercase.index(of: \".\")\n    let dot_substr_lowercase_name =\
    \ dot_substr_lowercase[dot_substr_lowercase_index..<dot_substr_lowercase.endIndex]\n\
    \    let dot_substr_lowercase_name_lowercase = dot_substr_lowercase_name.lowercased()\n\
    \    let dot_substr_lowercase_name_lowercase_index = dot_substr_lowercase_name_lowercase.index(of:\
    \ \".\")\n    let dot_substr_lowercase_name_lowercase_name = dot_substr_lowercase_name_lowercase[dot_substr_lowercase_name_lowercase_index..<dot_substr_lowercase_name_lowercase.endIndex]\n\
    \    let dot_substr_lowercase_name_lowercase_name_index = dot_substr_lowercase_name_lowercase_name.index(of:\
    \ \".\")\n    let dot_substr_lowercase_name_lowercase_name_name_index = dot_substr_lowercase_name_lowercase_name[dot_substr_lowercase_name_lowercase_name_index..<dot_substr_lowercase_name_lowercase_name.endIndex]\n\
    \    let dot_substr_lowercase_name_lowercase_name_name_index = dot_substr_lowercase_name_lowercase_name_name[dot_substr_lowercase_name_lowercase_name_name_index..<dot_substr_lowercase_name_lowercase_name_name.endIndex]\n\
    \    let dot_substr_lowercase_name_lowercase_name_name_name_index = dot_substr_lowercase_name_lowercase_name_name_name[dot_substr_lowercase_name_lowercase_name_name_name_index..<dot_substr_lowercase_name_lowercase_name_name_name.endIndex]\n\
    \    let dot_substr_lowercase_name_lowercase_name_name_name_name_index = dot_substr_lowercase_name_lowercase_name_name_name_name[dot_substr_lowercase_name_lowercase_name_name_name_name_index..<dot_substr_lowercase_name_lowercase_name_name_name_name.endIndex]\n\
    \    let dot_substr_lowercase_name_lowercase_name_name_name_name_index = dot_substr_lowercase_name_lowercase_name_name_name_name_name[dot_substr_lowercase_name_lowercase_name_name_name_name_name_index..<dot_substr_lowercase_name_lowercase_name_name_name_name_name.endIndex]\n\
    \    let dot_substr_lowercase_name_lowercase_name_name_name_name_name_index =\
    \ dot_substr_lowercase_name_lowercase_name_name_name_name_name_name[dot_substr_lowercase_name_lowercase_name_name_name_name_name_name_index..<dot_substr_lowercase_name_lowercase_name_name_name_name_name_name.endIndex]\n\
    \    let dot_substr_lowercase_name_lowercase_name_name_name_name_name_name_index\
    \ = dot_substr_lowercase_name_lowercase_name_name_name_name_name_name_name[dot_substr_lowercase_name_lowercase_name_name_name_name_name_name_name_index..<dot_substr_lowercase_name_lowercase_name_name_name",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(file_name.startIndex,\
    \ offsetBy: 1)\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    \\.[^.]+$\")\n    let results = regex.matches(in: file_name, options: .anchored)\n\
    \    if !results.isEmpty {\n        return \"No\"\n    }\n    \n    let regex\
    \ = try! NSRegularExpression(pattern: \"^[a-z][a-zA-Z]+\")\n    let results =\
    \ regex.matches(in: file_name, options: .anchored)\n    if !results.isEmpty {\n\
    \        return \"No\"\n    }\n    \n    return \"Yes\"", "    var file_name_check\
    \ = \"No\"\n    \n    if file_name.count > 3 {\n        file_name_check = \"Yes\"\
    \n    }\n    \n    if file_name.contains(\".\") {\n        file_name_check = \"\
    Yes\"\n    }\n    \n    if file_name.starts(with: \"a\") && file_name.ends(with:\
    \ \"z\") || file_name.starts(with: \"A\") && file_name.ends(with: \"Z\") {\n \
    \       file_name_check = \"Yes\"\n    }\n    \n    if file_name_check == \"Yes\"\
    \ {\n        return file_name\n    } else {\n        return \"No\"\n    }", " \
    \   var file_name = file_name\n    \n    // 1. There should not be more than three\
    \ digits ('0'-'9') in the file's name.\n    if file_name.count > 3 {\n       \
    \ return \"No\"\n    }\n    \n    // 2. The file's name contains exactly one dot\
    \ '.'\n    if file_name.count < 2 {\n        return \"No\"\n    }\n    \n    //\
    \ 3. Substring before the dot should not be empty, and it starts with a letter\
    \ from the latin alphapet ('a'-'z' and 'A'-'Z').\n    if file_name.characters.first\
    \ == \"\" {\n        return \"No\"\n    }\n    \n    // 4. Substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n    if ![\"txt\", \"exe\"\
    , \"dll\"].contains(file_name.suffix) {\n        return \"No\"\n    }\n    \n\
    \    return \"Yes\"", "    let file_name = file_name.lowercased()\n    let file_name\
    \ = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n  \
    \  let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name.filter({$0.count > 1})\n    let file_name = file_name.filter({$0.first\
    \ >= 'a' && $0.first <= 'z'})\n    let file_name = file_name.filter({$0.last ==\
    \ '.'})\n    let file_name = file_name.filter({$0.first >= 'a' && $0.first <=\
    \ 'z'})\n    let file_name = file_name.filter({$0.last == '.'})\n    let file_name\
    \ = file_name.filter({$0.first >= 'a' && $0.first <= 'z'})\n    let file_name\
    \ = file_name.filter({$0.last == '.'})\n    let file_name = file_name.filter({$0.first\
    \ >= 'a' && $0.first <= 'z'})\n    let file_name = file_name.filter({$0.last ==\
    \ '.'})\n    let file_name = file_name.filter({$0.first >= 'a' && $0.first <=\
    \ 'z'})\n    let file_name = file_name.filter({$0.last == '.'})\n    let file_name\
    \ = file_name.filter({$0.first >= 'a' && $0.first <= 'z'})\n    let file_name\
    \ = file_name.filter({$0.last == '.'})\n    let file_name = file_name.filter({$0.first\
    \ >= 'a' && $0.first <= 'z'})\n    let file_name = file_name.filter({$0.last ==\
    \ '.'})\n    let file_name = file_name.filter({$0.first >= 'a' && $0.first <=\
    \ 'z'})\n    let file_name = file_name.filter({$0.last == '.'})\n    let file_name\
    \ = file_name.filter({$0.first >= 'a' && $0.first <= 'z'})\n    let file_name\
    \ = file_name.filter({$0.last == '.'})\n    let file_name = file_name.filter({$0.first\
    \ >= 'a' && $0.first <= 'z'})\n    let file_name = file_name.filter({$0.last ==\
    \ '.'})\n    let file_name = file_name.filter({$0.first >= 'a' && $0.first <=\
    \ 'z'})\n    let file_name = file_name.filter({$0.last == '.'})\n    let file_name\
    \ = file_name.filter({$0.first >= 'a' && $0.first <= 'z'})\n    let file_name\
    \ = file_name.filter({$0.last == '.'})\n    let file_name = file_name.filter({$0.first\
    \ >= 'a' && $0.first <= 'z'})\n    let file_name = file_name", "    let pattern\
    \ = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let results = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.utf16.count))\n    if !results.isEmpty\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let regex = try!\
    \ NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-z][a-z][a-z]$\")\n    return\
    \ regex.firstMatch(in: file_name, options: .regularExpression) != nil ? \"Yes\"\
    \ : \"No\"", "    let file_name = file_name.lowercased()\n    let file_name =\
    \ file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n    let\
    \ file_name = file_name.components(separatedBy: \".\")\n    let file_name = file_name[0]\n\
    \    let file_name = file_name.rangeOfCharacter(from: CharacterSet.letters)\n\
    \    let file_name = file_name.rangeOfCharacter(from: CharacterSet.uppercaseLetters)\n\
    \    let file_name = file_name.rangeOfCharacter(from: CharacterSet.lowercaseLetters)\n\
    \    if file_name.count > 3 {\n        return \"No\"\n    }\n    if file_name.count\
    \ < 1 {\n        return \"No\"\n    }\n    if file_name.count > 1 {\n        return\
    \ \"No\"\n    }\n    if file_name[0] != CharacterSet.letters.lowercased() {\n\
    \        return \"No\"\n    }\n    if file_name[1] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[2] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[3] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[4] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[5] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[6] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[7] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[8] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[9] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[10] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[11] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[12] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[13] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[14] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[15] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[16] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[17] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[18] != CharacterSet.lowercaseLetters.lowercased()\
    \ {\n        return \"No\"\n    }\n    if file_name[19] != CharacterSet.lowercaseLetters.",
  "    let pattern = \"^[0-9]{1,3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    return regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length == 0 ?\
    \ \"Yes\" : \"No\"", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    .[a-zA-Z]+$\")\n    let results = regex.matches(in: file_name, range: NSMakeRange(0,\
    \ file_name.characters.count))\n    if !results.isEmpty {\n        return String()\n\
    \    }\n    return String()", "    let file_name = file_name.lowercased()\n  \
    \  let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.components(separatedBy: \".\")\n    let file_name\
    \ = file_name.filter({$0.count > 1})\n    let file_name = file_name.filter({$0.first\
    \ >= 'a' && $0.first <= 'z'})\n    let file_name = file_name.filter({$0.first\
    \ >= 'A' && $0.first <= 'Z'})\n    let file_name = file_name.filter({$0.last ==\
    \ \"txt\" || $0.last == \"exe\" || $0.last == \"dll\"})\n    if file_name.count\
    \ != 1 {\n        return \"No\"\n    } else {\n        return \"Yes\"\n    }",
  "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_substr = file_name[dot_index..<dot_index+1]\n    let first_letter\
    \ = dot_substr.first\n    let letters = first_letter..<first_letter+first_letter.count\n\
    \    let contains_letter = dot_substr.contains(where: { $0.isLetter })\n    let\
    \ contains_digit = dot_substr.contains(where: { $0.isNumber })\n    let contains_dot\
    \ = dot_substr.contains(where: { $0 == \"\\.\" })\n    let contains_txt = dot_substr.contains(where:\
    \ { $0 == \"txt\" })\n    let contains_exe = dot_substr.contains(where: { $0 ==\
    \ \"exe\" })\n    let contains_dll = dot_substr.contains(where: { $0 == \"dll\"\
    \ })\n    if dot_index == nil || dot_substr.isEmpty || contains_letter || contains_digit\
    \ || contains_dot || contains_txt || contains_exe || contains_dll {\n        return\
    \ \"No\"\n    }\n    if dot_index != nil && dot_index > 0 && dot_index != dot_substr.endIndex\
    \ && dot_substr.count > 1 && dot_substr[0].isLetter && dot_substr[1].isLetter\
    \ {\n        return \"Yes\"\n    }\n    return \"No\"", "    let regex = try!\
    \ NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z0-9]+$\")\n    let matches\
    \ = regex.matches(in: file_name, options: .anchored)\n    if matches.count > 0\
    \ {\n        return file_name\n    } else {\n        return \"No\"\n    }", " \
    \   let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let dot_substr = file_name[..<dot_index]\n    let first_letter =\
    \ dot_substr.first\n    let letters_range = first_letter...first_letter + first_letter.count\n\
    \    let contains_only_letters = dot_substr.rangeOfCharacter(from: letters_range).isEmpty\n\
    \    let contains_only_digits = dot_substr.rangeOfCharacter(from: NSCharacterSet.decimalDigits.inverted).isEmpty\n\
    \    let contains_only_dots = dot_substr.rangeOfCharacter(from: NSCharacterSet.dotCharacters).isEmpty\n\
    \    if dot_index == NSNotFound || dot_substr.isEmpty || contains_only_letters\
    \ || contains_only_digits || contains_only_dots {\n        return \"No\"\n   \
    \ }\n    if dot_index != dot_substr.endIndex {\n        let dot_substr_after_dot\
    \ = file_name[dot_index..<dot_substr.endIndex]\n        let dot_substr_after_dot_range\
    \ = dot_substr_after_dot...dot_substr_after_dot\n        let dot_substr_after_dot_range_contains_txt\
    \ = dot_substr_after_dot_range.rangeOfString(\"txt\", options: .caseInsensitive)\n\
    \        let dot_substr_after_dot_range_contains_exe = dot_substr_after_dot_range.rangeOfString(\"\
    exe\", options: .caseInsensitive)\n        let dot_substr_after_dot_range_contains_dll\
    \ = dot_substr_after_dot_range.rangeOfString(\"dll\", options: .caseInsensitive)\n\
    \        if dot_substr_after_dot_range_contains_txt.count != 0 || dot_substr_after_dot_range_contains_exe.count\
    \ != 0 || dot_substr_after_dot_range_contains_dll.count != 0 {\n            return\
    \ \"No\"\n        }\n    }\n    return \"Yes\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(file_name.startIndex, offsetBy: 1)\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0", "  \
    \  let file_name = file_name.lowercased()\n    let dot_index = file_name.index(file_name.startIndex,\
    \ offsetBy: 1)\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let\
    \ dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index\
    \ != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ? dot_index! :\
    \ 0\n    let dot_index = dot_index != nil ? dot_index! : 0\n    let dot_index\
    \ = dot_index != nil ? dot_index! : 0\n    let dot_index = dot_index != nil ?\
    \ dot_index! : 0", "    let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\
    \\.[^.]+$\", options: [])\n    return regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1).length ==\
    \ 0 &&\n        regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count)).rangeAt(1).length > 0 &&\n        file_name.substring(with:\
    \ regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasPrefix(\"\
    a\") &&\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    txt\") ||\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    exe\") ||\n        file_name.substring(with: regex.firstMatch(in: file_name, options:\
    \ [], range: NSMakeRange(0, file_name.characters.count)).rangeAt(1)).hasSuffix(\"\
    dll\")\n        ? \"Yes\" : \"No\"", "    let file_name = file_name.lowercased()\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_", " \
    \   let regex = try! NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z]+$\"\
    )\n    let result = regex.firstMatch(in: file_name, options: [], range: NSMakeRange(0,\
    \ file_name.characters.count))\n    if result != nil {\n        let range = NSRange(location:\
    \ result.range.location, length: result.range.length)\n        return String(file_name[range])\n\
    \    } else {\n        return \"No\"\n    }", "    let pattern = \"^[0-9]{3}\\\
    .txt$\"\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n\
    \    let results = regex.matches(in: file_name, options: [], range: NSRange(location:\
    \ 0, length: file_name.count))\n    if results.count == 0 {\n        return \"\
    No\"\n    }\n    if results.count == 1 {\n        let range = results[0].range\n\
    \        let start = range.lowerBound\n        let end = range.upperBound\n  \
    \      let substring = file_name[start..<end]\n        if substring == \".\" {\n\
    \            return \"No\"\n        }\n        let pattern = \"^[a-zA-Z]+$\"\n\
    \        let regex = try! NSRegularExpression(pattern: pattern, options: [])\n\
    \        let results = regex.matches(in: substring, options: [], range: NSRange(location:\
    \ 0, length: substring.count))\n        if results.count == 0 {\n            return\
    \ \"No\"\n        }\n        if results.count == 1 {\n            let range =\
    \ results[0].range\n            let start = range.lowerBound\n            let\
    \ end = range.upperBound\n            let substring = substring[start..<end]\n\
    \            if substring != \"txt\" && substring != \"exe\" && substring != \"\
    dll\" {\n                return \"No\"\n            }\n        }\n    }\n    return\
    \ \"Yes\"", "    let file_name = file_name.lowercased()\n    let dot_index = file_name.index(of:\
    \ \".\")\n    let first_letter = file_name.prefix(upTo: dot_index)\n    let last_letter\
    \ = file_name.suffix(from: dot_index)\n    \n    let valid_characters = CharacterSet.letters.union(CharacterSet(charactersIn:\
    \ \"0123456789\"))\n    \n    if dot_index == -1 || first_letter.isEmpty || last_letter\
    \ != \"txt\" && last_letter != \"exe\" && last_letter != \"dll\" {\n        return\
    \ \"No\"\n    }\n    \n    if !valid_characters.isSuperset(of: first_letter) {\n\
    \        return \"No\"\n    }\n    \n    return \"Yes\"", "    let file_name =\
    \ file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n   \
    \ let dot_index = dot_index!\n    let file_name = file_name.substring(from: dot_index)\n\
    \    let file_name = file_name.trimmingCharacters(in: .whitespacesAndNewlines)\n\
    \    let file_name = file_name.lowercased()\n    let letter_index = (file_name.startIndex..<file_name.endIndex).filter({\
    \ $0.isLetter })\n    let letter_index = letter_index.first\n    let letter_index\
    \ = letter_index!\n    let letter_index = letter_index.advanced(by: 1)\n    let\
    \ letter_index = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter_index.advanced(by: 1)\n    let letter_index = letter_index.advanced(by:\
    \ 1)\n    let letter_index = letter_index.advanced(by: 1)\n    let letter_index\
    \ = letter", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try!\
    \ NSRegularExpression(pattern: pattern)\n    let match = regex.firstMatch(in:\
    \ file_name, options: .caseInsensitive)\n    if let range = match.range(at: 1)\
    \ {\n        let file_name = file_name[range]\n        if file_name.count == 3\
    \ {\n            if file_name.first == \".\" {\n                if let _ = file_name.range(of:\
    \ \"\", options: .backwards) {\n                    return \"No\"\n          \
    \      }\n            }\n            if file_name.first == file_name.first!.lowercased()\
    \ {\n                if let _ = file_name.range(of: \"\", options: .backwards)\
    \ {\n                    return \"No\"\n                }\n            }\n   \
    \         if file_name.last == file_name.last!.lowercased() {\n              \
    \  if let _ = file_name.range(of: \"\", options: .backwards) {\n             \
    \       return \"No\"\n                }\n            }\n            if file_name.first\
    \ == file_name.first!.uppercased() {\n                if let _ = file_name.range(of:\
    \ \"\", options: .backwards) {\n                    return \"No\"\n          \
    \      }\n            }\n            if file_name.last == file_name.last!.uppercased()\
    \ {\n                if let _ = file_name.range(of: \"\", options: .backwards)\
    \ {\n                    return \"No\"\n                }\n            }\n   \
    \         return \"Yes\"\n        }\n    }\n    return \"No\"", "    let file_name\
    \ = file_name.lowercased()\n    let dot_index = file_name.index(of: \".\")\n \
    \   let dot_substr = file_name[..<dot_index]\n    let dot_substr_lowercased =\
    \ dot_substr.lowercased()\n    let dot_substr_lowercased_count = dot_substr_lowercased.count\n\
    \    \n    if dot_substr_lowercased_count != 1 {\n        return \"No\"\n    }\n\
    \    \n    if dot_substr_lowercased.first != dot_substr_lowercased.first {\n \
    \       return \"No\"\n    }\n    \n    if dot_substr_lowercased.first > 'z' ||\
    \ dot_substr_lowercased.first < 'a' {\n        return \"No\"\n    }\n    \n  \
    \  if dot_substr_lowercased.last != 'txt' || dot_substr_lowercased.last != 'exe'\
    \ || dot_substr_lowercased.last != 'dll' {\n        return \"No\"\n    }\n   \
    \ \n    return \"Yes\"", "    let regex = try! NSRegularExpression(pattern: \"\
    ^[0-9]{3}\\.[a-zA-Z0-9]+$\", options: .caseInsensitive)\n    let matches = regex.matches(in:\
    \ file_name, options: .anchored, range: NSRange(location: 0, length: file_name.utf16.count))\n\
    \    if matches.count == 0 {\n        return \"No\"\n    }\n    if matches.count\
    \ > 1 {\n        return \"No\"\n    }\n    if matches.count == 1 && matches[0].rangeAt(0).location\
    \ != 0 {\n        return \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0).location\
    \ != 0 {\n        return \"No\"\n    }\n    if matches.count > 1 && matches[0].rangeAt(0).location\
    \ != 0 && matches[0].rangeAt(0).length > 0 {\n        return \"No\"\n    }\n \
    \   return \"Yes\"", "    let file_name = file_name.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \    let dot_index = file_name.index(of: \".\")\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!\n    let dot_index = dot_index!\n    let dot_index = dot_index!\n\
    \    let dot_index = dot_index!\n    let dot_index = dot_index!\n    let dot_index\
    \ = dot_index!", "    let pattern = \"^[0-9]{3}\\.[a-zA-Z0-9]+$\"\n    let regex\
    \ = try! NSRegularExpression(pattern: pattern)\n    let match = regex.firstMatch(in:\
    \ file_name, options: .regularExpression, range: NSRange(location: 0, length:\
    \ file_name.utf8.count))\n    if let match = match {\n        let range = Range(match.range,\
    \ in: file_name, options: .backwards)\n        let file_name = file_name.substring(with:\
    \ range)\n        return file_name\n    } else {\n        return \"No\"\n    }",
  "    let pattern = \"^[0-9]{3}\\.[a-zA-Z]+$\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let results = regex.matches(in: file_name, options:\
    \ [], range: NSRange(location: 0, length: file_name.utf16.count))\n    if !results.isEmpty\
    \ {\n        return \"No\"\n    }\n    return \"Yes\"", "    let regex = try!\
    \ NSRegularExpression(pattern: \"^[0-9]{3}\\\\.[a-zA-Z]+$\")\n    return regex.firstMatch(in:\
    \ file_name, options: .regularExpression) != nil ? \"Yes\" : \"No\"", "    let\
    \ pattern = \"^[0-9]{3}\\.\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n    let result = regex.firstMatch(in: file_name, options: [], range:\
    \ NSMakeRange(0, file_name.characters.count))\n    if let range = result.range\n\
    \    {\n        let file_name = file_name.substring(with: range)\n        let\
    \ pattern = \"^[a-zA-Z][a-zA-Z0-9]*$\"\n        let regex = try! NSRegularExpression(pattern:\
    \ pattern)\n        let result = regex.firstMatch(in: file_name, options: [],\
    \ range: NSMakeRange(0, file_name.characters.count))\n        if let range = result.range\n\
    \        {\n            let file_name = file_name.substring(with: range)\n   \
    \         if file_name.characters.count == 3 && file_name.contains(\".\") && file_name.characters.count\
    \ > 0 && file_name.characters.first >= 'a' && file_name.characters.first <= 'z'\
    \ && file_name.characters.first >= 'A' && file_name.characters.first <= 'Z'\n\
    \            {\n                return \"Yes\"\n            }\n            else\n\
    \            {\n                return \"No\"\n            }\n        }\n    }\n\
    \    return \"No\""]
stop_tokens:
- "\n}"
