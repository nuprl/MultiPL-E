name: HumanEval_104_unique_digits
language: swift
prompt: "\n/// Given a list of positive integers x. return a sorted list of all \n\
  /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
  \ in increasing order.\n/// For example:\nfunc unique_digits(x: [Int]) -> [Int]\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(unique_digits(x: [15, 33, 1422, 1]) == [1,\
  \ 15, 33])\nassert(unique_digits(x: [152, 323, 1422, 10]) == [] as [Int])\nassert(unique_digits(x:\
  \ [12345, 2033, 111, 151]) == [111, 151])\nassert(unique_digits(x: [135, 103, 31])\
  \ == [31, 135])"
completions: ["    var result = [Int]()\n    var evenDigit = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigit += 1\n        }\n    }\n    for\
    \ n in x {\n        if evenDigit == 0 {\n            result.append(n)\n      \
    \  }\n        if evenDigit > 0 && n % 2 == 0 {\n            evenDigit -= 1\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    var evenDigit\
    \ = false\n    for n in x {\n        if n % 2 == 0 {\n            evenDigit =\
    \ true\n        }\n        if evenDigit {\n            result.append(n)\n    \
    \    }\n    }\n    return result", "    var result = [Int]()\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  even.append(n)\n        } else {\n            odd.append(n)\n        }\n  \
    \  }\n    for n in even {\n        if result.contains(n) {\n            continue\n\
    \        }\n        for m in odd {\n            if n == m {\n                continue\n\
    \            }\n            if n % m == 0 {\n                result.append(n)\n\
    \                break\n            }\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var evenDigits = [Int]()\n    for n in x {\n   \
    \     if n % 2 == 0 {\n            evenDigits.append(n)\n        } else {\n  \
    \          if !contains(result, evenDigits) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        }\n    }\n    for n in evenDigits {\n\
    \        if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result", "    var result = [Int]()\n    var even = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n     \
    \   } else {\n            result.append(n)\n        }\n    }\n    for n in even\
    \ {\n        result.remove(n)\n    }\n    return result", "    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result",
  "    var result = [Int]()\n    var evenDigit = 0\n    for element in x {\n     \
    \   if element % 2 == 0 {\n            evenDigit += 1\n        }\n    }\n    for\
    \ element in x {\n        if element % 2 != 0 && evenDigit == 0 {\n          \
    \  result.append(element)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var evenDigit = false\n    for x in x {\n        if x % 2 ==\
    \ 0 {\n            evenDigit = true\n        } else {\n            if evenDigit\
    \ {\n                result.append(x)\n            }\n            evenDigit =\
    \ false\n        }\n    }\n    return result", "    var result = [Int]()\n   \
    \ for x in x {\n        if x % 2 == 0 {\n            result.append(x)\n      \
    \  }\n    }\n    return result", "    var result = [Int]()\n    var evenDigit\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            evenDigit\
    \ += [n]\n        } else {\n            result += [n]\n        }\n    }\n    for\
    \ n in evenDigit {\n        result.removeAll(n) // remove all even digit from\
    \ result\n    }\n    return result", "    var result = [Int]()\n    var evenDigitCount\
    \ = 0\n    var evenDigits = Set<Int>()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            evenDigits.insert(n)\n            evenDigitCount += 1\n   \
    \     }\n    }\n    for n in x {\n        if evenDigits.contains(n) {\n      \
    \      continue\n        }\n        if evenDigitCount > 0 {\n            result.insert(n)\n\
    \            evenDigitCount -= 1\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    \n    for n in x {\n        if n % 2 == 0 {\n\
    \            evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    \n    return result", "    var result = [Int]()\n    var index = 0\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result[index] = n\n  \
    \          index += 1\n        }\n    }\n    result.sort()\n    return result",
  "    var result = [Int]()\n    var evenDigit = [Int]()\n    for n in x {\n     \
    \   if n % 2 == 0 {\n            evenDigit.append()\n        }\n    }\n    for\
    \ n in evenDigit {\n        if result.contains(n) {\n            continue\n  \
    \      }\n        result.append(n)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var evenDigit = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            evenDigit += 1\n        } else {\n            if evenDigit\
    \ > 0 {\n                result.append(element)\n            }\n            evenDigit\
    \ = 0\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ even = [Int]()\n    for x in x {\n        if x % 2 == 0 {\n            even.append(x)\n\
    \        } else {\n            result.append(x)\n        }\n    }\n    for x in\
    \ even {\n        result.remove(x)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n  \
    \          result[index] = n\n            index += 1\n        }\n    }\n    result.sort()\n\
    \    return result", "    var result = [Int]()\n    var index = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            result[index] = element\n\
    \            index += 1\n        }\n    }\n    return result.sorted(by: <)", " \
    \   var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var even = [Int]()\n    var i = 0\n\
    \    for element in x {\n        if element % 2 == 0 {\n            even.append(element)\n\
    \        } else {\n            result.append(element)\n        }\n    }\n    for\
    \ element in even {\n        result.remove(at: i)\n        i += 1\n    }\n   \
    \ return result", "    var result = [Int]()\n    for n in x {\n        if n %\
    \ 2 == 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n\
    \    return result", "    var result = [Int]()\n    var even = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            even.append(n)\n        } else\
    \ {\n            result.append(n)\n        }\n    }\n    for n in even {\n   \
    \     result.remove(n)\n    }\n    return result", "    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index++\n        }\n    }\n    return result.sort()", "   \
    \ var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var last = 0\n    for n in x {\n   \
    \     if n % 2 == 0 {\n            last = last * 10 + n\n        } else {\n  \
    \          if last > 0 {\n                result.append(last)\n            }\n\
    \            last = n\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result", "    var result = [Int]()\n    for num in x {\n  \
    \      if num % 2 == 0 {\n            result.append(num)\n        }\n    }\n \
    \   result.sort()\n    return result", "    var result = [Int]()\n    var even\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    for n in\
    \ even {\n        result.remove(n)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n\
    \            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var even = [Int]()\n    var odd = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n     \
    \   } else {\n            odd.append(n)\n        }\n    }\n    for n in even {\n\
    \        if result.contains(n) == false {\n            result.append(n)\n    \
    \    }\n    }\n    for n in odd {\n        if result.contains(n) == false {\n\
    \            result.append(n)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var last: Int = 0\n    for x in x {\n        if x % 2\
    \ == 0 {\n            last = x\n        } else {\n            if last != 0 {\n\
    \                result.append(last)\n            }\n            last = 0\n  \
    \      }\n    }\n    if last != 0 {\n        result.append(last)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var evenDigits = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n        }\
    \ else {\n            if !contains(result, evenDigits) {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n    \
    \        evenDigit.append(n)\n        } else {\n            if evenDigit.count\
    \ > 0 {\n                result.appendContentsOf(evenDigit)\n            }\n \
    \           evenDigit.removeAll()\n        }\n    }\n    if evenDigit.count >\
    \ 0 {\n        result.appendContentsOf(evenDigit)\n    }\n    return result",
  "    var result = [Int]()\n    var lastDigit = x.last!\n    for n in x {\n     \
    \   if n % 2 == 0 {\n            lastDigit = lastDigit % 10\n        } else {\n\
    \            if lastDigit % 2 == 0 {\n                lastDigit = lastDigit /\
    \ 10\n            } else {\n                result.append(n)\n            }\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var index\
    \ = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index] =\
    \ n\n            index++\n        }\n    }\n    result.sort()\n    return result",
  "    var result = [Int]()\n    var i = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            result.append(element)\n        }\n    }\n    for element\
    \ in result {\n        if element % 2 != 0 {\n            result.removeLast()\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var evenDigit\
    \ = 0\n    for n in x {\n        if n % 2 == 0 {\n            evenDigit += 1\n\
    \        } else {\n            if evenDigit > 0 {\n                result.append(n)\n\
    \                evenDigit -= 1\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    for n in x {\n        if n % 2 == 0\
    \ {\n            result.append(n)\n        }\n    }\n    result.sort()\n    return\
    \ result", "    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var i = 0\n    for element in x {\n        if element % 2 ==\
    \ 0 {\n            result.append(element)\n        }\n    }\n    for element in\
    \ result {\n        if element % 2 != 0 {\n            result.removeLast()\n \
    \       }\n    }\n    return result", "    var result = [Int]()\n    var i = 0\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    for element in result {\n        if element % 2 != 0 {\n\
    \            result.removeLast()\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if n % 2\
    \ == 0 {\n            even.append(n)\n        } else {\n            if even.contains(n)\
    \ == false {\n                result.append(n)\n            }\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    var evenDigit = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            evenDigit.append(n)\n\
    \        } else {\n            if !contains(result, evenDigit) {\n           \
    \     result.append(n)\n            }\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var index = 0\n    for element in x {\n        if\
    \ element % 2 == 0 {\n            result[index] = element\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result", "    var result\
    \ = [Int]()\n    var evenDigits = [Int]()\n    for n in x {\n        if n % 2\
    \ == 0 {\n            evenDigits.append(n)\n        } else {\n            for\
    \ e in evenDigits {\n                if e % e == 0 {\n                    result.append(n)\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    var i = 0\n    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    for n in\
    \ evenDigits {\n        result.remove(n)\n    }\n    return result", "    var\
    \ result = [Int]()\n    var evenDigit = [Int]()\n    var evenDigitCount = 0\n\
    \    for element in x {\n        if element % 2 == 0 {\n            evenDigit.append(element)\n\
    \            evenDigitCount += 1\n        }\n    }\n    for element in evenDigit\
    \ {\n        if evenDigitCount > 0 {\n            for index in 0..<evenDigitCount\
    \ {\n                if element == evenDigit[index] {\n                    result.append(element)\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n\
    \    return result", "    var result = [Int]()\n    var lastEvenDigit: Int = 0\n\
    \    for n in x {\n        if n % 2 == 0 {\n            lastEvenDigit = n\n  \
    \      } else {\n            if lastEvenDigit != 0 {\n                result.insert(lastEvenDigit,\
    \ at: 0)\n            }\n            lastEvenDigit = 0\n        }\n    }\n   \
    \ if lastEvenDigit != 0 {\n        result.insert(lastEvenDigit, at: 0)\n    }\n\
    \    return result", "    var result = [Int]()\n    var last = 0\n    for x in\
    \ x {\n        if x % 2 == 0 {\n            last = last * 10 + x\n        } else\
    \ {\n            if last > 0 {\n                result.append(last)\n        \
    \    }\n            last = x\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            for e in evenDigits {\n                if e % e\
    \ == 0 {\n                    result.append(n)\n                    break\n  \
    \              }\n            }\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if n % 2\
    \ == 0 {\n            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var i = 0\n    for n in x {\n      \
    \  if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n    for n\
    \ in result {\n        if n % 2 != 0 {\n            result.removeAll()\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    var index = 0\n\
    \    for element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result",
  "    var result = [Int]()\n    var index = 0\n    for n in x {\n        if n % 2\
    \ == 0 {\n            result[index] = n\n            index += 1\n        }\n \
    \   }\n    result.sort()\n    return result", "    var result = [Int]()\n    var\
    \ even = [Int]()\n    var odd = [Int]()\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            even.append(element)\n        } else {\n           \
    \ odd.append(element)\n        }\n    }\n    for element in even {\n        if\
    \ !contains(result, element) {\n            result.append(element)\n        }\n\
    \    }\n    for element in odd {\n        if !contains(result, element) {\n  \
    \          result.append(element)\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    var evenDigits = [Int]()\n    for element in x {\n\
    \        if element % 2 == 0 {\n            evenDigits.append(element)\n     \
    \   }\n    }\n    for element in evenDigits {\n        if !contains(result, element)\
    \ {\n            result.append(element)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var index = 0\n    for element in x {\n        if\
    \ element % 2 == 0 {\n            result[index] = element\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result", "    var result\
    \ = [Int]()\n    var evenDigits = [Int]()\n    for n in x {\n        if n % 2\
    \ == 0 {\n            evenDigits.append(n)\n        } else {\n            for\
    \ e in evenDigits {\n                if e == n {\n                    result.append(n)\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var even = [Int]()\n    var\
    \ odd  = [Int]()\n    var xLen = x.count\n    for i in 0..<xLen {\n        if\
    \ x[i] % 2 == 0 {\n            even.append(x[i])\n        } else {\n         \
    \   odd.append(x[i])\n        }\n    }\n    for i in 0..<xLen {\n        if even.contains(i)\
    \ {\n            continue\n        }\n        if odd.contains(i) {\n         \
    \   result.append(i)\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            evenDigits.append(n)\n        } else {\n            for d in\
    \ evenDigits {\n                if d == n {\n                    break\n     \
    \           }\n            }\n            if !result.contains(d) {\n         \
    \       result.append(n)\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var even = [Int]()\n    for element in x {\n    \
    \    if element % 2 == 0 {\n            even.append(element)\n        } else {\n\
    \            result.append(element)\n        }\n    }\n    for element in even\
    \ {\n        result.remove(at: result.index(of: element))\n    }\n    return result",
  "    var result = [Int]()\n    var i = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            result.append(element)\n        }\n    }\n    result.sort()\n\
    \    return result", "    var result = [Int]()\n    var last: Int = 0\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            last = last * 10 + n\n      \
    \  } else {\n            if last > 0 {\n                result.append(last)\n\
    \            }\n            last = n\n        }\n    }\n    if last > 0 {\n  \
    \      result.append(last)\n    }\n    return result", "    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            if !contains(result,\
    \ evenDigits) {\n                result.append(n)\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var i = 0\n    for\
    \ element in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    for element in result {\n        if element % 2 == 0 {\n\
    \            result.removeAll(where: { $0 == element })\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    var even = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            even.append(n)\n        } else\
    \ {\n            result.append(n)\n        }\n    }\n    for n in even {\n   \
    \     result.remove(n)\n    }\n    return result", "    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result", "    var result = [Int]()\n    var lastEvenDigit =\
    \ 0\n    for n in x {\n        if n % 2 == 0 {\n            lastEvenDigit = n\n\
    \        } else {\n            if lastEvenDigit > 0 {\n                result.append(lastEvenDigit)\n\
    \            }\n            lastEvenDigit = 0\n        }\n    }\n    if lastEvenDigit\
    \ > 0 {\n        result.append(lastEvenDigit)\n    }\n    return result", "  \
    \  var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var evenDigits = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n        }\n\
    \    }\n    for n in evenDigits {\n        if result.contains(n) {\n         \
    \   continue\n        }\n        result.append(n)\n    }\n    return result",
  "    var result = [Int]()\n    var index = 0\n    for element in x {\n        if\
    \ element % 2 == 0 {\n            result[index] = element\n            index +=\
    \ 1\n        }\n    }\n    result.sort()\n    return result", "    var result\
    \ = [Int]()\n    var evenDigit = 0\n    for x in x {\n        if x % 2 == 0 {\n\
    \            evenDigit += 1\n        }\n    }\n    for x in x {\n        if x\
    \ % 2 == 0 {\n            if evenDigit == 0 {\n                result.append(x)\n\
    \            }\n            evenDigit -= 1\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   result.append(n)\n        }\n    }\n    result.sort()\n    return result",
  "    var result = [Int]()\n    var evenDigits = [Int]()\n    for n in x {\n    \
    \    if n % 2 == 0 {\n            evenDigits.append(n)\n        } else {\n   \
    \         for e in evenDigits {\n                if e == n {\n               \
    \     result.append(n)\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result", "    var result = [Int]()\n   \
    \ var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n      \
    \      evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    result.append(e)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    for n in x {\n        if n %\
    \ 2 == 0 {\n            result.append(n)\n        }\n    }\n    result.sort()\n\
    \    return result", "    var result = [Int]()\n    var last: Int = 0\n    for\
    \ x in x {\n        if x % 2 == 0 {\n            last = x\n        } else {\n\
    \            if last != 0 {\n                result.append(last)\n           \
    \ }\n            last = 0\n        }\n    }\n    if last != 0 {\n        result.append(last)\n\
    \    }\n    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        }\n    }\n    for n in evenDigits {\n        if result.contains(n) {\n\
    \            continue\n        }\n        result.append(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var evenDigit = [Int]()\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            evenDigit.append(n)\n        } else\
    \ {\n            result.append(n)\n        }\n    }\n    for n in evenDigit {\n\
    \        result.remove(n)\n    }\n    return result", "    var result = [Int]()\n\
    \    var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            odd.append(n)\n\
    \        }\n    }\n    for n in even {\n        if result.contains(n) {\n    \
    \        continue\n        }\n        for m in odd {\n            if n == m {\n\
    \                continue\n            }\n            if n % m == 0 {\n      \
    \          result.append(n)\n                break\n            }\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var last = 0\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            last = last * 10 + n\n      \
    \  } else {\n            if last > 0 {\n                result.append(last)\n\
    \            }\n            last = n\n        }\n    }\n    if last > 0 {\n  \
    \      result.append(last)\n    }\n    return result", "    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n    \
    \        evenDigit.append(n)\n        }\n    }\n    for n in evenDigit {\n   \
    \     if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    var evenDigitsCount = 0\n    for n in x {\n        if n % 2 == 0 {\n    \
    \        evenDigits.append(n)\n            evenDigitsCount += 1\n        }\n \
    \   }\n    for n in evenDigits {\n        if evenDigitsCount > 0 {\n         \
    \   for _ in 0..<(evenDigitsCount - 1) {\n                result.append(0)\n \
    \           }\n        }\n        result.append(n)\n        evenDigitsCount -=\
    \ 1\n    }\n    return result", "    var result = [Int]()\n    var even = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n     \
    \   } else {\n            result.append(n)\n        }\n    }\n    for n in even\
    \ {\n        result.remove(n)\n    }\n    return result", "    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    \n    for i in x {\n        if i % 2 == 0 {\n\
    \            evenDigits.append(i)\n        }\n    }\n    \n    for i in evenDigits\
    \ {\n        if !contains(result, i) {\n            result.append(i)\n       \
    \ }\n    }\n    \n    return result", "    var result = [Int]()\n    var last\
    \ = 0\n    for n in x {\n        if n % 2 == 0 {\n            last = last * 10\
    \ + n\n        } else {\n            if last > 0 {\n                result.append(last)\n\
    \            }\n            last = n\n        }\n    }\n    if last > 0 {\n  \
    \      result.append(last)\n    }\n    return result", "    var result = [Int]()\n\
    \    var even = [Int]()\n    var i = 0\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var evenDigit = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigit += 1\n        } else {\n     \
    \       if evenDigit == 0 {\n                result.append(n)\n            }\n\
    \            evenDigit = 0\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var even = [Int]()\n    var odd = [Int]()\n    for n in x {\n\
    \        if n % 2 == 0 {\n            even.append(n)\n        } else {\n     \
    \       odd.append(n)\n        }\n    }\n    for n in even {\n        if result.contains(n)\
    \ {\n            continue\n        } else {\n            result.append(n)\n  \
    \      }\n    }\n    for n in odd {\n        if result.contains(n) {\n       \
    \     continue\n        } else {\n            result.append(n)\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            for e in evenDigits {\n                if e ==\
    \ n {\n                    result.append(n)\n                    break\n     \
    \           }\n            }\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    var evenDigit = 0\n    var evenDigitCount = 0\n    for element in x {\n \
    \       if element % 2 == 0 {\n            evenDigitCount++\n        } else {\n\
    \            evenDigit = 0\n            evenDigitCount = 0\n        }\n      \
    \  if evenDigitCount > 0 {\n            result.append(element)\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    \n    for i in x {\n        if i % 2 == 0 {\n            evenDigits.append(i)\n\
    \        } else {\n            if !contains(evenDigits, i) {\n               \
    \ result.append(i)\n            }\n        }\n    }\n    \n    return result",
  "    var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            even.append(n)\n        } else {\n            if !contains(result,\
    \ n) {\n                result.append(n)\n            }\n        }\n    }\n  \
    \  for n in even {\n        if !contains(result, n) {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var even\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    for n in\
    \ even {\n        result.remove(n)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var last = 0\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         last = last * 10 + n\n        } else {\n            if last > 0 {\n\
    \                result.append(last)\n            }\n            last = n\n  \
    \      }\n    }\n    if last > 0 {\n        result.append(last)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var i = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            result.append(element)\n        }\n\
    \    }\n    for element in result {\n        if element % 2 != 0 {\n         \
    \   result.removeLast()\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result.sorted()", "    var result = [Int]()\n  \
    \  var last = 0\n    for x in x {\n        if x % 2 == 0 {\n            last =\
    \ last * 10 + x\n        } else {\n            if last > 0 {\n               \
    \ result.append(last)\n            }\n            last = x\n        }\n    }\n\
    \    if last > 0 {\n        result.append(last)\n    }\n    return result", " \
    \   var result = [Int]()\n    var evenDigit = 0\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            evenDigit += 1\n        } else {\n            if evenDigit\
    \ > 0 {\n                result.append(n)\n                evenDigit = 0\n   \
    \         }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var index = 0\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          result[index] = element\n            index++\n        }\n    }\n  \
    \  result.sort()\n    return result", "    var result = [Int]()\n    var last\
    \ = 0\n    for n in x {\n        if n % 2 == 0 {\n            last = last * 10\
    \ + n\n        } else {\n            if last > 0 {\n                result.append((last\
    \ / 10) % 10)\n                last = last % 10\n            }\n        }\n  \
    \  }\n    if last > 0 {\n        result.append((last / 10) % 10)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var even = [Int]()\n    for n in x {\n\
    \        if n % 2 == 0 {\n            even.append(n)\n        } else {\n     \
    \       result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result", "    var result = [Int]()\n    var even = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      even.append(element)\n        } else {\n            result.append(element)\n\
    \        }\n    }\n    for element in even {\n        result.remove(at: i)\n \
    \       i += 1\n    }\n    return result", "    var result = [Int]()\n    var\
    \ evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  evenDigits.append(n)\n        } else {\n            result.append(n)\n    \
    \    }\n    }\n    for n in evenDigits {\n        result.remove(n)\n    }\n  \
    \  return result", "    var result = [Int]()\n    var last = 0\n    for n in x\
    \ {\n        if n % 2 == 0 {\n            last = last * 10 + n\n        } else\
    \ {\n            if last > 0 {\n                result.append(last)\n        \
    \    }\n            last = n\n        }\n    }\n    if last > 0 {\n        result.append(last)\n\
    \    }\n    return result", "    var result = [Int]()\n    var last: Int = 0\n\
    \    for x in x {\n        if x % 2 == 0 {\n            last = last * 10 + x\n\
    \        } else {\n            if last > 0 {\n                result.append(last)\n\
    \            }\n            last = x\n        }\n    }\n    if last > 0 {\n  \
    \      result.append(last)\n    }\n    return result", "    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            result.append(n)\n        }\n\
    \    }\n    for n in even {\n        result.remove(n)\n    }\n    return result",
  "    var result = [Int]()\n    var even = [Int]()\n    for element in x {\n    \
    \    if element % 2 == 0 {\n            even.append(element)\n        } else {\n\
    \            result.append(element)\n        }\n    }\n    for element in even\
    \ {\n        result.remove(at: result.index(of: element))\n    }\n    return result",
  "    var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var evenDigit = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigit += 1\n        } else {\n     \
    \       if evenDigit > 0 {\n                result.append(n)\n               \
    \ evenDigit = 0\n            }\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var evenDigits = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            evenDigits.append(n)\n        } else {\n         \
    \   if !contains(result, evenDigits) {\n                result.append(n)\n   \
    \         }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    result.sort()\n    return\
    \ result", "    var result = [Int]()\n    var even = [Int]()\n    for n in x {\n\
    \        if n % 2 == 0 {\n            even.append(n)\n        } else {\n     \
    \       result.append(n)\n        }\n    }\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            for e in evenDigits {\n                if e ==\
    \ n {\n                    break\n                }\n            }\n         \
    \   if result.contains(n) {\n                continue\n            }\n       \
    \     result.append(n)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var evenDigit = [Int]()\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            evenDigit.append()\n        }\n    }\n    for n in evenDigit\
    \ {\n        if result.contains(n) {\n            continue\n        }\n      \
    \  result.append(n)\n    }\n    return result", "    var result = [Int]()\n  \
    \  var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    result.sort()\n    return\
    \ result", "    var result = [Int]()\n    for n in x {\n        if n % 2 == 0\
    \ {\n            result.append(n)\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var index = 0\n    for n in x {\n  \
    \      if n % 2 == 0 {\n            result[index] = n\n            index += 1\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    for x in x {\n        if x.isMultiple(2) == false {\n            result.append(x)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var index\
    \ = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index] =\
    \ n\n            index += 1\n        }\n    }\n    return result.sorted()", " \
    \   var result = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n        \
    \    result.append(n)\n        }\n    }\n    result.sort()\n    return result",
  "    var result = [Int]()\n    var evenDigit = [Int]()\n    for element in x {\n\
    \        if element % 2 == 0 {\n            evenDigit.append(element)\n      \
    \  } else {\n            result.append(element)\n        }\n    }\n    for element\
    \ in evenDigit {\n        result.remove(at: result.index(of: element))\n    }\n\
    \    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            for d in evenDigits {\n                if d ==\
    \ n {\n                    break\n                }\n            }\n         \
    \   if !result.contains(d) {\n                result.append(n)\n            }\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for x in\
    \ x {\n        if x % 2 == 0 {\n            result.append(x)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    var i = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            result.append(element)\n\
    \        }\n    }\n    for element in result {\n        if element % 2 != 0 {\n\
    \            result.removeLast()\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var index = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            result[index] = element\n            index += 1\n  \
    \      }\n    }\n    return result", "    var result = [Int]()\n    var last =\
    \ 0\n    for n in x {\n        if n % 2 == 0 {\n            last = last * 10 +\
    \ n\n        } else {\n            if last > 0 {\n                result.append(last)\n\
    \            }\n            last = n\n        }\n    }\n    if last > 0 {\n  \
    \      result.append(last)\n    }\n    return result", "    var result = [Int]()\n\
    \    var evenDigit = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n    \
    \        evenDigit.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in evenDigit {\n        result.remove(n)\n    }\n\
    \    return result", "    var result = [Int]()\n    var even = [Int]()\n    var\
    \ odd  = [Int]()\n    \n    for n in x {\n        if n % 2 == 0 {\n          \
    \  even.append(n)\n        } else {\n            odd.append(n)\n        }\n  \
    \  }\n    \n    for n in even {\n        if result.contains(n) {\n           \
    \ continue\n        }\n        result.append(n)\n    }\n    \n    for n in odd\
    \ {\n        if result.contains(n) {\n            continue\n        }\n      \
    \  result.append(n)\n    }\n    \n    return result", "    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    var lastDigit: Int = 0\n    for n in x {\n        if n % 10 == 0 {\n    \
    \        lastDigit = n % 10\n        } else {\n            if lastDigit % 2 ==\
    \ 0 {\n                result.append(n)\n            }\n            lastDigit\
    \ = 0\n        }\n    }\n    return result", "    var result = [Int]()\n    var\
    \ index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    result.sortInPlace()\n  \
    \  return result", "    var result = [Int]()\n    var index = 0\n    for element\
    \ in x {\n        if element % 2 == 0 {\n            result[index] = element\n\
    \            index += 1\n        }\n    }\n    result.sort()\n    return result",
  "    var result = [Int]()\n    for element in x {\n        if element % 2 == 0 {\n\
    \            result.append(element)\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var evenDigit = [Int]()\n    var i = 0\n    for\
    \ element in x {\n        if element % 2 == 0 {\n            evenDigit.append(element)\n\
    \        } else {\n            result.append(element)\n        }\n    }\n    for\
    \ element in evenDigit {\n        result.remove(at: i)\n        i += 1\n    }\n\
    \    return result", "    var result = [Int]()\n    var even = [Int]()\n    var\
    \ odd = [Int]()\n    var index = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            even.append(element)\n        } else {\n           \
    \ odd.append(element)\n        }\n    }\n    for element in even {\n        if\
    \ result.contains(element) {\n            continue\n        }\n        result.append(element)\n\
    \    }\n    for element in odd {\n        if result.contains(element) {\n    \
    \        continue\n        }\n        result.append(element)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var evenDigit = [Int]()\n    var evenDigitCount\
    \ = 0\n    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n\
    \            evenDigit.append(element)\n            evenDigitCount += 1\n    \
    \    }\n    }\n    for element in evenDigit {\n        if evenDigitCount > 0 {\n\
    \            if element % 2 == 0 {\n                result += [element]\n    \
    \            evenDigitCount -= 1\n            }\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    for n in x {\n        if n % 2 == 0\
    \ {\n            result.append(n)\n        }\n    }\n    result.sort()\n    return\
    \ result", "    var result = [Int]()\n    for n in x {\n        if n % 2 == 0\
    \ {\n            result.append(n)\n        }\n    }\n    result.sort()\n    return\
    \ result", "    var result = [Int]()\n    for n in x {\n        if n % 2 == 0\
    \ {\n            result.append(n)\n        }\n    }\n    result.sort()\n    return\
    \ result", "    var result = [Int]()\n    var lastEvenDigit = 0\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            lastEvenDigit = n\n        } else\
    \ {\n            if lastEvenDigit > 0 {\n                result.insert(lastEvenDigit,\
    \ lastEvenDigit)\n            }\n            lastEvenDigit = 0\n        }\n  \
    \  }\n    if lastEvenDigit > 0 {\n        result.insert(lastEvenDigit, lastEvenDigit)\n\
    \    }\n    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    for element in x {\n        if element % 2 == 0 {\n            evenDigits.append(element)\n\
    \        }\n    }\n    for element in evenDigits {\n        if !contains(result,\
    \ element) {\n            result.append(element)\n        }\n    }\n    return\
    \ result", "    var result = [Int]()\n    var lastEvenDigit = 0\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            lastEvenDigit = n % 10\n        }\
    \ else {\n            if lastEvenDigit == 0 {\n                result.append(n)\n\
    \            }\n            lastEvenDigit = 0\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var evenDigit = 0\n    for n in x {\n        if n\
    \ % 2 == 0 {\n            evenDigit += 1\n        } else {\n            if evenDigit\
    \ > 0 {\n                result.append(n)\n                evenDigit = 0\n   \
    \         }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        } else {\n            for e in evenDigits\
    \ {\n                if e == n {\n                    result.append(n)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result", "    var result = [Int]()\n    var even = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            even.append(n)\n        } else\
    \ {\n            result.append(n)\n        }\n    }\n    for n in even {\n   \
    \     result.remove(n)\n    }\n    return result", "    var result = [Int]()\n\
    \    var i = 0\n    for num in x {\n        if num % 2 == 0 {\n            result.append(num)\n\
    \        }\n    }\n    for num in x {\n        if num % 2 != 0 {\n           \
    \ result.append(num)\n        }\n    }\n    return result", "    var result =\
    \ [Int]()\n    var evenDigitCount = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            evenDigitCount += 1\n        }\n    }\n    for element\
    \ in x {\n        if element % 2 != 0 && evenDigitCount > 0 {\n            result.append(element)\n\
    \            evenDigitCount -= 1\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var i = 0\n    for element in x {\n        if element\
    \ % 2 == 0 {\n            result.append(element)\n        }\n    }\n    for element\
    \ in result {\n        if element % 2 == 0 {\n            result.removeLast()\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n\
    \    result.sort()\n    return result", "    var result = [Int]()\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n\
    \    result.sort()\n    return result", "    var result = [Int]()\n    var even\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            if even.contains(n) == false {\n              \
    \  result.append(n)\n            }\n        }\n    }\n    return result", "  \
    \  var result = [Int]()\n    var evenDigits = [Int]()\n    for n in x {\n    \
    \    if n % 2 == 0 {\n            evenDigits.append(n)\n        } else {\n   \
    \         for e in evenDigits {\n                if e == n {\n               \
    \     result.append(n)\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result", "    var result = [Int]()\n   \
    \ var index = 0\n    for n in x {\n        if n % 2 == 0 {\n            result[index]\
    \ = n\n            index += 1\n        }\n    }\n    result.sort()\n    return\
    \ result", "    var result = [Int]()\n    var evenDigits = [Int]()\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n        }\
    \ else {\n            if evenDigits.contains(n) {\n                continue\n\
    \            } else {\n                result.append(n)\n            }\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for n in x {\n\
    \        if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n   \
    \ result.sort()\n    return result", "    var result = [Int]()\n    var evenDigit\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            evenDigit.append(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    for n in\
    \ evenDigit {\n        result.remove(n)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var evenDigitCount = 0\n    for n in x {\n        if n % 2 ==\
    \ 0 {\n            evenDigitCount++\n        }\n    }\n    for n in x {\n    \
    \    if evenDigitCount > 0 {\n            if n % 2 == 0 {\n                evenDigitCount--\n\
    \            } else {\n                result.append(n)\n            }\n     \
    \   } else {\n            result.append(n)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var evenDigit = [Int]()\n    for n in x {\n     \
    \   if n % 2 == 0 {\n            evenDigit.append(n)\n        } else {\n     \
    \       for d in evenDigit {\n                if d == n {\n                  \
    \  result.append(n)\n                    break\n                }\n          \
    \  }\n        }\n    }\n    return result", "    var result = [Int]()\n    for\
    \ n in x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            if !contains(evenDigits, n) {\n               \
    \ result.append(n)\n            }\n        }\n    }\n    return result", "   \
    \ var result = [Int]()\n    var last: Int = 0\n    for x in x {\n        if x\
    \ % 2 == 0 {\n            last = x\n        } else {\n            if last != 0\
    \ {\n                result.append(last)\n            }\n            last = 0\n\
    \        }\n    }\n    if last != 0 {\n        result.append(last)\n    }\n  \
    \  return result", "    var result = [Int]()\n    var last: Int = 0\n    for n\
    \ in x {\n        if n % 2 == 0 {\n            last = last * 10 + n\n        }\
    \ else {\n            if last != 0 {\n                result.append(last)\n  \
    \          }\n            last = n\n        }\n    }\n    if last != 0 {\n   \
    \     result.append(last)\n    }\n    return result", "    var result = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n   \
    \     }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    var evenDigits = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n   \
    \         evenDigits.append(n)\n        }\n    }\n    for n in evenDigits {\n\
    \        if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result", "    var result = [Int]()\n    var last: Int = 0\n\
    \    for x in x {\n        if x % 2 == 0 {\n            last = x\n        } else\
    \ {\n            if last != 0 {\n                result.insert(last, at: 0)\n\
    \            }\n            last = x\n        }\n    }\n    if last != 0 {\n \
    \       result.insert(last, at: 0)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n\
    \            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var evenDigitCount = 0\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            evenDigitCount += 1\n        }\n \
    \   }\n    for n in x {\n        if evenDigitCount > 0 && n % 2 == 0 {\n     \
    \       continue\n        }\n        if evenDigitCount == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n\
    \    result.sort()\n    return result", "    var result = [Int]()\n    var even\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    for n in\
    \ even {\n        result.remove(n)\n    }\n    return result", "    var result\
    \ = [Int]()\n    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n\
    \            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    result.sort(<)\n    for n in even {\n        result.remove(n)\n\
    \    }\n    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        }\n    }\n    for n in evenDigits {\n        if result.contains(n) {\n\
    \            continue\n        }\n        result.append(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var index = 0\n    for n in x {\n  \
    \      if n % 2 == 0 {\n            result[index] = n\n            index += 1\n\
    \        }\n    }\n    result.sort()\n    return result", "    var result = [Int]()\n\
    \    var lastEvenDigit = 0\n    for n in x {\n        if n % 2 == 0 {\n      \
    \      lastEvenDigit = n\n        } else {\n            if lastEvenDigit > 0 {\n\
    \                result.insert(lastEvenDigit, lastEvenDigit)\n            }\n\
    \            lastEvenDigit = 0\n        }\n    }\n    if lastEvenDigit > 0 {\n\
    \        result.insert(lastEvenDigit, lastEvenDigit)\n    }\n    return result",
  "    var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            even.append(n)\n        } else {\n            if even.contains(n)\
    \ == false {\n                result.append(n)\n            }\n        }\n   \
    \ }\n    return result", "    var result = [Int]()\n    var evenDigits = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            evenDigits.append(n)\n\
    \        } else {\n            if evenDigits.contains(n) == false {\n        \
    \        result.append(n)\n            }\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var evenDigits = [Int]()\n    for n in x {\n    \
    \    if n % 2 == 0 {\n            evenDigits.append(n)\n        } else {\n   \
    \         if !contains(result, n) {\n                result.append(n)\n      \
    \      }\n        }\n    }\n    return evenDigits.sorted()", "    var result =\
    \ [Int]()\n    var evenDigit = 0\n    for element in x {\n        if element %\
    \ 2 == 0 {\n            evenDigit += 1\n        }\n    }\n    for element in x\
    \ {\n        if element % 2 != 0 && evenDigit == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var even\
    \ = [Int]()\n    var odd = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n\
    \            even.append(n)\n        } else {\n            odd.append(n)\n   \
    \     }\n    }\n    for n in even {\n        if result.contains(n) {\n       \
    \     continue\n        }\n        result.append(n)\n    }\n    for n in odd {\n\
    \        if result.contains(n) {\n            continue\n        }\n        result.append(n)\n\
    \    }\n    return result", "    var result = [Int]()\n    var even = [Int]()\n\
    \    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n     \
    \   } else {\n            result.append(n)\n        }\n    }\n    for n in even\
    \ {\n        result.remove(n)\n    }\n    return result", "    var result = [Int]()\n\
    \    var even = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n         \
    \   even.append(n)\n        } else {\n            if even.contains(n) {\n    \
    \            continue\n            } else {\n                result.append(n)\n\
    \            }\n        }\n    }\n    return result", "    var result = [Int]()\n\
    \    var i = 0\n    for element in x {\n        if element % 2 == 0 {\n      \
    \      result.append(element)\n        }\n    }\n    for element in result {\n\
    \        if element % 2 != 0 {\n            result.removeLast()\n        }\n \
    \   }\n    return result", "    var result = [Int]()\n    var even = [Int]()\n\
    \    var odd = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n          \
    \  even.append(n)\n        } else {\n            odd.append(n)\n        }\n  \
    \  }\n    for n in even {\n        if result.contains(n) {\n            continue\n\
    \        }\n        result.append(n)\n    }\n    for n in odd {\n        if result.contains(n)\
    \ {\n            continue\n        }\n        result.append(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var evenDigit = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigit += 1\n        }\n        if evenDigit\
    \ == 0 {\n            result.append(n)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var lastDigit: Int = 0\n    for element in x {\n\
    \        if element % 2 == 0 {\n            lastDigit = element\n        } else\
    \ {\n            if lastDigit != 0 {\n                result.insert(lastDigit)\n\
    \            }\n            lastDigit = 0\n        }\n    }\n    if lastDigit\
    \ != 0 {\n        result.insert(lastDigit)\n    }\n    return result", "    var\
    \ result = [Int]()\n    for element in x {\n        if element % 2 == 0 {\n  \
    \          continue\n        }\n        for index in 0..<result.count {\n    \
    \        if element == result[index] {\n                continue\n           \
    \ }\n            if element < result[index] {\n                result.append(element)\n\
    \                break\n            }\n        }\n    }\n    return result", " \
    \   var result = [Int]()\n    var even = [Int]()\n    for n in x {\n        if\
    \ n % 2 == 0 {\n            even.append(n)\n        } else {\n            result.append(n)\n\
    \        }\n    }\n    for n in even {\n        result.remove(n)\n    }\n    return\
    \ result", "    var result = [Int]()\n    var evenDigit = 0\n    for n in x {\n\
    \        if n % 2 == 0 {\n            evenDigit += 1\n        }\n        if evenDigit\
    \ == 0 {\n            result.append(n)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var index = 0\n    for n in x {\n        if n % 2\
    \ == 0 {\n            result[index] = n\n            index += 1\n        }\n \
    \   }\n    return result.sorted()", "    var result = [Int]()\n    var evenDigit\
    \ = 0\n    for element in x {\n        if element % 2 == 0 {\n            evenDigit\
    \ += 1\n        }\n        if evenDigit == 0 {\n            result.append(element)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var even\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            even.append(n)\n\
    \        } else {\n            result.append(n)\n        }\n    }\n    for n in\
    \ even {\n        result.remove(n)\n    }\n    return result", "    var result\
    \ = [Int]()\n    for n in x {\n        if n % 2 == 0 {\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for n in\
    \ x {\n        if n % 2 == 0 {\n            result.append(n)\n        }\n    }\n\
    \    result.sort()\n    return result"]
stop_tokens:
- "\n}"
