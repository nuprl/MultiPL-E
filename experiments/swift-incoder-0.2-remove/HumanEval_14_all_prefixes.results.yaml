language: swift
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix[currentPrefix.count-1] + character\n        } else {\n     \
    \       prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpugy68g2f.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpugy68g2f.swift:8:68:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                                                   ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ error: no exact matches in call to subscript \n            currentPrefix = currentPrefix[currentPrefix.count-1]\
    \ + character\n                                         ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ note: candidate has partially matching parameter list (Range<String.Index>)\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:8:42: note:\
    \ candidate has partially matching parameter list ((UnboundedRange_) -> ())\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:11:29: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            currentPrefix\
    \ = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ currentPrefix = currentPrefix.dropLast()\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpycrdbj8c.swift:8:43: error: no 'dropLast' candidates produce the\
    \ expected contextual result type 'String'\n            currentPrefix = currentPrefix.dropLast()\n\
    \                                          ^\nSwift.Sequence:5:40: note: 'dropLast'\
    \ produces '[String.Element]' (aka 'Array<Character>'), not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func dropLast(_ k: Int\
    \ = 1) -> [Self.Element]\n                                       ^\nSwift.Collection:4:40:\
    \ note: 'dropLast' produces 'String.SubSequence' (aka 'Substring'), not the expected\
    \ contextual result type 'String'\n    @inlinable public __consuming func dropLast(_\
    \ k: Int = 1) -> Self.SubSequence\n                                       ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.value > 0 {\n            currentPrefix = String(currentPrefix)\
    \ + String(c.value)\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = \"\"\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp6lfv9rgx/tmp6lfv9rgx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b52c0642c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b52c0339b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b52c0339988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52c03387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6lfv9rgx                        0x0000557db4ec895e <unavailable> + 6494

    5    libc.so.6                          0x00002b52c082e460 __libc_start_main +
    245

    6    tmp6lfv9rgx                        0x0000557db4ec85a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix[currentPrefix.count-1] + character\n        } else {\n     \
    \       prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpugy68g2f.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpugy68g2f.swift:8:68:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                                                   ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ error: no exact matches in call to subscript \n            currentPrefix = currentPrefix[currentPrefix.count-1]\
    \ + character\n                                         ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ note: candidate has partially matching parameter list (Range<String.Index>)\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:8:42: note:\
    \ candidate has partially matching parameter list ((UnboundedRange_) -> ())\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:11:29: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            currentPrefix\
    \ = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            continue\n        }\n    \
    \    currentPrefix = character\n        prefixes.append(currentPrefix)\n    }\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsokvxq8k.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpsokvxq8k.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpsokvxq8k.swift:10:25: error: cannot assign value\
    \ of type 'Character' to type 'String'\n        currentPrefix = character\n  \
    \                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2oav9n0f.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmp2oav9n0f.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix[currentPrefix.count-1] + character\n        } else {\n     \
    \       prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpugy68g2f.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpugy68g2f.swift:8:68:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                                                   ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ error: no exact matches in call to subscript \n            currentPrefix = currentPrefix[currentPrefix.count-1]\
    \ + character\n                                         ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ note: candidate has partially matching parameter list (Range<String.Index>)\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:8:42: note:\
    \ candidate has partially matching parameter list ((UnboundedRange_) -> ())\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:11:29: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            currentPrefix\
    \ = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            continue\n        }\n    \
    \    currentPrefix = character\n        prefixes.append(currentPrefix)\n    }\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsokvxq8k.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpsokvxq8k.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpsokvxq8k.swift:10:25: error: cannot assign value\
    \ of type 'Character' to type 'String'\n        currentPrefix = character\n  \
    \                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex + 1)\n\
    \        } else {\n            prefixes.append(currentPrefix)\n            currentPrefix\
    \ = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi_jmp5jt.swift:8:74: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n                                                                     \
    \    ^\n/tmp/tmpi_jmp5jt.swift:8:43: error: value of type 'String' has no member\
    \ 'substringToIndex'\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n                            ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpwvxptr8r/tmpwvxptr8r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1244d7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1244a71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1244a71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1244a707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvxptr8r                        0x000055dbb59ef8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002b1244f66460 __libc_start_main +
    245

    6    tmpwvxptr8r                        0x000055dbb59ef339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = character\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpne0308fj.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpne0308fj.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpne0308fj.swift:10:29: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for ch in string {\n        if ch ==\
    \ prefix {\n            prefixes.append(prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += ch\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4pj3h61x.swift:7:15: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if ch == prefix {\n  \
    \         ~~ ^  ~~~~~~\n/tmp/tmp4pj3h61x.swift:7:15: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if ch == prefix {\n              ^\n/tmp/tmp4pj3h61x.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += ch\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string {\n        current +=\
    \ String(c)\n        prefixes.append(current)\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = c\n        }\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnecuazuv.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmpnecuazuv.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmpnecuazuv.swift:10:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = c\n                            ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpknee_vqi.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmpknee_vqi.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmpknee_vqi.swift:10:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = c\n                            ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c.isLetter\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += String(c)\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpb10x_tqx/tmpb10x_tqx.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad3d036cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad3d0063b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad3d0063988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3d00627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb10x_tqx                        0x00005631a6eba6de <unavailable> + 5854

    5    libc.so.6                          0x00002ad3d0558460 __libc_start_main +
    245

    6    tmpb10x_tqx                        0x00005631a6eba329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == \".\" {\n            prefixes.append(currentPrefix)\n \
    \           currentPrefix = \"\"\n        } else {\n            currentPrefix\
    \ += String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpbw7rg4ud/tmpbw7rg4ud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b163a1cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1639ec4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1639ec4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1639ec37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbw7rg4ud                        0x000055e3bf8cc77e <unavailable> + 6014

    5    libc.so.6                          0x00002b163a3b9460 __libc_start_main +
    245

    6    tmpbw7rg4ud                        0x000055e3bf8cc3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ currentPrefix == \"\" {\n            currentPrefix = c\n        } else {\n \
    \           if c == currentPrefix {\n                prefixes.append(currentPrefix)\n\
    \                currentPrefix = \"\"\n            } else {\n                currentPrefix\
    \ = \"\"\n            }\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnc5oem09.swift:8:29: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            currentPrefix = c\n                          \
    \  ^\n/tmp/tmpnc5oem09.swift:10:18: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n            if c == currentPrefix\
    \ {\n               ~ ^  ~~~~~~~~~~~~~\n/tmp/tmpnc5oem09.swift:10:18: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n            if c == currentPrefix {\n                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = character\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnvbp3cxd.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpnvbp3cxd.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpnvbp3cxd.swift:10:29: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for ch in string {\n        if ch ==\
    \ prefix {\n            prefixes.append(prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += ch\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4pj3h61x.swift:7:15: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if ch == prefix {\n  \
    \         ~~ ^  ~~~~~~\n/tmp/tmp4pj3h61x.swift:7:15: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if ch == prefix {\n              ^\n/tmp/tmp4pj3h61x.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += ch\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.unicodeScalars {\n \
    \       current += String(c)\n        prefixes.append(current)\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = String(character)\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e01737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e0142e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e0142e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e0142e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e0142dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6e01561ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b6e0151a660 String.subscript.getter
    + 34

    7    tmp_oun_h7v                        0x0000561274eabc8d <unavailable> + 7309

    8    tmp_oun_h7v                        0x0000561274eab767 <unavailable> + 5991

    9    libc.so.6                          0x00002b6e01923460 __libc_start_main +
    245

    10   tmp_oun_h7v                        0x0000561274eab389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ += character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4yipvm09.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4yipvm09.swift:8:30:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix += character\n                             ^\n/tmp/tmp4yipvm09.swift:11:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptqq5ykhw.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmptqq5ykhw.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix\
    \ = currentPrefix + String(c)\n        prefixes.append(currentPrefix)\n    }\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = currentPrefix + c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmplhwyw37h.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmplhwyw37h.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmplhwyw37h.swift:10:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + c\n                             \
    \               ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = currentPrefix + c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmplhwyw37h.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmplhwyw37h.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmplhwyw37h.swift:10:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + c\n                             \
    \               ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        prefix +=\
    \ c\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3con6aon.swift:7:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == \".\" {\n            prefixes.append(currentPrefix)\n \
    \           currentPrefix = \"\"\n        } else {\n            currentPrefix\
    \ = currentPrefix + String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpp5xb8ibn/tmpp5xb8ibn.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3de0bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3dddb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3dddb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3dddb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp5xb8ibn                        0x00005620265b877e <unavailable> + 6014

    5    libc.so.6                          0x00002ac3de2a7460 __libc_start_main +
    245

    6    tmpp5xb8ibn                        0x00005620265b83c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptqq5ykhw.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmptqq5ykhw.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = character\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnvbp3cxd.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpnvbp3cxd.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpnvbp3cxd.swift:10:29: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    var currentString: String\
    \ = \"\"\n    for character in string {\n        currentPrefix = currentPrefix\
    \ + character\n        currentString = currentPrefix + string\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjhj_2oda.swift:8:41: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        currentPrefix = currentPrefix +\
    \ character\n                                        ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2oav9n0f.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmp2oav9n0f.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlikqtex.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpvlikqtex.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpvlikqtex.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpqass6wfn/tmpqass6wfn.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6eb041c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6ead38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6ead38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6ead377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqass6wfn                        0x0000561256ccb8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002ad6eb22d460 __libc_start_main +
    245

    6    tmpqass6wfn                        0x0000561256ccb339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix[currentPrefix.count-1] + character\n        } else {\n     \
    \       prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpugy68g2f.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpugy68g2f.swift:8:68:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                                                   ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ error: no exact matches in call to subscript \n            currentPrefix = currentPrefix[currentPrefix.count-1]\
    \ + character\n                                         ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ note: candidate has partially matching parameter list (Range<String.Index>)\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:8:42: note:\
    \ candidate has partially matching parameter list ((UnboundedRange_) -> ())\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:11:29: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            currentPrefix\
    \ = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ += character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4yipvm09.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4yipvm09.swift:8:30:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix += character\n                             ^\n/tmp/tmp4yipvm09.swift:11:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlikqtex.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpvlikqtex.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpvlikqtex.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix + character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnhre_m5o.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnhre_m5o.swift:8:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + character\n                     \
    \                       ^\n/tmp/tmpnhre_m5o.swift:11:29: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix + character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnhre_m5o.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnhre_m5o.swift:8:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + character\n                     \
    \                       ^\n/tmp/tmpnhre_m5o.swift:11:29: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string.unicodeScalars {\n  \
    \      if c.isASCII {\n            prefix += c.value\n        } else {\n     \
    \       prefixes.append(prefix)\n            prefix = \"\"\n        }\n    }\n\
    \    prefixes.append(prefix)\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgn64kowv.swift:8:25: error: cannot convert value of type 'UInt32'\
    \ to expected argument type 'String'\n            prefix += c.value\n        \
    \                ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpwvxptr8r/tmpwvxptr8r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1244d7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1244a71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1244a71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1244a707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvxptr8r                        0x000055dbb59ef8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002b1244f66460 __libc_start_main +
    245

    6    tmpwvxptr8r                        0x000055dbb59ef339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string {\n        current +=\
    \ String(c)\n        prefixes.append(current)\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n        } else {\n            prefix\
    \ = c\n        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmps4ubpxpt.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmps4ubpxpt.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmps4ubpxpt.swift:10:22:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  prefix = c\n                     ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.characters {\n     \
    \   current += String(c)\n        if current.characters.count > 1 {\n        \
    \    prefixes.append(current)\n            current = \"\"\n        }\n    }\n\
    \    if current.characters.count > 1 {\n        prefixes.append(current)\n   \
    \ }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8h72tq4b.swift:6:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp8h72tq4b.swift:8:20:\
    \ error: 'characters' is unavailable: Please use String directly\n        if current.characters.count\
    \ > 1 {\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8h72tq4b.swift:13:16: error: 'characters' is unavailable:\
    \ Please use String directly\n    if current.characters.count > 1 {\n        \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpwvxptr8r/tmpwvxptr8r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1244d7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1244a71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1244a71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1244a707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvxptr8r                        0x000055dbb59ef8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002b1244f66460 __libc_start_main +
    245

    6    tmpwvxptr8r                        0x000055dbb59ef339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.unicodeScalars {\n \
    \       current += String(c)\n        if current.hasPrefix(string) {\n       \
    \     prefixes.append(current)\n        }\n    }\n    return prefixes\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpvlogumtx/tmpvlogumtx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31aec73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31ae96ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31ae96a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31ae9697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvlogumtx                        0x000055e7bba66978 <unavailable> + 6520

    5    libc.so.6                          0x00002b31aee5f460 __libc_start_main +
    245

    6    tmpvlogumtx                        0x000055e7bba663d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix + character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnhre_m5o.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnhre_m5o.swift:8:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + character\n                     \
    \                       ^\n/tmp/tmpnhre_m5o.swift:11:29: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for ch in string {\n        if ch ==\
    \ prefix {\n            prefixes.append(prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += ch\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4pj3h61x.swift:7:15: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if ch == prefix {\n  \
    \         ~~ ^  ~~~~~~\n/tmp/tmp4pj3h61x.swift:7:15: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if ch == prefix {\n              ^\n/tmp/tmp4pj3h61x.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += ch\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        prefix +=\
    \ c\n        if prefix != \"\" {\n            prefixes.append(prefix)\n      \
    \      prefix = \"\"\n        }\n    }\n    if prefix != \"\" {\n        prefixes.append(prefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdixzz4_n.swift:7:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = character\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnvbp3cxd.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpnvbp3cxd.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpnvbp3cxd.swift:10:29: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.unicodeScalars {\n \
    \       current += String(c)\n        if current.hasPrefix(string) {\n       \
    \     prefixes.append(current)\n        }\n    }\n    return prefixes\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpvlogumtx/tmpvlogumtx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31aec73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31ae96ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31ae96a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31ae9697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvlogumtx                        0x000055e7bba66978 <unavailable> + 6520

    5    libc.so.6                          0x00002b31aee5f460 __libc_start_main +
    245

    6    tmpvlogumtx                        0x000055e7bba663d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == \".\" {\n            prefixes.append(currentPrefix)\n \
    \           currentPrefix = \"\"\n        } else {\n            currentPrefix\
    \ += String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpbw7rg4ud/tmpbw7rg4ud.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b163a1cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1639ec4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1639ec4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1639ec37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbw7rg4ud                        0x000055e3bf8cc77e <unavailable> + 6014

    5    libc.so.6                          0x00002b163a3b9460 __libc_start_main +
    245

    6    tmpbw7rg4ud                        0x000055e3bf8cc3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = character\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnvbp3cxd.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpnvbp3cxd.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpnvbp3cxd.swift:10:29: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = String(currentPrefix) + String(character)\n     \
    \   prefixes.append(currentPrefix)\n    }\n    return prefixes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = String(character) + currentPrefix\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp9n2txo5a/tmp9n2txo5a.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac45b216c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac45af0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac45af0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac45af0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9n2txo5a                        0x000055ec34be478e <unavailable> + 6030

    5    libc.so.6                          0x00002ac45b402460 __libc_start_main +
    245

    6    tmp9n2txo5a                        0x000055ec34be43d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpqass6wfn/tmpqass6wfn.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6eb041c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6ead38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6ead38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6ead377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqass6wfn                        0x0000561256ccb8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002ad6eb22d460 __libc_start_main +
    245

    6    tmpqass6wfn                        0x0000561256ccb339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ prefixes.append(currentPrefix)\n        }\n        currentPrefix = String(character)\
    \ + currentPrefix\n    }\n    prefixes.append(currentPrefix)\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpkxyplzf3/tmpkxyplzf3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aadb5cb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aadb59a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aadb59a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aadb59a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkxyplzf3                        0x000055e0d335e78e <unavailable> + 6030

    5    libc.so.6                          0x00002aadb5e9d460 __libc_start_main +
    245

    6    tmpkxyplzf3                        0x000055e0d335e3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ prefixes.append(currentPrefix)\n        } else {\n            currentPrefix\
    \ = String(character)\n            prefixes.append(currentPrefix)\n        }\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e01737c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e0142e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b6e0142e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b6e0142e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b6e0142dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b6e01561ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b6e0151a660 String.subscript.getter
    + 34

    7    tmp_oun_h7v                        0x0000561274eabc8d <unavailable> + 7309

    8    tmp_oun_h7v                        0x0000561274eab767 <unavailable> + 5991

    9    libc.so.6                          0x00002b6e01923460 __libc_start_main +
    245

    10   tmp_oun_h7v                        0x0000561274eab389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpwvxptr8r/tmpwvxptr8r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1244d7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1244a71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1244a71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1244a707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvxptr8r                        0x000055dbb59ef8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002b1244f66460 __libc_start_main +
    245

    6    tmpwvxptr8r                        0x000055dbb59ef339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string {\n        current +=\
    \ String(c)\n        prefixes.append(current)\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    var currentPrefixLength:\
    \ Int = 0\n    for character in string {\n        if character == currentPrefix[currentPrefixLength]\
    \ {\n            currentPrefixLength += 1\n        } else {\n            currentPrefix\
    \ = String(character) + currentPrefix\n            currentPrefixLength = 1\n \
    \       }\n        if currentPrefixLength == currentPrefix.count {\n         \
    \   prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp18cauiar.swift:8:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefixLength] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string.unicodeScalars {\n  \
    \      if c.isASCII {\n            prefix += String(c.value)\n        } else {\n\
    \            prefixes.append(prefix)\n            prefix = \"\"\n        }\n \
    \   }\n    prefixes.append(prefix)\n    return prefixes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpdfnge8_3/tmpdfnge8_3.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7313ecdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7313bc4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7313bc4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7313bc37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdfnge8_3                        0x0000556b3bce28ae <unavailable> + 6318

    5    libc.so.6                          0x00002b73140b9460 __libc_start_main +
    245

    6    tmpdfnge8_3                        0x0000556b3bce24f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.characters {\n     \
    \   current += String(c)\n        prefixes.append(current)\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzwapn1x5.swift:6:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for ch in string {\n        current\
    \ += String(ch)\n        prefixes.append(current)\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix[currentPrefix.count-1] + character\n        } else {\n     \
    \       prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpugy68g2f.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpugy68g2f.swift:8:68:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                                                   ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ error: no exact matches in call to subscript \n            currentPrefix = currentPrefix[currentPrefix.count-1]\
    \ + character\n                                         ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ note: candidate has partially matching parameter list (Range<String.Index>)\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:8:42: note:\
    \ candidate has partially matching parameter list ((UnboundedRange_) -> ())\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:11:29: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            currentPrefix\
    \ = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlikqtex.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpvlikqtex.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpvlikqtex.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptqq5ykhw.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmptqq5ykhw.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == \"-\" {\n            prefixes.append(currentPrefix)\n \
    \           currentPrefix = \"\"\n        } else {\n            currentPrefix\
    \ = currentPrefix + String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpb8898aub/tmpb8898aub.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ff6a7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ff6772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ff6772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ff67717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8898aub                        0x000055bce821b77e <unavailable> + 6014

    5    libc.so.6                          0x00002b0ff6c67460 __libc_start_main +
    245

    6    tmpb8898aub                        0x000055bce821b3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == \"-\" {\n            prefixes.append(currentPrefix)\n \
    \           currentPrefix = \"\"\n        } else {\n            currentPrefix\
    \ = currentPrefix + character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2a8q7byx.swift:11:45: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            currentPrefix = currentPrefix\
    \ + character\n                                            ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string.unicodeScalars\
    \ {\n        currentPrefix = currentPrefix + String(c.value)\n        if currentPrefix.length\
    \ > 0 {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8gajx74r.swift:8:26: error: value of type 'String' has no member\
    \ 'length'\n        if currentPrefix.length > 0 {\n           ~~~~~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix\
    \ = currentPrefix + c\n        prefixes.append(currentPrefix)\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxqa14boo.swift:7:41: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        currentPrefix = currentPrefix +\
    \ c\n                                        ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string.unicodeScalars\
    \ {\n        currentPrefix = currentPrefix + String(c.value)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpsakc22hs/tmpsakc22hs.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75ee8f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75ee5ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75ee5ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75ee5eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsakc22hs                        0x000055aa91699a98 <unavailable> + 6808

    5    libc.so.6                          0x00002b75eeae1460 __libc_start_main +
    245

    6    tmpsakc22hs                        0x000055aa916994f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == \".\" {\n            currentPrefix = \"\"\n        } else\
    \ {\n            currentPrefix += String(character)\n        }\n        if currentPrefix.characters.count\
    \ == 0 {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwj5bh6ua.swift:12:26: error: 'characters' is unavailable: Please\
    \ use String directly\n        if currentPrefix.characters.count == 0 {\n    \
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for ch in string {\n        if ch ==\
    \ prefix {\n            prefixes.append(prefix)\n            prefix = \"\"\n \
    \       } else {\n            prefix += ch\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4pj3h61x.swift:7:15: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if ch == prefix {\n  \
    \         ~~ ^  ~~~~~~\n/tmp/tmp4pj3h61x.swift:7:15: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if ch == prefix {\n              ^\n/tmp/tmp4pj3h61x.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += ch\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        prefix +=\
    \ c\n        prefixes.append(prefix)\n        prefix = \"\"\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdn7_e7_h.swift:7:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == '.'\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += String(c)\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9r8bmnts.swift:7:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = string\n    var last = \"\"\n    while current.hasPrefix(last)\
    \ {\n        current = current.dropFirst()\n        prefixes.append(last)\n  \
    \  }\n    prefixes.append(current)\n    return prefixes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjxfvd4hz.swift:8:27: error: no 'dropFirst' candidates produce the\
    \ expected contextual result type 'String'\n        current = current.dropFirst()\n\
    \                          ^\nSwift.Sequence:4:40: note: 'dropFirst' produces\
    \ 'DropFirstSequence<String>', not the expected contextual result type 'String'\n\
    \    @inlinable public __consuming func dropFirst(_ k: Int = 1) -> DropFirstSequence<Self>\n\
    \                                       ^\nSwift.Collection:3:40: note: 'dropFirst'\
    \ produces 'String.SubSequence' (aka 'Substring'), not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func dropFirst(_ k:\
    \ Int = 1) -> Self.SubSequence\n                                       ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpknee_vqi.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmpknee_vqi.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmpknee_vqi.swift:10:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = c\n                            ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpwvxptr8r/tmpwvxptr8r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1244d7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1244a71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1244a71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1244a707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvxptr8r                        0x000055dbb59ef8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002b1244f66460 __libc_start_main +
    245

    6    tmpwvxptr8r                        0x000055dbb59ef339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c == Character(\"_\") {\n            currentPrefix = \"\"\n  \
    \      } else {\n            currentPrefix += String(describing: c)\n        }\n\
    \        if currentPrefix.hasPrefix(string) {\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk9bo20b7.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Unicode.Scalar' and 'Character'\n        if c == Character(\"\
    _\") {\n           ~ ^  ~~~~~~~~~~~~~~\n/tmp/tmpk9bo20b7.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (Unicode.Scalar, Unicode.Scalar)\n        if c == Character(\"_\") {\n     \
    \        ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string.unicodeScalars {\n  \
    \      if c.value > 0 {\n            prefix += String(c.value)\n        } else\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\n\
    \    }\n    prefixes.append(prefix)\n    return prefixes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp15rj6kr2/tmp15rj6kr2.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4fe916c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4fe60db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4fe60d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4fe60c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp15rj6kr2                        0x000055641b7ad84e <unavailable> + 6222

    5    libc.so.6                          0x00002ae4feb02460 __libc_start_main +
    245

    6    tmp15rj6kr2                        0x000055641b7ad499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlikqtex.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpvlikqtex.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpvlikqtex.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptqq5ykhw.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmptqq5ykhw.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix[currentPrefix.count-1] + character\n        } else {\n     \
    \       prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpugy68g2f.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpugy68g2f.swift:8:68:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                                                   ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ error: no exact matches in call to subscript \n            currentPrefix = currentPrefix[currentPrefix.count-1]\
    \ + character\n                                         ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ note: candidate has partially matching parameter list (Range<String.Index>)\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:8:42: note:\
    \ candidate has partially matching parameter list ((UnboundedRange_) -> ())\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:11:29: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            currentPrefix\
    \ = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix\
    \ = currentPrefix + c\n        if currentPrefix.hasPrefix(string) {\n        \
    \    prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl03t00i2.swift:7:41: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        currentPrefix = currentPrefix +\
    \ c\n                                        ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.unicodeScalars {\n \
    \       current = c.value\n        if current != \"\" {\n            prefixes.append(current)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpqjqa87ou.swift:7:21: error: cannot assign value of type 'UInt32'\
    \ to type 'String'\n        current = c.value\n                  ~~^~~~~\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        prefix +=\
    \ c\n        prefixes.append(prefix)\n        prefix = \"\"\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpdn7_e7_h.swift:7:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex + 1)\n\
    \        } else {\n            prefixes.append(currentPrefix)\n            currentPrefix\
    \ = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi_jmp5jt.swift:8:74: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n                                                                     \
    \    ^\n/tmp/tmpi_jmp5jt.swift:8:43: error: value of type 'String' has no member\
    \ 'substringToIndex'\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n                            ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        prefix +=\
    \ c\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3con6aon.swift:7:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string.unicodeScalars {\n  \
    \      if c.value > 0xFFFF {\n            prefixes.append(prefix)\n          \
    \  prefix = \"\"\n        } else {\n            prefix += String(c.value)\n  \
    \      }\n    }\n    prefixes.append(prefix)\n    return prefixes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpyief1zdr/tmpyief1zdr.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a70f9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a70c92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a70c92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a70c917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyief1zdr                        0x000056384025f84e <unavailable> + 6222

    5    libc.so.6                          0x00002b3a71187460 __libc_start_main +
    245

    6    tmpyief1zdr                        0x000056384025f499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ currentPrefix == \"\" {\n            currentPrefix = c\n        } else {\n \
    \           if c == currentPrefix {\n                currentPrefix = \"\"\n  \
    \          } else {\n                prefixes.append(currentPrefix)\n        \
    \        currentPrefix = c\n            }\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpclxu9_4m.swift:8:29: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            currentPrefix = c\n                          \
    \  ^\n/tmp/tmpclxu9_4m.swift:10:18: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n            if c == currentPrefix\
    \ {\n               ~ ^  ~~~~~~~~~~~~~\n/tmp/tmpclxu9_4m.swift:10:18: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n            if c == currentPrefix {\n                 ^\n\
    /tmp/tmpclxu9_4m.swift:14:33: error: cannot assign value of type 'Character' to\
    \ type 'String'\n                currentPrefix = c\n                         \
    \       ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.characters {\n     \
    \   current += String(c)\n        prefixes.append(current)\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzwapn1x5.swift:6:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptqq5ykhw.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmptqq5ykhw.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ currentPrefix = currentPrefix.stringByAppendingString(String(character))\n \
    \       } else {\n            prefixes.append(currentPrefix)\n            currentPrefix\
    \ = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9uqmy6x_.swift:8:43: error: value of type 'String' has no member\
    \ 'stringByAppendingString'\n            currentPrefix = currentPrefix.stringByAppendingString(String(character))\n\
    \                            ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            continue\n        }\n    \
    \    currentPrefix = character\n        prefixes.append(currentPrefix)\n    }\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsokvxq8k.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpsokvxq8k.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpsokvxq8k.swift:10:25: error: cannot assign value\
    \ of type 'Character' to type 'String'\n        currentPrefix = character\n  \
    \                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string.characters {\n      \
    \  if c == \" \" {\n            prefixes.append(prefix)\n            prefix =\
    \ \"\"\n        } else {\n            prefix += String(c)\n        }\n    }\n\
    \    prefixes.append(prefix)\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbsan1yke.swift:6:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix\
    \ = currentPrefix + c\n        if currentPrefix.hasPrefix(string) {\n        \
    \    prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl03t00i2.swift:7:41: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        currentPrefix = currentPrefix +\
    \ c\n                                        ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string {\n        current +=\
    \ c\n        if current.isEmpty {\n            prefixes.append(current)\n    \
    \        current = \"\"\n        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp764mbciy.swift:7:20: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        current += c\n                 \
    \  ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = String(currentPrefix) + String(character)\n     \
    \   if currentPrefix.hasPrefix(string) {\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp90r3iyy6/tmp90r3iyy6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab72549bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab725192b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab725192988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7251917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90r3iyy6                        0x0000560dc656e9d8 <unavailable> + 6616

    5    libc.so.6                          0x00002ab725687460 __libc_start_main +
    245

    6    tmp90r3iyy6                        0x0000560dc656e439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpwvxptr8r/tmpwvxptr8r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1244d7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1244a71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1244a71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1244a707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvxptr8r                        0x000055dbb59ef8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002b1244f66460 __libc_start_main +
    245

    6    tmpwvxptr8r                        0x000055dbb59ef339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ currentPrefix = currentPrefix[currentPrefix.startIndex..<currentPrefix.endIndex]\n\
    \        } else {\n            prefixes.append(currentPrefix)\n            currentPrefix\
    \ = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0geios8n.swift:8:42: error: cannot assign value of type 'Substring'\
    \ to type 'String'\n            currentPrefix = currentPrefix[currentPrefix.startIndex..<currentPrefix.endIndex]\n\
    \                            ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                            String(                                         \
    \                )\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix + character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnhre_m5o.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnhre_m5o.swift:8:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + character\n                     \
    \                       ^\n/tmp/tmpnhre_m5o.swift:11:29: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex + 1)\n\
    \        } else {\n            prefixes.append(currentPrefix)\n            currentPrefix\
    \ = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi_jmp5jt.swift:8:74: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n                                                                     \
    \    ^\n/tmp/tmpi_jmp5jt.swift:8:43: error: value of type 'String' has no member\
    \ 'substringToIndex'\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n                            ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c != currentPrefix {\n            prefixes.append(currentPrefix)\n         \
    \   currentPrefix = \"\"\n        }\n        currentPrefix += String(c)\n    }\n\
    \    prefixes.append(currentPrefix)\n    return prefixes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpq0dhqgv2.swift:7:17: error: cannot convert value of type 'String'\
    \ to expected argument type 'Character'\n        if c != currentPrefix {\n   \
    \             ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix\
    \ = currentPrefix + c\n        if currentPrefix.hasPrefix(string) {\n        \
    \    prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl03t00i2.swift:7:41: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        currentPrefix = currentPrefix +\
    \ c\n                                        ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.unicodeScalars {\n \
    \       current += String(c.value)\n        if current.count > 0 {\n         \
    \   prefixes.append(current)\n            current = \"\"\n        }\n    }\n \
    \   if current.count > 0 {\n        prefixes.append(current)\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpinnrmfcb/tmpinnrmfcb.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d7b7e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d7b4dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d7b4db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d7b4da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpinnrmfcb                        0x00005584012d4a88 <unavailable> + 6792

    5    libc.so.6                          0x00002b1d7b9d0460 __libc_start_main +
    245

    6    tmpinnrmfcb                        0x00005584012d44e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = currentPrefix + c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmplhwyw37h.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmplhwyw37h.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmplhwyw37h.swift:10:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + c\n                             \
    \               ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        prefix +=\
    \ c\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3con6aon.swift:7:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = currentPrefix + c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmplhwyw37h.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmplhwyw37h.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmplhwyw37h.swift:10:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + c\n                             \
    \               ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpknee_vqi.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmpknee_vqi.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmpknee_vqi.swift:10:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = c\n                            ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.unicodeScalars {\n \
    \       current += String(c)\n        if current.hasPrefix(string) {\n       \
    \     prefixes.append(current)\n        }\n    }\n    return prefixes\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpvlogumtx/tmpvlogumtx.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31aec73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31ae96ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31ae96a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31ae9697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvlogumtx                        0x000055e7bba66978 <unavailable> + 6520

    5    libc.so.6                          0x00002b31aee5f460 __libc_start_main +
    245

    6    tmpvlogumtx                        0x000055e7bba663d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.unicodeScalars {\n \
    \       if c == Character(\"\\u{0020}\") {\n            current = \"\"\n     \
    \   } else {\n            current += String(UnicodeScalar(c))\n        }\n   \
    \     if current.count > 0 {\n            prefixes.append(current)\n        }\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp706ur8ho.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Unicode.Scalar' and 'Character'\n        if c == Character(\"\
    \\u{0020}\") {\n           ~ ^  ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp706ur8ho.swift:7:14:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (Unicode.Scalar, Unicode.Scalar)\n        if c == Character(\"\
    \\u{0020}\") {\n             ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            continue\n        }\n    \
    \    currentPrefix = character\n        prefixes.append(currentPrefix)\n    }\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsokvxq8k.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpsokvxq8k.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpsokvxq8k.swift:10:25: error: cannot assign value\
    \ of type 'Character' to type 'String'\n        currentPrefix = character\n  \
    \                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex + 1)\n\
    \        } else {\n            prefixes.append(currentPrefix)\n            currentPrefix\
    \ = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi_jmp5jt.swift:8:74: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n                                                                     \
    \    ^\n/tmp/tmpi_jmp5jt.swift:8:43: error: value of type 'String' has no member\
    \ 'substringToIndex'\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n                            ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.unicodeScalars {\n \
    \       current = String(unicodeScalars: [c])\n        if current.hasPrefix(string)\
    \ {\n            prefixes.append(current)\n        }\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpphqgbdkh.swift:7:19: error: no exact matches in call to initializer\
    \ \n        current = String(unicodeScalars: [c])\n                  ^\n/tmp/tmpphqgbdkh.swift:7:19:\
    \ note: found candidate with type '([Character]) -> String'\n        current =\
    \ String(unicodeScalars: [c])\n                  ^\nSwift.String:2:12: note: incorrect\
    \ labels for candidate (have: '(unicodeScalars:)', expected: '(describing:)')\n\
    \    public init<Subject>(describing instance: Subject)\n           ^\nSwift.String:3:23:\
    \ note: incorrect labels for candidate (have: '(unicodeScalars:)', expected: '(describing:)')\n\
    \    @inlinable public init<Subject>(describing instance: Subject) where Subject\
    \ : CustomStringConvertible\n                      ^\nSwift.String:6:12: note:\
    \ incorrect labels for candidate (have: '(unicodeScalars:)', expected: '(reflecting:)')\n\
    \    public init<Subject>(reflecting subject: Subject)\n           ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string.characters {\n\
    \        currentPrefix = String(currentPrefix) + String(c)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpeox7kyvy.swift:6:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix + character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnhre_m5o.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnhre_m5o.swift:8:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + character\n                     \
    \                       ^\n/tmp/tmpnhre_m5o.swift:11:29: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.characters {\n     \
    \   current += String(c)\n        if current.characters.count > 1 {\n        \
    \    prefixes.append(current)\n            current = \"\"\n        }\n    }\n\
    \    prefixes.append(current)\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpk8digqo3.swift:6:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in string.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpk8digqo3.swift:8:20:\
    \ error: 'characters' is unavailable: Please use String directly\n        if current.characters.count\
    \ > 1 {\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptqq5ykhw.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmptqq5ykhw.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlikqtex.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpvlikqtex.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpvlikqtex.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = character\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnvbp3cxd.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpnvbp3cxd.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpnvbp3cxd.swift:10:29: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n        } else {\n            prefix\
    \ = c\n        }\n    }\n    prefixes.append(prefix)\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmppz8cpluw.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmppz8cpluw.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmppz8cpluw.swift:10:22:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  prefix = c\n                     ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlikqtex.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpvlikqtex.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpvlikqtex.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmptqq5ykhw.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmptqq5ykhw.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix[currentPrefix.count-1] + character\n        } else {\n     \
    \       prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpugy68g2f.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpugy68g2f.swift:8:68:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                                                   ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ error: no exact matches in call to subscript \n            currentPrefix = currentPrefix[currentPrefix.count-1]\
    \ + character\n                                         ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ note: candidate has partially matching parameter list (Range<String.Index>)\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:8:42: note:\
    \ candidate has partially matching parameter list ((UnboundedRange_) -> ())\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:11:29: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            currentPrefix\
    \ = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        prefix +=\
    \ c\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3con6aon.swift:7:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        prefix +=\
    \ c\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3con6aon.swift:7:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            continue\n        }\n    \
    \    currentPrefix = character\n        prefixes.append(currentPrefix)\n    }\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsokvxq8k.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpsokvxq8k.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpsokvxq8k.swift:10:25: error: cannot assign value\
    \ of type 'Character' to type 'String'\n        currentPrefix = character\n  \
    \                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == \".\" {\n            currentPrefix = \"\"\n        } else\
    \ {\n            currentPrefix += String(character)\n        }\n        if currentPrefix.hasPrefix(\"\
    .\") {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp5aews6lg/tmp5aews6lg.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb44be4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb448dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb448db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb448da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5aews6lg                        0x000055bd13e989b8 <unavailable> + 6584

    5    libc.so.6                          0x00002acb44dd0460 __libc_start_main +
    245

    6    tmp5aews6lg                        0x000055bd13e98419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c != currentPrefix {\n            currentPrefix = c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2wy2v2af.swift:7:17: error: cannot convert value of type 'String'\
    \ to expected argument type 'Character'\n        if c != currentPrefix {\n   \
    \             ^\n/tmp/tmp2wy2v2af.swift:8:29: error: cannot assign value of type\
    \ 'Character' to type 'String'\n            currentPrefix = c\n              \
    \              ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for ch in string {\n        prefix +=\
    \ String(ch)\n        prefixes.append(prefix)\n        prefix = \"\"\n    }\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp5zl4h9x6/tmp5zl4h9x6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1022455c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b102214cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b102214c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b102214b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5zl4h9x6                        0x000055ebb7801878 <unavailable> + 6264

    5    libc.so.6                          0x00002b1022641460 __libc_start_main +
    245

    6    tmp5zl4h9x6                        0x000055ebb78012d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpqass6wfn/tmpqass6wfn.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6eb041c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6ead38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6ead38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6ead377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqass6wfn                        0x0000561256ccb8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002ad6eb22d460 __libc_start_main +
    245

    6    tmpqass6wfn                        0x0000561256ccb339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = string\n    var longest = string\n    var shortest\
    \ = \"\"\n    while current != \"\" {\n        shortest = current\n        current\
    \ = longest\n        for char in current {\n            longest = longest.prefix(longest.index(longest.startIndex,\
    \ offsetBy: 1))\n            if longest == \"\" {\n                break\n   \
    \         }\n        }\n        prefixes.append(shortest)\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_ryg9j3b.swift:12:31: error: no exact matches in call to instance\
    \ method 'prefix'\n            longest = longest.prefix(longest.index(longest.startIndex,\
    \ offsetBy: 1))\n                              ^\n/tmp/tmp_ryg9j3b.swift:12:31:\
    \ note: found candidate with type '(String.Index) -> String.SubSequence' (aka\
    \ '(String.Index) -> Substring')\n            longest = longest.prefix(longest.index(longest.startIndex,\
    \ offsetBy: 1))\n                              ^\n/tmp/tmp_ryg9j3b.swift:12:31:\
    \ note: found candidate with type '(String.Index) -> String.SubSequence' (aka\
    \ '(String.Index) -> Substring')\n            longest = longest.prefix(longest.index(longest.startIndex,\
    \ offsetBy: 1))\n                              ^\n/tmp/tmp_ryg9j3b.swift:12:31:\
    \ error: cannot assign value of type 'String.SubSequence' (aka 'Substring') to\
    \ type 'String'\n            longest = longest.prefix(longest.index(longest.startIndex,\
    \ offsetBy: 1))\n                      ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \                      String(                                               \
    \        )\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for ch in string.characters {\n    \
    \    current += String(ch)\n        if current.hasPrefix(string) {\n         \
    \   prefixes.append(current)\n        }\n    }\n    return prefixes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1wgbhdfr.swift:6:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for ch in string.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == \"-\" {\n            prefixes.append(currentPrefix)\n \
    \           currentPrefix = \"\"\n        } else {\n            currentPrefix\
    \ = currentPrefix + String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpb8898aub/tmpb8898aub.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ff6a7bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ff6772b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ff6772988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ff67717b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb8898aub                        0x000055bce821b77e <unavailable> + 6014

    5    libc.so.6                          0x00002b0ff6c67460 __libc_start_main +
    245

    6    tmpb8898aub                        0x000055bce821b3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = character\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnvbp3cxd.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpnvbp3cxd.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpnvbp3cxd.swift:10:29: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for c in string {\n  \
    \      if c == currentPrefix {\n            prefixes.append(currentPrefix)\n \
    \       } else {\n            currentPrefix = c\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpo453n8dl.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmpo453n8dl.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmpo453n8dl.swift:10:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = c\n                            ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix + character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnhre_m5o.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnhre_m5o.swift:8:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + character\n                     \
    \                       ^\n/tmp/tmpnhre_m5o.swift:11:29: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = character\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpne0308fj.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmpne0308fj.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmpne0308fj.swift:10:29: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp5a14pbea/tmp5a14pbea.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae59f21cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae59ef13b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae59ef13988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae59ef127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5a14pbea                        0x000055986de0c9d8 <unavailable> + 6616

    5    libc.so.6                          0x00002ae59f408460 __libc_start_main +
    245

    6    tmp5a14pbea                        0x000055986de0c439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n        } else {\n            prefix\
    \ = prefix\n        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpb3o1b9ax.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpb3o1b9ax.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpb3o1b9ax.swift:10:20:\
    \ error: assigning a variable to itself\n            prefix = prefix\n       \
    \     ~~~~~~ ^ ~~~~~~\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlikqtex.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpvlikqtex.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpvlikqtex.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        prefix +=\
    \ c\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3con6aon.swift:7:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ currentPrefix = currentPrefix + character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dltvx0b.swift:8:45: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            currentPrefix = currentPrefix\
    \ + character\n                                            ^\n/tmp/tmp2dltvx0b.swift:11:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == \".\" {\n            currentPrefix = \"\"\n        } else\
    \ {\n            currentPrefix += String(character)\n        }\n        if currentPrefix.count\
    \ > 0 {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.startIndex] {\n           \
    \ currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex + 1)\n\
    \        } else {\n            prefixes.append(currentPrefix)\n            currentPrefix\
    \ = String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi_jmp5jt.swift:8:74: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n                                                                     \
    \    ^\n/tmp/tmpi_jmp5jt.swift:8:43: error: value of type 'String' has no member\
    \ 'substringToIndex'\n            currentPrefix = currentPrefix.substringToIndex(currentPrefix.startIndex\
    \ + 1)\n                            ~~~~~~~~~~~~~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string.unicodeScalars {\n  \
    \      if c == Character(\"\\u{0020}\") {\n            prefixes.append(prefix)\n\
    \            prefix = \"\"\n        } else {\n            prefix += String(c)\n\
    \        }\n    }\n    prefixes.append(prefix)\n    return prefixes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcxzcf069.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Unicode.Scalar' and 'Character'\n        if c == Character(\"\
    \\u{0020}\") {\n           ~ ^  ~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpcxzcf069.swift:7:14:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (Unicode.Scalar, Unicode.Scalar)\n        if c == Character(\"\
    \\u{0020}\") {\n             ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        if character == currentPrefix {\n            continue\n        }\n\
    \        currentPrefix = character\n        prefixes.append(currentPrefix)\n \
    \   }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_jk2kaxq.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmp_jk2kaxq.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n/tmp/tmp_jk2kaxq.swift:10:25: error: cannot assign value\
    \ of type 'Character' to type 'String'\n        currentPrefix = character\n  \
    \                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpknee_vqi.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmpknee_vqi.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmpknee_vqi.swift:10:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = c\n                            ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = currentPrefix + c\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmplhwyw37h.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmplhwyw37h.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmplhwyw37h.swift:10:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + c\n                             \
    \               ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlikqtex.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpvlikqtex.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpvlikqtex.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpqass6wfn/tmpqass6wfn.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6eb041c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6ead38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6ead38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6ead377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqass6wfn                        0x0000561256ccb8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002ad6eb22d460 __libc_start_main +
    245

    6    tmpqass6wfn                        0x0000561256ccb339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ += character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4yipvm09.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4yipvm09.swift:8:30:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix += character\n                             ^\n/tmp/tmp4yipvm09.swift:11:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        currentPrefix\
    \ = currentPrefix + c\n        if currentPrefix.hasPrefix(string) {\n        \
    \    prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpl03t00i2.swift:7:41: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        currentPrefix = currentPrefix +\
    \ c\n                                        ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = c\n        }\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnecuazuv.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmpnecuazuv.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmpnecuazuv.swift:10:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = c\n                            ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string.unicodeScalars {\n \
    \       current += String(c.value)\n        if current.hasPrefix(string) {\n \
    \           prefixes.append(current)\n        }\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp7abugfr6/tmp7abugfr6.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c3fd6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c3fa65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c3fa65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c3fa647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7abugfr6                        0x00005580fec94a98 <unavailable> + 6808

    5    libc.so.6                          0x00002b3c3ff5a460 __libc_start_main +
    245

    6    tmp7abugfr6                        0x00005580fec944f9 <unavailable> + 5369

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix + character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnhre_m5o.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnhre_m5o.swift:8:45:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix + character\n                     \
    \                       ^\n/tmp/tmpnhre_m5o.swift:11:29: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            currentPrefix = character\n\
    \                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n        } else {\n            prefix\
    \ = \"\"\n        }\n        prefix += c\n    }\n    return prefixes\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmafjupc4.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpmafjupc4.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpmafjupc4.swift:12:19:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix[currentPrefix.count-1] + String(character)\n        } else {\n\
    \            prefixes.append(currentPrefix)\n            currentPrefix = String(character)\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpisdfean9.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpisdfean9.swift:8:42:\
    \ error: no exact matches in call to subscript \n            currentPrefix = currentPrefix[currentPrefix.count-1]\
    \ + String(character)\n                                         ^\nSwift.String:3:12:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'Int')\n    public subscript(r: Range<String.Index>) -> Substring { get\
    \ }\n           ^\nSwift.Collection:3:23: note: candidate expects value of type\
    \ '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable public\
    \ subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n        \
    \              ^\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix: String = \"\"\n    for character in string\
    \ {\n        currentPrefix = currentPrefix + String(character)\n        if currentPrefix.hasPrefix(string)\
    \ {\n            prefixes.append(currentPrefix)\n        }\n    }\n    return\
    \ prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpwvxptr8r/tmpwvxptr8r.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1244d7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1244a71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1244a71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1244a707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwvxptr8r                        0x000055dbb59ef8d8 <unavailable> + 6360

    5    libc.so.6                          0x00002b1244f66460 __libc_start_main +
    245

    6    tmpwvxptr8r                        0x000055dbb59ef339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2oav9n0f.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmp2oav9n0f.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        prefix +=\
    \ c\n        prefixes.append(prefix)\n    }\n    return prefixes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3con6aon.swift:7:19: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        prefix += c\n                  ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var current = \"\"\n    for c in string {\n        current +=\
    \ String(c)\n        prefixes.append(current)\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ = currentPrefix[currentPrefix.count-1] + character\n        } else {\n     \
    \       prefixes.append(currentPrefix)\n            currentPrefix = character\n\
    \        }\n    }\n    prefixes.append(currentPrefix)\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpugy68g2f.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpugy68g2f.swift:8:68:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                                                   ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ error: no exact matches in call to subscript \n            currentPrefix = currentPrefix[currentPrefix.count-1]\
    \ + character\n                                         ^\n/tmp/tmpugy68g2f.swift:8:42:\
    \ note: candidate has partially matching parameter list (Range<String.Index>)\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:8:42: note:\
    \ candidate has partially matching parameter list ((UnboundedRange_) -> ())\n\
    \            currentPrefix = currentPrefix[currentPrefix.count-1] + character\n\
    \                                         ^\n/tmp/tmpugy68g2f.swift:11:29: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            currentPrefix\
    \ = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix {\n            prefixes.append(currentPrefix)\n\
    \        } else {\n            currentPrefix = String(character)\n           \
    \ prefixes.append(currentPrefix)\n        }\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2oav9n0f.swift:7:22: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if character == currentPrefix\
    \ {\n           ~~~~~~~~~ ^  ~~~~~~~~~~~~~\n/tmp/tmp2oav9n0f.swift:7:22: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        if character == currentPrefix {\n    \
    \                 ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == currentPrefix[currentPrefix.count-1] {\n            currentPrefix\
    \ += character\n        } else {\n            prefixes.append(currentPrefix)\n\
    \            currentPrefix = character\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4yipvm09.swift:7:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if character\
    \ == currentPrefix[currentPrefix.count-1] {\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4yipvm09.swift:8:30:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            currentPrefix += character\n                             ^\n/tmp/tmp4yipvm09.swift:11:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = character\n                            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      if character == \"-\" {\n            prefixes.append(currentPrefix)\n \
    \           currentPrefix = \"\"\n        } else {\n            currentPrefix\
    \ += String(character)\n        }\n    }\n    prefixes.append(currentPrefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmppwdebzgq/tmppwdebzgq.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85b7064c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85b6d5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85b6d5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85b6d5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppwdebzgq                        0x000055c2c35be77e <unavailable> + 6014

    5    libc.so.6                          0x00002b85b7250460 __libc_start_main +
    245

    6    tmppwdebzgq                        0x000055c2c35be3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string.unicodeScalars\
    \ {\n        if c.isASCII {\n            currentPrefix = c.value\n        } else\
    \ {\n            currentPrefix = String(currentPrefix) + String(c.value)\n   \
    \     }\n        if currentPrefix.hasPrefix(string) {\n            prefixes.append(currentPrefix)\n\
    \        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2mjawwiv.swift:8:31: error: cannot assign value of type 'UInt32'\
    \ to type 'String'\n            currentPrefix = c.value\n                    \
    \        ~~^~~~~\n"
  stdout: ''
  timestamp: 1660014305
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlikqtex.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpvlikqtex.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpvlikqtex.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for c in string {\n        if\
    \ c == currentPrefix {\n            prefixes.append(currentPrefix)\n        }\
    \ else {\n            currentPrefix = c\n        }\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpnecuazuv.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == currentPrefix\
    \ {\n           ~ ^  ~~~~~~~~~~~~~\n/tmp/tmpnecuazuv.swift:7:14: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        if c == currentPrefix {\n             ^\n/tmp/tmpnecuazuv.swift:10:29:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  currentPrefix = c\n                            ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n        } else {\n            prefix\
    \ = c\n        }\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmps4ubpxpt.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmps4ubpxpt.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmps4ubpxpt.swift:10:22:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  prefix = c\n                     ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = currentPrefix + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var prefix = \"\"\n    for c in string {\n        if c == prefix\
    \ {\n            prefixes.append(prefix)\n            prefix = \"\"\n        }\
    \ else {\n            prefix += c\n        }\n    }\n    prefixes.append(prefix)\n\
    \    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvlikqtex.swift:7:14: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        if c == prefix {\n   \
    \        ~ ^  ~~~~~~\n/tmp/tmpvlikqtex.swift:7:14: note: overloads for '==' exist\
    \ with these partially matching parameter lists: (Character, Character), (String,\
    \ String)\n        if c == prefix {\n             ^\n/tmp/tmpvlikqtex.swift:11:23:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            prefix += c\n                      ^\n"
  stdout: ''
  timestamp: 1660014304
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes =\
    \ [String]()\n    var currentPrefix = \"\"\n    for character in string {\n  \
    \      currentPrefix = String(currentPrefix) + String(character)\n        prefixes.append(currentPrefix)\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014304
