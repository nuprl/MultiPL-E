name: HumanEval_59_largest_prime_factor
language: swift
prompt: "\n/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  func largest_prime_factor(n: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_prime_factor(n: 15) == 5)\nassert(largest_prime_factor(n:\
  \ 27) == 3)\nassert(largest_prime_factor(n: 63) == 7)\nassert(largest_prime_factor(n:\
  \ 330) == 11)\nassert(largest_prime_factor(n: 13195) == 29)"
completions: ["    var max_factor = 1\n    for factor in 2..Int(sqrt(Double(n))) +\
    \ 1 {\n        if n % factor == 0 {\n            if factor > max_factor {\n  \
    \              max_factor = factor\n            }\n        }\n    }\n    return\
    \ max_factor", "    var maxFactor = 2 // start at 2\n    var maxFactorFound =\
    \ false // start at false\n    for factor in 2..n {\n        if n % factor ==\
    \ 0 {\n            if !maxFactorFound {\n                maxFactorFound = true\n\
    \                maxFactor = factor\n            } else {\n                if\
    \ maxFactor < factor {\n                    maxFactor = factor\n             \
    \   }\n            }\n        }\n    }\n    return maxFactor", "    var largest\
    \ = 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n; i++ {\n       \
    \ if n % i == 0 {\n            if largestPrimeFactor == 1 {\n                largestPrimeFactor\
    \ = i\n            } else {\n                if largestPrimeFactor > i {\n   \
    \                 largestPrimeFactor = i\n                }\n            }\n \
    \       }\n    }\n    return largestPrimeFactor", "    var maxFactor = 2 // largest\
    \ prime factor of n\n    var maxFactorPrime = 2 // largest prime factor of n that\
    \ divides n\n    for i := 3; i <= n; i++ {\n        if n % i == 0 {\n        \
    \    if maxFactorPrime < i {\n                maxFactorPrime = i\n           \
    \ }\n            if maxFactor < i {\n                maxFactor = i\n         \
    \   }\n        }\n    }\n    return maxFactor", "    var largest = 1\n    var\
    \ largestPrime = 1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n \
    \           largest = i\n            largestPrime = i\n        }\n    }\n    return\
    \ largestPrime", "    var max_factor: Int = 0\n    var max_factor_index: Int =\
    \ 0\n    for i := 2; i <= n/2; i += 1 {\n        if n % i == 0 {\n           \
    \ if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    var\
    \ max_factor = 1\n    var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor_index", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    var largest\
    \ = 1\n    for prime in 2..n {\n        if n % prime == 0 {\n            largest\
    \ = prime\n            break\n        }\n    }\n    return largest", "    var\
    \ maxFactor = Int()\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n       \
    \ if n % factor == 0 {\n            if maxFactor < factor {\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    return maxFactor", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    var i: Int\n    for i = 2; i\
    \ <= n / 2; i += 1 {\n        if n % i == 0 {\n            if max_factor < i {\n\
    \                max_factor = i\n                max_factor_index = i\n      \
    \      }\n        }\n    }\n    return max_factor", "    var max_factor: Int =\
    \ 0\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor ==\
    \ 0 {\n            if factor > max_factor {\n                max_factor = factor\n\
    \            }\n        }\n    }\n    return max_factor", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor_index", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            }\n      \
    \      maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n\
    \    return maxFactor", "    var factor: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n   \
    \ var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n\
    \    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int =\
    \ 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int\
    \ = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f:\
    \ Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\
    \    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int =\
    \ 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int\
    \ = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d:\
    \ Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var\
    \ h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n   \
    \ var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n\
    \    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int =\
    \ 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b:\
    \ Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var\
    \ f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n   \
    \ var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n\
    \    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int", "    var\
    \ max_factor = 1\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if\
    \ n % factor == 0 {\n            if factor > max_factor {\n                max_factor\
    \ = factor\n            }\n        }\n    }\n    return max_factor", "    var\
    \ max_factor: Int = 0\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n     \
    \   if n % factor == 0 {\n            if factor > max_factor {\n             \
    \   max_factor = factor\n            }\n        }\n    }\n    return max_factor",
  "    var factor: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var p: Int\
    \ = 0\n    var q: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d:\
    \ Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var\
    \ h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n   \
    \ var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n\
    \    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int =\
    \ 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n    var e:\
    \ Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var\
    \ i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n   \
    \ var m: Int = 0\n    var n: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n\
    \    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int =\
    \ 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int\
    \ = 0\n    var n: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f:\
    \ Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n   \
    \ var n: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n\
    \    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int =\
    \ 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int\
    \ = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g:\
    \ Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n\
    \    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int =\
    \ 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var d: Int\
    \ = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int", "    var max_factor:\
    \ Int = 0\n    var max_factor_count: Int = 0\n    for factor in 2..n {\n     \
    \   if n % factor == 0 {\n            if max_factor_count < factor {\n       \
    \         max_factor_count = factor\n                max_factor = factor\n   \
    \         }\n        }\n    }\n    return max_factor", "\tlet max_factor = 2\n\
    \tvar max_factor_index = 0\n\tfor i in 2..<n {\n\t\tif n % i == 0 {\n\t\t\tif\
    \ max_factor < i {\n\t\t\t\tmax_factor = i\n\t\t\t\tmax_factor_index = i\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn max_factor", "    var largestPrimeFactor = 1\n    var\
    \ largestPrimeFactorIsPrime = true\n    for i := 2; i <= n/2; i++ {\n        if\
    \ n%i == 0 {\n            largestPrimeFactor = i\n            largestPrimeFactorIsPrime\
    \ = false\n            break\n        }\n    }\n    if largestPrimeFactorIsPrime\
    \ {\n        return largestPrimeFactor\n    } else {\n        return largestPrimeFactor\
    \ * largest_prime_factor(n/2)\n    }", "    var max_factor = 1\n    var max_factor_index\
    \ = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    var largest = 1\n    var prime = 1\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            largest = i\n       \
    \     prime = 1\n        } else {\n            prime *= i\n        }\n    }\n\
    \    return largest", "    if n < 2 {\n        return n\n    }\n    \n    var\
    \ max_factor = 1\n    var max_factor_index = 0\n    \n    for i := 2; i <= n;\
    \ i++ {\n        if n % i == 0 {\n            if max_factor < i {\n          \
    \      max_factor = i\n                max_factor_index = i\n            }\n \
    \       }\n    }\n    \n    return max_factor", "    var maxFactor = Int()\n \
    \   var maxFactorPrime = Int()\n    for i := 2; i <= n; i++ {\n        if n %\
    \ i == 0 {\n            if maxFactorPrime == 0 || maxFactorPrime > i {\n     \
    \           maxFactor = i\n                maxFactorPrime = i\n            }\n\
    \            if maxFactorPrime == i {\n                maxFactorPrime = i\n  \
    \          }\n        }\n    }\n    return maxFactor", "    var max_factor = 1\n\
    \    var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if n % i\
    \ == 0 {\n            if max_factor < i {\n                max_factor = i\n  \
    \              max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor", "    var factor: Int = 0\n    var i: Int = 0\n    var j: Int =\
    \ 0\n    var m: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int\
    \ = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v:\
    \ Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var\
    \ z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n   \
    \ var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n\
    \    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int =\
    \ 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int\
    \ = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s:\
    \ Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var\
    \ w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n   \
    \ var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n\
    \    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int =\
    \ 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int\
    \ = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p:\
    \ Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var\
    \ t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n   \
    \ var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n\
    \    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int =\
    \ 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int\
    \ = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var\
    \ q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n   \
    \ var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int =\
    \ 0\n    var c: Int = 0\n    var d: Int = 0\n", "    var maxFactor = Int(1)\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if !maxFactorFound {\n                maxFactorFound = true\n\
    \                maxFactor = factor\n            } else {\n                if\
    \ maxFactor > factor {\n                    maxFactor = factor\n             \
    \   }\n            }\n        }\n    }\n    return maxFactor", "    if n < 2 {\n\
    \        return n\n    }\n    \n    var maxFactor = 1\n    var maxFactorFound\
    \ = false\n    \n    for factor in 2...n {\n        if n % factor == 0 {\n   \
    \         if !maxFactorFound {\n                maxFactor = factor\n         \
    \       maxFactorFound = true\n            } else {\n                if maxFactor\
    \ != factor {\n                    maxFactor = factor\n                }\n   \
    \         }\n        }\n    }\n    \n    return maxFactor", "    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound == false {\n           \
    \     maxFactor = factor\n                maxFactorFound = true\n            }\
    \ else {\n                if maxFactor > factor {\n                    maxFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return maxFactor",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return 0\n            }\n            maxFactorFound = true\n     \
    \       maxFactor = factor\n        }\n    }\n    return maxFactor", "    n -=\
    \ 1\n    var factor: Int\n    var i: Int\n    for i = 2; i <= n; i++ {\n     \
    \   if n % i == 0 {\n            factor = i\n            break\n        }\n  \
    \  }\n    return factor", "    var largestPrimeFactor = 2 // start at 2 since\
    \ 2 is the largest prime factor\n    var largestPrimeFactorIsPrime = true\n  \
    \  for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n            if largestPrimeFactorIsPrime\
    \ {\n                largestPrimeFactor = i\n            } else {\n          \
    \      largestPrimeFactorIsPrime = false\n            }\n        }\n    }\n  \
    \  return largestPrimeFactor", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    if\
    \ n < 2 {\n        return n\n    }\n\n    var max_factor = 1\n    var max_factor_index\
    \ = 0\n\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            max_factor\
    \ = i\n            max_factor_index = i\n        }\n    }\n\n    return max_factor",
  "    var largest = 1\n    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n\
    \            largest = i\n            break\n        }\n    }\n    return largest",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return factor\n            } else {\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            }\n        }\n    }\n\
    \    return maxFactor", "    var max_factor: Int = 0\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if factor > max_factor {\n\
    \                max_factor = factor\n            }\n        }\n    }\n    return\
    \ max_factor", "    var max_factor = 1\n    var max_factor_index = 0\n    for\
    \ i := 2; i < n; i++ {\n        if n % i == 0 {\n            if max_factor < i\
    \ {\n                max_factor = i\n                max_factor_index = i\n  \
    \          }\n        }\n    }\n    return max_factor_index", "    if n == 1 {\n\
    \        return n\n    }\n    \n    var maxFactor = 2 // first prime factor\n\
    \    var maxFactorPrime = 2 // prime factor of maxFactor\n    \n    for factor\
    \ := 3; factor <= n; factor++ {\n        if n%factor == 0 {\n            if factor\
    \ > maxFactor {\n                maxFactor = factor\n                maxFactorPrime\
    \ = factor\n            }\n        } else {\n            if factor > maxFactorPrime\
    \ {\n                maxFactorPrime = factor\n            }\n        }\n    }\n\
    \    \n    return maxFactor", "    var max_factor = 1\n    var max_factor_index\
    \ = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    var factor:\
    \ Int = 0\n    var maxFactor: Int = 0\n    for factor in 2..n {\n        if n\
    \ % factor == 0 {\n            if factor > maxFactor {\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    return maxFactor", "    if n\
    \ < 2 {\n        return n\n    }\n    var max_factor = 1\n    var max_factor_index\
    \ = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    var\
    \ largestPrimeFactor = 2 // start at 2\n    var largestPrimeFactorFound = false\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if largestPrimeFactorFound\
    \ {\n                // found a factor\n                largestPrimeFactorFound\
    \ = false\n                largestPrimeFactor = i\n            } else {\n    \
    \            // found a factor not larger than the previous one\n            \
    \    largestPrimeFactorFound = true\n            }\n        }\n    }\n    return\
    \ largestPrimeFactor", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    var maxFactor = Int()\n    var maxFactorFound =\
    \ false\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactorFound {\n                return 0\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    var max_factor = 1\n    var max_factor_index = 0\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            if max_factor < i {\n              \
    \  max_factor = i\n                max_factor_index = i\n            }\n     \
    \   }\n    }\n    return max_factor_index", "    var largestPrimeFactor = 2 //\
    \ start at 2 since 2 is the smallest prime\n    var largestPrimeFactorIsPrime\
    \ = true // start at true since 2 is the smallest prime\n    for i := 3; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            if largestPrimeFactorIsPrime\
    \ {\n                largestPrimeFactor = i\n            } else {\n          \
    \      largestPrimeFactorIsPrime = false\n            }\n        }\n    }\n  \
    \  return largestPrimeFactor", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    if\
    \ n < 2 {\n        return n\n    }\n    var max_factor = 1\n    var max_factor_index\
    \ = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    var maxFactor\
    \ = 2 // start at 2\n    var maxFactorPrime = 2 // start at 2\n    for factor\
    \ := 3; factor <= n; factor++ {\n        if n % factor == 0 {\n            if\
    \ factor > maxFactorPrime {\n                maxFactorPrime = factor\n       \
    \         maxFactor = factor\n            }\n        } else {\n            if\
    \ factor > maxFactor {\n                maxFactor = factor\n                maxFactorPrime\
    \ = factor\n            }\n        }\n    }\n    return maxFactor", "    if n\
    \ < 2 {\n        return n\n    }\n    \n    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    \n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n    \
    \        if max_factor < i {\n                max_factor = i\n               \
    \ max_factor_index = i\n            }\n        }\n    }\n    \n    return max_factor",
  "    var largestPrimeFactor = 2 // start at 2\n    var largestPrimeFactorFound =\
    \ false\n    for i := 2; i <= n && !largestPrimeFactorFound; i++ {\n        if\
    \ n % i == 0 {\n            largestPrimeFactorFound = true\n            largestPrimeFactor\
    \ = i\n        }\n    }\n    return largestPrimeFactor", "    if n < 2 {\n   \
    \     return n\n    }\n\n    var maxFactor = 2 // largest prime factor of n\n\
    \    var maxFactorPrime = 2 // largest prime factor of n's prime\n\n    for i\
    \ := 3; i <= n; i++ {\n        if n % i == 0 {\n            if maxFactor*i > n\
    \ {\n                maxFactor = i\n            }\n            if maxFactorPrime\
    \ * i > n {\n                maxFactorPrime = i\n            }\n        }\n  \
    \  }\n\n    return maxFactor", "    var max_factor: Int = 0\n    for factor in\
    \ 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n            if\
    \ factor > max_factor {\n                max_factor = factor\n            }\n\
    \        }\n    }\n    return max_factor", "    if n == 1 {\n        return 1\n\
    \    }\n    \n    var maxFactor = 1\n    var maxFactorIndex = 0\n    \n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if maxFactor < i\
    \ {\n                maxFactor = i\n                maxFactorIndex = i\n     \
    \       }\n        }\n    }\n    \n    return maxFactor", "    if n < 2 {\n  \
    \      return n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor_index", "    if n == 1\
    \ {\n        return 1\n    }\n    \n    var maxFactor = 2 // start at 2\n    var\
    \ maxFactorFound = false\n    \n    for factor in 2..Int(sqrt(Double(n))) { //\
    \ loop through all factors of n\n        if n % factor == 0 {\n            if\
    \ maxFactorFound {\n                // found a factor greater than maxFactor\n\
    \                // so stop the loop\n                break\n            }\n \
    \           \n            if factor > maxFactor {\n                // found a\
    \ factor greater than maxFactor\n                // so set maxFactor = factor\n\
    \                maxFactor = factor\n                maxFactorFound = true\n \
    \           }\n        }\n    }\n    \n    return maxFactor", "    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n       \
    \ if n % factor == 0 {\n            if maxFactorFound {\n                return\
    \ factor\n            } else {\n                maxFactorFound = true\n      \
    \          maxFactor = factor\n            }\n        }\n    }\n    return maxFactor",
  "    var maxFactor = Int(1)\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return 0\n            }\n            maxFactorFound = true\n     \
    \       maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n      \
    \  return maxFactor\n    }\n    return 0", "    var maxFactor = Int()\n    var\
    \ maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n  \
    \      if n % factor == 0 {\n            if maxFactorFound {\n               \
    \ return 0\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return 0", "    var max_factor = 1\n    var max_factor_index = 0\n\
    \    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor", "    var maxFactor =\
    \ Int()\n    for factor in 2...n {\n        if n % factor == 0 {\n           \
    \ if maxFactor < factor {\n                maxFactor = factor\n            }\n\
    \        }\n    }\n    return maxFactor", "    var maxFactor = 2 // start at 2\n\
    \    var maxFactorFound = false // start at false\n    for i := 3; i <= n; i++\
    \ {\n        if n % i == 0 {\n            if maxFactorFound {\n              \
    \  // found a factor greater than maxFactor\n                return i\n      \
    \      }\n            maxFactorFound = true\n            maxFactor = i\n     \
    \   }\n    }\n    return maxFactor", "    var maxFactor = Int()\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if maxFactor < factor\
    \ {\n                maxFactor = factor\n            }\n        }\n    }\n   \
    \ return maxFactor", "    var max_factor: Int = 0\n    var max_factor_index: Int\
    \ = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    if\
    \ n < 2 {\n        return n\n    }\n    \n    var maxFactor = 2 // largest prime\
    \ factor of n\n    var maxFactorFound = false // whether maxFactor has been found\
    \ yet\n    \n    for factor := 3; factor <= n; factor++ {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                // maxFactor has been\
    \ found before\n                break\n            }\n            \n         \
    \   if factor > maxFactor {\n                maxFactor = factor\n            \
    \    maxFactorFound = true\n            }\n        }\n    }\n    \n    return\
    \ maxFactor", "    var maxFactor = Int()\n    var maxFactorFound = false\n   \
    \ for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return 0\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    return maxFactor", "  \
    \  var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return maxFactor\n            }\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n    return maxFactor", " \
    \   var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound {\n         \
    \       return factor\n            } else {\n                maxFactorFound =\
    \ true\n                maxFactor = factor\n            }\n        }\n    }\n\
    \    return maxFactor", "    var maxFactor = 2 // start at 2\n    var maxFactorFound\
    \ = false // start at false\n    for factor in 2..n {\n        if n % factor ==\
    \ 0 {\n            if !maxFactorFound {\n                maxFactorFound = true\n\
    \                maxFactor = factor\n            } else {\n                if\
    \ maxFactor < factor {\n                    maxFactor = factor\n             \
    \   }\n            }\n        }\n    }\n    return maxFactor", "    var maxFactor\
    \ = Int()\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if maxFactor < factor {\n                maxFactor = factor\n\
    \            }\n        }\n    }\n    return maxFactor", "    var maxFactor: Int\
    \ = 0\n    var maxFactorFound = false\n    for factor in 2...n {\n        if n\
    \ % factor == 0 {\n            if !maxFactorFound {\n                maxFactor\
    \ = factor\n                maxFactorFound = true\n            } else {\n    \
    \            if maxFactor > factor {\n                    maxFactor = factor\n\
    \                }\n            }\n        }\n    }\n    return maxFactor", " \
    \   var factor: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int\
    \ = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p:\
    \ Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var\
    \ t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n   \
    \ var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n\
    \    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int =\
    \ 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int\
    \ = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m:\
    \ Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var\
    \ r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   \
    \ var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n\
    \    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int =\
    \ 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int\
    \ = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k:\
    \ Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var\
    \ p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n   \
    \ var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n\
    \    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int =\
    \ 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int\
    \ = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i:\
    \ Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var\
    \ m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n   \
    \ var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n\
    \    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int =\
    \ 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int\
    \ = 0\n    var d: Int = 0\n    var e: ", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return 0\n            }\n           \
    \ maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n  \
    \  if maxFactorFound {\n        return maxFactor\n    }\n    return 0", "    var\
    \ max_factor: Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <=\
    \ n/2; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n     \
    \           max_factor = i\n                max_factor_index = i\n           \
    \ }\n        }\n    }\n    return max_factor_index", "    if n < 2 {\n       \
    \ return n\n    }\n    \n    var largestPrimeFactor = Int(1)\n    var largestPrimeFactorIsPrime\
    \ = true\n    \n    for i := 2; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            if largestPrimeFactorIsPrime {\n                largestPrimeFactor\
    \ = i\n            } else {\n                largestPrimeFactorIsPrime = false\n\
    \            }\n        }\n    }\n    \n    return largestPrimeFactor", "    var\
    \ largest = 1\n    var prime = 1\n    for i := 2; i <= n / prime; i++ {\n    \
    \    if n % prime == 0 {\n            largest = prime\n        }\n        prime\
    \ *= i\n    }\n    return largest", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    var\
    \ max_factor = 1\n    var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor_index", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largestPrimeFactor\
    \ = i\n            if largest < largestPrimeFactor {\n                largest\
    \ = largestPrimeFactor\n            }\n        }\n    }\n    return largest",
  "    var largest = 1\n    var prime = 1\n    for i := 2; i <= n; i++ {\n       \
    \ if n % i == 0 {\n            largest = i\n            prime = 1\n        } else\
    \ {\n            prime *= i\n        }\n    }\n    return largest", "    var maxFactor\
    \ = Int()\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if maxFactor < factor {\n                maxFactor = factor\n\
    \            }\n        }\n    }\n    return maxFactor", "    var maxFactor =\
    \ 2 // start at 2\n    var maxFactorIndex = 1 // start at 1\n    var factorIndex\
    \ = 1\n    for factorIndex <= n {\n        if n % factorIndex == 0 {\n       \
    \     maxFactor = factorIndex\n            maxFactorIndex = factorIndex\n    \
    \    }\n        factorIndex += 1\n    }\n    return maxFactor", "    var largest\
    \ = 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n; i++ {\n       \
    \ if n % i == 0 {\n            if largestPrimeFactor == 1 {\n                largestPrimeFactor\
    \ = i\n            }\n            if largest < i {\n                largest =\
    \ i\n            }\n        }\n    }\n    return largestPrimeFactor", "    var\
    \ largest = 1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n      \
    \      largest = i\n            break\n        }\n    }\n    return largest",
  "    var maxFactor = 2 // start at 2 since 2 is the largest factor of n\n    var\
    \ maxFactorFound = false // start at false since 2 is the largest factor of n\n\
    \    for factor in 2..n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                // found a factor larger than maxFactor\n               \
    \ return factor\n            }\n            if factor > maxFactor {\n        \
    \        // found a factor smaller than maxFactor\n                maxFactor =\
    \ factor\n                maxFactorFound = true\n            }\n        }\n  \
    \  }\n    return maxFactor", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return 0\n        \
    \    }\n            maxFactor = factor\n            maxFactorFound = true\n  \
    \      }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n  \
    \  return 0", "    var maxFactor = Int()\n    var maxFactorFound = false\n   \
    \ for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    return maxFactor",
  "    var max_factor = 1\n    var max_factor_index = 0\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            if max_factor < i {\n              \
    \  max_factor = i\n                max_factor_index = i\n            }\n     \
    \   }\n    }\n    return max_factor", "    var largest = 1\n    var largestPrime\
    \ = 1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largestPrime\
    \ = i\n            if largest < largestPrime {\n                largest = largestPrime\n\
    \            }\n        }\n    }\n    return largest", "    var max_factor = 1\n\
    \    var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n        if n % i\
    \ == 0 {\n            if max_factor < i {\n                max_factor = i\n  \
    \              max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor", "    var maxFactor = Int()\n    var maxFactorFound = false\n  \
    \  for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n\
    \            if maxFactorFound {\n                return 0\n            }\n  \
    \          maxFactor = factor\n            maxFactorFound = true\n        }\n\
    \    }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return 0",
  "    var max_factor = 1\n    var max_factor_index = 0\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            if max_factor < i {\n              \
    \  max_factor = i\n                max_factor_index = i\n            }\n     \
    \   }\n    }\n    return max_factor", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor == 0 || max_factor > i {\n                max_factor = i\n  \
    \              max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor_index", "    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n\
    \            if maxFactorFound {\n                return 0\n            }\n  \
    \          maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \    }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return 0",
  "    var maxFactor = Int()\n    for factor in 2...n {\n        if n % factor ==\
    \ 0 {\n            if maxFactor < factor {\n                maxFactor = factor\n\
    \            }\n        }\n    }\n    return maxFactor", "    var maxFactor =\
    \ Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n        if\
    \ n % factor == 0 {\n            if maxFactorFound {\n                return 0\n\
    \            }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return 0", "    var max_factor: Int = 0\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if factor > max_factor {\n\
    \                max_factor = factor\n            }\n        }\n    }\n    return\
    \ max_factor", "    var maxFactor = 2 // start at 2\n    var maxFactorFound =\
    \ false\n    for factor in 2..n {\n        if n % factor == 0 {\n            if\
    \ !maxFactorFound {\n                maxFactor = factor\n                maxFactorFound\
    \ = true\n            } else {\n                if factor > maxFactor {\n    \
    \                maxFactor = factor\n                }\n            }\n      \
    \  }\n    }\n    return maxFactor", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return 0\n            }\n           \
    \ maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n  \
    \  if maxFactorFound {\n        return maxFactor\n    }\n    return 0", "    var\
    \ maxFactor = Int(1)\n    var maxFactorPrime = Int(1)\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if factor > maxFactor {\n \
    \               maxFactor = factor\n                maxFactorPrime = factor\n\
    \            } else if factor == maxFactor {\n                maxFactorPrime =\
    \ factor\n            }\n        }\n    }\n    return maxFactorPrime", "    var\
    \ max_factor = 1\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if\
    \ n % factor == 0 {\n            if factor > max_factor {\n                max_factor\
    \ = factor\n            }\n        }\n    }\n    return max_factor", "    var\
    \ largest = 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if largest < i {\n                largest\
    \ = i\n                largestPrimeFactor = 1\n            } else {\n        \
    \        largestPrimeFactor++\n            }\n        }\n    }\n    return largestPrimeFactor",
  "    if n < 2 {\n        return n\n    }\n    var max_factor = 1\n    var max_factor_index\
    \ = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    if\
    \ n < 2 {\n        return n\n    }\n    \n    var maxFactor = 2 // start at 2\n\
    \    var maxFactorPrime = 2 // start at 2\n    \n    for factor := 3; factor <=\
    \ n; factor++ {\n        if n % factor == 0 {\n            // n is divisible by\
    \ factor\n            if factor > maxFactor {\n                maxFactor = factor\n\
    \                maxFactorPrime = factor\n            }\n        } else {\n  \
    \          // n is not divisible by factor\n            if factor > maxFactorPrime\
    \ {\n                maxFactorPrime = factor\n            }\n        }\n    }\n\
    \    \n    return maxFactorPrime", "    var maxFactor = 2 // Start with 2\n  \
    \  var maxFactorIsPrime = true // Start with true\n    for factor in 2..n {\n\
    \        if n % factor == 0 {\n            if !maxFactorIsPrime {\n          \
    \      maxFactor = factor\n                maxFactorIsPrime = true\n         \
    \   } else {\n                // Found a factor > maxFactor\n                maxFactorIsPrime\
    \ = false\n            }\n        }\n    }\n    return maxFactor", "    var max_factor:\
    \ Int = 0\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if factor > max_factor {\n                max_factor = factor\n\
    \            }\n        }\n    }\n    return max_factor", "    var maxFactor =\
    \ Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n        if\
    \ n % factor == 0 {\n            if maxFactorFound {\n                return factor\n\
    \            }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor", "    var max_factor: Int = 0\n    var\
    \ max_factor_index: Int = 0\n    for i := 2; i <= n/2; i++ {\n        if n % i\
    \ == 0 {\n            if max_factor < i {\n                max_factor = i\n  \
    \              max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor", "    var max_factor = 1\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            max_factor = factor\n     \
    \       break\n        }\n    }\n    return max_factor", "    var maxFactor =\
    \ Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n        if\
    \ n % factor == 0 {\n            if maxFactorFound {\n                return 0\n\
    \            }\n            maxFactor = factor\n            maxFactorFound = true\n\
    \        }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n\
    \    return 0", "    if n < 2 {\n        return n\n    }\n\n    // The largest\
    \ prime factor is 2\n    if n == 2 {\n        return 2\n    }\n\n    // The largest\
    \ prime factor is 3\n    if n == 3 {\n        return 3\n    }\n\n    // The largest\
    \ prime factor is 5\n    if n%5 == 0 {\n        return 5\n    }\n\n    // The\
    \ largest prime factor is 7\n    if n%7 == 0 {\n        return 7\n    }\n\n  \
    \  // The largest prime factor is 11\n    if n%11 == 0 {\n        return 11\n\
    \    }\n\n    // The largest prime factor is 13\n    if n%13 == 0 {\n        return\
    \ 13\n    }\n\n    // The largest prime factor is 17\n    if n%17 == 0 {\n   \
    \     return 17\n    }\n\n    // The largest prime factor is 19\n    if n%19 ==\
    \ 0 {\n        return 19\n    }\n\n    // The largest prime factor is 23\n   \
    \ if n%23 == 0 {\n        return 23\n    }\n\n    // The largest prime factor\
    \ is 29\n    if n%29 == 0 {\n        return 29\n    }\n\n    // The largest prime\
    \ factor is 31\n    if n%31 == 0 {\n        return 31\n    }\n\n    // The largest\
    \ prime factor is 37\n    if n%37 == 0 {\n        return 37\n    }\n\n    // The\
    \ largest prime factor is 41\n    if n%41 == 0 {\n        return 41\n    }\n\n\
    \    // The largest prime factor is 43\n    if n%43 == 0 {\n        return 43\n\
    \    }\n\n    // The largest prime factor is 47\n    if n%47 == 0 {\n        return\
    \ 47\n    }\n\n    // The largest prime factor is 53\n    if n%53 == 0 {\n   \
    \     return 53\n    }\n\n    // The largest prime factor is 59\n    if n%59 ==\
    \ 0 {\n        return 59\n    }\n\n    // The largest prime factor is 61\n   \
    \ if n%61 == 0 {\n        return 61\n    }\n\n    // The largest prime factor\
    \ is 67\n    if n%67 == 0 {\n        return 67\n    }\n\n    // The largest prime\
    \ factor is 71\n    if n%71 == 0 {\n        return 71\n    }\n\n    // The largest\
    \ prime factor is 73\n    if n%73 == 0 {\n        return 73\n    }\n\n    // The\
    \ largest prime factor is 79\n    if n%79 == 0 {\n        return 79\n    }\n\n\
    \    // The largest prime factor is 83\n    if n%83 == 0 {\n        return 83\n\
    \    }\n\n    // The largest prime factor is 89\n    if n%89 == 0 {\n        return\
    \ 89\n    }\n\n    // The largest prime factor is 97\n    if n%97 == 0 {\n   \
    \     return 97\n    }\n\n    // The largest prime factor is 101\n    if ", " \
    \   var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return factor\n            } else {\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            }\n        }\n    }\n\
    \    return maxFactor", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor", "    var largestPrimeFactor\
    \ = Int()\n    for i := 2; i <= n/2; i += 1 {\n        if n % i == 0 {\n     \
    \       largestPrimeFactor = i\n            break\n        }\n    }\n    return\
    \ largestPrimeFactor", "    var largest = 1\n    var prime = 1\n    for i := 2;\
    \ i <= n; i++ {\n        if n % i == 0 {\n            largest = i\n          \
    \  prime = 1\n        } else {\n            prime = 0\n        }\n    }\n    if\
    \ prime == 1 {\n        return largest\n    } else {\n        return largest *\
    \ largest_prime_factor(largest)\n    }", "    var max_factor: Int = 0\n    for\
    \ factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n    \
    \        if factor > max_factor {\n                max_factor = factor\n     \
    \       }\n        }\n    }\n    return max_factor", "    var largest = 1\n  \
    \  for factor in 2..n {\n        if n % factor == 0 {\n            largest = factor\n\
    \        }\n    }\n    return largest", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return 0\n        \
    \    }\n            maxFactorFound = true\n            maxFactor = factor\n  \
    \      }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n  \
    \  return 0", "    var largest = 1\n    var factor = 2\n    for i := 2; i <= n;\
    \ i++ {\n        if n % i == 0 {\n            largest = i\n            factor\
    \ = 1\n        } else {\n            factor *= i\n        }\n    }\n    return\
    \ largest", "    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n    \
    \        if maxFactorFound {\n                return factor\n            }\n \
    \           maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \    }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return n",
  "    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n    for i := 2;\
    \ i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n  \
    \              max_factor = i\n                max_factor_index = i\n        \
    \    }\n        }\n    }\n    return max_factor", "    var maxFactor = Int()\n\
    \    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n\
    \            if maxFactor < factor {\n                maxFactor = factor\n   \
    \         }\n        }\n    }\n    return maxFactor", "    if n < 2 {\n      \
    \  return n\n    }\n    var max_factor = 1\n    var max_factor_index = 0\n   \
    \ for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ < i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor", "    var largest = 1\n\
    \    var largestPrimeFactor = 1\n    for i := 2; i <= n; i++ {\n        if n %\
    \ i == 0 {\n            if largestPrimeFactor > i {\n                largestPrimeFactor\
    \ = i\n                largest = i\n            }\n        }\n    }\n    return\
    \ largest", "    var maxFactor = Int()\n    var maxFactorFound = false\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            } else {\n                maxFactorFound\
    \ = true\n                maxFactor = factor\n            }\n        }\n    }\n\
    \    return maxFactor", "    if n < 2 {\n        return n\n    }\n    var max_factor\
    \ = 1\n    for factor in 2..n {\n        if n % factor == 0 {\n            max_factor\
    \ = factor\n            break\n        }\n    }\n    return max_factor", "   \
    \ var maxFactor = Int()\n    for factor in 2...n {\n        if n % factor == 0\
    \ {\n            if maxFactor < factor {\n                maxFactor = factor\n\
    \            }\n        }\n    }\n    return maxFactor", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i < n; i++ {\n \
    \       if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    var factor: Int = 0\n    var i: Int = 0\n    var\
    \ j: Int = 0\n    var m: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n   \
    \ var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n\
    \    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int =\
    \ 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int\
    \ = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g:\
    \ Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var\
    \ k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n   \
    \ var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n\
    \    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int =\
    \ 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int\
    \ = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d:\
    \ Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var\
    \ h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n   \
    \ var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n\
    \    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int =\
    \ 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int\
    \ = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a:\
    \ Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var\
    \ e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n   \
    \ var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n\
    \    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int =\
    \ 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int\
    \ = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x:\
    \ Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var\
    \ b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    if n < 2 {\n        return n\n    }\n    \n    var\
    \ largest = 1\n    var largestPrimeFactor = 1\n    \n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            largestPrimeFactor = i\n           \
    \ largest = i\n        }\n    }\n    \n    return largestPrimeFactor", "    if\
    \ n < 2 {\n        return n\n    }\n    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return 0\n            }\n           \
    \ maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n  \
    \  if maxFactorFound {\n        return maxFactor\n    }\n    return 0", "    var\
    \ max_factor = 1\n    var max_factor_index = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor_index", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return maxFactor\n\
    \            }\n            maxFactor = factor\n            maxFactorFound = true\n\
    \        }\n    }\n    return maxFactor", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            if\
    \ largestPrimeFactor < i {\n                largestPrimeFactor = i\n         \
    \   }\n            if largest < i {\n                largest = i\n           \
    \ }\n        }\n    }\n    return largest", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for i := 2; i <= n / 2; i += 1 {\n        if n % i == 0 {\n       \
    \     largestPrimeFactor = i\n            if largest < largestPrimeFactor {\n\
    \                largest = largestPrimeFactor\n            }\n        }\n    }\n\
    \    return largest", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    if\
    \ n == 1 {\n        return 1\n    }\n    \n    var maxFactor = 1\n    var maxFactorIndex\
    \ = 0\n    \n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n        \
    \    if maxFactor < i {\n                maxFactor = i\n                maxFactorIndex\
    \ = i\n            }\n        }\n    }\n    \n    return maxFactor", "    if n\
    \ < 2 {\n        return n\n    }\n    \n    var max_factor = 1\n    var max_factor_index\
    \ = 0\n    \n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n        \
    \    if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    \n    return max_factor_index", " \
    \   if n < 2 {\n        return n\n    }\n    \n    var max_factor = 1\n    var\
    \ max_factor_index = 0\n    \n    for i := 2; i <= n; i++ {\n        if n % i\
    \ == 0 {\n            if max_factor < i {\n                max_factor = i\n  \
    \              max_factor_index = i\n            }\n        }\n    }\n    \n \
    \   return max_factor_index", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return 0\n        \
    \    }\n            maxFactorFound = true\n            maxFactor = factor\n  \
    \      }\n    }\n    if maxFactorFound {\n        return maxFactor\n    }\n  \
    \  return 0", "    var maxFactor = Int()\n    var maxFactorFound = false\n   \
    \ for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n\
    \            if maxFactorFound {\n                return 0\n            }\n  \
    \          maxFactorFound = true\n            maxFactor = factor\n        }\n\
    \    }\n    if maxFactorFound {\n        return maxFactor\n    }\n    return 0",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return 0\n            }\n            maxFactorFound = true\n     \
    \       maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n      \
    \  return maxFactor\n    }\n    return 0", "    if n < 2 {\n        return n\n\
    \    }\n    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor\
    \ in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound {\n\
    \                return 0\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    return maxFactor", "\t\
    let factors = prime_factors(n)\n\treturn factors.max()", "    var max_factor:\
    \ Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor_index", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return 0\n            }\n           \
    \ maxFactorFound = true\n            maxFactor = factor\n        }\n    }\n  \
    \  if maxFactorFound {\n        return maxFactor\n    }\n    return 0", "    var\
    \ maxFactor = Int()\n    for factor in 2...n {\n        if n % factor == 0 {\n\
    \            if maxFactor < factor {\n                maxFactor = factor\n   \
    \         }\n        }\n    }\n    return maxFactor", "    var max_factor = 1\n\
    \    var max_factor_index = 0\n    for i := 2; i < n; i++ {\n        if n % i\
    \ == 0 {\n            if max_factor < i {\n                max_factor = i\n  \
    \              max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor", "    var maxFactor = Int()\n    var maxFactorFound = false\n  \
    \  for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return 0\n            }\n            maxFactorFound = true\n\
    \            maxFactor = factor\n        }\n    }\n    return maxFactor", "  \
    \  var max_factor: Int = 0\n    var max_factor_index: Int = 0\n    for i := 2;\
    \ i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n  \
    \              max_factor = i\n                max_factor_index = i\n        \
    \    }\n        }\n    }\n    return max_factor", "    if n < 2 {\n        return\
    \ n\n    }\n    \n    var maxFactor = 1\n    var maxFactorFound = false\n    \n\
    \    for factor in 2..n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return factor\n            }\n            maxFactorFound\
    \ = true\n            maxFactor = factor\n        }\n    }\n    \n    return maxFactor",
  "    var largest = 1\n    var prime = 1\n    for i := 2; i <= n; i++ {\n       \
    \ if n % i == 0 {\n            largest = i\n            prime = 1\n        } else\
    \ {\n            prime = 0\n        }\n    }\n    if prime == 1 {\n        largest\
    \ = largest * prime\n    }\n    return largest", "    var largest = 1\n    for\
    \ factor in 2...n {\n        if n % factor == 0 {\n            largest = factor\n\
    \        }\n    }\n    return largest", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ largest < i {\n                largest = i\n                largestPrimeFactor\
    \ = 1\n            } else {\n                largestPrimeFactor++\n          \
    \  }\n        }\n    }\n    return largestPrimeFactor", "    var max_factor: Int\
    \ = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n/2; i++ {\n  \
    \      if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor", "    var largestPrimeFactor = 2 // Start with 2\n   \
    \ var largestPrimeFactorFound = false // Start with false\n    for i := 2; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            if largestPrimeFactorFound {\n\
    \                largestPrimeFactor = i\n            } else {\n              \
    \  largestPrimeFactorFound = true\n                largestPrimeFactor = i\n  \
    \          }\n        }\n    }\n    return largestPrimeFactor", "    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return 0\n            }\n            maxFactorFound = true\n     \
    \       maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n      \
    \  return maxFactor\n    }\n    return 0", "    var largestPrimeFactor = Int(1)\n\
    \    var largestPrimeFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if !largestPrimeFactorFound\
    \ {\n                largestPrimeFactorFound = true\n                largestPrimeFactor\
    \ = factor\n            } else {\n                if factor > largestPrimeFactor\
    \ {\n                    largestPrimeFactorFound = true\n                    largestPrimeFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return largestPrimeFactor",
  "    var largest = 1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n \
    \           largest = i\n            break\n        }\n    }\n    return largest",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n\
    \ {\n        if n % factor == 0 {\n            if maxFactorFound {\n         \
    \       return 0\n            }\n            maxFactorFound = true\n         \
    \   maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n        return\
    \ maxFactor\n    }\n    return 0", "    var maxFactor = Int()\n    for factor\
    \ in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n           \
    \ if maxFactor < factor {\n                maxFactor = factor\n            }\n\
    \        }\n    }\n    return maxFactor", "    var max_factor: Int = 0\n    var\
    \ max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            if max_factor < i {\n                max_factor = i\n     \
    \           max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor_index", "    var maxFactor = Int()\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactor < factor {\n \
    \               maxFactor = factor\n            }\n        }\n    }\n    return\
    \ maxFactor", "    var max_factor: Int = 0\n    var max_factor_index: Int = 0\n\
    \    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            if max_factor\
    \ == 0 || max_factor > i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    var\
    \ factor: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var m: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var m: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var m: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var m: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int =\
    \ 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int\
    \ = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z:\
    \ Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var\
    \ d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n   \
    \ var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n\
    \    var m: Int = 0\n    var p: Int = 0\n", "    var max_factor = 1\n    var max_factor_index\
    \ = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    var\
    \ maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2...n {\n\
    \        if n % factor == 0 {\n            if maxFactorFound {\n             \
    \   return 0\n            }\n            maxFactorFound = true\n            maxFactor\
    \ = factor\n        }\n    }\n    if maxFactorFound {\n        return maxFactor\n\
    \    }\n    return 0", "    var max_factor: Int = 0\n    var max_factor_index:\
    \ Int = 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n          \
    \  if max_factor < i {\n                max_factor = i\n                max_factor_index\
    \ = i\n            }\n        }\n    }\n    return max_factor_index", "    var\
    \ maxFactor = 2 // start at 2 since 2 is the largest factor\n    var maxFactorFound\
    \ = false\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if !maxFactorFound {\n                maxFactorFound = true\n\
    \                maxFactor = factor\n            } else {\n                if\
    \ maxFactor != factor {\n                    maxFactorFound = false\n        \
    \        }\n            }\n        }\n    }\n    return maxFactor", "    var maxFactor\
    \ = Int()\n    var maxFactorPrime = Int()\n    for i := 2; i <= n; i++ {\n   \
    \     if n % i == 0 {\n            if maxFactorPrime < i {\n                maxFactor\
    \ = i\n                maxFactorPrime = i\n            }\n            if maxFactorPrime\
    \ == i {\n                maxFactor = i\n            }\n        }\n    }\n   \
    \ return maxFactor", "    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if !maxFactorFound\
    \ {\n                maxFactor = factor\n                maxFactorFound = true\n\
    \            } else {\n                if factor > maxFactor {\n             \
    \       maxFactor = factor\n                }\n            }\n        }\n    }\n\
    \    return maxFactor", "    var maxFactor = Int()\n    var maxFactorFound = false\n\
    \    for factor in 2...n {\n        if n % factor == 0 {\n            if maxFactorFound\
    \ {\n                return 0\n            }\n            maxFactor = factor\n\
    \            maxFactorFound = true\n        }\n    }\n    if maxFactorFound {\n\
    \        return maxFactor\n    }\n    return 0", "    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2..n {\n        if n % factor\
    \ == 0 {\n            if !maxFactorFound {\n                maxFactor = factor\n\
    \                maxFactorFound = true\n            } else {\n               \
    \ if maxFactor > factor {\n                    maxFactor = factor\n          \
    \      }\n            }\n        }\n    }\n    return maxFactor", "    if n <\
    \ 2 {\n        return n\n    }\n    \n    var maxFactor = 2 // start at 2\n  \
    \  var maxFactorIsPrime = true\n    \n    for factor in 2..n {\n        if n %\
    \ factor == 0 {\n            if !maxFactorIsPrime {\n                maxFactor\
    \ = factor\n                maxFactorIsPrime = true\n            } else {\n  \
    \              maxFactorIsPrime = false\n            }\n        }\n    }\n   \
    \ \n    return maxFactor", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor", "    if n < 2 {\n        return n\n\
    \    }\n    var max_factor = 1\n    for factor in 2..Int(sqrt(Double(n))) + 1\
    \ {\n        if n % factor == 0 {\n            max_factor = factor\n        }\n\
    \    }\n    return max_factor", "    var maxFactor = 2 // Start with 2\n    var\
    \ maxFactorFound = false // Start with false\n    for factor := 3; factor <= n;\
    \ factor++ {\n        if n % factor == 0 {\n            if maxFactorFound {\n\
    \                // Found a factor > maxFactor\n                return factor\n\
    \            }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    if maxFactorFound {\n        // Found a factor > maxFactor\n\
    \        return maxFactor\n    }\n    return n // No factor found", "    var maxFactor\
    \ = 2 // start at 2\n    var maxFactorFound = false\n    for factor in 2..n {\n\
    \        if n % factor == 0 {\n            if !maxFactorFound {\n            \
    \    maxFactorFound = true\n                maxFactor = factor\n            }\
    \ else {\n                if maxFactor < factor {\n                    maxFactor\
    \ = factor\n                }\n            }\n        }\n    }\n    return maxFactor",
  "    var largest = 1\n    var largestPrimeFactor = 1\n    for i := 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            if largest == 1 {\n                largest\
    \ = i\n                largestPrimeFactor = i\n            } else {\n        \
    \        if largestPrimeFactor % i == 0 {\n                    largestPrimeFactor\
    \ = i\n                } else {\n                    largest = i\n           \
    \         largestPrimeFactor = i\n                }\n            }\n        }\n\
    \    }\n    return largest", "    var maxFactor = Int()\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return 0\n            }\n           \
    \ maxFactor = factor\n            maxFactorFound = true\n        }\n    }\n  \
    \  if maxFactorFound {\n        return maxFactor\n    }\n    return 0", "    var\
    \ max_factor: Int = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n       \
    \         max_factor = i\n                max_factor_index = i\n            }\n\
    \        }\n    }\n    return max_factor", "    var maxFactor = Int()\n    var\
    \ maxFactorFound = false\n    for factor in 2...n {\n        if n % factor ==\
    \ 0 {\n            if maxFactorFound {\n                return factor\n      \
    \      } else {\n                maxFactorFound = true\n                maxFactor\
    \ = factor\n            }\n        }\n    }\n    return maxFactor", "    var maxFactor\
    \ = Int()\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return 0\n            }\n            maxFactorFound = true\n     \
    \       maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n      \
    \  return maxFactor\n    }\n    return 0", "    var max_factor: Int = 0\n    var\
    \ max_factor_index: Int = 0\n    for i := 2; i <= n/2; i++ {\n        if n % i\
    \ == 0 {\n            if max_factor < i {\n                max_factor = i\n  \
    \              max_factor_index = i\n            }\n        }\n    }\n    return\
    \ max_factor", "    var max_factor = 1\n    var max_factor_index = 0\n    for\
    \ i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if max_factor <\
    \ i {\n                max_factor = i\n                max_factor_index = i\n\
    \            }\n        }\n    }\n    return max_factor", "    var maxFactor =\
    \ Int()\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return 0\n            }\n            maxFactorFound = true\n     \
    \       maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n      \
    \  return maxFactor\n    }\n    return 0", "    var largest = 1\n    var largestPrimeFactor\
    \ = 1\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            if\
    \ largest < i {\n                largest = i\n                largestPrimeFactor\
    \ = i\n            }\n            if largest == i {\n                largestPrimeFactor\
    \ = i\n            }\n        }\n    }\n    return largestPrimeFactor", "    var\
    \ maxFactor = 2 // start at 2 since 2 is the smallest factor\n    var maxFactorFound\
    \ = false\n    for factor in 2...n {\n        if n % factor == 0 {\n         \
    \   if maxFactorFound {\n                return factor\n            } else {\n\
    \                maxFactorFound = true\n                maxFactor = factor\n \
    \           }\n        }\n    }\n    return maxFactor", "    var maxFactor = Int()\n\
    \    var maxFactorFound = false\n    for factor in 2...n {\n        if n % factor\
    \ == 0 {\n            if maxFactorFound {\n                return factor\n   \
    \         }\n            maxFactorFound = true\n            maxFactor = factor\n\
    \        }\n    }\n    return maxFactor", "    var largestPrimeFactor = Int(1)\n\
    \    for factor in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n\
    \            largestPrimeFactor = factor\n        }\n    }\n    return largestPrimeFactor",
  "    var maxFactor = Int()\n    var maxFactorFound = false\n    for factor in 2..Int(sqrt(Double(n)))\
    \ + 1 {\n        if n % factor == 0 {\n            if maxFactorFound {\n     \
    \           return 0\n            }\n            maxFactorFound = true\n     \
    \       maxFactor = factor\n        }\n    }\n    if maxFactorFound {\n      \
    \  return maxFactor\n    }\n    return 0", "    var max_factor = 1\n    for factor\
    \ in 2..Int(sqrt(Double(n))) + 1 {\n        if n % factor == 0 {\n           \
    \ if factor > max_factor {\n                max_factor = factor\n            }\n\
    \        }\n    }\n    return max_factor", "    if n < 2 {\n        return 0\n\
    \    }\n    var max_factor = 1\n    var max_factor_index = 0\n    for i := 2;\
    \ i <= n; i++ {\n        if n % i == 0 {\n            if max_factor < i {\n  \
    \              max_factor = i\n                max_factor_index = i\n        \
    \    }\n        }\n    }\n    return max_factor_index", "    var max_factor: Int\
    \ = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n; i++ {\n    \
    \    if n % i == 0 {\n            if max_factor == 0 || max_factor > i {\n   \
    \             max_factor = i\n                max_factor_index = i\n         \
    \   }\n        }\n    }\n    return max_factor_index", "    var max_factor: Int\
    \ = 0\n    var max_factor_index: Int = 0\n    for i := 2; i <= n/2; i++ {\n  \
    \      if n % i == 0 {\n            if max_factor < i {\n                max_factor\
    \ = i\n                max_factor_index = i\n            }\n        }\n    }\n\
    \    return max_factor_index"]
stop_tokens:
- "\n}"
