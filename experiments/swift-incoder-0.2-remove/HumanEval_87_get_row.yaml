name: HumanEval_87_get_row
language: swift
prompt: "\n/// You are given a 2 dimensional data, as a nested lists,\n/// which is\
  \ similar to matrix, however, unlike matrices,\n/// each row may contain a different\
  \ number of columns.\n/// Given lst, and integer x, find integers x in the list,\n\
  /// and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple\
  \ is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially\
  \ by rows in ascending order.\n/// Also, sort coordinates of the row by columns\
  \ in descending order.\n/// Examples:\nfunc get_row(lst: [[Int]], x: Int) -> [(Int,\
  \ Int)] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2,\
  \ 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2,\
  \ 0)])\nassert(get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], x: 2) == [(0,\
  \ 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\nassert(get_row(lst: [[1, 2, 3, 4,\
  \ 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1,\
  \ 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1) == [(0, 0), (1, 0), (2,\
  \ 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)])\n\
  assert(get_row(lst: [] as [[Int]], x: 1) == [] as [(Int, Int)])\nassert(get_row(lst:\
  \ [[1]], x: 2) == [] as [(Int, Int)])\nassert(get_row(lst: [[] as [Int], [1], [1,\
  \ 2, 3]], x: 3) == [(2, 2)])"
completions: ["    var result = [(Int, Int)]()\n    var row = 0\n    var column =\
    \ 0\n    for row in lst {\n        var col = 0\n        for col in row {\n   \
    \         if col == x {\n                result.append((row, col))\n         \
    \   }\n        }\n    }\n    result.sortInPlaceBy({ $0.0 < $1.0 })\n    result.sortInPlaceBy({\
    \ $1.0 > $0.0 })\n    return result", "    var result = [(Int, Int)]()\n    var\
    \ row = 0\n    var column = 0\n    for row in lst {\n        column = 0\n    \
    \    for column in row {\n            if column == x {\n                result.append((row,\
    \ column))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var ", " \
    \   var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        for col in row {\n            if col == x {\n            \
    \    result.append( (row, col) )\n            }\n        }\n    }\n    result.sort(by:\
    \ {$0.0 < $1.0})\n    result.sort(by: {$1.0 > $0.0})\n    return result", "  \
    \  var row = [Int]()\n    var coords = [(Int, Int)]()\n    for row in lst {\n\
    \        coords.append((row.count, row.count))\n    }\n    coords.sortInPlace()\n\
    \    coords.sortInPlace{ $0.0 < $1.0 }\n    var result = [(Int, Int)]()\n    for\
    \ coord in coords {\n        if coord.0 < x {\n            result.append((coord.1,\
    \ coord.0))\n        }\n    }\n    return result", "    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for column in row {\n            if column == x\
    \ {\n                result.append( (row, column) )\n            }\n        }\n\
    \    }\n    result.sort(by: { (first, second) -> Bool in\n        return first.0\
    \ < second.0\n    })\n    result.sort(by: { (first, second) -> Bool in\n     \
    \   return second.0 < first.0\n    })\n    return result", "    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for column in row {\n            if column\
    \ == x {\n                result.append( (row, column) )\n            }\n    \
    \    }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { ($0.1, $1.1) })\n    return result", "    var result = [(Int, Int)]()\n  \
    \  var row = 0\n    var column = 0\n    for row in lst {\n        column = 0\n\
    \        for column in row {\n            if column == x {\n                result.append((row,\
    \ column))\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sort(by: { (row1,\
    \ row2) in\n        return row1[0] > row2[0]\n    })\n    result.sort(by: { (row1,\
    \ row2) in\n        return row1[1] > row2[1]\n    })\n    return result", "  \
    \  var result = [(Int, Int)]()\n    var row = 0\n    var column = 0\n    for row\
    \ in lst {\n        var col = 0\n        for col in row {\n            if col\
    \ == x {\n                result.append((row, col))\n            }\n        }\n\
    \    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    var result = [(Int, Int)]()\n    for\
    \ row in lst {\n        for column in row {\n            if column == x {\n  \
    \              result.append((row, column))\n            }\n        }\n    }\n\
    \    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by: { ($0.1,\
    \ $1.1) })\n    return result", "    var row = [Int]()\n    var coords = [Int]()\n\
    \    var result = [(Int, Int)]()\n    var i = 0\n    for row in lst {\n      \
    \  coords = row\n        coords.insert(coords.end(), 0)\n        coords.reverse()\n\
    \        for j in 0..<coords.count {\n            if coords[j] == x {\n      \
    \          result.append((i, j))\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    return result", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var coord2 = Int()\n    var coord3 = Int()\n    var coord4\
    \ = Int()\n    var coord5 = Int()\n    var coord6 = Int()\n    var coord7 = Int()\n\
    \    var coord8 = Int()\n    var coord9 = Int()\n    var coord10 = Int()\n   \
    \ var coord11 = Int()\n    var coord12 = Int()\n    var coord13 = Int()\n    var\
    \ coord14 = Int()\n    var coord15 = Int()\n    var coord16 = Int()\n    var coord17\
    \ = Int()\n    var coord18 = Int()\n    var coord19 = Int()\n    var coord20 =\
    \ Int()\n    var coord21 = Int()\n    var coord22 = Int()\n    var coord23 = Int()\n\
    \    var coord24 = Int()\n    var coord25 = Int()\n    var coord26 = Int()\n \
    \   var coord27 = Int()\n    var coord28 = Int()\n    var coord29 = Int()\n  \
    \  var coord30 = Int()\n    var coord31 = Int()\n    var coord32 = Int()\n   \
    \ var coord33 = Int()\n    var coord34 = Int()\n    var coord35 = Int()\n    var\
    \ coord36 = Int()\n    var coord37 = Int()\n    var coord38 = Int()\n    var coord39\
    \ = Int()\n    var coord40 = Int()\n    var coord41 = Int()\n    var coord42 =\
    \ Int()\n    var coord43 = Int()\n    var coord44 = Int()\n    var coord45 = Int()\n\
    \    var coord46 = Int()\n    var coord47 = Int()\n    var coord48 = Int()\n \
    \   var coord49 = Int()\n    var coord50 = Int()\n    var coord51 = Int()\n  \
    \  var coord52 = Int()\n    var coord53 = Int()\n    var coord54 = Int()\n   \
    \ var coord55 = Int()\n    var coord56 = Int()\n    var coord57 = Int()\n    var\
    \ coord58 = Int()\n    var coord59 = Int()\n    var coord60 = Int()\n    var coord61\
    \ = Int()\n    var coord62 = Int()\n    var coord63 = Int()\n    var coord64 =\
    \ Int()\n    var coord65 = Int()\n    var coord66 = Int()\n    var coord67 = Int()\n\
    \    var coord68 = Int()\n    var coord69 = Int()\n    var coord70 = Int()\n \
    \   var coord71 = Int()\n    var coord72 = Int()\n    var coord73 = Int", "  \
    \  var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var\
    \ rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord\
    \ = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n\
    \    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var ", "    var result = [(Int,\
    \ Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in lst[row].reversed()\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        for col in lst[row].reversed() {\n            if col == x {\n\
    \                result.append( (row, col) )\n                break\n        \
    \    }\n        }\n    }\n    return result", "    var row = [Int]()\n    var\
    \ coord = [(Int, Int)]()\n    var row_index = 0\n    var col_index = 0\n    for\
    \ row in lst {\n        if row_index == x {\n            break\n        }\n  \
    \      coord.append((row_index, col_index))\n        row_index += 1\n    }\n \
    \   coord.sortInPlace()\n    coord.sortInPlaceInDescendingOrder()\n    return\
    \ coord", "    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ col in row.enumerated() {\n            if col.0 == x {\n                result.append(col)\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{\
    \ $0.1 < $1.1 }\n    return result", "    var row = [Int]()\n    var coords =\
    \ [Int]()\n    var result = [(Int, Int)]()\n    for row in lst {\n        coords\
    \ = row.sorted()\n        coords.reverse()\n        for coord in coords {\n  \
    \          if coord == x {\n                result.append(coord)\n           \
    \ }\n        }\n    }\n    return result", "    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var result = [(Int, Int)]()\n    \n    for row in lst {\n   \
    \     coords = row.map { $0 }\n        coords.sort { $0 < $1 }\n        coords.reverse()\n\
    \        coords.insert(coords.count - 1, x)\n        result.append((coords.first,\
    \ coords.last))\n    }\n    \n    result.sort { $0.0 < $1.0 }\n    return result",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        var col = 0\n        for col in row {\n            if col\
    \ == x {\n                result.append((row, col))\n            }\n        }\n\
    \    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.1 < b.1\n    })\n    return result", " \
    \   var coords = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in lst[row].reversed() {\n        if col == x {\n            break\n   \
    \     }\n    }\n    for row in lst {\n        for col in lst[row].reversed() {\n\
    \            if col == x {\n                coords.append((row, col))\n      \
    \      }\n        }\n    }\n    return coords.sorted(by: { $0.0 < $1.0 })", " \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var ", " \
    \   var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { ($0.1, $1.1) })\n    return result", "    var result = [(Int, Int)]()\n  \
    \  var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in 0..<row.count {\n       \
    \ result.append((row, col))\n    }\n    return result", "    var row = [Int]()\n\
    \    var coords = [Int]()\n    var result = [(Int, Int)]()\n    var row_index\
    \ = 0\n    var col_index = 0\n    for row in lst {\n        col_index = 0\n  \
    \      for col in row {\n            if col == x {\n                coords.append(col_index)\n\
    \            }\n            col_index += 1\n        }\n        row_index += 1\n\
    \    }\n    coords.sort()\n    coords.reverse()\n    for coord in coords {\n \
    \       result.append((row_index, coord))\n    }\n    return result", "    var\
    \ result = [(Int, Int)]()\n    var row = 0\n    var column = 0\n    for row in\
    \ lst {\n        var column = 0\n        for column in row {\n            if column\
    \ == x {\n                result.append((row, column))\n            }\n      \
    \  }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    var row = [Int]()\n    var coords =\
    \ [Int]()\n    var rows = [Int]()\n    var coord = [Int]()\n    var row_index\
    \ = 0\n    var col_index = 0\n    var coord_index = 0\n    var result = [Int]()\n\
    \    for row in lst {\n        if row_index == x {\n            coords.append(coord)\n\
    \            rows.append(row)\n            coord = [Int]()\n            row_index\
    \ = 0\n            col_index = 0\n            coord_index = 0\n        }\n   \
    \     for col in row {\n            coord[coord_index] = col\n            coord_index\
    \ += 1\n        }\n        row_index += 1\n    }\n    coords.sortInPlace()\n \
    \   rows.sortInPlace()\n    for row in rows {\n        coord.sortInPlace()\n \
    \       for col in coord {\n            result.append((row, col))\n        }\n\
    \    }\n    return result", "    var row = [Int]()\n    var coord = [Int]()\n\
    \    var result = [Int]()\n    for row in lst {\n        coord = row\n    }\n\
    \    coord = coord.sorted()\n    coord = coord.reversed()\n    for row in coord\
    \ {\n        if row == x {\n            result = row\n        }\n    }\n    return\
    \ result", "    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sort(by: { (r1,\
    \ r2) -> Bool in\n        let r1Row = r1.0\n        let r2Row = r2.0\n       \
    \ return r1Row < r2Row\n    })\n    result.sort(by: { (r1, r2) -> Bool in\n  \
    \      let r1Col = r1.1\n        let r2Col = r2.1\n        return r1Col > r2Col\n\
    \    })\n    return result", "    var result = [(Int, Int)]()\n    for row in\
    \ lst {\n        for column in row {\n            if column == x {\n         \
    \       result.append((row, column))\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder()\n    return result", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for column in row {\n      \
    \      if column == x {\n                result.append( (row, column) )\n    \
    \        }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { ($0.1, $1.1) })\n    return result", "    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var result = [Int]()\n    var i = 0\n    for row in lst {\n \
    \       coords = row\n        coords.insert(x, 0)\n        result.insert(coords.count,\
    \ coords.count)\n        i += 1\n    }\n    result.sort(by: {$0 < $1})\n    result.sort(by:\
    \ {$1 < $0})\n    return result", "    var coords = [(0, 0)]\n    for row in lst\
    \ {\n        var coord = (0, 0)\n        for col in row {\n            if col\
    \ == x {\n                coord = (row, col)\n            }\n        }\n     \
    \   coords.append(coord)\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInPlace()\n\
    \    return coords", "    var row = [Int]()\n    var coord = [(Int, Int)]()\n\
    \    var row_index = 0\n    var col_index = 0\n    for row in lst {\n        if\
    \ row_index == x {\n            break\n        }\n        coord.append((row_index,\
    \ col_index))\n        row_index += 1\n    }\n    coord.sortInPlace()\n    coord.reverse()\n\
    \    var result = [(Int, Int)]()\n    for coord in coord {\n        result.append((coord[0],\
    \ coord[1]))\n    }\n    return result", "    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var result = [Int]()\n    for row in lst {\n        coords =\
    \ row.map { $0 }\n        if coords.contains(x) {\n            result.append((coords.first!,\
    \ coords.last!))\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var coords = [(Int, Int)]()\n\
    \    for row in lst {\n        coords.append((row.count, row.count))\n    }\n\
    \    coords.sortInPlace(by: {$0.0 < $1.0})\n    coords.sortInPlace(by: {$1.0 >\
    \ $0.0})\n    var result = [(Int, Int)]()\n    for coord in coords {\n       \
    \ if coord.0 == x {\n            result.append((coord.1, coord.2))\n        }\n\
    \    }\n    return result", "    var result = [(Int, Int)]()\n    var row = 0\n\
    \    var col = 0\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {", "    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n    var row_index\
    \ = 0\n    var col_index = 0\n    var row_count = 0\n    var col_count = 0\n \
    \   for row in lst {\n        row_count += 1\n        if row_count == 1 {\n  \
    \          cols = row\n        } else {\n            col_index = 0\n         \
    \   for col in row {\n                cols.append(col)\n                col_index\
    \ += 1\n                if col_index == x {\n                    coords.append(col_index)\n\
    \                }\n            }\n        }\n    }\n    coords.sort()\n    coords.reverse()\n\
    \    coords.sort()\n    coords.reverse()\n    for coord in coords {\n        rows.append(coord)\n\
    \    }\n    rows.sort()\n    rows.reverse()\n    rows.sort()\n    rows.reverse()\n\
    \    for row in rows {\n        row_index = 0\n        for col in cols {\n   \
    \         if col == row {\n                rows.append(row)\n                row_index\
    \ += 1\n            }\n        }\n    }\n    return rows", "    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for col in row.enumerated() {\n     \
    \       if col.0 == x {\n                result.append(col.1)\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlace{ $0.0 < $1.0\
    \ }\n    return result", "    var result = [(Int, Int)]()\n    var row = 0\n \
    \   var column = 0\n    for row in lst {\n        var column = 0\n        for\
    \ column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sort(by: { (first,\
    \ second) -> Bool in\n        return first.0 < second\n    })\n    result.sort(by:\
    \ { (first, second) -> Bool in\n        return second.0 < first.0\n    })\n  \
    \  return result", "    var row = [Int]()\n    var coord = [Int]()\n    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        coord = row.sorted()\n     \
    \   coord.reverse()\n        for col in coord {\n            if col == x {\n \
    \               result.append(coord)\n            }\n        }\n    }\n    result.sort{$0.0\
    \ < $1.0}\n    return result", "    var coords = [(0, 0), (len(lst) - 1, 0)]\n\
    \    var rows = [(0, 0)]\n    for row in coords {\n        var cols = [(0, 0)]\n\
    \        for col in cols {\n            if lst[row[0]][col[0]] == x {\n      \
    \          row = (row[0] + 1, col[1])\n                break\n            }\n\
    \            if lst[row[0]][col[0]] > x {\n                row = (row[0], col[1]\
    \ + 1)\n                break\n            }\n        }\n        cols = append(cols,\
    \ row)\n        coords = append(coords, row)\n    }\n    return rows", "    var\
    \ row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n  \
    \  var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n   \
    \ var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var coords =\
    \ [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n\
    \    var coord = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n \
    \   var coord = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n  \
    \  var coord = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var coord\
    \ = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var coord =\
    \ [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n \
    \   var rows = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n  \
    \  var rows = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var\
    \ rows = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var ", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ rows = [Int]()\n    var cols = [Int]()\n    var i = 0\n    for row in lst {\n\
    \        coords = row\n        rows = cols\n        cols = coords\n        i +=\
    \ 1\n    }\n    var result = [Int]()\n    for row in rows {\n        for col in\
    \ cols {\n            if col == x {\n                result.append((row, col))\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    return result",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in lst[row].reversed() {\n        if col == x {\n            break\n   \
    \     }\n    }\n    for row in lst {\n        for col in lst[row].reversed() {\n\
    \            if col == x {\n                result.append( (row, col) )\n    \
    \            break\n            }\n        }\n    }\n    return result", "   \
    \ var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var\
    \ i = 0\n    for row in lst {\n        coord = row\n        coords.append(coord)\n\
    \    }\n    coords.sortInPlace()\n    coords.sortInPlaceInPlace()\n    var result\
    \ = [Int]()\n    for coord in coords {\n        if coord[0] == x {\n         \
    \   result.append((coord, coord.count))\n        }\n    }\n    return result",
  "    var row = [Int]()\n    var coords = [(Int, Int)]()\n    var row_index = 0\n\
    \    var col_index = 0\n    for row in lst {\n        if row_index == x {\n  \
    \          coords.append((row_index, col_index))\n        }\n        row_index\
    \ += 1\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInPlace()\n   \
    \ return coords", "    var result = [(Int, Int)]()\n    var row = 0\n    var col\
    \ = 0\n    for row in lst {\n        var col = 0\n        for col in row {\n \
    \           if col == x {\n                result.append((row, col))\n       \
    \     }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var row = [Int]()\n    var coords = [Int]()\n    var result = [(Int, Int)]()\n\
    \    var row_index = 0\n    var col_index = 0\n    var row_coords = [Int]()\n\
    \    var col_coords = [Int]()\n    for row in lst {\n        row_coords.append(row_index)\n\
    \        col_coords.append(col_index)\n    }\n    coords.sort()\n    coords.reverse()\n\
    \    for coord in coords {\n        if coord == x {\n            result.append((row_coords[coord],\
    \ col_coords[coord]))\n        }\n    }\n    return result", "    var result =\
    \ [(Int, Int)]()\n    for row in lst {\n        for column in row {\n        \
    \    if column == x {\n                result.append((row, column))\n        \
    \    }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var coords = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            coords.append((row,\
    \ col))\n        }\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder()\n    return result", "    var row =\
    \ [Int]()\n    var coords = [Int]()\n    var result = [(Int, Int)]()\n    var\
    \ i = 0\n    for row in lst {\n        coords.append(i)\n        i += 1\n    }\n\
    \    coords.sortInPlace()\n    coords.sortInPlaceInPlace()\n    for row in lst\
    \ {\n        coords.sortInPlaceInPlace()\n        if coords.contains(x) {\n  \
    \          result.append((coords.first!, row.first!))\n        }\n    }\n    return\
    \ result", "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n\
    \    for row in lst {\n        var col = 0\n        for col in row {\n       \
    \     if col == x {\n                result.append((row, col))\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var row = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n    var\
    \ coord = [Int]()\n    var row_index = 0\n    var col_index = 0\n    var coord_index\
    \ = 0\n    for row in lst {\n        for col in row {\n            if col == x\
    \ {\n                coords.append(coord)\n                rows.append(row_index)\n\
    \                coord = []\n                col_index += 1\n            } else\
    \ {\n                coord.append(col)\n            }\n        }\n        row_index\
    \ += 1\n        col_index = 0\n    }\n    coords.sort()\n    rows.sort()\n   \
    \ coords.reverse()\n    rows.reverse()\n    return coords.map { (x, y) -> (Int,\
    \ Int) in\n        return (rows[y], x)\n    }", "    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        for column in row {\n            if column == x\
    \ {\n                result.append( (row, column) )\n            }\n        }\n\
    \    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder()\n    return result", "    var row =\
    \ [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n    var cols = [Int]()\n\
    \    var row_index = 0\n    var col_index = 0\n    var result = [Int]()\n    for\
    \ row in lst {\n        cols = row\n        rows.append(row)\n        col_index\
    \ = cols.count\n        for col in cols {\n            if col == x {\n       \
    \         coords.append((row_index, col_index))\n            }\n        }\n  \
    \  }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescending()\n    for\
    \ coord in coords {\n        result.append((coord.0, coord.1))\n    }\n    return\
    \ result", "    var row = [Int]()\n    var coord = [(Int, Int)]()\n    var row_index\
    \ = 0\n    var col_index = 0\n    for row in lst {\n        col_index = 0\n  \
    \      for col in row {\n            if col == x {\n                coord.append((row_index,\
    \ col_index))\n            }\n            col_index += 1\n        }\n        row_index\
    \ += 1\n    }\n    coord.sortInPlace()\n    coord.sortInPlaceInDescendingOrder()\
    \ // sort by columns in descending order\n    return coord", "    var result =\
    \ [(Int, Int)]()\n    for row in lst {\n        for column in row {\n        \
    \    if column == x {\n                result.append((row, column))\n        \
    \    }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ rows = [Int]()\n    var cols = [Int]()\n    var row_index = 0\n    var col_index\
    \ = 0\n    var row_index2 = 0\n    var col_index2 = 0\n    var row_index3 = 0\n\
    \    var col_index3 = 0\n    var row_index4 = 0\n    var col_index4 = 0\n    var\
    \ row_index5 = 0\n    var col_index5 = 0\n    var row_index6 = 0\n    var col_index6\
    \ = 0\n    var row_index7 = 0\n    var col_index7 = 0\n    var row_index8 = 0\n\
    \    var col_index8 = 0\n    var row_index9 = 0\n    var col_index9 = 0\n    var\
    \ row_index10 = 0\n    var col_index10 = 0\n    var row_index11 = 0\n    var col_index11\
    \ = 0\n    var row_index12 = 0\n    var col_index12 = 0\n    var row_index13 =\
    \ 0\n    var col_index13 = 0\n    var row_index14 = 0\n    var col_index14 = 0\n\
    \    var row_index15 = 0\n    var col_index15 = 0\n    var row_index16 = 0\n \
    \   var col_index16 = 0\n    var row_index17 = 0\n    var col_index17 = 0\n  \
    \  var row_index18 = 0\n    var col_index18 = 0\n    var row_index19 = 0\n   \
    \ var col_index19 = 0\n    var row_index20 = 0\n    var col_index20 = 0\n    var\
    \ row_index21 = 0\n    var col_index21 = 0\n    var row_index22 = 0\n    var col_index22\
    \ = 0\n    var row_index23 = 0\n    var col_index23 = 0\n    var row_index24 =\
    \ 0\n    var col_index24 = 0\n    var row_index25 = 0\n    var col_index25 = 0\n\
    \    var row_index26 = 0\n    var col_index26 = 0\n    var row_index27 = 0\n \
    \   var col_index27 = 0\n    var row_index28 = 0\n    var col_index28 = 0\n  \
    \  var row_index29 = 0\n    var col_index29 = 0\n    var row_index30 = 0\n   \
    \ var col_index30 = 0\n    var row_index31 = 0\n    var col_index31 = 0\n    var\
    \ row_index32 = 0\n    var col_index32 = 0\n    var row_index33 = 0\n    var col_index33\
    \ = 0\n    var row_index34 = 0\n    var col_index34 = 0\n    var row_index35 =\
    \ 0\n    var col_index35 = 0\n    var row_index36 = 0\n    var col_index36 = 0\n\
    \    var row_index37 = 0\n    var col_index37 = 0\n    var row_index38 = 0\n \
    \   var col_index38 = 0\n    var row_index39 = 0\n    var col_index39 = 0\n  \
    \  var row_index40 = 0\n    var col_index40 = 0\n    var row_index41 = 0\n", " \
    \   var coords = [(0, 0)]\n    for row in lst {\n        for col in row {\n  \
    \          if col == x {\n                coords.append((row, col))\n        \
    \    }\n        }\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords", "    var coords = [(0, 0)]\n    for row in lst {\n      \
    \  var coord = (0, 0)\n        for col in row {\n            if col == x {\n \
    \               coord = (row, col)\n            }\n        }\n        coords.append(coord)\n\
    \    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        var col = 0\n        for col in row {\n\
    \            if col == x {\n                result.append((row, col))\n      \
    \      }\n        }\n    }\n    result.sortInPlaceByKey(ascending: true)\n   \
    \ result.sortInPlaceByKey(ascending: false)\n    return result", "    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var result = [(Int, Int)]()\n    for\
    \ row in lst {\n        coords = row.map { $0 }\n        coords.sort { $0 < $1\
    \ }\n        coords.sort { $0 > $1 }\n        for coord in coords {\n        \
    \    if coord == x {\n                result.append((coord, coords.count))\n \
    \           }\n        }\n    }\n    result.sort { $0.0 < $1.0 }\n    return result",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sort(by: { (first, second) ->\
    \ Bool in\n        return first.0 < second\n    })\n    result.sort(by: { (first,\
    \ second) -> Bool in\n        return second.0 < first.0\n    })\n    return result",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in lst.first!.dropFirst().reversed() {\n        if col == x {\n        \
    \    break\n        }\n    }\n    for row in lst {\n        if row == x {\n  \
    \          break\n        }\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for col in row.dropFirst().reversed() {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        for ", "    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var rows = [Int]()\n    var coord = [Int]()\n    var row_index\
    \ = 0\n    var col_index = 0\n    var coord_index = 0\n    var row_indexes = [Int]()\n\
    \    var col_indexes = [Int]()\n    var coord_indexes = [Int]()\n    var row_indexes_sorted\
    \ = [Int]()\n    var col_indexes_sorted = [Int]()\n    var coord_indexes_sorted\
    \ = [Int]()\n    var row_indexes_sorted_index = 0\n    var col_indexes_sorted_index\
    \ = 0\n    var coord_indexes_sorted_index = 0\n    var row_indexes_sorted_index2\
    \ = 0\n    var col_indexes_sorted_index2 = 0\n    var coord_indexes_sorted_index2\
    \ = 0\n    var row_indexes_sorted_index3 = 0\n    var col_indexes_sorted_index3\
    \ = 0\n    var coord_indexes_sorted_index3 = 0\n    var row_indexes_sorted_index4\
    \ = 0\n    var col_indexes_sorted_index4 = 0\n    var coord_indexes_sorted_index4\
    \ = 0\n    var row_indexes_sorted_index5 = 0\n    var col_indexes_sorted_index5\
    \ = 0\n    var coord_indexes_sorted_index5 = 0\n    var row_indexes_sorted_index6\
    \ = 0\n    var col_indexes_sorted_index6 = 0\n    var coord_indexes_sorted_index6\
    \ = 0\n    var row_indexes_sorted_index7 = 0\n    var col_indexes_sorted_index7\
    \ = 0\n    var coord_indexes_sorted_index7 = 0\n    var row_indexes_sorted_index8\
    \ = 0\n    var col_indexes_sorted_index8 = 0\n    var coord_indexes_sorted_index8\
    \ = 0\n    var row_indexes_sorted_index9 = 0\n    var col_indexes_sorted_index9\
    \ = 0\n    var coord_indexes_sorted_index9 = 0\n    var row_indexes_sorted_index10\
    \ = 0\n    var col_indexes_sorted_index10 = 0\n    var coord_indexes_sorted_index10\
    \ = 0\n    var row_indexes_sorted_index11 = 0\n    var col_indexes_sorted_index11\
    \ = 0\n    var coord_indexes_sorted_index11 = 0\n    var row_indexes_sorted_index12\
    \ = 0\n    var col_indexes_sorted_index12 = 0\n    var coord_indexes_sorted_index12\
    \ = 0\n    var row_indexes_sorted_index13 = 0\n    var col_indexes_sorted_index13\
    \ = 0\n    var coord_indexes_sorted_index13 = 0\n    var row_indexes_sorted_index14\
    \ = 0\n    var col_indexes_sorted_index14 = 0\n    var coord_indexes_sorted_index14\
    \ = 0\n    var row_indexes_sorted_index15 = 0\n    var col_indexes_sorted_index15\
    \ = 0\n    var coord_indexes_sorted_index15 = 0\n    var row_indexes_sorted_index16",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlaceByColumn(0)\n    result.sortInPlaceByColumn(1)\n\
    \    return result", "    var row = [Int]()\n    var coord = [(Int, Int)]()\n\
    \    var row_index = 0\n    var col_index = 0\n    for row in lst {\n        for\
    \ col in row {\n            if col == x {\n                coord.append((row_index,\
    \ col_index))\n            }\n        }\n        row_index += 1\n        col_index\
    \ = 0\n    }\n    coord.sortInPlace()\n    coord.sortInPlaceInDescendingOrder()\n\
    \    return coord", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in 0..<row.count {\n        if col == x {\n     \
    \       break\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in 0..<row.count {\n          \
    \  if col == x {\n                break\n            }\n        }\n        result.append((row,\
    \ col))\n    }\n    return result", "    var row = [Int]()\n    var coords = [Int]()\n\
    \    var row_index = 0\n    var col_index = 0\n    var coord_index = 0\n    for\
    \ row in lst {\n        col_index = 0\n        for col in row {\n            if\
    \ col == x {\n                coords.append(coord_index)\n            }\n    \
    \        col_index += 1\n        }\n        row_index += 1\n        coord_index\
    \ = 0\n    }\n    coords.sort()\n    coords.reverse()\n    return coords.map {\
    \ coord -> (Int, Int) in\n        return (row_index, coord)\n    }", "    var\
    \ result = [(Int, Int)]()\n    for row in lst {\n        for column in row {\n\
    \            if column == x {\n                result.append((row, column))\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords\
    \ = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n\
    \    var coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n \
    \   var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n   \
    \ var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var ", " \
    \   var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    var row = [Int]()\n    var coords =\
    \ [Int]()\n    var result = [(Int, Int)]()\n    \n    for row in lst {\n     \
    \   coords = row.map { $0 }\n        coords.sortInPlace()\n        coords.reverse()\n\
    \        coords.insert(coords.startIndex, x)\n        coords.removeLast()\n  \
    \      coords.sortInPlace()\n        coords.reverse()\n        coords.insert(coords.startIndex,\
    \ x)\n        result.append((coords.first!, coords.last!))\n    }\n    \n    return\
    \ result", "    var row = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n\
    \    var coords = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n\
    \    var rows = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n  \
    \  var coords = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n  \
    \  var rows = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n    var\
    \ coords = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var\
    \ rows = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n    var coords\
    \ = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var rows =\
    \ [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n    var coords =\
    \ [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n\
    \    var coords = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n\
    \    var rows = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n  \
    \  var coords = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n  \
    \  var rows = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n    var\
    \ coords = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var\
    \ rows = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n    var coords\
    \ = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var rows =\
    \ [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n    var coords =\
    \ [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n\
    \    var coords = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n\
    \    var rows = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n  \
    \  var coords = [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n  \
    \  var rows = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n    var\
    \ coords = [Int]()\n    var rows = [Int]()\n    var ", "    var row = [Int]()\n\
    \    var coords = [Int]()\n    var result = [(Int, Int)]()\n    for row in lst\
    \ {\n        coords = row.map { $0 }\n        coords.sort { $0 < $1 }\n      \
    \  coords.reverse()\n        coords.insert(coords.count - 1, x)\n        result.append((coords.first,\
    \ coords.last))\n    }\n    result.sort { $0.0 < $1.0 }\n    return result", " \
    \   var row = [Int]()\n    var coords = [Int]()\n    var rows = [Int]()\n    var\
    \ coord = [Int]()\n    var row_index = 0\n    var col_index = 0\n    for row in\
    \ lst {\n        if rows.contains(row[0]) {\n            coords.append(row[1])\n\
    \        } else {\n            rows.append(row[0])\n            coords.append(row[1])\n\
    \        }\n    }\n    row_index = rows.indexOf(x)\n    col_index = coords.indexOf(x)\n\
    \    if row_index == -1 || col_index == -1 {\n        return nil\n    }\n    var\
    \ result = [Int]()\n    for row in lst {\n        if row[0] == rows[row_index]\
    \ {\n            for col in lst {\n                if col[0] == coords[col_index]\
    \ {\n                    result.append(col)\n                }\n            }\n\
    \        }\n    }\n    return result", "    var result = [(Int, Int)]()\n    var\
    \ row = 0\n    var col = 0\n    for row in lst {\n        for col in row {\n \
    \           if col == x {\n                result.append((row, col))\n       \
    \     }\n        }\n    }\n    result.sortInPlaceBy({ (a, b) -> Bool in\n    \
    \    if a.0 < b.0 {\n            return true\n        } else {\n            return\
    \ false\n        }\n    })\n    result.sortInPlaceBy({ (a, b) -> Bool in\n   \
    \     if a.1 < b.1 {\n            return true\n        } else {\n            return\
    \ false\n        }\n    })\n    return result", "    var result = [(Int, Int)]()\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in 0..<row.count {\n       \
    \ result.append((row, col))\n    }\n    for col in 0..<row.count {\n        result.append((row,\
    \ col))\n    }\n    return result", "    var row = [Int]()\n    var coord = [(Int,\
    \ Int)]()\n    var row_index = 0\n    var col_index = 0\n    for row in lst {\n\
    \        if row_index == x {\n            coord.append((row_index, col_index))\n\
    \        }\n        row_index += 1\n    }\n    coord.sortInPlace()\n    coord.sortInPlaceInDescendingOrder()\n\
    \    return coord", "    var result = [(Int, Int)]()\n    for row in lst {\n \
    \       for column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder()\n    return result", "    var row =\
    \ [Int]()\n    var coord = [(Int, Int)]()\n    var row_index = 0\n    var col_index\
    \ = 0\n    for row in lst {\n        if row_index == x {\n            break\n\
    \        }\n        coord.append((row_index, col_index))\n        row_index +=\
    \ 1\n    }\n    coord.sortInPlace()\n    coord.sortInPlaceInDescendingOrder()\
    \ // sort by columns in descending order\n    return coord", "    var row = [Int]()\n\
    \    var coord = [(Int, Int)]()\n    var i = 0\n    for row in lst {\n       \
    \ coord.append((i, row.count))\n        i += 1\n    }\n    coord = coord.sorted(by:\
    \ { $0.0 < $1.0 })\n    coord = coord.sorted(by: { $0.1 < $1.1 })\n    var result\
    \ = [(Int, Int)]()\n    for coord in coord {\n        if coord.0 < x {\n     \
    \       result.append((coord.0, coord.1))\n        }\n    }\n    return result",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var column = 0\n    for row\
    \ in lst {\n        var column = 0\n        for column in row {\n            if\
    \ column == x {\n                result.append((row, column))\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        var rowResult = [(Int, Int)]()\n        for column in row {\n       \
    \     if column == x {\n                rowResult.append((column, column))\n \
    \           }\n        }\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.sort(by: {$0.0 < $1.0})\n        result.sort(by:\
    \ {$1.0 > $0.0})\n        result.", "    var result = [(Int, Int)]()\n    var\
    \ row = 0\n    var col = 0\n    for row in lst {\n        var col = 0\n      \
    \  for col in row {\n            if col == x {\n                result.append(\
    \ (row, col) )\n            }\n        }\n    }\n    result.sortInPlace()\n  \
    \  result.sortInPlaceInDescendingOrder(by: { $0.1 < $1.1 })\n    return result",
  "    var coords = [(0, 0)]\n    for row in lst {\n        for col in row {\n   \
    \         if col == x {\n                coords.append((row, col))\n         \
    \   }\n        }\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords.map { coord -> (Int, Int) in\n        let (row, col) = coord\n\
    \        return (row - 1, col - 1)\n    }", "    var row = [Int]()\n    var coord\
    \ = [(Int, Int)]()\n    var row_index = 0\n    var col_index = 0\n    for row\
    \ in lst {\n        col_index = 0\n        for col in row {\n            if col\
    \ == x {\n                coord.append((row_index, col_index))\n            }\n\
    \            col_index += 1\n        }\n        row_index += 1\n    }\n    coord.sortInPlace()\n\
    \    coord.sortInPlaceInDescendingOrder() // sort by columns in descending order\n\
    \    return coord", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        for col in row {\n            if col\
    \ == x {\n                result.append( (row, col) )\n            }\n       \
    \ }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append((row, column))\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { ($0.1, $1.1) })\n    return result", "    var result = [(Int, Int)]()\n  \
    \  for row in lst {\n        for col in row.enumerated() {\n            if col.0\
    \ == x {\n                result.append(col)\n            }\n        }\n    }\n\
    \    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by: {$0.1 <\
    \ $1.1})\n    return result", "    var row = [Int]()\n    var coords = [Int]()\n\
    \    var rows = [Int]()\n    var cols = [Int]()\n    var result = [Int]()\n  \
    \  var row_index = 0\n    var col_index = 0\n    var row_index2 = 0\n    var col_index2\
    \ = 0\n    for row in lst {\n        rows.append(row)\n    }\n    rows.sortInPlace()\n\
    \    for row in rows {\n        cols = row\n        cols.sortInPlace()\n     \
    \   for col in cols {\n            coords.append((row, col))\n        }\n    }\n\
    \    coords.sortInPlace()\n    for coord in coords {\n        if coord[0] == x\
    \ {\n            result.append(coord)\n        }\n    }\n    return result", " \
    \   var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    return result",
  "    var row = [Int]()\n    var coords = [Int]()\n    var result = [Int]()\n   \
    \ var row_index = 0\n    var col_index = 0\n    for row in lst {\n        col_index\
    \ = 0\n        for col in row {\n            if col == x {\n                coords.append(col_index)\n\
    \            }\n            col_index += 1\n        }\n        coords.sort()\n\
    \        coords.reverse()\n        result.append((row_index, coords[0]))\n   \
    \     row_index += 1\n    }\n    coords.sort()\n    coords.reverse()\n    result.append((row_index,\
    \ coords[0]))\n    return result", "    var result = [(Int, Int)]()\n    var row\
    \ = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n        \
    \    break\n        }\n    }\n    for col in row {\n        if col == x {\n  \
    \          break\n        }\n    }\n    for row in lst {\n        if row == x\
    \ {\n            break\n        }\n    }\n    for col in row {\n        if col\
    \ == x {\n            break\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row {\n    \
    \    if col == x {\n            break\n        }\n    }\n    for row in lst {\n\
    \        if row == x {\n            break\n        }\n    }\n    for col in row\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n    }\n    for col\
    \ in row {\n        if col == x {\n            break\n        }\n    }\n    for\
    \ row in lst {\n        if row == x {\n            break\n        }\n    }\n \
    \   for col in row {\n        if col == x {\n            break\n        }\n  \
    \  }\n    for row in lst {\n        if row == x {\n            break\n       \
    \ }\n    }\n    for col in row {\n        if col == x {\n            break\n \
    \       }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {", "    var coords = [(0, 0)]\n    for\
    \ row in lst {\n        var coord = (0, 0)\n        for col in row {\n       \
    \     if col == x {\n                coord = (row, col)\n            }\n     \
    \   }\n        coords.append(coord)\n    }\n    coords.sortInPlace()\n    var\
    \ result = [(0, 0)]\n    for coord in coords {\n        var row = (coord.0)\n\
    \        var col = (coord.1)\n        var rowCoord = coords.filter({$0.0 == row}).last\n\
    \        var colCoord = coords.filter({$0.1 == col}).last\n        if rowCoord\
    \ == nil {\n            rowCoord = coords.filter({$0.1 == row}).last\n       \
    \ }\n        if colCoord == nil {\n            colCoord = coords.filter({$0.0\
    \ == col}).last\n        }\n        if rowCoord == nil {\n            rowCoord\
    \ = coords.filter({$0.1 == row}).last\n        }\n        if colCoord == nil {\n\
    \            colCoord = coords.filter({$0.1 == col}).last\n        }\n       \
    \ if rowCoord == nil {\n            rowCoord = coords.filter({$0.1 == row}).last\n\
    \        }\n        if colCoord == nil {\n            colCoord = coords.filter({$0.0\
    \ == col}).last\n        }\n        if rowCoord == nil {\n            rowCoord\
    \ = coords.filter({$0.1 == row}).last\n        }\n        if colCoord == nil {\n\
    \            colCoord = coords.filter({$0.1 == col}).last\n        }\n       \
    \ if rowCoord == nil {\n            rowCoord = coords.filter({$0.1 == row}).last\n\
    \        }\n        if colCoord == nil {\n            colCoord = coords.filter({$0.1\
    \ == col}).last\n        }\n        if rowCoord == nil {\n            rowCoord\
    \ = coords.filter({$0.1 == row}).last\n        }\n        if colCoord == nil {\n\
    \            colCoord = coords.filter({$0.1 == col}).last\n        }\n       \
    \ if rowCoord == nil {\n            rowCoord = coords.filter({$0.1 == row}).last\n\
    \        }\n        if colCoord == nil {\n            colCoord = coords.filter({$0.1\
    \ == col}).last\n        }\n        if rowCoord == nil {\n            rowCoord\
    \ = coords.filter({$0.1 == row}).last\n        }\n        if colCoord == nil {\n\
    \            colCoord = coords.filter({$0.1 == col}).last\n        }\n       \
    \ if rowCoord == nil {\n            rowCoord = coords.filter({$0.1 == row}).last\n\
    \        }\n        if colCoord == nil {\n            colCoord = coords.filter({$0.1\
    \ == col}).last\n        }\n        if rowCoord == nil {\n            rowCoord",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in 0..<row.count {\n        result.append((row, col))\n    }\n    for col\
    \ in 0..<row.count {\n        result.append((row, col))\n    }\n    return result",
  "    var row = [Int]()\n    var coords = [(Int, Int)]()\n    var row_index = 0\n\
    \    var col_index = 0\n    for row in lst {\n        for col in row {\n     \
    \       if col == x {\n                coords.append((row_index, col_index))\n\
    \            }\n        }\n        row_index += 1\n        col_index = 0\n   \
    \ }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n   \
    \ return coords", "    var row = [Int]()\n    var coord = [Int]()\n    var result\
    \ = [Int]()\n    var i = 0\n    for row in lst {\n        coord = row.map { $0\
    \ - x }\n        coord = coord.sorted(by: >)\n        coord = coord.sorted(by:\
    \ <)\n        coord = coord.sorted(by: >)\n        coord = coord.sorted(by: <)\n\
    \        for j in 0..<coord.count {\n            result.append((i, coord[j]))\n\
    \        }\n        i += 1\n    }\n    return result", "    var result = [(Int,\
    \ Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n    }\n    for col in row {\n    \
    \    if col == x {\n            break\n        }\n    }\n    for row in lst {\n\
    \        if row == x {\n            break\n        }\n        for col in row {\n\
    \            if col == x {\n                break\n            }\n        }\n\
    \    }\n    for row in lst {\n        if row == x {\n            break\n     \
    \   }\n        for col in row {\n            if col == x {\n                break\n\
    \            }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n        for col in row {\n            if col ==\
    \ x {\n                break\n            }\n        }\n    }\n    for row in\
    \ lst {", "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n\
    \    for row in lst {\n        var col = 0\n        for col in row {\n       \
    \     if col == x {\n                result.append( (row, col) )\n           \
    \ }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var result = [(Int, Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated()\
    \ {\n            if v == x {\n                result.append((i, row.count))\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.1 < b.1\n    })\n    return result", " \
    \   var coords = [(Int, Int)]()\n    var row = [Int]()\n    var col = [Int]()\n\
    \    var row_index = 0\n    var col_index = 0\n    for row in lst {\n        col_index\
    \ = 0\n        for col in row {\n            if col == x {\n                coords.append((row_index,\
    \ col_index))\n            }\n            col_index += 1\n        }\n        row_index\
    \ += 1\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInPlace()\n   \
    \ return coords", "    var row = [Int]()\n    var coord = [(Int, Int)]()\n   \
    \ var rows = [Int]()\n    var coords = [(Int, Int)]()\n    var i = 0\n    for\
    \ row in lst {\n        if i == x {\n            rows.append(row)\n          \
    \  coords.append(coord)\n        }\n        i += 1\n    }\n    coords.sortInPlace()\n\
    \    rows.sortInPlace()\n    var result = [(Int, Int)]()\n    for row in rows\
    \ {\n        for coord in coords {\n            if row[0] == coord[0] {\n    \
    \            result.append((row, coord[1]))\n            }\n        }\n    }\n\
    \    return result", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ row_index = 0\n    var col_index = 0\n    var coord = 0\n    for row in lst\
    \ {\n        coord = row_index * x + col_index\n        if coord < row.count {\n\
    \            coords.append(coord)\n        }\n        col_index += 1\n       \
    \ if col_index == row.count {\n            row_index += 1\n            col_index\
    \ = 0\n        }\n    }\n    coords.sort()\n    coords.reverse()\n    return coords.map\
    \ { coord -> (Int, Int) in\n        return (coord, row[coord])\n    }", "    var\
    \ row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows\
    \ = [Int]()\n    var row = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var ", " \
    \   var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in row {\n        if col == x {\n            break\n        }\n    }\n \
    \   for row in lst {\n        if row == x {\n            break\n        }\n  \
    \  }\n    for col in row {\n        if col == x {\n            break\n       \
    \ }\n    }\n    for row in lst {\n        if row == x {\n            break\n \
    \       }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n    }\n    for col in row {\n        if col == x {\n            break\n\
    \        }\n    }\n    for row in lst {", "    var result = [(Int, Int)]()\n \
    \   var row = 0\n    var col = 0\n    for row in lst {\n        var col = 0\n\
    \        for col in row {\n            if col == x {\n                result.append(\
    \ (row, col) )\n            }\n        }\n    }\n    result.sort(by: { (r1, r2)\
    \ -> Bool in\n        let r1Row = r1.0\n        let r2Row = r2.0\n        if r1Row\
    \ < r2Row {\n            return true\n        }\n        return false\n    })\n\
    \    result.sort(by: { (r1, r2) -> Bool in\n        let r1Col = r1.1\n       \
    \ let r2Col = r2.1\n        if r1Col < r2Col {\n            return true\n    \
    \    }\n        return false\n    })\n    return result", "    var row = [Int]()\n\
    \    var coord = [(Int, Int)]()\n    var i = 0\n    for row in lst {\n       \
    \ coord.append((i, row.count))\n        i += 1\n    }\n    coord = coord.sorted(by:\
    \ { $0.0 < $1.0 })\n    coord = coord.sorted(by: { $0.1 < $1.1 })\n    var result\
    \ = [(Int, Int)]()\n    for row in coord {\n        var j = 0\n        for col\
    \ in row {\n            if j == x {\n                result.append((i, j))\n \
    \           }\n            j += 1\n        }\n    }\n    return result", "   \
    \ var result = [(Int, Int)]()\n    for row in lst {\n        var rowResult = [(Int,\
    \ Int)]()\n        for col in row {\n            if col == x {\n             \
    \   rowResult.append((row, col))\n            }\n        }\n        result = result.sorted(by:\
    \ { $0.0 < $1.0 }).append(rowResult).sorted(by: { $0.1 < $1.1 })\n    }\n    return\
    \ result", "    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(by: { (row1, row2) in\n        return\
    \ row1[1] > row2[1]\n    })\n    return result", "    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var result = [(Int, Int)]()\n    for row in lst {\n  \
    \      coords = row.map { $0 - x }\n        coords.sortInPlace()\n        coords.reverse()\n\
    \        result.append((coords.first!, coords.last!))\n    }\n    result.sortInPlace()\n\
    \    return result", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sort(by: { (first,\
    \ second) -> Bool in\n        return first.0 < second.0\n    })\n    result.sort(by:\
    \ { (first, second) -> Bool in\n        return second.0 < first.0\n    })\n  \
    \  return result", "    var row = [Int]()\n    var coords = [Int]()\n    var coord\
    \ = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n\
    \    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var ",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ result = [(Int, Int)]()\n    for row in lst {\n        coords = row.sorted()\n\
    \        coords.reverse()\n        for col in coords {\n            if col ==\
    \ x {\n                result.append((row, col))\n            }\n        }\n \
    \   }\n    result.sort{$0.0 < $1.0}\n    return result", "    var row = [Int]()\n\
    \    var coord = [Int]()\n    var result = [(Int, Int)]()\n    for row in lst\
    \ {\n        for col in row {\n            if col == x {\n                coord.append(row)\n\
    \            }\n        }\n    }\n    coord.sortInPlace()\n    coord.sortInPlaceInDescendingOrder()\n\
    \    for row in coord {\n        result.append((row[0], row[1]))\n    }\n    return\
    \ result", "    var row = [Int]()\n    var coord = [(Int, Int)]()\n    var row_index\
    \ = 0\n    var col_index = 0\n    var row_coord = Int()\n    var col_coord = Int()\n\
    \    var row_coord_sorted = Int()\n    var col_coord_sorted = Int()\n    var coord_sorted\
    \ = [Int]()\n    var coord_tuple = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = [(Int, Int)]()\n    var coord_tuple_sorted = [(Int, Int)]()\n    var coord_tuple_sorted\
    \ = ", "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n  \
    \  for row in lst {\n        var col = 0\n        for col in row {\n         \
    \   if col == x {\n                result.append((row, col))\n            }\n\
    \        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    var row = [Int]()\n    var coords =\
    \ [Int]()\n    var result = [Int]()\n    var row_index = 0\n    var col_index\
    \ = 0\n    for row in lst {\n        col_index = 0\n        for col in row {\n\
    \            if col == x {\n                coords.append((row_index, col_index))\n\
    \            }\n            col_index += 1\n        }\n        row_index += 1\n\
    \    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    for coord in coords {\n        result.append((coord.0, coord.1))\n    }\n\
    \    return result", "    var row = [Int]()\n    var coord = [Int]()\n    var\
    \ result = [Int]()\n    for row in lst {\n        coord = row\n    }\n    coord.removeFirst()\n\
    \    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n  \
    \  }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n\
    \    }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n\
    \    }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n\
    \    }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n\
    \    }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n\
    \    }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n\
    \    }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n\
    \    }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n\
    \    }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n\
    \    }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n        coord.removeLast()\n\
    \    }\n    coord.removeFirst()\n    for row in lst {\n        coord.removeFirst()\n\
    \    }\n    coord.removeLast()\n    for row in lst {\n", "    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        var rowResult = [(Int, Int)]()\n    \
    \    for column in row {\n            if column == x {\n                rowResult.append((column,\
    \ row))\n            }\n        }\n        result = rowResult.sorted(by: { $0.0\
    \ < $1.0 }).sorted(by: { $0.1 < $1.1 })\n    }\n    return result", "    var row\
    \ = [Int]()\n    var coord = [(Int, Int)]()\n    for row in lst {\n        coord.append((row.count,\
    \ row.count))\n    }\n    coord = coord.sorted(by: { $0.0 < $1.0 })\n    coord\
    \ = coord.sorted(by: { $0.1 < $1.1 })\n    var result = [(Int, Int)]()\n    for\
    \ coord in coord {\n        if coord.0 < x {\n            result.append((0, coord.1))\n\
    \        }\n        if coord.1 < x {\n            result.append((coord.1, 0))\n\
    \        }\n    }\n    return result", "    var row = [Int]()\n    var coord =\
    \ [Int]()\n    var rows = [Int]()\n    var coords = [Int]()\n    var result =\
    \ [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    for row in lst {\n\
    \        coord = row\n        coords = coord\n        rows = rows\n        coords\
    \ = coords\n        coords.append(j)\n        rows.append(i)\n        i += 1\n\
    \        j = 0\n    }\n    coords.sort()\n    rows.sort()\n    for row in rows\
    \ {\n        for col in coords {\n            if col == x {\n                result.append(coord)\n\
    \            }\n        }\n    }\n    return result", "    var row = [Int]()\n\
    \    var coord = [(Int, Int)]()\n    var i = 0\n    for row in lst {\n       \
    \ i += 1\n    }\n    for row in lst {\n        var j = 0\n        for col in row\
    \ {\n            j += 1\n        }\n        if j == x {\n            coord.append((i,\
    \ x))\n        }\n    }\n    coord.sortInPlace()\n    coord.sortInPlaceInDescendingOrder()\n\
    \    return coord", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ result = [Int]()\n    for row in lst {\n        coords = row.sorted()\n    \
    \    for col in coords.reversed() {\n            if col == x {\n             \
    \   result.append((row, col))\n            }\n        }\n    }\n    return result",
  "    var row = [Int]()\n    var coords = [(Int, Int)]()\n    var row_index = 0\n\
    \    var col_index = 0\n    for row in lst {\n        col_index = 0\n        for\
    \ col in row {\n            if col == x {\n                coords.append((row_index,\
    \ col_index))\n            }\n            col_index += 1\n        }\n        row_index\
    \ += 1\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords", "    var row = [Int]()\n    var coords = [(Int, Int)]()\n\
    \    var i = 0\n    for row in lst {\n        coords.append((i, row.count))\n\
    \        i += 1\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInPlace()\n\
    \    var result = [(Int, Int)]()\n    for coord in coords {\n        if coord.0\
    \ < x {\n            result.append((coord.1, coord.0))\n        }\n    }\n   \
    \ return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var col\
    \ = 0\n    for row in lst {\n        if row == x {\n            break\n      \
    \  }\n    }\n    for col in 0..<row.count {\n        result.append((row, col))\n\
    \    }\n    for col in 0..<row.count {\n        result.append((row, col))\n  \
    \  }\n    result.sortInPlace()\n    return result", "    var result = [(Int, Int)]()\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        var col = 0\n\
    \        for col in row {\n            if col == x {\n                result.append(\
    \ (row, col) )\n            }\n        }\n    }\n    result.sortInPlace()\n  \
    \  result.sortInPlaceInDescendingOrder(by: { ($0.1, $1.1) })\n    return result",
  "    var row = [Int]()\n    var coords = [(Int, Int)]()\n    var row_index = 0\n\
    \    var col_index = 0\n    for row in lst {\n        col_index = 0\n        for\
    \ col in row {\n            if col == x {\n                coords.append((row_index,\
    \ col_index))\n            }\n            col_index += 1\n        }\n        row_index\
    \ += 1\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sort(by: { (first,\
    \ second) -> Bool in\n        return first.0 < second\n    })\n    result.sort(by:\
    \ { (first, second) -> Bool in\n        return second.0 < first.0\n    })\n  \
    \  return result", "    var result = [(Int, Int)]()\n    for row in lst {\n  \
    \      for column in row {\n            if column == x {\n                result.append(\
    \ (row, column) )\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(by: { (row1, row2) in\n        return\
    \ row1[1] < row2[1]\n    })\n    return result", "    var result = [(Int, Int)]()\n\
    \    var row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n\
    \            break\n        }\n    }\n    for col in row {\n        result = (row,\
    \ col)\n    }\n    return result", "    var result = [(Int, Int)]()\n    var row\
    \ = 0\n    var column = 0\n    for row in lst {\n        column = column + row[0]\n\
    \        if column == x {\n            result.append((row, column))\n        }\n\
    \    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a[1] > b[1]\n    })\n    return result",
  "    var row = [Int]()\n    var coord = [(Int, Int)]()\n    var rowOrder = [Int]()\n\
    \    var colOrder = [Int]()\n    var rowOrderCount = [Int]()\n    var colOrderCount\
    \ = [Int]()\n    var rowOrderCountMax = Int()\n    var colOrderCountMax = Int()\n\
    \    var rowOrderCountMaxIndex = Int()\n    var colOrderCountMaxIndex = Int()\n\
    \    var rowOrderCountMaxValue = Int()\n    var colOrderCountMaxValue = Int()\n\
    \    var rowOrderCountMaxValueIndex = Int()\n    var colOrderCountMaxValueIndex\
    \ = Int()\n    var rowOrderCountMaxValueValue = Int()\n    var colOrderCountMaxValueValue\
    \ = Int()\n    var rowOrderCountMaxValueValueIndex = Int()\n    var colOrderCountMaxValueValueIndex\
    \ = Int()\n    var rowOrderCountMaxValueValueValue = Int()\n    var colOrderCountMaxValueValueValue\
    \ = Int()\n    var rowOrderCountMaxValueValueValueIndex = Int()\n    var colOrderCountMaxValueValueValueIndex\
    \ = Int()\n    var rowOrderCountMaxValueValueValueValue = Int()\n    var colOrderCountMaxValueValueValueValue\
    \ = Int()\n    var rowOrderCountMaxValueValueValueValueIndex = Int()\n    var\
    \ colOrderCountMaxValueValueValueValueIndex = Int()\n    var rowOrderCountMaxValueValueValueValueValue\
    \ = Int()\n    var colOrderCountMaxValueValueValueValueIndex = Int()\n    var\
    \ rowOrderCountMaxValueValueValueValueValue = Int()\n    var colOrderCountMaxValueValueValueValueIndex\
    \ = Int()\n    var rowOrderCountMaxValueValueValueValueValue = Int()\n    var\
    \ colOrderCountMaxValueValueValueValueIndex = Int()\n    var rowOrderCountMaxValueValueValueValueValueValue\
    \ = Int()\n    var colOrderCountMaxValueValueValueValueValueIndex = Int()\n  \
    \  var rowOrderCountMaxValueValueValueValueValueValue = Int()\n    var colOrderCountMaxValueValueValueValueValueIndex\
    \ = Int()\n    var rowOrderCountMaxValueValueValueValueValueValue = Int()\n  \
    \  var colOrderCountMaxValueValueValueValueValueIndex = Int()\n    var rowOrderCountMaxValueValueValueValueValueValue\
    \ = Int()\n    var colOrderCountMaxValueValueValueValueValueIndex = Int()\n  \
    \  var rowOrderCountMaxValueValueValueValueValueValue = Int()\n    var colOrderCountMaxValueValueValueValueValueIndex\
    \ = Int()\n    var rowOrderCountMaxValueValueValueValueValueValue = Int()\n  \
    \  var colOrderCountMaxValueValueValueValueValueIndex = Int()\n    var rowOrderCount",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        var rowResult =\
    \ [(Int, Int)]()\n        for column in row {\n            if column == x {\n\
    \                rowResult.append((column, row))\n            }\n        }\n \
    \       result = rowResult.sorted(by: { $0.0 < $1.0 })\n    }\n    return result",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append((row, column))\n\
    \            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ result = [Int]()\n    for row in lst {\n        coords = row.sorted()\n    \
    \    coords.reverse()\n        for col in coords {\n            if col == x {\n\
    \                result.append(row)\n            }\n        }\n    }\n    return\
    \ result", "    var row = [Int]()\n    var coords = [Int]()\n    var coord = Int()\n\
    \    var rowCoord = Int()\n    var colCoord = Int()\n    var rowCoords = Int()\n\
    \    var colCoords = Int()\n    var rowCoordsSorted = [Int]()\n    var colCoordsSorted\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDescDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var rowCoordsSortedDesc = [Int]()\n    var colCoordsSortedDesc\
    \ = [Int]()\n    var ", "    var row = [Int]()\n    var coord = [Int]()\n    var\
    \ result = [(Int, Int)]()\n    for row in lst {\n        coord = row\n    }\n\
    \    coord.reverse()\n    for row in lst {\n        if row.contains(x) {\n   \
    \         result.append((row, coord))\n        }\n    }\n    result.sortInPlace()\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        var col = 0\n        for col in row {\n\
    \            if col == x {\n                result.append((row, col))\n      \
    \      }\n        }\n    }\n    result.sortInPlaceByKey(ascending: true)\n   \
    \ result.sortInPlaceByKey(ascending: false)\n    return result", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for column in row {\n      \
    \      if column == x {\n                result.append( (row, column) )\n    \
    \        }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (row1, row2) in\n        return row2[1] < row1[1]\n    })\n    return result",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in 0..<row.count {\n        result.append((row, col))\n\
    \    }\n    for col in 0..<row.count {\n        result.append((row, col))\n  \
    \  }\n    return result", "    var row = [Int]()\n    var coord = [(Int, Int)]()\n\
    \    var row_index = 0\n    var col_index = 0\n    for row in lst {\n        if\
    \ row_index == x {\n            coord.append((row_index, col_index))\n       \
    \ }\n        row_index += 1\n    }\n    coord = coord.sorted(by: {$0.0 < $1.0})\n\
    \    coord = coord.sorted(by: {$0.1 < $1.0})\n    return coord", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for column in row {\n      \
    \      if column == x {\n                result.append( (row, column) )\n    \
    \        }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    for row in lst {\n\
    \        for (i, v) in row.enumerated() {\n            if v == x {\n         \
    \       result.append((i, v))\n            }\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder()\n    return result", "    var row =\
    \ [Int]()\n    var coord = [(Int, Int)]()\n    var row_index = 0\n    var col_index\
    \ = 0\n    for row in lst {\n        col_index = 0\n        for col in row {\n\
    \            if col == x {\n                coord.append((row_index, col_index))\n\
    \            }\n            col_index += 1\n        }\n        row_index += 1\n\
    \    }\n    coord.sort()\n    coord.reverse()\n    return coord", "    var result\
    \ = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in 0..<row.count\
    \ {\n        if col == 0 {\n            continue\n        }\n        if col >\
    \ 0 {\n            result.append((row, col))\n        }\n    }\n    return result",
  "    var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ row_index = 0\n    var col_index = 0\n    var coord = 0\n    for row in lst\
    \ {\n        coord = row_index * row[0].count + col_index\n        if coord >=\
    \ x {\n            break\n        }\n        coords.append(coord)\n    }\n   \
    \ coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n    var result\
    \ = [Int]()\n    for coord in coords {\n        let row = coord/row[0].count\n\
    \        let col = coord - row*row[0].count\n        result.append( (row, col)\
    \ )\n    }\n    return result", "    var row = [Int]()\n    var coords = [Int]()\n\
    \    var result = [(Int, Int)]()\n    \n    for row in lst {\n        coords =\
    \ row.map { $0 }\n        coords.sort { $0 < $1 }\n        coords.reverse()\n\
    \        coords.insert(coords.count - 1, x)\n        coords.insert(coords.count\
    \ - 1, 0)\n        result.append((coords.map { $0 + 1 }, coords.map { $1 - 1 }))\n\
    \    }\n    \n    result.sort { $0.0 < $1.0 }\n    result.sort { $0.1 < $1.1 }\n\
    \    \n    return result", "    var result = [(Int, Int)]()\n    var row = 0\n\
    \    var col = 0\n    for row in lst {\n        var col = 0\n        for col in\
    \ row {\n            if col == x {\n                result.append( (row, col)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return result", "    var row = [Int]()\n    var coords =\
    \ [Int]()\n    var row_index = 0\n    var col_index = 0\n    for row in lst {\n\
    \        coords.append(row_index)\n        for col in row {\n            if col\
    \ == x {\n                row_index += 1\n                col_index += 1\n   \
    \         }\n        }\n    }\n    coords.sort()\n    coords.reverse()\n    coords.sort()\n\
    \    return coords.map { (coord) -> Int in\n        return (coord, row_index)\n\
    \    }", "    var result = [(Int, Int)]()\n    for row in lst {\n        for column\
    \ in row {\n            if column == x {\n                result.append((row,\
    \ column))\n            }\n        }\n    }\n    result.sortInPlaceByKey(ascending:\
    \ true)\n    result.sortInPlaceByKey(ascending: false)\n    return result", " \
    \   var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var coords = [(Int, Int)]()\n    var row = [Int]()\n    var col = [Int]()\n\
    \    var i = 0\n    for row in lst {\n        i += 1\n    }\n    for row in lst\
    \ {\n        for col in row {\n            if col == x {\n                coords.append((i,\
    \ col))\n            }\n        }\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder(by:\
    \ {$0.1 < $1.1})\n    return coords", "    var row = [Int]()\n    var coords =\
    \ [Int]()\n    var result = [(Int, Int)]()\n    for row in lst {\n        coords\
    \ = row.sorted()\n        coords.reverse()\n        for col in coords {\n    \
    \        if col == x {\n                result.append( (row, col) )\n        \
    \    }\n        }\n    }\n    result.sort()\n    return result", "    var result\
    \ = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in row\
    \ {\n        if col == x {\n            break\n        }\n    }\n    for row in\
    \ lst {\n        if row == x {\n            break\n        }\n        for col\
    \ in row {\n            if col == x {\n                break\n            }\n\
    \        }\n    }\n    for row in lst {\n        if row == x {\n            break\n\
    \        }\n        for col in row {\n            if col == x {\n            \
    \    break\n            }\n        }\n    }\n    for row in lst {\n        if\
    \ row == x {\n            break\n        }\n        for col in row {\n       \
    \     if col == x {\n                break\n            }\n        }\n    }\n\
    \    for row in lst {\n        if row == x {\n            break\n        }\n \
    \       for col in row {\n            if col == x {\n                break\n \
    \           }\n        }\n    }\n    return result", "    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for column in row {\n            if column\
    \ == x {\n                result.append( (row, column) )\n            }\n    \
    \    }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ column = 0\n    for row in lst {\n        column = 0\n        for column in\
    \ row {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlaceByKey(ascending: true)\n\
    \    result.sortInPlaceByKey(ascending: false)\n    return result", "    var result\
    \ = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row in lst {\n \
    \       if row == x {\n            break\n        }\n    }\n    for col in row.reverse()\
    \ {\n        result.append((row, col))\n    }\n    return result", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        var rowResult = [(Int, Int)]()\n\
    \        for col in row {\n            if col == x {\n                rowResult.append((row,\
    \ col))\n            }\n        }\n        result = result.sorted(by: { $0.0 <\
    \ $1.0 }).append(rowResult).sorted(by: { $0.1 < $1.1 })\n    }\n    return result",
  "    var coords = [(0, 0), (len(lst) - 1, 0)]\n    var row = [Int]()\n    var col\
    \ = [Int]()\n    for row in lst {\n        for col in row {\n            if col\
    \ == x {\n                coords.append((row, col))\n            }\n        }\n\
    \    }\n    coords.sortInPlace()\n    coords.sortInPlaceInPlace()\n    return\
    \ coords", "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n\
    \    for row in lst {\n        var col = 0\n        for col in row {\n       \
    \     if col == x {\n                result.append((row, col))\n            }\n\
    \        }\n    }\n    result.sortInPlaceByKey(ascending: true)\n    result.sortInPlaceByKey(ascending:\
    \ false)\n    return result", "    var row = [Int]()\n    var coords = [Int]()\n\
    \    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var\
    \ rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows\
    \ = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n    var rows = [Int]()\n\
    \    var rows = [Int]()\n    var ", "    var result = [(Int, Int)]()\n    var\
    \ row = 0\n    var col = 0\n    for row in lst {\n        if row == x {\n    \
    \        break\n        }\n    }\n    for col in 0..<row.count {\n        result.append((row,\
    \ col))\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var result = [(Int, Int)]()\n    for row in lst {\n        for column in row\
    \ {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    return result",
  "    var row = [Int]()\n    var coords = [(Int, Int)]()\n    var row_index = 0\n\
    \    var col_index = 0\n    for row in lst {\n        col_index = 0\n        for\
    \ col in row {\n            if col == x {\n                coords.append((row_index,\
    \ col_index))\n            }\n            col_index += 1\n        }\n        row_index\
    \ += 1\n    }\n    coords.sortInPlace()\n    coords.sortInPlaceInDescendingOrder()\n\
    \    return coords", "    var row = [Int]()\n    var coord = [(Int, Int)]()\n\
    \    var row_index = 0\n    var col_index = 0\n    for row in lst {\n        if\
    \ row_index == x {\n            coord.append((row_index, col_index))\n       \
    \ }\n        row_index += 1\n    }\n    coord.sortInPlace()\n    coord.sortInPlaceInDescendingOrder()\n\
    \    return coord", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ rows = [Int]()\n    var cols = [Int]()\n    var coord = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n\
    \    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n \
    \   var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n  \
    \  var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n   \
    \ var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var\
    \ i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n\
    \ = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s =\
    \ 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n\
    \    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n \
    \   var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n  \
    \  var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n   \
    \ var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var\
    \ s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x\
    \ = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c =\
    \ 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n\
    \    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n \
    \   var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n  \
    \  var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n   \
    \ var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var\
    \ c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h\
    \ = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m =\
    \ 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n\
    \    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n \
    \   var x = 0\n    var y = 0\n    var z = 0", "    var result = [(Int, Int)]()\n\
    \    var row = 0\n    var column = 0\n    for row in lst {\n        column = column\
    \ + row[0]\n        if column >= x {\n            break\n        }\n    }\n  \
    \  for row in lst {\n        column = column + row[0]\n        if column < x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        column = column\
    \ + row[0]\n        if column > x {\n            break\n        }\n    }\n   \
    \ for row in lst {\n        column = column + row[0]\n        if column >= x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        column = column\
    \ + row[0]\n        if column < x {\n            break\n        }\n    }\n   \
    \ for row in lst {\n        column = column + row[0]\n        if column > x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        column = column\
    \ + row[0]\n        if column >= x {\n            break\n        }\n    }\n  \
    \  for row in lst {\n        column = column + row[0]\n        if column < x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        column = column\
    \ + row[0]\n        if column > x {\n            break\n        }\n    }\n   \
    \ for row in lst {\n        column = column + row[0]\n        if column >= x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        column = column\
    \ + row[0]\n        if column < x {\n            break\n        }\n    }\n   \
    \ for row in lst {\n        column = column + row[0]\n        if column > x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        column = column\
    \ + row[0]\n        if column >= x {\n            break\n        }\n    }\n  \
    \  for row in lst {\n        column = column + row[0]\n        if column < x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        column = column\
    \ + row[0]\n        if column > x {\n            break\n        }\n    }\n   \
    \ for row in lst {\n        column = column + row[0]\n        if column >= x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        column = column\
    \ + row[0]\n        if column < x {\n            break\n        }\n    }\n   \
    \ for row in lst {\n        column = column + row[0]\n        if column > x {\n\
    \            break\n        }\n    }\n    for row in lst {\n        column = column\
    \ + row[0]\n        if column >= x {\n            break\n        }\n    }\n  \
    \  for row in lst {\n        column = column + row[0]\n        if column < x {\n\
    \            break", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        var col = 0\n        for col in row {\n\
    \            if col == x {\n                result.append( (row, col) )\n    \
    \        }\n        }\n    }\n    result.sort(by: { (first, second) -> Bool in\n\
    \        return first.0 < second.0\n    })\n    result.sort(by: { (first, second)\
    \ -> Bool in\n        return second.0 < first.0\n    })\n    return result", " \
    \   var row = [Int]()\n    var coords = [(Int, Int)]()\n    var rowOrder = [Int]()\n\
    \    var colOrder = [Int]()\n    var rowOrderInc = [Int]()\n    var colOrderDec\
    \ = [Int]()\n    var rowOrderIncInc = [Int]()\n    var colOrderDecDec = [Int]()\n\
    \    var rowOrderIncDec = [Int]()\n    var colOrderIncInc = [Int]()\n    var rowOrderDecInc\
    \ = [Int]()\n    var colOrderIncDec = [Int]()\n    var rowOrderIncIncDec = [Int]()\n\
    \    var colOrderDecInc = [Int]()\n    var rowOrderDecDec = [Int]()\n    var colOrderIncIncDec\
    \ = [Int]()\n    var rowOrderIncDecInc = [Int]()\n    var colOrderDecIncDec =\
    \ [Int]()\n    var rowOrderDecIncInc = [Int]()\n    var colOrderIncDecDec = [Int]()\n\
    \    var rowOrderIncIncDecInc = [Int]()\n    var colOrderDecIncIncDec = [Int]()\n\
    \    var rowOrderDecDecIncDec = [Int]()\n    var colOrderIncIncDecDec = [Int]()\n\
    \    var rowOrderIncDecDecInc = [Int]()\n    var colOrderDecIncIncDec = [Int]()\n\
    \    var rowOrderDecDecDecInc = [Int]()\n    var colOrderIncIncDecDecInc = [Int]()\n\
    \    var rowOrderIncDecIncDecInc = [Int]()\n    var colOrderDecIncIncDecDec =\
    \ [Int]()\n    var rowOrderDecDecIncDecInc = [Int]()\n    var colOrderIncDecDecDecDecInc\
    \ = [Int]()\n    var rowOrderIncIncDecIncDecInc = [Int]()\n    var colOrderDecIncIncDecDecDec\
    \ = [Int]()\n    var rowOrderDecDecIncDecIncDec = [Int]()\n    var colOrderIncIncDecDecDecDecInc\
    \ = [Int]()\n    var rowOrderDecDecIncDecIncDec = [Int]()\n    var colOrderDecIncIncDecDecDec\
    \ = [Int]()\n    var rowOrderIncDecIncDecIncDec = [Int]()\n    var colOrderInc",
  "    var row = [Int]()\n    var coord = [(Int, Int)]()\n    var row_index = 0\n\
    \    var col_index = 0\n    for row in lst {\n        col_index = 0\n        for\
    \ col in row {\n            if col == x {\n                coord.append((row_index,\
    \ col_index))\n            }\n            col_index += 1\n        }\n        row_index\
    \ += 1\n    }\n    coord.sort()\n    coord.reverse()\n    return coord", "   \
    \ var row = [Int]()\n    var coords = [Int]()\n    var result = [(Int, Int)]()\n\
    \    for row in lst {\n        coords = row.map { $0 }\n        coords.sortInPlace()\n\
    \        coords.reverse()\n        for col in coords {\n            if col ==\
    \ x {\n                result.append((row, col))\n            }\n        }\n \
    \   }\n    result.sortInPlace()\n    return result", "    var row = [Int]()\n\
    \    var coords = [Int]()\n    var rows = [Int]()\n    var coord = [Int]()\n \
    \   var row_index = 0\n    var col_index = 0\n    for row in lst {\n        coords\
    \ = row\n        rows.append(row)\n    }\n    for row in rows {\n        coord\
    \ = coords\n        row_index = row\n        col_index = 0\n        for col in\
    \ row {\n            if col == x {\n                coords.append(col)\n     \
    \           coords.append(row_index)\n                coords.append(col_index)\n\
    \            }\n            col_index += 1\n        }\n    }\n    return coords",
  "    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var\
    \ rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord\
    \ = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n\
    \    var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n   \
    \ var coord = [Int]()\n    var rows = [Int]()\n    var row = [Int]()\n    var\
    \ coords = [Int]()\n    var coord = [Int]()\n    var rows = [Int]()\n    var row\
    \ = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n    var rows =\
    \ [Int]()\n    var row = [Int]()\n    var coords = [Int]()\n    var coord = [Int]()\n\
    \    var rows = [Int]()\n    var row = [Int]()\n    var ", "    var row = [Int]()\n\
    \    var coord = [(Int, Int)]()\n    var i = 0\n    for row in lst {\n       \
    \ i += 1\n    }\n    for row in lst {\n        var j = 0\n        for col in row\
    \ {\n            j += 1\n        }\n        if j == x {\n            coord.append((i,\
    \ x))\n        }\n    }\n    coord.sortInPlace()\n    coord.sortInPlaceInDescendingOrder()\n\
    \    return coord", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ rows = [Int]()\n    var coord = [Int]()\n    var row_index = 0\n    var col_index\
    \ = 0\n    for row in lst {\n        coord = row\n        coords.append(coord)\n\
    \        rows.append(row_index)\n    }\n    coords.sort()\n    coords.reverse()\n\
    \    rows.sort()\n    rows.reverse()\n    for row in rows {\n        for col in\
    \ coords {\n            if col == x {\n                let tuple = (row, col)\n\
    \                return tuple\n            }\n        }\n    }\n    return []",
  "    var coords = [(0, 0), (len(lst) - 1, 0)]\n    var row = [Int]()\n    var col\
    \ = [Int]()\n    var result = [(Int, Int)]()\n    for row in lst {\n        for\
    \ col in row {\n            if col == x {\n                coords.append((row,\
    \ col))\n            }\n        }\n    }\n    coords.sortInPlace()\n    for coord\
    \ in coords {\n        result.append((coord.1, coord.2))\n    }\n    result.sortInPlace()\n\
    \    return result", "    var row = [Int]()\n    var coords = [Int]()\n    var\
    \ rows = [Int]()\n    var coord = [Int]()\n    var row_index = 0\n    var col_index\
    \ = 0\n    var row_coords = [Int]()\n    var col_coords = [Int]()\n    var i =\
    \ 0\n    var j = 0\n    for row in lst {\n        coords = row\n        row_coords\
    \ = coords\n        row_coords.append(row_index)\n        col_coords = coords\n\
    \        col_coords.append(col_index)\n        if row_index == x {\n         \
    \   coords.append(j)\n            rows.append(coords)\n            coord = []\n\
    \            row_index += 1\n            col_index += 1\n        } else {\n  \
    \          coord = []\n            row_index += 1\n            col_index = 0\n\
    \        }\n        i += 1\n    }\n    return rows", "    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for (i, v) in row.enumerated() {\n  \
    \          if v == x {\n                result.append((i, v))\n            }\n\
    \        }\n    }\n    result.sortInPlace((a, b) -> Bool {\n        return a.0\
    \ < b.0\n    })\n    result.sortInPlace((a, b) -> Bool {\n        return a.1 <\
    \ b.1\n    })\n    return result", "    var row = [Int]()\n    var coords = [(Int,\
    \ Int)]()\n    var rowCoords = [(Int, Int)]()\n    var rowCoordsSorted = [(Int,\
    \ Int)]()\n    var rowCoordsSortedByCol = [(Int, Int)]()\n    var rowCoordsSortedByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByRowByCol = [(Int, Int)]()\n    var\
    \ rowCoordsSortedByColByRow = [(Int, Int)]()\n    var rowCoordsSortedByColByRowByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByRowByColByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByColByRowByRowByRow = [(Int, Int)]()\n    var rowCoordsSortedByRowByColByRowByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByColByRowByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByRowByColByRowByRow = [(Int, Int)]()\n    var rowCoordsSortedByColByRowByRowByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByRowByColByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByColByRowByRowByRow = [(Int, Int)]()\n    var rowCoordsSortedByRowByColByRowByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByColByRowByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByRowByColByRowByRow = [(Int, Int)]()\n    var rowCoordsSortedByColByRowByRowByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByRowByColByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByColByRowByRowByRow = [(Int, Int)]()\n    var rowCoordsSortedByRowByColByRowByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByColByRowByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByRowByColByRowByRow = [(Int, Int)]()\n    var rowCoordsSortedByColByRowByRowByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByRowByColByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByColByRowByRowByRow = [(Int, Int", "    var row = [Int]()\n\
    \    var coord = [(Int, Int)]()\n    var row_index = 0\n    var col_index = 0\n\
    \    for row in lst {\n        if row_index == x {\n            coord.append((row_index,\
    \ col_index))\n        }\n        col_index = 0\n        for col in row {\n  \
    \          col_index += 1\n        }\n        row_index += 1\n    }\n    coord.sortInPlace()\n\
    \    coord.sortInPlaceInDescendingOrder()\n    return coord", "    var result\
    \ = [(Int, Int)]()\n    var row = 0\n    var column = 0\n    for row in lst {\n\
    \        var column = 0\n        for column in row {\n            if column ==\
    \ x {\n                result.append( (row, column) )\n            }\n       \
    \ }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var result = [(Int, Int)]()\n    for row in lst {\n        for col in row\
    \ {\n            if col == x {\n                result.append( (row, col) )\n\
    \            }\n        }\n    }\n    result.sortInPlaceByKey(ascending: true)\n\
    \    result.sortInPlaceByKey(ascending: false)\n    return result", "    var result\
    \ = [(Int, Int)]()\n    for row in lst {\n        for column in row {\n      \
    \      if column == x {\n                result.append( (row, column) )\n    \
    \        }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder()\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ column = 0\n    for row in lst {\n        column = 0\n        for column in\
    \ row {\n            if column == x {\n                result.append( (row, column)\
    \ )\n            }\n        }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (a, b) -> Bool in\n        return a.0 < b.0\n    })\n    return result", " \
    \   var row = [Int]()\n    var coord = [(Int, Int)]()\n    var rows = [Int]()\n\
    \    var cols = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var\
    \ l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q\
    \ = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v =\
    \ 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var count\
    \ = 0\n    var rowCount = 0\n    var colCount = 0\n    for row in lst {\n    \
    \    count = count + 1\n    }\n    for row in lst {\n        rowCount = rowCount\
    \ + 1\n    }\n    for row in lst {\n        colCount = colCount + 1\n    }\n \
    \   for row in lst {\n        for col in row {\n            coord.append((row,\
    \ col))\n        }\n    }\n    coord.sortInPlace()\n    for coord in coord {\n\
    \        row = coord[0]\n        col = coord[1]\n        if row == 0 {\n     \
    \       i = 0\n        }\n        if row == rowCount {\n            i = rowCount\
    \ - 1\n        }\n        if col == 0 {\n            j = 0\n        }\n      \
    \  if col == colCount {\n            j = colCount - 1\n        }\n        if i\
    \ == j {\n            k = i\n        }\n        if j == k {\n            k = j\n\
    \        }\n        if k == i {\n            l = k\n        }\n        if l ==\
    \ k {\n            l = i\n        }\n        if l == j {\n            m = l\n\
    \        }\n        if m == l {\n            m = i\n        }\n        if m ==\
    \ i {\n            n = m\n        }\n        if n == m {\n            n = i\n\
    \        }\n        if n == i {\n            o = n\n        }\n        if o ==\
    \ n {\n            o = i\n        }\n        if o == i {\n            p = o\n\
    \        }\n        if p == o {\n            p = i\n        }\n        if p ==\
    \ i {\n            q = p\n        }\n        if q == p {\n            q = i\n\
    \        }\n        if q == i {\n            r = q\n        }\n        if r ==\
    \ q {\n            r = i\n        }\n        if r == i {\n            s = r\n\
    \        }\n        if s == r {\n            s = i\n        }\n        if s ==\
    \ i {\n            t = s\n        }\n        if t == s {\n            t = i\n\
    \        }\n        if t == i {\n            u = t\n        }\n        if u ==\
    \ t {\n            u = i\n        }\n        if u == i {\n            v = u\n\
    \        }\n        if v == ", "    var result = [(Int, Int)]()\n    var row =\
    \ 0\n    var column = 0\n    for row in lst {\n        if row == x {\n       \
    \     break\n        }\n    }\n    for column in row.indices {\n        result.append((row,\
    \ column))\n    }\n    return result", "    var row = [Int]()\n    var coord =\
    \ [(Int, Int)]()\n    var i = 0\n    for row in lst {\n        coord.append((i,\
    \ row.count-1))\n        i += 1\n    }\n    coord.sortInPlace()\n    coord.sortInPlaceInPlace()\n\
    \    var result = [(Int, Int)]()\n    for coord in coord {\n        if coord[0]\
    \ == x {\n            result.append((coord[0], coord[1]))\n        }\n    }\n\
    \    return result", "    var result = [(Int, Int)]()\n    var row = 0\n    var\
    \ col = 0\n    for row in lst {\n        if row == x {\n            break\n  \
    \      }\n    }\n    for col in 0..<row.count {\n        if col == 0 {\n     \
    \       continue\n        }\n        if col == row.count - 1 {\n            result.append((row,\
    \ col))\n        } else {\n            result.append((row, col))\n           \
    \ result.append((row, col + 1))\n        }\n    }\n    result.sortInPlace()\n\
    \    result.sortInPlaceInDescendingOrder(by: {$0.0 < $1.0})\n    return result",
  "    var result = [(Int, Int)]()\n    var row = 0\n    var col = 0\n    for row\
    \ in lst {\n        if row == x {\n            break\n        }\n    }\n    for\
    \ col in 0..<row.count {\n        for row in lst {\n            if row == x {\n\
    \                break\n            }\n        }\n    }\n    for row in lst {\n\
    \        if row == x {\n            break\n        }\n    }\n    for col in 0..<row.count\
    \ {\n        for row in lst {\n            if row == x {\n                break\n\
    \            }\n        }\n    }\n    return result", "    var result = [(Int,\
    \ Int)]()\n    for row in lst {\n        for column in row {\n            if column\
    \ == x {\n                result.append( (row, column) )\n            }\n    \
    \    }\n    }\n    result.sortInPlace()\n    result.sortInPlaceInDescendingOrder(by:\
    \ { (row1, row2) in\n        return row1[1] > row2[1]\n    })\n    return result",
  "    var row = [Int]()\n    var coord = [(Int, Int)]()\n    var row_index = 0\n\
    \    var col_index = 0\n    for row in lst {\n        if row_index == x {\n  \
    \          coord.append((row_index, col_index))\n            row_index += 1\n\
    \            col_index = 0\n        } else {\n            col_index += 1\n   \
    \     }\n    }\n    coord.sortInPlace()\n    coord.sortInPlaceInDescendingOrder()\
    \ // sort by columns in descending order\n    return coord", "    var row = [Int]()\n\
    \    var coords = [(Int, Int)]()\n    var rowCoords = [(Int, Int)]()\n    var\
    \ rowCoordsSorted = [(Int, Int)]()\n    var rowCoordsSortedByCol = [(Int, Int)]()\n\
    \    var rowCoordsSortedByRow = [(Int, Int)]()\n    var rowCoordsSortedByColByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByRowByCol = [(Int, Int)]()\n    var\
    \ rowCoordsSortedByColByRowByRow = [(Int, Int)]()\n    var rowCoordsSortedByRowByColByRowByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByColByRowByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByRowByColByRowByRowByRow = [(Int, Int)]()\n    var rowCoordsSortedByColByRowByRowByRowByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByRowByColByRowByRowByRow = [(Int,\
    \ Int)]()\n    var rowCoordsSortedByRowByColByRowByRowByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByColByRowByRowByRowByRowByRow = [(Int, Int)]()\n    var\
    \ rowCoordsSortedByRowByColByRowByRowByRowByRowByRow = [(Int, Int)]()\n    var\
    \ rowCoordsSortedByRowByColByRowByRowByRowByRowByRow = [(Int, Int)]()\n    var\
    \ rowCoordsSortedByRowByColByRowByRowByRowByRowByRowByRow = [(Int, Int)]()\n \
    \   var rowCoordsSortedByRowByColByRowByRowByRowByRowByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByRowByColByRowByRowByRowByRowByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByRowByColByRowByRowByRowByRowByRowByRow = [(Int, Int)]()\n\
    \    var rowCoordsSortedByRowByColByRowByRowByRowByRowByRowByRowByRow = [(Int,\
    \ Int)]()\n    var rowCoordsSortedByRowByColByRowByRowByRowByRowByRowByRowByRow\
    \ = [(Int, Int)]()\n    var rowCoordsSortedByRowByColByRowByRowByRowByRow"]
stop_tokens:
- "\n}"
