language: swift
name: HumanEval_24_largest_divisor
results:
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = Int()\n\
    \    var divisor = Int()\n    for divisor in 1...n {\n        if n % divisor ==\
    \ 0 {\n            if largest == 0 || largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpmw2a5a3d/tmpmw2a5a3d.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09dba21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09db718b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09db718988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09db7177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmw2a5a3d                        0x0000555fc5dae335 <unavailable> + 4917

    5    libc.so.6                          0x00002b09dbc0d460 __libc_start_main +
    245

    6    tmpmw2a5a3d                        0x0000555fc5dadfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4kcxj92i/tmp4kcxj92i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03daf96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03dac8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03dac8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03dac8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kcxj92i                        0x000055af6580d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b03db182460 __libc_start_main +
    245

    6    tmp4kcxj92i                        0x000055af6580cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n    for i := 1; i < n; i++ {\n       \
    \ if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpka27wm94.swift:6:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpka27wm94.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n       \
    \    ^\n/tmp/tmpka27wm94.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorIndex = Int()\n    for i := 0; i < n; i++ {\n\
    \        if n % i == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmrzitlah.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpmrzitlah.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpmrzitlah.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors {\n        if n % divisor == 0 {\n        \
    \    if divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_ok0pi1e.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 1\n    var divisor = 1\n    for divisor <= n {\n        if n % divisor ==\
    \ 0 {\n            largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqrj8mho_.swift:6:17: error: expected 'in' after for-each pattern\n\
    \    for divisor <= n {\n                ^\n/tmp/tmpqrj8mho_.swift:6:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor <= n {\n\
    \                ^ ~\n                  \n/tmp/tmpqrj8mho_.swift:6:17: error:\
    \ '<=' is not a prefix unary operator\n    for divisor <= n {\n              \
    \  ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n    for i := 0; i < n; i++ {\n       \
    \ if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaqbqufdc.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpaqbqufdc.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpaqbqufdc.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n     \
    \       largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkrwfcq27.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 1\n    for divisor < n {\n        if n % divisor == 0\
    \ {\n            largestDivisor = divisor\n        }\n        divisor++\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpr601ym7f.swift:6:17: error: expected 'in' after for-each pattern\n\
    \    for divisor < n {\n                ^\n/tmp/tmpr601ym7f.swift:6:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor < n {\n\
    \                ^~\n                 \n/tmp/tmpr601ym7f.swift:6:17: error: '<'\
    \ is not a prefix unary operator\n    for divisor < n {\n                ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = Int()\n\
    \    var divisor = Int()\n    for divisor in 1...n {\n        if n % divisor ==\
    \ 0 {\n            if largest == 0 || largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpmw2a5a3d/tmpmw2a5a3d.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09dba21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09db718b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09db718988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09db7177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmw2a5a3d                        0x0000555fc5dae335 <unavailable> + 4917

    5    libc.so.6                          0x00002b09dbc0d460 __libc_start_main +
    245

    6    tmpmw2a5a3d                        0x0000555fc5dadfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n       \
    \     maxDivisor = divisor\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpomcz43_j.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    for divisor in 1...n {\n        if n % divisor == 0 {\n       \
    \     if largest == 0 || largest % divisor == 0 {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmyg73j3a.swift:7:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 || largest % divisor == 0 {\n               ^~~~~~~\n\
    /tmp/tmpmyg73j3a.swift:7:32: error: cannot find 'largest' in scope\n         \
    \   if largest == 0 || largest % divisor == 0 {\n                            \
    \   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor: Int\
    \ = 0\n    var maxDivisorIndex: Int = 0\n    for i := 1; i <= n; i++ {\n     \
    \   if n % i == 0 {\n            if maxDivisor < i {\n                maxDivisor\
    \ = i\n                maxDivisorIndex = i\n            }\n        }\n    }\n\
    \    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqgmydn4c.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpqgmydn4c.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpqgmydn4c.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 1\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp5emfn4wk/tmp5emfn4wk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46478f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46475edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46475ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46475ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5emfn4wk                        0x000055b3b9d2c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4647ae2460 __libc_start_main +
    245

    6    tmp5emfn4wk                        0x000055b3b9d2bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors {\n        if n % divisor == 0 {\n        \
    \    if divisor * divisor > n {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp8mlkag0v.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorFactor = 1\n    for divisor in 1...n {\n        if n %\
    \ divisor == 0 {\n            if divisor * maxDivisorFactor > n {\n          \
    \      maxDivisorFactor = divisor\n                maxDivisor = divisor\n    \
    \        } else {\n                maxDivisorFactor *= divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpr5wqfmli/tmpr5wqfmli.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3efb4adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3efb1a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3efb1a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3efb1a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr5wqfmli                        0x0000565031e5642b <unavailable> + 5163

    5    libc.so.6                          0x00002b3efb699460 __libc_start_main +
    245

    6    tmpr5wqfmli                        0x0000565031e55fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int(1)\n    for divisor in 1...n {\n        if n % divisor == 0 {\n      \
    \      if largest < divisor {\n                largest = divisor\n           \
    \ }\n        } else {\n            largestDivisor = divisor\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpph8m8yqv.swift:7:16: error: cannot find 'largest' in scope\n  \
    \          if largest < divisor {\n               ^~~~~~~\n/tmp/tmpph8m8yqv.swift:8:17:\
    \ error: cannot find 'largest' in scope\n                largest = divisor\n \
    \               ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor: Int\
    \ = 0\n    var maxDivisorCount: Int = 0\n    for divisor in divisors {\n     \
    \   if n / divisor == 0 {\n            if maxDivisorCount < divisor {\n      \
    \          maxDivisorCount = divisor\n                maxDivisor = divisor\n \
    \           }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpo143kw56.swift:6:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    for divisor in 1...n {\n        if n % divisor == 0 {\n       \
    \     if largest == 0 || largest % divisor == 0 {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmyg73j3a.swift:7:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 || largest % divisor == 0 {\n               ^~~~~~~\n\
    /tmp/tmpmyg73j3a.swift:7:32: error: cannot find 'largest' in scope\n         \
    \   if largest == 0 || largest % divisor == 0 {\n                            \
    \   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors {\n        if n / divisor == 0 {\n        \
    \    if divisor*divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmpbv3x0a.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n     \
    \       largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkrwfcq27.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = Int()\n\
    \    var divisor = Int()\n    for divisor in 1...n {\n        if n % divisor ==\
    \ 0 {\n            if largest == 0 || largest < divisor {\n                largest\
    \ = divisor\n            }\n        }\n    }\n    return largest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpmw2a5a3d/tmpmw2a5a3d.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09dba21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09db718b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09db718988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09db7177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmw2a5a3d                        0x0000555fc5dae335 <unavailable> + 4917

    5    libc.so.6                          0x00002b09dbc0d460 __libc_start_main +
    245

    6    tmpmw2a5a3d                        0x0000555fc5dadfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4kcxj92i/tmp4kcxj92i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03daf96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03dac8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03dac8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03dac8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kcxj92i                        0x000055af6580d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b03db182460 __libc_start_main +
    245

    6    tmp4kcxj92i                        0x000055af6580cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorRemainder = Int()\n    for divisor = Int(1);\
    \ divisor <= n; divisor++ {\n        if n % divisor == 0 {\n            if largestDivisor\
    \ == 0 {\n                largestDivisor = divisor\n                largestDivisorRemainder\
    \ = n\n            } else {\n                if largestDivisor > divisor {\n \
    \                   largestDivisor = divisor\n                    largestDivisorRemainder\
    \ = n\n                }\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpgtvn9x7q.swift:6:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for divisor = Int(1); divisor <= n; divisor++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if divisor * divisor > largestDivisor {\n              \
    \  largestDivisor = divisor\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpwmwhalvf/tmpwmwhalvf.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b58853c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b58850bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b58850bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b58850bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwmwhalvf                        0x000055e92200f335 <unavailable> + 4917

    5    libc.so.6                          0x00002b58855b1460 __libc_start_main +
    245

    6    tmpwmwhalvf                        0x000055e92200efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = 0\n    for i := 1; i < n; i++ {\n        if n %\
    \ i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpa583hyzs.swift:6:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpa583hyzs.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n       \
    \    ^\n/tmp/tmpa583hyzs.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = 0\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpiessjscn.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpiessjscn.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpiessjscn.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorCount = 0\n    for divisor in divisors {\n      \
    \  if n % divisor == 0 {\n            largestDivisorCount = divisor + 1\n    \
    \        if largestDivisor < largestDivisorCount {\n                largestDivisor\
    \ = largestDivisorCount\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjn4gxtjc.swift:6:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp20cavodl.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp20cavodl.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmp20cavodl.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n    for i := 0; i < n; i++ {\n       \
    \ if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp307110ly.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp307110ly.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmp307110ly.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > n {\n                largestDivisor = divisor\n     \
    \       } else {\n                largestDivisor = divisor * divisor\n       \
    \     }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpv3oeuua7/tmpv3oeuua7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abafe6fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abafe3f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abafe3f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abafe3f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3oeuua7                        0x000056070a19e335 <unavailable> + 4917

    5    libc.so.6                          0x00002abafe8e8460 __libc_start_main +
    245

    6    tmpv3oeuua7                        0x000056070a19dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largest == 0 {\n                largestDivisor = divisor\n            } else\
    \ {\n                if largest < divisor {\n                    largest = divisor\n\
    \                }\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpb9nri50i.swift:7:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 {\n               ^~~~~~~\n/tmp/tmpb9nri50i.swift:10:20:\
    \ error: cannot find 'largest' in scope\n                if largest < divisor\
    \ {\n                   ^~~~~~~\n/tmp/tmpb9nri50i.swift:11:21: error: cannot find\
    \ 'largest' in scope\n                    largest = divisor\n                \
    \    ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorFactor = 1\n    for divisor in 1...n {\n        if n %\
    \ divisor == 0 {\n            if maxDivisorFactor > divisor {\n              \
    \  maxDivisorFactor = divisor\n                maxDivisor = divisor\n        \
    \    }\n        } else {\n            if maxDivisorFactor > divisor {\n      \
    \          maxDivisorFactor = divisor\n                maxDivisor = divisor\n\
    \            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp44ojg3ey/tmp44ojg3ey.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7dccfdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7dc9f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7dc9f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7dc9f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp44ojg3ey                        0x00005598e91c442b <unavailable> + 5163

    5    libc.so.6                          0x00002ad7dcee9460 __libc_start_main +
    245

    6    tmp44ojg3ey                        0x00005598e91c3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 1\n    var largestDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmprb1d1jwy.swift:6:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmprb1d1jwy.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmprb1d1jwy.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorFactor = 1\n    for divisor in 1...n {\n        if n %\
    \ divisor == 0 {\n            if maxDivisorFactor > divisor {\n              \
    \  maxDivisorFactor = divisor\n                maxDivisor = divisor\n        \
    \    }\n        } else {\n            if maxDivisorFactor > 1 {\n            \
    \    maxDivisorFactor = 1\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpetuzmar1/tmpetuzmar1.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2cde231c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2cddf28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2cddf28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2cddf277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpetuzmar1                        0x000055853a9f642b <unavailable> + 5163

    5    libc.so.6                          0x00002b2cde41d460 __libc_start_main +
    245

    6    tmpetuzmar1                        0x000055853a9f5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ Int()\n    var maxDivisorIndex = Int()\n    for i in 1...n {\n        if n %\
    \ i == 0 {\n            if maxDivisor == 0 || maxDivisor > i {\n             \
    \   maxDivisor = i\n                maxDivisorIndex = i\n            }\n     \
    \   }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpe2w9k6xu/tmpe2w9k6xu.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b999aac9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b999a7c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b999a7c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b999a7bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2w9k6xu                        0x000055bf9ab9f42b <unavailable> + 5163

    5    libc.so.6                          0x00002b999acb5460 __libc_start_main +
    245

    6    tmpe2w9k6xu                        0x000055bf9ab9efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = 0\n    for i := 0; i < n; i++ {\n        if n %\
    \ i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqqccrpjc.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpqqccrpjc.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpqqccrpjc.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ maxDivisor < divisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpgmczcimv/tmpgmczcimv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19aef9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19aec94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19aec94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19aec937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgmczcimv                        0x000056162225d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b19af189460 __libc_start_main +
    245

    6    tmpgmczcimv                        0x000056162225cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4kcxj92i/tmp4kcxj92i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03daf96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03dac8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03dac8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03dac8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kcxj92i                        0x000055af6580d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b03db182460 __libc_start_main +
    245

    6    tmp4kcxj92i                        0x000055af6580cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > n {\n                largestDivisor = divisor\n     \
    \       } else {\n                largestDivisor = largestDivisor * divisor +\
    \ divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpakf17vz5/tmpakf17vz5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8fe51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8fe215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8fe215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8fe2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpakf17vz5                        0x000055dd50b94335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba8fe70a460 __libc_start_main +
    245

    6    tmpakf17vz5                        0x000055dd50b93fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n    for i := 0; i < n; i++ {\n       \
    \ if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaqbqufdc.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpaqbqufdc.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpaqbqufdc.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n     \
    \       largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkrwfcq27.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = Int()\n\
    \    for divisor in 1...n {\n        if n % divisor == 0 {\n            if largest\
    \ < divisor {\n                largest = divisor\n            }\n        }\n \
    \   }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpxsptkqwc/tmpxsptkqwc.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b575faa8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b575f79fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b575f79f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b575f79e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxsptkqwc                        0x000055f15ec22335 <unavailable> + 4917

    5    libc.so.6                          0x00002b575fc94460 __libc_start_main +
    245

    6    tmpxsptkqwc                        0x000055f15ec21fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int(1)\n    for divisor in 1...n {\n        if n % divisor == 0 {\n      \
    \      largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmppta792oh/tmppta792oh.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0465d15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0465a0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0465a0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0465a0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppta792oh                        0x000055d050996335 <unavailable> + 4917

    5    libc.so.6                          0x00002b0465f01460 __libc_start_main +
    245

    6    tmppta792oh                        0x000055d050995fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            maxDivisor\
    \ = divisor\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpkijsh9wi/tmpkijsh9wi.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4753e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4750ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4750dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4750dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkijsh9wi                        0x0000558f51e93335 <unavailable> + 4917

    5    libc.so.6                          0x00002af4755d2460 __libc_start_main +
    245

    6    tmpkijsh9wi                        0x0000558f51e92fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largest == 0 || largest % divisor == 0 {\n                largest = divisor\n\
    \            }\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpij4ajguf.swift:7:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 || largest % divisor == 0 {\n               ^~~~~~~\n\
    /tmp/tmpij4ajguf.swift:7:32: error: cannot find 'largest' in scope\n         \
    \   if largest == 0 || largest % divisor == 0 {\n                            \
    \   ^~~~~~~\n/tmp/tmpij4ajguf.swift:8:17: error: cannot find 'largest' in scope\n\
    \                largest = divisor\n                ^~~~~~~\n/tmp/tmpij4ajguf.swift:12:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = 0\n    for i := 0; i < n; i++ {\n        if n %\
    \ maxDivisor == 0 {\n            maxDivisorIndex++\n            maxDivisor = maxDivisor\
    \ * i + 1\n        }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpzcp2hg64.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpzcp2hg64.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpzcp2hg64.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > n {\n                return largestDivisor\n        \
    \    }\n            largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpk8pvyzw6/tmpk8pvyzw6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7587e4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7587b42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7587b42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7587b417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8pvyzw6                        0x000055c90b07842b <unavailable> + 5163

    5    libc.so.6                          0x00002b7588037460 __libc_start_main +
    245

    6    tmpk8pvyzw6                        0x000055c90b077fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorIndex = Int()\n    for i : Int in 0..<n {\n \
    \       if n % i == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b83f2c14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83f290b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b83f290b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b83f290b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b83f290abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3wx_dtuh                        0x00005598d70f26f9 <unavailable> + 5881

    6    tmp3wx_dtuh                        0x00005598d70f22c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b83f2e00460 __libc_start_main +
    245

    8    tmp3wx_dtuh                        0x00005598d70f1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4kcxj92i/tmp4kcxj92i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03daf96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03dac8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03dac8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03dac8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kcxj92i                        0x000055af6580d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b03db182460 __libc_start_main +
    245

    6    tmp4kcxj92i                        0x000055af6580cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 0; i < n; i++ {\n        if n\
    \ % maxDivisor == 0 {\n            maxDivisorIndex = i\n        }\n        if\
    \ maxDivisor > n / maxDivisor {\n            maxDivisor = n / maxDivisor\n   \
    \     }\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1oaywr36.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp1oaywr36.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmp1oaywr36.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorIndex = Int()\n    for i : Int in 0..<n {\n \
    \       if n%i == 0 {\n            if largestDivisor == 0 || largestDivisor >\
    \ i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c9bb06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c9b7fd561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8c9b7fd286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8c9b7fd13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8c9b7fcbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprxzfu9oo                        0x000055fd654d06f9 <unavailable> + 5881

    6    tmprxzfu9oo                        0x000055fd654d02c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b8c9bcf2460 __libc_start_main +
    245

    8    tmprxzfu9oo                        0x000055fd654cffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n    for i := 0; i < n; i++ {\n       \
    \ if n % i == 0 {\n            if largestDivisor == 0 || largestDivisor > i {\n\
    \                largestDivisor = i\n                largestDivisorIndex = i\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpldvbf970.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpldvbf970.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpldvbf970.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorFactor = Int()\n    for divisor in divisors {\n\
    \        if n / divisor == 0 {\n            if divisor > largestDivisorFactor\
    \ {\n                largestDivisor = divisor\n                largestDivisorFactor\
    \ = n\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpcd9zisz3.swift:6:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if largest == 0 {\n                largestDivisor = divisor\n\
    \            } else {\n                if largest < divisor {\n              \
    \      largestDivisor = divisor\n                }\n            }\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp6rtq9qm6.swift:8:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 {\n               ^~~~~~~\n/tmp/tmp6rtq9qm6.swift:11:20:\
    \ error: cannot find 'largest' in scope\n                if largest < divisor\
    \ {\n                   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = n /\
    \ 2\n    var divisor = 2\n    while divisor < n {\n        if n % divisor == 0\
    \ {\n            largest = divisor\n        }\n        divisor++\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbnh_imrz.swift:10:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 1\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp5emfn4wk/tmp5emfn4wk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46478f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46475edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46475ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46475ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5emfn4wk                        0x000055b3b9d2c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4647ae2460 __libc_start_main +
    245

    6    tmp5emfn4wk                        0x000055b3b9d2bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    for divisor in 1...n {\n        if n % divisor == 0 {\n       \
    \     if largest == 0 || largest % divisor == 0 {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmyg73j3a.swift:7:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 || largest % divisor == 0 {\n               ^~~~~~~\n\
    /tmp/tmpmyg73j3a.swift:7:32: error: cannot find 'largest' in scope\n         \
    \   if largest == 0 || largest % divisor == 0 {\n                            \
    \   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n     \
    \       if divisor * divisor > n {\n                largestDivisor = divisor\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmdta0h3x.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpdlnwz0bq/tmpdlnwz0bq.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76426b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76423afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76423af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76423ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlnwz0bq                        0x000055e2b3493335 <unavailable> + 4917

    5    libc.so.6                          0x00002b76428a4460 __libc_start_main +
    245

    6    tmpdlnwz0bq                        0x000055e2b3492fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorFactor = 0\n    for factor in 2...n {\n        if\
    \ n % factor == 0 {\n            if largestDivisorFactor < factor {\n        \
    \        largestDivisorFactor = factor\n                largestDivisor = factor\n\
    \            }\n        } else {\n            if largestDivisorFactor == factor\
    \ {\n                largestDivisorFactor = factor\n                largestDivisor\
    \ = factor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp67qdrcb8/tmp67qdrcb8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba71604ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba715d45b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba715d45988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba715d447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67qdrcb8                        0x00005598d0ae8335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba71623a460 __libc_start_main +
    245

    6    tmp67qdrcb8                        0x00005598d0ae7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp20cavodl.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp20cavodl.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmp20cavodl.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpdlnwz0bq/tmpdlnwz0bq.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76426b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76423afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76423af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76423ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlnwz0bq                        0x000055e2b3493335 <unavailable> + 4917

    5    libc.so.6                          0x00002b76428a4460 __libc_start_main +
    245

    6    tmpdlnwz0bq                        0x000055e2b3492fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = -1\n    for i := 0; i < n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaa84cj9t.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpaa84cj9t.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpaa84cj9t.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    for divisor in 1...n {\n        if n % divisor == 0 {\n       \
    \     if largestDivisor == 0 || largestDivisor > divisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpxe2s678x/tmpxe2s678x.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2018832c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2018529b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2018529988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20185287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxe2s678x                        0x000055ea0071742b <unavailable> + 5163

    5    libc.so.6                          0x00002b2018a1e460 __libc_start_main +
    245

    6    tmpxe2s678x                        0x000055ea00716fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            maxDivisor\
    \ = divisor\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpkijsh9wi/tmpkijsh9wi.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4753e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4750ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4750dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4750dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkijsh9wi                        0x0000558f51e93335 <unavailable> + 4917

    5    libc.so.6                          0x00002af4755d2460 __libc_start_main +
    245

    6    tmpkijsh9wi                        0x0000558f51e92fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors {\n        if n % divisor == 0 {\n        \
    \    if divisor*divisor > n {\n                largestDivisor = divisor\n    \
    \        }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpf1gkpxvb.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = 0\n    for i in 1...n {\n        if n % i == 0\
    \ {\n            if maxDivisor < i {\n                maxDivisor = i\n       \
    \         maxDivisorIndex = i\n            }\n        }\n    }\n    return maxDivisorIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpmay3raw2/tmpmay3raw2.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad864968c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad86465fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad86465f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad86465e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmay3raw2                        0x000055a1f29bb335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad864b54460 __libc_start_main +
    245

    6    tmpmay3raw2                        0x000055a1f29bafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 1\n    var largestDivisorFactor = 1\n    var largestDivisorFactorFactor =\
    \ 1\n    for divisor in divisors {\n        if n % divisor == 0 {\n          \
    \  if largestDivisorFactor < divisor {\n                largestDivisorFactor =\
    \ divisor\n                largestDivisorFactorFactor = largestDivisorFactorFactor\n\
    \            } else {\n                largestDivisorFactorFactor = largestDivisorFactorFactor\
    \ * divisor\n            }\n        }\n    }\n    if largestDivisorFactorFactor\
    \ > largestDivisorFactor {\n        largestDivisorFactor = largestDivisorFactorFactor\n\
    \    }\n    return largestDivisorFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpusi0gvm7.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 1\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp5emfn4wk/tmp5emfn4wk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46478f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46475edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46475ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46475ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5emfn4wk                        0x000055b3b9d2c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4647ae2460 __libc_start_main +
    245

    6    tmp5emfn4wk                        0x000055b3b9d2bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n     \
    \       largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkrwfcq27.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorFactor = Int()\n    var largestDivisorFactorCount\
    \ = Int()\n\n    for divisor in 1...n {\n        if n % divisor == 0 {\n     \
    \       largestDivisorFactor = divisor\n            largestDivisorFactorCount\
    \ = 1\n        }\n        else {\n            largestDivisorFactorCount += 1\n\
    \            if largestDivisorFactorCount > largestDivisor {\n               \
    \ largestDivisor = largestDivisorFactor\n            }\n        }\n    }\n   \
    \ return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorNum = 0\n    for divisor in divisors {\n        if n /\
    \ divisor == 0 {\n            if divisor > maxDivisorNum {\n                maxDivisorNum\
    \ = divisor\n                maxDivisor = divisor\n            }\n        }\n\
    \    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmphaxw7k09.swift:6:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ maxDivisor < divisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpgmczcimv/tmpgmczcimv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19aef9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19aec94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19aec94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19aec937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgmczcimv                        0x000056162225d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b19af189460 __libc_start_main +
    245

    6    tmpgmczcimv                        0x000056162225cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ divisor > maxDivisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpd555wbce/tmpd555wbce.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8e5b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc8e2aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc8e2aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc8e2a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd555wbce                        0x00005643d3d55335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc8e79f460 __libc_start_main +
    245

    6    tmpd555wbce                        0x00005643d3d54fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = 0\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg7d_epub.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpg7d_epub.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpg7d_epub.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorFactor = Int()\n    var largestDivisorFactor2\
    \ = Int()\n    var largestDivisorFactor3 = Int()\n    var largestDivisorFactor4\
    \ = Int()\n    var largestDivisorFactor5 = Int()\n    var largestDivisorFactor6\
    \ = Int()\n    var largestDivisorFactor7 = Int()\n    var largestDivisorFactor8\
    \ = Int()\n    var largestDivisorFactor9 = Int()\n    var largestDivisorFactor10\
    \ = Int()\n    var largestDivisorFactor11 = Int()\n    var largestDivisorFactor12\
    \ = Int()\n    var largestDivisorFactor13 = Int()\n    var largestDivisorFactor14\
    \ = Int()\n    var largestDivisorFactor15 = Int()\n    var largestDivisorFactor16\
    \ = Int()\n    var largestDivisorFactor17 = Int()\n    var largestDivisorFactor18\
    \ = Int()\n    var largestDivisorFactor19 = Int()\n    var largestDivisorFactor20\
    \ = Int()\n    var largestDivisorFactor21 = Int()\n    var largestDivisorFactor22\
    \ = Int()\n    var largestDivisorFactor23 = Int()\n    var largestDivisorFactor24\
    \ = Int()\n    var largestDivisorFactor25 = Int()\n    var largestDivisorFactor26\
    \ = Int()\n    var largestDivisorFactor27 = Int()\n    var largestDivisorFactor28\
    \ = Int()\n    var largestDivisorFactor29 = Int()\n    var largestDivisorFactor30\
    \ = Int()\n    var largestDivisorFactor31 = Int()\n    var largestDivisorFactor32\
    \ = Int()\n    var largestDivisorFactor33 = Int()\n    var largestDivisorFactor34\
    \ = Int()\n    var largestDivisorFactor35 = Int()\n    var largestDivisorFactor36\
    \ = Int()\n    var largestDivisorFactor37 = Int()\n    var largestDivisorFactor38\
    \ = Int()\n    var largestDivisorFactor39 = Int()\n    var largestDivisorFactor40\
    \ = Int()\n    var largestDivisorFactor41 = Int()\n    var largestDivisorFactor42\
    \ = Int()\n    var largestDivisorFactor43 = Int()\n    var largestDivisorFactor44\
    \ = Int()\n    var largestDivisorFactor45 = Int()\n    var largestDivisorFactor46\
    \ = Int()\n    var largestDivisorFactor47 = Int\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpajcmw9pu.swift:51:34: error: expected member name or constructor\
    \ call after type name\n    var largestDivisorFactor47 = Int\n               \
    \                  ^\n/tmp/tmpajcmw9pu.swift:51:34: note: add arguments after\
    \ the type to construct a value of the type\n    var largestDivisorFactor47 =\
    \ Int\n                                 ^\n                                  \
    \  ()\n/tmp/tmpajcmw9pu.swift:51:34: note: use '.self' to reference the type object\n\
    \    var largestDivisorFactor47 = Int\n                                 ^\n  \
    \                                  .self\n/tmp/tmpajcmw9pu.swift:4:9: warning:\
    \ initialization of variable 'largestDivisor' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var largestDivisor = Int()\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpajcmw9pu.swift:5:9: warning: initialization of variable 'largestDivisorFactor'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var largestDivisorFactor = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpajcmw9pu.swift:6:9:\
    \ warning: initialization of variable 'largestDivisorFactor2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var largestDivisorFactor2\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpajcmw9pu.swift:7:9: warning:\
    \ initialization of variable 'largestDivisorFactor3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var largestDivisorFactor3\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpajcmw9pu.swift:8:9: warning:\
    \ initialization of variable 'largestDivisorFactor4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var largestDivisorFactor4\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpajcmw9pu.swift:9:9: warning:\
    \ initialization of variable 'largestDivisorFactor5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var largestDivisorFactor5\
    \ = Int()\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpajcmw9pu.swift:10:9:\
    \ warning: initialization of variable 'largestDivisorFactor6' was nev"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorIndex = Int()\n    for i : Int in 0..<n {\n \
    \       if n % i == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14366: Fatal error: Division by zero in remainder
    operation

    Current stack trace:

    0    libswiftCore.so                    0x00002b83f2c14c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83f290b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b83f290b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b83f290b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b83f290abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3wx_dtuh                        0x00005598d70f26f9 <unavailable> + 5881

    6    tmp3wx_dtuh                        0x00005598d70f22c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b83f2e00460 __libc_start_main +
    245

    8    tmp3wx_dtuh                        0x00005598d70f1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 1\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp5emfn4wk/tmp5emfn4wk.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46478f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46475edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46475ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46475ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5emfn4wk                        0x000055b3b9d2c335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4647ae2460 __libc_start_main +
    245

    6    tmp5emfn4wk                        0x000055b3b9d2bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largestDivisor < divisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp174bu9h9/tmp174bu9h9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fd0dd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fd0ac7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fd0ac7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fd0ac67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp174bu9h9                        0x000055ef60a5e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4fd0fbc460 __libc_start_main +
    245

    6    tmp174bu9h9                        0x000055ef60a5dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    for divisor in 1...n {\n        if n % divisor == 0 {\n       \
    \     if divisor * divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpd9uxr__6/tmpd9uxr__6.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60f8215c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60f7f0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60f7f0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60f7f0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd9uxr__6                        0x0000563a6d1aa335 <unavailable> + 4917

    5    libc.so.6                          0x00002b60f8401460 __libc_start_main +
    245

    6    tmpd9uxr__6                        0x0000563a6d1a9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            maxDivisor\
    \ = divisor\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpkijsh9wi/tmpkijsh9wi.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af4753e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4750ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af4750dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af4750dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkijsh9wi                        0x0000558f51e93335 <unavailable> + 4917

    5    libc.so.6                          0x00002af4755d2460 __libc_start_main +
    245

    6    tmpkijsh9wi                        0x0000558f51e92fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var divisor = Int()\n    for divisor in 1...n {\n        if n %\
    \ divisor == 0 {\n            if divisor * divisor > largestDivisor {\n      \
    \          largestDivisor = divisor\n            }\n        }\n    }\n    return\
    \ largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpl6rgd2tg/tmpl6rgd2tg.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79d7215c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79d6f0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79d6f0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79d6f0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl6rgd2tg                        0x000055acbf4bf335 <unavailable> + 4917

    5    libc.so.6                          0x00002b79d7401460 __libc_start_main +
    245

    6    tmpl6rgd2tg                        0x000055acbf4befe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorFactor = Int()\n    for factor in 2...n {\n \
    \       if n % factor == 0 {\n            if largestDivisorFactor < factor {\n\
    \                largestDivisorFactor = factor\n                largestDivisor\
    \ = factor\n            }\n        } else {\n            if largestDivisorFactor\
    \ == factor {\n                largestDivisorFactor = factor\n               \
    \ largestDivisor = factor\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpkj3hygyt/tmpkj3hygyt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0d8b25c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0d881cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0d881c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0d881b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkj3hygyt                        0x00005653f4183335 <unavailable> + 4917

    5    libc.so.6                          0x00002ad0d8d11460 __libc_start_main +
    245

    6    tmpkj3hygyt                        0x00005653f4182fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = 0\n    for i := 1; i < n; i++ {\n        if n %\
    \ i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpa583hyzs.swift:6:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpa583hyzs.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n       \
    \    ^\n/tmp/tmpa583hyzs.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ Int()\n    var maxDivisorIndex = Int()\n    for i in 1...n {\n        if n %\
    \ i == 0 {\n            if maxDivisor == 0 || maxDivisor > i {\n             \
    \   maxDivisor = i\n                maxDivisorIndex = i\n            }\n     \
    \   }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpko6bt1k4/tmpko6bt1k4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6862eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba685fe1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba685fe1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba685fe07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko6bt1k4                        0x0000564911a5942b <unavailable> + 5163

    5    libc.so.6                          0x00002ba6864d6460 __libc_start_main +
    245

    6    tmpko6bt1k4                        0x0000564911a58fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ Int()\n    for divisor in 1...n {\n        if n % divisor == 0 {\n         \
    \   if maxDivisor < divisor {\n                maxDivisor = divisor\n        \
    \    }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpbvk233pe/tmpbvk233pe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d74faec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d74ca5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d74ca5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d74ca47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvk233pe                        0x0000559036ac9335 <unavailable> + 4917

    5    libc.so.6                          0x00002b8d7519a460 __libc_start_main +
    245

    6    tmpbvk233pe                        0x0000559036ac8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors {\n        if n % divisor == 0 {\n        \
    \    if divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_ok0pi1e.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n    for i := 1; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            if largestDivisor == 0 || largestDivisor > i {\n\
    \                largestDivisor = i\n                largestDivisorIndex = i\n\
    \            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpibwcc0xu.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpibwcc0xu.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpibwcc0xu.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorCount = 0\n    for divisor in divisors {\n      \
    \  if n / divisor == 0 {\n            if largestDivisorCount < divisor {\n   \
    \             largestDivisorCount = divisor\n                largestDivisor =\
    \ divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvxalefqo.swift:6:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpu658nnpu/tmpu658nnpu.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0dcbd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0dc8cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0dc8cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0dc8cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu658nnpu                        0x000055978a19e335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab0dcdc2460 __libc_start_main +
    245

    6    tmpu658nnpu                        0x000055978a19dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ divisor > maxDivisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpd555wbce/tmpd555wbce.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8e5b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc8e2aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc8e2aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc8e2a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd555wbce                        0x00005643d3d55335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc8e79f460 __libc_start_main +
    245

    6    tmpd555wbce                        0x00005643d3d54fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = 0\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg7d_epub.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpg7d_epub.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpg7d_epub.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor ==\
    \ 0 {\n            if divisor > maxDivisor {\n                maxDivisor = divisor\n\
    \            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo5a9knot/tmpo5a9knot.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8296171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8295e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8295e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8295e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5a9knot                        0x0000555598484335 <unavailable> + 4917

    5    libc.so.6                          0x00002b829635d460 __libc_start_main +
    245

    6    tmpo5a9knot                        0x0000555598483fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorFactor = Int()\n    for number in 1...n {\n \
    \       if number % 2 == 0 {\n            if number > largestDivisorFactor {\n\
    \                largestDivisor = number\n                largestDivisorFactor\
    \ = largestDivisor\n            }\n        } else {\n            if number > largestDivisorFactor\
    \ {\n                largestDivisorFactor = number\n            }\n        }\n\
    \    }\n    return largestDivisorFactor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpk5pphmcw/tmpk5pphmcw.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2e5cfec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2e59f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2e59f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2e59f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5pphmcw                        0x000055fa641b1335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae2e5eea460 __libc_start_main +
    245

    6    tmpk5pphmcw                        0x000055fa641b0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int(1)\n    for divisor in 1...n {\n        if n % divisor == 0 {\n      \
    \      if divisor * divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpamm9z5z5/tmpamm9z5z5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ebfddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ebfad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ebfad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ebfad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpamm9z5z5                        0x000055d05fb6d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4ebffc7460 __libc_start_main +
    245

    6    tmpamm9z5z5                        0x000055d05fb6cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvv3mp3ge.swift:6:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvv3mp3ge.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpvv3mp3ge.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ divisor > maxDivisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpd555wbce/tmpd555wbce.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8e5b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc8e2aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc8e2aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc8e2a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd555wbce                        0x00005643d3d55335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc8e79f460 __libc_start_main +
    245

    6    tmpd555wbce                        0x00005643d3d54fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 0\n    var divisorCount = 0\n    for divisor in 1...n\
    \ {\n        if n % divisor == 0 {\n            divisorCount++\n            if\
    \ divisorCount > largestDivisor {\n                largestDivisor = divisorCount\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpl5b999nd.swift:9:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            divisorCount++\n                        ^~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorFactor = 1\n    for divisor in 1...n {\n        if n %\
    \ divisor == 0 {\n            if maxDivisorFactor > divisor {\n              \
    \  maxDivisor = divisor\n                maxDivisorFactor = divisor\n        \
    \    } else {\n                maxDivisorFactor = divisor\n            }\n   \
    \     }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpekw1t1fv/tmpekw1t1fv.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68a7ed3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68a7bcab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68a7bca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68a7bc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpekw1t1fv                        0x0000565486fa442b <unavailable> + 5163

    5    libc.so.6                          0x00002b68a80bf460 __libc_start_main +
    245

    6    tmpekw1t1fv                        0x0000565486fa3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = 0\n    for i := 0; i < n; i++ {\n        if n %\
    \ i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqqccrpjc.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpqqccrpjc.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpqqccrpjc.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ divisor > maxDivisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpd555wbce/tmpd555wbce.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8e5b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc8e2aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc8e2aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc8e2a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd555wbce                        0x00005643d3d55335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc8e79f460 __libc_start_main +
    245

    6    tmpd555wbce                        0x00005643d3d54fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ divisor > maxDivisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpd555wbce/tmpd555wbce.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8e5b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc8e2aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc8e2aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc8e2a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd555wbce                        0x00005643d3d55335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc8e79f460 __libc_start_main +
    245

    6    tmpd555wbce                        0x00005643d3d54fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > n {\n                largestDivisor = divisor\n     \
    \       } else {\n                largestDivisor = largestDivisor * divisor +\
    \ divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpakf17vz5/tmpakf17vz5.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8fe51ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8fe215b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8fe215988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8fe2147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpakf17vz5                        0x000055dd50b94335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba8fe70a460 __libc_start_main +
    245

    6    tmpakf17vz5                        0x000055dd50b93fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpu658nnpu/tmpu658nnpu.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0dcbd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0dc8cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0dc8cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0dc8cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu658nnpu                        0x000055978a19e335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab0dcdc2460 __libc_start_main +
    245

    6    tmpu658nnpu                        0x000055978a19dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors {\n        if n / divisor == 0 {\n        \
    \    if divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaxjytqsu.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = n /\
    \ 2\n    var divisor = 2\n    while divisor < n {\n        if n % divisor == 0\
    \ {\n            largest = divisor\n        }\n        divisor++\n    }\n    return\
    \ largest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(largest_divisor(n: 3)\
    \ == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10) ==\
    \ 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49) ==\
    \ 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbnh_imrz.swift:10:16: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        divisor++\n               ^~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = 0\n    for i := 2; i <= n/2; i += 1 {\n       \
    \ if n % i == 0 {\n            if maxDivisor < i {\n                maxDivisor\
    \ = i\n                maxDivisorIndex = i\n            }\n        }\n    }\n\
    \    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp12m7qjsl.swift:6:12: error: expected type\n    for i := 2; i <=\
    \ n/2; i += 1 {\n           ^\n            <#type#>\n/tmp/tmp12m7qjsl.swift:6:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i <= n/2; i +=\
    \ 1 {\n           ^\n/tmp/tmp12m7qjsl.swift:6:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i <= n/2; i += 1 {\n           ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorFactor = Int()\n    for divisor in 1...n {\n\
    \        if n % divisor == 0 {\n            if largestDivisorFactor > divisor\
    \ {\n                largestDivisorFactor = divisor\n                largestDivisor\
    \ = Int(divisor)\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpi7h54oiz/tmpi7h54oiz.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63263a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b632609ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b632609a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63260997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi7h54oiz                        0x000055be55258475 <unavailable> + 5237

    5    libc.so.6                          0x00002b632658f460 __libc_start_main +
    245

    6    tmpi7h54oiz                        0x000055be55258129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = 0\n    for i := 0; i < n; i++ {\n        if n %\
    \ i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqqccrpjc.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpqqccrpjc.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpqqccrpjc.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ Int()\n    for divisor in 1...n {\n        if n % divisor == 0 {\n         \
    \   if maxDivisor < divisor {\n                maxDivisor = divisor\n        \
    \    }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpbvk233pe/tmpbvk233pe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d74faec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d74ca5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d74ca5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d74ca47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvk233pe                        0x0000559036ac9335 <unavailable> + 4917

    5    libc.so.6                          0x00002b8d7519a460 __libc_start_main +
    245

    6    tmpbvk233pe                        0x0000559036ac8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = 0\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpnopr32jp.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnopr32jp.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpnopr32jp.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largestDivisor < divisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp174bu9h9/tmp174bu9h9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fd0dd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fd0ac7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fd0ac7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fd0ac67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp174bu9h9                        0x000055ef60a5e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4fd0fbc460 __libc_start_main +
    245

    6    tmp174bu9h9                        0x000055ef60a5dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor: Int\
    \ = 0\n    var maxDivisorIndex: Int = 0\n    for i := 1; i <= n; i++ {\n     \
    \   if n % i == 0 {\n            if maxDivisor < i {\n                maxDivisor\
    \ = i\n                maxDivisorIndex = i\n            }\n        }\n    }\n\
    \    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpqgmydn4c.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpqgmydn4c.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpqgmydn4c.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorValue = n\n    for divisor in 2..<n {\n        if n % divisor\
    \ == 0 {\n            if maxDivisorValue < divisor {\n                maxDivisorValue\
    \ = divisor\n                maxDivisor = divisor\n            }\n        }\n\
    \    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp7_o3udgi/tmp7_o3udgi.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af573ef5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af573becb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af573bec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af573beb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_o3udgi                        0x000056449197742b <unavailable> + 5163

    5    libc.so.6                          0x00002af5740e1460 __libc_start_main +
    245

    6    tmp7_o3udgi                        0x0000564491976fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n     \
    \       largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkrwfcq27.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n     \
    \       largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpkrwfcq27.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpdlnwz0bq/tmpdlnwz0bq.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76426b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76423afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76423af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76423ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlnwz0bq                        0x000055e2b3493335 <unavailable> + 4917

    5    libc.so.6                          0x00002b76428a4460 __libc_start_main +
    245

    6    tmpdlnwz0bq                        0x000055e2b3492fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorIndex = Int()\n    for i := 1; i <= n; i++ {\n\
    \        if n % i == 0 {\n            if largestDivisor == 0 || largestDivisor\
    \ > i {\n                largestDivisor = i\n                largestDivisorIndex\
    \ = i\n            }\n        }\n    }\n    return largestDivisorIndex\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpm1z89a5d.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpm1z89a5d.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpm1z89a5d.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor ==\
    \ 0 {\n            if divisor > maxDivisor {\n                maxDivisor = divisor\n\
    \            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpo5a9knot/tmpo5a9knot.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8296171c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8295e68b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8295e68988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8295e677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo5a9knot                        0x0000555598484335 <unavailable> + 4917

    5    libc.so.6                          0x00002b829635d460 __libc_start_main +
    245

    6    tmpo5a9knot                        0x0000555598483fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor: Int\
    \ = 0\n    var maxDivisorIndex: Int = 0\n    for i := 0; i < n; i++ {\n      \
    \  if n % i == 0 {\n            if maxDivisor < i {\n                maxDivisor\
    \ = i\n                maxDivisorIndex = i\n            }\n        }\n    }\n\
    \    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdof31psm.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpdof31psm.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpdof31psm.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    for divisor in divisors {\n        if n % divisor == 0 {\n    \
    \        if largest == 0 || largest < divisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp2f8my_8r.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > n {\n                largestDivisor = divisor\n     \
    \       }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp0dqvxulk/tmp0dqvxulk.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7318ed9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7318bd0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7318bd0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7318bcf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0dqvxulk                        0x0000556c01aea335 <unavailable> + 4917

    5    libc.so.6                          0x00002b73190c5460 __libc_start_main +
    245

    6    tmp0dqvxulk                        0x0000556c01ae9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors {\n        if n % divisor == 0 {\n        \
    \    if divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp_ok0pi1e.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int(1)\n    for divisor in 1...n {\n        if n % divisor == 0 {\n      \
    \      if divisor * divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpamm9z5z5/tmpamm9z5z5.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ebfddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ebfad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ebfad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ebfad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpamm9z5z5                        0x000055d05fb6d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4ebffc7460 __libc_start_main +
    245

    6    tmpamm9z5z5                        0x000055d05fb6cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largestDivisor == 0 {\n                largestDivisor = divisor\n       \
    \     } else {\n                if largestDivisor > divisor {\n              \
    \      largestDivisor = divisor\n                }\n            }\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp43vezhd2/tmp43vezhd2.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9fef440c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9fef137b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9fef137988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9fef1367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp43vezhd2                        0x000056300c02742b <unavailable> + 5163

    5    libc.so.6                          0x00002b9fef62c460 __libc_start_main +
    245

    6    tmp43vezhd2                        0x000056300c026fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpu658nnpu/tmpu658nnpu.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0dcbd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0dc8cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0dc8cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0dc8cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu658nnpu                        0x000055978a19e335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab0dcdc2460 __libc_start_main +
    245

    6    tmpu658nnpu                        0x000055978a19dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largest < divisor {\n                largest = divisor\n            }\n \
    \       }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpm6ir3l2g.swift:7:16: error: cannot find 'largest' in scope\n  \
    \          if largest < divisor {\n               ^~~~~~~\n/tmp/tmpm6ir3l2g.swift:8:17:\
    \ error: cannot find 'largest' in scope\n                largest = divisor\n \
    \               ^~~~~~~\n/tmp/tmpm6ir3l2g.swift:12:12: error: cannot find 'largest'\
    \ in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int(1)\n    var largestDivisorFactor = Int(1)\n    var currentDivisor = Int(1)\n\
    \    var currentDivisorFactor = Int(1)\n    var currentDivisorFactorIsEven = Int(0)\n\
    \    var currentDivisorFactorIsOdd = Int(0)\n\n    for currentDivisorFactor in\
    \ 1...n {\n        if currentDivisorFactor % 2 == 0 {\n            currentDivisorFactorIsEven\
    \ = 1\n        } else {\n            currentDivisorFactorIsEven = 0\n        }\n\
    \n        if currentDivisorFactor > largestDivisorFactor {\n            largestDivisorFactor\
    \ = currentDivisorFactor\n            largestDivisor = currentDivisor\n      \
    \  }\n\n        if currentDivisorFactorIsEven == 0 {\n            currentDivisorFactorIsOdd\
    \ = 1\n        } else {\n            currentDivisorFactorIsOdd = 0\n        }\n\
    \n        if currentDivisorFactorIsOdd != currentDivisorFactorIsEven {\n     \
    \       currentDivisor = currentDivisor * currentDivisorFactor\n        }\n  \
    \  }\n\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmp90mj5ju1/tmp90mj5ju1.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af3c7ddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af3c7ad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af3c7ad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af3c7ad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90mj5ju1                        0x000055c8ffa07335 <unavailable> + 4917

    5    libc.so.6                          0x00002af3c7fc7460 __libc_start_main +
    245

    6    tmp90mj5ju1                        0x000055c8ffa06fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorIndex = 0\n    for i := 1; i < n; i++ {\n        if n %\
    \ i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpnu9d3xij.swift:6:12: error: expected type\n    for i := 1; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpnu9d3xij.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i < n; i++ {\n       \
    \    ^\n/tmp/tmpnu9d3xij.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 1; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n     \
    \       if divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpq0i29a66.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largestDivisor == 0 {\n                largestDivisor = divisor\n       \
    \     } else {\n                if divisor > largestDivisor {\n              \
    \      largestDivisor = divisor\n                }\n            }\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmph5yxsq2m/tmph5yxsq2m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cde631c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cde328b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cde328988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cde3277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5yxsq2m                        0x000055fad0911335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6cde81d460 __libc_start_main +
    245

    6    tmph5yxsq2m                        0x000055fad0910fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpdlnwz0bq/tmpdlnwz0bq.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76426b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76423afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76423af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76423ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlnwz0bq                        0x000055e2b3493335 <unavailable> + 4917

    5    libc.so.6                          0x00002b76428a4460 __libc_start_main +
    245

    6    tmpdlnwz0bq                        0x000055e2b3492fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var divisor = 1\n    for divisor <= n {\n        if n % divisor == 0\
    \ {\n            maxDivisor = divisor\n        }\n        divisor++\n    }\n \
    \   return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmps9a1njd_.swift:6:17: error: expected 'in' after for-each pattern\n\
    \    for divisor <= n {\n                ^\n/tmp/tmps9a1njd_.swift:6:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor <= n {\n\
    \                ^ ~\n                  \n/tmp/tmps9a1njd_.swift:6:17: error:\
    \ '<=' is not a prefix unary operator\n    for divisor <= n {\n              \
    \  ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if largestDivisor == 0 {\n                largestDivisor\
    \ = divisor\n            } else {\n                if largestDivisor > divisor\
    \ {\n                    largestDivisor = divisor\n                }\n       \
    \     }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp1oci8s3_/tmp1oci8s3_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b767b303c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b767affab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b767affa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b767aff97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1oci8s3_                        0x0000556375bd942b <unavailable> + 5163

    5    libc.so.6                          0x00002b767b4ef460 __libc_start_main +
    245

    6    tmp1oci8s3_                        0x0000556375bd8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largestDivisor < divisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp174bu9h9/tmp174bu9h9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fd0dd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fd0ac7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fd0ac7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fd0ac67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp174bu9h9                        0x000055ef60a5e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4fd0fbc460 __libc_start_main +
    245

    6    tmp174bu9h9                        0x000055ef60a5dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4kcxj92i/tmp4kcxj92i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03daf96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03dac8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03dac8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03dac8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kcxj92i                        0x000055af6580d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b03db182460 __libc_start_main +
    245

    6    tmp4kcxj92i                        0x000055af6580cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ maxDivisor < divisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpgmczcimv/tmpgmczcimv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19aef9dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19aec94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19aec94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19aec937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgmczcimv                        0x000056162225d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b19af189460 __libc_start_main +
    245

    6    tmpgmczcimv                        0x000056162225cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    for divisor in 1...n {\n        if n % divisor == 0 {\n       \
    \     if largest == 0 || largest % divisor == 0 {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmyg73j3a.swift:7:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 || largest % divisor == 0 {\n               ^~~~~~~\n\
    /tmp/tmpmyg73j3a.swift:7:32: error: cannot find 'largest' in scope\n         \
    \   if largest == 0 || largest % divisor == 0 {\n                            \
    \   ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor: Int\
    \ = 0\n    var maxDivisorCount: Int = 0\n    for divisor in 1...n {\n        if\
    \ n % divisor == 0 {\n            if maxDivisorCount == 0 {\n                maxDivisorCount\
    \ = divisor\n                maxDivisor = divisor\n            } else {\n    \
    \            if maxDivisor > divisor {\n                    maxDivisorCount =\
    \ divisor\n                    maxDivisor = divisor\n                }\n     \
    \       }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8pu1y75k/tmp8pu1y75k.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fac7c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fac4bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fac4bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fac4bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pu1y75k                        0x000055abe313c42b <unavailable> + 5163

    5    libc.so.6                          0x00002b1fac9b1460 __libc_start_main +
    245

    6    tmp8pu1y75k                        0x000055abe313bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 1\n    var largestDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplow0p043.swift:6:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmplow0p043.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmplow0p043.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvv3mp3ge.swift:6:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvv3mp3ge.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpvv3mp3ge.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 1\n    var largestDivisorFactor = 1\n    var largestDivisorFactorFactor =\
    \ 1\n\n    for divisor in divisors {\n        if n % divisor == 0 {\n        \
    \    largestDivisorFactor = divisor\n            largestDivisorFactorFactor =\
    \ largestDivisorFactor * divisor\n        }\n    }\n\n    if largestDivisorFactorFactor\
    \ > largestDivisorFactor {\n        largestDivisor = largestDivisorFactor\n  \
    \  }\n\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpbmoup9dj.swift:8:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorCount = 0\n    for divisor in divisors {\n  \
    \      if n / divisor == 0 {\n            if largestDivisorCount < divisor {\n\
    \                largestDivisorCount = divisor\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpu4n12l5g.swift:6:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorFactor = 1\n    for divisor in 1...n {\n        if n %\
    \ divisor == 0 {\n            if divisor * maxDivisorFactor > n {\n          \
    \      maxDivisorFactor = divisor\n                maxDivisor = divisor\n    \
    \        } else {\n                maxDivisorFactor *= divisor\n             \
    \   maxDivisor = divisor\n            }\n        }\n    }\n    return maxDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpp3f5nbhw/tmpp3f5nbhw.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b114be9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b114bb93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b114bb93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b114bb927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3f5nbhw                        0x00005578a83d3335 <unavailable> + 4917

    5    libc.so.6                          0x00002b114c088460 __libc_start_main +
    245

    6    tmpp3f5nbhw                        0x00005578a83d2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > largestDivisor {\n                largestDivisor = divisor\n\
    \            }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpdlnwz0bq/tmpdlnwz0bq.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76426b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76423afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76423af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76423ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlnwz0bq                        0x000055e2b3493335 <unavailable> + 4917

    5    libc.so.6                          0x00002b76428a4460 __libc_start_main +
    245

    6    tmpdlnwz0bq                        0x000055e2b3492fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int(1)\n    var largestDivisorRemainder = Int(0)\n    for divisor in divisors\
    \ {\n        if n % divisor == 0 {\n            if largestDivisorRemainder > divisor\
    \ {\n                largestDivisor = divisor\n                largestDivisorRemainder\
    \ = n % divisor\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp7rf5vmqi.swift:6:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largestDivisor < divisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp174bu9h9/tmp174bu9h9.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fd0dd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fd0ac7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fd0ac7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fd0ac67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp174bu9h9                        0x000055ef60a5e335 <unavailable> + 4917

    5    libc.so.6                          0x00002b4fd0fbc460 __libc_start_main +
    245

    6    tmp174bu9h9                        0x000055ef60a5dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorValue = n\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if divisor * divisor > maxDivisorValue {\n             \
    \   maxDivisorValue = divisor * divisor\n                maxDivisor = divisor\n\
    \            }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp8pnyix87/tmp8pnyix87.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56b15c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56b12c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56b12c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56b12bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8pnyix87                        0x000055c86a909335 <unavailable> + 4917

    5    libc.so.6                          0x00002b56b17b5460 __libc_start_main +
    245

    6    tmp8pnyix87                        0x000055c86a908fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorIndex = 0\n    var divisor = Int()\n    var divisorIndex\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisorIndex == 0 {\n                largestDivisor = divisor\n         \
    \       largestDivisorIndex = divisorIndex\n            } else {\n           \
    \     if divisor > largestDivisor {\n                    largestDivisor = divisor\n\
    \                    largestDivisorIndex = divisorIndex\n                }\n \
    \           }\n            divisorIndex += 1\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpq0ndufmi/tmpq0ndufmi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39f203ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39f1d31b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39f1d31988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39f1d307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq0ndufmi                        0x00005595d2965335 <unavailable> + 4917

    5    libc.so.6                          0x00002b39f2226460 __libc_start_main +
    245

    6    tmpq0ndufmi                        0x00005595d2964fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpu658nnpu/tmpu658nnpu.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0dcbd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0dc8cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0dc8cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0dc8cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu658nnpu                        0x000055978a19e335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab0dcdc2460 __libc_start_main +
    245

    6    tmpu658nnpu                        0x000055978a19dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 0; i < n; i++ {\n        if n\
    \ % maxDivisor == 0 {\n            maxDivisorIndex = i\n        }\n        maxDivisor\
    \ *= i + 1\n    }\n    return maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp345rzr_u.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp345rzr_u.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmp345rzr_u.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in divisors(n) {\n        if n % divisor == 0 {\n     \
    \       if divisor * divisor > n {\n                largestDivisor = divisor\n\
    \            } else {\n                break\n            }\n        }\n    }\n\
    \    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpmdta0h3x.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ divisor > maxDivisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpd555wbce/tmpd555wbce.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8e5b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc8e2aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc8e2aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc8e2a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd555wbce                        0x00005643d3d55335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc8e79f460 __libc_start_main +
    245

    6    tmpd555wbce                        0x00005643d3d54fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largest == 0 || largest % divisor == 0 {\n                largest = divisor\n\
    \            }\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpij4ajguf.swift:7:16: error: cannot find 'largest' in scope\n  \
    \          if largest == 0 || largest % divisor == 0 {\n               ^~~~~~~\n\
    /tmp/tmpij4ajguf.swift:7:32: error: cannot find 'largest' in scope\n         \
    \   if largest == 0 || largest % divisor == 0 {\n                            \
    \   ^~~~~~~\n/tmp/tmpij4ajguf.swift:8:17: error: cannot find 'largest' in scope\n\
    \                largest = divisor\n                ^~~~~~~\n/tmp/tmpij4ajguf.swift:12:12:\
    \ error: cannot find 'largest' in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n    for i := 0; i < n; i++ {\n       \
    \ if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpaqbqufdc.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpaqbqufdc.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmpaqbqufdc.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorFactor = Int()\n    for divisor in divisors {\n\
    \        if n % divisor == 0 {\n            if largestDivisorFactor > divisor\
    \ {\n                largestDivisorFactor = divisor\n                largestDivisor\
    \ = Int(n/divisor)\n            }\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp56yd0m3_.swift:6:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = 0\n    for i := 1; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpdwa9ysdh.swift:6:12: error: expected type\n    for i := 1; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpdwa9ysdh.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 1; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpdwa9ysdh.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 1; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ Int()\n    for divisor in 1...n {\n        if n % divisor == 0 {\n         \
    \   if maxDivisor < divisor {\n                maxDivisor = divisor\n        \
    \    }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpbvk233pe/tmpbvk233pe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8d74faec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8d74ca5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8d74ca5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8d74ca47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbvk233pe                        0x0000559036ac9335 <unavailable> + 4917

    5    libc.so.6                          0x00002b8d7519a460 __libc_start_main +
    245

    6    tmpbvk233pe                        0x0000559036ac8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ divisor > maxDivisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpd555wbce/tmpd555wbce.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8e5b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc8e2aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc8e2aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc8e2a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd555wbce                        0x00005643d3d55335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc8e79f460 __libc_start_main +
    245

    6    tmpd555wbce                        0x00005643d3d54fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largestDivisor == 0 {\n                largestDivisor = divisor\n       \
    \     } else {\n                if divisor > largestDivisor {\n              \
    \      largestDivisor = divisor\n                }\n            }\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmph5yxsq2m/tmph5yxsq2m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cde631c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cde328b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cde328988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cde3277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5yxsq2m                        0x000055fad0911335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6cde81d460 __libc_start_main +
    245

    6    tmph5yxsq2m                        0x000055fad0910fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = -1\n    for i := 0; i < n; i++ {\n        if n\
    \ % maxDivisor == 0 {\n            maxDivisorIndex = i\n        }\n    }\n   \
    \ return maxDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1w6unv5d.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp1w6unv5d.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmp1w6unv5d.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n            if\
    \ divisor > maxDivisor {\n                maxDivisor = divisor\n            }\n\
    \        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: Exception
  stderr: 'tmpd555wbce/tmpd555wbce.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc8e5b3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc8e2aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc8e2aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc8e2a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd555wbce                        0x00005643d3d55335 <unavailable> + 4917

    5    libc.so.6                          0x00002abc8e79f460 __libc_start_main +
    245

    6    tmpd555wbce                        0x00005643d3d54fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 1\n    for _ in 0..<n {\n        if n % divisor == 0\
    \ {\n            largestDivisor = divisor\n        }\n        divisor *= 2\n \
    \   }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpp0f7rm8_/tmpp0f7rm8_.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a77ccbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a779c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a779c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a779c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp0f7rm8_                        0x000055c5fbb8642b <unavailable> + 5163

    5    libc.so.6                          0x00002b2a77eb7460 __libc_start_main +
    245

    6    tmpp0f7rm8_                        0x000055c5fbb85fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var maxDivisorNum: Int = 0\n    for num in 1...n {\n        if num %\
    \ 2 == 0 {\n            if num > maxDivisorNum {\n                maxDivisorNum\
    \ = num\n                maxDivisor = num\n            }\n        } else {\n \
    \           if num > maxDivisorNum {\n                maxDivisorNum = num\n  \
    \              maxDivisor = num\n            }\n        }\n    }\n    return maxDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpjs9vrc8e/tmpjs9vrc8e.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26bc199c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26bbe90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26bbe90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26bbe8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjs9vrc8e                        0x0000559874798335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26bc385460 __libc_start_main +
    245

    6    tmpjs9vrc8e                        0x0000559874797fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            if maxDivisor < i {\n                maxDivisor = i\n\
    \                maxDivisorIndex = i\n            }\n        }\n    }\n    return\
    \ maxDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpvv3mp3ge.swift:6:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpvv3mp3ge.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmpvv3mp3ge.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    var largestDivisorFactor = Int()\n    var largestDivisorFactorFound\
    \ = false\n    for divisor in divisors {\n        if n / divisor == 0 {\n    \
    \        if divisor * divisor > largestDivisorFactor {\n                largestDivisorFactor\
    \ = divisor * divisor\n                largestDivisorFactorFound = true\n    \
    \        }\n        }\n    }\n    if largestDivisorFactorFound == false {\n  \
    \      return largestDivisor\n    }\n    return largestDivisorFactor\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpg676xs28.swift:7:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 1\n    var maxDivisorFactor = 1\n    for divisor in divisors(n) {\n        if\
    \ n % divisor == 0 {\n            if maxDivisorFactor < divisor {\n          \
    \      maxDivisor = divisor\n                maxDivisorFactor = divisor\n    \
    \        }\n        }\n    }\n    return maxDivisor\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplmn8bc0e.swift:6:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor * divisor > n {\n                return largestDivisor\n        \
    \    }\n            largestDivisor = divisor\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpk8pvyzw6/tmpk8pvyzw6.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7587e4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7587b42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7587b42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7587b417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk8pvyzw6                        0x000055c90b07842b <unavailable> + 5163

    5    libc.so.6                          0x00002b7588037460 __libc_start_main +
    245

    6    tmpk8pvyzw6                        0x000055c90b077fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ Int()\n    var maxDivisorNum = Int()\n    for num in 1...n {\n        if num\
    \ % 2 == 0 {\n            if num > maxDivisor {\n                maxDivisor =\
    \ num\n                maxDivisorNum = num\n            } else {\n           \
    \     if num > maxDivisorNum {\n                    maxDivisorNum = num\n    \
    \            }\n            }\n        }\n    }\n    return maxDivisorNum\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpsgvhvtnq/tmpsgvhvtnq.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26946e3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26943dab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26943da988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26943d97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgvhvtnq                        0x00005629953c4335 <unavailable> + 4917

    5    libc.so.6                          0x00002b26948cf460 __libc_start_main +
    245

    6    tmpsgvhvtnq                        0x00005629953c3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 1\n    var largestDivisorIndex = 0\n    for i := 2; i <= n; i++ {\n      \
    \  if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: SyntaxError
  stderr: "/tmp/tmplow0p043.swift:6:12: error: expected type\n    for i := 2; i <=\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmplow0p043.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i <= n; i++ {\n      \
    \     ^\n/tmp/tmplow0p043.swift:6:12: error: expected Sequence expression for\
    \ for-each loop\n    for i := 2; i <= n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorIndex = 0\n    for i := 0; i < n; i++ {\n       \
    \ if n % i == 0 {\n            if largestDivisor < i {\n                largestDivisor\
    \ = i\n                largestDivisorIndex = i\n            }\n        }\n   \
    \ }\n    return largestDivisorIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp307110ly.swift:6:12: error: expected type\n    for i := 0; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp307110ly.swift:6:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 0; i < n; i++ {\n       \
    \    ^\n/tmp/tmp307110ly.swift:6:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 0; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = Int()\n    for divisor in divisors {\n        if n % divisor == 0 {\n    \
    \        if divisor * divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpji4ix_sx.swift:5:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largest = Int()\n\
    \    var divisor = Int()\n    var remainder = Int()\n    for divisor in 1...n\
    \ {\n        remainder = n % divisor\n        if remainder == 0 {\n          \
    \  largest = divisor\n        }\n    }\n    return largest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp20ae074q/tmp20ae074q.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfaa4e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfaa1e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfaa1e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfaa1df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp20ae074q                        0x0000562f8e4e4335 <unavailable> + 4917

    5    libc.so.6                          0x00002abfaa6d5460 __libc_start_main +
    245

    6    tmp20ae074q                        0x0000562f8e4e3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var divisor = 0\n    for divisor in 1...n {\n        if n % divisor\
    \ == 0 {\n            if divisor > largestDivisor {\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmp4kcxj92i/tmp4kcxj92i.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03daf96c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03dac8db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03dac8d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03dac8c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4kcxj92i                        0x000055af6580d335 <unavailable> + 4917

    5    libc.so.6                          0x00002b03db182460 __libc_start_main +
    245

    6    tmp4kcxj92i                        0x000055af6580cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    var largestDivisorCount = 0\n    for divisor in divisors(n) {\n   \
    \     if n % divisor == 0 {\n            if largestDivisorCount < divisor {\n\
    \                largestDivisorCount = divisor\n                largestDivisor\
    \ = divisor\n            }\n        }\n    }\n    return largestDivisor\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpjstymfvy.swift:6:20: error: cannot find 'divisors' in scope\n \
    \   for divisor in divisors(n) {\n                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if divisor > largestDivisor {\n                largestDivisor = divisor\n  \
    \          }\n        }\n    }\n    return largestDivisor\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpnfxzbshe/tmpnfxzbshe.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca01afdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca017f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca017f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca017f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnfxzbshe                        0x000055d3b332c335 <unavailable> + 4917

    5    libc.so.6                          0x00002aca01ce9460 __libc_start_main +
    245

    6    tmpnfxzbshe                        0x000055d3b332bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978501
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largest < divisor {\n                largest = divisor\n            }\n \
    \       }\n    }\n    return largest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n:\
    \ 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmpm6ir3l2g.swift:7:16: error: cannot find 'largest' in scope\n  \
    \          if largest < divisor {\n               ^~~~~~~\n/tmp/tmpm6ir3l2g.swift:8:17:\
    \ error: cannot find 'largest' in scope\n                largest = divisor\n \
    \               ^~~~~~~\n/tmp/tmpm6ir3l2g.swift:12:12: error: cannot find 'largest'\
    \ in scope\n    return largest\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var maxDivisor =\
    \ 0\n    var divisor = 1\n    for divisor <= n {\n        if n % divisor == 0\
    \ {\n            if divisor > maxDivisor {\n                maxDivisor = divisor\n\
    \            }\n        }\n        divisor++\n    }\n    return maxDivisor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp4c8zy_p7.swift:6:17: error: expected 'in' after for-each pattern\n\
    \    for divisor <= n {\n                ^\n/tmp/tmp4c8zy_p7.swift:6:17: error:\
    \ unary operator cannot be separated from its operand\n    for divisor <= n {\n\
    \                ^ ~\n                  \n/tmp/tmp4c8zy_p7.swift:6:17: error:\
    \ '<=' is not a prefix unary operator\n    for divisor <= n {\n              \
    \  ^\n"
  stdout: ''
  timestamp: 1659978502
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\nfunc largest_divisor(n: Int) -> Int {\n    var largestDivisor\
    \ = 0\n    for divisor in 1...n {\n        if n % divisor == 0 {\n           \
    \ if largestDivisor == 0 {\n                largestDivisor = divisor\n       \
    \     } else {\n                if divisor > largestDivisor {\n              \
    \      largestDivisor = divisor\n                }\n            }\n        }\n\
    \    }\n    return largestDivisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmph5yxsq2m/tmph5yxsq2m.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6cde631c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6cde328b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6cde328988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6cde3277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph5yxsq2m                        0x000055fad0911335 <unavailable> + 4917

    5    libc.so.6                          0x00002b6cde81d460 __libc_start_main +
    245

    6    tmph5yxsq2m                        0x000055fad0910fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659978502
