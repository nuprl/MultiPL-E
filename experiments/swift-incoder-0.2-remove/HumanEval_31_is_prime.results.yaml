language: swift
name: HumanEval_31_is_prime
results:
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s: Int\n    while i*i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpe6groegt/tmpe6groegt.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b63f6533c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b63f622ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b63f622a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b63f62297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe6groegt                        0x00005626f71e44ff <unavailable> + 5375

    5    libc.so.6                          0x00002b63f671f460 __libc_start_main +
    245

    6    tmpe6groegt                        0x00005626f71e3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        if k % j == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp_1tlbsax/tmp_1tlbsax.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37b15e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37b12d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37b12d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37b12d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_1tlbsax                        0x0000561f5c71b2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b37b17ce460 __libc_start_main +
    245

    6    tmp_1tlbsax                        0x0000561f5c71aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n %\
    \ i == 0 || n % j == 0 {\n            return false\n        }\n        if k %\
    \ i == 0 || k % j == 0 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpll9_j11h/tmpll9_j11h.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d7fdbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d7fab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d7fab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d7fab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpll9_j11h                        0x000055d931a8b4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b7d7ffa8460 __libc_start_main +
    245

    6    tmpll9_j11h                        0x000055d931a8aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpknswzdfh/tmpknswzdfh.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5d4724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5d441bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5d441b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5d441a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknswzdfh                        0x000055ec8653b4ff <unavailable> + 5375

    5    libc.so.6                          0x00002af5d4910460 __libc_start_main +
    245

    6    tmpknswzdfh                        0x000055ec8653aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        if k % j == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp_1tlbsax/tmp_1tlbsax.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37b15e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37b12d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37b12d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37b12d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_1tlbsax                        0x0000561f5c71b2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b37b17ce460 __libc_start_main +
    245

    6    tmp_1tlbsax                        0x0000561f5c71aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n % i == 0 || n % (i +\
    \ 2) == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbsqkccrw.swift:16:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpbsqkccrw.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpbsqkccrw.swift:16:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    // Check base cases: 0 and 1.\n    if n == 0\
    \ || n == 1 {\n        return true\n    }\n\n    // Check base cases: 2 and 3.\n\
    \    if n == 2 {\n        return true\n    }\n\n    // Check base cases: 3, 5,\
    \ and 7.\n    if n == 3 {\n        return true\n    }\n\n    // Check base cases:\
    \ 5, 7, and 9.\n    if n == 5 || n == 7 || n == 9 {\n        return true\n   \
    \ }\n\n    // Check base cases: 11, 13, and 17.\n    if n == 11 || n == 13 ||\
    \ n == 17 {\n        return true\n    }\n\n    // Check base cases: 19, 23, and\
    \ 29.\n    if n == 19 || n == 23 || n == 29 {\n        return true\n    }\n\n\
    \    // Check base cases: 31, 37, and 43.\n    if n == 31 || n == 37 || n == 43\
    \ {\n        return true\n    }\n\n    // Check base cases: 41 and 43.\n    if\
    \ n == 41 || n == 43 {\n        return true\n    }\n\n    // Check base cases:\
    \ 61 and 63.\n    if n == 61 || n == 63 {\n        return true\n    }\n\n    //\
    \ Check base cases: 91 and 93.\n    if n == 91 || n == 93 {\n        return true\n\
    \    }\n\n    // Check base cases: 101 and 103.\n    if n == 101 || n == 103 {\n\
    \        return true\n    }\n\n    // Check base cases: 131 and 137.\n    if n\
    \ == 131 || n == 137 {\n        return true\n    }\n\n    // Check base cases:\
    \ 139, and 143.\n    if n == 139 || n == 143 {\n        return true\n    }\n\n\
    \    // Check base cases: 151 and 153.\n    if n == 151 || n == 153 {\n      \
    \  return true\n    }\n\n    // Check base cases: 163 and 167.\n    if n == 163\
    \ || n == 167 {\n        return true\n    }\n\n    // Check base cases: 173 and\
    \ 177.\n    if n == 173 || n == 177 {\n        return true\n    }\n\n    // Check\
    \ base cases: 191 and 193.\n    if n == 191 || n == 193 {\n        return true\n\
    \    }\n\n    // Check base cases: 193, and 197.\n    if n == 193 || n == 197\
    \ {\n        return true\n    }\n\n    // Check base cases: 199 and 203.\n   \
    \ if n == 199 || n == 203 {\n        return true\n    }\n\n    // Check base cases:\
    \ 203 and 207.\n    if n == 203 || n == 207 {\n        return true\n    }\n\n\
    \    // Check base cases: 211 and 213.\n    if n == 211 || n == 213 {\n      \
    \  return true\n    }\n\n    // Check base cases: 213, and 217.\n    if n == 213\
    \ || n == 217 {\n        return true\n    }\n\n    // Check \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: '/tmp/tmpa4a0f0xb.swift:115:1: error: missing return in global function
    expected to return ''Bool''

    }

    ^

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpoxmjz8up/tmpoxmjz8up.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3344fe6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3344cddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3344cdd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3344cdc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoxmjz8up                        0x000056035c13f77d <unavailable> + 6013

    5    libc.so.6                          0x00002b33451d2460 __libc_start_main +
    245

    6    tmpoxmjz8up                        0x000056035c13eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3hbd04ke.swift:16:12: error: expected type\n    for i := 5; i *\
    \ i <= n; i += 6 {\n           ^\n            <#type#>\n/tmp/tmp3hbd04ke.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n           ^\n/tmp/tmp3hbd04ke.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 5; i * i <= n; i += 6 {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbcnt6548.swift:13:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpbcnt6548.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpbcnt6548.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < int(sqrt(n)); i += 2 {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu3g33yzl.swift:13:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(n)); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpu3g33yzl.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(n));\
    \ i += 2 {\n           ^\n/tmp/tmpu3g33yzl.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(n)); i += 2 {\n \
    \          ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n\n    while i < k {\n\
    \        if n % i == 0 {\n            return false\n        }\n        if j %\
    \ i == 0 {\n            return false\n        }\n        i += 2\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmphqmkjk37/tmphqmkjk37.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6660a5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6660754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6660754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66607537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqmkjk37                        0x00005575593f76fb <unavailable> + 5883

    5    libc.so.6                          0x00002b6660c49460 __libc_start_main +
    245

    6    tmphqmkjk37                        0x00005575593f6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6e4uqlqr/tmp6e4uqlqr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a6463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a615ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a615a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a61597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e4uqlqr                        0x0000562586e874ff <unavailable> + 5375

    5    libc.so.6                          0x00002af0a664f460 __libc_start_main +
    245

    6    tmp6e4uqlqr                        0x0000562586e86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        if j % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpl8szu4ia/tmpl8szu4ia.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85407f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85404eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85404ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85404e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8szu4ia                        0x000055677520a4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b85409df460 __libc_start_main +
    245

    6    tmpl8szu4ia                        0x0000556775209ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    // TODO: Implement this function.\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpericwjpz/tmpericwjpz.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd6499dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd64694b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd64694988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd646937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpericwjpz                        0x000055f151f3f227 <unavailable> + 4647

    5    libc.so.6                          0x00002afd64b89460 __libc_start_main +
    245

    6    tmpericwjpz                        0x000055f151f3ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ n/2; i++ {\n        if n % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjjzrhkhv.swift:16:12: error: expected type\n    for i := 3; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpjjzrhkhv.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpjjzrhkhv.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += s\n        s\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpio5qc3pe/tmpio5qc3pe.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeedc069c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeedbd60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeedbd60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeedbd5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpio5qc3pe                        0x00005578b8e224ff <unavailable> + 5375

    5    libc.so.6                          0x00002aeedc255460 __libc_start_main +
    245

    6    tmpio5qc3pe                        0x00005578b8e21ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3hbd04ke.swift:16:12: error: expected type\n    for i := 5; i *\
    \ i <= n; i += 6 {\n           ^\n            <#type#>\n/tmp/tmp3hbd04ke.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n           ^\n/tmp/tmp3hbd04ke.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 5; i * i <= n; i += 6 {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int = 2\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n\
    \    if n == 2 {\n        return true\n    }\n\n    if n == 3 {\n        return\
    \ true\n    }\n\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n   \
    \ }\n\n    var i = 5\n    var s: Int\n\n    while i * i <= n {\n        if n %\
    \ i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n\n      \
    \  i += 6\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int\n    while i * i <= n {\n        p = n / i\n        if\
    \ p > 2 && p % 3 == 0 {\n            return false\n        }\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp7imzduey/tmp7imzduey.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b687e605c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b687e2fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b687e2fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b687e2fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7imzduey                        0x0000561379a1039f <unavailable> + 5023

    5    libc.so.6                          0x00002b687e7f1460 __libc_start_main +
    245

    6    tmp7imzduey                        0x0000561379a0fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < int(sqrt(Double(n))); i += 2 {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5uqf58r3.swift:13:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(Double(n))); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp5uqf58r3.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(Double(n)));\
    \ i += 2 {\n           ^\n/tmp/tmp5uqf58r3.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(Double(n))); i +=\
    \ 2 {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmppns4zztg/tmppns4zztg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b618fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b5e86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5b5e86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5b5e857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppns4zztg                        0x000055f38391f4ff <unavailable> + 5375

    5    libc.so.6                          0x00002ae5b637b460 __libc_start_main +
    245

    6    tmppns4zztg                        0x000055f38391eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n\
    \        return false\n    }\n    \n    var i = 5\n    var j = 3\n    \n    while\
    \ i * j <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if n % j == 0 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6e4uqlqr/tmp6e4uqlqr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a6463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a615ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a615a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a61597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e4uqlqr                        0x0000562586e874ff <unavailable> + 5375

    5    libc.so.6                          0x00002af0a664f460 __libc_start_main +
    245

    6    tmp6e4uqlqr                        0x0000562586e86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n \
    \   if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return false\n        }\n        i += 2\n        j += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpuq1yo_im/tmpuq1yo_im.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7762a6ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7762765b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7762765988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77627647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuq1yo_im                        0x0000561b1f4b52b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b7762c5a460 __libc_start_main +
    245

    6    tmpuq1yo_im                        0x0000561b1f4b4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7zi8o53z.swift:13:12: error: expected type\n    for i := 2; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp7zi8o53z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n\
    \           ^\n/tmp/tmp7zi8o53z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n\
    \    var i = 2\n    var j = 2\n    var prime = true\n\n    while i < n {\n   \
    \     if n % i == 0 {\n            prime = false\n            break\n        }\n\
    \n        i += j\n        j += 2\n    }\n\n    return prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmptxlxb_5c/tmptxlxb_5c.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b527551dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5275214b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5275214988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b52752137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptxlxb_5c                        0x000055aeb05e96fb <unavailable> + 5883

    5    libc.so.6                          0x00002b5275709460 __libc_start_main +
    245

    6    tmptxlxb_5c                        0x000055aeb05e8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var\
    \ j = 3\n    var k = 3\n    var m = 2\n    while i <= n {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n        if m == i {\n            return\
    \ true\n        }\n        if m > i {\n            k = k + m\n        }\n    \
    \    m = m + 2\n        j = j + 2\n        i = i + 1\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpod4nci98/tmpod4nci98.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23a9a35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23a972cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23a972c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23a972b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpod4nci98                        0x000055d7e87556fb <unavailable> + 5883

    5    libc.so.6                          0x00002b23a9c21460 __libc_start_main +
    245

    6    tmpod4nci98                        0x000055d7e8754ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j % i == 0 {\n            return false\n        }\n        if k % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k -= 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp5zgih_nt/tmp5zgih_nt.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b896c216c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b896bf0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b896bf0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b896bf0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5zgih_nt                        0x0000559f84cb82b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b896c402460 __libc_start_main +
    245

    6    tmp5zgih_nt                        0x0000559f84cb7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var\
    \ j = 3\n    while i * i <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += j\n        j += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpzt5_2m5t/tmpzt5_2m5t.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a688f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a685eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a685ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a685ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzt5_2m5t                        0x00005589819e977d <unavailable> + 6013

    5    libc.so.6                          0x00002b1a68ae3460 __libc_start_main +
    245

    6    tmpzt5_2m5t                        0x00005589819e8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7zi8o53z.swift:13:12: error: expected type\n    for i := 2; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmp7zi8o53z.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n\
    \           ^\n/tmp/tmp7zi8o53z.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 2; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpej3m3y6w.swift:16:12: error: expected type\n    for i := 5; i *\
    \ i <= n; i += 6 {\n           ^\n            <#type#>\n/tmp/tmpej3m3y6w.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n           ^\n/tmp/tmpej3m3y6w.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 5; i * i <= n; i += 6 {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    var k = n - 1\n    while i <= k {\n        if n %\
    \ i == 0 || n % (i + j) == 0 {\n            return false\n        }\n        i\
    \ += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpuf3nw_o4/tmpuf3nw_o4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b608ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b605d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b605d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b605d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuf3nw_o4                        0x000056235f8204ff <unavailable> + 5375

    5    libc.so.6                          0x00002b8b60ac9460 __libc_start_main +
    245

    6    tmpuf3nw_o4                        0x000056235f81fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbcnt6548.swift:13:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpbcnt6548.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpbcnt6548.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 3\n    while i <= j {\n\
    \        if ((n % i) == 0) {\n            return false\n        }\n        if\
    \ ((n % j) == 0) {\n            return false\n        }\n        if ((n % k) ==\
    \ 0) {\n            return false\n        }\n        i += 2\n        j += 2\n\
    \        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpoup7kf_d/tmpoup7kf_d.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba2a4f57c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba2a4c4eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba2a4c4e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba2a4c4d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoup7kf_d                        0x00005627dad412b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ba2a5143460 __libc_start_main +
    245

    6    tmpoup7kf_d                        0x00005627dad40ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    for d in 2...Int(sqrt(Double(n))) + 1 {\n        if n % d == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpsq9kejp5.swift:13:22: error: cannot find 'sqrt' in scope\n    for\
    \ d in 2...Int(sqrt(Double(n))) + 1 {\n                     ^~~~\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        while j <= n {\n  \
    \          if n % j == 0 {\n                return false\n            }\n    \
    \        j += 1\n        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpi9dz3n39/tmpi9dz3n39.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1c8865c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1c855cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1c855c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1c855b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9dz3n39                        0x0000555af3f5f2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002af1c8a51460 __libc_start_main +
    245

    6    tmpi9dz3n39                        0x0000555af3f5eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmppns4zztg/tmppns4zztg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b618fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b5e86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5b5e86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5b5e857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppns4zztg                        0x000055f38391f4ff <unavailable> + 5375

    5    libc.so.6                          0x00002ae5b637b460 __libc_start_main +
    245

    6    tmppns4zztg                        0x000055f38391eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n %\
    \ i == 0 || n % j == 0 {\n            return false\n        }\n        if k %\
    \ i == 0 || k % j == 0 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for 3; n < 100; n += 2 {\n        if n % n == 0 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl5_1yulo.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for 3; n < 100; n += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int = 2\n    while i * i <= n {\n        if n % i == 0 ||\
    \ n % (i + 2) == 0 {\n            return false\n        }\n        i += 6\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = 2\n    while i * j <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ n % j == 0 {\n            return false\n        }\n        if k % i == 0 {\n\
    \            return false\n        }\n        if k % j == 0 {\n            return\
    \ false\n        }\n        i += 2\n        j += 2\n        k += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpx91lmco8/tmpx91lmco8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab55d628c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab55d31fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab55d31f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab55d31e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx91lmco8                        0x0000561ae39c64ff <unavailable> + 5375

    5    libc.so.6                          0x00002ab55d814460 __libc_start_main +
    245

    6    tmpx91lmco8                        0x0000561ae39c5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return true\n        }\n        i += 2\n        j += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpclzh3ba5/tmpclzh3ba5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc4a3c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc4a0b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc4a0b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc4a0b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpclzh3ba5                        0x000055fa695864ff <unavailable> + 5375

    5    libc.so.6                          0x00002adc4a5ae460 __libc_start_main +
    245

    6    tmpclzh3ba5                        0x000055fa69585ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n \
    \   if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + j) == 0 {\n            return false\n        }\n        i += 6\n        j\
    \ += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpr4pe_280/tmpr4pe_280.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b950e39cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b950e093b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b950e093988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b950e0927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4pe_280                        0x000055b9de50477d <unavailable> + 6013

    5    libc.so.6                          0x00002b950e588460 __libc_start_main +
    245

    6    tmpr4pe_280                        0x000055b9de503ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j > n / 2 {\n            return false\n        }\n        while k <= n / 2 {\n\
    \            if n % k == 0 {\n                return false\n            }\n  \
    \          k += 2\n        }\n        j += 2\n        i += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp4c8tt9nf/tmp4c8tt9nf.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4069402c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40690f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40690f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40690f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c8tt9nf                        0x000055b8c96892b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b40695ee460 __libc_start_main +
    245

    6    tmp4c8tt9nf                        0x000055b8c9688ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n \
    \   if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return true\n        }\n        i += 2\n        j += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp_00fi84i/tmp_00fi84i.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e7364cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e73343b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e73343988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e733427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_00fi84i                        0x0000555c66ba36fb <unavailable> + 5883

    5    libc.so.6                          0x00002b5e73838460 __libc_start_main +
    245

    6    tmp_00fi84i                        0x0000555c66ba2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 2\n    while i <= j {\n\
    \        if i % n == 0 && j % n == 0 && k % n == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978648
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ n/2; i++ {\n        if n % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjjzrhkhv.swift:16:12: error: expected type\n    for i := 3; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpjjzrhkhv.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpjjzrhkhv.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n\
    \    // Trial division algorithm to find out if n is prime.\n    // https://en.wikipedia.org/wiki/Trial_division\n\
    \    // https://primes.utm.edu/notes/faq/faq.shtml#trial-division\n    var i :\
    \ Int\n    var j : Int\n    var k : Int\n    var m : Int\n    var prime : Bool\n\
    \n    m = n - 1\n    i = 2\n    j = m\n    k = m\n\n    while i < m {\n      \
    \  if ((n % i) == 0) {\n            prime = false\n            break\n       \
    \ }\n\n        i += 2\n    }\n\n    if prime {\n        return true\n    }\n\n\
    \    while j < k {\n        if ((n % j) == 0) {\n            prime = false\n \
    \           break\n        }\n\n        j += 2\n    }\n\n    if prime {\n    \
    \    return true\n    }\n\n    while k < i {\n        if ((n % k) == 0) {\n  \
    \          prime = false\n            break\n        }\n\n        k += 2\n   \
    \ }\n\n    if prime {\n        return true\n    }\n\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqy6c6o5o.swift:31:8: error: variable 'prime' used before being\
    \ initialized\n    if prime {\n       ^\n/tmp/tmpqy6c6o5o.swift:15:9: note: variable\
    \ defined here\n    var prime : Bool\n        ^\n/tmp/tmpqy6c6o5o.swift:44:8:\
    \ error: variable 'prime' used before being initialized\n    if prime {\n    \
    \   ^\n/tmp/tmpqy6c6o5o.swift:15:9: note: variable defined here\n    var prime\
    \ : Bool\n        ^\n/tmp/tmpqy6c6o5o.swift:57:8: error: variable 'prime' used\
    \ before being initialized\n    if prime {\n       ^\n/tmp/tmpqy6c6o5o.swift:15:9:\
    \ note: variable defined here\n    var prime : Bool\n        ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    for i :=\
    \ 5; i * i <= n; i += 6 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi5a5nn98.swift:16:12: error: expected type\n    for i := 5; i *\
    \ i <= n; i += 6 {\n           ^\n            <#type#>\n/tmp/tmpi5a5nn98.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n           ^\n/tmp/tmpi5a5nn98.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 5; i * i <= n; i += 6 {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    // TODO: implement this function\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpvr5avii4/tmpvr5avii4.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8971d7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8971a74b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8971a74988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8971a737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr5avii4                        0x0000555ae44e2227 <unavailable> + 4647

    5    libc.so.6                          0x00002b8971f69460 __libc_start_main +
    245

    6    tmpvr5avii4                        0x0000555ae44e1e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return false\n        }\n        i += 2\n        j += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmptlxuje6a/tmptlxuje6a.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaddeafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaddba6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaddba6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaddba57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlxuje6a                        0x00005648daa6d2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002adade09b460 __libc_start_main +
    245

    6    tmptlxuje6a                        0x00005648daa6cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n\
    \    // Check all odd numbers up to sqrt(n).\n    for i := 2; i < int(sqrt(n));\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n\n    // Check all even numbers up to sqrt(n).\n    for i := 3; i < int(sqrt(n));\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoyla_fvc.swift:9:12: error: expected type\n    for i := 2; i <\
    \ int(sqrt(n)); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpoyla_fvc.swift:9:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 2; i < int(sqrt(n));\
    \ i += 2 {\n           ^\n/tmp/tmpoyla_fvc.swift:9:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 2; i < int(sqrt(n)); i += 2 {\n \
    \          ^\n/tmp/tmpoyla_fvc.swift:16:12: error: expected type\n    for i :=\
    \ 3; i < int(sqrt(n)); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpoyla_fvc.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(n));\
    \ i += 2 {\n           ^\n/tmp/tmpoyla_fvc.swift:16:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(n)); i += 2 {\n \
    \          ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    var i = 2\n    var prime = true\n    while i < n {\n        if n %\
    \ i == 0 {\n            prime = false\n            break\n        }\n        i\
    \ += 1\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    var i = 2\n    var prime = true\n    while i\
    \ < n {\n        if n % i == 0 {\n            prime = false\n            break\n\
    \        }\n        i += 1\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpooca1r6c/tmpooca1r6c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aff71ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aff411b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aff411988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aff4107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpooca1r6c                        0x0000556631f814ff <unavailable> + 5375

    5    libc.so.6                          0x00002b1aff906460 __libc_start_main +
    245

    6    tmpooca1r6c                        0x0000556631f80ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpq7nwty2l/tmpq7nwty2l.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b8f77ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b8f475b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b8f475988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b8f4747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7nwty2l                        0x000055f450bcd4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b1b8f96a460 __libc_start_main +
    245

    6    tmpq7nwty2l                        0x000055f450bccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    var i = 2\n    var isPrime = true\n    while\
    \ i <= n {\n        if n % i == 0 {\n            isPrime = false\n           \
    \ break\n        }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmptt45qzib/tmptt45qzib.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5699d31c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5699a28b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5699a28988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5699a277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptt45qzib                        0x00005615457f92b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b5699f1d460 __libc_start_main +
    245

    6    tmptt45qzib                        0x00005615457f8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6e4uqlqr/tmp6e4uqlqr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a6463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a615ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a615a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a61597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e4uqlqr                        0x0000562586e874ff <unavailable> + 5375

    5    libc.so.6                          0x00002af0a664f460 __libc_start_main +
    245

    6    tmp6e4uqlqr                        0x0000562586e86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    var i = 2\n    var prime = true\n    while i\
    \ < n {\n        if n % i == 0 {\n            prime = false\n            break\n\
    \        }\n        i += 1\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpooca1r6c/tmpooca1r6c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aff71ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aff411b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aff411988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aff4107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpooca1r6c                        0x0000556631f814ff <unavailable> + 5375

    5    libc.so.6                          0x00002b1aff906460 __libc_start_main +
    245

    6    tmpooca1r6c                        0x0000556631f80ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var\
    \ j = 3\n    var k = 2\n    while i * j <= n {\n        if n % i == 0 {\n    \
    \        return false\n        }\n        if n % j == 0 {\n            return\
    \ false\n        }\n        if k * j <= n {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpab2ocmvj/tmpab2ocmvj.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b78937abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b78934a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b78934a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b78934a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab2ocmvj                        0x0000562aa41592b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b7893997460 __libc_start_main +
    245

    6    tmpab2ocmvj                        0x0000562aa4158ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ i % j == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp3p85sptr/tmp3p85sptr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9b01b24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9b0181bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9b0181b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9b0181a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3p85sptr                        0x0000563f5c1b84ff <unavailable> + 5375

    5    libc.so.6                          0x00002b9b01d10460 __libc_start_main +
    245

    6    tmp3p85sptr                        0x0000563f5c1b7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n\
    \    var i = 2\n    var j = 3\n    var p = 2\n    var q = 3\n    var r = 2\n\n\
    \    while i <= n {\n        if n % i == 0 {\n            return false\n     \
    \   }\n\n        i += p\n        j += q\n        p += r\n        q += r\n    \
    \    r += 2\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp0hxcflwr/tmp0hxcflwr.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4f3636dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4f36064b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4f36064988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4f360637b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0hxcflwr                        0x000055c09ec7e6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b4f36559460 __libc_start_main +
    245

    6    tmp0hxcflwr                        0x000055c09ec7def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <\
    \ int(sqrt(Double(n))); i += 2 {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpirqncyww.swift:16:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(Double(n))); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpirqncyww.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(Double(n)));\
    \ i += 2 {\n           ^\n/tmp/tmpirqncyww.swift:16:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(Double(n))); i +=\
    \ 2 {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + j) == 0 {\n            return false\n        }\n        i += 6\n        j\
    \ += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpb4_zv3w2/tmpb4_zv3w2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b8d704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b8d3fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b8d3fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b8d3fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4_zv3w2                        0x00005584d63134ff <unavailable> + 5375

    5    libc.so.6                          0x00002b6b8d8f0460 __libc_start_main +
    245

    6    tmpb4_zv3w2                        0x00005584d6312ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        while\
    \ j <= n / i {\n            if i % j == 0 {\n                return false\n  \
    \          }\n            j += 1\n        }\n        i += 2\n        k += 2\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpkf8j5kie/tmpkf8j5kie.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b56e594ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b56e5645b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b56e5645988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b56e56447b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkf8j5kie                        0x000056276b25a4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b56e5b3a460 __libc_start_main +
    245

    6    tmpkf8j5kie                        0x000056276b259ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var\
    \ j = 3\n    var k = 2\n    while i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        if i == n {\n            return true\n \
    \       }\n        if j > n / 2 {\n            return false\n        }\n     \
    \   if k <= i {\n            j += 2\n        }\n        i += 2\n        k += 2\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpg2yw8_t5/tmpg2yw8_t5.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57342ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5733fe3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5733fe3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5733fe27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg2yw8_t5                        0x000055883e3912b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b57344d8460 __libc_start_main +
    245

    6    tmpg2yw8_t5                        0x000055883e390ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return true\n        }\n        j += 2\n        i += 2\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpe40fjfc6/tmpe40fjfc6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c55185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c54e7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c54e7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c54e7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe40fjfc6                        0x00005561c12b84ff <unavailable> + 5375

    5    libc.so.6                          0x00002b0c55371460 __libc_start_main +
    245

    6    tmpe40fjfc6                        0x00005561c12b7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmppns4zztg/tmppns4zztg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b618fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b5e86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5b5e86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5b5e857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppns4zztg                        0x000055f38391f4ff <unavailable> + 5375

    5    libc.so.6                          0x00002ae5b637b460 __libc_start_main +
    245

    6    tmppns4zztg                        0x000055f38391eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpmr30kgk3/tmpmr30kgk3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00707d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00704ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00704ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00704cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmr30kgk3                        0x0000557de6c874ff <unavailable> + 5375

    5    libc.so.6                          0x00002b00709c3460 __libc_start_main +
    245

    6    tmpmr30kgk3                        0x0000557de6c86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    let\
    \ m = Int(sqrt(Double(n)))\n    for d in 2...m {\n        if n % d == 0 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn2cfv0c0.swift:16:17: error: cannot find 'sqrt' in scope\n    let\
    \ m = Int(sqrt(Double(n)))\n                ^~~~\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 3; i < int(sqrt(Double(n))); i++ {\n        if n % i == 0 || n % (i + 2)\
    \ == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5raecn6k.swift:16:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmp5raecn6k.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmp5raecn6k.swift:16:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i * i <= n; i += 2 {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpopw4zz0h.swift:13:12: error: expected type\n    for i := 3; i *\
    \ i <= n; i += 2 {\n           ^\n            <#type#>\n/tmp/tmpopw4zz0h.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i * i <= n; i +=\
    \ 2 {\n           ^\n/tmp/tmpopw4zz0h.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i * i <= n; i += 2 {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmppns4zztg/tmppns4zztg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b618fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b5e86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5b5e86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5b5e857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppns4zztg                        0x000055f38391f4ff <unavailable> + 5375

    5    libc.so.6                          0x00002ae5b637b460 __libc_start_main +
    245

    6    tmppns4zztg                        0x000055f38391eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n \
    \   if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + j) == 0 {\n            return false\n        }\n        i += 6\n        j\
    \ += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpr4pe_280/tmpr4pe_280.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b950e39cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b950e093b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b950e093988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b950e0927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4pe_280                        0x000055b9de50477d <unavailable> + 6013

    5    libc.so.6                          0x00002b950e588460 __libc_start_main +
    245

    6    tmpr4pe_280                        0x000055b9de503ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n \
    \   if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return true\n        }\n        i += 2\n        j += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp_00fi84i/tmp_00fi84i.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e7364cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e73343b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e73343988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e733427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_00fi84i                        0x0000555c66ba36fb <unavailable> + 5883

    5    libc.so.6                          0x00002b5e73838460 __libc_start_main +
    245

    6    tmp_00fi84i                        0x0000555c66ba2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8guf8vre.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmp8guf8vre.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmp8guf8vre.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int\n    while i <= n {\n        p = 5\n        while p <=\
    \ n {\n            if n%p == 0 {\n                return false\n            }\n\
    \            p += 6\n        }\n        i += 6\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpoxozjy2x/tmpoxozjy2x.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b16686e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b16683e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b16683e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b16683df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoxozjy2x                        0x000055bd9a9af2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b16688d5460 __libc_start_main +
    245

    6    tmpoxozjy2x                        0x000055bd9a9aeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpq7nwty2l/tmpq7nwty2l.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b8f77ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b8f475b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b8f475988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b8f4747b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq7nwty2l                        0x000055f450bcd4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b1b8f96a460 __libc_start_main +
    245

    6    tmpq7nwty2l                        0x000055f450bccef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n\
    \    var i = 2\n    var prime = true\n\n    while i < n {\n        if n % i ==\
    \ 0 {\n            prime = false\n            break\n        }\n        i += 1\n\
    \    }\n\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = (3 * n) / 4\n    var k = (3 * n) / 2\n    while i <= k {\n\
    \        if i != j {\n            if i % j == 0 {\n                return false\n\
    \            }\n        }\n        i += 2\n        j += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpu_9kqept/tmpu_9kqept.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af19e9adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af19e6a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af19e6a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af19e6a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu_9kqept                        0x000055b2997804ff <unavailable> + 5375

    5    libc.so.6                          0x00002af19eb99460 __libc_start_main +
    245

    6    tmpu_9kqept                        0x000055b29977fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8guf8vre.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmp8guf8vre.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmp8guf8vre.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return true\n        }\n        j += 2\n        i += 2\n    }\n   \
    \ return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpe40fjfc6/tmpe40fjfc6.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c55185c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c54e7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c54e7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c54e7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe40fjfc6                        0x00005561c12b84ff <unavailable> + 5375

    5    libc.so.6                          0x00002b0c55371460 __libc_start_main +
    245

    6    tmpe40fjfc6                        0x00005561c12b7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var\
    \ j = 3\n    var k = n\n    while i <= k {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        if j % i == 0 {\n            return false\n\
    \        }\n        if k % i == 0 {\n            return false\n        }\n   \
    \     i += 2\n        j += 2\n        k /= 2\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpn7ziaafp/tmpn7ziaafp.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74b9e8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74b9b81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74b9b81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74b9b807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn7ziaafp                        0x000055814082939f <unavailable> + 5023

    5    libc.so.6                          0x00002b74ba076460 __libc_start_main +
    245

    6    tmpn7ziaafp                        0x0000558140828ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpknswzdfh/tmpknswzdfh.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5d4724c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5d441bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5d441b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5d441a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpknswzdfh                        0x000055ec8653b4ff <unavailable> + 5375

    5    libc.so.6                          0x00002af5d4910460 __libc_start_main +
    245

    6    tmpknswzdfh                        0x000055ec8653aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    var i = 2\n    var prime = true\n    while i\
    \ < n {\n        if n % i == 0 {\n            prime = false\n            break\n\
    \        }\n        i += 1\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpooca1r6c/tmpooca1r6c.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1aff71ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1aff411b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1aff411988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1aff4107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpooca1r6c                        0x0000556631f814ff <unavailable> + 5375

    5    libc.so.6                          0x00002b1aff906460 __libc_start_main +
    245

    6    tmpooca1r6c                        0x0000556631f80ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for 3; n < 100; n += 2 {\n        if n % 3 == 0 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy414x_ck.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for 3; n < 100; n += 2 {\n    ^   ~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i * j <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        if n % j == 0\
    \ {\n            return false\n        }\n        i += 2\n        j += 2\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp2dgwa152/tmp2dgwa152.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfc545fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfc5156b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfc5156988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfc51557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2dgwa152                        0x000055640d7b34ff <unavailable> + 5375

    5    libc.so.6                          0x00002abfc564b460 __libc_start_main +
    245

    6    tmp2dgwa152                        0x000055640d7b2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 2\n    while i <= j {\n\
    \        if i % n == 0 && j % n == 0 && k % n == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978648
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpmr30kgk3/tmpmr30kgk3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00707d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00704ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00704ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00704cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmr30kgk3                        0x0000557de6c874ff <unavailable> + 5375

    5    libc.so.6                          0x00002b00709c3460 __libc_start_main +
    245

    6    tmpmr30kgk3                        0x0000557de6c86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 5\n    var\
    \ j = 3\n    while i * i <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        i += j\n        j += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpzt5_2m5t/tmpzt5_2m5t.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a688f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a685eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a685ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a685ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzt5_2m5t                        0x00005589819e977d <unavailable> + 6013

    5    libc.so.6                          0x00002b1a68ae3460 __libc_start_main +
    245

    6    tmpzt5_2m5t                        0x00005589819e8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6e4uqlqr/tmp6e4uqlqr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a6463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a615ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a615a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a61597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e4uqlqr                        0x0000562586e874ff <unavailable> + 5375

    5    libc.so.6                          0x00002af0a664f460 __libc_start_main +
    245

    6    tmp6e4uqlqr                        0x0000562586e86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var\
    \ j = 3\n    var k = n\n    while i <= k {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        if j % i == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpnnoddckg/tmpnnoddckg.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e61882c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e61579b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e61579988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e615787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnnoddckg                        0x0000555dd58c86fb <unavailable> + 5883

    5    libc.so.6                          0x00002b0e61a6e460 __libc_start_main +
    245

    6    tmpnnoddckg                        0x0000555dd58c7ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n %\
    \ i == 0 || n % j == 0 {\n            return false\n        }\n        if k %\
    \ i == 0 || k % j == 0 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpll9_j11h/tmpll9_j11h.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d7fdbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d7fab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d7fab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d7fab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpll9_j11h                        0x000055d931a8b4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b7d7ffa8460 __libc_start_main +
    245

    6    tmpll9_j11h                        0x000055d931a8aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var\
    \ j = 3\n    var k = 5\n    while i <= n {\n        if n % i == 0 {\n        \
    \    return false\n        }\n        if i == n {\n            return true\n \
    \       }\n        if i % j == 0 {\n            return false\n        }\n    \
    \    if j % k == 0 {\n            return false\n        }\n        i += 2\n  \
    \      j += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpgwjbo1gg/tmpgwjbo1gg.swift:62: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39acfbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39accb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39accb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39accb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgwjbo1gg                        0x00005582412c16fb <unavailable> + 5883

    5    libc.so.6                          0x00002b39ad1a8460 __libc_start_main +
    245

    6    tmpgwjbo1gg                        0x00005582412c0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmppns4zztg/tmppns4zztg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b618fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b5e86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5b5e86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5b5e857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppns4zztg                        0x000055f38391f4ff <unavailable> + 5375

    5    libc.so.6                          0x00002ae5b637b460 __libc_start_main +
    245

    6    tmppns4zztg                        0x000055f38391eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n\
    \    var i = 2\n    var j: Int\n    var p: Bool\n\n    while i < n {\n       \
    \ p = true\n        j = i\n        while j < n {\n            if n % j == 0 {\n\
    \                p = false\n                break\n            }\n           \
    \ j += 1\n        }\n        if p {\n            return true\n        }\n    \
    \    i += 1\n    }\n\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmptc78cgee/tmptc78cgee.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7062408c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70620ffb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70620ff988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70620fe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptc78cgee                        0x000055e36bac1243 <unavailable> + 4675

    5    libc.so.6                          0x00002b70625f4460 __libc_start_main +
    245

    6    tmptc78cgee                        0x000055e36bac0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var isPrime = true\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            isPrime = false\n            break\n   \
    \     }\n        i += 1\n    }\n    return isPrime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmp2copf025/tmp2copf025.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aec29565c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aec2925cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aec2925c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aec2925b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2copf025                        0x0000556792a734ff <unavailable> + 5375

    5    libc.so.6                          0x00002aec29751460 __libc_start_main +
    245

    6    tmp2copf025                        0x0000556792a72ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = (3 * n) + 1\n    while i <= j {\n \
    \       if n % i == 0 {\n            return false\n        }\n        i += 6\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpih_910uv/tmpih_910uv.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28de014c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28ddd0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28ddd0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28ddd0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpih_910uv                        0x000055f4e7a752b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b28de200460 __libc_start_main +
    245

    6    tmpih_910uv                        0x000055f4e7a74ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 3\n    var prime = true\n    while i <= n {\n    \
    \    if n % i == 0 {\n            prime = false\n            break\n        }\n\
    \        i += 2\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpdffjs3y8/tmpdffjs3y8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b972f007c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b972ecfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b972ecfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b972ecfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdffjs3y8                        0x0000556f54a392b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b972f1f3460 __libc_start_main +
    245

    6    tmpdffjs3y8                        0x0000556f54a38ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6e4uqlqr/tmp6e4uqlqr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a6463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a615ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a615a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a61597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e4uqlqr                        0x0000562586e874ff <unavailable> + 5375

    5    libc.so.6                          0x00002af0a664f460 __libc_start_main +
    245

    6    tmp6e4uqlqr                        0x0000562586e86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n\n\
    \    var i = 2\n    var prime = true\n\n    while i < n {\n        if n % i ==\
    \ 0 {\n            prime = false\n            break\n        }\n        i += 1\n\
    \    }\n\n    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpmr30kgk3/tmpmr30kgk3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00707d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00704ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00704ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00704cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmr30kgk3                        0x0000557de6c874ff <unavailable> + 5375

    5    libc.so.6                          0x00002b00709c3460 __libc_start_main +
    245

    6    tmpmr30kgk3                        0x0000557de6c86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n %\
    \ i == 0 || n % j == 0 {\n            return false\n        }\n        if k %\
    \ i == 0 || k % j == 0 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpll9_j11h/tmpll9_j11h.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d7fdbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d7fab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d7fab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d7fab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpll9_j11h                        0x000055d931a8b4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b7d7ffa8460 __libc_start_main +
    245

    6    tmpll9_j11h                        0x000055d931a8aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int\n    while i <= n {\n        p = 5\n        while p <\
    \ n {\n            if n % p == 0 {\n                return false\n           \
    \ }\n            p += 6\n        }\n        i += 6\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978648
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + j) == 0 {\n            return false\n        }\n        i += 6\n        j\
    \ += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpb4_zv3w2/tmpb4_zv3w2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b8d704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b8d3fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b8d3fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b8d3fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4_zv3w2                        0x00005584d63134ff <unavailable> + 5375

    5    libc.so.6                          0x00002b6b8d8f0460 __libc_start_main +
    245

    6    tmpb4_zv3w2                        0x00005584d6312ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 2\n    while i <= j {\n\
    \        if i % n == 0 || j % n == 0 || k % n == 0 {\n            return false\n\
    \        }\n        i = i + 6\n        j = j + 6\n        k = k + 6\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp6xxoxywe/tmp6xxoxywe.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9ce0747c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9ce043eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9ce043e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9ce043d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6xxoxywe                        0x000055fb879a12b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b9ce0933460 __libc_start_main +
    245

    6    tmp6xxoxywe                        0x000055fb879a0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n \
    \   if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppkvvyojz.swift:16:12: error: expected type\n    for i := 5; i *\
    \ i <= n; i += 6 {\n           ^\n            <#type#>\n/tmp/tmppkvvyojz.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n           ^\n/tmp/tmppkvvyojz.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 5; i * i <= n; i += 6 {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n \
    \   if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= n/2; i++ {\n        if n % i == 0 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1lbx3_dw.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmp1lbx3_dw.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmp1lbx3_dw.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n\
    \        return false\n    }\n    var i = 5\n    var s = 2\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        s\
    \ += 2\n        i += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpb4mmszwk/tmpb4mmszwk.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba3baf46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3bac3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3bac3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3bac3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4mmszwk                        0x00005591bcf7a4ff <unavailable> + 5375

    5    libc.so.6                          0x00002ba3bb132460 __libc_start_main +
    245

    6    tmpb4mmszwk                        0x00005591bcf79ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + j) == 0 {\n            return false\n        }\n        i += 6\n        j\
    \ += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpb4_zv3w2/tmpb4_zv3w2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b8d704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b8d3fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b8d3fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b8d3fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4_zv3w2                        0x00005584d63134ff <unavailable> + 5375

    5    libc.so.6                          0x00002b6b8d8f0460 __libc_start_main +
    245

    6    tmpb4_zv3w2                        0x00005584d6312ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    var i = 2\n    var\
    \ j = 3\n    while i <= n {\n        if n % i == 0 {\n            return false\n\
    \        }\n        while j <= n / i {\n            if n % i == 0 {\n        \
    \        return false\n            }\n            i += 2\n            j += 2\n\
    \        }\n        i += 2\n        j = 3\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpu66u4w7x/tmpu66u4w7x.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96f765ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96f7351b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96f7351988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96f73507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu66u4w7x                        0x00005598670de6fb <unavailable> + 5883

    5    libc.so.6                          0x00002b96f7846460 __libc_start_main +
    245

    6    tmpu66u4w7x                        0x00005598670ddef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return true\n        }\n        i += 2\n        j += 2\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpclzh3ba5/tmpclzh3ba5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc4a3c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc4a0b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc4a0b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc4a0b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpclzh3ba5                        0x000055fa695864ff <unavailable> + 5375

    5    libc.so.6                          0x00002adc4a5ae460 __libc_start_main +
    245

    6    tmpclzh3ba5                        0x000055fa69585ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return false\n        }\n        j += 2\n        i += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpraxqq_c2/tmpraxqq_c2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae661e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae661b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae661b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae661b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraxqq_c2                        0x000055655a3ff2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ae66205b460 __libc_start_main +
    245

    6    tmpraxqq_c2                        0x000055655a3feef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i += 2 {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp659uqn4e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp659uqn4e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i += 2 {\n           ^\n/tmp/tmp659uqn4e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i +=\
    \ 2 {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i * i <= n; i += 2 {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpopw4zz0h.swift:13:12: error: expected type\n    for i := 3; i *\
    \ i <= n; i += 2 {\n           ^\n            <#type#>\n/tmp/tmpopw4zz0h.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i * i <= n; i +=\
    \ 2 {\n           ^\n/tmp/tmpopw4zz0h.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i * i <= n; i += 2 {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ n/2; i++ {\n        if n % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjjzrhkhv.swift:16:12: error: expected type\n    for i := 3; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpjjzrhkhv.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpjjzrhkhv.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < int(sqrt(n)); i += 2 {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwizl34qh.swift:13:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(n)); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpwizl34qh.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(n));\
    \ i += 2 {\n           ^\n/tmp/tmpwizl34qh.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(n)); i += 2 {\n \
    \          ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3hbd04ke.swift:16:12: error: expected type\n    for i := 5; i *\
    \ i <= n; i += 6 {\n           ^\n            <#type#>\n/tmp/tmp3hbd04ke.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n           ^\n/tmp/tmp3hbd04ke.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 5; i * i <= n; i += 6 {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ n/2; i++ {\n        if n % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjjzrhkhv.swift:16:12: error: expected type\n    for i := 3; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpjjzrhkhv.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpjjzrhkhv.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n %\
    \ i == 0 {\n            return false\n        }\n        if n % j == 0 {\n   \
    \         return false\n        }\n        if k % i == 0 {\n            return\
    \ false\n        }\n        if k % j == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return false\n        }\n        i += 2\n        j += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmptlxuje6a/tmptlxuje6a.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaddeafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaddba6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaddba6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaddba57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlxuje6a                        0x00005648daa6d2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002adade09b460 __libc_start_main +
    245

    6    tmptlxuje6a                        0x00005648daa6cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 2\n    while i <= j {\n\
    \        if i % n == 0 && j % n == 0 && k % n == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978648
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < int(sqrt(n)); i += 2 {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpu3g33yzl.swift:13:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(n)); i += 2 {\n           ^\n            <#type#>\n/tmp/tmpu3g33yzl.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(n));\
    \ i += 2 {\n           ^\n/tmp/tmpu3g33yzl.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(n)); i += 2 {\n \
    \          ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6e4uqlqr/tmp6e4uqlqr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a6463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a615ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a615a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a61597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e4uqlqr                        0x0000562586e874ff <unavailable> + 5375

    5    libc.so.6                          0x00002af0a664f460 __libc_start_main +
    245

    6    tmp6e4uqlqr                        0x0000562586e86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i * i <= n; i += 2 {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpopw4zz0h.swift:13:12: error: expected type\n    for i := 3; i *\
    \ i <= n; i += 2 {\n           ^\n            <#type#>\n/tmp/tmpopw4zz0h.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i * i <= n; i +=\
    \ 2 {\n           ^\n/tmp/tmpopw4zz0h.swift:13:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i * i <= n; i += 2 {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < int(sqrt(Double(n))); i += 2 {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5uqf58r3.swift:13:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(Double(n))); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp5uqf58r3.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(Double(n)));\
    \ i += 2 {\n           ^\n/tmp/tmp5uqf58r3.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(Double(n))); i +=\
    \ 2 {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6e4uqlqr/tmp6e4uqlqr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a6463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a615ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a615a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a61597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e4uqlqr                        0x0000562586e874ff <unavailable> + 5375

    5    libc.so.6                          0x00002af0a664f460 __libc_start_main +
    245

    6    tmp6e4uqlqr                        0x0000562586e86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        i += j\n        j +=\
    \ 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpwgl3q98e/tmpwgl3q98e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70e2d29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70e2a20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70e2a20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70e2a1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgl3q98e                        0x000055b4674d62b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b70e2f15460 __libc_start_main +
    245

    6    tmpwgl3q98e                        0x000055b4674d5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    // Check base cases\n    if n < 2 {\n      \
    \  return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n\
    \ == 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n    \
    \    return false\n    }\n\n    // Check middle cases\n    var i = 5\n    var\
    \ j = (3 * n) / 4\n    var k = (3 * n) / 2\n    while i <= k {\n        if n %\
    \ i == 0 || n % (i + 2) == 0 {\n            return false\n        }\n        i\
    \ += 6\n    }\n\n    // Check last case\n    if n % 6 == 3 || n % (5 + 3) == 3\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpoioh0p5v/tmpoioh0p5v.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f4e941c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f4e638b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f4e638988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f4e6377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoioh0p5v                        0x000055c03418d2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b3f4eb2d460 __libc_start_main +
    245

    6    tmpoioh0p5v                        0x000055c03418cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ n % j == 0 {\n            return false\n        }\n        if n % k == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp4252bpd7/tmp4252bpd7.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9651c10c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9651907b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9651907988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96519067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4252bpd7                        0x0000557b52eef2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b9651dfc460 __libc_start_main +
    245

    6    tmp4252bpd7                        0x0000557b52eeeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n\
    \        return false\n    }\n    \n    var i = 5\n    var j = 3\n    \n    while\
    \ i * j <= n {\n        if n % i == 0 {\n            return false\n        }\n\
    \        if n % j == 0 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbcnt6548.swift:13:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpbcnt6548.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpbcnt6548.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        while j <= n / i {\n\
    \            i += 2\n            j += 2\n        }\n        i += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpev3tfymi/tmpev3tfymi.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83ce3edc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83ce0e4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83ce0e4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83ce0e37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpev3tfymi                        0x00005623880324ff <unavailable> + 5375

    5    libc.so.6                          0x00002b83ce5d9460 __libc_start_main +
    245

    6    tmpev3tfymi                        0x0000562388031ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n \
    \   if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpithexd14.swift:13:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpithexd14.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpithexd14.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + j) == 0 {\n            return false\n        }\n        i += 6\n        j\
    \ += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpb4_zv3w2/tmpb4_zv3w2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b8d704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b8d3fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b8d3fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b8d3fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4_zv3w2                        0x00005584d63134ff <unavailable> + 5375

    5    libc.so.6                          0x00002b6b8d8f0460 __libc_start_main +
    245

    6    tmpb4_zv3w2                        0x00005584d6312ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return false\n        }\n        i += 2\n        j += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmptlxuje6a/tmptlxuje6a.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaddeafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaddba6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaddba6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaddba57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlxuje6a                        0x00005648daa6d2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002adade09b460 __libc_start_main +
    245

    6    tmptlxuje6a                        0x00005648daa6cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpmr30kgk3/tmpmr30kgk3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00707d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00704ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00704ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00704cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmr30kgk3                        0x0000557de6c874ff <unavailable> + 5375

    5    libc.so.6                          0x00002b00709c3460 __libc_start_main +
    245

    6    tmpmr30kgk3                        0x0000557de6c86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = 3\n    while i * i <=\
    \ n {\n        if n % i == 0 {\n            return false\n        }\n        i\
    \ += k\n        j += k\n        k += k\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpu33tw3u7/tmpu33tw3u7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1bd2c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1bcfbcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1bcfbc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1bcfbb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu33tw3u7                        0x0000561be90df4ff <unavailable> + 5375

    5    libc.so.6                          0x00002ac1bd4b1460 __libc_start_main +
    245

    6    tmpu33tw3u7                        0x0000561be90deef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978644
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var p = 5\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ p % i == 0 {\n            return false\n        }\n        if j % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 3\n       \
    \ p += 5\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp10h09qw7/tmp10h09qw7.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a91a29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a91720b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a91720988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a9171f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10h09qw7                        0x00005590b07874ff <unavailable> + 5375

    5    libc.so.6                          0x00002b1a91c15460 __libc_start_main +
    245

    6    tmp10h09qw7                        0x00005590b0786ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n %\
    \ i == 0 || n % j == 0 {\n            return false\n        }\n        if k %\
    \ 2 == 0 {\n            i += 2\n        }\n        if k % 3 == 0 {\n         \
    \   j += 2\n        }\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpyf3iee5k/tmpyf3iee5k.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84de3c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84de0bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84de0bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84de0ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyf3iee5k                        0x00005555bb2024ff <unavailable> + 5375

    5    libc.so.6                          0x00002b84de5b0460 __libc_start_main +
    245

    6    tmpyf3iee5k                        0x00005555bb201ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978644
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = (3 * n) / 2\n    var k = (3 * n) / 3\n    while i <= j {\n\
    \        if ((n % i) == 0) {\n            return false\n        }\n        if\
    \ ((n % j) == 0) {\n            return false\n        }\n        if ((n % k) ==\
    \ 0) {\n            return false\n        }\n        i += 2\n        j += 2\n\
    \        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmpr8ax2v0u/tmpr8ax2v0u.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b344e96fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b344e666b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b344e666988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b344e6657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr8ax2v0u                        0x00005567d38fa2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b344eb5b460 __libc_start_main +
    245

    6    tmpr8ax2v0u                        0x00005567d38f9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978644
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5bjdp2e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpb5bjdp2e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpb5bjdp2e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return false\n        }\n        j += 2\n        i += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpraxqq_c2/tmpraxqq_c2.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae661e6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae661b66b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae661b66988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae661b657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraxqq_c2                        0x000055655a3ff2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002ae66205b460 __libc_start_main +
    245

    6    tmpraxqq_c2                        0x000055655a3feef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + j) == 0 {\n            return false\n        }\n        i += 6\n        j\
    \ += 6\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpb4_zv3w2/tmpb4_zv3w2.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b8d704c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b8d3fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b8d3fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b8d3fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb4_zv3w2                        0x00005584d63134ff <unavailable> + 5375

    5    libc.so.6                          0x00002b6b8d8f0460 __libc_start_main +
    245

    6    tmpb4_zv3w2                        0x00005584d6312ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n %\
    \ i == 0 {\n            return false\n        }\n        if n % j == 0 {\n   \
    \         return false\n        }\n        if k % i == 0 {\n            return\
    \ false\n        }\n        if k % j == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s: Int\n    while i * i <= n {\n        if n % i == 0 || n %\
    \ (i + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpmr30kgk3/tmpmr30kgk3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00707d7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00704ceb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00704ce988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00704cd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmr30kgk3                        0x0000557de6c874ff <unavailable> + 5375

    5    libc.so.6                          0x00002b00709c3460 __libc_start_main +
    245

    6    tmpmr30kgk3                        0x0000557de6c86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    // Check base cases\n    if n == 1 {\n     \
    \   return true\n    }\n    if n == 2 {\n        return true\n    }\n    if n\
    \ == 3 {\n        return true\n    }\n    if n % 2 == 0 || n % 3 == 0 {\n    \
    \    return false\n    }\n\n    // Check middle cases\n    var i = 5\n    var\
    \ j = 3\n    while i * i <= n {\n        if n % i == 0 || n % (i + j) == 0 {\n\
    \            return false\n        }\n        i += 6\n        j += 6\n    }\n\n\
    \    // If we get here, it's prime.\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpjr4mcyhr/tmpjr4mcyhr.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3c2d9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3c2a95b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3c2a95988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3c2a947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjr4mcyhr                        0x00005622484da4ff <unavailable> + 5375

    5    libc.so.6                          0x00002ae3c2f8a460 __libc_start_main +
    245

    6    tmpjr4mcyhr                        0x00005622484d9ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978644
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmprevy8pq_/tmprevy8pq_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba27bf0dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba27bc04b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba27bc04988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba27bc037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprevy8pq_                        0x0000564af0f014ff <unavailable> + 5375

    5    libc.so.6                          0x00002ba27c0f9460 __libc_start_main +
    245

    6    tmprevy8pq_                        0x0000564af0f00ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978644
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpej3m3y6w.swift:16:12: error: expected type\n    for i := 5; i *\
    \ i <= n; i += 6 {\n           ^\n            <#type#>\n/tmp/tmpej3m3y6w.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 5; i * i <= n; i +=\
    \ 6 {\n           ^\n/tmp/tmpej3m3y6w.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 5; i * i <= n; i += 6 {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for 3; n < 9; n += 2 {\n        if n % 3 == 0 {\n        \
    \    return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw4ntq02n.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for 3; n < 9; n += 2 {\n    ^   ~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i <= Int(sqrt(Double(n))); i += 2 {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp659uqn4e.swift:13:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i += 2 {\n           ^\n            <#type#>\n/tmp/tmp659uqn4e.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i += 2 {\n           ^\n/tmp/tmp659uqn4e.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i +=\
    \ 2 {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < int(sqrt(Double(n))); i++ {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbcnt6548.swift:13:12: error: expected type\n    for i := 3; i <\
    \ int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpbcnt6548.swift:13:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i < int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpbcnt6548.swift:13:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i < int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n\
    \        return false\n    }\n    let limit = (sqrt(Double(n))).rounded(.down)\n\
    \    for i in 1..<limit {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkttce4o4.swift:19:18: error: cannot find 'sqrt' in scope\n    let\
    \ limit = (sqrt(Double(n))).rounded(.down)\n                 ^~~~\n/tmp/tmpkttce4o4.swift:19:44:\
    \ error: cannot infer contextual base in reference to member 'down'\n    let limit\
    \ = (sqrt(Double(n))).rounded(.down)\n                                       \
    \   ~^~~~\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var s = 2\n    while i * i <= n {\n        if n % i == 0 || n % (i\
    \ + 2) == 0 {\n            return false\n        }\n        i += 6\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmppns4zztg/tmppns4zztg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5b618fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5b5e86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5b5e86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5b5e857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppns4zztg                        0x000055f38391f4ff <unavailable> + 5375

    5    libc.so.6                          0x00002ae5b637b460 __libc_start_main +
    245

    6    tmppns4zztg                        0x000055f38391eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        if j > n / 2 {\n  \
    \          return false\n        }\n        i += 2\n        j += 2\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmptlxuje6a/tmptlxuje6a.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adaddeafc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adaddba6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adaddba6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adaddba57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptlxuje6a                        0x00005648daa6d2b7 <unavailable> + 4791

    5    libc.so.6                          0x00002adade09b460 __libc_start_main +
    245

    6    tmptlxuje6a                        0x00005648daa6cef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n    for i :=\
    \ 3; i <= Int(sqrt(Double(n))); i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk41ggedz.swift:16:12: error: expected type\n    for i := 3; i <=\
    \ Int(sqrt(Double(n))); i++ {\n           ^\n            <#type#>\n/tmp/tmpk41ggedz.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= Int(sqrt(Double(n)));\
    \ i++ {\n           ^\n/tmp/tmpk41ggedz.swift:16:12: error: expected Sequence\
    \ expression for for-each loop\n    for i := 3; i <= Int(sqrt(Double(n))); i++\
    \ {\n           ^\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var p: Int\n    while i <= n {\n        p = primes[i]\n        if\
    \ n % p == 0 {\n            return false\n        }\n        i += 6\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpze58a6hj.swift:19:13: error: cannot find 'primes' in scope\n  \
    \      p = primes[i]\n            ^~~~~~\n"
  stdout: ''
  timestamp: 1659978643
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = n - 1\n    while i <=\
    \ k {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ j % i == 0 {\n            return false\n        }\n        i += 2\n        j\
    \ += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmp4iw9rzue/tmp4iw9rzue.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f5e11fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f5de16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f5de16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f5de157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4iw9rzue                        0x000055b54abf24ff <unavailable> + 5375

    5    libc.so.6                          0x00002b3f5e30b460 __libc_start_main +
    245

    6    tmp4iw9rzue                        0x000055b54abf1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978644
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    var k = 3\n    while i <= n\
    \ {\n        if n % i == 0 {\n            return false\n        }\n        if\
    \ k % i == 0 {\n            return false\n        }\n        if j % i == 0 {\n\
    \            return false\n        }\n        i += 2\n        j += 2\n       \
    \ k += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: Exception
  stderr: 'tmpl8szu4ia/tmpl8szu4ia.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b85407f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b85404eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b85404ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b85404e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl8szu4ia                        0x000055677520a4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b85409df460 __libc_start_main +
    245

    6    tmpl8szu4ia                        0x0000556775209ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6e4uqlqr/tmp6e4uqlqr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a6463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a615ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a615a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a61597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e4uqlqr                        0x0000562586e874ff <unavailable> + 5375

    5    libc.so.6                          0x00002af0a664f460 __libc_start_main +
    245

    6    tmp6e4uqlqr                        0x0000562586e86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n %\
    \ i == 0 {\n            return false\n        }\n        if n % j == 0 {\n   \
    \         return false\n        }\n        if k % i == 0 {\n            return\
    \ false\n        }\n        if k % j == 0 {\n            return false\n      \
    \  }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpfgjepmd0/tmpfgjepmd0.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6336c99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6336990b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6336990988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b633698f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfgjepmd0                        0x000055eed84184ff <unavailable> + 5375

    5    libc.so.6                          0x00002b6336e85460 __libc_start_main +
    245

    6    tmpfgjepmd0                        0x000055eed8417ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978644
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <=\
    \ n/2; i++ {\n        if n % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_prime(n:\
    \ 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjjzrhkhv.swift:16:12: error: expected type\n    for i := 3; i <=\
    \ n/2; i++ {\n           ^\n            <#type#>\n/tmp/tmpjjzrhkhv.swift:16:12:\
    \ error: expected 'in' after for-each pattern\n    for i := 3; i <= n/2; i++ {\n\
    \           ^\n/tmp/tmpjjzrhkhv.swift:16:12: error: expected Sequence expression\
    \ for for-each loop\n    for i := 3; i <= n/2; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = 3\n    var k = 2\n    while i * j <= n {\n        if n %\
    \ i == 0 || n % j == 0 {\n            return false\n        }\n        if k %\
    \ i == 0 || k % j == 0 {\n            return false\n        }\n        i += 2\n\
    \        j += 2\n        k += 2\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n:\
    \ 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\n\
    assert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\n\
    assert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpll9_j11h/tmpll9_j11h.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d7fdbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d7fab3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d7fab3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d7fab27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpll9_j11h                        0x000055d931a8b4ff <unavailable> + 5375

    5    libc.so.6                          0x00002b7d7ffa8460 __libc_start_main +
    245

    6    tmpll9_j11h                        0x000055d931a8aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 2\n    var j = 3\n    while i <= n {\n        if n\
    \ % i == 0 {\n            return false\n        }\n        while j <= n {\n  \
    \          if n % j == 0 {\n                return false\n            }\n    \
    \        j += 2\n        }\n        i += 2\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_prime(n: 6) == false)\nassert(is_prime(n: 101)\
    \ == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 13441) == true)\n\
    assert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n:\
    \ 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\nassert(is_prime(n:\
    \ 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Exception
  stderr: 'tmpo4k64wxr/tmpo4k64wxr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b249e987c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b249e67eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b249e67e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b249e67d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo4k64wxr                        0x000055fe198e22b7 <unavailable> + 4791

    5    libc.so.6                          0x00002b249eb73460 __libc_start_main +
    245

    6    tmpo4k64wxr                        0x000055fe198e1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978644
- exit_code: 1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n       \
    \ return true\n    }\n    if n == 6 {\n        return true\n    }\n    if n ==\
    \ 7 {\n        return true\n    }\n    if n == 8 {\n        return true\n    }\n\
    \    if n == 9 {\n        return true\n    }\n    if n == 10 {\n        return\
    \ true\n    }\n    if n == 11 {\n        return true\n    }\n    if n == 12 {\n\
    \        return true\n    }\n    if n == 13 {\n        return true\n    }\n  \
    \  if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return\
    \ true\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n\
    \        return true\n    }\n    if n == 18 {\n        return true\n    }\n  \
    \  if n == 19 {\n        return true\n    }\n    if n == 20 {\n        return\
    \ true\n    }\n    if n == 21 {\n        return true\n    }\n    if n == 22 {\n\
    \        return true\n    }\n    if n == 23 {\n        return true\n    }\n  \
    \  if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return\
    \ true\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n\
    \        return true\n    }\n    if n == 28 {\n        return true\n    }\n  \
    \  if n == 29 {\n        return true\n    }\n    if n == 30 {\n        return\
    \ true\n    }\n    if n == 31 {\n        return true\n    }\n    if n == 32 {\n\
    \        return true\n    }\n    if n == 33 {\n        return true\n    }\n  \
    \  if n == 34 {\n        return true\n    }\n    if n == 35 {\n        return\
    \ true\n    }\n    if n == 36 {\n        return true\n    }\n    if n == 37 {\n\
    \        return true\n    }\n    if n == 38 {\n        return true\n    }\n  \
    \  if n == 39 {\n        return true\n    }\n    if n == 40 {\n        return\
    \ true\n    }\n    if n == 41 {\n        return true\n    }\n    if n == 42 {\n\
    \        return true\n    }\n    if n == 43 {\n        return true\n    }\n  \
    \  if n == 44 {\n        return true\n    }\n    if n == 45 {\n        return\
    \ true\n    }\n    if n == 46 {\n        return true\n    }\n    if n == 47 {\n\
    \        return true\n    }\n    if n == 48 {\n        return true\n    }\n  \
    \  if n == 49 {\n        return true\n    }\n    if n == 50 {\n        return\
    \ true\n    }\n    if n == 51 {\n        return true\n    }\n    if n == 52 {\n\
    \        return \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) ==\
    \ false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\n\
    assert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n:\
    \ 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\n\
    assert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n:\
    \ 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379)\
    \ == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1izzstsy.swift:186:37: error: expected '}' at end of brace statement\n\
    assert(is_prime(n: 255379) == false)\n                                    ^\n\
    /tmp/tmp1izzstsy.swift:3:31: note: to match this opening '{'\nfunc is_prime(n:\
    \ Int) -> Bool {\n                              ^\n/tmp/tmp1izzstsy.swift:158:9:\
    \ error: non-void function should return a value\n        return \n        ^\n\
    /tmp/tmp1izzstsy.swift:162:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: -1
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n < 2 {\n        return false\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    var\
    \ i = 5\n    var j = (3 * n) + 1\n    var k = (3 * n) + 2\n    while i <= j {\n\
    \        if i % n == 0 && j % n == 0 && k % n == 0 {\n            return false\n\
    \        }\n        i += 2\n        j += 2\n        k += 2\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_prime(n: 6) == false)\n\
    assert(is_prime(n: 101) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n:\
    \ 13441) == true)\nassert(is_prime(n: 61) == true)\nassert(is_prime(n: 4) == false)\n\
    assert(is_prime(n: 1) == false)\nassert(is_prime(n: 5) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 17) == true)\nassert(is_prime(n: 85) == false)\n\
    assert(is_prime(n: 77) == false)\nassert(is_prime(n: 255379) == false)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659978649
- exit_code: -4
  program: "\n/// Return true if a given number is prime, and false otherwise.\nfunc\
    \ is_prime(n: Int) -> Bool {\n    if n == 1 {\n        return true\n    }\n  \
    \  if n == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return\
    \ false\n    }\n    var i = 5\n    var j = 3\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            return false\n        }\n        i += j\n     \
    \   j += 2\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_prime(n: 6) == false)\nassert(is_prime(n: 101) == true)\nassert(is_prime(n:\
    \ 11) == true)\nassert(is_prime(n: 13441) == true)\nassert(is_prime(n: 61) ==\
    \ true)\nassert(is_prime(n: 4) == false)\nassert(is_prime(n: 1) == false)\nassert(is_prime(n:\
    \ 5) == true)\nassert(is_prime(n: 11) == true)\nassert(is_prime(n: 17) == true)\n\
    assert(is_prime(n: 85) == false)\nassert(is_prime(n: 77) == false)\nassert(is_prime(n:\
    \ 255379) == false)"
  status: Exception
  stderr: 'tmp6e4uqlqr/tmp6e4uqlqr.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0a6463c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0a615ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0a615a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0a61597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6e4uqlqr                        0x0000562586e874ff <unavailable> + 5375

    5    libc.so.6                          0x00002af0a664f460 __libc_start_main +
    245

    6    tmp6e4uqlqr                        0x0000562586e86ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659978642
