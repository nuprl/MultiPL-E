name: HumanEval_137_compare_one
language: swift
prompt: "\nenum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n\
  \    case stringValue(String)\n}\n\n            \n/// Create a function that takes\
  \ integers, floats, or strings representing\n/// real numbers, and returns the larger\
  \ variable in its given variable type.\n/// Return None if the values are equal.\n\
  /// Note: If a real number is represented as a string, the floating point might\
  \ be . or ,\nfunc compare_one(a: Value, b: Value) -> Value? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(compare_one(a: .intValue(1), b: .intValue(2))\
  \ == .intValue(2))\nassert(compare_one(a: .intValue(1), b: .doubleValue(2.5)) ==\
  \ .doubleValue(2.5))\nassert(compare_one(a: .intValue(2), b: .intValue(3)) == .intValue(3))\n\
  assert(compare_one(a: .intValue(5), b: .intValue(6)) == .intValue(6))\nassert(compare_one(a:\
  \ .intValue(1), b: .stringValue(\"2,3\")) == .stringValue(\"2,3\"))\nassert(compare_one(a:\
  \ .stringValue(\"5,1\"), b: .stringValue(\"6\")) == .stringValue(\"6\"))\nassert(compare_one(a:\
  \ .stringValue(\"1\"), b: .stringValue(\"2\")) == .stringValue(\"2\"))\nassert(compare_one(a:\
  \ .stringValue(\"1\"), b: .intValue(1)) == nil)"
completions: ["    switch a as! Value, b as! Value {\n    case .intValue(_), .doubleValue(_),\
    \ .stringValue(_):\n        return a\n    case .intValue(_), .doubleValue(_):\n\
    \        return b\n    case .stringValue(_), .intValue(_):\n        return a\n\
    \    case .stringValue(_), .doubleValue(_):\n        return b\n    }\n    return\
    \ nil", "    switch a { case .intValue(_), .doubleValue(_), .stringValue(_)\n\
    \        case .intValue(_), .doubleValue(_)\n            return b\n        case\
    \ .stringValue(_), .intValue(_)\n            return a\n        case .stringValue(_),\
    \ .doubleValue(_)\n            return b\n        case .stringValue(_)\n      \
    \      return a\n        case .intValue(_)\n            return b\n        case\
    \ .doubleValue(_)\n            return a\n    }", "    switch a as! Value {\n \
    \   case .intValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            if a < b {\n                return\
    \ a\n            } else {\n                return b\n            }\n        }\n\
    \    case .doubleValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return b\n        case .doubleValue(_):\n            return a\n \
    \       case .stringValue(_):\n            if a < b {\n                return\
    \ b\n            } else {\n                return a\n            }\n        }\n\
    \    case .stringValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            if a < b {\n                return\
    \ a\n            } else {\n                return b\n            }\n        }\n\
    \    }\n    return nil", "    switch a { // Compare by type\n    case .intValue(_):\n\
    \        switch b { // Compare by type\n        case .intValue(_):\n         \
    \   return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare by type\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare by type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type to determine which case to return\n    case .intValue(_):\n        switch\
    \ b { // Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a as? Value {\n    case let intValue(aInt):\n\
    \        switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ intValue > bInt ? intValue : bInt\n        case let doubleValue(bDouble):\n\
    \            return intValue > bDouble ? intValue : bDouble\n        case let\
    \ stringValue(bString):\n            return intValue > bString ? intValue : bString\n\
    \        }\n    case let doubleValue(aDouble):\n        switch b as? Value {\n\
    \        case let intValue(bInt):\n            return aDouble > bInt ? aDouble\
    \ : bInt\n        case let doubleValue(bDouble):\n            return aDouble >\
    \ bDouble ? aDouble : bDouble\n        case let stringValue(bString):\n      \
    \      return aDouble > bString ? aDouble : bString\n        }\n    case let stringValue(aString):\n\
    \        switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ aString > bInt ? aString : bInt\n        case let doubleValue(bDouble):\n  \
    \          return aString > bDouble ? aString : bDouble\n        case let stringValue(bString):\n\
    \            return aString > bString ? aString : bString\n        }\n    }\n\
    \    return nil", "    switch a as? ValueType {\n    case .intValue:\n       \
    \ switch b as? ValueType {\n        case .intValue:\n            return .intValue\n\
    \        case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    case .doubleValue:\n        switch\
    \ b as? ValueType {\n        case .intValue:\n            return .intValue\n \
    \       case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    case .stringValue:\n        switch\
    \ b as? ValueType {\n        case .intValue:\n            return .intValue\n \
    \       case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a as? ValueType {\n    case .intValue:\n        switch b as? ValueType {\n \
    \       case .intValue:\n            return a.intValue > b.intValue\n        case\
    \ .doubleValue:\n            return a.doubleValue > b.doubleValue\n        case\
    \ .stringValue:\n            return a.stringValue > b.stringValue\n        }\n\
    \    case .doubleValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.doubleValue > b.intValue\n        case .doubleValue:\n \
    \           return a.doubleValue > b.doubleValue\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue\n        }\n    case .stringValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.stringValue > b.intValue\n        case .doubleValue:\n            return a.stringValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    }\n    return nil", "    switch a { case .intValue(_):\n\
    \        switch b { case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .doubleValue(_):\n        switch b { case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    }\n    return nil", "    switch a as? Value {\n    case let intValue(aInt):\n\
    \        switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ intValue > bInt ? intValue : bInt\n        case let doubleValue(bDouble):\n\
    \            return intValue > bDouble ? intValue : bDouble\n        case let\
    \ stringValue(bString):\n            return intValue > bString ? intValue : bString\n\
    \        }\n    case let doubleValue(aDouble):\n        switch b as? Value {\n\
    \        case let intValue(bInt):\n            return aDouble > bInt ? aDouble\
    \ : bInt\n        case let doubleValue(bDouble):\n            return aDouble >\
    \ bDouble ? aDouble : bDouble\n        case let stringValue(bString):\n      \
    \      return aDouble > bString ? aDouble : bString\n        }\n    case let stringValue(aString):\n\
    \        switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ aString > bInt ? aString : bInt\n        case let doubleValue(bDouble):\n  \
    \          return aString > bDouble ? aString : bDouble\n        case let stringValue(bString):\n\
    \            return aString > bString ? aString : bString\n        }\n    }\n\
    \    return nil", "    switch a { // a is larger\n    case .intValue(_):\n   \
    \     return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    // Both are integers\n    if a.intValue()\
    \ > b.intValue() {\n        return a\n    }\n    \n    return b", "    switch\
    \ a { // Switch on a.\n    case .intValue(_):\n        switch b { // Switch on\
    \ b.\n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .doubleValue(_):\n        switch b { // Switch on b.\n   \
    \     case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .stringValue(_):\n        switch b { // Switch on b.\n   \
    \     case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    }\n    return nil", "    switch a as? ValueType {\n    case .intValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.intValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    case .doubleValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.doubleValue > b.intValue\n\
    \        case .doubleValue:\n            return a.doubleValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.doubleValue > b.stringValue\n\
    \        }\n    case .stringValue:\n        switch b as? ValueType {\n       \
    \ case .intValue:\n            return a.stringValue > b.intValue\n        case\
    \ .doubleValue:\n            return a.stringValue > b.doubleValue\n        case\
    \ .stringValue:\n            return a.stringValue > b.stringValue\n        }\n\
    \    }\n    return nil", "    switch a as! Value, b as! Value {\n    case .intValue(_),\
    \ .doubleValue(_), .stringValue(_):\n        return a\n    case .intValue(_),\
    \ .doubleValue(_):\n        return b\n    case .stringValue(_), .intValue(_),\
    \ .doubleValue(_):\n        return a\n    case .stringValue(_), .doubleValue(_):\n\
    \        return b\n    case .intValue(_), .stringValue(_):\n        return a\n\
    \    case .doubleValue(_), .stringValue(_):\n        return b\n    }\n    return\
    \ nil", "    switch a as! Value {\n    case .intValue(_):\n        switch b as!\
    \ Value {\n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .doubleValue(_):\n        switch b as! Value {\n        case\
    \ .intValue(_):\n            return b\n        case .doubleValue(_):\n       \
    \     return a\n        case .stringValue(_):\n            return a\n        }\n\
    \    case .stringValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return a\n        }\n    }\n    return\
    \ nil", "    switch a as? ValueType {\n    case .intValue:\n        switch b as?\
    \ ValueType {\n        case .intValue:\n            return a.intValue > b.intValue\n\
    \        case .doubleValue:\n            return a.doubleValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.stringValue > b.stringValue\n\
    \        }\n    case .doubleValue:\n        switch b as? ValueType {\n       \
    \ case .intValue:\n            return a.doubleValue > b.intValue\n        case\
    \ .doubleValue:\n            return a.doubleValue > b.doubleValue\n        case\
    \ .stringValue:\n            return a.doubleValue > b.stringValue\n        }\n\
    \    case .stringValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.stringValue > b.intValue\n        case .doubleValue:\n \
    \           return a.stringValue > b.doubleValue\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue\n        }\n    }\n    return\
    \ nil", "    switch a as! Value {\n    case .intValue(_):\n        switch b as!\
    \ Value {\n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .doubleValue(_):\n        switch b as! Value {\n        case\
    \ .intValue(_):\n            return a\n        case .doubleValue(_):\n       \
    \     return b\n        case .stringValue(_):\n            return b\n        }\n\
    \    case .stringValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    }\n    return\
    \ nil", "    switch a { // case is more efficient than switch-case\n    case .intValue(_):\n\
    \        switch b { // case is more efficient than switch-case\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // case is more efficient than switch-case\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // case is more efficient than switch-case\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    }\n    return\
    \ nil", "    switch a { // TODO: Switch to switch on enum\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a { // Switch on the type\
    \ of the first value\n    case .intValue(_):\n        switch b { // Switch on\
    \ the type of the second value\n        case .intValue(_):\n            return\
    \ .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n        \
    \    return .doubleValue(a.doubleValue > b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        }\n \
    \   case .doubleValue(_):\n        switch b { // Switch on the type of the second\
    \ value\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on the type of the second value\n        case .intValue(_):\n       \
    \     return .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    // Both are integers\n    if a.intValue >\
    \ b.intValue {\n        return a\n    }\n    \n    if b.intValue > a.intValue\
    \ {\n        return b\n    }\n    \n    // Both are doubles\n    if a.doubleValue\
    \ > b.doubleValue {\n        return a\n    }\n    \n    if b.doubleValue > a.doubleValue\
    \ {\n        return b\n    }\n    \n    // Both are strings\n    if a.stringValue\
    \ > b.stringValue {\n        return a\n    }\n    \n    if b.stringValue > a.stringValue\
    \ {\n        return b\n    }\n    \n    // None are equal\n    return nil", " \
    \   switch a { // TODO: Switch to switch case for performance\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a as? Value {\n    case\
    \ let .intValue(aInt):\n        switch b as? Value {\n        case let .intValue(bInt):\n\
    \            return aInt > bInt ? .intValue(aInt) : .intValue(bInt)\n        case\
    \ let .doubleValue(bDouble):\n            return .doubleValue(bDouble)\n     \
    \   case let .stringValue(bString):\n            return .stringValue(bString)\n\
    \        }\n    case let .doubleValue(aDouble):\n        switch b as? Value {\n\
    \        case let .intValue(bInt):\n            return .doubleValue(aDouble)\n\
    \        case let .doubleValue(bDouble):\n            return bDouble > aDouble\
    \ ? .doubleValue(aDouble) : .doubleValue(bDouble)\n        case let .stringValue(bString):\n\
    \            return .stringValue(bString)\n        }\n    case let .stringValue(aString):\n\
    \        switch b as? Value {\n        case let .intValue(bInt):\n           \
    \ return .stringValue(aString)\n        case let .doubleValue(bDouble):\n    \
    \        return .stringValue(aString)\n        case let .stringValue(bString):\n\
    \            return .stringValue(bString)\n        }\n    }\n    return nil",
  "    switch a { // case is required because Value is a protocol\n    case .intValue(_):\n\
    \        switch b { // case is required because Value is a protocol\n        case\
    \ .intValue(_):\n            return a\n        case .doubleValue(_):\n       \
    \     return b\n        case .stringValue(_):\n            return b\n        }\n\
    \    case .doubleValue(_):\n        switch b { // case is required because Value\
    \ is a protocol\n        case .intValue(_):\n            return a\n        case\
    \ .doubleValue(_):\n            return b\n        case .stringValue(_):\n    \
    \        return b\n        }\n    case .stringValue(_):\n        switch b { //\
    \ case is required because Value is a protocol\n        case .intValue(_):\n \
    \           return a\n        case .doubleValue(_):\n            return b\n  \
    \      case .stringValue(_):\n            return b\n        }\n    }\n    return\
    \ nil", "    switch a as! Value {\n    case .intValue(_):\n        switch b as!\
    \ Value {\n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return a\n \
    \       }\n    case .doubleValue(_):\n        switch b as! Value {\n        case\
    \ .intValue(_):\n            return b\n        case .doubleValue(_):\n       \
    \     return a\n        case .stringValue(_):\n            return b\n        }\n\
    \    case .stringValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return b\n        case .doubleValue(_):\n            return a\n \
    \       case .stringValue(_):\n            return a\n        }\n    }\n    return\
    \ nil", "    switch a { // Compare two values\n    case .intValue(_):\n      \
    \  return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a { // TODO: Switch to\
    \ enum\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    return\
    \ nil", "    switch a { // a is larger\n    case .intValue(_):\n        switch\
    \ b { // b is larger\n        case .intValue(_):\n            return a\n     \
    \   case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil", "    switch a { // a\
    \ is larger\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch b { // b is larger\n    case .intValue(_):\n        return a\n   \
    \ case .doubleValue(_):\n        return a\n    case .stringValue(_):\n       \
    \ return a\n    }\n    \n    return nil", "    switch a { // Switch on type to\
    \ determine which case to use\n    case .intValue(_):\n        return b\n    case\
    \ .doubleValue(_):\n        return b\n    case .stringValue(_):\n        return\
    \ b\n    }\n    return nil", "    switch a as? ValueType {\n    case .intValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.intValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    case .doubleValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.doubleValue > b.intValue\n\
    \        case .doubleValue:\n            return a.doubleValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.doubleValue > b.stringValue\n\
    \        }\n    case .stringValue:\n        switch b as? ValueType {\n       \
    \ case .intValue:\n            return a.stringValue > b.intValue\n        case\
    \ .doubleValue:\n            return a.stringValue > b.doubleValue\n        case\
    \ .stringValue:\n            return a.stringValue > b.stringValue\n        }\n\
    \    }\n    return nil", "    switch a { // Compare each variable type\n    case\
    \ .intValue(_):\n        switch b { // Compare each variable type\n        case\
    \ .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n     \
    \   case .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Compare each variable type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare each variable type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a as? ValueType\
    \ {\n    case .intValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.intValue > b.intValue\n        case .doubleValue:\n    \
    \        return a.doubleValue > b.doubleValue\n        case .stringValue:\n  \
    \          return a.stringValue > b.stringValue\n        }\n    case .doubleValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.doubleValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    case .stringValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.stringValue > b.intValue\n\
    \        case .doubleValue:\n            return a.stringValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.stringValue > b.stringValue\n\
    \        }\n    }\n    return nil", "    switch a { // Switch on the type of the\
    \ first argument.\n    case .intValue(_):\n        switch b { // Switch on the\
    \ type of the second argument.\n        case .intValue(_):\n            return\
    \ .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Switch on the type of the second argument.\n        case\
    \ .intValue(_):\n            return .doubleValue(a.doubleValue > b.intValue ?\
    \ a.doubleValue : b.doubleValue)\n        case .doubleValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue : b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on the type of the second argument.\n        case .intValue(_):\n   \
    \         return .stringValue(a.stringValue > b.intValue ? a.stringValue : b.stringValue)\n\
    \        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.doubleValue ? a.stringValue : b.stringValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on a.\n    case .intValue(_):\n        switch b { // Switch on b.\n        case\
    \ .intValue(_):\n            return a\n        case .doubleValue(_):\n       \
    \     return b\n        case .stringValue(_):\n            return b\n        }\n\
    \    case .doubleValue(_):\n        switch b { // Switch on b.\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Switch on b.\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil", "    switch a { // case\
    \ intValue:\n    case .intValue:\n        switch b { // case intValue:\n     \
    \   case .intValue:\n            return .intValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    case .doubleValue:\n        switch b { // case\
    \ doubleValue:\n        case .intValue:\n            return .intValue\n      \
    \  case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    case .stringValue:\n        switch\
    \ b { // case stringValue:\n        case .intValue:\n            return .intValue\n\
    \        case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a { // Switch on type to determine which case to return\n    case .intValue(_):\n\
    \        switch b { // Switch on type to determine which case to return\n    \
    \    case .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a as? Value\
    \ {\n    case let .intValue(aIntValue):\n        switch b as? Value {\n      \
    \  case let .intValue(bIntValue):\n            return aIntValue > bIntValue ?\
    \ .intValue(aIntValue) : .intValue(bIntValue)\n        case let .doubleValue(bDoubleValue):\n\
    \            return .doubleValue(aIntValue) > bDoubleValue ? .intValue(aIntValue)\
    \ : .doubleValue(bDoubleValue)\n        case let .stringValue(bStringValue):\n\
    \            return .stringValue(aIntValue) > bStringValue ? .intValue(aIntValue)\
    \ : .stringValue(bStringValue)\n        }\n    case let .doubleValue(aDoubleValue):\n\
    \        switch b as? Value {\n        case let .intValue(bIntValue):\n      \
    \      return .doubleValue(aDoubleValue) > bIntValue ? .doubleValue(aDoubleValue)\
    \ : .intValue(bIntValue)\n        case let .doubleValue(bDoubleValue):\n     \
    \       return .doubleValue(aDoubleValue) > bDoubleValue ? .doubleValue(aDoubleValue)\
    \ : .doubleValue(bDoubleValue)\n        case let .stringValue(bStringValue):\n\
    \            return .doubleValue(aDoubleValue) > bStringValue ? .doubleValue(aDoubleValue)\
    \ : .stringValue(bStringValue)\n        }\n    case let .stringValue(aStringValue):\n\
    \        switch b as? Value {\n        case let .intValue(bIntValue):\n      \
    \      return .stringValue(aStringValue) > bIntValue ? .stringValue(aStringValue)\
    \ : .intValue(bIntValue)\n        case let .doubleValue(bDoubleValue):\n     \
    \       return .stringValue(aStringValue) > bDoubleValue ? .stringValue(aStringValue)\
    \ : .doubleValue(bDoubleValue)\n        case let .stringValue(bStringValue):\n\
    \            return .stringValue(aStringValue) > bStringValue ? .stringValue(aStringValue)\
    \ : .stringValue(bStringValue)\n        }\n    }\n    return nil", "    switch\
    \ a as? ValueType {\n    case .intValue:\n        switch b as? ValueType {\n \
    \       case .intValue:\n            return a.intValue > b.intValue\n        case\
    \ .doubleValue:\n            return a.doubleValue > b.doubleValue\n        case\
    \ .stringValue:\n            return a.stringValue > b.stringValue\n        }\n\
    \    case .doubleValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.doubleValue > b.intValue\n        case .doubleValue:\n \
    \           return a.doubleValue > b.doubleValue\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue\n        }\n    case .stringValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.stringValue > b.intValue\n        case .doubleValue:\n            return a.stringValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    }\n    return nil", "    switch a as! Value\
    \ {\n    case .intValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b as! Value {\n        case .intValue(_):\n            return\
    \ b\n        case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ as! Value {\n        case .intValue(_):\n            return a\n        case\
    \ .doubleValue(_):\n            return b\n        case .stringValue(_):\n    \
    \        return a\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type to determine which case to return\n    case .intValue(_):\n        return\
    \ b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a { \n    case .intValue(_):\n\
    \        switch b { \n        case .intValue(_):\n            return a\n     \
    \   case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { \n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .stringValue(_):\n        switch b { \n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    }\n    return\
    \ nil", "    switch a { // TODO: switch on type\n    case .intValue(_):\n    \
    \    return .intValue(a.intValue > b.intValue)\n    case .doubleValue(_):\n  \
    \      return .doubleValue(a.doubleValue > b.doubleValue)\n    case .stringValue(_):\n\
    \        return .stringValue(a.stringValue > b.stringValue)\n    }\n    return\
    \ nil", "    switch a as? Value {\n    case let .intValue(aIntValue):\n      \
    \  switch b as? Value {\n        case let .intValue(bIntValue):\n            return\
    \ aIntValue > bIntValue ? .intValue(aIntValue) : .intValue(bIntValue)\n      \
    \  case let .doubleValue(bDoubleValue):\n            return .doubleValue(aIntValue)\
    \ > bDoubleValue ? .intValue(aIntValue) : .doubleValue(bDoubleValue)\n       \
    \ case let .stringValue(bStringValue):\n            return .stringValue(aIntValue)\
    \ > bStringValue ? .intValue(aIntValue) : .stringValue(bStringValue)\n       \
    \ }\n    case let .doubleValue(aDoubleValue):\n        switch b as? Value {\n\
    \        case let .intValue(bIntValue):\n            return .doubleValue(aDoubleValue)\
    \ > bIntValue ? .doubleValue(aDoubleValue) : .intValue(bIntValue)\n        case\
    \ let .doubleValue(bDoubleValue):\n            return .doubleValue(aDoubleValue)\
    \ > bDoubleValue ? .doubleValue(aDoubleValue) : .doubleValue(bDoubleValue)\n \
    \       case let .stringValue(bStringValue):\n            return .stringValue(aDoubleValue)\
    \ > bStringValue ? .doubleValue(aDoubleValue) : .stringValue(bStringValue)\n \
    \       }\n    case let .stringValue(aStringValue):\n        switch b as? Value\
    \ {\n        case let .intValue(bIntValue):\n            return .stringValue(aStringValue)\
    \ > bIntValue ? .stringValue(aStringValue) : .intValue(bIntValue)\n        case\
    \ let .doubleValue(bDoubleValue):\n            return .stringValue(aStringValue)\
    \ > bDoubleValue ? .stringValue(aStringValue) : .doubleValue(bDoubleValue)\n \
    \       case let .stringValue(bStringValue):\n            return .stringValue(aStringValue)\
    \ > bStringValue ? .stringValue(aStringValue) : .stringValue(bStringValue)\n \
    \       }\n    }\n    return nil", "    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    // Both are integers\n    if a.intValue()\
    \ > b.intValue() {\n        return a\n    }\n    \n    return b", "    switch\
    \ a { // a is bigger\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch b { // b is bigger\n    case .intValue(_):\n        return a\n   \
    \ case .doubleValue(_):\n        return a\n    case .stringValue(_):\n       \
    \ return a\n    }\n    \n    // If both are strings, compare them lexicographically\n\
    \    if let aString = a.stringValue, bString = b.stringValue {\n        if aString\
    \ < bString {\n            return a\n        }\n        if aString > bString {\n\
    \            return b\n        }\n        return a\n    }\n    \n    // If both\
    \ are integers, compare them numerically\n    if let aInt = a.intValue, bInt =\
    \ b.intValue {\n        if aInt < bInt {\n            return a\n        }\n  \
    \      if aInt > bInt {\n            return b\n        }\n        return a\n \
    \   }\n    \n    // If both are doubles, compare them numerically\n    if let\
    \ aDouble = a.doubleValue, bDouble = b.doubleValue {\n        if aDouble < bDouble\
    \ {\n            return a\n        }\n        if aDouble > bDouble {\n       \
    \     return b\n        }\n        return a\n    }\n    \n    // If both are strings,\
    \ compare them lexicographically\n    if let aString = a.stringValue, bString\
    \ = b.stringValue {\n        if aString < bString {\n            return a\n  \
    \      }\n        if aString > bString {\n            return b\n        }\n  \
    \      return a\n    }\n    \n    // If both are strings, compare them lexicographically\n\
    \    if let aString = a.stringValue, bString = b.stringValue {\n        if aString\
    \ < bString {\n            return a\n        }\n        if aString > bString {\n\
    \            return b\n        }\n        return a\n    }\n    \n    // If both\
    \ are strings, compare them lexicographically\n    if let aString = a.stringValue,\
    \ bString = b.stringValue {\n        if aString < bString {\n            return\
    \ a\n        }\n        if aString > bString {\n            return b\n       \
    \ }\n        return a\n    }\n    \n    // If both are strings, compare them lexicographically\n\
    \    if let aString = a.stringValue, bString = b.stringValue {\n        if aString\
    \ < bString {\n            return a\n        }\n        if aString > bString {\n\
    \            return b\n        }\n        return a\n    }\n    \n    // If both\
    \ are strings, ", "    switch a { \n    case .intValue(_):\n        switch b {\
    \ \n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .doubleValue(_):\n        switch b { \n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { \n        case .intValue(_):\n            return a\n     \
    \   case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil", "    switch a as? ValueType\
    \ {\n    case .intValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.intValue > b.intValue\n        case .doubleValue:\n    \
    \        return a.doubleValue > b.doubleValue\n        case .stringValue:\n  \
    \          return a.stringValue > b.stringValue\n        }\n    case .doubleValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.doubleValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.doubleValue\
    \ > b.stringValue\n        }\n    case .stringValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.stringValue > b.intValue\n\
    \        case .doubleValue:\n            return a.stringValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.stringValue > b.stringValue\n\
    \        }\n    }\n    return nil", "    switch a as? ValueType {\n    case .intValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.intValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    case .doubleValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.doubleValue > b.intValue\n\
    \        case .doubleValue:\n            return a.doubleValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.doubleValue > b.stringValue\n\
    \        }\n    case .stringValue:\n        switch b as? ValueType {\n       \
    \ case .intValue:\n            return a.stringValue > b.intValue\n        case\
    \ .doubleValue:\n            return a.stringValue > b.doubleValue\n        case\
    \ .stringValue:\n            return a.stringValue > b.stringValue\n        }\n\
    \    }\n    return nil", "    switch a { \n    case .intValue(_):\n        switch\
    \ b { \n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .doubleValue(_):\n        switch b { \n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { \n        case .intValue(_):\n            return a\n     \
    \   case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on a's type\n    case .intValue:\n        switch b { // Switch on b's type\n\
    \        case .intValue:\n            return .intValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    case .doubleValue:\n        switch b { // Switch\
    \ on b's type\n        case .intValue:\n            return .doubleValue\n    \
    \    case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    case .stringValue:\n        switch\
    \ b { // Switch on b's type\n        case .intValue:\n            return .stringValue\n\
    \        case .doubleValue:\n            return .stringValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a { // a is larger\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch b { // b is larger\n    case .intValue(_):\n        return a\n   \
    \ case .doubleValue(_):\n        return a\n    case .stringValue(_):\n       \
    \ return a\n    }\n    \n    return nil // equal", "    switch a { // Switch on\
    \ type to determine which case to return\n    case .intValue(_):\n        switch\
    \ b { // Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    return nil", "    switch a as! Value {\n \
    \   case .intValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b as! Value {\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ as! Value {\n        case .intValue(_):\n            return a\n        case\
    \ .doubleValue(_):\n            return b\n        case .stringValue(_):\n    \
    \        return b\n        }\n    }\n    return nil", "    switch a as! Value,\
    \ b as! Value {\n    case .intValue(_), .doubleValue(_), .stringValue(_):\n  \
    \      return a\n    case .intValue(_), .doubleValue(_):\n        return b\n \
    \   case .stringValue(_), .intValue(_), .doubleValue(_):\n        return a\n \
    \   case .stringValue(_), .doubleValue(_):\n        return b\n    case .intValue(_),\
    \ .stringValue(_):\n        return a\n    case .doubleValue(_), .stringValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a as? ValueType {\n   \
    \ case .intValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.intValue > b.intValue\n        case .doubleValue:\n    \
    \        return a.doubleValue > b.doubleValue\n        case .stringValue:\n  \
    \          return a.stringValue > b.stringValue\n        }\n    case .doubleValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.doubleValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.doubleValue\
    \ > b.stringValue\n        }\n    case .stringValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.stringValue > b.intValue\n\
    \        case .doubleValue:\n            return a.stringValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.stringValue > b.stringValue\n\
    \        }\n    }\n    return nil", "    switch a { // Switch on type\n    case\
    \ .intValue:\n        switch b { // Switch on type\n        case .intValue:\n\
    \            return .intValue\n        case .doubleValue:\n            return\
    \ .doubleValue\n        case .stringValue:\n            return .stringValue\n\
    \        }\n    case .doubleValue:\n        switch b { // Switch on type\n   \
    \     case .intValue:\n            return .doubleValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    case .stringValue:\n        switch b { // Switch\
    \ on type\n        case .intValue:\n            return .stringValue\n        case\
    \ .doubleValue:\n            return .stringValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a { \n    case .intValue(_):\n        switch b { \n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { \n        case .intValue(_):\n            return b\n     \
    \   case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { \n        case .intValue(_):\n            return b\n        case .doubleValue(_):\n\
    \            return a\n        case .stringValue(_):\n            return a\n \
    \       }\n    }\n    return nil", "    switch a as! Value, b as! Value {\n  \
    \  case .intValue(_), .doubleValue(_), .stringValue(_):\n        return a\n  \
    \  case .intValue(_), .doubleValue(_):\n        return b\n    case .stringValue(_),\
    \ .doubleValue(_):\n        return a\n    case .stringValue(_), .intValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a { // case is more efficient\
    \ than a switch statement\n    case .intValue(_):\n        switch b { // case\
    \ is more efficient than a switch statement\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // case is more efficient than a switch statement\n      \
    \  case .intValue(_):\n            return a\n        case .doubleValue(_):\n \
    \           return b\n        case .stringValue(_):\n            return b\n  \
    \      }\n    case .stringValue(_):\n        switch b { // case is more efficient\
    \ than a switch statement\n        case .intValue(_):\n            return a\n\
    \        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil", "    switch a { \n \
    \   case .intValue(_):\n        switch b { \n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { \n        case .intValue(_):\n            return a\n     \
    \   case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { \n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    }\n    return nil", "    switch a as! Value {\n    case .intValue(_):\n\
    \        switch b as! Value {\n        case .intValue(_):\n            return\
    \ .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n        \
    \    return .doubleValue(a.doubleValue > b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        }\n \
    \   case .doubleValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b as!\
    \ Value {\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a as? ValueType\
    \ {\n    case .intValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.intValue > b.intValue\n        case .doubleValue:\n    \
    \        return a.doubleValue > b.doubleValue\n        case .stringValue:\n  \
    \          return a.stringValue > b.stringValue\n        }\n    case .doubleValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.doubleValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.doubleValue\
    \ > b.stringValue\n        }\n    case .stringValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.stringValue > b.intValue\n\
    \        case .doubleValue:\n            return a.stringValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.stringValue > b.stringValue\n\
    \        }\n    }\n    return nil", "    switch a { // Switch on a.\n    case\
    \ .intValue(_):\n        switch b { // Switch on b.\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on b.\n  \
    \      case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b.\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Compare\
    \ two values\n    case .intValue(_):\n        switch b { // Compare two ints\n\
    \        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .doubleValue(_):\n        switch b { // Compare two doubles\n\
    \        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .stringValue(_):\n        switch b { // Compare two strings\n\
    \        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    }\n    return nil", "    switch a { // TODO: Use a switch statement\
    \ to handle all cases\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    return\
    \ nil", "    switch a as? Value {\n    case let .intValue(aIntValue):\n      \
    \  switch b as? Value {\n        case let .intValue(bIntValue):\n            return\
    \ aIntValue > bIntValue ? .intValue(aIntValue) : .intValue(bIntValue)\n      \
    \  case let .doubleValue(bDoubleValue):\n            return .doubleValue(aIntValue)\
    \ > bDoubleValue ? .intValue(aIntValue) : .doubleValue(bDoubleValue)\n       \
    \ case let .stringValue(bStringValue):\n            return .stringValue(aIntValue)\
    \ > bStringValue ? .intValue(aIntValue) : .stringValue(bStringValue)\n       \
    \ }\n    case let .doubleValue(aDoubleValue):\n        switch b as? Value {\n\
    \        case let .intValue(bIntValue):\n            return .doubleValue(aDoubleValue)\
    \ > bIntValue ? .doubleValue(aDoubleValue) : .intValue(bIntValue)\n        case\
    \ let .doubleValue(bDoubleValue):\n            return aDoubleValue > bDoubleValue\
    \ ? .doubleValue(aDoubleValue) : .doubleValue(bDoubleValue)\n        case let\
    \ .stringValue(bStringValue):\n            return .stringValue(aDoubleValue) >\
    \ bStringValue ? .doubleValue(aDoubleValue) : .stringValue(bStringValue)\n   \
    \     }\n    case let .stringValue(aStringValue):\n        switch b as? Value\
    \ {\n        case let .intValue(bIntValue):\n            return .stringValue(aStringValue)\
    \ > bIntValue ? .stringValue(aStringValue) : .intValue(bIntValue)\n        case\
    \ let .doubleValue(bDoubleValue):\n            return .stringValue(aStringValue)\
    \ > bDoubleValue ? .stringValue(aStringValue) : .doubleValue(bDoubleValue)\n \
    \       case let .stringValue(bStringValue):\n            return aStringValue\
    \ > bStringValue ? .stringValue(aStringValue) : .stringValue(bStringValue)\n \
    \       }\n    }\n    return nil", "    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    return nil", "    switch a as? ValueType {\n\
    \    case .intValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.intValue > b.intValue\n        case .doubleValue:\n    \
    \        return a.doubleValue > b.doubleValue\n        case .stringValue:\n  \
    \          return a.stringValue > b.stringValue\n        }\n    case .doubleValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.doubleValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.doubleValue\
    \ > b.stringValue\n        }\n    case .stringValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.stringValue > b.intValue\n\
    \        case .doubleValue:\n            return a.stringValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.stringValue > b.stringValue\n\
    \        }\n    }\n    return nil", "    switch a { // case intValue:\n    case\
    \ .intValue:\n        switch b { // case intValue:\n        case .intValue:\n\
    \            return a\n        case .doubleValue:\n            return b\n    \
    \    case .stringValue:\n            return b\n        }\n    case .doubleValue:\n\
    \        switch b { // case doubleValue:\n        case .intValue:\n          \
    \  return a\n        case .doubleValue:\n            return b\n        case .stringValue:\n\
    \            return b\n        }\n    case .stringValue:\n        switch b { //\
    \ case stringValue:\n        case .intValue:\n            return a\n        case\
    \ .doubleValue:\n            return b\n        case .stringValue:\n          \
    \  return b\n        }\n    }\n    return nil", "    switch a { // Switch on the\
    \ type of a\n    case .intValue(_):\n        switch b { // Switch on the type\
    \ of b\n        case .intValue(_):\n            return .intValue(a.intValue >\
    \ b.intValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on the type of b\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on the type of b\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { \n    case\
    \ .intValue(_):\n        switch b { \n        case .intValue(_):\n           \
    \ return a\n        case .doubleValue(_):\n            return b\n        case\
    \ .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { \n        case .intValue(_):\n            return a\n     \
    \   case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { \n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    }\n    return nil", "    switch a { // Switch on a's type\n   \
    \ case .intValue:\n        switch b { // Switch on b's type\n        case .intValue:\n\
    \            return .intValue\n        case .doubleValue:\n            return\
    \ .doubleValue\n        case .stringValue:\n            return .stringValue\n\
    \        }\n    case .doubleValue:\n        switch b { // Switch on b's type\n\
    \        case .intValue:\n            return .intValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    case .stringValue:\n        switch b { // Switch\
    \ on b's type\n        case .intValue:\n            return .intValue\n       \
    \ case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a as! Value {\n    case .intValue(_):\n        switch b as! Value {\n      \
    \  case .intValue(_):\n            return a\n        case .doubleValue(_):\n \
    \           return b\n        case .stringValue(_):\n            return b\n  \
    \      }\n    case .doubleValue(_):\n        switch b as! Value {\n        case\
    \ .intValue(_):\n            return a\n        case .doubleValue(_):\n       \
    \     return b\n        case .stringValue(_):\n            return b\n        }\n\
    \    case .stringValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    }\n    return\
    \ nil", "    switch a { // TODO: Use a switch statement to improve performance\n\
    \    case .intValue(_):\n        return b\n    case .doubleValue(_):\n       \
    \ return b\n    case .stringValue(_):\n        return b\n    }\n    return nil",
  "    switch a { // a is larger\n    case .intValue(_):\n        return b\n    case\
    \ .doubleValue(_):\n        return b\n    case .stringValue(_):\n        return\
    \ b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n    \
    \    return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    return nil", "    switch a as? Value {\n \
    \   case let .intValue(aInt):\n        switch b as? Value {\n        case let\
    \ .intValue(bInt):\n            return aInt > bInt ? .intValue(aInt) : .intValue(bInt)\n\
    \        case let .doubleValue(bDouble):\n            return .doubleValue(aInt)\
    \ > bDouble ? .intValue(aInt) : .doubleValue(bDouble)\n        case let .stringValue(bString):\n\
    \            return .stringValue(aInt) > bString ? .intValue(aInt) : .stringValue(bString)\n\
    \        }\n    case let .doubleValue(aDouble):\n        switch b as? Value {\n\
    \        case let .intValue(bInt):\n            return .doubleValue(aDouble) >\
    \ bInt ? .doubleValue(aDouble) : .intValue(bInt)\n        case let .doubleValue(bDouble):\n\
    \            return aDouble > bDouble ? .doubleValue(aDouble) : .doubleValue(bDouble)\n\
    \        case let .stringValue(bString):\n            return .stringValue(aDouble)\
    \ > bString ? .doubleValue(aDouble) : .stringValue(bString)\n        }\n    case\
    \ let .stringValue(aString):\n        switch b as? Value {\n        case let .intValue(bInt):\n\
    \            return .stringValue(aString) > bInt ? .stringValue(aString) : .intValue(bInt)\n\
    \        case let .doubleValue(bDouble):\n            return aString > bDouble\
    \ ? .stringValue(aString) : .doubleValue(bDouble)\n        case let .stringValue(bString):\n\
    \            return aString > bString ? .stringValue(aString) : .stringValue(bString)\n\
    \        }\n    }\n    return nil", "    switch a { // Switch on a's type\n  \
    \  case .intValue(_):\n        switch b { // Switch on b's type\n        case\
    \ .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n     \
    \   case .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Compare\
    \ two ints\n    case .intValue(_):\n        return .intValue(b) // Compare two\
    \ ints\n    case .doubleValue(_):\n        return .doubleValue(b) // Compare two\
    \ doubles\n    case .stringValue(_):\n        return .stringValue(b) // Compare\
    \ two strings\n    }\n    return nil // If they're not the same type, return nil",
  "    switch a { // TODO: Switch to switch case for efficiency\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a { // Switch on type to\
    \ determine which case to use\n    case .intValue(_):\n        switch b { // Switch\
    \ on type to determine which case to use\n        case .intValue(_):\n       \
    \     return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to use\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which case to use\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a as? ValueType\
    \ {\n    case .intValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return .intValue\n        case .doubleValue:\n            return\
    \ .doubleValue\n        case .stringValue:\n            return .stringValue\n\
    \        }\n    case .doubleValue:\n        switch b as? ValueType {\n       \
    \ case .intValue:\n            return .intValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    case .stringValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return .intValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    }\n    return nil", "    switch a as? Value, b\
    \ as? Value {\n    case let .intValue(aInt), let .intValue(bInt):\n        return\
    \ aInt > bInt ? .intValue(aInt) : .intValue(bInt)\n    case let .doubleValue(aDouble),\
    \ let .doubleValue(bDouble):\n        return aDouble > bDouble ? .doubleValue(aDouble)\
    \ : .doubleValue(bDouble)\n    case let .stringValue(aString), let .stringValue(bString):\n\
    \        return aString > bString ? .stringValue(aString) : .stringValue(bString)\n\
    \    }\n    return nil", "    switch a { // Switch on type to determine which\
    \ comparison to use\n    case .intValue(_):\n        switch b { // Switch on type\
    \ to determine which comparison to use\n        case .intValue(_):\n         \
    \   return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which comparison to use\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b { // Switch on type to\
    \ determine which comparison to use\n        case .intValue(_):\n            return\
    \ .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a { // Switch on type to determine\
    \ which case to return\n    case .intValue(_):\n        switch b { // Switch on\
    \ type to determine which case to return\n        case .intValue(_):\n       \
    \     return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a as? ValueType {\n    case .intValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.intValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    case .doubleValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.doubleValue > b.intValue\n\
    \        case .doubleValue:\n            return a.doubleValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.doubleValue > b.stringValue\n\
    \        }\n    case .stringValue:\n        switch b as? ValueType {\n       \
    \ case .intValue:\n            return a.stringValue > b.intValue\n        case\
    \ .doubleValue:\n            return a.stringValue > b.doubleValue\n        case\
    \ .stringValue:\n            return a.stringValue > b.stringValue\n        }\n\
    \    }\n    return nil", "    switch a { // case intValue:\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // case intValue:\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    switch a { // case doubleValue:\n    case\
    \ .intValue(_):\n        return b\n    case .doubleValue(_):\n        return a\n\
    \    case .stringValue(_):\n        return a\n    }\n    \n    switch b { // case\
    \ doubleValue:\n    case .intValue(_):\n        return a\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch a { // case stringValue:\n    case .intValue(_):\n        return b\n\
    \    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n    \
    \    return a\n    }\n    \n    switch b { // case stringValue:\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    return nil", "    switch a { // a is larger\n\
    \    case .intValue(_):\n        return b\n    case .doubleValue(_):\n       \
    \ return b\n    case .stringValue(_):\n        return b\n    }\n    \n    switch\
    \ b { // b is larger\n    case .intValue(_):\n        return a\n    case .doubleValue(_):\n\
    \        return a\n    case .stringValue(_):\n        return a\n    }\n    \n\
    \    return nil", "    switch a { // Switch on type to determine which case to\
    \ return\n    case .intValue(_):\n        switch b { // Switch on type to determine\
    \ which case to return\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a as? Value\
    \ {\n    case let intValue(aInt):\n        switch b as? Value {\n        case\
    \ let intValue(bInt):\n            return intValue > bInt ? intValue : bInt\n\
    \        case let doubleValue(bDouble):\n            return intValue > bDouble\
    \ ? intValue : bDouble\n        case let stringValue(bString):\n            return\
    \ intValue > bString ? intValue : bString\n        }\n    case let doubleValue(aDouble):\n\
    \        switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ aDouble > bInt ? aDouble : bInt\n        case let doubleValue(bDouble):\n  \
    \          return aDouble > bDouble ? aDouble : bDouble\n        case let stringValue(bString):\n\
    \            return aDouble > bString ? aDouble : bString\n        }\n    case\
    \ let stringValue(aString):\n        switch b as? Value {\n        case let intValue(bInt):\n\
    \            return aString > bInt ? aString : bInt\n        case let doubleValue(bDouble):\n\
    \            return aString > bDouble ? aString : bDouble\n        case let stringValue(bString):\n\
    \            return aString > bString ? aString : bString\n        }\n    }\n\
    \    return nil", "    switch a as? Value {\n    case let intValue(aInt):\n  \
    \      switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ intValue > bInt ? intValue : bInt\n        case let doubleValue(bDouble):\n\
    \            return intValue > bDouble ? intValue : bDouble\n        case let\
    \ stringValue(bString):\n            return intValue > bString ? intValue : bString\n\
    \        }\n    case let doubleValue(aDouble):\n        switch b as? Value {\n\
    \        case let intValue(bInt):\n            return aDouble > bInt ? aDouble\
    \ : bInt\n        case let doubleValue(bDouble):\n            return aDouble >\
    \ bDouble ? aDouble : bDouble\n        case let stringValue(bString):\n      \
    \      return aDouble > bString ? aDouble : bString\n        }\n    case let stringValue(aString):\n\
    \        switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ aString > bInt ? aString : bInt\n        case let doubleValue(bDouble):\n  \
    \          return aString > bDouble ? aString : bDouble\n        case let stringValue(bString):\n\
    \            return aString > bString ? aString : bString\n        }\n    }\n\
    \    return nil", "    switch a { // Switch on type to determine which comparison\
    \ to use\n    case .intValue(_):\n        switch b { // Switch on type to determine\
    \ which comparison to use\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // case\
    \ Int\n    case .intValue(_):\n        switch b { // case Int\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // case Double\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // case String\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type\n    case .intValue:\n        switch b { // Switch on type\n       \
    \ case .intValue:\n            return a.intValue > b.intValue\n        case .doubleValue:\n\
    \            return a.doubleValue > b.doubleValue\n        case .stringValue:\n\
    \            return a.stringValue > b.stringValue\n        }\n    case .doubleValue:\n\
    \        switch b { // Switch on type\n        case .intValue:\n            return\
    \ a.doubleValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.doubleValue\
    \ > b.stringValue\n        }\n    case .stringValue:\n        switch b { // Switch\
    \ on type\n        case .intValue:\n            return a.stringValue > b.intValue\n\
    \        case .doubleValue:\n            return a.stringValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.stringValue > b.stringValue\n\
    \        }\n    }\n    return nil", "    switch a { // Switch on type to determine\
    \ which comparison to use.\n    case .intValue(_):\n        switch b { // Switch\
    \ on type to determine which comparison to use.\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which comparison to use.\n        case .intValue(_):\n           \
    \ return .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b { // Switch on type to\
    \ determine which comparison to use.\n        case .intValue(_):\n           \
    \ return .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a { // Switch on type to determine\
    \ which case to execute\n    case .intValue(_):\n        switch b { // Switch\
    \ on type to determine which case to execute\n        case .intValue(_):\n   \
    \         return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to execute\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b { // Switch on type to\
    \ determine which case to execute\n        case .intValue(_):\n            return\
    \ .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a { // a is smaller\n    case\
    \ .intValue(_):\n        return b\n    case .doubleValue(_):\n        return b\n\
    \    case .stringValue(_):\n        return b\n    }\n    \n    switch b { // b\
    \ is smaller\n    case .intValue(_):\n        return a\n    case .doubleValue(_):\n\
    \        return a\n    case .stringValue(_):\n        return a\n    }\n    \n\
    \    // a and b are equal\n    return nil", "    switch a { // a is larger\n \
    \   case .intValue(_):\n        return b\n    case .doubleValue(_):\n        return\
    \ b\n    case .stringValue(_):\n        return b\n    }\n    \n    switch b {\
    \ // b is larger\n    case .intValue(_):\n        return a\n    case .doubleValue(_):\n\
    \        return a\n    case .stringValue(_):\n        return a\n    }\n    \n\
    \    return nil", "    switch a as? ValueType {\n    case .intValue:\n       \
    \ switch b as? ValueType {\n        case .intValue:\n            return a.intValue\
    \ > b.intValue\n        case .doubleValue:\n            return a.doubleValue >\
    \ b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    case .doubleValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.doubleValue > b.intValue\n\
    \        case .doubleValue:\n            return a.doubleValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.doubleValue > b.stringValue\n\
    \        }\n    case .stringValue:\n        switch b as? ValueType {\n       \
    \ case .intValue:\n            return a.stringValue > b.intValue\n        case\
    \ .doubleValue:\n            return a.stringValue > b.doubleValue\n        case\
    \ .stringValue:\n            return a.stringValue > b.stringValue\n        }\n\
    \    }\n    return nil", "    switch a as? Value {\n    case let .intValue(aInt):\n\
    \        switch b as? Value {\n        case let .intValue(bInt):\n           \
    \ return aInt > bInt ? .intValue(aInt) : .intValue(bInt)\n        case let .doubleValue(bDouble):\n\
    \            return .doubleValue(aInt) > bDouble ? .doubleValue(aInt) : .doubleValue(bDouble)\n\
    \        case let .stringValue(bString):\n            return .stringValue(aInt)\
    \ > bString ? .stringValue(aInt) : .stringValue(bString)\n        }\n    case\
    \ let .doubleValue(aDouble):\n        switch b as? Value {\n        case let .intValue(bInt):\n\
    \            return .doubleValue(aDouble) > bInt ? .doubleValue(aDouble) : .doubleValue(bInt)\n\
    \        case let .doubleValue(bDouble):\n            return .doubleValue(aDouble)\
    \ > bDouble ? .doubleValue(aDouble) : .doubleValue(bDouble)\n        case let\
    \ .stringValue(bString):\n            return .doubleValue(aDouble) > bString ?\
    \ .doubleValue(aDouble) : .doubleValue(bString)\n        }\n    case let .stringValue(aString):\n\
    \        switch b as? Value {\n        case let .intValue(bInt):\n           \
    \ return .stringValue(aString) > bInt ? .stringValue(aString) : .stringValue(bInt)\n\
    \        case let .doubleValue(bDouble):\n            return .stringValue(aString)\
    \ > bDouble ? .stringValue(aString) : .stringValue(bDouble)\n        case let\
    \ .stringValue(bString):\n            return .stringValue(aString) > bString ?\
    \ .stringValue(aString) : .stringValue(bString)\n        }\n    }\n    return\
    \ nil", "    switch a { // TODO: use switch statement\n    case .intValue(_):\n\
    \        switch b { // TODO: use switch statement\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // TODO: use switch statement\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // TODO: use switch statement\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    }\n    return\
    \ nil", "    switch a { case .intValue(aInt), .doubleValue(aDouble), .stringValue(aString):\n\
    \        switch b { case .intValue(bInt), .doubleValue(bDouble), .stringValue(bString):\n\
    \            return aInt > bInt ? .intValue(aInt) : aDouble > bDouble ? .doubleValue(aDouble)\
    \ : aString > bString ? .stringValue(aString) : nil\n        }\n    }\n    return\
    \ nil", "    switch a { // TODO: switch on type\n    case .intValue(_):\n    \
    \    switch b { // TODO: switch on type\n        case .intValue(_):\n        \
    \    return a\n        case .doubleValue(_):\n            return b\n        case\
    \ .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // TODO: switch on type\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // TODO: switch on type\n        case .intValue(_):\n    \
    \        return a\n        case .doubleValue(_):\n            return b\n     \
    \   case .stringValue(_):\n            return b\n        }\n    }\n    return\
    \ nil", "    switch a { // a is larger\n    case .intValue(_):\n        return\
    \ b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    return nil", "    switch a { // TODO: use\
    \ switch with case for efficiency\n    case .intValue(_):\n        switch b {\
    \ // TODO: use switch with case for efficiency\n        case .intValue(_):\n \
    \           return .intValue(a.intValue > b.intValue ? a.intValue : b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ TODO: use switch with case for efficiency\n        case .intValue(_):\n    \
    \        return .doubleValue(a.doubleValue > b.intValue ? a.doubleValue : b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .stringValue(_):\n\
    \        switch b { // TODO: use switch with case for efficiency\n        case\
    \ .intValue(_):\n            return .stringValue(a.stringValue > b.intValue ?\
    \ a.stringValue : b.intValue)\n        case .doubleValue(_):\n            return\
    \ .stringValue(a.stringValue > b.doubleValue ? a.stringValue : b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil", "    switch a as? Value, b as? Value {\n    case let .intValue(aInt),\
    \ let .intValue(bInt):\n        if aInt > bInt {\n            return a\n     \
    \   }\n        return b\n    case let .doubleValue(aDouble), let .doubleValue(bDouble):\n\
    \        if aDouble > bDouble {\n            return a\n        }\n        return\
    \ b\n    case let .stringValue(aString), let .stringValue(bString):\n        if\
    \ aString > bString {\n            return a\n        }\n        return b\n   \
    \ default:\n        return nil\n    }", "    switch a { // Switch on type to determine\
    \ which case to execute\n    case .intValue(_):\n        switch b { // Switch\
    \ on type to determine which case to execute\n        case .intValue(_):\n   \
    \         return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to execute\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b { // Switch on type to\
    \ determine which case to execute\n        case .intValue(_):\n            return\
    \ .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a { // Switch on type to determine\
    \ which comparison to use\n    case .intValue(_):\n        switch b { // Switch\
    \ on type to determine which comparison to use\n        case .intValue(_):\n \
    \           return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which comparison to use\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // case\
    \ intValue:\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch b { // case intValue:\n    case .intValue(_):\n        return a\n\
    \    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n    \
    \    return a\n    }\n    \n    return nil", "    switch a as? ValueType {\n \
    \   case .intValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.intValue > b.intValue\n        case .doubleValue:\n    \
    \        return a.doubleValue > b.doubleValue\n        case .stringValue:\n  \
    \          return a.stringValue > b.stringValue\n        }\n    case .doubleValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.doubleValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    case .stringValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.stringValue > b.intValue\n\
    \        case .doubleValue:\n            return a.stringValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.stringValue > b.stringValue\n\
    \        }\n    }\n    return nil", "    switch a as? Value,\n           b as?\
    \ Value {\n    case let .intValue(aInt),\n         let .intValue(bInt),\n    \
    \     let .doubleValue(aDouble),\n         let .doubleValue(bDouble),\n      \
    \   let .stringValue(aString),\n         let .stringValue(bString):\n        if\
    \ aInt == bInt {\n            return aDouble\n        } else if aDouble == bDouble\
    \ {\n            return aString\n        } else {\n            return nil\n  \
    \      }\n    case let .doubleValue(aDouble),\n         let .doubleValue(bDouble):\n\
    \        if aDouble == bDouble {\n            return aDouble\n        } else {\n\
    \            return nil\n        }\n    case let .stringValue(aString),\n    \
    \     let .stringValue(bString):\n        if aString == bString {\n          \
    \  return aString\n        } else {\n            return nil\n        }\n    default:\n\
    \        return nil\n    }", "    switch a { // Switch on the type of the first\
    \ value\n    case .intValue(_):\n        switch b { // Switch on the type of the\
    \ second value\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on the type of the second value\n        case .intValue(_):\n       \
    \     return .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on the type of the second value\n        case .intValue(_):\n       \
    \     return .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a { // case intValue:\n    case\
    \ .intValue(_):\n        switch b { // case intValue:\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b { // case doubleValue:\n        case .intValue(_):\n       \
    \     return b\n        case .doubleValue(_):\n            return a\n        case\
    \ .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // case stringValue:\n        case .intValue(_):\n       \
    \     return a\n        case .doubleValue(_):\n            return b\n        case\
    \ .stringValue(_):\n            return a\n        }\n    }\n    return nil", " \
    \   switch a { // TODO: switch on type\n    case .intValue(_):\n        switch\
    \ b { // TODO: switch on type\n        case .intValue(_):\n            return\
    \ .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n        \
    \    return .doubleValue(a.doubleValue > b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        }\n \
    \   case .doubleValue(_):\n        switch b { // TODO: switch on type\n      \
    \  case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ TODO: switch on type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type to determine which case to return\n    case .intValue(_):\n        switch\
    \ b { // Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Compare\
    \ two values\n    case .intValue(_):\n        switch b { // Compare two integers\n\
    \        case .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Compare two doubles\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two strings\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type\n    case .intValue(_):\n        switch b { // Switch on type\n    \
    \    case .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // a is\
    \ larger\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch b { // b is larger\n    case .intValue(_):\n        return a\n   \
    \ case .doubleValue(_):\n        return a\n    case .stringValue(_):\n       \
    \ return a\n    }\n    \n    return nil", "    switch a as? Value {\n    case\
    \ let intValue(aInt):\n        switch b as? Value {\n        case let intValue(bInt):\n\
    \            return intValue > bInt ? intValue : bInt\n        case let doubleValue(bDouble):\n\
    \            return intValue > bDouble ? intValue : bDouble\n        case let\
    \ stringValue(bString):\n            return intValue > bString ? intValue : bString\n\
    \        }\n    case let doubleValue(aDouble):\n        switch b as? Value {\n\
    \        case let intValue(bInt):\n            return aDouble > bInt ? aDouble\
    \ : bInt\n        case let doubleValue(bDouble):\n            return aDouble >\
    \ bDouble ? aDouble : bDouble\n        case let stringValue(bString):\n      \
    \      return aDouble > bString ? aDouble : bString\n        }\n    case let stringValue(aString):\n\
    \        switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ aString > bInt ? aString : bInt\n        case let doubleValue(bDouble):\n  \
    \          return aString > bDouble ? aString : bDouble\n        case let stringValue(bString):\n\
    \            return aString > bString ? aString : bString\n        }\n    }\n\
    \    return nil", "    switch a as! Value {\n    case .intValue(_):\n        switch\
    \ b as! Value {\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b as!\
    \ Value {\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b as!\
    \ Value {\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Compare\
    \ two values\n    case .intValue(_):\n        switch b { // Compare two integers\n\
    \        case .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Compare two doubles\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two strings\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { case .intValue(_):\n\
    \        switch b { case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return a\n \
    \       }\n    case .doubleValue(_):\n        switch b { case .intValue(_):\n\
    \            return b\n        case .doubleValue(_):\n            return a\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return a\n \
    \       }\n    }\n    return nil", "    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    // If both are strings, compare them lexicographically\n\
    \    if a.stringValue < b.stringValue {\n        return a\n    }\n    \n    return\
    \ b", "    switch a { // case intValue:\n    case .intValue(_):\n        return\
    \ b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // case intValue:\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    switch a { // case doubleValue:\n    case\
    \ .intValue(_):\n        return b\n    case .doubleValue(_):\n        return a\n\
    \    case .stringValue(_):\n        return a\n    }\n    \n    switch b { // case\
    \ doubleValue:\n    case .intValue(_):\n        return a\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch a { // case stringValue:\n    case .intValue(_):\n        return b\n\
    \    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n    \
    \    return a\n    }\n    \n    switch b { // case stringValue:\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    return nil", "    switch a { // TODO: Switch\
    \ to enum\n    case .intValue(_):\n        switch b { // TODO: Switch to enum\n\
    \        case .intValue(_):\n            return .intValue(a.intValue > b.intValue\
    \ ? a.intValue : b.intValue)\n        case .doubleValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue : b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .doubleValue(_):\n\
    \        switch b { // TODO: Switch to enum\n        case .intValue(_):\n    \
    \        return .doubleValue(a.doubleValue > b.intValue ? a.doubleValue : b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue ? a.stringValue\
    \ : b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ TODO: Switch to enum\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.intValue ? a.stringValue : b.intValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.doubleValue ? a.stringValue\
    \ : b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil", "    switch a as? Int {\n    case let b as Int:\n        return b\n  \
    \  case let b as Double:\n        return b\n    case let b as String:\n      \
    \  return b\n    default:\n        return nil\n    }", "    switch a { \n    case\
    \ .intValue(_):\n        switch b { \n        case .intValue(_):\n           \
    \ return a\n        case .doubleValue(_):\n            return b\n        case\
    \ .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { \n        case .intValue(_):\n            return a\n     \
    \   case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { \n        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    }\n    return nil", "    switch a { // case intValue:\n    case\
    \ .intValue:\n        switch b { // case intValue:\n        case .intValue:\n\
    \            return .intValue\n        case .doubleValue:\n            return\
    \ .doubleValue\n        case .stringValue:\n            return .stringValue\n\
    \        }\n    case .doubleValue:\n        switch b { // case doubleValue:\n\
    \        case .intValue:\n            return .doubleValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    case .stringValue:\n        switch b { // case\
    \ stringValue:\n        case .intValue:\n            return .stringValue\n   \
    \     case .doubleValue:\n            return .stringValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a as? Value {\n    case let .intValue(aInt):\n        switch b as? Value {\n\
    \        case let .intValue(bInt):\n            return aInt > bInt ? .intValue(aInt)\
    \ : .intValue(bInt)\n        case let .doubleValue(bDouble):\n            return\
    \ .doubleValue(bDouble)\n        case let .stringValue(bString):\n           \
    \ return .stringValue(bString)\n        }\n    case let .doubleValue(aDouble):\n\
    \        switch b as? Value {\n        case let .intValue(bInt):\n           \
    \ return .doubleValue(aDouble)\n        case let .doubleValue(bDouble):\n    \
    \        return bDouble > aDouble ? .doubleValue(aDouble) : .doubleValue(bDouble)\n\
    \        case let .stringValue(bString):\n            return .stringValue(bString)\n\
    \        }\n    case let .stringValue(aString):\n        switch b as? Value {\n\
    \        case let .intValue(bInt):\n            return .stringValue(aString)\n\
    \        case let .doubleValue(bDouble):\n            return .stringValue(aString)\n\
    \        case let .stringValue(bString):\n            return .stringValue(aString)\n\
    \        }\n    }\n    return nil", "    switch a { // a is larger\n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is larger\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    return nil", "    switch a { // a is larger\n\
    \    case .intValue(_):\n        return b\n    case .doubleValue(_):\n       \
    \ return b\n    case .stringValue(_):\n        return b\n    }\n    \n    switch\
    \ b { // b is larger\n    case .intValue(_):\n        return a\n    case .doubleValue(_):\n\
    \        return a\n    case .stringValue(_):\n        return a\n    }\n    \n\
    \    // both are strings\n    if a.stringValue < b.stringValue {\n        return\
    \ a\n    } else {\n        return b\n    }", "    switch a as! Value {\n    case\
    \ .intValue(_):\n        switch b as! Value {\n        case .intValue(_):\n  \
    \          return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b as! Value {\n        case\
    \ .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b as!\
    \ Value {\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // a is\
    \ smaller\n    case .intValue(_):\n        switch b { // b is smaller\n      \
    \  case .intValue(_):\n            return a\n        case .doubleValue(_):\n \
    \           return b\n        case .stringValue(_):\n            return b\n  \
    \      }\n    case .doubleValue(_):\n        switch b { // b is smaller\n    \
    \    case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .stringValue(_):\n        switch b { // b is smaller\n   \
    \     case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    }\n    return nil", "    switch a as? Value {\n    case .intValue:\n\
    \        switch b as? Value {\n        case .intValue:\n            return .intValue\n\
    \        case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    case .doubleValue:\n        switch\
    \ b as? Value {\n        case .intValue:\n            return .doubleValue\n  \
    \      case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    case .stringValue:\n        switch\
    \ b as? Value {\n        case .intValue:\n            return .stringValue\n  \
    \      case .doubleValue:\n            return .stringValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a { // a is larger\n    case .intValue(_):\n        switch b { // b is larger\n\
    \        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .doubleValue(_):\n        switch b { // b is larger\n    \
    \    case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .stringValue(_):\n        switch b { // b is larger\n    \
    \    case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    }\n    return nil", "    switch a { // Compare two values\n   \
    \ case .intValue(_):\n        switch b { // Compare two values\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two values\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two values\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type to determine which case to return\n    case .intValue(_):\n        switch\
    \ b { // Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a { \n    case .intValue(_):\n\
    \        return b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a { // Compare two values\n\
    \    case .intValue(_):\n        switch b { // Compare two ints\n        case\
    \ .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n     \
    \   case .doubleValue(_):\n            return .intValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .intValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Compare two doubles\n\
    \        case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .intValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .doubleValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare two strings\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .intValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // a is\
    \ bigger\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch b { // b is bigger\n    case .intValue(_):\n        return a\n   \
    \ case .doubleValue(_):\n        return a\n    case .stringValue(_):\n       \
    \ return a\n    }\n    \n    // If both are strings, compare them lexicographically\n\
    \    if let aString = a.stringValue, bString = b.stringValue {\n        if aString\
    \ < bString {\n            return a\n        }\n        if aString > bString {\n\
    \            return b\n        }\n        return a\n    }\n    \n    // If both\
    \ are integers, compare them numerically\n    if let aInt = a.intValue, bInt =\
    \ b.intValue {\n        if aInt < bInt {\n            return a\n        }\n  \
    \      if aInt > bInt {\n            return b\n        }\n        return a\n \
    \   }\n    \n    // If both are doubles, compare them numerically\n    if let\
    \ aDouble = a.doubleValue, bDouble = b.doubleValue {\n        if aDouble < bDouble\
    \ {\n            return a\n        }\n        if aDouble > bDouble {\n       \
    \     return b\n        }\n        return a\n    }\n    \n    // If both are strings,\
    \ compare them lexicographically\n    if let aString = a.stringValue, bString\
    \ = b.stringValue {\n        if aString < bString {\n            return a\n  \
    \      }\n        if aString > bString {\n            return b\n        }\n  \
    \      return a\n    }\n    \n    // If both are strings, compare them lexicographically\n\
    \    if let aString = a.stringValue, bString = b.stringValue {\n        if aString\
    \ < bString {\n            return a\n        }\n        if aString > bString {\n\
    \            return b\n        }\n        return a\n    }\n    \n    // If both\
    \ are strings, compare them lexicographically\n    if let aString = a.stringValue,\
    \ bString = b.stringValue {\n        if aString < bString {\n            return\
    \ a\n        }\n        if aString > bString {\n            return b\n       \
    \ }\n        return a\n    }\n    \n    // If both are strings, compare them lexicographically\n\
    \    if let aString = a.stringValue, bString = b.stringValue {\n        if aString\
    \ < bString {\n            return a\n        }\n        if aString > bString {\n\
    \            return b\n        }\n        return a\n    }\n    \n    // If both\
    \ are strings, ", "    switch a as? ValueType {\n    case .intValue:\n       \
    \ switch b as? ValueType {\n        case .intValue:\n            return a.intValue\
    \ > b.intValue\n        case .doubleValue:\n            return a.doubleValue >\
    \ b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    case .doubleValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.doubleValue > b.intValue\n\
    \        case .doubleValue:\n            return a.doubleValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.doubleValue > b.stringValue\n\
    \        }\n    case .stringValue:\n        switch b as? ValueType {\n       \
    \ case .intValue:\n            return a.stringValue > b.intValue\n        case\
    \ .doubleValue:\n            return a.stringValue > b.doubleValue\n        case\
    \ .stringValue:\n            return a.stringValue > b.stringValue\n        }\n\
    \    }\n    return nil", "    switch a { // TODO: use switch statement\n    case\
    \ .intValue(_):\n        return b\n    case .doubleValue(_):\n        return b\n\
    \    case .stringValue(_):\n        return b\n    }\n    return nil", "    switch\
    \ a { // Switch on a's type\n    case .intValue(_):\n        switch b { // Switch\
    \ on b's type\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on the type of the first value\n    case .intValue(_):\n        switch b { //\
    \ Switch on the type of the second value\n        case .intValue(_):\n       \
    \     return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on the type\
    \ of the second value\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on the type of the second value\n        case .intValue(_):\n       \
    \     return .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a as? Value {\n    case let .intValue(aInt):\n\
    \        switch b as? Value {\n        case let .intValue(bInt):\n           \
    \ return aInt > bInt ? .intValue(aInt) : .intValue(bInt)\n        case let .doubleValue(bDouble):\n\
    \            return .doubleValue(bDouble)\n        case let .stringValue(bString):\n\
    \            return .stringValue(bString)\n        }\n    case let .doubleValue(aDouble):\n\
    \        switch b as? Value {\n        case let .intValue(bInt):\n           \
    \ return .doubleValue(aDouble)\n        case let .doubleValue(bDouble):\n    \
    \        return bDouble > aDouble ? .doubleValue(aDouble) : .doubleValue(bDouble)\n\
    \        case let .stringValue(bString):\n            return .stringValue(bString)\n\
    \        }\n    case let .stringValue(aString):\n        switch b as? Value {\n\
    \        case let .intValue(bInt):\n            return .stringValue(aString)\n\
    \        case let .doubleValue(bDouble):\n            return .stringValue(aString)\n\
    \        case let .stringValue(bString):\n            return .stringValue(aString)\n\
    \        }\n    }\n    return nil", "    switch a { // a is bigger\n    case .intValue(_):\n\
    \        switch b { // b is bigger\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is bigger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is bigger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil", "    switch a as? ValueType\
    \ {\n    case .intValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return .intValue\n        case .doubleValue:\n            return\
    \ .doubleValue\n        case .stringValue:\n            return .stringValue\n\
    \        }\n    case .doubleValue:\n        switch b as? ValueType {\n       \
    \ case .intValue:\n            return .intValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    case .stringValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return .intValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    }\n    return nil", "    switch a { // Switch on\
    \ type to determine which case to use\n    case .intValue(_):\n        switch\
    \ b { // Switch on type to determine which case to use\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to use\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which case to use\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a as? Value\
    \ {\n    case .intValue:\n        switch b as? Value {\n        case .intValue:\n\
    \            return .intValue\n        case .doubleValue:\n            return\
    \ .doubleValue\n        case .stringValue:\n            if let aString = a as?\
    \ String, let bString = b as? String {\n                if aString == bString\
    \ {\n                    return .intValue\n                }\n            }\n\
    \            return .stringValue\n        }\n    case .doubleValue:\n        switch\
    \ b as? Value {\n        case .intValue:\n            return .doubleValue\n  \
    \      case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            if let aString = a as? String, let bString = b as? String {\n   \
    \             if aString == bString {\n                    return .doubleValue\n\
    \                }\n            }\n            return .stringValue\n        }\n\
    \    case .stringValue:\n        switch b as? Value {\n        case .intValue:\n\
    \            return .stringValue\n        case .doubleValue:\n            return\
    \ .stringValue\n        case .stringValue:\n            if let aString = a as?\
    \ String, let bString = b as? String {\n                if aString == bString\
    \ {\n                    return .stringValue\n                }\n            }\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a as! Value {\n    case .intValue(_):\n        switch b as! Value {\n      \
    \  case .intValue(_):\n            return .intValue(a.intValue > b.intValue ?\
    \ a.intValue : b.intValue)\n        case .doubleValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue ? a.doubleValue : b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    case .doubleValue(_):\n\
    \        switch b as! Value {\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.intValue ? a.doubleValue : b.intValue)\n    \
    \    case .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue\
    \ ? a.doubleValue : b.doubleValue)\n        case .stringValue(_):\n          \
    \  return .stringValue(a.stringValue > b.stringValue ? a.stringValue : b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b as! Value {\n        case\
    \ .intValue(_):\n            return .stringValue(a.stringValue > b.intValue ?\
    \ a.stringValue : b.intValue)\n        case .doubleValue(_):\n            return\
    \ .stringValue(a.stringValue > b.doubleValue ? a.stringValue : b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue ? a.stringValue : b.stringValue)\n        }\n    }\n    return\
    \ nil", "    switch a { // a is smaller\n    case .intValue(_):\n        return\
    \ b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    \n    switch b { // b is smaller\n    case .intValue(_):\n\
    \        return a\n    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n\
    \        return a\n    }\n    \n    // both are equal\n    return nil", "    switch\
    \ a as? Value {\n    case let intValue(aInt):\n        switch b as? Value {\n\
    \        case let intValue(bInt):\n            return intValue > bInt ? intValue\
    \ : bInt\n        case let doubleValue(bDouble):\n            return intValue\
    \ > bDouble ? intValue : bDouble\n        case let stringValue(bString):\n   \
    \         return intValue > bString ? intValue : bString\n        }\n    case\
    \ let doubleValue(aDouble):\n        switch b as? Value {\n        case let intValue(bInt):\n\
    \            return aDouble > bInt ? aDouble : bInt\n        case let doubleValue(bDouble):\n\
    \            return aDouble > bDouble ? aDouble : bDouble\n        case let stringValue(bString):\n\
    \            return aDouble > bString ? aDouble : bString\n        }\n    case\
    \ let stringValue(aString):\n        switch b as? Value {\n        case let intValue(bInt):\n\
    \            return aString > bInt ? aString : bInt\n        case let doubleValue(bDouble):\n\
    \            return aString > bDouble ? aString : bDouble\n        case let stringValue(bString):\n\
    \            return aString > bString ? aString : bString\n        }\n    }\n\
    \    return nil", "    switch a as! Value {\n    case .intValue(_):\n        switch\
    \ b as! Value {\n        case .intValue(_):\n            return a\n        case\
    \ .doubleValue(_):\n            return b\n        case .stringValue(_):\n    \
    \        return b\n        }\n    case .doubleValue(_):\n        switch b as!\
    \ Value {\n        case .intValue(_):\n            return b\n        case .doubleValue(_):\n\
    \            return a\n        case .stringValue(_):\n            return a\n \
    \       }\n    case .stringValue(_):\n        switch b as! Value {\n        case\
    \ .intValue(_):\n            return a\n        case .doubleValue(_):\n       \
    \     return b\n        case .stringValue(_):\n            return a\n        }\n\
    \    }\n    return nil", "    switch a { // Switch on the type of a\n    case\
    \ .intValue(_):\n        switch b { // Switch on the type of b\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on the type\
    \ of b\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on the type of b\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type to determine which case to return\n    case .intValue(intValue):\n \
    \       switch b { // Switch on type to determine which case to return\n     \
    \   case .intValue(intValue):\n            return intValue\n        case .doubleValue(doubleValue):\n\
    \            return doubleValue\n        case .stringValue(stringValue):\n   \
    \         return stringValue\n        }\n    case .doubleValue(doubleValue):\n\
    \        switch b { // Switch on type to determine which case to return\n    \
    \    case .intValue(intValue):\n            return doubleValue\n        case .doubleValue(doubleValue):\n\
    \            return doubleValue\n        case .stringValue(stringValue):\n   \
    \         return doubleValue\n        }\n    case .stringValue(stringValue):\n\
    \        switch b { // Switch on type to determine which case to return\n    \
    \    case .intValue(intValue):\n            return stringValue\n        case .doubleValue(doubleValue):\n\
    \            return stringValue\n        case .stringValue(stringValue):\n   \
    \         return stringValue\n        }\n    }\n    return nil", "    switch a\
    \ as? Value {\n    case let intValue(aInt):\n        switch b as? Value {\n  \
    \      case let intValue(bInt):\n            return intValue > bInt ? intValue\
    \ : bInt\n        case let doubleValue(bDouble):\n            return intValue\
    \ > bDouble ? intValue : bDouble\n        case let stringValue(bString):\n   \
    \         return intValue > bString ? intValue : bString\n        }\n    case\
    \ let doubleValue(aDouble):\n        switch b as? Value {\n        case let intValue(bInt):\n\
    \            return aDouble > bInt ? aDouble : bInt\n        case let doubleValue(bDouble):\n\
    \            return aDouble > bDouble ? aDouble : bDouble\n        case let stringValue(bString):\n\
    \            return aDouble > bString ? aDouble : bString\n        }\n    case\
    \ let stringValue(aString):\n        switch b as? Value {\n        case let intValue(bInt):\n\
    \            return aString > bInt ? aString : bInt\n        case let doubleValue(bDouble):\n\
    \            return aString > bDouble ? aString : bDouble\n        case let stringValue(bString):\n\
    \            return aString > bString ? aString : bString\n        }\n    }\n\
    \    return nil", "    switch a { // Switch on the type of a\n    case .intValue(_):\n\
    \        switch b { // Switch on the type of b\n        case .intValue(_):\n \
    \           return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on the type\
    \ of b\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on the type of b\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // TODO:\
    \ Use a switch statement to compare the different types\n    case .intValue(_):\n\
    \        switch b { // TODO: Use a switch statement to compare the different types\n\
    \        case .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ TODO: Use a switch statement to compare the different types\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ TODO: Use a switch statement to compare the different types\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a as! Value\
    \ {\n    case .intValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return a\n        }\n    case .doubleValue(_):\n\
    \        switch b as! Value {\n        case .intValue(_):\n            return\
    \ b\n        case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ as! Value {\n        case .intValue(_):\n            return b\n        case\
    \ .doubleValue(_):\n            return a\n        case .stringValue(_):\n    \
    \        return a\n        }\n    }\n    return nil", "    switch a { // TODO:\
    \ Switch to switch case for performance\n    case .intValue(_):\n        return\
    \ .intValue(b) // TODO: Switch to switch case for performance\n    case .doubleValue(_):\n\
    \        return .doubleValue(b) // TODO: Switch to switch case for performance\n\
    \    case .stringValue(_):\n        return .stringValue(b) // TODO: Switch to\
    \ switch case for performance\n    }\n    return nil", "    switch a { // Switch\
    \ on type to determine which comparison to use\n    case .intValue(_):\n     \
    \   switch b { // Switch on type to determine which comparison to use\n      \
    \  case .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a as! Value\
    \ {\n    case .intValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b as! Value {\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ as! Value {\n        case .intValue(_):\n            return a\n        case\
    \ .doubleValue(_):\n            return b\n        case .stringValue(_):\n    \
    \        return b\n        }\n    }\n    return nil", "    switch a as? Value\
    \ {\n    case let .intValue(aIntValue):\n        switch b as? Value {\n      \
    \  case let .intValue(bIntValue):\n            return bIntValue > aIntValue\n\
    \        case let .doubleValue(bDoubleValue):\n            return bDoubleValue\
    \ > aIntValue\n        case let .stringValue(bStringValue):\n            return\
    \ bStringValue > aIntValue\n        }\n    case let .doubleValue(aDoubleValue):\n\
    \        switch b as? Value {\n        case let .intValue(bIntValue):\n      \
    \      return bIntValue > aDoubleValue\n        case let .doubleValue(bDoubleValue):\n\
    \            return bDoubleValue > aDoubleValue\n        case let .stringValue(bStringValue):\n\
    \            return bStringValue > aDoubleValue\n        }\n    case let .stringValue(aStringValue):\n\
    \        switch b as? Value {\n        case let .intValue(bIntValue):\n      \
    \      return bIntValue > aStringValue\n        case let .doubleValue(bDoubleValue):\n\
    \            return bDoubleValue > aStringValue\n        case let .stringValue(bStringValue):\n\
    \            return bStringValue > aStringValue\n        }\n    }\n    return\
    \ nil", "    switch a { \n    case .intValue(_):\n        switch b { \n      \
    \  case .intValue(_):\n            return a\n        case .doubleValue(_):\n \
    \           return b\n        case .stringValue(_):\n            return b\n  \
    \      }\n    case .doubleValue(_):\n        switch b { \n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { \n        case .intValue(_):\n            return a\n     \
    \   case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil", "    switch a { // case\
    \ Int\n    case .intValue(_):\n        switch b { // case Int\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // case Double\n   \
    \     case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ case String\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type to determine which case to return\n    case .intValue(_):\n        switch\
    \ b { // Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .stringValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .stringValue(a.stringValue > b.stringValue)\n        case .doubleValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    }\n    return nil", "    switch a { // Switch on type to determine\
    \ which case to return\n    case .intValue:\n        switch b { // Switch on type\
    \ to determine which case to return\n        case .intValue:\n            return\
    \ .intValue\n        case .doubleValue:\n            return .doubleValue\n   \
    \     case .stringValue:\n            return .stringValue\n        }\n    case\
    \ .doubleValue:\n        switch b { // Switch on type to determine which case\
    \ to return\n        case .intValue:\n            return .intValue\n        case\
    \ .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    case .stringValue:\n        switch\
    \ b { // Switch on type to determine which case to return\n        case .intValue:\n\
    \            return .intValue\n        case .doubleValue:\n            return\
    \ .doubleValue\n        case .stringValue:\n            return .stringValue\n\
    \        }\n    }\n    return nil", "    switch a { // Switch on a's type\n  \
    \  case .intValue(_):\n        switch b { // Switch on b's type\n        case\
    \ .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n     \
    \   case .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on b's type\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // TODO:\
    \ use switch statement\n    case .intValue(_):\n        switch b { // TODO: use\
    \ switch statement\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ TODO: use switch statement\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ TODO: use switch statement\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a as! Value\
    \ {\n    case .intValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            if a < b {\n                return\
    \ a\n            } else {\n                return b\n            }\n        }\n\
    \    case .doubleValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return b\n        case .doubleValue(_):\n            return a\n \
    \       case .stringValue(_):\n            if a < b {\n                return\
    \ b\n            } else {\n                return a\n            }\n        }\n\
    \    case .stringValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            if a < b {\n                return\
    \ a\n            } else {\n                return b\n            }\n        }\n\
    \    }\n    return nil", "    switch a { // Compare all possible types\n    case\
    \ .intValue(_):\n        switch b { // Compare all possible types\n        case\
    \ .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n     \
    \   case .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Compare all possible types\n        case .intValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Compare all possible types\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // case\
    \ intValue:\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch b { // case intValue:\n    case .intValue(_):\n        return a\n\
    \    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n    \
    \    return a\n    }\n    \n    switch a { // case doubleValue:\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch b { // case doubleValue:\n    case .doubleValue(_):\n        return\
    \ a\n    case .stringValue(_):\n        return a\n    }\n    \n    switch a {\
    \ // case stringValue:\n    case .stringValue(_):\n        return b\n    case\
    \ .intValue(_):\n        return b\n    case .doubleValue(_):\n        return b\n\
    \    }\n    \n    return nil", "    switch a { // Compare two values\n    case\
    \ .intValue(_):\n        switch b { // Compare two integers\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // Compare two doubles\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // Compare two strings\n        case .intValue(_):\n     \
    \       return a\n        case .doubleValue(_):\n            return b\n      \
    \  case .stringValue(_):\n            return b\n        }\n    }\n    return nil",
  "    switch a { // Switch on type to determine which case to execute\n    case .intValue(_):\n\
    \        switch b { // Switch on type to determine which case to execute\n   \
    \     case .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on type to determine which case to execute\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which case to execute\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // case\
    \ intValue:\n    case .intValue(_):\n        return b\n    case .doubleValue(_):\n\
    \        return b\n    case .stringValue(_):\n        return b\n    }\n    \n\
    \    switch b { // case intValue:\n    case .intValue(_):\n        return a\n\
    \    case .doubleValue(_):\n        return a\n    case .stringValue(_):\n    \
    \    return a\n    }\n    \n    return nil", "    switch a as? ValueType {\n \
    \   case .intValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.intValue > b.intValue\n        case .doubleValue:\n    \
    \        return a.doubleValue > b.doubleValue\n        case .stringValue:\n  \
    \          return a.stringValue > b.stringValue\n        }\n    case .doubleValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.doubleValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.doubleValue\
    \ > b.stringValue\n        }\n    case .stringValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.stringValue > b.intValue\n\
    \        case .doubleValue:\n            return a.stringValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.stringValue > b.stringValue\n\
    \        }\n    }\n    return nil", "    switch a as? Value {\n    case let intValue(aInt):\n\
    \        switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ intValue > bInt ? intValue : bInt\n        case let doubleValue(bDouble):\n\
    \            return intValue > bDouble ? intValue : bDouble\n        case let\
    \ stringValue(bString):\n            return intValue > bString ? intValue : bString\n\
    \        }\n    case let doubleValue(aDouble):\n        switch b as? Value {\n\
    \        case let intValue(bInt):\n            return aDouble > bInt ? aDouble\
    \ : bInt\n        case let doubleValue(bDouble):\n            return aDouble >\
    \ bDouble ? aDouble : bDouble\n        case let stringValue(bString):\n      \
    \      return aDouble > bString ? aDouble : bString\n        }\n    case let stringValue(aString):\n\
    \        switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ aString > bInt ? aString : bInt\n        case let doubleValue(bDouble):\n  \
    \          return aString > bDouble ? aString : bDouble\n        case let stringValue(bString):\n\
    \            return aString > bString ? aString : bString\n        }\n    }\n\
    \    return nil", "    switch a { // a is larger\n    case .intValue(_):\n   \
    \     switch b { // b is larger\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .doubleValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return b\n       \
    \ case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return b\n        }\n    case .stringValue(_):\n        switch b\
    \ { // b is larger\n        case .intValue(_):\n            return a\n       \
    \ case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return a\n        }\n    }\n    return nil", "    switch a as? ValueType\
    \ {\n    case .intValue:\n        switch b as? ValueType {\n        case .intValue:\n\
    \            return a.intValue > b.intValue\n        case .doubleValue:\n    \
    \        return a.doubleValue > b.doubleValue\n        case .stringValue:\n  \
    \          return a.stringValue > b.stringValue\n        }\n    case .doubleValue:\n\
    \        switch b as? ValueType {\n        case .intValue:\n            return\
    \ a.doubleValue > b.intValue\n        case .doubleValue:\n            return a.doubleValue\
    \ > b.doubleValue\n        case .stringValue:\n            return a.doubleValue\
    \ > b.stringValue\n        }\n    case .stringValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.stringValue > b.intValue\n\
    \        case .doubleValue:\n            return a.stringValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.stringValue > b.stringValue\n\
    \        }\n    }\n    return nil", "    switch a { // case is redundant but makes\
    \ the code more readable\n    case .intValue(_):\n        switch b { // case is\
    \ redundant but makes the code more readable\n        case .intValue(_):\n   \
    \         return a\n        case .doubleValue(_):\n            return b\n    \
    \    case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // case is redundant but makes the code more readable\n  \
    \      case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return b\n \
    \       }\n    case .stringValue(_):\n        switch b { // case is redundant\
    \ but makes the code more readable\n        case .intValue(_):\n            return\
    \ a\n        case .doubleValue(_):\n            return b\n        case .stringValue(_):\n\
    \            return b\n        }\n    }\n    return nil", "    switch a { // case\
    \ is required because Value is a protocol\n    case .intValue(_):\n        return\
    \ b\n    case .doubleValue(_):\n        return b\n    case .stringValue(_):\n\
    \        return b\n    }\n    return nil", "    switch a as? Value {\n    case\
    \ let intValue(aInt):\n        switch b as? Value {\n        case let intValue(bInt):\n\
    \            return intValue > bInt ? intValue : bInt\n        case let doubleValue(bDouble):\n\
    \            return intValue > bDouble ? intValue : bDouble\n        case let\
    \ stringValue(bString):\n            return intValue > bString ? intValue : bString\n\
    \        }\n    case let doubleValue(aDouble):\n        switch b as? Value {\n\
    \        case let intValue(bInt):\n            return aDouble > bInt ? aDouble\
    \ : bInt\n        case let doubleValue(bDouble):\n            return aDouble >\
    \ bDouble ? aDouble : bDouble\n        case let stringValue(bString):\n      \
    \      return aDouble > bString ? aDouble : bString\n        }\n    case let stringValue(aString):\n\
    \        switch b as? Value {\n        case let intValue(bInt):\n            return\
    \ aString > bInt ? aString : bInt\n        case let doubleValue(bDouble):\n  \
    \          return aString > bDouble ? aString : bDouble\n        case let stringValue(bString):\n\
    \            return aString > bString ? aString : bString\n        }\n    }\n\
    \    return nil", "    switch a { // case intValue:\n    case .intValue(_):\n\
    \        switch b { // case intValue:\n        case .intValue(_):\n          \
    \  return a\n        case .doubleValue(_):\n            return b\n        case\
    \ .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b { // case doubleValue:\n        case .intValue(_):\n       \
    \     return a\n        case .doubleValue(_):\n            return b\n        case\
    \ .stringValue(_):\n            return b\n        }\n    case .stringValue(_):\n\
    \        switch b { // case stringValue:\n        case .intValue(_):\n       \
    \     return a\n        case .doubleValue(_):\n            return b\n        case\
    \ .stringValue(_):\n            return b\n        }\n    }\n    return nil", " \
    \   switch a { // Switch on the type of a\n    case .intValue(_):\n        switch\
    \ b { // Switch on the type of b\n        case .intValue(_):\n            return\
    \ .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n        \
    \    return .doubleValue(a.doubleValue > b.doubleValue)\n        case .stringValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        }\n \
    \   case .doubleValue(_):\n        switch b { // Switch on the type of b\n   \
    \     case .intValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on the type of b\n        case .intValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .doubleValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a as! Value\
    \ {\n    case .intValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return b\n        }\n    case .doubleValue(_):\n\
    \        switch b as! Value {\n        case .intValue(_):\n            return\
    \ b\n        case .doubleValue(_):\n            return a\n        case .stringValue(_):\n\
    \            return a\n        }\n    case .stringValue(_):\n        switch b\
    \ as! Value {\n        case .intValue(_):\n            return a\n        case\
    \ .doubleValue(_):\n            return b\n        case .stringValue(_):\n    \
    \        return a\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type to determine which function to call.\n    case .intValue(_):\n     \
    \   return .intValue\n    case .doubleValue(_):\n        return .doubleValue\n\
    \    case .stringValue(_):\n        return .stringValue\n    }\n    \n    switch\
    \ b { // Switch on type to determine which function to call.\n    case .intValue(_):\n\
    \        return .intValue\n    case .doubleValue(_):\n        return .doubleValue\n\
    \    case .stringValue(_):\n        return .stringValue\n    }\n    \n    // If\
    \ both are strings, compare them lexicographically.\n    if let aString = a.stringValue,\
    \ bString = b.stringValue {\n        if aString < bString {\n            return\
    \ .stringValue\n        }\n        if aString > bString {\n            return\
    \ .stringValue\n        }\n        return .intValue\n    }\n    \n    // If both\
    \ are integers, compare them numerically.\n    if let aInt = a.intValue, bInt\
    \ = b.intValue {\n        if aInt < bInt {\n            return .intValue\n   \
    \     }\n        if aInt > bInt {\n            return .intValue\n        }\n \
    \       return .doubleValue\n    }\n    \n    // If both are doubles, compare\
    \ them numerically.\n    if let aDouble = a.doubleValue, bDouble = b.doubleValue\
    \ {\n        if aDouble < bDouble {\n            return .doubleValue\n       \
    \ }\n        if aDouble > bDouble {\n            return .doubleValue\n       \
    \ }\n        return .intValue\n    }\n    \n    // If both are floats, compare\
    \ them numerically.\n    if let aFloat = a.doubleValue, bFloat = b.doubleValue\
    \ {\n        if aFloat < bFloat {\n            return .doubleValue\n        }\n\
    \        if aFloat > bFloat {\n            return .doubleValue\n        }\n  \
    \      return .intValue\n    }\n    \n    // If both are nil, return nil.\n  \
    \  if a == .nilValue {\n        return b == .nilValue ? .nilValue : .intValue\n\
    \    }\n    \n    // If both are non-nil, return nil.\n    if b == .nilValue {\n\
    \        return a == .nilValue ? .nilValue : .intValue\n    }\n    \n    // If\
    \ both are non-nil, return nil.\n    if a == .nilValue {\n        return b ==\
    \ .nilValue ? .nilValue : .intValue\n    }\n    \n    // If both are non-nil,\
    \ return nil.\n    if b == .nilValue {\n        return a == .nilValue ", "   \
    \ switch a { // Switch on type to determine which comparison to use\n    case\
    \ .intValue(_):\n        switch b { // Switch on type to determine which comparison\
    \ to use\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on a's type\n    case .intValue:\n        switch b { // Switch on b's type\n\
    \        case .intValue:\n            return .intValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    case .doubleValue:\n        switch b { // Switch\
    \ on b's type\n        case .intValue:\n            return .intValue\n       \
    \ case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    case .stringValue:\n        switch\
    \ b { // Switch on b's type\n        case .intValue:\n            return .intValue\n\
    \        case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a as! Value {\n    case .intValue(_):\n        switch b as! Value {\n      \
    \  case .intValue(_):\n            return a\n        case .doubleValue(_):\n \
    \           return b\n        case .stringValue(_):\n            return b\n  \
    \      }\n    case .doubleValue(_):\n        switch b as! Value {\n        case\
    \ .intValue(_):\n            return b\n        case .doubleValue(_):\n       \
    \     return a\n        case .stringValue(_):\n            return a\n        }\n\
    \    case .stringValue(_):\n        switch b as! Value {\n        case .intValue(_):\n\
    \            return a\n        case .doubleValue(_):\n            return b\n \
    \       case .stringValue(_):\n            return a\n        }\n    }\n    return\
    \ nil", "    switch a { // Switch on type to determine which comparison to use.\n\
    \    case .intValue:\n        switch b { // Switch on type to determine which\
    \ comparison to use.\n        case .intValue:\n            return .intValue\n\
    \        case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    case .doubleValue:\n        switch\
    \ b { // Switch on type to determine which comparison to use.\n        case .intValue:\n\
    \            return .doubleValue\n        case .doubleValue:\n            return\
    \ .doubleValue\n        case .stringValue:\n            return .stringValue\n\
    \        }\n    case .stringValue:\n        switch b { // Switch on type to determine\
    \ which comparison to use.\n        case .intValue:\n            return .stringValue\n\
    \        case .doubleValue:\n            return .stringValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a as? Value {\n    case let intValue(aInt):\n        switch b as? Value {\n\
    \        case let intValue(bInt):\n            return intValue > bInt ? intValue\
    \ : bInt\n        case let doubleValue(bDouble):\n            return intValue\
    \ > bDouble ? intValue : bDouble\n        case let stringValue(bString):\n   \
    \         return intValue > bString ? intValue : bString\n        }\n    case\
    \ let doubleValue(aDouble):\n        switch b as? Value {\n        case let intValue(bInt):\n\
    \            return aDouble > bInt ? aDouble : bInt\n        case let doubleValue(bDouble):\n\
    \            return aDouble > bDouble ? aDouble : bDouble\n        case let stringValue(bString):\n\
    \            return aDouble > bString ? aDouble : bString\n        }\n    case\
    \ let stringValue(aString):\n        switch b as? Value {\n        case let intValue(bInt):\n\
    \            return aString > bInt ? aString : bInt\n        case let doubleValue(bDouble):\n\
    \            return aString > bDouble ? aString : bDouble\n        case let stringValue(bString):\n\
    \            return aString > bString ? aString : bString\n        }\n    }\n\
    \    return nil", "    switch a as? ValueType {\n    case .intValue:\n       \
    \ switch b as? ValueType {\n        case .intValue:\n            return a.intValue\
    \ > b.intValue\n        case .doubleValue:\n            return a.doubleValue >\
    \ b.doubleValue\n        case .stringValue:\n            return a.stringValue\
    \ > b.stringValue\n        }\n    case .doubleValue:\n        switch b as? ValueType\
    \ {\n        case .intValue:\n            return a.doubleValue > b.intValue\n\
    \        case .doubleValue:\n            return a.doubleValue > b.doubleValue\n\
    \        case .stringValue:\n            return a.doubleValue > b.stringValue\n\
    \        }\n    case .stringValue:\n        switch b as? ValueType {\n       \
    \ case .intValue:\n            return a.stringValue > b.intValue\n        case\
    \ .doubleValue:\n            return a.stringValue > b.doubleValue\n        case\
    \ .stringValue:\n            return a.stringValue > b.stringValue\n        }\n\
    \    }\n    return nil", "    switch a { // case intValue:\n    case .intValue(_):\n\
    \        switch b { // case intValue:\n        case .intValue(_):\n          \
    \  return .intValue\n        case .doubleValue(_):\n            return .doubleValue\n\
    \        case .stringValue(_):\n            return .stringValue\n        }\n \
    \   case .doubleValue(_):\n        switch b { // case doubleValue:\n        case\
    \ .intValue(_):\n            return .doubleValue\n        case .doubleValue(_):\n\
    \            return .doubleValue\n        case .stringValue(_):\n            return\
    \ .stringValue\n        }\n    case .stringValue(_):\n        switch b { // case\
    \ stringValue:\n        case .intValue(_):\n            return .stringValue\n\
    \        case .doubleValue(_):\n            return .stringValue\n        case\
    \ .stringValue(_):\n            return .stringValue\n        }\n    }\n    return\
    \ nil", "    switch a { // Switch on type to determine which comparison to use\n\
    \    case .intValue(_):\n        switch b { // Switch on type to determine which\
    \ comparison to use\n        case .intValue(_):\n            return .intValue(a.intValue\
    \ > b.intValue)\n        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type\n    case .intValue:\n        switch b { // Switch on type\n       \
    \ case .intValue:\n            return .intValue\n        case .doubleValue:\n\
    \            return .doubleValue\n        case .stringValue:\n            return\
    \ .stringValue\n        }\n    case .doubleValue:\n        switch b { // Switch\
    \ on type\n        case .intValue:\n            return .intValue\n        case\
    \ .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    case .stringValue:\n        switch\
    \ b { // Switch on type\n        case .intValue:\n            return .intValue\n\
    \        case .doubleValue:\n            return .doubleValue\n        case .stringValue:\n\
    \            return .stringValue\n        }\n    }\n    return nil", "    switch\
    \ a { // Switch on type to determine which comparison to use\n    case .intValue(_):\n\
    \        switch b { // Switch on type to determine which comparison to use\n \
    \       case .intValue(_):\n            return .intValue(a.intValue > b.intValue)\n\
    \        case .doubleValue(_):\n            return .doubleValue(a.doubleValue\
    \ > b.doubleValue)\n        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .doubleValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .doubleValue(_):\n            return .doubleValue(a.doubleValue > b.doubleValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which comparison to use\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Compare\
    \ two values\n    case .intValue(_):\n        switch b { // Compare two integers\n\
    \        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return a\n \
    \       }\n    case .doubleValue(_):\n        switch b { // Compare two doubles\n\
    \        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return a\n \
    \       }\n    case .stringValue(_):\n        switch b { // Compare two strings\n\
    \        case .intValue(_):\n            return a\n        case .doubleValue(_):\n\
    \            return b\n        case .stringValue(_):\n            return a\n \
    \       }\n    }\n    return nil", "    switch a { // Switch on type to determine\
    \ which case to execute\n    case .intValue(_):\n        switch b { // Switch\
    \ on type to determine which case to execute\n        case .intValue(_):\n   \
    \         return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to execute\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which case to execute\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil", "    switch a { // Switch\
    \ on type to determine which case to return\n    case .intValue(_):\n        switch\
    \ b { // Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .intValue(a.intValue > b.intValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        }\n    case .doubleValue(_):\n        switch b { // Switch on type to\
    \ determine which case to return\n        case .intValue(_):\n            return\
    \ .doubleValue(a.doubleValue > b.doubleValue)\n        case .doubleValue(_):\n\
    \            return .doubleValue(a.doubleValue > b.doubleValue)\n        case\
    \ .stringValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    case .stringValue(_):\n        switch b { //\
    \ Switch on type to determine which case to return\n        case .intValue(_):\n\
    \            return .stringValue(a.stringValue > b.stringValue)\n        case\
    \ .doubleValue(_):\n            return .stringValue(a.stringValue > b.stringValue)\n\
    \        case .stringValue(_):\n            return .stringValue(a.stringValue\
    \ > b.stringValue)\n        }\n    }\n    return nil"]
stop_tokens:
- "\n}"
