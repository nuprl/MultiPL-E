language: swift
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        swap(x, y)\n\
    \    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    while x < y {\n        if x % 2 == 0 {\n            even +=\
    \ x\n            x += 1\n        } else {\n            odd += x\n            x\
    \ += 1\n        }\n    }\n    if even > y {\n        return even\n    } else {\n\
    \        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpo17awono.swift:8:9: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(x, y)\n        ^    ~\n"
  stdout: ''
  timestamp: 1659979018
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y) = (y,\
    \ x)\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ n in 1...y {\n        if x % n == 0 {\n            even = even * n + n\n   \
    \     }\n        else {\n            odd = odd * n + n\n        }\n    }\n   \
    \ \n    if even > odd {\n        return even\n    }\n    else {\n        return\
    \ odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp59_t8r5s.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp59_t8r5s.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979018
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = -1\n    var even_biggest: Int = -1\n    var\
    \ odd_biggest: Int = -1\n    \n    if x > y {\n        biggest = y\n        even_biggest\
    \ = y\n        odd_biggest = y\n    } else {\n        biggest = x\n        even_biggest\
    \ = x\n        odd_biggest = x\n    }\n    \n    while even < biggest {\n    \
    \    if even % 2 == 0 {\n            even_biggest = even\n            even++\n\
    \        } else {\n            odd_biggest = odd\n            odd++\n        }\n\
    \    }\n    \n    if even_biggest == biggest {\n        return even_biggest\n\
    \    } else {\n        return odd_biggest\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmprqei61zv.swift:26:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmprqei61zv.swift:29:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n"
  stdout: ''
  timestamp: 1659979018
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = x - y\n        odd = x - even\n    } else {\n        biggest =\
    \ x\n        even = y - x\n        odd = y - even\n    }\n    \n    if even >\
    \ biggest {\n        biggest = even\n    }\n    \n    if odd > biggest {\n   \
    \     biggest = odd\n    }\n    \n    return biggest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp42yvz1l6/tmp42yvz1l6.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6a3b53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6a384ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6a384a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6a38497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42yvz1l6                        0x00005597915c41bd <unavailable> + 4541

    5    libc.so.6                          0x00002ad6a3d3f460 __libc_start_main +
    245

    6    tmp42yvz1l6                        0x00005597915c3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return -1\n\
    \    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for i in\
    \ 0..<x {\n        if i % 2 == 0 {\n            even += i\n        } else {\n\
    \            odd += i\n        }\n    }\n    \n    if even > y {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpnrk_08y3/tmpnrk_08y3.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06f04c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06f01c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06f01c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06f01bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnrk_08y3                        0x0000556b27bea33d <unavailable> + 4925

    5    libc.so.6                          0x00002b06f06b5460 __libc_start_main +
    245

    6    tmpnrk_08y3                        0x0000556b27be9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return choose_num(y,\
    \ x)\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x %\
    \ 2 == 0 && y % 2 == 0 {\n        return choose_num(x / 2, y / 2)\n    }\n   \
    \ \n    if x % 2 == 0 && y % 2 != 0 {\n        return choose_num(x / 2, y)\n \
    \   }\n    \n    if x % 2 != 0 && y % 2 == 0 {\n        return choose_num(x, y\
    \ / 2)\n    }\n    \n    if x % 2 != 0 && y % 2 != 0 {\n        return choose_num(x,\
    \ y)\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpgr521d3p.swift:8:26: error: missing argument labels 'x:y:' in call\n\
    \        return choose_num(y, x)\n                         ^\n               \
    \           x: y: \n/tmp/tmpgr521d3p.swift:16:26: error: missing argument labels\
    \ 'x:y:' in call\n        return choose_num(x / 2, y / 2)\n                  \
    \       ^\n                          x:     y: \n/tmp/tmpgr521d3p.swift:20:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x /\
    \ 2, y)\n                         ^\n                          x:     y: \n/tmp/tmpgr521d3p.swift:24:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n/tmp/tmpgr521d3p.swift:28:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659979018
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var num: Int = 0\n    \n    for num in x ... y {\n        if num\
    \ % 2 == 0 {\n            even = num\n        } else {\n            odd = num\n\
    \        }\n    }\n    \n    if even > odd {\n        return even\n    } else\
    \ {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6q01600i/tmp6q01600i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad13d40fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad13d106b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad13d106988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad13d1057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6q01600i                        0x000055eadc46733d <unavailable> + 4925

    5    libc.so.6                          0x00002ad13d5fb460 __libc_start_main +
    245

    6    tmp6q01600i                        0x000055eadc466fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for i\
    \ in 1..<result {\n        if result % 2 == 0 {\n            result = result /\
    \ 2\n        } else {\n            break\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpq42ebhcq/tmpq42ebhcq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5a88ceac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5a889e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5a889e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5a889e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq42ebhcq                        0x0000556a740b333d <unavailable> + 4925

    5    libc.so.6                          0x00002b5a88ed6460 __libc_start_main +
    245

    6    tmpq42ebhcq                        0x0000556a740b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    while result\
    \ % 2 == 0 {\n        result /= 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpb0vrlwmd/tmpb0vrlwmd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac632124c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac631e1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac631e1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac631e1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0vrlwmd                        0x00005568ce8ed24d <unavailable> + 4685

    5    libc.so.6                          0x00002ac632310460 __libc_start_main +
    245

    6    tmpb0vrlwmd                        0x00005568ce8ecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = -1\n    var even_biggest: Int = -1\n    var\
    \ odd_biggest: Int = -1\n    \n    if x > y {\n        biggest = y\n        even_biggest\
    \ = y\n        odd_biggest = y\n    } else {\n        biggest = x\n        even_biggest\
    \ = x\n        odd_biggest = x\n    }\n    \n    if even > odd {\n        biggest\
    \ = even\n        even_biggest = even\n        odd_biggest = odd\n    } else {\n\
    \        biggest = odd\n        even_biggest = odd\n        odd_biggest = odd\n\
    \    }\n    \n    if biggest > even_biggest {\n        biggest = even_biggest\n\
    \    }\n    \n    if biggest > odd_biggest {\n        biggest = odd_biggest\n\
    \    }\n    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpuhylwf97/tmpuhylwf97.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adacbf81c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adacbc78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adacbc78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adacbc777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuhylwf97                        0x000055f9cb8471bd <unavailable> + 4541

    5    libc.so.6                          0x00002adacc16d460 __libc_start_main +
    245

    6    tmpuhylwf97                        0x000055f9cb846e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for var\
    \ i = x; i <= y; i++ {\n        if i % 2 == 0 {\n            result = i\n    \
    \        break\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp0feu03e1.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979018
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result % 2 == 0 {\n        result /= 2\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5uwhu90m/tmp5uwhu90m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba92046fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba920166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba920166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9201657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uwhu90m                        0x000055b89bf6424d <unavailable> + 4685

    5    libc.so.6                          0x00002ba92065b460 __libc_start_main +
    245

    6    tmp5uwhu90m                        0x000055b89bf63ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return -1\n\
    \    }\n    \n    var even = 0\n    var odd = 0\n    \n    for _ in 0..<(x-y)\
    \ {\n        if x % 2 == 0 {\n            even += 2\n        } else {\n      \
    \      odd += 2\n        }\n        x /= 2\n        y /= 2\n    }\n    \n    if\
    \ even > odd {\n        return even\n    } else {\n        return odd\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpq08bakzz.swift:20:11: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n        x /= 2\n        ~ ^\n/tmp/tmpq08bakzz.swift:21:11:\
    \ error: left side of mutating operator isn't mutable: 'y' is a 'let' constant\n\
    \        y /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979018
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = -1\n    \n    for i in 0..<x {\n        if i\
    \ % 2 == 0 {\n            even += i\n        } else {\n            odd += i\n\
    \        }\n    }\n    \n    if even > biggest {\n        biggest = even\n   \
    \ }\n    \n    if odd > biggest {\n        biggest = odd\n    }\n    \n    return\
    \ biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6mlodn92/tmp6mlodn92.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6e2606c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6e22fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6e22fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6e22fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6mlodn92                        0x00005574f788c33d <unavailable> + 4925

    5    libc.so.6                          0x00002ad6e27f2460 __libc_start_main +
    245

    6    tmp6mlodn92                        0x00005574f788bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    \n    if x > y {\n    \
    \    x = y\n        y = x\n    }\n    \n    while x < y {\n        if x % 2 ==\
    \ 0 {\n            even = even * 2 + x\n        }\n        else {\n          \
    \  odd = odd * 2 + x\n        }\n        \n        x = x + 1\n        y = y +\
    \ 1\n    }\n    \n    if even > y {\n        return even\n    }\n    else {\n\
    \        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpdqprjhr4/tmpdqprjhr4.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aba69b63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aba6985ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aba6985a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aba698597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdqprjhr4                        0x000055f8a090824d <unavailable> + 4685

    5    libc.so.6                          0x00002aba69d4f460 __libc_start_main +
    245

    6    tmpdqprjhr4                        0x000055f8a0907ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    \n    var even = Int()\n    var odd = Int()\n    \n    for i in 0..<x\
    \ {\n        if i % 2 == 0 {\n            even = even + i\n        } else {\n\
    \            odd = odd + i\n        }\n    }\n    \n    if even > y {\n      \
    \  return -1\n    }\n    \n    if odd > y {\n        return -1\n    }\n    \n\
    \    if even < y {\n        return even\n    }\n    \n    return odd\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjgcr31yk/tmpjgcr31yk.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3fe5ddec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3fe5ad5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3fe5ad5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3fe5ad47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjgcr31yk                        0x000055e1954b333d <unavailable> + 4925

    5    libc.so.6                          0x00002b3fe5fca460 __libc_start_main +
    245

    6    tmpjgcr31yk                        0x000055e1954b2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if even\
    \ % 2 == 0 {\n            even = even / 2\n            biggest = biggest + 1\n\
    \        } else {\n            even = even / 2\n        }\n    }\n    \n    while\
    \ odd > 0 {\n        if odd % 2 == 0 {\n            odd = odd / 2\n          \
    \  biggest = biggest + 1\n        } else {\n            odd = odd / 2\n      \
    \  }\n    }\n    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpz68wgbew/tmpz68wgbew.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafd1a29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafd1720b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafd1720988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafd171f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz68wgbew                        0x000055ef99da42cd <unavailable> + 4813

    5    libc.so.6                          0x00002aafd1c15460 __libc_start_main +
    245

    6    tmpz68wgbew                        0x000055ef99da3ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var biggest = Int()\n    var biggest_even\
    \ = Int()\n    for num in 1...y {\n        if num % 2 == 0 {\n            if num\
    \ > biggest {\n                biggest = num\n            }\n            if num\
    \ > biggest_even {\n                biggest_even = num\n            }\n      \
    \  }\n    }\n    if biggest == biggest_even {\n        return -1\n    }\n    return\
    \ biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqlu7kqcq/tmpqlu7kqcq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8997f02c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8997bf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8997bf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8997bf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqlu7kqcq                        0x000055f3b06b833d <unavailable> + 4925

    5    libc.so.6                          0x00002b89980ee460 __libc_start_main +
    245

    6    tmpqlu7kqcq                        0x000055f3b06b7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    for number in 1...y {\n        if number % 2 == 0 {\n   \
    \         even = number\n        } else {\n            odd = number\n        }\n\
    \    }\n    \n    if even > x {\n        return even\n    } else {\n        return\
    \ odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpjjec_omt/tmpjjec_omt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28ab0bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28aadb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28aadb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28aadb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjjec_omt                        0x000055696803e3bd <unavailable> + 5053

    5    libc.so.6                          0x00002b28ab2ab460 __libc_start_main +
    245

    6    tmpjjec_omt                        0x000055696803dfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if odd\
    \ % 2 == 0 {\n            even -= 1\n            odd /= 2\n        } else {\n\
    \            odd -= 1\n            even /= 2\n        }\n    }\n    \n    if even\
    \ > biggest {\n        biggest = even\n    }\n    \n    return biggest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpowdyfjpw/tmpowdyfjpw.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bab80ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bab505b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bab505988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bab5047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowdyfjpw                        0x00005584e2ea124d <unavailable> + 4685

    5    libc.so.6                          0x00002b0bab9fa460 __libc_start_main +
    245

    6    tmpowdyfjpw                        0x00005584e2ea0ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return\
    \ -1\n    }\n    var result = -1\n    var low = Int()\n    var high = Int()\n\
    \    var mid = Int()\n    low = Int()\n    high = Int()\n    mid = Int()\n   \
    \ low = x\n    high = y\n    mid = Int()\n    while low <= high {\n        mid\
    \ = low + (high - low) / 2\n        if mid % 2 == 0 {\n            if mid > result\
    \ {\n                result = mid\n            }\n            high = mid - 1\n\
    \        } else {\n            if mid < result {\n                result = mid\n\
    \            }\n            low = mid + 1\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4bjdotoh/tmp4bjdotoh.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0314de6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0314addb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0314add988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0314adc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4bjdotoh                        0x00005575bac9334f <unavailable> + 4943

    5    libc.so.6                          0x00002b0314fd2460 __libc_start_main +
    245

    6    tmp4bjdotoh                        0x00005575bac92ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y) = (y,\
    \ x)\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ i in 0..<x {\n        if i % 2 == 0 {\n            even += i\n        } else\
    \ {\n            odd += i\n        }\n    }\n    \n    if even > y {\n       \
    \ return -1\n    }\n    \n    if even < x {\n        return even\n    }\n    \n\
    \    if odd > y {\n        return -1\n    }\n    \n    if odd < x {\n        return\
    \ odd\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp0r53y3ae.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp0r53y3ae.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979018
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num: Int = -1\n    var even:\
    \ Bool = false\n    for num in x ... y {\n        if num % 2 == 0 {\n        \
    \    even = true\n            break\n        }\n    }\n    if even {\n       \
    \ return num\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8u_2ec02/tmp8u_2ec02.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e7b003c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e7acfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e7acfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e7acf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8u_2ec02                        0x000055cd703c333d <unavailable> + 4925

    5    libc.so.6                          0x00002b1e7b1ef460 __libc_start_main +
    245

    6    tmp8u_2ec02                        0x000055cd703c2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x = x\n\
    \    var y = y\n    var even = 1\n    var odd = 0\n    while x != 0 || y != 0\
    \ {\n        if x % 2 == 0 {\n            even = even + x\n            x = x /\
    \ 2\n        } else {\n            odd = odd + x\n            x = x / 2\n    \
    \    }\n        if y % 2 == 0 {\n            even = even + y\n            y =\
    \ y / 2\n        } else {\n            odd = odd + y\n            y = y / 2\n\
    \        }\n    }\n    if even > odd {\n        result = even\n    } else {\n\
    \        result = odd\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpga8omtum/tmpga8omtum.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac16721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac16418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac16418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac164177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpga8omtum                        0x0000557bb27d224d <unavailable> + 4685

    5    libc.so.6                          0x00002aac1690d460 __libc_start_main +
    245

    6    tmpga8omtum                        0x0000557bb27d1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x = x -\
    \ 1\n    var y = y - 1\n    while x >= y {\n        if x % 2 == 0 && y % 2 ==\
    \ 0 {\n            result = x\n            break\n        }\n        x /= 2\n\
    \        y /= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvt0fy8uo/tmpvt0fy8uo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03decf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03de9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03de9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03de9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvt0fy8uo                        0x0000560c17f0424d <unavailable> + 4685

    5    libc.so.6                          0x00002b03deedd460 __libc_start_main +
    245

    6    tmpvt0fy8uo                        0x0000560c17f03ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var biggest = y\n    for num in\
    \ stride(from: x, through: y, by: 2) {\n        if num % 2 == 0 {\n          \
    \  biggest = num\n        }\n    }\n    return biggest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmppowaemf8/tmppowaemf8.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0928a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0925a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0925a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af09259f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppowaemf8                        0x000055b114aad4fd <unavailable> + 5373

    5    libc.so.6                          0x00002af092a95460 __libc_start_main +
    245

    6    tmppowaemf8                        0x000055b114aad129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    while result\
    \ > 0 && result % 2 == 0 {\n        result /= 2\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkle1vgio/tmpkle1vgio.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ee3a63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ee375ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ee375a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ee37597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkle1vgio                        0x000055cf902c524d <unavailable> + 4685

    5    libc.so.6                          0x00002b8ee3c4f460 __libc_start_main +
    245

    6    tmpkle1vgio                        0x000055cf902c4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = -1\n\n    if x > y {\n        biggest = y\n\
    \    } else {\n        biggest = x\n    }\n\n    while even < biggest {\n    \
    \    even = even + 2\n        if even > biggest {\n            even = biggest\n\
    \        }\n\n        if odd < biggest {\n            odd = odd + 1\n        }\n\
    \n        if even % 2 == 0 && odd % 2 == 0 {\n            biggest = even\n   \
    \     }\n    }\n\n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpd7ux4icd/tmpd7ux4icd.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fbfd39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fbfa30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fbfa30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fbfa2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd7ux4icd                        0x0000555d01cfb24d <unavailable> + 4685

    5    libc.so.6                          0x00002b6fbff25460 __libc_start_main +
    245

    6    tmpd7ux4icd                        0x0000555d01cfaef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return -1\n\
    \    }\n    \n    var even = Int()\n    var odd = Int()\n    \n    for var i =\
    \ x; i <= y; i++ {\n        if i % 2 == 0 {\n            even = i\n        } else\
    \ {\n            odd = i\n        }\n    }\n    \n    if even > y {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpje2u_0ck.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var num: Int\n    \n    if x % 2 == 0 {\n        num = x\n \
    \   } else {\n        num = y\n    }\n    \n    while num % 2 == 0 {\n       \
    \ num /= 2\n    }\n    \n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp8e05vamw/tmp8e05vamw.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfc6e8cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfc6b83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfc6b83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfc6b827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8e05vamw                        0x0000556c0af5f24d <unavailable> + 4685

    5    libc.so.6                          0x00002acfc7078460 __libc_start_main +
    245

    6    tmp8e05vamw                        0x0000556c0af5eef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n      \
    \  return choose_num(x/2, y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x,\
    \ y/2)\n    }\n    if x == y / 2 {\n        return x\n    }\n    if y / 2 == x\
    \ {\n        return y\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpa51b36dx.swift:14:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x/2, y)\n                         ^\n      \
    \                    x:   y: \n/tmp/tmpa51b36dx.swift:17:26: error: missing argument\
    \ labels 'x:y:' in call\n        return choose_num(x, y/2)\n                 \
    \        ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        swap(x, y)\n\
    \    }\n    var num: Int = -1\n    var even: Int = 0\n    for _ in 0..<(x-y) {\n\
    \        even += 2\n        if even > y {\n            even = y\n        }\n \
    \       if even < x {\n            even = x\n        }\n        if even % 2 ==\
    \ 0 {\n            num = even\n        }\n    }\n    return num\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpfbju9ve2.swift:8:9: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(x, y)\n        ^    ~\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result % 2 == 0 {\n        result /= 2\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5uwhu90m/tmp5uwhu90m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba92046fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba920166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba920166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9201657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uwhu90m                        0x000055b89bf6424d <unavailable> + 4685

    5    libc.so.6                          0x00002ba92065b460 __libc_start_main +
    245

    6    tmp5uwhu90m                        0x000055b89bf63ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num: Int = -1\n    if x > y\
    \ {\n        (x, y) = (y, x)\n    }\n    for i in 0..<x {\n        if i % 2 ==\
    \ 0 {\n            num = i\n            break\n        }\n    }\n    for i in\
    \ 0..<y {\n        if i % 2 == 0 {\n            num = i\n            break\n \
    \       }\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpfta4_zn1.swift:9:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpfta4_zn1.swift:9:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        swap(x, y)\n\
    \    }\n    var max_num: Int = -1\n    var min_num: Int = x\n    for num in stride(from:\
    \ min_num, to: y, by: 2) {\n        if num % 2 == 0 {\n            if num > max_num\
    \ {\n                max_num = num\n            }\n            if num < min_num\
    \ {\n                min_num = num\n            }\n        }\n    }\n    return\
    \ max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4pz7_2ro.swift:8:9: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(x, y)\n        ^    ~\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return\
    \ -1\n    }\n    var max_num: Int = 0\n    var min_num: Int = x\n    while min_num\
    \ < y {\n        max_num = max_num * 2 + 1\n        min_num = min_num * 2 + 1\n\
    \    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpl4m67pjx/tmpl4m67pjx.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4dde0b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dddda7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dddda7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dddda67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4m67pjx                        0x0000555709e291bd <unavailable> + 4541

    5    libc.so.6                          0x00002b4dde29c460 __libc_start_main +
    245

    6    tmpl4m67pjx                        0x0000555709e28e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if even\
    \ % 2 == 0 {\n            even -= 1\n            biggest = even\n        } else\
    \ {\n            odd += 1\n        }\n    }\n    \n    while odd > 0 {\n     \
    \   if odd % 2 == 0 {\n            odd -= 1\n            biggest = odd\n     \
    \   } else {\n            even += 1\n        }\n    }\n    \n    return biggest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979024
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    while result\
    \ > 0 && result % 2 == 0 {\n        result /= 2\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkle1vgio/tmpkle1vgio.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ee3a63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ee375ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ee375a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ee37597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkle1vgio                        0x000055cf902c524d <unavailable> + 4685

    5    libc.so.6                          0x00002b8ee3c4f460 __libc_start_main +
    245

    6    tmpkle1vgio                        0x000055cf902c4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y) = (y,\
    \ x)\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    for i in 0..<x {\n\
    \        if i % 2 == 0 {\n            even += i\n        } else {\n          \
    \  odd += i\n        }\n    }\n    if even > y {\n        return even\n    } else\
    \ {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpazc8b5n1.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpazc8b5n1.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return -1\n\
    \    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for i in\
    \ 1..<x {\n        if i % 2 == 0 {\n            even += i\n        } else {\n\
    \            odd += i\n        }\n    }\n    \n    if even > y {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp8mlku1mb/tmp8mlku1mb.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab82de85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab82db7cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab82db7c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab82db7b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8mlku1mb                        0x0000563a7b31833d <unavailable> + 4925

    5    libc.so.6                          0x00002ab82e071460 __libc_start_main +
    245

    6    tmp8mlku1mb                        0x0000563a7b317fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num: Int = -1\n    if x > y\
    \ {\n        (x, y) = (y, x)\n    }\n    for i in 0..<y {\n        if x % 2 ==\
    \ 0 {\n            num = x\n            break\n        }\n        x /= 2\n   \
    \ }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpodbzp6aj.swift:9:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpodbzp6aj.swift:9:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n/tmp/tmpodbzp6aj.swift:16:11: error: left side of mutating\
    \ operator isn't mutable: 'x' is a 'let' constant\n        x /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n      \
    \  return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x,\
    \ y / 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7w7_8ome.swift:14:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmp7w7_8ome.swift:17:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result > 0 && result % 2 == 0 {\n        result = result / 2\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzlcqumz9/tmpzlcqumz9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30dab58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30da84fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30da84f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30da84e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlcqumz9                        0x000055fb5f5d224d <unavailable> + 4685

    5    libc.so.6                          0x00002b30dad44460 __libc_start_main +
    245

    6    tmpzlcqumz9                        0x000055fb5f5d1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result > 0 && result % 2 == 0 {\n        result = result / 2\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzlcqumz9/tmpzlcqumz9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30dab58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30da84fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30da84f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30da84e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlcqumz9                        0x000055fb5f5d224d <unavailable> + 4685

    5    libc.so.6                          0x00002b30dad44460 __libc_start_main +
    245

    6    tmpzlcqumz9                        0x000055fb5f5d1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    for i in 0..<x {\n        if i\
    \ % 2 == 0 {\n            even += i\n        } else {\n            odd += i\n\
    \        }\n    }\n    \n    if even > y {\n        biggest = even\n    } else\
    \ {\n        biggest = odd\n    }\n    \n    return biggest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2vopigl7/tmp2vopigl7.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e9aa19c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e9a710b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e9a710988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e9a70f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vopigl7                        0x000055ba71d2233d <unavailable> + 4925

    5    libc.so.6                          0x00002b5e9ac05460 __libc_start_main +
    245

    6    tmp2vopigl7                        0x000055ba71d21fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    }\n    else {\n        biggest = x\n \
    \       even = x\n        odd = y\n    }\n    \n    while even > 0 {\n       \
    \ if odd % 2 == 0 {\n            even -= 1\n            odd /= 2\n        }\n\
    \        else {\n            odd -= 1\n            even /= 2\n        }\n    }\n\
    \    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpaea5403j/tmpaea5403j.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84a3d84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84a3a7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84a3a7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84a3a7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaea5403j                        0x000055ffba84024d <unavailable> + 4685

    5    libc.so.6                          0x00002b84a3f70460 __libc_start_main +
    245

    6    tmpaea5403j                        0x000055ffba83fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    for num in 1...y {\n        if x % 2 == 0 {\n           \
    \ even = num\n        } else {\n            odd = num\n        }\n    }\n    \n\
    \    if even > odd {\n        return even\n    } else {\n        return odd\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4pij75m1/tmp4pij75m1.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a7aac8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a7a7bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a7a7bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a7a7be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4pij75m1                        0x000055660e0b833d <unavailable> + 4925

    5    libc.so.6                          0x00002b0a7acb4460 __libc_start_main +
    245

    6    tmp4pij75m1                        0x000055660e0b7fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    if x > y {\n        even = choose_num(y, x)\n    } else {\n\
    \        even = choose_num(x, y)\n    }\n    \n    if even % 2 == 0 {\n      \
    \  return even\n    } else {\n        odd = odd + 1\n        if odd > y {\n  \
    \          return -1\n        }\n        return choose_num(odd, y)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpuoiqbxfu.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpuoiqbxfu.swift:13:26: error: missing argument\
    \ labels 'x:y:' in call\n        even = choose_num(x, y)\n                   \
    \      ^\n                          x: y: \n/tmp/tmpuoiqbxfu.swift:23:26: error:\
    \ missing argument labels 'x:y:' in call\n        return choose_num(odd, y)\n\
    \                         ^\n                          x:   y: \n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    var biggestEven: Int = 0\n\n    if x\
    \ > y {\n        biggest = y\n        biggestEven = y\n    } else {\n        biggest\
    \ = x\n        biggestEven = x\n    }\n\n    while even < biggest {\n        even\
    \ += 2\n        odd = even % 2\n        if odd > biggestEven {\n            biggestEven\
    \ = odd\n            biggest = even\n        }\n    }\n\n    return biggestEven\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplzci1340/tmplzci1340.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46e001ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46dfd11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46dfd11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46dfd107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplzci1340                        0x0000559f8051524d <unavailable> + 4685

    5    libc.so.6                          0x00002b46e0206460 __libc_start_main +
    245

    6    tmplzci1340                        0x0000559f80514ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    while result\
    \ % 2 == 0 {\n        result /= 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpb0vrlwmd/tmpb0vrlwmd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac632124c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac631e1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac631e1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac631e1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0vrlwmd                        0x00005568ce8ed24d <unavailable> + 4685

    5    libc.so.6                          0x00002ac632310460 __libc_start_main +
    245

    6    tmpb0vrlwmd                        0x00005568ce8ecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    var even: Int = 0\n    var odd: Int = 0\n    while even < y {\n  \
    \      even = even + x\n        if even % 2 == 0 {\n            return even\n\
    \        }\n    }\n    while odd < y {\n        odd = odd + x\n        if odd\
    \ % 2 == 1 {\n            return odd\n        }\n    }\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6cziwngf/tmp6cziwngf.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c182e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c17fd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c17fd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c17fd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6cziwngf                        0x0000563e8a87024d <unavailable> + 4685

    5    libc.so.6                          0x00002b9c184cd460 __libc_start_main +
    245

    6    tmp6cziwngf                        0x0000563e8a86fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for i\
    \ in 1..<result {\n        if result % 2 == 0 {\n            result = result /\
    \ 2\n        } else {\n            result = result * 3 + 1\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp585tzcuz/tmp585tzcuz.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab791ee7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab791bdeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab791bde988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab791bdd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp585tzcuz                        0x000055e7ff6c733d <unavailable> + 4925

    5    libc.so.6                          0x00002ab7920d3460 __libc_start_main +
    245

    6    tmp585tzcuz                        0x000055e7ff6c6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result % 2 == 0 {\n        result /= 2\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5uwhu90m/tmp5uwhu90m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba92046fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba920166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba920166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9201657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uwhu90m                        0x000055b89bf6424d <unavailable> + 4685

    5    libc.so.6                          0x00002ba92065b460 __libc_start_main +
    245

    6    tmp5uwhu90m                        0x000055b89bf63ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return\
    \ -1\n    }\n    var max_num: Int = 0\n    var min_num: Int = 0\n    for num in\
    \ stride(from: x, through: y, by: 2) {\n        if num % 2 == 0 {\n          \
    \  max_num = max(num, max_num)\n            min_num = min(num, min_num)\n    \
    \    }\n    }\n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_2bop897/tmp_2bop897.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fcb93dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fcb634b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fcb634988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fcb6337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2bop897                        0x0000564648e615ed <unavailable> + 5613

    5    libc.so.6                          0x00002b4fcbb29460 __libc_start_main +
    245

    6    tmp_2bop897                        0x0000564648e61219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even = Int()\n    var odd =\
    \ Int()\n    var result = Int()\n    \n    if x > y {\n        (x, y) = (y, x)\n\
    \    }\n    \n    for i in 0..<y {\n        if x % 2 == 0 {\n            even\
    \ = even + Int(x / 2)\n        }\n        else {\n            odd = odd + Int(x\
    \ / 2)\n        }\n        x = x - Int(x / 2)\n    }\n    \n    if even > odd\
    \ {\n        result = even\n    }\n    else {\n        result = odd\n    }\n \
    \   \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpa0bomfq_.swift:12:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpa0bomfq_.swift:12:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n/tmp/tmpa0bomfq_.swift:22:9: error: cannot assign to value:\
    \ 'x' is a 'let' constant\n        x = x - Int(x / 2)\n        ^\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if odd\
    \ % 2 == 0 {\n            even -= 1\n            odd /= 2\n        } else {\n\
    \            odd -= 1\n        }\n    }\n    \n    return biggest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpgcftavz0/tmpgcftavz0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab543097c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab542d8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab542d8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab542d8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgcftavz0                        0x000055d881d7b24d <unavailable> + 4685

    5    libc.so.6                          0x00002ab543283460 __libc_start_main +
    245

    6    tmpgcftavz0                        0x000055d881d7aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    for i in 0..<y {\n        if i\
    \ % 2 == 0 {\n            even += i\n        } else {\n            odd += i\n\
    \        }\n    }\n    \n    if even > biggest {\n        biggest = even\n   \
    \ }\n    \n    if odd > biggest {\n        biggest = odd\n    }\n    \n    if\
    \ biggest == 0 {\n        return -1\n    }\n    \n    return biggest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpikw8bk3c/tmpikw8bk3c.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1599402c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15990f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15990f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15990f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpikw8bk3c                        0x00005606aa34d33d <unavailable> + 4925

    5    libc.so.6                          0x00002b15995ee460 __libc_start_main +
    245

    6    tmpikw8bk3c                        0x00005606aa34cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    \n    if x\
    \ > y {\n        (x, y) = (y, x)\n    }\n    \n    for _ in 0..<(x-y) {\n    \
    \    let num = x + y\n        if num % 2 == 0 {\n            result = num\n  \
    \          break\n        }\n        \n        x += 2\n        y += 2\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmptu4tgwa5.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmptu4tgwa5.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n/tmp/tmptu4tgwa5.swift:20:11: error: left side of mutating\
    \ operator isn't mutable: 'x' is a 'let' constant\n        x += 2\n        ~ ^\n\
    /tmp/tmptu4tgwa5.swift:21:11: error: left side of mutating operator isn't mutable:\
    \ 'y' is a 'let' constant\n        y += 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    var even: Int = 0\n    var odd: Int = 0\n    for i in 0..<(x-y) {\n\
    \        if (x+y) % 2 == 0 {\n            even += i\n        } else {\n      \
    \      odd += i\n        }\n    }\n    if even > odd {\n        return even\n\
    \    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp5d_9zyj_/tmp5d_9zyj_.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33edf8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33edc86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33edc86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33edc857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5d_9zyj_                        0x0000561791cb233d <unavailable> + 4925

    5    libc.so.6                          0x00002b33ee17b460 __libc_start_main +
    245

    6    tmp5d_9zyj_                        0x0000561791cb1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num: Int = 0\n    var even:\
    \ Bool = false\n    \n    if x > y {\n        num = x\n        even = true\n \
    \   } else {\n        num = y\n        even = false\n    }\n    \n    if even\
    \ {\n        while num > 0 {\n            if num % 2 == 0 {\n                num\
    \ /= 2\n            } else {\n                num -= 1\n            }\n      \
    \  }\n    } else {\n        while num > 0 {\n            if num % 2 == 0 {\n \
    \               num -= 1\n            } else {\n                num /= 2\n   \
    \         }\n        }\n    }\n    \n    return num\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpcqaaqh_a/tmpcqaaqh_a.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b613aabcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b613a7b3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b613a7b3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b613a7b27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcqaaqh_a                        0x00005633584f624d <unavailable> + 4685

    5    libc.so.6                          0x00002b613aca8460 __libc_start_main +
    245

    6    tmpcqaaqh_a                        0x00005633584f5ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var num: Int = 0\n    var even: Bool = false\n    \n    for\
    \ _ in 0..<(x-y) {\n        num += 1\n        \n        if num % 2 == 0 {\n  \
    \          even = true\n        }\n    }\n    \n    if even {\n        return\
    \ num\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxsdgqsvn/tmpxsdgqsvn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b18ecd21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b18eca18b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b18eca18988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b18eca177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxsdgqsvn                        0x0000564eb7ffa33d <unavailable> + 4925

    5    libc.so.6                          0x00002b18ecf0d460 __libc_start_main +
    245

    6    tmpxsdgqsvn                        0x0000564eb7ff9fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    for i in 0..<x {\n        if i\
    \ % 2 == 0 {\n            even += i\n        } else {\n            odd += i\n\
    \        }\n    }\n    \n    if even > biggest {\n        biggest = even\n   \
    \ }\n    \n    if odd > biggest {\n        biggest = odd\n    }\n    \n    if\
    \ biggest > y {\n        return -1\n    }\n    \n    return biggest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpu2p2zkwy/tmpu2p2zkwy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a6e08cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a6dd83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a6dd83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a6dd827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2p2zkwy                        0x000055e77cb2a33d <unavailable> + 4925

    5    libc.so.6                          0x00002b0a6e278460 __libc_start_main +
    245

    6    tmpu2p2zkwy                        0x000055e77cb29fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        odd = x\n        even = y\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if even\
    \ % 2 == 0 {\n            even = even / 2\n            biggest = biggest + 1\n\
    \        } else {\n            even = even / 2\n            odd = odd + 1\n  \
    \      }\n    }\n    \n    while odd > 0 {\n        if odd % 2 == 0 {\n      \
    \      odd = odd / 2\n            biggest = biggest + 1\n        } else {\n  \
    \          odd = odd / 2\n            even = even + 1\n        }\n    }\n    \n\
    \    if biggest > x {\n        biggest = x\n    }\n    \n    if biggest < y {\n\
    \        biggest = y\n    }\n    \n    return biggest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpwykq85aw/tmpwykq85aw.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f7be3bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f7bb32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f7bb32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f7bb317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwykq85aw                        0x000055ef4a0af24d <unavailable> + 4685

    5    libc.so.6                          0x00002b6f7c027460 __libc_start_main +
    245

    6    tmpwykq85aw                        0x000055ef4a0aeef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    if x > y {\n        even = choose_num(y, x)\n    } else {\n\
    \        odd = choose_num(x, y)\n    }\n    \n    if even % 2 == 0 {\n       \
    \ return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpwq9zq3_7.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpwq9zq3_7.swift:13:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    }\n    else {\n        biggest = x\n \
    \       even = x\n        odd = y\n    }\n    \n    while even > 0 {\n       \
    \ if odd % 2 == 0 {\n            even -= 1\n            odd /= 2\n        }\n\
    \        else {\n            odd -= 1\n            even /= 2\n        }\n    }\n\
    \    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpaea5403j/tmpaea5403j.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84a3d84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84a3a7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84a3a7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84a3a7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaea5403j                        0x000055ffba84024d <unavailable> + 4685

    5    libc.so.6                          0x00002b84a3f70460 __libc_start_main +
    245

    6    tmpaea5403j                        0x000055ffba83fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for i\
    \ in 1...result {\n        if result % 2 == 0 {\n            return i\n      \
    \  }\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp9ofkbgbw/tmp9ofkbgbw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b176258fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1762286b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1762286988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17622857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9ofkbgbw                        0x000055c4fda8933d <unavailable> + 4925

    5    libc.so.6                          0x00002b176277b460 __libc_start_main +
    245

    6    tmp9ofkbgbw                        0x000055c4fda88fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    if x > y {\n        even = choose_num(y, x)\n    } else {\n\
    \        odd = choose_num(x, y)\n    }\n    \n    if even > 0 {\n        return\
    \ even\n    } else if odd > 0 {\n        return odd\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpqzkt11cx.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpqzkt11cx.swift:13:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = -1\n    \n    for i in 0..<(x-y) {\n       \
    \ if (x%2 == 0 && y%2 == 0) {\n            even = even + 1\n        }\n      \
    \  else if y%2 == 0 {\n            odd = odd + 1\n        }\n        else {\n\
    \            biggest = even > odd ? even : odd\n        }\n    }\n    \n    return\
    \ biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/Range.swift:743: Fatal error: Range requires lowerBound <= upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4768478c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b476816f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b476816f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b476816f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b476816ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_l7so4g3                        0x000055848b7d382f <unavailable> + 6191

    6    tmp_l7so4g3                        0x000055848b7d32d0 <unavailable> + 4816

    7    libc.so.6                          0x00002b4768664460 __libc_start_main +
    245

    8    tmp_l7so4g3                        0x000055848b7d2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for i in\
    \ 0..<x {\n        if i % 2 == 0 {\n            even += i\n        } else {\n\
    \            odd += i\n        }\n    }\n    \n    if even > y {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpi9t33cpy/tmpi9t33cpy.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e8db5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e8d853b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e8d853988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e8d8527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi9t33cpy                        0x000056545aa1b33d <unavailable> + 4925

    5    libc.so.6                          0x00002b5e8dd48460 __libc_start_main +
    245

    6    tmpi9t33cpy                        0x000056545aa1afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var num: Int = 0\n    \n    for num in x ... y {\n        if num\
    \ % 2 == 0 {\n            even = even * 2 + num\n        } else {\n          \
    \  odd = odd * 2 + num\n        }\n    }\n    \n    if even > odd {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpownltf86/tmpownltf86.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b032afd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b032accab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b032acca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b032acc97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpownltf86                        0x0000559aa805433d <unavailable> + 4925

    5    libc.so.6                          0x00002b032b1bf460 __libc_start_main +
    245

    6    tmpownltf86                        0x0000559aa8053fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x % 2 ==\
    \ 0 {\n        return choose_num(x + 1, y)\n    }\n    \n    if y % 2 == 0 {\n\
    \        return choose_num(x, y + 1)\n    }\n    \n    return -1\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpwm6j81ym.swift:16:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x + 1, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpwm6j81ym.swift:20:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y + 1)\n      \
    \                   ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y) = (y,\
    \ x)\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    for num in 1...y\
    \ {\n        if x % num == 0 {\n            even = num\n            break\n  \
    \      }\n    }\n    for num in 1...x {\n        if y % num == 0 {\n         \
    \   odd = num\n            break\n        }\n    }\n    if even > odd {\n    \
    \    return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpts6umrnd.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpts6umrnd.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        swap(&x, &y)\n    }\n    for i in 1..<x {\n        if x % i == 0 {\n\
    \            if y % i == 0 {\n                result = i\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpd5fgmzuz.swift:9:14: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(&x, &y)\n             ^~\n/tmp/tmpd5fgmzuz.swift:9:18:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \        swap(&x, &y)\n                 ^~\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        (x, y) = (y, x)\n    }\n    for i in 0..<x {\n        if x % 2 == 0 {\n\
    \            if y % 2 == 0 {\n                result = i\n                break\n\
    \            }\n            y /= 2\n        } else {\n            if y % 2 ==\
    \ 0 {\n                result = i\n                break\n            }\n    \
    \        x /= 2\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpt8dkwlic.swift:9:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpt8dkwlic.swift:9:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n/tmp/tmpt8dkwlic.swift:17:15: error: left side of mutating\
    \ operator isn't mutable: 'y' is a 'let' constant\n            y /= 2\n      \
    \      ~ ^\n/tmp/tmpt8dkwlic.swift:23:15: error: left side of mutating operator\
    \ isn't mutable: 'x' is a 'let' constant\n            x /= 2\n            ~ ^\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    for var i = x; i <= y; i++ {\n        if i % 2 == 0 {\n \
    \           even = i\n        } else {\n            odd = i\n        }\n    }\n\
    \    \n    if even > odd { return even }\n    else { return odd }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpbumhec7u.swift:10:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result > 0 && result % 2 == 0 {\n        result = result / 2\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzlcqumz9/tmpzlcqumz9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30dab58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30da84fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30da84f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30da84e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlcqumz9                        0x000055fb5f5d224d <unavailable> + 4685

    5    libc.so.6                          0x00002b30dad44460 __libc_start_main +
    245

    6    tmpzlcqumz9                        0x000055fb5f5d1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y) = (y,\
    \ x)\n    }\n    var result: Int = 0\n    var even: Int = 0\n    var odd: Int\
    \ = 0\n    for i in 0..<y {\n        if i % 2 == 0 {\n            even += x\n\
    \        } else {\n            odd += x\n        }\n    }\n    if even > odd {\n\
    \        result = even\n    } else {\n        result = odd\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpp4nnx1x7.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpp4nnx1x7.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var result = x\n    \n    for _ in 0..<y {\n        if result\
    \ % 2 == 0 {\n            result = result / 2\n        } else {\n            return\
    \ -1\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp4r5t87bv/tmp4r5t87bv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba32a94ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba32a641b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba32a641988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba32a6407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4r5t87bv                        0x000055f42b50c33d <unavailable> + 4925

    5    libc.so.6                          0x00002ba32ab36460 __libc_start_main +
    245

    6    tmp4r5t87bv                        0x000055f42b50bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result: Int = 0\n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    \n\
    \    if x > y {\n        (x, y) = (y, x)\n    }\n    \n    for x in 1...y {\n\
    \        for y in 1...x {\n            if x % 2 == 0 && y % 2 == 0 {\n       \
    \         even = even * x + even\n                odd += x\n                \n\
    \                if even > y {\n                    result = even\n          \
    \          break\n                }\n                \n                if even\
    \ < y {\n                    result = odd\n                    break\n       \
    \         }\n            }\n        }\n    }\n    \n    if result == 0 {\n   \
    \     return -1\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002baa8c02bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa8bd22561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002baa8bd22286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002baa8bd2213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002baa8bd21bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpetq8002f                        0x000055eab789c895 <unavailable> + 6293

    6    tmpetq8002f                        0x000055eab789c2d0 <unavailable> + 4816

    7    libc.so.6                          0x00002baa8c217460 __libc_start_main +
    245

    8    tmpetq8002f                        0x000055eab789bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        (x, y) = (y, x)\n    }\n    for i in 0..<x {\n        if i % 2 == 0 {\n\
    \            result = i\n            break\n        }\n    }\n    if result ==\
    \ -1 {\n        return -1\n    }\n    for i in 0..<y {\n        if i % 2 == 0\
    \ {\n            result = i\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmtwcpdi3.swift:9:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpmtwcpdi3.swift:9:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    for i in 0..<x {\n        if i\
    \ % 2 == 0 {\n            even = even + i\n        }\n        else {\n       \
    \     odd = odd + i\n        }\n    }\n    \n    for i in 0..<y {\n        if\
    \ i % 2 == 0 {\n            even = even + i\n        }\n        else {\n     \
    \       odd = odd + i\n        }\n    }\n    \n    if even > biggest {\n     \
    \   biggest = even\n    }\n    \n    if odd > biggest {\n        biggest = odd\n\
    \    }\n    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpn3pod8ck/tmpn3pod8ck.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aacb4500c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacb41f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aacb41f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aacb41f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn3pod8ck                        0x000055818d77f33d <unavailable> + 4925

    5    libc.so.6                          0x00002aacb46ec460 __libc_start_main +
    245

    6    tmpn3pod8ck                        0x000055818d77efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for _ in\
    \ 0..<(x-y) {\n        if x % 2 == 0 {\n            even = even + x\n        }\n\
    \        else {\n            odd = odd + x\n        }\n        x = x + 1\n   \
    \ }\n    \n    if even > y {\n        return even\n    }\n    \n    return odd\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpmaphfx5v.swift:21:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = x + 1\n        ^\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num: Int\n    if x > y {\n \
    \       num = x\n    } else {\n        num = y\n    }\n    var even: Int = 0\n\
    \    var odd: Int = 0\n    while num > 0 {\n        even = num % 2\n        odd\
    \ = num / 2\n        if even > odd {\n            num = even\n        } else {\n\
    \            num = odd\n        }\n    }\n    return num\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979025
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result > 0 && result % 2 == 0 {\n        result = result / 2\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzlcqumz9/tmpzlcqumz9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30dab58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30da84fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30da84f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30da84e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlcqumz9                        0x000055fb5f5d224d <unavailable> + 4685

    5    libc.so.6                          0x00002b30dad44460 __libc_start_main +
    245

    6    tmpzlcqumz9                        0x000055fb5f5d1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result: Int = 0\n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    \n    for i in 0..<x {\n        if i % 2\
    \ == 0 {\n            even = even + i\n        } else {\n            odd = odd\
    \ + i\n        }\n    }\n    \n    if even > y {\n        result = even\n    }\
    \ else {\n        result = odd\n    }\n    \n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmph0bn3i3c/tmph0bn3i3c.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd90e1dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd90b14b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd90b14988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd90b137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0bn3i3c                        0x000055efef6b633d <unavailable> + 4925

    5    libc.so.6                          0x00002acd91009460 __libc_start_main +
    245

    6    tmph0bn3i3c                        0x000055efef6b5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var biggest = Int()\n    var even = Int()\n    \n    for i in\
    \ 0..<y {\n        if x % 2 == 0 {\n            even = x + i\n            if even\
    \ > biggest {\n                biggest = even\n            }\n        }\n    }\n\
    \    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpu5dopmpm/tmpu5dopmpm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c1e1e5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c1dedcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c1dedc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c1dedb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu5dopmpm                        0x0000565362b8c33d <unavailable> + 4925

    5    libc.so.6                          0x00002b4c1e3d1460 __libc_start_main +
    245

    6    tmpu5dopmpm                        0x0000565362b8bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y) = (y,\
    \ x)\n    }\n    \n    var result = -1\n    \n    for i in 0..<y {\n        if\
    \ x % 2 == 0 {\n            if result < i {\n                result = i\n    \
    \        }\n        }\n        x /= 2\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpgyy4fwku.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpgyy4fwku.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n/tmp/tmpgyy4fwku.swift:19:11: error: left side of mutating\
    \ operator isn't mutable: 'x' is a 'let' constant\n        x /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y % 2 ==\
    \ 0 {\n        return choose_num(x / 2, y / 2)\n    }\n    if x % 2 == 0 {\n \
    \       return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return\
    \ choose_num(x, y / 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpn00tz2k5.swift:14:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y / 2)\n                         ^\n\
    \                          x:     y: \n/tmp/tmpn00tz2k5.swift:17:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x / 2, y)\n      \
    \                   ^\n                          x:     y: \n/tmp/tmpn00tz2k5.swift:20:26:\
    \ error: missing argument labels 'x:y:' in call\n        return choose_num(x,\
    \ y / 2)\n                         ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    }\n    else {\n        biggest = x\n \
    \       even = x\n        odd = y\n    }\n    \n    while even > 0 {\n       \
    \ if odd % 2 == 0 {\n            even -= 1\n            odd /= 2\n        }\n\
    \        else {\n            odd -= 1\n            even /= 2\n        }\n    }\n\
    \    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpaea5403j/tmpaea5403j.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b84a3d84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b84a3a7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b84a3a7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b84a3a7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaea5403j                        0x000055ffba84024d <unavailable> + 4685

    5    libc.so.6                          0x00002b84a3f70460 __libc_start_main +
    245

    6    tmpaea5403j                        0x000055ffba83fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n    var\
    \ y: Int = 0\n    \n    while x < y {\n        even = even + x\n        odd =\
    \ odd + y\n        x = even + odd\n        y = even + odd\n    }\n    return even\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpr9pz_8gn/tmpr9pz_8gn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b754b36cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b754b063b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b754b063988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b754b0627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9pz_8gn                        0x000055f6fd53b1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b754b558460 __libc_start_main +
    245

    6    tmpr9pz_8gn                        0x000055f6fd53ae69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var num: Int = 0\n    \n    if x > y {\n        even = choose_num(y,\
    \ x)\n    } else {\n        even = choose_num(x, y)\n    }\n    \n    if even\
    \ % 2 == 0 {\n        odd = even / 2\n    } else {\n        odd = even + 1\n \
    \   }\n    \n    if odd > x {\n        num = odd\n    } else {\n        num =\
    \ x\n    }\n    \n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpvu39nuwp.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpvu39nuwp.swift:14:26: error: missing argument\
    \ labels 'x:y:' in call\n        even = choose_num(x, y)\n                   \
    \      ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 && y % 2 ==\
    \ 0 {\n        return x + y\n    }\n    if x % 2 == 0 && y % 2 != 0 {\n      \
    \  return y\n    }\n    if x % 2 != 0 && y % 2 == 0 {\n        return x\n    }\n\
    \    if x % 2 != 0 && y % 2 != 0 {\n        return y\n    }\n    return -1\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmph9u2635o/tmph9u2635o.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b432df16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b432dc0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b432dc0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b432dc0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph9u2635o                        0x000055fb5fa0724d <unavailable> + 4685

    5    libc.so.6                          0x00002b432e102460 __libc_start_main +
    245

    6    tmph9u2635o                        0x000055fb5fa06ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    for i in 0..<x {\n        if i % 2 == 0 {\n            even\
    \ = even * 2 + i\n        } else {\n            odd = odd * 2 + i\n        }\n\
    \    }\n    \n    if even > y {\n        return -1\n    } else if even < y {\n\
    \        return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp100o9quj/tmp100o9quj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b70cfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b709f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b709f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b709f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp100o9quj                        0x000055c1e200833d <unavailable> + 4925

    5    libc.so.6                          0x00002b5b70ee7460 __libc_start_main +
    245

    6    tmp100o9quj                        0x000055c1e2007fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for i\
    \ in 1..<result {\n        if result % 2 == 0 {\n            result = result /\
    \ 2\n        } else {\n            result = result * 3 + 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpea_yb3s8/tmpea_yb3s8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5aaaecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5aa7e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5aa7e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5aa7e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpea_yb3s8                        0x000055cb5a84633d <unavailable> + 4925

    5    libc.so.6                          0x00002af5aacd8460 __libc_start_main +
    245

    6    tmpea_yb3s8                        0x000055cb5a845fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var num: Int = 0\n    \n    if x > y {\n        even = choose_num(y,\
    \ x)\n    } else {\n        even = choose_num(x, y)\n    }\n    \n    if even\
    \ % 2 == 0 {\n        odd = even / 2\n    } else {\n        odd = even + 1\n \
    \   }\n    \n    while odd > 0 {\n        if odd % 2 == 0 {\n            num =\
    \ odd / 2\n        } else {\n            num = odd + 1\n        }\n        \n\
    \        if num >= x && num <= y {\n            return num\n        }\n      \
    \  \n        odd = num\n    }\n    \n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpcfz13fsw.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpcfz13fsw.swift:14:26: error: missing argument\
    \ labels 'x:y:' in call\n        even = choose_num(x, y)\n                   \
    \      ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    var biggest = Int()\n    var even = Int()\n    var odd = Int()\n \
    \   for i in 0..<(x-y) {\n        if i % 2 == 0 {\n            even += i\n   \
    \     } else {\n            odd += i\n        }\n    }\n    if even > biggest\
    \ {\n        biggest = even\n    }\n    if odd > biggest {\n        biggest =\
    \ odd\n    }\n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp81s_3fe5/tmp81s_3fe5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6379768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b637945fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b637945f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b637945e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp81s_3fe5                        0x000055d41f3ed33d <unavailable> + 4925

    5    libc.so.6                          0x00002b6379954460 __libc_start_main +
    245

    6    tmp81s_3fe5                        0x000055d41f3ecfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return\
    \ -1\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ i in 0..<y {\n        if i % 2 == 0 {\n            even = even + i\n       \
    \ } else {\n            odd = odd + i\n        }\n    }\n    \n    if even > x\
    \ {\n        return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpbd101pcm/tmpbd101pcm.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab443da9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab443aa0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab443aa0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab443a9f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbd101pcm                        0x000055a23e87b33d <unavailable> + 4925

    5    libc.so.6                          0x00002ab443f95460 __libc_start_main +
    245

    6    tmpbd101pcm                        0x000055a23e87afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y) = (y,\
    \ x)\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    var evenMax: Int = 0\n    var oddMax: Int = 0\n    while\
    \ x < y {\n        if x % 2 == 0 {\n            even += x\n            if even\
    \ > evenMax {\n                evenMax = even\n            }\n        } else {\n\
    \            odd += x\n            if odd > oddMax {\n                oddMax =\
    \ odd\n            }\n        }\n        x += 1\n        y += 1\n    }\n    if\
    \ evenMax < x {\n        return evenMax\n    } else {\n        return oddMax\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpq_uuskkn.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpq_uuskkn.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for i\
    \ in 0..<result {\n        if ((result % 2) == 0) {\n            result = result\
    \ / 2\n        } else {\n            result = result * 3 + 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzabiq7jd/tmpzabiq7jd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b509c87dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b509c574b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b509c574988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b509c5737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzabiq7jd                        0x00005634d134a33d <unavailable> + 4925

    5    libc.so.6                          0x00002b509ca69460 __libc_start_main +
    245

    6    tmpzabiq7jd                        0x00005634d1349fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    while result\
    \ > 0 && result % 2 == 0 {\n        result /= 2\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkle1vgio/tmpkle1vgio.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ee3a63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ee375ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ee375a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ee37597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkle1vgio                        0x000055cf902c524d <unavailable> + 4685

    5    libc.so.6                          0x00002b8ee3c4f460 __libc_start_main +
    245

    6    tmpkle1vgio                        0x000055cf902c4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even = Int()\n    var odd =\
    \ Int()\n    \n    if x > y {\n        even = choose_num(y, x)\n    } else {\n\
    \        odd = choose_num(x, y)\n    }\n    \n    if even % 2 == 0 {\n       \
    \ return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpes80mkbr.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpes80mkbr.swift:13:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return\
    \ -1\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    while x < y {\n        if x % 2 == 0 {\n            even\
    \ = even + x\n        }\n        else {\n            odd = odd + x\n        }\n\
    \        x = x + 1\n    }\n    if even > odd {\n        return even\n    }\n \
    \   return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpadsekml7/tmpadsekml7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab04b14dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab04ae44b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab04ae44988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab04ae437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpadsekml7                        0x000055ea535d224d <unavailable> + 4685

    5    libc.so.6                          0x00002ab04b339460 __libc_start_main +
    245

    6    tmpadsekml7                        0x000055ea535d1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x = x\n\
    \    var y = y\n    while x > y {\n        if x % 2 == 0 {\n            x = x\
    \ / 2\n        } else {\n            y = y / 2\n        }\n    }\n    if x ==\
    \ y {\n        result = x\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp949dmikt/tmp949dmikt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b444e09dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b444dd94b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b444dd94988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b444dd937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp949dmikt                        0x00005651c995424d <unavailable> + 4685

    5    libc.so.6                          0x00002b444e289460 __libc_start_main +
    245

    6    tmp949dmikt                        0x00005651c9953ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    \n    if x\
    \ > y {\n        result = x\n    } else {\n        result = y\n    }\n    \n \
    \   if result % 2 == 0 {\n        return result\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp307opvl3/tmp307opvl3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeb742fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeb7126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeb7126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeb71257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp307opvl3                        0x0000559fe4be224d <unavailable> + 4685

    5    libc.so.6                          0x00002aaeb761b460 __libc_start_main +
    245

    6    tmp307opvl3                        0x0000559fe4be1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    var even = Int()\n    var odd = Int()\n    var biggest = Int()\n \
    \   for num in 1...y {\n        if x % num == 0 {\n            even = num\n  \
    \      } else {\n            odd = num\n        }\n        if even > biggest {\n\
    \            biggest = even\n        }\n        if odd > biggest {\n         \
    \   biggest = odd\n        }\n    }\n    return biggest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_hfmvxmv/tmp_hfmvxmv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7d1d94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad7d1a8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad7d1a8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7d1a8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hfmvxmv                        0x00005588e57e533d <unavailable> + 4925

    5    libc.so.6                          0x00002ad7d1f80460 __libc_start_main +
    245

    6    tmp_hfmvxmv                        0x00005588e57e4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for num\
    \ in stride(from: x, through: y, by: 2) {\n        if num % 2 == 0 {\n       \
    \     result = num\n            break\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp_y1k985q/tmp_y1k985q.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af47e00fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af47dd06b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af47dd06988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af47dd057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_y1k985q                        0x000055cd9fe6647d <unavailable> + 5245

    5    libc.so.6                          0x00002af47e1fb460 __libc_start_main +
    245

    6    tmp_y1k985q                        0x000055cd9fe66129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    if result\
    \ % 2 == 0 {\n        return result\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqpcm0yqo/tmpqpcm0yqo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26d7779c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26d7470b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26d7470988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26d746f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpcm0yqo                        0x000055cf69ba524d <unavailable> + 4685

    5    libc.so.6                          0x00002b26d7965460 __libc_start_main +
    245

    6    tmpqpcm0yqo                        0x000055cf69ba4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return\
    \ -1\n    }\n    var biggest = Int()\n    var even = Int()\n    var odd = Int()\n\
    \    var i = Int()\n    var j = Int()\n    for i = x to y {\n        if i % 2\
    \ == 0 {\n            even = even * 2 + i\n        } else {\n            odd =\
    \ odd * 2 + i\n        }\n    }\n    if even > biggest {\n        biggest = even\n\
    \    }\n    if odd > biggest {\n        biggest = odd\n    }\n    return biggest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpbynu8yfj.swift:15:11: error: expected 'in' after for-each pattern\n\
    \    for i = x to y {\n          ^\n/tmp/tmpbynu8yfj.swift:15:11: error: expected\
    \ Sequence expression for for-each loop\n    for i = x to y {\n          ^\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if odd\
    \ % 2 == 0 {\n            even -= 1\n            odd /= 2\n        } else {\n\
    \            odd -= 1\n            even /= 2\n        }\n    }\n    \n    return\
    \ biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzmsbstcy/tmpzmsbstcy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae77c9c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae77c6bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae77c6ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae77c6b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmsbstcy                        0x000055f1690e324d <unavailable> + 4685

    5    libc.so.6                          0x00002ae77cbaf460 __libc_start_main +
    245

    6    tmpzmsbstcy                        0x000055f1690e2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result > 0 && result % 2 == 0 {\n        result /= 2\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp669_ez91/tmp669_ez91.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1735d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1735a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1735a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1735a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp669_ez91                        0x0000562448c4924d <unavailable> + 4685

    5    libc.so.6                          0x00002b1735f37460 __libc_start_main +
    245

    6    tmp669_ez91                        0x0000562448c48ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    \n    if x\
    \ > y {\n        result = x\n    } else {\n        result = y\n    }\n    \n \
    \   while result % 2 == 0 {\n        result = result / 2\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpk5s0cxmf/tmpk5s0cxmf.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ccbe15c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ccbb0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ccbb0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ccbb0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk5s0cxmf                        0x000055ab9f8b024d <unavailable> + 4685

    5    libc.so.6                          0x00002b3ccc001460 __libc_start_main +
    245

    6    tmpk5s0cxmf                        0x000055ab9f8afef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return\
    \ -1\n    }\n    \n    var biggest = y\n    \n    for num in 1...y {\n       \
    \ if num % 2 == 0 {\n            if num > biggest {\n                biggest =\
    \ num\n            }\n        }\n    }\n    \n    return biggest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmptiy50k8o/tmptiy50k8o.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4cc7f51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4cc7c48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4cc7c48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4cc7c477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptiy50k8o                        0x000055ec8055b33d <unavailable> + 4925

    5    libc.so.6                          0x00002b4cc813d460 __libc_start_main +
    245

    6    tmptiy50k8o                        0x000055ec8055afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var biggest = Int()\n    if x >\
    \ y {\n        biggest = y\n    } else {\n        biggest = x\n    }\n    \n \
    \   for var i = biggest / 2; i > 0; i /= 2 {\n        if i % 2 == 0 {\n      \
    \      biggest = i\n        }\n    }\n    return biggest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp88ogjf2s.swift:14:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = biggest / 2; i > 0; i /= 2 {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num: Int = 0\n    \n    if x\
    \ > y {\n        num = x\n    } else {\n        num = y\n    }\n    \n    while\
    \ num > 0 {\n        if num % 2 == 0 {\n            num /= 2\n        } else {\n\
    \            num -= 1\n        }\n    }\n    \n    return num\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp6z7bhppv/tmp6z7bhppv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c8bad2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c8b7c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c8b7c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c8b7c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6z7bhppv                        0x0000560018d3b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b3c8bcbe460 __libc_start_main +
    245

    6    tmp6z7bhppv                        0x0000560018d3aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    if x > y {\n        even = choose_num(y, x)\n    } else {\n\
    \        odd = choose_num(x, y)\n    }\n    \n    if even > -1 {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp2ve5d5pt.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp2ve5d5pt.swift:13:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y) = (y,\
    \ x)\n    }\n    var max_num = x\n    for num in stride(from: x, through: y, by:\
    \ 2) {\n        if num % 2 == 0 {\n            max_num = num\n        }\n    }\n\
    \    if max_num == x {\n        return -1\n    }\n    return max_num\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpj5wa5qsy.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpj5wa5qsy.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = x - y\n    } else {\n        biggest = x\n        even = y - x\n\
    \    }\n    \n    while even > 0 {\n        odd += even\n        even -= 2\n \
    \   }\n    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3722j0sw/tmp3722j0sw.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f67548c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f6723fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f6723f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f6723e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3722j0sw                        0x0000563d05e8a1bd <unavailable> + 4541

    5    libc.so.6                          0x00002b8f67734460 __libc_start_main +
    245

    6    tmp3722j0sw                        0x0000563d05e89e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for i in\
    \ 0..<(x-y) {\n        if i % 2 == 0 {\n            even += i\n        } else\
    \ {\n            odd += i\n        }\n    }\n    \n    if even > y {\n       \
    \ return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp46lbi8vz/tmp46lbi8vz.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b84959c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b84650b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b84650988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b8464f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp46lbi8vz                        0x0000564a206f433d <unavailable> + 4925

    5    libc.so.6                          0x00002b3b84b45460 __libc_start_main +
    245

    6    tmp46lbi8vz                        0x0000564a206f3fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x = x -\
    \ 1\n    var y = y - 1\n    while x >= y {\n        if x % 2 == 0 {\n        \
    \    result = x\n            x = x - 1\n        } else {\n            x = x -\
    \ 1\n        }\n    }\n    while y >= x {\n        if y % 2 == 0 {\n         \
    \   result = y\n            y = y - 1\n        } else {\n            y = y - 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmphv7ches7/tmphv7ches7.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba269e00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba269af7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba269af7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba269af67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphv7ches7                        0x0000563398ba324d <unavailable> + 4685

    5    libc.so.6                          0x00002ba269fec460 __libc_start_main +
    245

    6    tmphv7ches7                        0x0000563398ba2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num: Int = 0\n    var even:\
    \ Bool = false\n    for _ in 0..<y {\n        if even {\n            if num <\
    \ x {\n                num = x\n            } else {\n                num = y\n\
    \            }\n        } else {\n            if num > x {\n                num\
    \ = x\n            } else {\n                num = y\n            }\n        }\n\
    \        even = !even\n    }\n    return num\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpd921kmwq/tmpd921kmwq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af99b35cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af99b053b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af99b053988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af99b0527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd921kmwq                        0x0000558fa1d8b33d <unavailable> + 4925

    5    libc.so.6                          0x00002af99b548460 __libc_start_main +
    245

    6    tmpd921kmwq                        0x0000558fa1d8afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y) = (y,\
    \ x)\n    }\n    var even: Int = 0\n    var odd: Int = 0\n    var x: Int = 0\n\
    \    var y: Int = 0\n    \n    for _ in 0..<y {\n        x = x + 1\n        if\
    \ x % 2 == 0 {\n            even = even + 1\n        }\n        else {\n     \
    \       odd = odd + 1\n        }\n    }\n    \n    if even > y {\n        return\
    \ -1\n    }\n    \n    if odd > x {\n        return -1\n    }\n    \n    if even\
    \ < x {\n        return even\n    }\n    \n    return odd\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp7kgmjsrm.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp7kgmjsrm.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    var even: Int = 0\n    var\
    \ odd: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    while x < y {\n  \
    \      if x % 2 == 0 {\n            even = even + x\n        }\n        else {\n\
    \            odd = odd + x\n        }\n        x = x + 1\n        y = y + 1\n\
    \    }\n    if even > odd {\n        return even\n    }\n    return odd\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxntrdrh5/tmpxntrdrh5.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b7deffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b7dbf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b7dbf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b7dbf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxntrdrh5                        0x000055c5846f924d <unavailable> + 4685

    5    libc.so.6                          0x00002b6b7e0eb460 __libc_start_main +
    245

    6    tmpxntrdrh5                        0x000055c5846f8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x = x %\
    \ 2\n    var y = y % 2\n    while x >= y {\n        if x == y {\n            return\
    \ x\n        }\n        x /= 2\n        y /= 2\n    }\n    while y > x {\n   \
    \     if x == y {\n            return x\n        }\n        y /= 2\n    }\n  \
    \  while x > y {\n        if x == y {\n            return x\n        }\n     \
    \   x /= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmpunc4m1i6/tmpunc4m1i6.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae151978c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae15166fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae15166f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae15166e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpunc4m1i6                        0x0000564418c8324d <unavailable> + 4685

    5    libc.so.6                          0x00002ae151b64460 __libc_start_main +
    245

    6    tmpunc4m1i6                        0x0000564418c82ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 && odd > 0 {\n \
    \       if even % 2 == 0 {\n            even -= 1\n        } else {\n        \
    \    odd -= 1\n        }\n    }\n    \n    if even > 0 {\n        biggest = even\n\
    \    } else {\n        biggest = odd\n    }\n    \n    return biggest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp12wio4my/tmp12wio4my.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7db197c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7dae8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7dae8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7dae8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12wio4my                        0x000055f20633624d <unavailable> + 4685

    5    libc.so.6                          0x00002af7db383460 __libc_start_main +
    245

    6    tmp12wio4my                        0x000055f206335ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    var max_num: Int\n    if x > y {\n        max_num = x\n    } else\
    \ {\n        max_num = y\n    }\n    for i in 1..max_num {\n        if i % 2 ==\
    \ 0 {\n            return i\n        }\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp40hyg5ug.swift:16:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..max_num {\n              ^~\n         \
    \     ...\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        swap(x, y)\n    }\n    for var i = x; i <= y; i++ {\n        if i % 2\
    \ == 0 {\n            result = i\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmphheh4mt8.swift:11:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmphheh4mt8.swift:9:9: error: cannot pass immutable value as inout argument:\
    \ 'x' is a 'let' constant\n        swap(x, y)\n        ^    ~\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    \n    if x\
    \ > y {\n        result = x\n    } else {\n        result = y\n    }\n    \n \
    \   if result % 2 == 0 {\n        return result\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp307opvl3/tmp307opvl3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaeb742fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaeb7126b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaeb7126988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaeb71257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp307opvl3                        0x0000559fe4be224d <unavailable> + 4685

    5    libc.so.6                          0x00002aaeb761b460 __libc_start_main +
    245

    6    tmp307opvl3                        0x0000559fe4be1ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y) = (y,\
    \ x)\n    }\n    var result: Int = 0\n    var even: Int = 0\n    var odd: Int\
    \ = 0\n    while x <= y {\n        if x % 2 == 0 {\n            even = even *\
    \ 2 + x\n        } else {\n            odd = odd * 2 + x\n        }\n        x\
    \ += 1\n    }\n    if even > odd {\n        result = even\n    } else {\n    \
    \    result = odd\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpiy3ouqv4.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpiy3ouqv4.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n/tmp/tmpiy3ouqv4.swift:19:11: error: left side of mutating\
    \ operator isn't mutable: 'x' is a 'let' constant\n        x += 1\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even = Int()\n    var odd =\
    \ Int()\n    var result = Int()\n    \n    if x > y {\n        even = choose_num(y,\
    \ x)\n        odd = choose_num(x, y)\n    } else {\n        even = choose_num(x,\
    \ y)\n        odd = choose_num(y, x)\n    }\n    \n    if even % 2 == 0 && odd\
    \ % 2 == 0 {\n        result = even\n    } else {\n        result = -1\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmphh9ibzit.swift:12:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmphh9ibzit.swift:13:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n/tmp/tmphh9ibzit.swift:15:26: error:\
    \ missing argument labels 'x:y:' in call\n        even = choose_num(x, y)\n  \
    \                       ^\n                          x: y: \n/tmp/tmphh9ibzit.swift:16:25:\
    \ error: missing argument labels 'x:y:' in call\n        odd = choose_num(y, x)\n\
    \                        ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        swap(&x, &y)\n    }\n    for var i = x; i <= y; i++ {\n        if i %\
    \ 2 == 0 {\n            result = i\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp8okua5sj.swift:11:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp8okua5sj.swift:9:14: error: cannot pass immutable value as inout argument:\
    \ 'x' is a 'let' constant\n        swap(&x, &y)\n             ^~\n/tmp/tmp8okua5sj.swift:9:18:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \        swap(&x, &y)\n                 ^~\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if even\
    \ % 2 == 0 {\n            even -= 1\n        } else {\n            even += 2\n\
    \        }\n    }\n    \n    while odd > 0 {\n        if odd % 2 == 0 {\n    \
    \        odd -= 1\n        } else {\n            odd += 2\n        }\n    }\n\
    \    \n    if even > biggest {\n        biggest = even\n    }\n    \n    if odd\
    \ > biggest {\n        biggest = odd\n    }\n    \n    return biggest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var num: Int = 0\n    var even:\
    \ Int = 0\n    var odd: Int = 0\n    \n    if x > y {\n        num = x\n     \
    \   even = y\n        odd = x\n    } else {\n        num = y\n        even = x\n\
    \        odd = y\n    }\n    \n    while even > 0 {\n        if even % 2 == 0\
    \ {\n            even -= 1\n        } else {\n            odd += 1\n        }\n\
    \    }\n    \n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var even =\
    \ 1\n    var odd = 0\n    while even < y && odd < x {\n        if even % 2 ==\
    \ 0 {\n            even = even + 2\n        } else {\n            odd = odd +\
    \ 1\n        }\n    }\n    if even < y {\n        result = even\n    } else {\n\
    \        result = odd\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmptny65l8b/tmptny65l8b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8ca3b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8ca0adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8ca0ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8ca0ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptny65l8b                        0x0000563816f0e24d <unavailable> + 4685

    5    libc.so.6                          0x00002ae8ca5a2460 __libc_start_main +
    245

    6    tmptny65l8b                        0x0000563816f0def9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    \n    while x < y {\n \
    \       if x % 2 == 0 {\n            even = even + 1\n        } else {\n     \
    \       odd = odd + 1\n        }\n        x = x + 1\n    }\n    \n    if even\
    \ > odd {\n        return even\n    } else {\n        return odd\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpou3r45s1/tmpou3r45s1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b386f7e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b386f4ddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b386f4dd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b386f4dc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpou3r45s1                        0x000056420f6f924d <unavailable> + 4685

    5    libc.so.6                          0x00002b386f9d2460 __libc_start_main +
    245

    6    tmpou3r45s1                        0x000056420f6f8ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = -1\n    \n    if x > y {\n        biggest =\
    \ y\n    } else {\n        biggest = x\n    }\n    \n    while even < biggest\
    \ {\n        if x % 2 == 0 {\n            even = even + 1\n        } else {\n\
    \            odd = odd + 1\n        }\n        \n        if even > biggest {\n\
    \            biggest = even\n        }\n        \n        if odd > biggest {\n\
    \            biggest = odd\n        }\n    }\n    \n    return biggest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqa9i24pc/tmpqa9i24pc.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab14f6fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab14f3f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab14f3f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab14f3f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqa9i24pc                        0x000055e3a5b6224d <unavailable> + 4685

    5    libc.so.6                          0x00002ab14f8e7460 __libc_start_main +
    245

    6    tmpqa9i24pc                        0x000055e3a5b61ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    if x > y {\n        even = choose_num(y, x)\n    } else {\n\
    \        odd = choose_num(x, y)\n    }\n    \n    if even % 2 == 0 {\n       \
    \ return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpwq9zq3_7.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpwq9zq3_7.swift:13:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if odd\
    \ % 2 == 0 {\n            even -= 1\n            odd /= 2\n        } else {\n\
    \            odd -= 1\n            even /= 2\n        }\n    }\n    \n    return\
    \ biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzmsbstcy/tmpzmsbstcy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae77c9c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae77c6bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae77c6ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae77c6b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmsbstcy                        0x000055f1690e324d <unavailable> + 4685

    5    libc.so.6                          0x00002ae77cbaf460 __libc_start_main +
    245

    6    tmpzmsbstcy                        0x000055f1690e2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for i\
    \ in 0..<result {\n        if result % 2 == 0 {\n            return result\n \
    \       }\n        result /= 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvfnbi3ha/tmpvfnbi3ha.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c136a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c1339eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c1339e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c1339d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvfnbi3ha                        0x0000562b08bb533d <unavailable> + 4925

    5    libc.so.6                          0x00002b6c13893460 __libc_start_main +
    245

    6    tmpvfnbi3ha                        0x0000562b08bb4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y) = (y,\
    \ x)\n    }\n    \n    var result = -1\n    \n    for n in 1...y {\n        if\
    \ x % n == 0 {\n            result = n\n            break\n        }\n    }\n\
    \    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpwmo6oeop.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpwmo6oeop.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    \n    if x\
    \ > y {\n        swap(&x, &y)\n    }\n    \n    for i in 1..<x {\n        if x\
    \ % i == 0 {\n            if y % i == 0 {\n                result = i\n      \
    \          break\n            }\n        }\n    }\n    \n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmplt672n4s.swift:10:14: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(&x, &y)\n             ^~\n/tmp/tmplt672n4s.swift:10:18:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \        swap(&x, &y)\n                 ^~\n"
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result % 2 == 0 {\n        result /= 2\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5uwhu90m/tmp5uwhu90m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba92046fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba920166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba920166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9201657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uwhu90m                        0x000055b89bf6424d <unavailable> + 4685

    5    libc.so.6                          0x00002ba92065b460 __libc_start_main +
    245

    6    tmp5uwhu90m                        0x000055b89bf63ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var even =\
    \ 0\n    var odd = 0\n    var num = 0\n    \n    while even < y && odd < x {\n\
    \        num = even + odd\n        even = num / 2\n        odd = num % 2\n   \
    \     \n        if even > y {\n            even = y\n        }\n        \n   \
    \     if odd > x {\n            odd = x\n        }\n        \n        if even\
    \ > result {\n            result = even\n        }\n        \n        if odd >\
    \ result {\n            result = odd\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for i in\
    \ 0..<x {\n        if i % 2 == 0 {\n            even += i\n        } else {\n\
    \            odd += i\n        }\n    }\n    \n    if even > y {\n        return\
    \ even\n    }\n    \n    return odd\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp7bvdpc0r/tmp7bvdpc0r.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b60f5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b60c52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b60c52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b60c517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7bvdpc0r                        0x000056410290333d <unavailable> + 4925

    5    libc.so.6                          0x00002b8b61147460 __libc_start_main +
    245

    6    tmp7bvdpc0r                        0x0000564102902fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return choose_num(y,\
    \ x)\n    }\n    \n    var result: Int = 0\n    \n    for _ in 0..<(x-y) {\n \
    \       result += 1\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpd9_isyzq.swift:8:26: error: missing argument labels 'x:y:' in call\n\
    \        return choose_num(y, x)\n                         ^\n               \
    \           x: y: \n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    for i in 0..<x {\n        if i % 2 == 0 {\n            even\
    \ = i\n        } else {\n            odd = i\n        }\n    }\n    \n    if even\
    \ > y {\n        return even\n    } else {\n        return odd\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp2fhe0cxm/tmp2fhe0cxm.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb9034cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb90043b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb90043988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb900427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2fhe0cxm                        0x000055c1f050733d <unavailable> + 4925

    5    libc.so.6                          0x00002afb90538460 __libc_start_main +
    245

    6    tmp2fhe0cxm                        0x000055c1f0506fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    var even_biggest: Int = 0\n    var odd_biggest:\
    \ Int = 0\n    \n    if x > y {\n        biggest = y\n        even_biggest = y\n\
    \        odd_biggest = y\n    } else {\n        biggest = x\n        even_biggest\
    \ = x\n        odd_biggest = x\n    }\n    \n    while even < biggest {\n    \
    \    if even % 2 == 0 {\n            even_biggest = even\n            even++\n\
    \        } else {\n            odd_biggest = odd\n            odd++\n        }\n\
    \    }\n    \n    if even_biggest == biggest {\n        return even_biggest\n\
    \    } else {\n        return odd_biggest\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp3od9sxml.swift:26:17: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            even++\n                ^~\n/tmp/tmp3od9sxml.swift:29:16:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  odd++\n               ^~\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for i in\
    \ 0..<x {\n        if i % 2 == 0 {\n            even += i\n        } else {\n\
    \            odd += i\n        }\n    }\n    \n    if even > y {\n        return\
    \ -1\n    }\n    \n    if even < y {\n        return even\n    }\n    \n    return\
    \ odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp3pu3ggl0/tmp3pu3ggl0.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf0760ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf07305b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf07305988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf073047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3pu3ggl0                        0x00005578678be33d <unavailable> + 4925

    5    libc.so.6                          0x00002aaf077fa460 __libc_start_main +
    245

    6    tmp3pu3ggl0                        0x00005578678bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for i\
    \ in 1...result {\n        if result % 2 == 0 {\n            result = result /\
    \ 2\n        } else {\n            break\n        }\n    }\n    \n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpbouo48vh/tmpbouo48vh.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b212b69ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b212b391b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b212b391988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b212b3907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbouo48vh                        0x0000563680b5c33d <unavailable> + 4925

    5    libc.so.6                          0x00002b212b886460 __libc_start_main +
    245

    6    tmpbouo48vh                        0x0000563680b5bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    for num in 1...y {\n        if x % 2 == 0 {\n           \
    \ even = even * 2 + num\n        } else {\n            odd = odd + num\n     \
    \   }\n    }\n    \n    if even > odd {\n        return even\n    } else {\n \
    \       return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpkqtgvlps/tmpkqtgvlps.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1ebf70c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1ebc67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1ebc67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1ebc667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkqtgvlps                        0x000055f98673333d <unavailable> + 4925

    5    libc.so.6                          0x00002ad1ec15c460 __libc_start_main +
    245

    6    tmpkqtgvlps                        0x000055f986732fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even = Int()\n    var odd =\
    \ Int()\n    \n    if x > y {\n        even = choose_num(y, x)\n        odd =\
    \ choose_num(x, y)\n    } else {\n        even = choose_num(x, y)\n        odd\
    \ = choose_num(y, x)\n    }\n    \n    if even % 2 == 0 && odd % 2 == 0 {\n  \
    \      return even\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpe4qllwkv.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpe4qllwkv.swift:12:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n/tmp/tmpe4qllwkv.swift:14:26: error:\
    \ missing argument labels 'x:y:' in call\n        even = choose_num(x, y)\n  \
    \                       ^\n                          x: y: \n/tmp/tmpe4qllwkv.swift:15:25:\
    \ error: missing argument labels 'x:y:' in call\n        odd = choose_num(y, x)\n\
    \                        ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    while result\
    \ % 2 == 0 {\n        result /= 2\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpb0vrlwmd/tmpb0vrlwmd.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac632124c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac631e1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac631e1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac631e1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb0vrlwmd                        0x00005568ce8ed24d <unavailable> + 4685

    5    libc.so.6                          0x00002ac632310460 __libc_start_main +
    245

    6    tmpb0vrlwmd                        0x00005568ce8ecef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    if x > y {\n        even = choose_num(y, x)\n    } else {\n\
    \        even = choose_num(x, y)\n    }\n    \n    if even % 2 == 0 {\n      \
    \  return even\n    } else {\n        odd = odd + 1\n        if odd > y {\n  \
    \          return -1\n        } else {\n            return choose_num(x + 1, y)\n\
    \        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpzgrk99m1.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpzgrk99m1.swift:13:26: error: missing argument\
    \ labels 'x:y:' in call\n        even = choose_num(x, y)\n                   \
    \      ^\n                          x: y: \n/tmp/tmpzgrk99m1.swift:23:30: error:\
    \ missing argument labels 'x:y:' in call\n            return choose_num(x + 1,\
    \ y)\n                             ^\n                              x:     y:\
    \ \n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = -1\n\n    for num in 1...y {\n        if num\
    \ % 2 == 0 {\n            even = even * num + num\n        } else {\n        \
    \    odd = odd * num + num\n        }\n    }\n\n    if even > biggest {\n    \
    \    biggest = even\n    }\n\n    if odd > biggest {\n        biggest = odd\n\
    \    }\n\n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpu9sjbni6/tmpu9sjbni6.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b55f2502c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b55f21f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b55f21f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55f21f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu9sjbni6                        0x000055d22ac9133d <unavailable> + 4925

    5    libc.so.6                          0x00002b55f26ee460 __libc_start_main +
    245

    6    tmpu9sjbni6                        0x000055d22ac90fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x = x\n\
    \    var y = y\n    while x >= y {\n        if x % 2 == 0 {\n            if y\
    \ % 2 == 0 {\n                result = x\n                break\n            }\
    \ else {\n                result = y\n                break\n            }\n \
    \       } else {\n            if y % 2 == 0 {\n                result = y\n  \
    \              break\n            } else {\n                result = x\n     \
    \           break\n            }\n        }\n        x /= 2\n        y /= 2\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmps43k5jcq/tmps43k5jcq.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b503ba5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b503b752b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b503b752988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b503b7517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps43k5jcq                        0x000055ec1a20b24d <unavailable> + 4685

    5    libc.so.6                          0x00002b503bc47460 __libc_start_main +
    245

    6    tmps43k5jcq                        0x000055ec1a20aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var num: Int = 0\n    \n    if x > y {\n        num = x\n     \
    \   even = y\n    } else {\n        num = y\n        even = x\n    }\n    \n \
    \   while even > 0 {\n        odd = even % 2\n        even = even / 2\n      \
    \  if odd > 0 {\n            num = num + 1\n        }\n    }\n    \n    return\
    \ num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y: 15)\
    \ == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33, y:\
    \ 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpond7vpl1/tmpond7vpl1.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90c0f7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90c0c71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90c0c71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90c0c707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpond7vpl1                        0x0000555a2961824d <unavailable> + 4685

    5    libc.so.6                          0x00002b90c1166460 __libc_start_main +
    245

    6    tmpond7vpl1                        0x0000555a29617ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 && odd > 0 {\n \
    \       if even % 2 == 0 {\n            even -= 1\n        } else {\n        \
    \    odd -= 1\n        }\n    }\n    \n    if even > 0 {\n        biggest = even\n\
    \    } else {\n        biggest = odd\n    }\n    \n    return biggest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp12wio4my/tmp12wio4my.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7db197c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7dae8eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7dae8e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7dae8d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12wio4my                        0x000055f20633624d <unavailable> + 4685

    5    libc.so.6                          0x00002af7db383460 __libc_start_main +
    245

    6    tmp12wio4my                        0x000055f206335ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result % 2 == 0 {\n        result /= 2\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5uwhu90m/tmp5uwhu90m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba92046fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba920166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba920166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9201657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uwhu90m                        0x000055b89bf6424d <unavailable> + 4685

    5    libc.so.6                          0x00002ba92065b460 __libc_start_main +
    245

    6    tmp5uwhu90m                        0x000055b89bf63ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    if x > y {\n        even = choose_num(y, x)\n    } else {\n\
    \        even = choose_num(x, y)\n    }\n    \n    if even % 2 == 0 {\n      \
    \  return even\n    } else {\n        odd = odd + 1\n        if odd > y {\n  \
    \          return -1\n        }\n        return choose_num(odd, y)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpuoiqbxfu.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpuoiqbxfu.swift:13:26: error: missing argument\
    \ labels 'x:y:' in call\n        even = choose_num(x, y)\n                   \
    \      ^\n                          x: y: \n/tmp/tmpuoiqbxfu.swift:23:26: error:\
    \ missing argument labels 'x:y:' in call\n        return choose_num(odd, y)\n\
    \                         ^\n                          x:   y: \n"
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    if x > y {\n        even = choose_num(y, x)\n    } else {\n\
    \        odd = choose_num(x, y)\n    }\n    \n    if even > odd {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp_emc4mka.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp_emc4mka.swift:13:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        var temp = x\n        x = y\n        y = temp\n    }\n    for var i =\
    \ x; i <= y; i++ {\n        if i % 2 == 0 {\n            result = i\n        \
    \    break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpo76wsp3d.swift:13:5: error: C-style for statement has been removed\
    \ in Swift 3\n    for var i = x; i <= y; i++ {\n    ^   ~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpo76wsp3d.swift:10:9: error: cannot assign to value: 'x' is a 'let' constant\n\
    \        x = y\n        ^\n/tmp/tmpo76wsp3d.swift:11:9: error: cannot assign to\
    \ value: 'y' is a 'let' constant\n        y = temp\n        ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        (x, y) = (y, x)\n    }\n    for i in 0..<(x-y) {\n        if (x+y) %\
    \ 2 == 0 {\n            result = i\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp0kanvtje.swift:9:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp0kanvtje.swift:9:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x = x %\
    \ 2\n    var y = y % 2\n    while x >= y {\n        if x == y {\n            result\
    \ = x\n            break\n        }\n        x = x % 2\n        y = y % 2\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpmv951oqy/tmpmv951oqy.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b469f8ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b469f5e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b469f5e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b469f5e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmv951oqy                        0x0000559d2fc7c24d <unavailable> + 4685

    5    libc.so.6                          0x00002b469fad7460 __libc_start_main +
    245

    6    tmpmv951oqy                        0x0000559d2fc7bef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even = Int()\n    var odd =\
    \ Int()\n    \n    if x > y {\n        even = choose_num(y, x)\n        odd =\
    \ choose_num(x, y)\n    } else {\n        even = choose_num(x, y)\n        odd\
    \ = choose_num(y, x)\n    }\n    \n    if even % 2 == 0 && odd % 2 == 0 {\n  \
    \      return even\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpe4qllwkv.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpe4qllwkv.swift:12:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n/tmp/tmpe4qllwkv.swift:14:26: error:\
    \ missing argument labels 'x:y:' in call\n        even = choose_num(x, y)\n  \
    \                       ^\n                          x: y: \n/tmp/tmpe4qllwkv.swift:15:25:\
    \ error: missing argument labels 'x:y:' in call\n        odd = choose_num(y, x)\n\
    \                        ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var num: Int = x\n    \n    for _ in 0..<y {\n        if num\
    \ % 2 == 0 {\n            num = num / 2\n        } else {\n            num = num\
    \ * 3 + 1\n        }\n    }\n    \n    return num\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmptoirqdr6/tmptoirqdr6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b819c29cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b819bf93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b819bf93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b819bf927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptoirqdr6                        0x000056511a7ce33d <unavailable> + 4925

    5    libc.so.6                          0x00002b819c488460 __libc_start_main +
    245

    6    tmptoirqdr6                        0x000056511a7cdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if even\
    \ % 2 == 0 {\n            even -= 1\n            biggest = even\n        } else\
    \ {\n            odd += 1\n            biggest = odd\n        }\n    }\n    \n\
    \    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= 0 || y <= 0 {\n        return\
    \ -1\n    }\n    \n    if x == y {\n        return x\n    }\n    \n    if x >\
    \ y {\n        (x, y) = (y, x)\n    }\n    \n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    for i in 0..<x {\n        if i % 2 == 0 {\n            even\
    \ += i\n        }\n    }\n    \n    for i in 0..<y {\n        if i % 2 == 1 {\n\
    \            odd += i\n        }\n    }\n    \n    if even > odd {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpfus8rde0.swift:16:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpfus8rde0.swift:16:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        odd = x\n        even = y\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if odd\
    \ % 2 == 0 {\n            even -= 1\n            odd /= 2\n        } else {\n\
    \            odd -= 1\n        }\n    }\n    \n    return biggest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpe8rpozym/tmpe8rpozym.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1afe73ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1afe431b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1afe431988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1afe4307b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8rpozym                        0x0000555dc4d3524d <unavailable> + 4685

    5    libc.so.6                          0x00002b1afe926460 __libc_start_main +
    245

    6    tmpe8rpozym                        0x0000555dc4d34ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = -1\n    \n    if x > y {\n        biggest =\
    \ y\n        odd = x\n        even = y\n    } else {\n        biggest = x\n  \
    \      even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if\
    \ even % 2 == 0 {\n            even -= 1\n        } else {\n            even +=\
    \ 2\n        }\n    }\n    \n    while odd > 0 {\n        if odd % 2 == 0 {\n\
    \            odd -= 1\n        } else {\n            odd += 2\n        }\n   \
    \ }\n    \n    if biggest == -1 {\n        return -1\n    }\n    \n    if even\
    \ > biggest {\n        biggest = even\n    }\n    \n    if odd > biggest {\n \
    \       biggest = odd\n    }\n    \n    return biggest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    if x == y {\n        return x\n    }\n    if x % 2 == 0 {\n      \
    \  return choose_num(x / 2, y)\n    }\n    if y % 2 == 0 {\n        return choose_num(x,\
    \ y / 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpd2_aaz1d.swift:14:26: error: missing argument labels 'x:y:' in\
    \ call\n        return choose_num(x / 2, y)\n                         ^\n    \
    \                      x:     y: \n/tmp/tmpd2_aaz1d.swift:17:26: error: missing\
    \ argument labels 'x:y:' in call\n        return choose_num(x, y / 2)\n      \
    \                   ^\n                          x: y: \n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result % 2 == 0 {\n        result /= 2\n    }\n    \n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5uwhu90m/tmp5uwhu90m.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba92046fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba920166b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba920166988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba9201657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5uwhu90m                        0x000055b89bf6424d <unavailable> + 4685

    5    libc.so.6                          0x00002ba92065b460 __libc_start_main +
    245

    6    tmp5uwhu90m                        0x000055b89bf63ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var remainder\
    \ = x % y\n    while remainder != 0 {\n        if remainder % 2 == 0 {\n     \
    \       result = remainder\n            break\n        }\n        remainder =\
    \ remainder / 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp0mbv__mp/tmp0mbv__mp.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6824ceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68249e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68249e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68249e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0mbv__mp                        0x000055ecbe93024d <unavailable> + 4685

    5    libc.so.6                          0x00002b6824eda460 __libc_start_main +
    245

    6    tmp0mbv__mp                        0x000055ecbe92fef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    if x > y {\n        even = choose_num(y, x)\n        odd\
    \ = choose_num(x, y)\n    } else {\n        even = choose_num(x, y)\n        odd\
    \ = choose_num(y, x)\n    }\n    \n    if even % 2 == 0 && odd % 2 == 0 {\n  \
    \      return even\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpphf0s6zm.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmpphf0s6zm.swift:12:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n/tmp/tmpphf0s6zm.swift:14:26: error:\
    \ missing argument labels 'x:y:' in call\n        even = choose_num(x, y)\n  \
    \                       ^\n                          x: y: \n/tmp/tmpphf0s6zm.swift:15:25:\
    \ error: missing argument labels 'x:y:' in call\n        odd = choose_num(y, x)\n\
    \                        ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x > y {\n        (x, y) = (y,\
    \ x)\n    }\n    var result: Int = 0\n    var even: Bool = false\n    var x: Int\
    \ = 0\n    var y: Int = 0\n    while x <= y {\n        if even {\n           \
    \ if x == y {\n                return x\n            }\n            if x % 2 ==\
    \ 0 {\n                result = x\n            }\n            x += 2\n       \
    \ } else {\n            if x == y {\n                return x\n            }\n\
    \            if x % 2 == 1 {\n                result = x\n            }\n    \
    \        x += 2\n        }\n        even = !even\n    }\n    return -1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4jedqn4c.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp4jedqn4c.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for i\
    \ in 1..result {\n        if result % i == 0 {\n            return i\n       \
    \ }\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp9rla6qzu.swift:14:15: error: cannot find operator '..' in scope;\
    \ did you mean '...'?\n    for i in 1..result {\n              ^~\n          \
    \    ...\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y) = (y,\
    \ x)\n    }\n    var result: Int = 0\n    var even: Int = 0\n    var odd: Int\
    \ = 0\n    for _ in 0..<(x-y) {\n        result += 2\n        if result > y {\n\
    \            return -1\n        }\n        if result % 2 == 0 {\n            even\
    \ += 2\n        }\n        if result % 2 == 1 {\n            odd += 2\n      \
    \  }\n    }\n    if even > y {\n        return -1\n    }\n    if odd > y {\n \
    \       return -1\n    }\n    if even > x {\n        return result\n    }\n  \
    \  if odd > x {\n        return result\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpwi78el_5.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpwi78el_5.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    if result\
    \ % 2 == 0 {\n        return result\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpqpcm0yqo/tmpqpcm0yqo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26d7779c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26d7470b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26d7470988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26d746f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqpcm0yqo                        0x000055cf69ba524d <unavailable> + 4685

    5    libc.so.6                          0x00002b26d7965460 __libc_start_main +
    245

    6    tmpqpcm0yqo                        0x000055cf69ba4ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    for i in 0..<x {\n        if i\
    \ % 2 == 0 {\n            even = even + i\n        } else {\n            odd =\
    \ odd + i\n        }\n    }\n    \n    for i in 0..<y {\n        if i % 2 == 0\
    \ {\n            even = even + i\n        } else {\n            odd = odd + i\n\
    \        }\n    }\n    \n    if even > biggest {\n        biggest = even\n   \
    \ }\n    \n    if odd > biggest {\n        biggest = odd\n    }\n    \n    return\
    \ biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpv4h_ggy3/tmpv4h_ggy3.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba77b634c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba77b32bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba77b32b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba77b32a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4h_ggy3                        0x0000559d4f38b33d <unavailable> + 4925

    5    libc.so.6                          0x00002ba77b820460 __libc_start_main +
    245

    6    tmpv4h_ggy3                        0x0000559d4f38afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    var even_biggest: Int = 0\n    var odd_biggest:\
    \ Int = 0\n    \n    for i in 0..<x {\n        if i % 2 == 0 {\n            even\
    \ += i\n            if even > biggest {\n                biggest = even\n    \
    \            even_biggest = i\n            }\n        } else {\n            odd\
    \ += i\n            if odd > biggest {\n                biggest = odd\n      \
    \          odd_biggest = i\n            }\n        }\n    }\n    \n    if biggest\
    \ == x {\n        return even_biggest\n    } else if biggest == y {\n        return\
    \ odd_biggest\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp0ncjbla8/tmp0ncjbla8.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e833c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e830beb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e830be988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e830bd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ncjbla8                        0x000056152532f33d <unavailable> + 4925

    5    libc.so.6                          0x00002b8e835b3460 __libc_start_main +
    245

    6    tmp0ncjbla8                        0x000056152532efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    var even_biggest: Int = 0\n    var odd_biggest:\
    \ Int = 0\n    var biggest_even: Int = 0\n    var biggest_odd: Int = 0\n    var\
    \ biggest_even_biggest: Int = 0\n    var biggest_odd_biggest: Int = 0\n    var\
    \ biggest_even_biggest_odd: Int = 0\n    var biggest_odd_biggest_even: Int = 0\n\
    \    var biggest_even_biggest_odd_biggest: Int = 0\n    var biggest_odd_biggest_even_odd:\
    \ Int = 0\n    var biggest_even_biggest_odd_biggest_even: Int = 0\n    var biggest_odd_biggest_even_odd_biggest:\
    \ Int = 0\n    var biggest_even_biggest_odd_biggest_even_odd: Int = 0\n    var\
    \ biggest_odd_biggest_even_odd_biggest_even: Int = 0\n    var biggest_even_biggest_odd_biggest_even_odd_biggest:\
    \ Int = 0\n    var biggest_odd_biggest_even_odd_biggest_even_odd_biggest: Int\
    \ = 0\n    var biggest_even_biggest_odd_biggest_even_odd_biggest_even: Int = 0\n\
    \    var biggest_odd_biggest_even_odd_biggest_even_odd_biggest_even: Int = 0\n\
    \    var biggest_even_biggest_odd_biggest_even_odd_biggest_even_odd_biggest: Int\
    \ = 0\n    var biggest_odd_biggest_even_odd_biggest_even_odd_biggest_even_odd:\
    \ Int = 0\n    var biggest_even_biggest_odd_biggest_even_odd_biggest_even_odd_biggest_even:\
    \ Int = 0\n    var biggest_odd_biggest_even_odd_biggest_even_odd_biggest_even_odd_biggest:\
    \ Int = 0\n    var biggest_even_biggest_odd_biggest_even_odd_biggest_even_odd_biggest_even_odd:\
    \ Int = 0\n    var biggest_odd_biggest_even_odd_biggest_even_odd_biggest_even_odd_biggest_even_odd:\
    \ Int = 0\n    var biggest_even_biggest_odd_biggest_even_odd_biggest_even_odd_biggest_even_odd_biggest_even:\
    \ Int = 0\n    var biggest_odd_biggest_even_odd_biggest_even_odd_biggest_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpm88e0xr6.swift:35:9: error: type annotation missing in pattern\n\
    \    var biggest_odd_biggest_even_odd_biggest_even_odd_biggest_\n        ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var num: Int = 0\n    \n    for _ in 0..<(x-y) {\n        num\
    \ += 1\n    }\n    \n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\n\
    assert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233)\
    \ == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10)\
    \ == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546)\
    \ == 546)"
  status: Exception
  stderr: 'tmp28ugznt5/tmp28ugznt5.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ade9f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ade6ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ade6ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ade6eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28ugznt5                        0x0000556d8473333d <unavailable> + 4925

    5    libc.so.6                          0x00002b8adebe1460 __libc_start_main +
    245

    6    tmp28ugznt5                        0x0000556d84732fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    \n    if x > y {\n        even = choose_num(y, x)\n    } else {\n\
    \        odd = choose_num(x, y)\n    }\n    \n    if even > odd {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp_emc4mka.swift:11:26: error: missing argument labels 'x:y:' in\
    \ call\n        even = choose_num(y, x)\n                         ^\n        \
    \                  x: y: \n/tmp/tmp_emc4mka.swift:13:25: error: missing argument\
    \ labels 'x:y:' in call\n        odd = choose_num(x, y)\n                    \
    \    ^\n                         x: y: \n"
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        swap(&x, &y)\n    }\n    for number in 1...y {\n        if x % number\
    \ == 0 {\n            if number > result {\n                result = number\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpm_lur31s.swift:9:14: error: cannot pass immutable value as inout\
    \ argument: 'x' is a 'let' constant\n        swap(&x, &y)\n             ^~\n/tmp/tmpm_lur31s.swift:9:18:\
    \ error: cannot pass immutable value as inout argument: 'y' is a 'let' constant\n\
    \        swap(&x, &y)\n                 ^~\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x <= y {\n        return -1\n\
    \    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for i in\
    \ 0..<y {\n        if i % 2 == 0 {\n            even += x\n        } else {\n\
    \            odd += x\n        }\n    }\n    \n    if even > odd {\n        return\
    \ even\n    } else {\n        return odd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpd6wekjwd/tmpd6wekjwd.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3591bb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35918aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35918ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35918ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6wekjwd                        0x000055e6c44eb33d <unavailable> + 4925

    5    libc.so.6                          0x00002b3591da3460 __libc_start_main +
    245

    6    tmpd6wekjwd                        0x000055e6c44eafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    \n    if x\
    \ > y {\n        (x, y) = (y, x)\n    }\n    \n    for i in 0..<y {\n        if\
    \ x % 2 == 0 {\n            if result < i {\n                result = i\n    \
    \        }\n        }\n        x /= 2\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp4c2i37vu.swift:10:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp4c2i37vu.swift:10:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n/tmp/tmp4c2i37vu.swift:19:11: error: left side of mutating\
    \ operator isn't mutable: 'x' is a 'let' constant\n        x /= 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result > 0 {\n        if result % 2 == 0 {\n            result = result / 2\n\
    \        } else {\n            result = result * 3 + 1\n        }\n    }\n   \
    \ \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979026
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    var x = x -\
    \ 1\n    var y = y - 1\n    while x >= y {\n        if x % 2 == 0 && y % 2 ==\
    \ 0 {\n            result = x\n            break\n        }\n        x /= 2\n\
    \        y /= 2\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12)\
    \ == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x: 5234,\
    \ y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpvt0fy8uo/tmpvt0fy8uo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b03decf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b03de9e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b03de9e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b03de9e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvt0fy8uo                        0x0000560c17f0424d <unavailable> + 4685

    5    libc.so.6                          0x00002b03deedd460 __libc_start_main +
    245

    6    tmpvt0fy8uo                        0x0000560c17f03ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979019
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y) = (y,\
    \ x)\n    }\n    \n    var max_num: Int\n    \n    for num in 1...y {\n      \
    \  if x % num == 0 && num * num > max_num {\n            max_num = num * num\n\
    \        }\n    }\n    \n    if max_num == 0 {\n        return -1\n    }\n   \
    \ \n    return max_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmpg6ils9cw.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmpg6ils9cw.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        odd = x\n        even = y\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        biggest\
    \ = even % biggest\n        even = even / biggest\n    }\n    \n    while odd\
    \ > 0 {\n        biggest = odd % biggest\n        odd = odd / biggest\n    }\n\
    \    \n    return biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'Swift/IntegerTypes.swift:14137: Fatal error: Division by zero

    Current stack trace:

    0    libswiftCore.so                    0x00002b3154f1cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3154c13561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b3154c13286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b3154c1313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b3154c12bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7joqebjc                        0x0000559341c84847 <unavailable> + 6215

    6    tmp7joqebjc                        0x0000559341c841e0 <unavailable> + 4576

    7    libc.so.6                          0x00002b3155108460 __libc_start_main +
    245

    8    tmp7joqebjc                        0x0000559341c83ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    for i\
    \ in 1..<result {\n        if result % 2 == 0 {\n            return result\n \
    \       }\n        result -= 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x: 13,\
    \ y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmps6oo7e87/tmps6oo7e87.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3616e27c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3616b1eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3616b1e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3616b1d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6oo7e87                        0x0000559c14b663bd <unavailable> + 5053

    5    libc.so.6                          0x00002b3617013460 __libc_start_main +
    245

    6    tmps6oo7e87                        0x0000559c14b65fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        (x, y) = (y,\
    \ x)\n    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for\
    \ n in 1...y {\n        if x % n == 0 {\n            even = even * n + n\n   \
    \     }\n        else {\n            odd = odd * n + n\n        }\n    }\n   \
    \ \n    if even > x {\n        return even\n    }\n    \n    return odd\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp09955h3p.swift:8:10: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        (x, y) = (y, x)\n         ^\n/tmp/tmp09955h3p.swift:8:13:\
    \ error: cannot assign to value: 'y' is a 'let' constant\n        (x, y) = (y,\
    \ x)\n            ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    for num in 1...y {\n        if\
    \ num % 2 == 0 {\n            even = even + num\n        } else {\n          \
    \  odd = odd + num\n        }\n    }\n    \n    if even > biggest {\n        biggest\
    \ = even\n    }\n    \n    if odd > biggest {\n        biggest = odd\n    }\n\
    \    \n    if biggest == x {\n        return even\n    }\n    \n    return -1\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmptqsmq57i/tmptqsmq57i.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a79409c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a79100b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a79100988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a790ff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptqsmq57i                        0x00005635b02a933d <unavailable> + 4925

    5    libc.so.6                          0x00002b4a795f5460 __libc_start_main +
    245

    6    tmptqsmq57i                        0x00005635b02a8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var num: Int = 0\n    \n    for _ in 0..<y {\n        num =\
    \ num * 2 + 1\n    }\n    \n    for _ in 0..<x {\n        num = num * 2 + 2\n\
    \    }\n    \n    return num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(choose_num(x:\
    \ 12, y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp82c73wew/tmp82c73wew.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83e7881c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83e7578b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83e7578988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83e75777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp82c73wew                        0x0000563685c6a33d <unavailable> + 4925

    5    libc.so.6                          0x00002b83e7a6d460 __libc_start_main +
    245

    6    tmp82c73wew                        0x0000563685c69fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        odd = x\n        even = y\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 && odd > 0 {\n \
    \       if even % 2 == 0 {\n            even -= 1\n        } else {\n        \
    \    odd -= 1\n        }\n    }\n    \n    if even > 0 {\n        biggest = even\n\
    \    } else {\n        biggest = odd\n    }\n    \n    return biggest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp5wepvbmx/tmp5wepvbmx.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf3b017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf3ad0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf3ad0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf3ad0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5wepvbmx                        0x0000555851f3124d <unavailable> + 4685

    5    libc.so.6                          0x00002abf3b203460 __libc_start_main +
    245

    6    tmp5wepvbmx                        0x0000555851f30ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    var even: Int = 0\n    var odd: Int = 0\n    var biggest: Int = 0\n\
    \    while even < y {\n        if x % 2 == 0 {\n            even = even + x\n\
    \        } else {\n            odd = odd + x\n        }\n        if even > biggest\
    \ {\n            biggest = even\n        }\n        if odd > biggest {\n     \
    \       biggest = odd\n        }\n        x = x + 1\n    }\n    return biggest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp0yrja1c_.swift:25:9: error: cannot assign to value: 'x' is a 'let'\
    \ constant\n        x = x + 1\n        ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var even: Int = 0\n    var odd: Int = 0\n    \n    for i in\
    \ 0..<x {\n        if i % 2 == 0 {\n            even = even * 2 + i\n        }\
    \ else {\n            odd = odd * 2 + i\n        }\n    }\n    \n    if even >\
    \ y {\n        return even\n    } else {\n        return odd\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpgjl55j9w/tmpgjl55j9w.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba196663c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba19635ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba19635a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1963597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgjl55j9w                        0x0000561865a5b33d <unavailable> + 4925

    5    libc.so.6                          0x00002ba19684f460 __libc_start_main +
    245

    6    tmpgjl55j9w                        0x0000561865a5afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = y\n        odd = x\n    } else {\n        biggest = x\n      \
    \  even = x\n        odd = y\n    }\n    \n    while even > 0 {\n        if odd\
    \ % 2 == 0 {\n            even -= 1\n            odd /= 2\n        } else {\n\
    \            odd -= 1\n            even /= 2\n        }\n    }\n    \n    return\
    \ biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpzmsbstcy/tmpzmsbstcy.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae77c9c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae77c6bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae77c6ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae77c6b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzmsbstcy                        0x000055f1690e324d <unavailable> + 4685

    5    libc.so.6                          0x00002ae77cbaf460 __libc_start_main +
    245

    6    tmpzmsbstcy                        0x000055f1690e2ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    if x < y {\n        return -1\n\
    \    }\n    \n    var result = x\n    \n    for _ in 0..<y {\n        if result\
    \ % 2 == 0 {\n            return result\n        }\n        result /= 2\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12,\
    \ y: 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x:\
    \ 33, y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmplp0fhs_b/tmplp0fhs_b.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6da64fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6da346b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6da346988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6da3457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplp0fhs_b                        0x0000560c952e333d <unavailable> + 4925

    5    libc.so.6                          0x00002af6da83b460 __libc_start_main +
    245

    6    tmplp0fhs_b                        0x0000560c952e2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659979022
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var even: Int = 0\n    var odd:\
    \ Int = 0\n    var biggest: Int = 0\n    \n    if x > y {\n        biggest = y\n\
    \        even = x - y\n    } else {\n        biggest = x\n        even = y - x\n\
    \    }\n    \n    if even > 0 {\n        biggest = biggest + even\n    }\n   \
    \ \n    if odd > 0 {\n        biggest = biggest + odd\n    }\n    \n    return\
    \ biggest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmpxlbw5xfx/tmpxlbw5xfx.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b515c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b512b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b512b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b512b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxlbw5xfx                        0x0000558a487411bd <unavailable> + 4541

    5    libc.so.6                          0x00002b0b517ae460 __libc_start_main +
    245

    6    tmpxlbw5xfx                        0x0000558a48740e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659979022
- exit_code: 1
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    \n    if x\
    \ > y {\n        return -1\n    }\n    \n    for i in 0..<(x-y) {\n        if\
    \ (x+y) % 2 == 0 {\n            result = x\n            break\n        }\n   \
    \     \n        x += 2\n        y += 2\n    }\n    \n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(choose_num(x: 12, y: 15) == 14)\nassert(choose_num(x:\
    \ 13, y: 12) == -1)\nassert(choose_num(x: 33, y: 12354) == 12354)\nassert(choose_num(x:\
    \ 5234, y: 5233) == -1)\nassert(choose_num(x: 6, y: 29) == 28)\nassert(choose_num(x:\
    \ 27, y: 10) == -1)\nassert(choose_num(x: 7, y: 7) == -1)\nassert(choose_num(x:\
    \ 546, y: 546) == 546)"
  status: SyntaxError
  stderr: "/tmp/tmp3js0ja30.swift:19:11: error: left side of mutating operator isn't\
    \ mutable: 'x' is a 'let' constant\n        x += 2\n        ~ ^\n/tmp/tmp3js0ja30.swift:20:11:\
    \ error: left side of mutating operator isn't mutable: 'y' is a 'let' constant\n\
    \        y += 2\n        ~ ^\n"
  stdout: ''
  timestamp: 1659979021
- exit_code: -4
  program: "\n/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    func choose_num(x: Int, y: Int) -> Int {\n    var result = -1\n    if x > y {\n\
    \        result = x\n    } else {\n        result = y\n    }\n    \n    while\
    \ result > 0 && result % 2 == 0 {\n        result /= 2\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(choose_num(x: 12, y:\
    \ 15) == 14)\nassert(choose_num(x: 13, y: 12) == -1)\nassert(choose_num(x: 33,\
    \ y: 12354) == 12354)\nassert(choose_num(x: 5234, y: 5233) == -1)\nassert(choose_num(x:\
    \ 6, y: 29) == 28)\nassert(choose_num(x: 27, y: 10) == -1)\nassert(choose_num(x:\
    \ 7, y: 7) == -1)\nassert(choose_num(x: 546, y: 546) == 546)"
  status: Exception
  stderr: 'tmp669_ez91/tmp669_ez91.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1735d4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1735a42b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1735a42988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1735a417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp669_ez91                        0x0000562448c4924d <unavailable> + 4685

    5    libc.so.6                          0x00002b1735f37460 __libc_start_main +
    245

    6    tmp669_ez91                        0x0000562448c48ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1659979020
