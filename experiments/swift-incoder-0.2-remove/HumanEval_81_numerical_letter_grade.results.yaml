language: swift
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    if $0 > 3.0 {\n            gradesArray.append(\"A+\")\n        } else if\
    \ $0 > 2.7 {\n            gradesArray.append(\"A\")\n        } else if $0 > 2.3\
    \ {\n            gradesArray.append(\"A-\")\n        } else if $0 > 1.7 && $0\
    \ < 2.0 {\n            gradesArray.append(\"B+\")\n        } else if $0 > 1.3\
    \ && $0 < 2.7 {\n            gradesArray.append(\"B\")\n        } else if $0 >\
    \ 1.0 && $0 < 2.3 {\n            gradesArray.append(\"B-\")\n        } else if\
    \ $0 > 0.7 && $0 < 1.7 && $0 < 2.0 {\n            gradesArray.append(\"C+\")\n\
    \        } else if $0 > 0.3 && $0 < 1.7 && $0 < 2.7 {\n            gradesArray.append(\"\
    C\")\n        } else if $0 > 0.0 && $0 < 1.3 && $0 < 2.7 {\n            gradesArray.append(\"\
    C-\")\n        } else if $0 > 0.0 && $0 < 1.0 && $0 < 2.3 {\n            gradesArray.append(\"\
    D+\")\n        } else if $0 > 0.0 && $0 < 0.7 && $0 < 1.7 && $0 < 2.0 {\n    \
    \        gradesArray.append(\"D\")\n        } else if $0 > 0.0 && $0 < 0.3 &&\
    \ $0 < 1.7 && $0 < 2.7 {\n            gradesArray.append(\"D-\")\n        } else\
    \ if $0 > 0.0 && $0 < 0.0 && $0 < 1.3 && $0 < 2.7 {\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpkwboywr7/tmpkwboywr7.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afaf7c32c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afaf7929b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afaf7929988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afaf79287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwboywr7                        0x00005648884e36f6 <unavailable> + 5878

    5    libc.so.6                          0x00002afaf7e1e460 __libc_start_main +
    245

    6    tmpkwboywr7                        0x00005648884e3219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesArrayLength = gradesArray.count\n    var gradesArrayCopy = gradesArray\n\
    \    var gradesArrayCopyLength = gradesArrayCopy.count\n    var gradesArrayCopy2\
    \ = gradesArray\n    var gradesArrayCopy2Length = gradesArrayCopy2.count\n   \
    \ var gradesArrayCopy3 = gradesArray\n    var gradesArrayCopy3Length = gradesArrayCopy3.count\n\
    \    var gradesArrayCopy4 = gradesArray\n    var gradesArrayCopy4Length = gradesArrayCopy4.count\n\
    \    var gradesArrayCopy5 = gradesArray\n    var gradesArrayCopy5Length = gradesArrayCopy5.count\n\
    \    var gradesArrayCopy6 = gradesArray\n    var gradesArrayCopy6Length = gradesArrayCopy6.count\n\
    \    var gradesArrayCopy7 = gradesArray\n    var gradesArrayCopy7Length = gradesArrayCopy7.count\n\
    \    var gradesArrayCopy8 = gradesArray\n    var gradesArrayCopy8Length = gradesArrayCopy8.count\n\
    \    var gradesArrayCopy9 = gradesArray\n    var gradesArrayCopy9Length = gradesArrayCopy9.count\n\
    \    var gradesArrayCopy10 = gradesArray\n    var gradesArrayCopy10Length = gradesArrayCopy10.count\n\
    \    var gradesArrayCopy11 = gradesArray\n    var gradesArrayCopy11Length = gradesArrayCopy11.count\n\
    \    var gradesArrayCopy12 = gradesArray\n    var gradesArrayCopy12Length = gradesArrayCopy12.count\n\
    \    var gradesArrayCopy13 = gradesArray\n    var gradesArrayCopy13Length = gradesArrayCopy13.count\n\
    \    var gradesArrayCopy14 = gradesArray\n    var gradesArrayCopy14Length = gradesArrayCopy14.count\n\
    \    var gradesArrayCopy15 = gradesArray\n    var gradesArrayCopy15Length = gradesArrayCopy15.count\n\
    \    var gradesArrayCopy16 = gradesArray\n    var gradesArrayCopy16Length = gradesArrayCopy16.count\n\
    \    var gradesArrayCopy17 = gradesArray\n    var gradesArrayCopy17Length = gradesArrayCopy17.count\n\
    \    var gradesArrayCopy18 = gradesArray\n    var gradesArrayCopy18Length = gradesArrayCopy18.count\n\
    \    var gradesArrayCopy19 = gradesArray\n    var gradesArrayCopy19Length = gradesArrayCopy19.count\n\
    \    var gradesArrayCopy20 = gradesArray\n    var gradesArrayCopy20Length = gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpw4cebnke.swift:25:9: warning: initialization of variable 'gradesArrayLength'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayLength = gradesArray.count\n    ~~~~^~~~~~~~~~~~~~~~~\n   \
    \ _\n/tmp/tmpw4cebnke.swift:26:9: warning: variable 'gradesArrayCopy' was never\
    \ mutated; consider changing to 'let' constant\n    var gradesArrayCopy = gradesArray\n\
    \    ~~~ ^\n    let\n/tmp/tmpw4cebnke.swift:27:9: warning: initialization of variable\
    \ 'gradesArrayCopyLength' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var gradesArrayCopyLength = gradesArrayCopy.count\n\
    \    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpw4cebnke.swift:28:9: warning: variable\
    \ 'gradesArrayCopy2' was never mutated; consider changing to 'let' constant\n\
    \    var gradesArrayCopy2 = gradesArray\n    ~~~ ^\n    let\n/tmp/tmpw4cebnke.swift:29:9:\
    \ warning: initialization of variable 'gradesArrayCopy2Length' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var gradesArrayCopy2Length\
    \ = gradesArrayCopy2.count\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpw4cebnke.swift:30:9:\
    \ warning: variable 'gradesArrayCopy3' was never mutated; consider changing to\
    \ 'let' constant\n    var gradesArrayCopy3 = gradesArray\n    ~~~ ^\n    let\n\
    /tmp/tmpw4cebnke.swift:31:9: warning: initialization of variable 'gradesArrayCopy3Length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy3Length = gradesArrayCopy3.count\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpw4cebnke.swift:32:9: warning: variable 'gradesArrayCopy4' was\
    \ never mutated; consider changing to 'let' constant\n    var gradesArrayCopy4\
    \ = gradesArray\n    ~~~ ^\n    let\n/tmp/tmpw4cebnke.swift:33:9: warning: initialization\
    \ of variable 'gradesArrayCopy4Length' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var gradesArrayCopy4Length = gradesArrayCopy4.count\n\
    \    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpw4cebnke.swift:34:9: warning:\
    \ variable 'gradesArrayCopy5' was never mutate"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        if grade < 3.0 {\n            gradesArray.append(\"A+\")\n      \
    \  } else if grade >= 3.0 && grade < 3.7 {\n            gradesArray.append(\"\
    A\")\n        } else if grade >= 3.7 && grade < 3.3 {\n            gradesArray.append(\"\
    A-\")\n        } else if grade >= 3.3 && grade < 3.0 {\n            gradesArray.append(\"\
    B+\")\n        } else if grade >= 3.0 && grade < 2.7 {\n            gradesArray.append(\"\
    B\")\n        } else if grade >= 2.7 && grade < 2.3 {\n            gradesArray.append(\"\
    B-\")\n        } else if grade >= 2.3 && grade < 2.0 {\n            gradesArray.append(\"\
    C+\")\n        } else if grade >= 2.0 && grade < 1.7 {\n            gradesArray.append(\"\
    C\")\n        } else if grade >= 1.7 && grade < 1.3 {\n            gradesArray.append(\"\
    C-\")\n        } else if grade >= 1.3 && grade < 1.0 {\n            gradesArray.append(\"\
    D+\")\n        } else if grade >= 1.0 && grade < 0.7 {\n            gradesArray.append(\"\
    D\")\n        } else if grade >= 0.7 && grade < 0.0 {\n            gradesArray.append(\"\
    D-\")\n        } else {\n            gradesArray.append(\"E\")\n        }\n  \
    \  }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9w3jsa9x/tmp9w3jsa9x.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac59bfc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac59bcb9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac59bcb9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac59bcb87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9w3jsa9x                        0x00005595cecac7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ac59c1ae460 __libc_start_main +
    245

    6    tmp9w3jsa9x                        0x00005595cecac319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b61cc16bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61cbe62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b61cbe62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b61cbe6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b61cbe61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptnx6flla                        0x0000556a3800d337 <unavailable> + 9015

    6    tmptnx6flla                        0x0000556a3800c73d <unavailable> + 5949

    7    libc.so.6                          0x00002b61cc357460 __libc_start_main +
    245

    8    tmptnx6flla                        0x0000556a3800c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 0...4.0:\n            gradesArray.append(\"\
    A+\")\n        case 4.1...5.0:\n            gradesArray.append(\"A\")\n      \
    \  case 5.1...6.0:\n            gradesArray.append(\"A-\")\n        case 6.1...7.0:\n\
    \            gradesArray.append(\"B+\")\n        case 7.1...8.0:\n           \
    \ gradesArray.append(\"B\")\n        case 8.1...9.0:\n            gradesArray.append(\"\
    B-\")\n        case 9.1...10.0:\n            gradesArray.append(\"C+\")\n    \
    \    case 10.1...11.0:\n            gradesArray.append(\"C\")\n        case 11.1...12.0:\n\
    \            gradesArray.append(\"C-\")\n        case 12.1...13.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 13.1...14.0:\n            gradesArray.append(\"\
    D\")\n        case 14.1...15.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 15.1...16.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpoumcnurg/tmpoumcnurg.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1abd9d3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1abd6cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1abd6ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1abd6c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoumcnurg                        0x00005653da6008d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b1abdbbf460 __libc_start_main +
    245

    6    tmpoumcnurg                        0x00005653da6003f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    switch $0 {\n        case 4.0:\n            gradesArray.append(\"A+\")\n\
    \        case 3.7...3.3:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n    \
    \        gradesArray.append(\"B+\")\n        case 2.7...2.3:\n            gradesArray.append(\"\
    B\")\n        case 2.3...2.0:\n            gradesArray.append(\"B-\")\n      \
    \  case 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7...1.3:\n\
    \            gradesArray.append(\"C\")\n        case 1.3...1.0:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7...1.0:\n            gradesArray.append(\"D\")\n        case 0.0:\n     \
    \       gradesArray.append(\"D-\")\n        case 0...0.1:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ad304e64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad304b5b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad304b5b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad304b5b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad304b5abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpo9tj0l18                        0x000056087d74625f <unavailable> + 8799

    6    tmpo9tj0l18                        0x000056087d746f40 <unavailable> + 12096

    7    libswiftCore.so                    0x00002ad304bbf800 Sequence.forEach(_:)
    + 420

    8    tmpo9tj0l18                        0x000056087d746092 <unavailable> + 8338

    9    tmpo9tj0l18                        0x000056087d74568d <unavailable> + 5773

    10   libc.so.6                          0x00002ad305050460 __libc_start_main +
    245

    11   tmpo9tj0l18                        0x000056087d745349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            break\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpd3_0z2yn/tmpd3_0z2yn.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f2d191c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f2ce88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f2ce88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f2ce877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd3_0z2yn                        0x0000556b95c9f7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b2f2d37d460 __libc_start_main +
    245

    6    tmpd3_0z2yn                        0x0000556b95c9f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if grade > 2.7 {\n            gradesArray.append(\"A\")\n        } else if grade\
    \ > 2.3 {\n            gradesArray.append(\"A-\")\n        } else if grade > 1.7\
    \ && grade < 2.0 {\n            gradesArray.append(\"B+\")\n        } else if\
    \ grade > 1.3 && grade < 1.7 {\n            gradesArray.append(\"B\")\n      \
    \  } else if grade > 1.0 && grade < 1.3 {\n            gradesArray.append(\"B-\"\
    )\n        } else if grade > 0.7 && grade < 1.0 {\n            gradesArray.append(\"\
    C+\")\n        } else if grade > 0.3 && grade < 0.7 {\n            gradesArray.append(\"\
    C\")\n        } else if grade > 0.0 {\n            gradesArray.append(\"C-\")\n\
    \        } else {\n            gradesArray.append(\"D+\")\n        }\n    }\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpk2we_8g5/tmpk2we_8g5.swift:63: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b159cf92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b159cc89b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b159cc89988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b159cc887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk2we_8g5                        0x0000558917aeb7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b159d17e460 __libc_start_main +
    245

    6    tmpk2we_8g5                        0x0000558917aeb319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    var gpa = grades.reduce(0, combine: +)\n    var gpaLetterGrade = String()\n\
    \    var gpaLetterGradeArray = [String]()\n    var gpaLetterGradeArrayIndex =\
    \ 0\n    var gpaLetterGradeArrayIndex2 = 0\n    var gpaLetterGradeArrayIndex3\
    \ = 0\n    var gpaLetterGradeArrayIndex4 = 0\n    var gpaLetterGradeArrayIndex5\
    \ = 0\n    var gpaLetterGradeArrayIndex6 = 0\n    var gpaLetterGradeArrayIndex7\
    \ = 0\n    var gpaLetterGradeArrayIndex8 = 0\n    var gpaLetterGradeArrayIndex9\
    \ = 0\n    var gpaLetterGradeArrayIndex10 = 0\n    var gpaLetterGradeArrayIndex11\
    \ = 0\n    var gpaLetterGradeArrayIndex12 = 0\n    var gpaLetterGradeArrayIndex13\
    \ = 0\n    var gpaLetterGradeArrayIndex14 = 0\n    var gpaLetterGradeArrayIndex15\
    \ = 0\n    var gpaLetterGradeArrayIndex16 = 0\n    var gpaLetterGradeArrayIndex17\
    \ = 0\n    var gpaLetterGradeArrayIndex18 = 0\n    var gpaLetterGradeArrayIndex19\
    \ = 0\n    var gpaLetterGradeArrayIndex20 = 0\n    var gpaLetterGradeArrayIndex21\
    \ = 0\n    var gpaLetterGradeArrayIndex22 = 0\n    var gpaLetterGradeArrayIndex23\
    \ = 0\n    var gpaLetterGradeArrayIndex24 = 0\n    var gpaLetterGradeArrayIndex25\
    \ = 0\n    var gpaLetterGradeArrayIndex26 = 0\n    var gpaLetterGradeArrayIndex27\
    \ = 0\n    var gpaLetterGradeArrayIndex28 = 0\n    var gpaLetterGradeArrayIndex29\
    \ = 0\n    var gpaLetterGradeArrayIndex30 = 0\n    var gpaLetterGradeArrayIndex31\
    \ = 0\n    var gpaLetterGradeArrayIndex32 = 0\n    var gpaLetterGradeArrayIndex33\
    \ = 0\n    var gpaLetterGradeArrayIndex34 = 0\n    var gpaLetterGradeArrayIndex35\
    \ = 0\n    var gpaLetterGradeArrayIndex36 = 0\n    var gpaLetterGradeArrayIndex37\
    \ = 0\n    var gpaLetterGradeArrayIndex38 = 0\n    var gpaLetterGradeArrayIndex39\
    \ = 0\n    var gpaLetterGradeArrayIndex40 = 0\n    var gpaLetterGradeArrayIndex41\
    \ = 0\n    var gpaLetterGradeArrayIndex42 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpsc8r88cy.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCopy\
    \ = gradesArray\n    var letterGrades = [String]()\n    var letterGrade = \"\"\
    \n    var currentGrade = gradesArray[0]\n    var currentLetterGrade = \"\"\n \
    \   var currentLetterGradeIndex = 0\n    var currentLetterGradeIndex2 = 0\n  \
    \  var currentLetterGradeIndex3 = 0\n    var currentLetterGradeIndex4 = 0\n  \
    \  var currentLetterGradeIndex5 = 0\n    var currentLetterGradeIndex6 = 0\n  \
    \  var currentLetterGradeIndex7 = 0\n    var currentLetterGradeIndex8 = 0\n  \
    \  var currentLetterGradeIndex9 = 0\n    var currentLetterGradeIndex10 = 0\n \
    \   var currentLetterGradeIndex11 = 0\n    var currentLetterGradeIndex12 = 0\n\
    \    var currentLetterGradeIndex13 = 0\n    var currentLetterGradeIndex14 = 0\n\
    \    var currentLetterGradeIndex15 = 0\n    var currentLetterGradeIndex16 = 0\n\
    \    var currentLetterGradeIndex17 = 0\n    var currentLetterGradeIndex18 = 0\n\
    \    var currentLetterGradeIndex19 = 0\n    var currentLetterGradeIndex20 = 0\n\
    \    var currentLetterGradeIndex21 = 0\n    var currentLetterGradeIndex22 = 0\n\
    \    var currentLetterGradeIndex23 = 0\n    var currentLetterGradeIndex24 = 0\n\
    \    var currentLetterGradeIndex25 = 0\n    var currentLetterGradeIndex26 = 0\n\
    \    var currentLetterGradeIndex27 = 0\n    var currentLetterGradeIndex28 = 0\n\
    \    var currentLetterGradeIndex29 = 0\n    var currentLetterGradeIndex30 = 0\n\
    \    var currentLetterGradeIndex31 = 0\n    var currentLetterGradeIndex32 = 0\n\
    \    var currentLetterGradeIndex33 = 0\n    var currentLetterGradeIndex34 = 0\n\
    \    var currentLetterGradeIndex35 = 0\n    var currentLetterGradeIndex36 = 0\n\
    \    var currentLetterGradeIndex37 = 0\n    var currentLetterGradeIndex38 = 0\n\
    \    var currentLetterGradeIndex39 = 0\n    var currentLetterGradeIndex40 = 0\n\
    \    var currentLetterGradeIndex41 = 0\n    var currentLetterGradeIndex42 = 0\n\
    \    var currentLetterGradeIndex43 = 0\n    var currentLetterGradeIndex44 = 0\n\
    \    var currentLetterGradeIndex45 = 0\n    var currentLetterGradeIndex46 = 0\n\
    \    var currentLetterGradeIndex47 = 0\n    var currentLetterGradeIndex48 = 0\n\
    \    var currentLetterGradeIndex49 = 0\n    var currentLetterGradeIndex50 = 0\n\
    \    var currentLetterGradeIndex51 = 0\n    var current\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt_8_iq8n.swift:80:9: error: type annotation missing in pattern\n\
    \    var current\n        ^\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades[0]\n\
    \    for grade in grades {\n        if gpa > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if gpa > 2.7 {\n            letterGrades.append(\"A\")\n\
    \        } else if gpa > 2.3 {\n            letterGrades.append(\"A-\")\n    \
    \    } else if gpa > 1.7 && gpa < 2.0 {\n            letterGrades.append(\"B+\"\
    )\n        } else if gpa > 1.3 && gpa < 1.7 {\n            letterGrades.append(\"\
    B\")\n        } else if gpa > 1.0 && gpa < 1.3 {\n            letterGrades.append(\"\
    B-\")\n        } else if gpa > 0.7 && gpa < 1.0 {\n            letterGrades.append(\"\
    C+\")\n        } else if gpa > 0.3 && gpa < 0.7 {\n            letterGrades.append(\"\
    C\")\n        } else if gpa > 0.0 {\n            letterGrades.append(\"C-\")\n\
    \        } else if gpa < 0.0 {\n            letterGrades.append(\"D+\")\n    \
    \    } else if gpa < 0.3 {\n            letterGrades.append(\"D\")\n        }\
    \ else if gpa < 0.7 {\n            letterGrades.append(\"D-\")\n        } else\
    \ if gpa < 1.0 {\n            letterGrades.append(\"E\")\n        } else {\n \
    \           letterGrades.append(\"F\")\n        }\n        gpa -= grade\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp_ioe7tfx/tmp_ioe7tfx.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b438a5c5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b438a2bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b438a2bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b438a2bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_ioe7tfx                        0x000055bdf8865856 <unavailable> + 6230

    5    libc.so.6                          0x00002b438a7b1460 __libc_start_main +
    245

    6    tmp_ioe7tfx                        0x000055bdf8865379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade < 3.0 {\n            letterGrades.append(\"E\")\n        } else\
    \ if grade < 3.3 {\n            letterGrades.append(\"D-\")\n        } else if\
    \ grade < 3.7 {\n            letterGrades.append(\"C-\")\n        } else if grade\
    \ < 4.0 {\n            letterGrades.append(\"B-\")\n        } else if grade <\
    \ 4.3 {\n            letterGrades.append(\"B-\")\n        } else if grade < 4.7\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade < 5.0 {\n\
    \            letterGrades.append(\"B-\")\n        } else if grade < 5.3 {\n  \
    \          letterGrades.append(\"B-\")\n        } else if grade < 5.7 {\n    \
    \        letterGrades.append(\"B-\")\n        } else if grade < 6.0 {\n      \
    \      letterGrades.append(\"B-\")\n        } else if grade < 6.3 {\n        \
    \    letterGrades.append(\"B-\")\n        } else if grade < 6.7 {\n          \
    \  letterGrades.append(\"B-\")\n        } else if grade < 7.0 {\n            letterGrades.append(\"\
    B-\")\n        } else if grade < 7.3 {\n            letterGrades.append(\"B-\"\
    )\n        } else if grade < 7.7 {\n            letterGrades.append(\"B-\")\n\
    \        } else if grade < 8.0 {\n            letterGrades.append(\"B-\")\n  \
    \      } else if grade < 8.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if grade < 8.7 {\n            letterGrades.append(\"B-\")\n      \
    \  } else if grade < 9.0 {\n            letterGrades.append(\"B-\")\n        }\
    \ else if grade < 9.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade < 9.7 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade < 10.0 {\n            letterGrades.append(\"B-\")\n        } else if grade\
    \ < 10.3 {\n            letterGrades.append(\"B-\")\n        } else if grade <\
    \ 10.7 {\n            letterGrades.append(\"B-\")\n        } else if grade < 11.0\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade < 11.3 {\n\
    \            letterGrades.append(\"B-\")\n        } else if grade < 11.7 {\n \
    \           letterGrades.append(\"B-\")\n        } else if grade < 12.0 {\n  \
    \          letterGrades.append(\"B-\")\n        } else if grade < 12.3 {\n   \
    \         letterGra\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpib7smls8.swift:103:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpib7smls8.swift:24:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpib7smls8.swift:103:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpib7smls8.swift:22:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpib7smls8.swift:82:13: error: cannot find 'letterGra' in scope\n      \
    \      letterGra\n            ^~~~~~~~~\n/tmp/tmpib7smls8.swift:86:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7...3.3:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3...3.0:\n            letterGrades.append(\"A-\")\n        case 3.0:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7...2.3:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3...2.0:\n            letterGrades.append(\"\
    B-\")\n        case 2.0:\n            letterGrades.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            letterGrades.append(\"C\")\n        case 1.3...1.0:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0:\n            letterGrades.append(\"\
    D+\")\n        case 0.7...1.0:\n            letterGrades.append(\"D\")\n     \
    \   case 0.0:\n            letterGrades.append(\"D-\")\n        case 0.0:\n  \
    \          letterGrades.append(\"E\")\n        default:\n            letterGrades.append(\"\
    F\")\n        }\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af46882cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af468523561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af468523286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af46852313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af468522bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmphh23jwwd                        0x00005616aede637c <unavailable> + 9084

    6    tmphh23jwwd                        0x00005616aede578d <unavailable> + 6029

    7    libc.so.6                          0x00002af468a18460 __libc_start_main +
    245

    8    tmphh23jwwd                        0x00005616aede5449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        let letterGrade = gradeToLetter(grade)\n        letterGrades.append(letterGrade)\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4dqifs36.swift:25:27: error: cannot find 'gradeToLetter' in scope\n\
    \        let letterGrade = gradeToLetter(grade)\n                          ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0...2.7:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0...1.7:\n            gradesArray.append(\"C+\")\n     \
    \   case 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0...0.7:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.7...0.0:\n            gradesArray.append(\"\
    D\")\n        case 0.0...0.0:\n            gradesArray.append(\"E\")\n       \
    \ default:\n            gradesArray.append(\"E\")\n        }\n    }\n    \n  \
    \  return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af7d49bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7d46b1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af7d46b1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af7d46b113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af7d46b0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwma85rgw                        0x0000560d73f1c37c <unavailable> + 9084

    6    tmpwma85rgw                        0x0000560d73f1b78d <unavailable> + 6029

    7    libc.so.6                          0x00002af7d4ba6460 __libc_start_main +
    245

    8    tmpwma85rgw                        0x0000560d73f1b449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        let letterGrade = grade >= 3.0 ? \"A+\" :\n            grade >= 2.7\
    \ ? \"A\" :\n            grade >= 2.3 ? \"A-\" :\n            grade >= 2.0 ? \"\
    B+\" :\n            grade >= 1.7 ? \"B\" :\n            grade >= 1.3 ? \"B-\"\
    \ :\n            grade >= 1.0 ? \"C+\" :\n            grade >= 0.7 ? \"C\" :\n\
    \            grade >= 0.3 ? \"C-\" :\n            grade >= 0.0 ? \"D+\" :\n  \
    \          grade >= 0.0 ? \"D\" :\n            grade >= 0.0 ? \"D-\" :\n     \
    \       \"E\"\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpartq1w6r/tmpartq1w6r.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8671019c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8670d10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8670d10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8670d0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpartq1w6r                        0x000056120b0207f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8671205460 __libc_start_main +
    245

    6    tmpartq1w6r                        0x000056120b020319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.map { String(format: \"%0.2f\",\
    \ $0) }\n    var gradesArraySorted = gradesArray.sorted()\n    var gradesArraySortedIndex\
    \ = gradesArraySorted.startIndex\n    var gradesArraySortedCount = gradesArraySorted.count\n\
    \    var letterGrades = [String]()\n    while gradesArraySortedIndex < gradesArraySortedCount\
    \ {\n        let grade = gradesArray[gradesArraySortedIndex]\n        let index\
    \ = gradesArraySortedIndex\n        gradesArraySortedIndex += 1\n        if grade\
    \ > 3.0 {\n            letterGrades.append(String(format: \"%@\", grade))\n  \
    \          gradesArraySortedIndex -= 1\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpljzqwb14.swift:23:36: error: no exact matches in call to initializer\
    \ \n    var gradesArray = grades.map { String(format: \"%0.2f\", $0) }\n     \
    \                              ^\nSwift.String:4:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_\
    \ value: T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpljzqwb14.swift:23:36:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n    var gradesArray = grades.map { String(format: \"%0.2f\", $0) }\n \
    \                                  ^\nSwift.String:3:12: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n/tmp/tmpljzqwb14.swift:33:39: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \            letterGrades.append(String(format: \"%@\", grade))\n            \
    \                          ^~~~~~~\n                                       repeating\
    \     count: \n"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    var gpa = grades[0]\n    var letterGrade = \"\"\n    \n    for index in 0..<grades.count\
    \ {\n        if gpa > grades[index] {\n            letterGrade = \"A+\"\n    \
    \        gpa = grades[index]\n        } else if gpa < grades[index] {\n      \
    \      letterGrade = \"A-\"\n            gpa = grades[index]\n        } else if\
    \ gpa == grades[index] {\n            letterGrade = \"B+\"\n            gpa =\
    \ grades[index]\n        } else if gpa > grades[index] {\n            letterGrade\
    \ = \"B\"\n            gpa = grades[index]\n        } else if gpa < grades[index]\
    \ {\n            letterGrade = \"B-\"\n            gpa = grades[index]\n     \
    \   } else if gpa == grades[index] {\n            letterGrade = \"C+\"\n     \
    \       gpa = grades[index]\n        } else if gpa > grades[index] {\n       \
    \     letterGrade = \"C\"\n            gpa = grades[index]\n        } else if\
    \ gpa < grades[index] {\n            letterGrade = \"C-\"\n            gpa = grades[index]\n\
    \        } else if gpa == grades[index] {\n            letterGrade = \"D+\"\n\
    \            gpa = grades[index]\n        } else if gpa > grades[index] {\n  \
    \          letterGrade = \"D\"\n            gpa = grades[index]\n        } else\
    \ if gpa < grades[index] {\n            letterGrade = \"D-\"\n            gpa\
    \ = grades[index]\n        } else if gpa == grades[index] {\n            letterGrade\
    \ = \"E\"\n            gpa = grades[index]\n        }\n        \n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgtpl2ulg/tmpgtpl2ulg.swift:86: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b93a64e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b93a61d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b93a61d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b93a61d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgtpl2ulg                        0x0000557c76de48c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b93a66cc460 __libc_start_main +
    245

    6    tmpgtpl2ulg                        0x0000557c76de43e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy2etdvoz.swift:24:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            gradesArray.append(\"A+\")\n        }\
    \ else if grade >= 3.7 {\n            gradesArray.append(\"A\")\n        } else\
    \ if grade >= 3.3 {\n            gradesArray.append(\"A-\")\n        } else if\
    \ grade >= 3.0 {\n            gradesArray.append(\"B+\")\n        } else if grade\
    \ >= 2.7 {\n            gradesArray.append(\"B\")\n        } else if grade >=\
    \ 2.3 {\n            gradesArray.append(\"B-\")\n        } else if grade >= 2.0\
    \ {\n            gradesArray.append(\"C+\")\n        } else if grade >= 1.7 {\n\
    \            gradesArray.append(\"C\")\n        } else if grade >= 1.3 {\n   \
    \         gradesArray.append(\"C-\")\n        } else if grade >= 1.0 {\n     \
    \       gradesArray.append(\"D+\")\n        } else if grade >= 0.7 {\n       \
    \     gradesArray.append(\"D\")\n        } else if grade >= 0.0 {\n          \
    \  gradesArray.append(\"D-\")\n        } else {\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpu25_7qto/tmpu25_7qto.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab242032c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab241d29b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab241d29988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab241d287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu25_7qto                        0x0000563361c957f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ab24221e460 __libc_start_main +
    245

    6    tmpu25_7qto                        0x0000563361c95319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach { grade\
    \ in\n        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n     \
    \   } else if grade > 2.7 {\n            gradesArray.append(\"A\")\n        }\
    \ else if grade > 2.3 {\n            gradesArray.append(\"A-\")\n        } else\
    \ if grade > 2.0 {\n            gradesArray.append(\"B+\")\n        } else if\
    \ grade > 1.7 {\n            gradesArray.append(\"B\")\n        } else if grade\
    \ > 1.3 {\n            gradesArray.append(\"B-\")\n        } else if grade > 1.0\
    \ {\n            gradesArray.append(\"C+\")\n        } else if grade > 0.7 {\n\
    \            gradesArray.append(\"C\")\n        } else if grade > 0.0 {\n    \
    \        gradesArray.append(\"C-\")\n        } else if grade > 0.0 {\n       \
    \     gradesArray.append(\"D+\")\n        } else if grade > 0.0 {\n          \
    \  gradesArray.append(\"D\")\n        } else if grade > 0.0 {\n            gradesArray.append(\"\
    D-\")\n        } else if grade > 0.0 {\n            gradesArray.append(\"E\")\n\
    \        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9pqy2wl2/tmp9pqy2wl2.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04a0556c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04a024db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04a024d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04a024c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9pqy2wl2                        0x00005623b636a6f6 <unavailable> + 5878

    5    libc.so.6                          0x00002b04a0742460 __libc_start_main +
    245

    6    tmp9pqy2wl2                        0x00005623b636a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    \n    for i in 0..<grades.count {\n        let grade = grades[i]\n      \
    \  \n        if grade > 3.0 {\n            letterGrades.append(\"A+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"A\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"A-\")\n        } else\
    \ if grade > 1.7 && grade < 2.0 {\n            letterGrades.append(\"B+\")\n \
    \       } else if grade > 1.3 && grade < 1.7 {\n            letterGrades.append(\"\
    B\")\n        } else if grade > 1.0 {\n            letterGrades.append(\"B-\"\
    )\n        } else if grade > 0.7 {\n            letterGrades.append(\"C+\")\n\
    \        } else if grade > 0.3 {\n            letterGrades.append(\"C\")\n   \
    \     } else if grade > 0.0 {\n            letterGrades.append(\"C-\")\n     \
    \   } else if grade > 0.0 {\n            letterGrades.append(\"D+\")\n       \
    \ } else if grade > 0.0 {\n            letterGrades.append(\"D\")\n        } else\
    \ if grade > 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n\
    \            letterGrades.append(\"E\")\n        }\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpmd_jbx2l/tmpmd_jbx2l.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6022532c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6022229b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6022229988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60222287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmd_jbx2l                        0x0000562d861e88c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b602271e460 __libc_start_main +
    245

    6    tmpmd_jbx2l                        0x0000562d861e83e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 0...3.0:\n            letterGrades.append(\"\
    E\")\n        case 3.0...5.0:\n            letterGrades.append(\"D+\")\n     \
    \   case 5.0...7.0:\n            letterGrades.append(\"D\")\n        case 7.0...9.0:\n\
    \            letterGrades.append(\"C+\")\n        case 9.0...11.0:\n         \
    \   letterGrades.append(\"C\")\n        case 11.0...13.0:\n            letterGrades.append(\"\
    B+\")\n        case 13.0...15.0:\n            letterGrades.append(\"B\")\n   \
    \     case 15.0...17.0:\n            letterGrades.append(\"A-\")\n        case\
    \ 17.0...19.0:\n            letterGrades.append(\"A\")\n        case 19.0...21.0:\n\
    \            letterGrades.append(\"A+\")\n        case 21.0...23.0:\n        \
    \    letterGrades.append(\"A\")\n        case 23.0...25.0:\n            letterGrades.append(\"\
    B\")\n        case 25.0...27.0:\n            letterGrades.append(\"B-\")\n   \
    \     case 27.0...29.0:\n            letterGrades.append(\"B\")\n        case\
    \ 29.0...31.0:\n            letterGrades.append(\"C\")\n        case 31.0...33.0:\n\
    \            letterGrades.append(\"C-\")\n        case 33.0...35.0:\n        \
    \    letterGrades.append(\"C\")\n        case 35.0...37.0:\n            letterGrades.append(\"\
    D\")\n        case 37.0...39.0:\n            letterGrades.append(\"D-\")\n   \
    \     case 39.0...40.0:\n            letterGrades.append(\"D\")\n        case\
    \ 40.0...42.0:\n            letterGrades.append(\"E\")\n        default:\n   \
    \         letterGrades.append(\"F\")\n        }\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz9megfm8/tmpz9megfm8.swift:90: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34ed485c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34ed17cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34ed17c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34ed17b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz9megfm8                        0x0000560e48f18926 <unavailable> + 6438

    5    libc.so.6                          0x00002b34ed671460 __libc_start_main +
    245

    6    tmpz9megfm8                        0x0000560e48f18449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8si82ggq/tmp8si82ggq.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7cf63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7cc5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7cc5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7cc597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8si82ggq                        0x0000558a6cc417f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b4b7d14f460 __libc_start_main +
    245

    6    tmp8si82ggq                        0x0000558a6cc41319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    var gpa = grades.reduce(0, combine: +)\n    var letterGrade = String()\n\
    \    \n    if gpa < 4.0 {\n        letterGrade = \"A+\"\n    } else if gpa < 3.7\
    \ {\n        letterGrade = \"A\"\n    } else if gpa < 3.3 {\n        letterGrade\
    \ = \"A-\"\n    } else if gpa < 3.0 {\n        letterGrade = \"B+\"\n    } else\
    \ if gpa < 2.7 {\n        letterGrade = \"B\"\n    } else if gpa < 2.3 {\n   \
    \     letterGrade = \"B-\"\n    } else if gpa < 2.0 {\n        letterGrade = \"\
    C+\"\n    } else if gpa < 1.7 {\n        letterGrade = \"C\"\n    } else if gpa\
    \ < 1.3 {\n        letterGrade = \"C-\"\n    } else if gpa < 1.0 {\n        letterGrade\
    \ = \"D+\"\n    } else if gpa < 0.7 {\n        letterGrade = \"D\"\n    } else\
    \ if gpa < 0.0 {\n        letterGrade = \"D-\"\n    } else {\n        letterGrade\
    \ = \"E\"\n    }\n    \n    letterGrades.append(letterGrade)\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpjv0c4ncn.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if grade > 2.0 {\n            gradesArray.append(\"A\")\n        } else if grade\
    \ > 1.0 {\n            gradesArray.append(\"A-\")\n        } else if grade > 0.7\
    \ {\n            gradesArray.append(\"B+\")\n        } else if grade > 0.3 {\n\
    \            gradesArray.append(\"B\")\n        } else if grade > 0.0 {\n    \
    \        gradesArray.append(\"B-\")\n        } else if grade > -0.3 {\n      \
    \      gradesArray.append(\"C+\")\n        } else if grade > -0.7 {\n        \
    \    gradesArray.append(\"C\")\n        } else if grade > -1.0 {\n           \
    \ gradesArray.append(\"C-\")\n        } else if grade > -2.0 {\n            gradesArray.append(\"\
    D+\")\n        } else if grade > -3.0 {\n            gradesArray.append(\"D\"\
    )\n        } else if grade > -3.7 {\n            gradesArray.append(\"D-\")\n\
    \        } else if grade > -4.0 {\n            gradesArray.append(\"E\")\n   \
    \     } else {\n            gradesArray.append(\"F\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppaj1a978/tmppaj1a978.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3914379c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3914070b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3914070988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b391406f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppaj1a978                        0x0000559af281e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b3914565460 __libc_start_main +
    245

    6    tmppaj1a978                        0x0000559af281e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n    var gradesArray = [String]()\n    \n    for i in grades\
    \ {\n        \n        let gpa = Double(i)\n        \n        if gpa < 3.0 {\n\
    \            \n            gradesArray.append(\"A+\")\n            \n        }\
    \ else if gpa >= 3.0 && gpa < 3.7 {\n            \n            gradesArray.append(\"\
    A\")\n            \n        } else if gpa >= 3.7 && gpa < 4.0 {\n            \n\
    \            gradesArray.append(\"A-\")\n            \n        } else if gpa >=\
    \ 4.0 && gpa < 4.3 {\n            \n            gradesArray.append(\"B+\")\n \
    \           \n        } else if gpa >= 4.3 && gpa < 4.7 {\n            \n    \
    \        gradesArray.append(\"B\")\n            \n        } else if gpa >= 4.7\
    \ && gpa < 5.0 {\n            \n            gradesArray.append(\"B-\")\n     \
    \       \n        } else if gpa >= 5.0 && gpa < 5.3 {\n            \n        \
    \    gradesArray.append(\"C+\")\n            \n        } else if gpa >= 5.3 &&\
    \ gpa < 5.7 {\n            \n            gradesArray.append(\"C\")\n         \
    \   \n        } else if gpa >= 5.7 && gpa < 6.0 {\n            \n            gradesArray.append(\"\
    C-\")\n            \n        } else if gpa >= 6.0 && gpa < 6.3 {\n           \
    \ \n            gradesArray.append(\"D+\")\n            \n        } else if gpa\
    \ >= 6.3 && gpa < 6.7 {\n            \n            gradesArray.append(\"D\")\n\
    \            \n        } else if gpa >= 6.7 && gpa < 7.0 {\n            \n   \
    \         gradesArray.append(\"D-\")\n            \n        } else if gpa >= 7.0\
    \ && gpa < 7.3 {\n            \n            gradesArray.append(\"E\")\n      \
    \      \n        } else {\n            \n            gradesArray.append(\"E\"\
    )\n            \n        }\n        \n    }\n    \n    return gradesArray\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpakz2h_3i/tmpakz2h_3i.swift:106: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b40bfd88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b40bfa7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b40bfa7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40bfa7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpakz2h_3i                        0x0000557e603fe846 <unavailable> + 6214

    5    libc.so.6                          0x00002b40bff74460 __libc_start_main +
    245

    6    tmpakz2h_3i                        0x0000557e603fe369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0...2.7:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0...1.7:\n            gradesArray.append(\"C+\")\n     \
    \   case 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0...0.7:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.7...0.0:\n            gradesArray.append(\"\
    D\")\n        case 0.0...0.0:\n            gradesArray.append(\"E\")\n       \
    \ default:\n            gradesArray.append(\"E\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af4e5619c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4e5310561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af4e5310286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af4e531013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af4e530fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpjlc3m0e_                        0x0000561aaa09737c <unavailable> + 9084

    6    tmpjlc3m0e_                        0x0000561aaa09678d <unavailable> + 6029

    7    libc.so.6                          0x00002af4e5805460 __libc_start_main +
    245

    8    tmpjlc3m0e_                        0x0000561aaa096449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8si82ggq/tmp8si82ggq.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7cf63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7cc5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7cc5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7cc597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8si82ggq                        0x0000558a6cc417f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b4b7d14f460 __libc_start_main +
    245

    6    tmp8si82ggq                        0x0000558a6cc41319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    \n    for i in 0..<grades.count {\n        if grades[i] >= 4.0 {\n      \
    \      letterGrades.append(\"A+\")\n        }\n        else if grades[i] >= 3.7\
    \ {\n            letterGrades.append(\"A\")\n        }\n        else if grades[i]\
    \ >= 3.3 {\n            letterGrades.append(\"A-\")\n        }\n        else if\
    \ grades[i] >= 3.0 {\n            letterGrades.append(\"B+\")\n        }\n   \
    \     else if grades[i] >= 2.7 {\n            letterGrades.append(\"B\")\n   \
    \     }\n        else if grades[i] >= 2.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        else if grades[i] >= 2.0 {\n            letterGrades.append(\"\
    C+\")\n        }\n        else if grades[i] >= 1.7 {\n            letterGrades.append(\"\
    C\")\n        }\n        else if grades[i] >= 1.3 {\n            letterGrades.append(\"\
    C-\")\n        }\n        else if grades[i] >= 1.0 {\n            letterGrades.append(\"\
    D+\")\n        }\n        else if grades[i] >= 0.7 {\n            letterGrades.append(\"\
    D\")\n        }\n        else if grades[i] >= 0.0 {\n            letterGrades.append(\"\
    D-\")\n        }\n        else {\n            letterGrades.append(\"E\")\n   \
    \     }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp9qbw_76p/tmp9qbw_76p.swift:83: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59a8c92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59a8989b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59a8989988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59a89887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9qbw_76p                        0x000055b0257198c6 <unavailable> + 6342

    5    libc.so.6                          0x00002b59a8e7e460 __libc_start_main +
    245

    6    tmp9qbw_76p                        0x000055b0257193e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        \n        if grade >= 4.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            letterGrades.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            letterGrades.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            letterGrades.append(\"B+\")\n \
    \       } else if grade >= 2.7 {\n            letterGrades.append(\"B\")\n   \
    \     } else if grade >= 2.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if grade >= 2.0 {\n            letterGrades.append(\"C+\")\n     \
    \   } else if grade >= 1.7 {\n            letterGrades.append(\"C\")\n       \
    \ } else if grade >= 1.3 {\n            letterGrades.append(\"C-\")\n        }\
    \ else if grade >= 1.0 {\n            letterGrades.append(\"D+\")\n        } else\
    \ if grade >= 0.7 {\n            letterGrades.append(\"D\")\n        } else if\
    \ grade >= 0.0 {\n            letterGrades.append(\"D-\")\n        } else {\n\
    \            letterGrades.append(\"E\")\n        }\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp2u2shr9q/tmp2u2shr9q.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb7cc00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb7c8f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb7c8f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb7c8f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2u2shr9q                        0x00005588b50f37f6 <unavailable> + 6134

    5    libc.so.6                          0x00002acb7cdec460 __libc_start_main +
    245

    6    tmp2u2shr9q                        0x00005588b50f3319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var letterGrades = [String]()\n    var gradesArrayIndex\
    \ = 0\n    var gradesArrayIndexCount = 0\n    var letterGradeIndex = 0\n    var\
    \ letterGradeIndexCount = 0\n    while gradesArrayIndex < gradesArrayCount {\n\
    \        if gradesArray[gradesArrayIndex] >= 3.0 {\n            letterGrades.append(letterGrades[letterGradeIndex])\n\
    \            letterGradeIndex += 1\n            letterGradeIndexCount += 1\n \
    \       }\n        gradesArrayIndex += 1\n    }\n    if letterGradeIndexCount\
    \ != gradesArrayCount {\n        letterGrades.append(letterGrades[letterGradeIndex])\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ebc1f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ebbeef561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4ebbeef286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4ebbeef13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4ebbeeebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4ebbcf0fc3 <unavailable> + 188355

    6    tmp7oyp4jtj                        0x00005621fd3e41df <unavailable> + 8671

    7    tmp7oyp4jtj                        0x00005621fd3e369d <unavailable> + 5789

    8    libc.so.6                          0x00002b4ebc3e4460 __libc_start_main +
    245

    9    tmp7oyp4jtj                        0x00005621fd3e3359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 0...3.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.0...5.0:\n            gradesArray.append(\"A\")\n      \
    \  case 5.0...7.0:\n            gradesArray.append(\"A-\")\n        case 7.0...9.0:\n\
    \            gradesArray.append(\"B+\")\n        case 9.0...11.0:\n          \
    \  gradesArray.append(\"B\")\n        case 11.0...13.0:\n            gradesArray.append(\"\
    B-\")\n        case 13.0...15.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 15.0...17.0:\n            gradesArray.append(\"C\")\n        case 17.0...19.0:\n\
    \            gradesArray.append(\"C-\")\n        case 19.0...21.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 21.0...23.0:\n            gradesArray.append(\"\
    D\")\n        case 23.0...25.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 25.0...27.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpkjeoi6cs/tmpkjeoi6cs.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2915e16c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2915b0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2915b0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2915b0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkjeoi6cs                        0x00005653a83c68d6 <unavailable> + 6358

    5    libc.so.6                          0x00002b2916002460 __libc_start_main +
    245

    6    tmpkjeoi6cs                        0x00005653a83c63f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    switch $0 {\n        case 0...3.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.0...5.0:\n            gradesArray.append(\"A\")\n        case\
    \ 5.0...7.0:\n            gradesArray.append(\"A-\")\n        case 7.0...9.0:\n\
    \            gradesArray.append(\"B+\")\n        case 9.0...11.0:\n          \
    \  gradesArray.append(\"B\")\n        case 11.0...13.0:\n            gradesArray.append(\"\
    B-\")\n        case 13.0...15.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 15.0...17.0:\n            gradesArray.append(\"C\")\n        case 17.0...19.0:\n\
    \            gradesArray.append(\"C-\")\n        case 19.0...21.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 21.0...23.0:\n            gradesArray.append(\"\
    D\")\n        case 23.0...25.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 25.0...27.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpn2_fwopz/tmpn2_fwopz.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31b5610c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31b5307b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31b5307988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31b53067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2_fwopz                        0x000055cd76459826 <unavailable> + 6182

    5    libc.so.6                          0x00002b31b57fc460 __libc_start_main +
    245

    6    tmpn2_fwopz                        0x000055cd76459349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7...3.3:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3...3.0:\n            letterGrades.append(\"A-\")\n        case 3.0...2.7:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7...2.3:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3...2.0:\n            letterGrades.append(\"\
    B-\")\n        case 2.0...1.7:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7...1.3:\n            letterGrades.append(\"C\")\n        case 1.3...1.0:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0...0.7:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7...0.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0:\n            letterGrades.append(\"D-\")\n        case\
    \ _:\n            letterGrades.append(\"E\")\n        }\n    }\n    \n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b13c828fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b13c7f86561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b13c7f86286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b13c7f8613c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b13c7f85bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmps3cjymil                        0x000055c5e42ba37c <unavailable> + 9084

    6    tmps3cjymil                        0x000055c5e42b978d <unavailable> + 6029

    7    libc.so.6                          0x00002b13c847b460 __libc_start_main +
    245

    8    tmps3cjymil                        0x000055c5e42b9449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        default:\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpn45yo19l/tmpn45yo19l.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1476eeec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1476be5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1476be5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1476be47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn45yo19l                        0x000055b1067e17f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b14770da460 __libc_start_main +
    245

    6    tmpn45yo19l                        0x000055b1067e1319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted(by:\
    \ <)\n    var letterGrades = [String]()\n    for i in 0..<gradesArray.count {\n\
    \        let grade = gradesArray[i]\n        if grade < 3.0 {\n            letterGrades.append(\"\
    E\")\n        } else if grade < 3.3 {\n            letterGrades.append(\"D-\"\
    )\n        } else if grade < 3.7 {\n            letterGrades.append(\"C-\")\n\
    \        } else if grade < 4.0 {\n            letterGrades.append(\"B-\")\n  \
    \      } else if grade < 4.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if grade < 4.7 {\n            letterGrades.append(\"B-\")\n      \
    \  } else if grade < 5.0 {\n            letterGrades.append(\"B-\")\n        }\
    \ else if grade < 5.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade < 5.7 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade < 6.0 {\n            letterGrades.append(\"B-\")\n        } else if grade\
    \ < 6.3 {\n            letterGrades.append(\"B-\")\n        } else if grade <\
    \ 6.7 {\n            letterGrades.append(\"B-\")\n        } else if grade < 7.0\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade < 7.3 {\n\
    \            letterGrades.append(\"B-\")\n        } else if grade < 7.7 {\n  \
    \          letterGrades.append(\"B-\")\n        } else if grade < 8.0 {\n    \
    \        letterGrades.append(\"B-\")\n        } else if grade < 8.3 {\n      \
    \      letterGrades.append(\"B-\")\n        } else if grade < 8.7 {\n        \
    \    letterGrades.append(\"B-\")\n        } else if grade < 9.0 {\n          \
    \  letterGrades.append(\"B-\")\n        } else if grade < 9.3 {\n            letterGrades.append(\"\
    B-\")\n        } else if grade < 9.7 {\n            letterGrades.append(\"B-\"\
    )\n        } else if grade < 10.0 {\n            letterGrades.append(\"B-\")\n\
    \        } else if grade < 10.3 {\n            letterGrades.append(\"B-\")\n \
    \       } else if grade < 10.7 {\n            letterGrades.append(\"B-\")\n  \
    \      } else if grade < 11.0 {\n            letterGrades.append(\"B-\")\n   \
    \     } else if grade < 11.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if grade < 11.7 {\n            letterGrades.append(\"B-\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpndfzex7l.swift:81:33: error: unterminated string literal\n    \
    \        letterGrades.append(\"B-\n                                ^\n/tmp/tmpndfzex7l.swift:102:66:\
    \ error: expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmpndfzex7l.swift:26:36: note: to match this opening\
    \ '{'\n    for i in 0..<gradesArray.count {\n                                \
    \   ^\n/tmp/tmpndfzex7l.swift:102:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpndfzex7l.swift:22:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpndfzex7l.swift:81:33: error: missing argument for parameter #1 in call\n\
    \            letterGrades.append(\"B-\n                                ^\n   \
    \                             <#String#>\nSwift.Array:6:37: note: 'append' declared\
    \ here\n    @inlinable public mutating func append(_ newElement: __owned Element)\n\
    \                                    ^\n/tmp/tmpndfzex7l.swift:85:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        let letterGrade = grade\n        switch letterGrade {\n        case 4.0:\n\
    \            gradesArray.append(\"A+\")\n        case 3.7...3.3:\n           \
    \ gradesArray.append(\"A\")\n        case 3.3...3.0:\n            gradesArray.append(\"\
    A-\")\n        case 3.0:\n            gradesArray.append(\"B+\")\n        case\
    \ 2.7...2.3:\n            gradesArray.append(\"B\")\n        case 2.3...2.0:\n\
    \            gradesArray.append(\"B-\")\n        case 2.0:\n            gradesArray.append(\"\
    C+\")\n        case 1.7...1.3:\n            gradesArray.append(\"C\")\n      \
    \  case 1.3...1.0:\n            gradesArray.append(\"C-\")\n        case 1.0:\n\
    \            gradesArray.append(\"D+\")\n        case 0.7...1.0:\n           \
    \ gradesArray.append(\"D\")\n        case 0.0:\n            gradesArray.append(\"\
    D-\")\n        case 0...0.1:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aecc0fbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecc0cb4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aecc0cb4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aecc0cb413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aecc0cb3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9wrlw6ru                        0x000055f72d76434c <unavailable> + 9036

    6    tmp9wrlw6ru                        0x000055f72d76373d <unavailable> + 5949

    7    libc.so.6                          0x00002aecc11a9460 __libc_start_main +
    245

    8    tmp9wrlw6ru                        0x000055f72d7633f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0...2.7:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0...1.7:\n            gradesArray.append(\"C+\")\n     \
    \   case 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0...0.7:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.7...0.0:\n            gradesArray.append(\"\
    D\")\n        case 0.0...0.0:\n            gradesArray.append(\"E\")\n       \
    \ default:\n            gradesArray.append(\"E\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b24f1165c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24f0e5c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b24f0e5c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b24f0e5c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b24f0e5bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpin4q28z8                        0x00005645d400a337 <unavailable> + 9015

    6    tmpin4q28z8                        0x00005645d400973d <unavailable> + 5949

    7    libc.so.6                          0x00002b24f1351460 __libc_start_main +
    245

    8    tmpin4q28z8                        0x00005645d40093f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"F\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpyzdf8q69/tmpyzdf8q69.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ee1903c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ee15fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ee15fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ee15f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyzdf8q69                        0x000055c173c517a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b3ee1aef460 __libc_start_main +
    245

    6    tmpyzdf8q69                        0x000055c173c512c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade < 3.0 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade < 3.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade < 3.7 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ < 4.0 {\n            letterGrades.append(\"B\")\n        } else if grade < 4.3\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade < 4.7 {\n\
    \            letterGrades.append(\"C+\")\n        } else if grade < 5.0 {\n  \
    \          letterGrades.append(\"C\")\n        } else if grade < 5.3 {\n     \
    \       letterGrades.append(\"C-\")\n        } else if grade < 5.7 {\n       \
    \     letterGrades.append(\"D+\")\n        } else if grade < 6.0 {\n         \
    \   letterGrades.append(\"D\")\n        } else if grade < 6.3 {\n            letterGrades.append(\"\
    D-\")\n        } else if grade < 6.7 {\n            letterGrades.append(\"E\"\
    )\n        } else {\n            letterGrades.append(\"F\")\n        }\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpraqp77wh/tmpraqp77wh.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad262dac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad25fd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad25fd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad25fd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpraqp77wh                        0x0000563cf52d07f6 <unavailable> + 6134

    5    libc.so.6                          0x00002aad264c6460 __libc_start_main +
    245

    6    tmpraqp77wh                        0x0000563cf52d0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.sorted()\n    gradesArray = gradesArray.filter{$0\
    \ > 0}\n    gradesArray = gradesArray.filter{$0 >= 0}\n    gradesArray = gradesArray.filter{$0\
    \ <= 1}\n    gradesArray = gradesArray.filter{$0 >= 1}\n    gradesArray = gradesArray.filter{$0\
    \ >= 2}\n    gradesArray = gradesArray.filter{$0 >= 3}\n    gradesArray = gradesArray.filter{$0\
    \ >= 4}\n    gradesArray = gradesArray.filter{$0 >= 5}\n    gradesArray = gradesArray.filter{$0\
    \ >= 6}\n    gradesArray = gradesArray.filter{$0 >= 7}\n    gradesArray = gradesArray.filter{$0\
    \ >= 8}\n    gradesArray = gradesArray.filter{$0 >= 9}\n    gradesArray = gradesArray.filter{$0\
    \ >= 10}\n    gradesArray = gradesArray.filter{$0 >= 11}\n    gradesArray = gradesArray.filter{$0\
    \ >= 12}\n    gradesArray = gradesArray.filter{$0 >= 13}\n    gradesArray = gradesArray.filter{$0\
    \ >= 14}\n    gradesArray = gradesArray.filter{$0 >= 15}\n    gradesArray = gradesArray.filter{$0\
    \ >= 16}\n    gradesArray = gradesArray.filter{$0 >= 17}\n    gradesArray = gradesArray.filter{$0\
    \ >= 18}\n    gradesArray = gradesArray.filter{$0 >= 19}\n    gradesArray = gradesArray.filter{$0\
    \ >= 20}\n    gradesArray = gradesArray.filter{$0 >= 21}\n    gradesArray = gradesArray.filter{$0\
    \ >= 22}\n    gradesArray = gradesArray.filter{$0 >= 23}\n    gradesArray = gradesArray.filter{$0\
    \ >= 24}\n    gradesArray = gradesArray.filter{$0 >= 25}\n    gradesArray = gradesArray.filter{$0\
    \ >= 26}\n    gradesArray = gradesArray.filter{$0 >= 27}\n    gradesArray = gradesArray.filter{$0\
    \ >= 28}\n    gradesArray = gradesArray.filter{$0 >= 29}\n    gradesArray = gradesArray.filter\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp44kikgiq.swift:58:31: error: cannot assign value of type '((Double)\
    \ throws -> Bool) throws -> [Double]' to type '[Double]'\n    gradesArray = gradesArray.filter\n\
    \                  ~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades =\
    \ [String]()\n    for i in 0..<gradesArray.count {\n        let grade = gradesArray[i]\n\
    \        if grade < 3.0 {\n            letterGrades.append(\"E\")\n        } else\
    \ if grade < 3.3 {\n            letterGrades.append(\"D-\")\n        } else if\
    \ grade < 3.7 {\n            letterGrades.append(\"C-\")\n        } else if grade\
    \ < 4.0 {\n            letterGrades.append(\"B-\")\n        } else if grade <\
    \ 4.3 {\n            letterGrades.append(\"B-\")\n        } else if grade < 4.7\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade < 5.0 {\n\
    \            letterGrades.append(\"B-\")\n        } else if grade < 5.3 {\n  \
    \          letterGrades.append(\"B-\")\n        } else if grade < 5.7 {\n    \
    \        letterGrades.append(\"B-\")\n        } else if grade < 6.0 {\n      \
    \      letterGrades.append(\"B-\")\n        } else if grade < 6.3 {\n        \
    \    letterGrades.append(\"B-\")\n        } else if grade < 6.7 {\n          \
    \  letterGrades.append(\"B-\")\n        } else if grade < 7.0 {\n            letterGrades.append(\"\
    B-\")\n        } else if grade < 7.3 {\n            letterGrades.append(\"B-\"\
    )\n        } else if grade < 7.7 {\n            letterGrades.append(\"B-\")\n\
    \        } else if grade < 8.0 {\n            letterGrades.append(\"B-\")\n  \
    \      } else if grade < 8.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if grade < 8.7 {\n            letterGrades.append(\"B-\")\n      \
    \  } else if grade < 9.0 {\n            letterGrades.append(\"B-\")\n        }\
    \ else if grade < 9.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade < 9.7 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade < 10.0 {\n            letterGrades.append(\"B-\")\n        } else if grade\
    \ < 10.3 {\n            letterGrades.append(\"B-\")\n        } else if grade <\
    \ 10.7 {\n            letterGrades.append(\"B-\")\n        } else if grade < 11.0\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade < 11.3 {\n\
    \            letterGrades.append(\"B-\")\n        } else if grade < 11.7 {\n \
    \           letterGrades.append(\"B-\")\n        } else if grade < 12.0 {\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4pjqkwn0.swift:102:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp4pjqkwn0.swift:25:36:\
    \ note: to match this opening '{'\n    for i in 0..<gradesArray.count {\n    \
    \                               ^\n/tmp/tmp4pjqkwn0.swift:102:66: error: expected\
    \ '}' at end of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7])\
    \ == [\"E\", \"D-\"])\n                                                      \
    \           ^\n/tmp/tmp4pjqkwn0.swift:22:59: note: to match this opening '{'\n\
    func numerical_letter_grade(grades: [Double]) -> [String] {\n                \
    \                                          ^\n/tmp/tmp4pjqkwn0.swift:85:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp4pjqkwn0.swift:23:9:\
    \ warning: variable 'gradesArray' was never mutated; consider changing to 'let'\
    \ constant\n    var gradesArray = grades.sorted()\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var letterGrades = [String]()\n    var letterGrade = \"\"\
    \n    var grade = grades[0]\n    var gradeCount = 1\n    var gradeLetter = \"\"\
    \n    var gradeLetterCount = 0\n    var gradeLetterIndex = 0\n    var gradeLetterIndex2\
    \ = 0\n    var gradeLetterIndex3 = 0\n    var gradeLetterIndex4 = 0\n    var gradeLetterIndex5\
    \ = 0\n    var gradeLetterIndex6 = 0\n    var gradeLetterIndex7 = 0\n    var gradeLetterIndex8\
    \ = 0\n    var gradeLetterIndex9 = 0\n    var gradeLetterIndex10 = 0\n    var\
    \ gradeLetterIndex11 = 0\n    var gradeLetterIndex12 = 0\n    var gradeLetterIndex13\
    \ = 0\n    var gradeLetterIndex14 = 0\n    var gradeLetterIndex15 = 0\n    var\
    \ gradeLetterIndex16 = 0\n    var gradeLetterIndex17 = 0\n    var gradeLetterIndex18\
    \ = 0\n    var gradeLetterIndex19 = 0\n    var gradeLetterIndex20 = 0\n    var\
    \ gradeLetterIndex21 = 0\n    var gradeLetterIndex22 = 0\n    var gradeLetterIndex23\
    \ = 0\n    var gradeLetterIndex24 = 0\n    var gradeLetterIndex25 = 0\n    var\
    \ gradeLetterIndex26 = 0\n    var gradeLetterIndex27 = 0\n    var gradeLetterIndex28\
    \ = 0\n    var gradeLetterIndex29 = 0\n    var gradeLetterIndex30 = 0\n    var\
    \ gradeLetterIndex31 = 0\n    var gradeLetterIndex32 = 0\n    var gradeLetterIndex33\
    \ = 0\n    var gradeLetterIndex34 = 0\n    var gradeLetterIndex35 = 0\n    var\
    \ gradeLetterIndex36 = 0\n    var gradeLetterIndex37 = 0\n    var gradeLetterIndex38\
    \ = 0\n    var gradeLetterIndex39 = 0\n    var gradeLetterIndex40 = 0\n    var\
    \ gradeLetterIndex41 = 0\n    var gradeLetterIndex42 = 0\n    var gradeLetterIndex43\
    \ = 0\n    var gradeLetterIndex44 = 0\n    var gradeLetterIndex45 = 0\n    var\
    \ gradeLetterIndex46 = 0\n    var gradeLetterIndex47 = 0\n    var gradeLetterIndex48\
    \ = 0\n    var gradeLetterIndex49 = 0\n    var gradeLetterIndex50 = 0\n    var\
    \ gradeLetterIndex51 = 0\n    var gradeLetterIndex52 = 0\n    var gradeLetterIndex53\
    \ = 0\n    var gradeLetterIndex54 = 0\n    var gradeLetterIndex55 = 0\n    var\
    \ gradeLetterIndex56 = 0\n    var gradeLetterIndex57 = 0\n    var gradeLetterIndex58\
    \ = 0\n    var gradeLetterIndex59 = 0\n    var gradeLetterIndex60 = 0\n    var\
    \ gradeLetterIndex61 = 0\n    var gradeLetterIndex62 = 0\n    var gradeLetterIndex63\
    \ = 0\n    var gradeLetterIndex64 = 0\n    var gradeLetterIndex65 = 0\n    var\
    \ grade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpigufizdv.swift:96:9: error: type annotation missing in pattern\n\
    \    var grade\n        ^\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.map { $0 }\n    var gradesArrayCopy\
    \ = gradesArray\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArray.removeFirst()\n\
    \    gradesArray.removeLast()\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArray.removeFirst()\n\
    \    gradesArray.removeLast()\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArray.removeFirst()\n\
    \    gradesArray.removeLast()\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArray.removeFirst()\n\
    \    gradesArray.removeLast()\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArray.removeFirst()\n\
    \    gradesArray.removeLast()\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArray.removeFirst()\n\
    \    gradesArray.removeLast()\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArray.removeFirst()\n\
    \    gradesArray.removeLast()\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArray.removeFirst()\n\
    \    gradesArray.removeLast()\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArray.removeFirst()\n\
    \    gradesArray.removeLast()\n    gradesArray.removeFirst()\n    gradesArray.removeLast()\n\
    \    gradesArray.removeFirst()\n    gradesArray.removeLast()\n    gradesArray.removeFirst()\n\
    \    gradesArray.removeLast()\n    gradesArray.removeFirst()\n    \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9lsda7vj.swift:24:9: warning: initialization of variable 'gradesArrayCopy'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayCopy = gradesArray\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp9lsda7vj.swift:87:1:\
    \ error: missing return in global function expected to return '[String]'\n}\n\
    ^\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    for grade in gradesArray {\n        if\
    \ grade < 3.0 {\n            letterGrades.append(\"A+\")\n        } else if grade\
    \ < 3.3 {\n            letterGrades.append(\"A-\")\n        } else if grade <\
    \ 3.7 {\n            letterGrades.append(\"A\")\n        } else if grade < 4.0\
    \ {\n            letterGrades.append(\"B+\")\n        } else if grade < 4.3 {\n\
    \            letterGrades.append(\"B\")\n        } else if grade < 4.7 {\n   \
    \         letterGrades.append(\"B-\")\n        } else if grade < 5.0 {\n     \
    \       letterGrades.append(\"C+\")\n        } else if grade < 5.3 {\n       \
    \     letterGrades.append(\"C\")\n        } else if grade < 5.7 {\n          \
    \  letterGrades.append(\"C-\")\n        } else if grade < 6.0 {\n            letterGrades.append(\"\
    D+\")\n        } else if grade < 6.3 {\n            letterGrades.append(\"D\"\
    )\n        } else if grade < 6.7 {\n            letterGrades.append(\"D-\")\n\
    \        } else if grade < 7.0 {\n            letterGrades.append(\"E\")\n   \
    \     } else {\n            letterGrades.append(\"F\")\n        }\n    }\n   \
    \ return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgylbwrm1/tmpgylbwrm1.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0daae0ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0daab05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0daab05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0daab047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgylbwrm1                        0x0000556b9d36f896 <unavailable> + 6294

    5    libc.so.6                          0x00002b0daaffa460 __libc_start_main +
    245

    6    tmpgylbwrm1                        0x0000556b9d36f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var gpa = gradesArray[0]\n    for grade\
    \ in gradesArray {\n        if grade < gpa {\n            letterGrades.append(\"\
    E\")\n            break\n        }\n        if grade == gpa {\n            letterGrades.append(\"\
    D\")\n            break\n        }\n        if grade > gpa {\n            letterGrades.append(\"\
    D\")\n            if grade < 3.0 {\n                letterGrades.append(\"C\"\
    )\n            }\n            if grade < 3.3 {\n                letterGrades.append(\"\
    B\")\n            }\n            if grade < 3.7 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 4.0 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 4.3 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 4.7 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 5.0 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 5.3 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 5.7 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 6.0 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 6.3 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 6.7 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 7.0 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 7.3 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 7.7 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 8.0 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 8.3 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 8.7 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 9.0 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 9.3 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 9.7 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 10.0 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 10.3 {\n                letterGrades.append(\"\
    A\")\n            }\n            if grade < 10.7 {\n                letterGrades.append(\"\
    A\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpllactor3.swift:129:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpllactor3.swift:36:24:\
    \ note: to match this opening '{'\n        if grade > gpa {\n                \
    \       ^\n/tmp/tmpllactor3.swift:129:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpllactor3.swift:27:30:\
    \ note: to match this opening '{'\n    for grade in gradesArray {\n          \
    \                   ^\n/tmp/tmpllactor3.swift:129:66: error: expected '}' at end\
    \ of brace statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"\
    E\", \"D-\"])\n                                                              \
    \   ^\n/tmp/tmpllactor3.swift:22:59: note: to match this opening '{'\nfunc numerical_letter_grade(grades:\
    \ [Double]) -> [String] {\n                                                  \
    \        ^\n/tmp/tmpllactor3.swift:112:6: error: operator functions can only be\
    \ declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n/tmp/tmpllactor3.swift:26:9: warning: variable 'gpa'\
    \ was never mutated; consider changing to 'let' constant\n    var gpa = gradesArray[0]\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        let letterGrade = grade >= 3.0 ? \"A+\" :\n            grade >= 2.7 ?\
    \ \"A\" :\n            grade >= 2.3 ? \"A-\" :\n            grade >= 2.0 ? \"\
    B+\" :\n            grade >= 1.7 ? \"B\" :\n            grade >= 1.3 ? \"B-\"\
    \ :\n            grade >= 1.0 ? \"C+\" :\n            grade >= 0.7 ? \"C\" :\n\
    \            grade >= 0.3 ? \"C-\" :\n            grade >= 0.0 ? \"D+\" :\n  \
    \          grade >= 0.0 ? \"D\" :\n            grade >= 0.0 ? \"D-\" :\n     \
    \       \"E\"\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpsymtzt4w/tmpsymtzt4w.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7cc861c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7cc558b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7cc558988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7cc5577b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsymtzt4w                        0x000055608dbf57f6 <unavailable> + 6134

    5    libc.so.6                          0x00002af7cca4d460 __libc_start_main +
    245

    6    tmpsymtzt4w                        0x000055608dbf5319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    switch $0 {\n        case 4.0:\n            gradesArray.append(\"A+\")\n\
    \        case 3.7...3.3:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n    \
    \        gradesArray.append(\"B+\")\n        case 2.7...2.3:\n            gradesArray.append(\"\
    B\")\n        case 2.3...2.0:\n            gradesArray.append(\"B-\")\n      \
    \  case 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7...1.3:\n\
    \            gradesArray.append(\"C\")\n        case 1.3...1.0:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7...1.0:\n            gradesArray.append(\"D\")\n        case 0.0:\n     \
    \       gradesArray.append(\"D-\")\n        case 0...0.1:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ad304e64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad304b5b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad304b5b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad304b5b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad304b5abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpo9tj0l18                        0x000056087d74625f <unavailable> + 8799

    6    tmpo9tj0l18                        0x000056087d746f40 <unavailable> + 12096

    7    libswiftCore.so                    0x00002ad304bbf800 Sequence.forEach(_:)
    + 420

    8    tmpo9tj0l18                        0x000056087d746092 <unavailable> + 8338

    9    tmpo9tj0l18                        0x000056087d74568d <unavailable> + 5773

    10   libc.so.6                          0x00002ad305050460 __libc_start_main +
    245

    11   tmpo9tj0l18                        0x000056087d745349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        let letterGrade = grade >= 4.0 ? \"A+\" :\n            grade >= 3.7 ?\
    \ \"A\" :\n            grade >= 3.3 ? \"A-\" :\n            grade >= 3.0 ? \"\
    B+\" :\n            grade >= 2.7 ? \"B\" :\n            grade >= 2.3 ? \"B-\"\
    \ :\n            grade >= 2.0 ? \"C+\" :\n            grade >= 1.7 ? \"C\" :\n\
    \            grade >= 1.3 ? \"C-\" :\n            grade >= 1.0 ? \"D+\" :\n  \
    \          grade >= 0.7 ? \"D\" :\n            grade >= 0.0 ? \"D-\" :\n     \
    \       \"E\"\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpjdgc5laj/tmpjdgc5laj.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbcdcd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbcd9c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbcd9c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbcd9c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjdgc5laj                        0x000055a533eb47f6 <unavailable> + 6134

    5    libc.so.6                          0x00002abbcdebc460 __libc_start_main +
    245

    6    tmpjdgc5laj                        0x000055a533eb4319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    switch $0 {\n        case 0...3.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.0...5.0:\n            gradesArray.append(\"A\")\n        case\
    \ 5.0...7.0:\n            gradesArray.append(\"A-\")\n        case 7.0...9.0:\n\
    \            gradesArray.append(\"B+\")\n        case 9.0...11.0:\n          \
    \  gradesArray.append(\"B\")\n        case 11.0...13.0:\n            gradesArray.append(\"\
    B-\")\n        case 13.0...15.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 15.0...17.0:\n            gradesArray.append(\"C\")\n        case 17.0...19.0:\n\
    \            gradesArray.append(\"C-\")\n        case 19.0...21.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 21.0...23.0:\n            gradesArray.append(\"\
    D\")\n        case 23.0...25.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 25.0...27.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpn2_fwopz/tmpn2_fwopz.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31b5610c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31b5307b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31b5307988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31b53067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2_fwopz                        0x000055cd76459826 <unavailable> + 6182

    5    libc.so.6                          0x00002b31b57fc460 __libc_start_main +
    245

    6    tmpn2_fwopz                        0x000055cd76459349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"\"\n    var currentLetterGradeIndex = 0\n    var\
    \ currentLetterGradeIndex2 = 0\n    var currentLetterGradeIndex3 = 0\n    var\
    \ currentLetterGradeIndex4 = 0\n    var currentLetterGradeIndex5 = 0\n    var\
    \ currentLetterGradeIndex6 = 0\n    var currentLetterGradeIndex7 = 0\n    var\
    \ currentLetterGradeIndex8 = 0\n    var currentLetterGradeIndex9 = 0\n    var\
    \ currentLetterGradeIndex10 = 0\n    var currentLetterGradeIndex11 = 0\n    var\
    \ currentLetterGradeIndex12 = 0\n    var currentLetterGradeIndex13 = 0\n    var\
    \ currentLetterGradeIndex14 = 0\n    var currentLetterGradeIndex15 = 0\n    var\
    \ currentLetterGradeIndex16 = 0\n    var currentLetterGradeIndex17 = 0\n    var\
    \ currentLetterGradeIndex18 = 0\n    var currentLetterGradeIndex19 = 0\n    var\
    \ currentLetterGradeIndex20 = 0\n    var currentLetterGradeIndex21 = 0\n    var\
    \ currentLetterGradeIndex22 = 0\n    var currentLetterGradeIndex23 = 0\n    var\
    \ currentLetterGradeIndex24 = 0\n    var currentLetterGradeIndex25 = 0\n    var\
    \ currentLetterGradeIndex26 = 0\n    var currentLetterGradeIndex27 = 0\n    var\
    \ currentLetterGradeIndex28 = 0\n    var currentLetterGradeIndex29 = 0\n    var\
    \ currentLetterGradeIndex30 = 0\n    var currentLetterGradeIndex31 = 0\n    var\
    \ currentLetterGradeIndex32 = 0\n    var currentLetterGradeIndex33 = 0\n    var\
    \ currentLetterGradeIndex34 = 0\n    var currentLetterGradeIndex35 = 0\n    var\
    \ currentLetterGradeIndex36 = 0\n    var currentLetterGradeIndex37 = 0\n    var\
    \ currentLetterGradeIndex38 = 0\n    var currentLetterGradeIndex39 = 0\n    var\
    \ currentLetterGradeIndex40 = 0\n    var currentLetterGradeIndex41 = 0\n    var\
    \ currentLetterGradeIndex42 = 0\n    var currentLetterGradeIndex43 = 0\n    var\
    \ currentLetterGradeIndex44 = 0\n    var currentLetterGradeIndex45 = 0\n    var\
    \ currentLetterGradeIndex46 = 0\n    var currentLetterGradeIndex47 = 0\n    var\
    \ currentLetterGradeIndex48 = 0\n    var currentLetterGradeIndex49 = 0\n    var\
    \ currentLetterGradeIndex50 = 0\n    var currentLetterGradeIndex51 = 0\n    var\
    \ currentLetterGradeIndex52 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpi6gn_6cq.swift:25:9: warning: initialization of variable 'letterGrades'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var letterGrades = [String]()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpi6gn_6cq.swift:26:9:\
    \ warning: initialization of variable 'currentGrade' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var currentGrade = gradesArray[0]\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpi6gn_6cq.swift:27:9: warning: initialization\
    \ of variable 'currentLetterGrade' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var currentLetterGrade = \"\"\n    ~~~~^~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpi6gn_6cq.swift:28:9: warning: initialization of variable 'currentLetterGradeIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var currentLetterGradeIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n\
    /tmp/tmpi6gn_6cq.swift:29:9: warning: initialization of variable 'currentLetterGradeIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var currentLetterGradeIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n\
    /tmp/tmpi6gn_6cq.swift:30:9: warning: initialization of variable 'currentLetterGradeIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var currentLetterGradeIndex3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n\
    /tmp/tmpi6gn_6cq.swift:31:9: warning: initialization of variable 'currentLetterGradeIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var currentLetterGradeIndex4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n\
    /tmp/tmpi6gn_6cq.swift:32:9: warning: initialization of variable 'currentLetterGradeIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var currentLetterGradeIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n\
    /tmp/tmpi6gn_6cq.swift:33:9: warning: initialization of variable 'currentLetterGradeIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var currentLetterGrad"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    grades.forEach {\n  \
    \      switch $0 {\n        case 0...3.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.0...5.0:\n            gradesArray.append(\"A\")\n        case\
    \ 5.0...7.0:\n            gradesArray.append(\"A-\")\n        case 7.0...9.0:\n\
    \            gradesArray.append(\"B+\")\n        case 9.0...11.0:\n          \
    \  gradesArray.append(\"B\")\n        case 11.0...13.0:\n            gradesArray.append(\"\
    B-\")\n        case 13.0...15.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 15.0...17.0:\n            gradesArray.append(\"C\")\n        case 17.0...19.0:\n\
    \            gradesArray.append(\"C-\")\n        case 19.0...21.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 21.0...23.0:\n            gradesArray.append(\"\
    D\")\n        case 23.0...25.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 25.0...27.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpas89wwb6/tmpas89wwb6.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20bc00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20bbd03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20bbd03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20bbd027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpas89wwb6                        0x00005560990557c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b20bc1f8460 __libc_start_main +
    245

    6    tmpas89wwb6                        0x00005560990552e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7266dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef72364561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aef72364286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aef7236413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aef72363bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxv281r_o                        0x000055bdafe8837c <unavailable> + 9084

    6    tmpxv281r_o                        0x000055bdafe8778d <unavailable> + 6029

    7    libc.so.6                          0x00002aef72859460 __libc_start_main +
    245

    8    tmpxv281r_o                        0x000055bdafe87449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b61cc16bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61cbe62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b61cbe62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b61cbe6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b61cbe61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptnx6flla                        0x0000556a3800d337 <unavailable> + 9015

    6    tmptnx6flla                        0x0000556a3800c73d <unavailable> + 5949

    7    libc.so.6                          0x00002b61cc357460 __libc_start_main +
    245

    8    tmptnx6flla                        0x0000556a3800c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.map { $0 }\n    gradesArray = gradesArray.sorted(by:\
    \ { $0 < $1 })\n    var gradesArrayCopy = gradesArray\n    var gradesArrayCopyCount\
    \ = gradesArrayCopy.count\n    var gradesArrayCopyIndex = 0\n    var gradesArrayCopyIndexCount\
    \ = 0\n    var gradesArrayCopyIndexMax = gradesArrayCopy.count - 1\n    var gradesArrayCopyIndexMin\
    \ = 0\n    var gradesArrayCopyIndexSum = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n    var gradesArrayCopyIndexSumMin = 0\n    var gradesArrayCopyIndexSumMax\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6rlln1p2.swift:34:9: error: invalid redeclaration of 'gradesArrayCopyIndexSumMax'\n\
    \    var gradesArrayCopyIndexSumMax = 0\n        ^\n/tmp/tmp6rlln1p2.swift:32:9:\
    \ note: 'gradesArrayCopyIndexSumMax' previously declared here\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n        ^\n/tmp/tmp6rlln1p2.swift:35:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexSumMin'\n    var gradesArrayCopyIndexSumMin = 0\n     \
    \   ^\n/tmp/tmp6rlln1p2.swift:33:9: note: 'gradesArrayCopyIndexSumMin' previously\
    \ declared here\n    var gradesArrayCopyIndexSumMin = 0\n        ^\n/tmp/tmp6rlln1p2.swift:36:9:\
    \ error: invalid redeclaration of 'gradesArrayCopyIndexSumMax'\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n        ^\n/tmp/tmp6rlln1p2.swift:32:9: note: 'gradesArrayCopyIndexSumMax'\
    \ previously declared here\n    var gradesArrayCopyIndexSumMax = 0\n        ^\n\
    /tmp/tmp6rlln1p2.swift:37:9: error: invalid redeclaration of 'gradesArrayCopyIndexSumMin'\n\
    \    var gradesArrayCopyIndexSumMin = 0\n        ^\n/tmp/tmp6rlln1p2.swift:33:9:\
    \ note: 'gradesArrayCopyIndexSumMin' previously declared here\n    var gradesArrayCopyIndexSumMin\
    \ = 0\n        ^\n/tmp/tmp6rlln1p2.swift:38:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexSumMax'\n    var gradesArrayCopyIndexSumMax = 0\n     \
    \   ^\n/tmp/tmp6rlln1p2.swift:32:9: note: 'gradesArrayCopyIndexSumMax' previously\
    \ declared here\n    var gradesArrayCopyIndexSumMax = 0\n        ^\n/tmp/tmp6rlln1p2.swift:39:9:\
    \ error: invalid redeclaration of 'gradesArrayCopyIndexSumMin'\n    var gradesArrayCopyIndexSumMin\
    \ = 0\n        ^\n/tmp/tmp6rlln1p2.swift:33:9: note: 'gradesArrayCopyIndexSumMin'\
    \ previously declared here\n    var gradesArrayCopyIndexSumMin = 0\n        ^\n\
    /tmp/tmp6rlln1p2.swift:40:9: error: invalid redeclaration of 'gradesArrayCopyIndexSumMax'\n\
    \    var gradesArrayCopyIndexSumMax = 0\n        ^\n/tmp/tmp6rlln1p2.swift:32:9:\
    \ note: 'gradesArrayCopyIndexSumMax' previously declared here\n    var gradesArrayCopyIndexSumMax\
    \ = 0\n        ^\n/tmp/tmp6rlln1p2.swift:41:9: error: invalid redeclaration of\
    \ 'gradesArrayCopyIndexSumMin'\n    var gradesArray"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades =\
    \ [String]()\n    var currentGrade = gradesArray[0]\n    var currentLetterGrade\
    \ = \"\"\n    \n    for grade in gradesArray {\n        if grade > currentGrade\
    \ {\n            letterGrades.append(currentLetterGrade)\n            currentGrade\
    \ = grade\n            currentLetterGrade = \"\"\n        }\n        \n      \
    \  if grade == currentGrade {\n            currentLetterGrade = currentLetterGrade\
    \ + String(grade - currentGrade)\n        }\n    }\n    \n    letterGrades.append(currentLetterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpmw305fw8/tmpmw305fw8.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaf893b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaf890b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaf890b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaf890af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmw305fw8                        0x0000560e23d24a06 <unavailable> + 6662

    5    libc.so.6                          0x00002aaf895a5460 __libc_start_main +
    245

    6    tmpmw305fw8                        0x0000560e23d24529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if grade > 2.7 {\n            gradesArray.append(\"A\")\n        } else if grade\
    \ > 2.3 {\n            gradesArray.append(\"A-\")\n        } else if grade > 2.0\
    \ {\n            gradesArray.append(\"B+\")\n        } else if grade > 1.7 {\n\
    \            gradesArray.append(\"B\")\n        } else if grade > 1.3 {\n    \
    \        gradesArray.append(\"B-\")\n        } else if grade > 1.0 {\n       \
    \     gradesArray.append(\"C+\")\n        } else if grade > 0.7 {\n          \
    \  gradesArray.append(\"C\")\n        } else if grade > 0.0 {\n            gradesArray.append(\"\
    C-\")\n        } else if grade > 0.0 {\n            gradesArray.append(\"D+\"\
    )\n        } else if grade > 0.0 {\n            gradesArray.append(\"D\")\n  \
    \      } else if grade > 0.0 {\n            gradesArray.append(\"D-\")\n     \
    \   } else {\n            gradesArray.append(\"E\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpj_pnyw56/tmpj_pnyw56.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac1716bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1713b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1713b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1713b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj_pnyw56                        0x000055f6614387a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ac1718ab460 __libc_start_main +
    245

    6    tmpj_pnyw56                        0x000055f6614382c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7...3.3:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3...3.0:\n            letterGrades.append(\"A-\")\n        case 3.0:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7...2.3:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3...2.0:\n            letterGrades.append(\"\
    B-\")\n        case 2.0:\n            letterGrades.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            letterGrades.append(\"C\")\n        case 1.3...1.0:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0:\n            letterGrades.append(\"\
    D+\")\n        case 0.7...1.0:\n            letterGrades.append(\"D\")\n     \
    \   case 0.0:\n            letterGrades.append(\"D-\")\n        case 0...0.1:\n\
    \            letterGrades.append(\"E\")\n        default:\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002adae9573c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adae926a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002adae926a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002adae926a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002adae9269bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpg1kmskc3                        0x0000560545c6c37c <unavailable> + 9084

    6    tmpg1kmskc3                        0x0000560545c6b78d <unavailable> + 6029

    7    libc.so.6                          0x00002adae975f460 __libc_start_main +
    245

    8    tmpg1kmskc3                        0x0000560545c6b449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.map { $0 }\n    var letterGrades\
    \ = [String]()\n    var gpa = grades.reduce(0, combine: +)\n    var gpaIndex =\
    \ 0\n    while gpa > 0 {\n        let gpaIndex = (gpa - gradesArray[gpaIndex]).truncatingRemainder(dividingBy:\
    \ 1)\n        letterGrades.append(letterGrade(from: gpaIndex, to: gpaIndex))\n\
    \        gpa -= gradesArray[gpaIndex]\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpclvyvwt3.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpclvyvwt3.swift:29:29:\
    \ error: cannot find 'letterGrade' in scope\n        letterGrades.append(letterGrade(from:\
    \ gpaIndex, to: gpaIndex))\n                            ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade < 3.0 {\n            letterGrades.append(\"E\")\n        } else\
    \ if grade < 3.3 {\n            letterGrades.append(\"D-\")\n        } else if\
    \ grade < 3.7 {\n            letterGrades.append(\"C-\")\n        } else if grade\
    \ < 4.0 {\n            letterGrades.append(\"B-\")\n        } else if grade <\
    \ 4.3 {\n            letterGrades.append(\"B-\")\n        } else if grade < 4.7\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade < 5.0 {\n\
    \            letterGrades.append(\"B-\")\n        } else if grade < 5.3 {\n  \
    \          letterGrades.append(\"B-\")\n        } else if grade < 5.7 {\n    \
    \        letterGrades.append(\"B-\")\n        } else if grade < 6.0 {\n      \
    \      letterGrades.append(\"B-\")\n        } else if grade < 6.3 {\n        \
    \    letterGrades.append(\"B-\")\n        } else if grade < 6.7 {\n          \
    \  letterGrades.append(\"B-\")\n        } else if grade < 7.0 {\n            letterGrades.append(\"\
    B-\")\n        } else if grade < 7.3 {\n            letterGrades.append(\"B-\"\
    )\n        } else if grade < 7.7 {\n            letterGrades.append(\"B-\")\n\
    \        } else if grade < 8.0 {\n            letterGrades.append(\"B-\")\n  \
    \      } else if grade < 8.3 {\n            letterGrades.append(\"B-\")\n    \
    \    } else if grade < 8.7 {\n            letterGrades.append(\"B-\")\n      \
    \  } else if grade < 9.0 {\n            letterGrades.append(\"B-\")\n        }\
    \ else if grade < 9.3 {\n            letterGrades.append(\"B-\")\n        } else\
    \ if grade < 9.7 {\n            letterGrades.append(\"B-\")\n        } else if\
    \ grade < 10.0 {\n            letterGrades.append(\"B-\")\n        } else if grade\
    \ < 10.3 {\n            letterGrades.append(\"B-\")\n        } else if grade <\
    \ 10.7 {\n            letterGrades.append(\"B-\")\n        } else if grade < 11.0\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade < 11.3 {\n\
    \            letterGrades.append(\"B-\")\n        } else if grade < 11.7 {\n \
    \           letterGrades.append(\"B-\")\n        } else if grade < 12.0 {\n  \
    \          letterGrades.append(\"B-\")\n        } else if grade < 12.3 {\n   \
    \         letterGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmwy6e_bg.swift:103:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpmwy6e_bg.swift:24:25:\
    \ note: to match this opening '{'\n    for grade in grades {\n               \
    \         ^\n/tmp/tmpmwy6e_bg.swift:103:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpmwy6e_bg.swift:22:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpmwy6e_bg.swift:82:13: error: cannot find 'letterGrade' in scope\n    \
    \        letterGrade\n            ^~~~~~~~~~~\n/tmp/tmpmwy6e_bg.swift:86:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade >= 4.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade >= 3.7 && grade < 4.0 {\n            letterGrades.append(\"A\"\
    )\n        } else if grade >= 3.3 && grade < 3.7 {\n            letterGrades.append(\"\
    A-\")\n        } else if grade >= 3.0 && grade < 3.3 {\n            letterGrades.append(\"\
    B+\")\n        } else if grade >= 2.7 && grade < 3.0 {\n            letterGrades.append(\"\
    B\")\n        } else if grade >= 2.3 && grade < 2.7 {\n            letterGrades.append(\"\
    B-\")\n        } else if grade >= 2.0 && grade < 2.3 {\n            letterGrades.append(\"\
    C+\")\n        } else if grade >= 1.7 && grade < 2.0 {\n            letterGrades.append(\"\
    C\")\n        } else if grade >= 1.3 && grade < 1.7 {\n            letterGrades.append(\"\
    C-\")\n        } else if grade >= 1.0 && grade < 1.3 {\n            letterGrades.append(\"\
    D+\")\n        } else if grade >= 0.7 && grade < 1.0 {\n            letterGrades.append(\"\
    D\")\n        } else if grade >= 0.0 && grade < 0.7 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdjxx0tx0/tmpdjxx0tx0.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac503e6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac503b61b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac503b61988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac503b607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdjxx0tx0                        0x000055fbadaa17f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ac504056460 __libc_start_main +
    245

    6    tmpdjxx0tx0                        0x000055fbadaa1319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        \n        if grade > 3.0 {\n            letterGrades.append(\"\
    A+\")\n        } else if grade > 2.7 {\n            letterGrades.append(\"A\"\
    )\n        } else if grade > 2.3 {\n            letterGrades.append(\"A-\")\n\
    \        } else if grade > 2.0 {\n            letterGrades.append(\"B+\")\n  \
    \      } else if grade > 1.7 {\n            letterGrades.append(\"B\")\n     \
    \   } else if grade > 1.3 {\n            letterGrades.append(\"B-\")\n       \
    \ } else if grade > 1.0 {\n            letterGrades.append(\"C+\")\n        }\
    \ else if grade > 0.7 {\n            letterGrades.append(\"C\")\n        } else\
    \ if grade > 0.3 {\n            letterGrades.append(\"C-\")\n        } else if\
    \ grade > 0.0 {\n            letterGrades.append(\"D+\")\n        } else if grade\
    \ > -0.3 {\n            letterGrades.append(\"D\")\n        } else if grade >\
    \ -0.7 {\n            letterGrades.append(\"D-\")\n        } else if grade > -1.0\
    \ {\n            letterGrades.append(\"E\")\n        } else {\n            letterGrades.append(\"\
    F\")\n        }\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp17ksss99/tmp17ksss99.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60a6f5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60a6c56b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60a6c56988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60a6c557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp17ksss99                        0x000055fc716367f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b60a714b460 __libc_start_main +
    245

    6    tmp17ksss99                        0x000055fc71636319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        if grade < 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if grade < 3.3 {\n            gradesArray.append(\"A\")\n        } else if grade\
    \ < 3.7 {\n            gradesArray.append(\"A-\")\n        } else if grade < 4.0\
    \ {\n            gradesArray.append(\"B+\")\n        } else if grade < 4.3 {\n\
    \            gradesArray.append(\"B\")\n        } else if grade < 4.7 {\n    \
    \        gradesArray.append(\"B-\")\n        } else if grade < 5.0 {\n       \
    \     gradesArray.append(\"C+\")\n        } else if grade < 5.3 {\n          \
    \  gradesArray.append(\"C\")\n        } else if grade < 5.7 {\n            gradesArray.append(\"\
    C-\")\n        } else if grade < 6.0 {\n            gradesArray.append(\"D+\"\
    )\n        } else if grade < 6.3 {\n            gradesArray.append(\"D\")\n  \
    \      } else if grade < 6.7 {\n            gradesArray.append(\"D-\")\n     \
    \   } else if grade < 7.0 {\n            gradesArray.append(\"E\")\n        }\
    \ else {\n            gradesArray.append(\"F\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdnjavkwe/tmpdnjavkwe.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba547778c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba54746fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba54746f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba54746e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdnjavkwe                        0x000055e41eb067a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba547964460 __libc_start_main +
    245

    6    tmpdnjavkwe                        0x000055e41eb062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if grade > 2.7 {\n            gradesArray.append(\"A\")\n        } else if grade\
    \ > 2.3 {\n            gradesArray.append(\"A-\")\n        } else if grade > 1.7\
    \ && grade < 2.0 {\n            gradesArray.append(\"B+\")\n        } else if\
    \ grade > 1.3 && grade < 1.7 {\n            gradesArray.append(\"B\")\n      \
    \  } else if grade > 1.0 {\n            gradesArray.append(\"B-\")\n        }\
    \ else if grade > 0.7 {\n            gradesArray.append(\"C+\")\n        } else\
    \ if grade > 0.3 {\n            gradesArray.append(\"C\")\n        } else if grade\
    \ > 0.0 {\n            gradesArray.append(\"C-\")\n        } else if grade > 0.0\
    \ {\n            gradesArray.append(\"D+\")\n        } else if grade > 0.0 {\n\
    \            gradesArray.append(\"D\")\n        } else {\n            gradesArray.append(\"\
    D-\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmprfsva240/tmprfsva240.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72f1dc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72f1abcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72f1abc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72f1abb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprfsva240                        0x000056489f77e7a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b72f1fb1460 __libc_start_main +
    245

    6    tmprfsva240                        0x000056489f77e2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var gpa = gradesArray[0]\n    var letterGrade\
    \ = \"\"\n    for _ in gradesArray {\n        if gpa > 3.0 {\n            letterGrade\
    \ = \"A+\"\n        } else if gpa > 2.7 {\n            letterGrade = \"A\"\n \
    \       } else if gpa > 2.3 {\n            letterGrade = \"A-\"\n        } else\
    \ if gpa > 1.7 && gpa < 2.0 {\n            letterGrade = \"B+\"\n        } else\
    \ if gpa > 1.3 && gpa < 1.7 {\n            letterGrade = \"B\"\n        } else\
    \ if gpa > 1.0 && gpa < 1.3 {\n            letterGrade = \"B-\"\n        } else\
    \ if gpa > 0.7 && gpa < 1.0 {\n            letterGrade = \"C+\"\n        } else\
    \ if gpa > 0.3 && gpa < 0.7 {\n            letterGrade = \"C\"\n        } else\
    \ if gpa > 0.0 {\n            letterGrade = \"C-\"\n        } else {\n       \
    \     letterGrade = \"D+\"\n        }\n        letterGrades.append(letterGrade)\n\
    \        gpa -= 1.0\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3nj2t6tr/tmp3nj2t6tr.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ad04dfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ad01d6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ad01d6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ad01d57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3nj2t6tr                        0x000055832dc4c8e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b5ad06cb460 __libc_start_main +
    245

    6    tmp3nj2t6tr                        0x000055832dc4c409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n    var gradesArray = grades.sorted()\n    var letterGrades\
    \ = [String]()\n    \n    if gradesArray.count > 0 {\n        \n        let firstGPA\
    \ = gradesArray[0]\n        let lastGPA = gradesArray[gradesArray.count - 1]\n\
    \        \n        if firstGPA > lastGPA {\n            \n            for index\
    \ in 0..<gradesArray.count {\n                \n                if gradesArray[index]\
    \ > lastGPA {\n                    \n                    let firstLetterGrade\
    \ = firstGPA.rounded(toPlaces:.down).uppercased()\n                    let lastLetterGrade\
    \ = lastGPA.rounded(toPlaces:.down).uppercased()\n                    \n     \
    \               if index == gradesArray.count - 1 {\n                        letterGrades.append(firstLetterGrade)\n\
    \                    } else {\n                        letterGrades.append(firstLetterGrade\
    \ + \"-\" + lastLetterGrade)\n                    }\n                    \n  \
    \                  gradesArray.remove(at: index)\n                    \n     \
    \               break\n                }\n            }\n            \n      \
    \  } else {\n            \n            for index in 0..<gradesArray.count {\n\
    \                \n                if gradesArray[index] < firstGPA {\n      \
    \              \n                    let firstLetterGrade = firstGPA.rounded(toPlaces:.down).uppercased()\n\
    \                    let lastLetterGrade = lastGPA.rounded(toPlaces:.down).uppercased()\n\
    \                    \n                    if index == gradesArray.count - 1 {\n\
    \                        letterGrades.append(firstLetterGrade)\n             \
    \       } else {\n                        letterGrades.append(firstLetterGrade\
    \ + \"-\" + lastLetterGrade)\n                    }\n                    \n  \
    \                  gradesArray.remove(at: index)\n                    \n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpxv4d_21e.swift:38:60: error: extraneous argument label 'toPlaces:'\
    \ in call\n                    let firstLetterGrade = firstGPA.rounded(toPlaces:.down).uppercased()\n\
    \                                                           ^~~~~~~~~~\n     \
    \                                                       \n/tmp/tmpxv4d_21e.swift:38:77:\
    \ error: value of type 'Double' has no member 'uppercased'\n                 \
    \   let firstLetterGrade = firstGPA.rounded(toPlaces:.down).uppercased()\n   \
    \                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpxv4d_21e.swift:39:58: error: extraneous argument label 'toPlaces:' in\
    \ call\n                    let lastLetterGrade = lastGPA.rounded(toPlaces:.down).uppercased()\n\
    \                                                         ^~~~~~~~~~\n       \
    \                                                   \n/tmp/tmpxv4d_21e.swift:39:75:\
    \ error: value of type 'Double' has no member 'uppercased'\n                 \
    \   let lastLetterGrade = lastGPA.rounded(toPlaces:.down).uppercased()\n     \
    \                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpxv4d_21e.swift:59:60: error: extraneous argument label 'toPlaces:' in\
    \ call\n                    let firstLetterGrade = firstGPA.rounded(toPlaces:.down).uppercased()\n\
    \                                                           ^~~~~~~~~~\n     \
    \                                                       \n/tmp/tmpxv4d_21e.swift:59:77:\
    \ error: value of type 'Double' has no member 'uppercased'\n                 \
    \   let firstLetterGrade = firstGPA.rounded(toPlaces:.down).uppercased()\n   \
    \                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n\
    /tmp/tmpxv4d_21e.swift:60:58: error: extraneous argument label 'toPlaces:' in\
    \ call\n                    let lastLetterGrade = lastGPA.rounded(toPlaces:.down).uppercased()\n\
    \                                                         ^~~~~~~~~~\n       \
    \                                                   \n/tmp/tmpxv4d_21e.swift:60:75:\
    \ error: value of type 'Double' has"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpf9nscjqb.swift:24:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7266dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef72364561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aef72364286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aef7236413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aef72363bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxv281r_o                        0x000055bdafe8837c <unavailable> + 9084

    6    tmpxv281r_o                        0x000055bdafe8778d <unavailable> + 6029

    7    libc.so.6                          0x00002aef72859460 __libc_start_main +
    245

    8    tmpxv281r_o                        0x000055bdafe87449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp8si82ggq/tmp8si82ggq.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b7cf63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b7cc5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b7cc5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b7cc597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8si82ggq                        0x0000558a6cc417f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b4b7d14f460 __libc_start_main +
    245

    6    tmp8si82ggq                        0x0000558a6cc41319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n    }\n\
    \    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqgkkrtz4/tmpqgkkrtz4.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5dcf507c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5dcf1feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5dcf1fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5dcf1fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqgkkrtz4                        0x0000556a4f22d866 <unavailable> + 6246

    5    libc.so.6                          0x00002b5dcf6f3460 __libc_start_main +
    245

    6    tmpqgkkrtz4                        0x0000556a4f22d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        let letterGrade = grade < 3.0 ? \"A+\" :\n            grade < 3.7\
    \ ? \"A\" :\n            grade < 3.3 ? \"A-\" :\n            grade < 3.0 ? \"\
    B+\" :\n            grade < 2.7 ? \"B\" :\n            grade < 2.3 ? \"B-\" :\n\
    \            grade < 2.0 ? \"C+\" :\n            grade < 1.7 ? \"C\" :\n     \
    \       grade < 1.3 ? \"C-\" :\n            grade < 1.0 ? \"D+\" :\n         \
    \   grade < 0.7 ? \"D\" :\n            grade < 0.0 ? \"D-\" :\n            \"\
    E\"\n        gradesArray.append(letterGrade)\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpfp7vn_6e/tmpfp7vn_6e.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab03a225c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab039f1cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab039f1c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab039f1b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfp7vn_6e                        0x00005558949ef7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ab03a411460 __libc_start_main +
    245

    6    tmpfp7vn_6e                        0x00005558949ef319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0...2.7:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0...1.7:\n            gradesArray.append(\"C+\")\n     \
    \   case 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0...0.7:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.7...0.0:\n            gradesArray.append(\"\
    D\")\n        case 0.0...0.0:\n            gradesArray.append(\"D-\")\n      \
    \  case 0.0:\n            gradesArray.append(\"E\")\n        default:\n      \
    \      gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e6543cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e65133561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5e65133286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5e6513313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5e65132bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpgjxhvsq9                        0x000055a25cc70337 <unavailable> + 9015

    6    tmpgjxhvsq9                        0x000055a25cc6f73d <unavailable> + 5949

    7    libc.so.6                          0x00002b5e65628460 __libc_start_main +
    245

    8    tmpgjxhvsq9                        0x000055a25cc6f3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.0:\n            letterGrades.append(\"\
    E\")\n        default:\n            letterGrades.append(\"F\")\n        }\n  \
    \  }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4f2y7ok7/tmp4f2y7ok7.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8771d88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8771a7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8771a7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8771a7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4f2y7ok7                        0x000055bc6a6777f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8771f74460 __libc_start_main +
    245

    6    tmp4f2y7ok7                        0x000055bc6a677319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    grades.forEach { grade\
    \ in\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        default:\n     \
    \       gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b35ad39bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35ad092561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b35ad092286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b35ad09213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b35ad091bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpi47b3mqh                        0x000055f39846120f <unavailable> + 8719

    6    tmpi47b3mqh                        0x000055f398461df0 <unavailable> + 11760

    7    libswiftCore.so                    0x00002b35ad0f6800 Sequence.forEach(_:)
    + 420

    8    tmpi47b3mqh                        0x000055f39846103c <unavailable> + 8252

    9    tmpi47b3mqh                        0x000055f39846062d <unavailable> + 5677

    10   libc.so.6                          0x00002b35ad587460 __libc_start_main +
    245

    11   tmpi47b3mqh                        0x000055f3984602e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4.0\n        letterGrade = letterGrade + String(gpa)\n    }\n\
    \    \n    gradesArray.append(letterGrade)\n    \n    return gradesArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdiikv4sc/tmpdiikv4sc.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1c1f9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1c1c92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1c1c92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1c1c917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdiikv4sc                        0x0000556f7e9588b6 <unavailable> + 6326

    5    libc.so.6                          0x00002ad1c2187460 __libc_start_main +
    245

    6    tmpdiikv4sc                        0x0000556f7e9583d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpfpvohk50/tmpfpvohk50.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add35efec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add35bf5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add35bf5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add35bf47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfpvohk50                        0x000055f32c4427f6 <unavailable> + 6134

    5    libc.so.6                          0x00002add360ea460 __libc_start_main +
    245

    6    tmpfpvohk50                        0x000055f32c442319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7266dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef72364561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aef72364286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aef7236413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aef72363bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxv281r_o                        0x000055bdafe8837c <unavailable> + 9084

    6    tmpxv281r_o                        0x000055bdafe8778d <unavailable> + 6029

    7    libc.so.6                          0x00002aef72859460 __libc_start_main +
    245

    8    tmpxv281r_o                        0x000055bdafe87449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    grades.forEach {\n  \
    \      switch $0 {\n        case 0...3.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.0...6.0:\n            gradesArray.append(\"A\")\n        case\
    \ 6.0...9.0:\n            gradesArray.append(\"A-\")\n        case 9.0...11.0:\n\
    \            gradesArray.append(\"B+\")\n        case 11.0...14.0:\n         \
    \   gradesArray.append(\"B\")\n        case 14.0...17.0:\n            gradesArray.append(\"\
    B-\")\n        case 17.0...20.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 20.0...23.0:\n            gradesArray.append(\"C\")\n        case 23.0...26.0:\n\
    \            gradesArray.append(\"C-\")\n        case 26.0...29.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 29.0...32.0:\n            gradesArray.append(\"\
    D\")\n        case 32.0...35.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 35.0...38.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpk0prsu71/tmpk0prsu71.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab1bddf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab1bdaecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab1bdaec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab1bdaeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk0prsu71                        0x0000563bc0bfa7c6 <unavailable> + 6086

    5    libc.so.6                          0x00002ab1bdfe1460 __libc_start_main +
    245

    6    tmpk0prsu71                        0x0000563bc0bfa2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesArrayLength = gradesArray.count\n    var letterGrades = [String]()\n\
    \    var letterGrade = \"\"\n    var gpa = gradesArray[0]\n    var letterGradeIndex\
    \ = 0\n    var letterGradeIndex2 = 0\n    var letterGradeIndex3 = 0\n    var letterGradeIndex4\
    \ = 0\n    var letterGradeIndex5 = 0\n    var letterGradeIndex6 = 0\n    var letterGradeIndex7\
    \ = 0\n    var letterGradeIndex8 = 0\n    var letterGradeIndex9 = 0\n    var letterGradeIndex10\
    \ = 0\n    var letterGradeIndex11 = 0\n    var letterGradeIndex12 = 0\n    var\
    \ letterGradeIndex13 = 0\n    var letterGradeIndex14 = 0\n    var letterGradeIndex15\
    \ = 0\n    var letterGradeIndex16 = 0\n    var letterGradeIndex17 = 0\n    var\
    \ letterGradeIndex18 = 0\n    var letterGradeIndex19 = 0\n    var letterGradeIndex20\
    \ = 0\n    var letterGradeIndex21 = 0\n    var letterGradeIndex22 = 0\n    var\
    \ letterGradeIndex23 = 0\n    var letterGradeIndex24 = 0\n    var letterGradeIndex25\
    \ = 0\n    var letterGradeIndex26 = 0\n    var letterGradeIndex27 = 0\n    var\
    \ letterGradeIndex28 = 0\n    var letterGradeIndex29 = 0\n    var letterGradeIndex30\
    \ = 0\n    var letterGradeIndex31 = 0\n    var letterGradeIndex32 = 0\n    var\
    \ letterGradeIndex33 = 0\n    var letterGradeIndex34 = 0\n    var letterGradeIndex35\
    \ = 0\n    var letterGradeIndex36 = 0\n    var letterGradeIndex37 = 0\n    var\
    \ letterGradeIndex38 = 0\n    var letterGradeIndex39 = 0\n    var letterGradeIndex40\
    \ = 0\n    var letterGradeIndex41 = 0\n    var letterGradeIndex42 = 0\n    var\
    \ letterGradeIndex43 = 0\n    var letterGradeIndex44 = 0\n    var letterGradeIndex45\
    \ = 0\n    var letterGradeIndex46 = 0\n    var letterGradeIndex47 = 0\n    var\
    \ letterGradeIndex48 = 0\n    var letterGradeIndex49 = 0\n    var letterGradeIndex50\
    \ = 0\n    var letterGradeIndex51 = 0\n    var letterGradeIndex52 = 0\n    var\
    \ letterGradeIndex53 = 0\n    var letterGradeIndex54 = 0\n    var letterGradeIndex55\
    \ = 0\n    var letterGradeIndex56 = 0\n    var letterGradeIndex57 = 0\n    var\
    \ letterGrade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpc3w31i_0.swift:86:9: error: type annotation missing in pattern\n\
    \    var letterGrade\n        ^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        if grade < 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if grade < 3.3 {\n            gradesArray.append(\"A\")\n        } else if grade\
    \ < 3.7 {\n            gradesArray.append(\"A-\")\n        } else if grade < 4.0\
    \ {\n            gradesArray.append(\"B+\")\n        } else if grade < 4.3 {\n\
    \            gradesArray.append(\"B\")\n        } else if grade < 4.7 {\n    \
    \        gradesArray.append(\"B-\")\n        } else if grade < 5.0 {\n       \
    \     gradesArray.append(\"C+\")\n        } else if grade < 5.3 {\n          \
    \  gradesArray.append(\"C\")\n        } else if grade < 5.7 {\n            gradesArray.append(\"\
    C-\")\n        } else if grade < 6.0 {\n            gradesArray.append(\"D+\"\
    )\n        } else if grade < 6.3 {\n            gradesArray.append(\"D\")\n  \
    \      } else if grade < 6.7 {\n            gradesArray.append(\"D-\")\n     \
    \   } else if grade < 7.0 {\n            gradesArray.append(\"E\")\n        }\
    \ else {\n            gradesArray.append(\"F\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdnjavkwe/tmpdnjavkwe.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba547778c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba54746fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba54746f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba54746e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdnjavkwe                        0x000055e41eb067a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ba547964460 __libc_start_main +
    245

    6    tmpdnjavkwe                        0x000055e41eb062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7...3.3:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3...3.0:\n            letterGrades.append(\"A-\")\n        case 3.0...2.7:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7...2.3:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3...2.0:\n            letterGrades.append(\"\
    B-\")\n        case 2.0...1.7:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7...1.3:\n            letterGrades.append(\"C\")\n        case 1.3...1.0:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0...0.7:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7...0.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0...0.0:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"E\")\n        }\n    }\n    \n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aefdeaa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aefde79e561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aefde79e286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aefde79e13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aefde79dbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpsxqzynf7                        0x0000560ce979137c <unavailable> + 9084

    6    tmpsxqzynf7                        0x0000560ce979078d <unavailable> + 6029

    7    libc.so.6                          0x00002aefdec93460 __libc_start_main +
    245

    8    tmpsxqzynf7                        0x0000560ce9790449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        if grade > 3.0 {\n            letterGrades.append(\"A+\")\n     \
    \   } else if grade > 2.7 {\n            letterGrades.append(\"A\")\n        }\
    \ else if grade > 2.3 {\n            letterGrades.append(\"A-\")\n        } else\
    \ if grade > 2.0 {\n            letterGrades.append(\"B+\")\n        } else if\
    \ grade > 1.7 {\n            letterGrades.append(\"B\")\n        } else if grade\
    \ > 1.3 {\n            letterGrades.append(\"B-\")\n        } else if grade >\
    \ 1.0 {\n            letterGrades.append(\"C+\")\n        } else if grade > 0.7\
    \ {\n            letterGrades.append(\"C\")\n        } else if grade > 0.3 {\n\
    \            letterGrades.append(\"C-\")\n        } else if grade > 0.0 {\n  \
    \          letterGrades.append(\"D+\")\n        } else if grade > -0.7 {\n   \
    \         letterGrades.append(\"D\")\n        } else if grade > -0.3 {\n     \
    \       letterGrades.append(\"D-\")\n        } else if grade > 0.0 {\n       \
    \     letterGrades.append(\"E\")\n        } else {\n            letterGrades.append(\"\
    F\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpdpz9n1gu/tmpdpz9n1gu.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f0d172c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f0ce69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f0ce69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f0ce687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpz9n1gu                        0x000055fdc84577f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b1f0d35e460 __libc_start_main +
    245

    6    tmpdpz9n1gu                        0x000055fdc8457319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0.0:\n    \
    \        gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b81cbd29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81cba20561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b81cba20286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b81cba2013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b81cba1fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxxk04070                        0x0000556f740f137c <unavailable> + 9084

    6    tmpxxk04070                        0x0000556f740f078d <unavailable> + 6029

    7    libc.so.6                          0x00002b81cbf15460 __libc_start_main +
    245

    8    tmpxxk04070                        0x0000556f740f0449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa = grades[0]\n\
    \    var letterGrade = \"\"\n    \n    for grade in grades {\n        if gpa >\
    \ 3.0 {\n            letterGrade = \"A+\"\n        } else if gpa > 2.7 {\n   \
    \         letterGrade = \"A\"\n        } else if gpa > 2.3 {\n            letterGrade\
    \ = \"A-\"\n        } else if gpa > 1.7 && gpa < 2.0 {\n            letterGrade\
    \ = \"B+\"\n        } else if gpa > 1.3 && gpa < 1.7 {\n            letterGrade\
    \ = \"B\"\n        } else if gpa > 1.0 && gpa < 1.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 0.7 && gpa < 1.0 {\n            letterGrade\
    \ = \"C+\"\n        } else if gpa > 0.3 && gpa < 0.7 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 0.0 {\n            letterGrade = \"C-\"\n \
    \       } else if gpa < 0.0 {\n            letterGrade = \"D+\"\n        } else\
    \ if gpa < 0.3 {\n            letterGrade = \"D\"\n        } else {\n        \
    \    letterGrade = \"D-\"\n        }\n        gradesArray.append(letterGrade)\n\
    \        gpa -= grade\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp1spvcfty/tmp1spvcfty.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad92bdacc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad92baa3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad92baa3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad92baa27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1spvcfty                        0x000055ab77bd07f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ad92bf98460 __libc_start_main +
    245

    6    tmp1spvcfty                        0x000055ab77bd0319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n \
    \   var letterGrade = \"\"\n    \n    for grade in grades {\n        if gpa >\
    \ 3.0 {\n            letterGrade = \"A+\"\n        } else if gpa > 2.7 {\n   \
    \         letterGrade = \"A\"\n        } else if gpa > 2.3 {\n            letterGrade\
    \ = \"A-\"\n        } else if gpa > 1.7 && gpa < 2.0 {\n            letterGrade\
    \ = \"B+\"\n        } else if gpa > 1.3 && gpa < 1.7 {\n            letterGrade\
    \ = \"B\"\n        } else if gpa > 1.0 && gpa < 1.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa > 0.7 && gpa < 1.0 {\n            letterGrade\
    \ = \"C+\"\n        } else if gpa > 0.3 && gpa < 0.7 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 0.0 {\n            letterGrade = \"C-\"\n \
    \       } else {\n            letterGrade = \"D+\"\n        }\n        \n    \
    \    gradesArray.append(letterGrade)\n        gpa -= grade\n    }\n    \n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5vgo6fk1/tmp5vgo6fk1.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad953fdac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad953cd1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad953cd1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad953cd07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5vgo6fk1                        0x0000556dec819856 <unavailable> + 6230

    5    libc.so.6                          0x00002ad9541c6460 __libc_start_main +
    245

    6    tmp5vgo6fk1                        0x0000556dec819379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    switch $0 {\n        case 0...3.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.0...5.0:\n            gradesArray.append(\"A\")\n        case\
    \ 5.0...7.0:\n            gradesArray.append(\"A-\")\n        case 7.0...9.0:\n\
    \            gradesArray.append(\"B+\")\n        case 9.0...11.0:\n          \
    \  gradesArray.append(\"B\")\n        case 11.0...13.0:\n            gradesArray.append(\"\
    B-\")\n        case 13.0...15.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 15.0...17.0:\n            gradesArray.append(\"C\")\n        case 17.0...19.0:\n\
    \            gradesArray.append(\"C-\")\n        case 19.0...21.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 21.0...23.0:\n            gradesArray.append(\"\
    D\")\n        case 23.0...25.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 25.0...27.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpn2_fwopz/tmpn2_fwopz.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31b5610c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31b5307b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31b5307988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31b53067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2_fwopz                        0x000055cd76459826 <unavailable> + 6182

    5    libc.so.6                          0x00002b31b57fc460 __libc_start_main +
    245

    6    tmpn2_fwopz                        0x000055cd76459349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.0:\n            letterGrades.append(\"\
    E\")\n        default:\n            letterGrades.append(\"F\")\n        }\n  \
    \  }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp86oihynd/tmp86oihynd.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5495c97c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b549598eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b549598e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b549598d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp86oihynd                        0x000055dca03237f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5495e83460 __libc_start_main +
    245

    6    tmp86oihynd                        0x000055dca0323319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var letterGrades = [String]()\n    var gpa = gradesArray[0]\n    var letterGrade\
    \ = \"\"\n    var letterGradeIndex = 0\n    for index in 0..<gradesArray.count\
    \ {\n        if gpa < gradesArray[index] {\n            letterGrade = \"D-\"\n\
    \            letterGradeIndex = index\n            break\n        }\n        if\
    \ gpa > gradesArray[index] {\n            letterGrade = \"D+\"\n            letterGradeIndex\
    \ = index\n            break\n        }\n        if gpa == gradesArray[index]\
    \ {\n            letterGrade = \"D\"\n            letterGradeIndex = index\n \
    \           break\n        }\n        if gpa >= gradesArray[index] {\n       \
    \     letterGrade = \"C\"\n            letterGradeIndex = index\n            break\n\
    \        }\n        if gpa <= gradesArray[index] {\n            letterGrade =\
    \ \"C-\"\n            letterGradeIndex = index\n            break\n        }\n\
    \        if gpa >= gradesArray[index] {\n            letterGrade = \"B\"\n   \
    \         letterGradeIndex = index\n            break\n        }\n        if gpa\
    \ <= gradesArray[index] {\n            letterGrade = \"B+\"\n            letterGradeIndex\
    \ = index\n            break\n        }\n        if gpa >= gradesArray[index]\
    \ {\n            letterGrade = \"B\"\n            letterGradeIndex = index\n \
    \           break\n        }\n        if gpa <= gradesArray[index] {\n       \
    \     letterGrade = \"A-\"\n            letterGradeIndex = index\n           \
    \ break\n        }\n        if gpa >= gradesArray[index] {\n            letterGrade\
    \ = \"A+\"\n            letterGradeIndex = index\n            break\n        }\n\
    \        if gpa <= gradesArray[index] {\n            letterGrade = \"A\"\n   \
    \         letterGradeIndex = index\n            break\n        }\n        if gpa\
    \ >= gradesArray[index] {\n            letterGrade = \"A+\"\n            letterGradeIndex\
    \ = index\n            break\n        }\n        if gpa <= gradesArray[index]\
    \ {\n            letterGrade = \"A\"\n            letterGradeIndex = index\n \
    \           break\n        }\n        if gpa >= gradesArray[index] {\n       \
    \     letterGrade = \"A+\"\n            letterGradeIndex = index\n           \
    \ break\n        }\n        if gpa <= gradesArray[index] {\n            letterGrade\
    \ = \"A\"\n            letterGradeIndex = index\n            break\n        }\n\
    \        if gpa >= gradesArray[index] {\n            letterGrade = \"A+\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6flsaee2.swift:127:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp6flsaee2.swift:29:40:\
    \ note: to match this opening '{'\n    for index in 0..<gradesArray.count {\n\
    \                                       ^\n/tmp/tmp6flsaee2.swift:127:66: error:\
    \ expected '}' at end of brace statement\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])\n                                          \
    \                       ^\n/tmp/tmp6flsaee2.swift:22:59: note: to match this opening\
    \ '{'\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n         \
    \                                                 ^\n/tmp/tmp6flsaee2.swift:110:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp6flsaee2.swift:25:9:\
    \ warning: initialization of variable 'letterGrades' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var letterGrades = [String]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp6flsaee2.swift:26:9: warning: variable 'gpa'\
    \ was never mutated; consider changing to 'let' constant\n    var gpa = gradesArray[0]\n\
    \    ~~~ ^\n    let\n/tmp/tmp6flsaee2.swift:27:9: warning: variable 'letterGrade'\
    \ was written to, but never read\n    var letterGrade = \"\"\n        ^\n/tmp/tmp6flsaee2.swift:28:9:\
    \ warning: variable 'letterGradeIndex' was written to, but never read\n    var\
    \ letterGradeIndex = 0\n        ^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    grades.forEach {\n  \
    \      switch $0 {\n        case 0...3.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.0...5.0:\n            gradesArray.append(\"A\")\n        case\
    \ 5.0...7.0:\n            gradesArray.append(\"A-\")\n        case 7.0...9.0:\n\
    \            gradesArray.append(\"B+\")\n        case 9.0...11.0:\n          \
    \  gradesArray.append(\"B\")\n        case 11.0...13.0:\n            gradesArray.append(\"\
    B-\")\n        case 13.0...15.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 15.0...17.0:\n            gradesArray.append(\"C\")\n        case 17.0...19.0:\n\
    \            gradesArray.append(\"C-\")\n        case 19.0...21.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 21.0...23.0:\n            gradesArray.append(\"\
    D\")\n        case 23.0...25.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 25.0...27.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpas89wwb6/tmpas89wwb6.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20bc00cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20bbd03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20bbd03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20bbd027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpas89wwb6                        0x00005560990557c6 <unavailable> + 6086

    5    libc.so.6                          0x00002b20bc1f8460 __libc_start_main +
    245

    6    tmpas89wwb6                        0x00005560990552e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 0...4.0:\n            gradesArray.append(\"\
    A+\")\n        case 4.1...5.0:\n            gradesArray.append(\"A\")\n      \
    \  case 5.1...6.0:\n            gradesArray.append(\"A-\")\n        case 6.1...7.0:\n\
    \            gradesArray.append(\"B+\")\n        case 7.1...8.0:\n           \
    \ gradesArray.append(\"B\")\n        case 8.1...9.0:\n            gradesArray.append(\"\
    B-\")\n        case 9.1...10.0:\n            gradesArray.append(\"C+\")\n    \
    \    case 10.1...11.0:\n            gradesArray.append(\"C\")\n        case 11.1...12.0:\n\
    \            gradesArray.append(\"C-\")\n        case 12.1...13.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 13.1...14.0:\n            gradesArray.append(\"\
    D\")\n        case 14.1...15.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 15.1...16.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpywbu16x3/tmpywbu16x3.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af65dcbec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af65d9b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af65d9b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af65d9b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpywbu16x3                        0x000055f4b9854926 <unavailable> + 6438

    5    libc.so.6                          0x00002af65deaa460 __libc_start_main +
    245

    6    tmpywbu16x3                        0x000055f4b9854449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0...2.7:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0...1.7:\n            gradesArray.append(\"C+\")\n     \
    \   case 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0...0.7:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.7...0.0:\n            gradesArray.append(\"\
    D\")\n        case 0.0...0.0:\n            gradesArray.append(\"E\")\n       \
    \ default:\n            gradesArray.append(\"E\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af4e5619c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4e5310561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af4e5310286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af4e531013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af4e530fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpjlc3m0e_                        0x0000561aaa09737c <unavailable> + 9084

    6    tmpjlc3m0e_                        0x0000561aaa09678d <unavailable> + 6029

    7    libc.so.6                          0x00002af4e5805460 __libc_start_main +
    245

    8    tmpjlc3m0e_                        0x0000561aaa096449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if grade > 2.0 {\n            gradesArray.append(\"A\")\n        } else if grade\
    \ > 1.0 {\n            gradesArray.append(\"A-\")\n        } else if grade > 0.7\
    \ {\n            gradesArray.append(\"B+\")\n        } else if grade > 0.3 {\n\
    \            gradesArray.append(\"B\")\n        } else if grade > 0.0 {\n    \
    \        gradesArray.append(\"B-\")\n        } else if grade > -0.3 {\n      \
    \      gradesArray.append(\"C+\")\n        } else if grade > -0.7 {\n        \
    \    gradesArray.append(\"C\")\n        } else if grade > -1.0 {\n           \
    \ gradesArray.append(\"C-\")\n        } else if grade > -1.7 {\n            gradesArray.append(\"\
    D+\")\n        } else if grade > -2.0 {\n            gradesArray.append(\"D\"\
    )\n        } else if grade > -2.3 {\n            gradesArray.append(\"D-\")\n\
    \        } else if grade > -2.7 {\n            gradesArray.append(\"E\")\n   \
    \     } else {\n            gradesArray.append(\"F\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpgcj4zv2i/tmpgcj4zv2i.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d3b87c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d387eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d387e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d387d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgcj4zv2i                        0x0000555a8b4e27f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b09d3d73460 __libc_start_main +
    245

    6    tmpgcj4zv2i                        0x0000555a8b4e2319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n \
    \   var letterGrade = \"\"\n    for grade in grades {\n        if grade > gpa\
    \ {\n            letterGrade = \"D-\"\n        } else if grade < gpa {\n     \
    \       letterGrade = \"D+\"\n        } else if grade == gpa {\n            letterGrade\
    \ = \"D\"\n        } else if grade < 3.0 {\n            letterGrade = \"C-\"\n\
    \        } else if grade < 2.0 {\n            letterGrade = \"C\"\n        } else\
    \ if grade < 1.0 {\n            letterGrade = \"B+\"\n        } else if grade\
    \ < 0.7 {\n            letterGrade = \"B\"\n        } else if grade < 0.3 {\n\
    \            letterGrade = \"A-\"\n        } else if grade < 0.1 {\n         \
    \   letterGrade = \"A\"\n        } else if grade < 0.0 {\n            letterGrade\
    \ = \"A+\"\n        } else {\n            letterGrade = \"E\"\n        }\n   \
    \     gpa = grade\n        gradesArray.append(letterGrade)\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp76rarl3_/tmp76rarl3_.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9414b80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9414877b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9414877988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b94148767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp76rarl3_                        0x000055db9fdf7856 <unavailable> + 6230

    5    libc.so.6                          0x00002b9414d6c460 __libc_start_main +
    245

    6    tmp76rarl3_                        0x000055db9fdf7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var gradesArrayCount = gradesArray.count\n    var gradesArraySum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArrayAverage = gradesArraySum / gradesArrayCount\n    var\
    \ gradesArrayMin = gradesArray[0]\n    var gradesArrayMax = gradesArray[gradesArrayCount\
    \ - 1]\n    var gradesArraySumOfSquares = gradesArray.reduce(0.0, +)\n    var\
    \ gradesArraySumOfSquaresAverage = gradesArraySumOfSquares / gradesArrayCount\n\
    \    var gradesArraySumOfSquaresMin = gradesArraySumOfSquares\n    var gradesArraySumOfSquaresMax\
    \ = gradesArraySumOfSquares\n    var gradesArraySumOfSquaresSum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumAverage = gradesArraySumOfSquaresSum /\
    \ gradesArrayCount\n    var gradesArraySumOfSquaresSumMin = gradesArraySumOfSquaresSum\n\
    \    var gradesArraySumOfSquaresSumMax = gradesArraySumOfSquaresSum\n    var gradesArraySumOfSquaresSumSum\
    \ = gradesArray.reduce(0.0, +)\n    var gradesArraySumOfSquaresSumSumAverage =\
    \ gradesArraySumOfSquaresSumSum / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumMin\
    \ = gradesArraySumOfSquaresSumSum\n    var gradesArraySumOfSquaresSumSumMax =\
    \ gradesArraySumOfSquaresSumSum\n    var gradesArraySumOfSquaresSumSumSum = gradesArray.reduce(0.0,\
    \ +)\n    var gradesArraySumOfSquaresSumSumSumAverage = gradesArraySumOfSquaresSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumMin = gradesArraySumOfSquaresSumSumSum\n\
    \    var gradesArraySumOfSquaresSumSumSumMax = gradesArraySumOfSquaresSumSumSum\n\
    \    var gradesArraySumOfSquaresSumSumSumSum = gradesArray.reduce(0.0, +)\n  \
    \  var gradesArraySumOfSquaresSumSumSumSumAverage = gradesArraySumOfSquaresSumSumSumSum\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresSumSumSumSumMin = gradesArraySumOfSquaresSumSumSumSum\n\
    \    var grades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmppwzd8hq2.swift:27:45: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArrayAverage = gradesArraySum\
    \ / gradesArrayCount\n                             ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n\
    /tmp/tmppwzd8hq2.swift:27:45: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n    var gradesArrayAverage\
    \ = gradesArraySum / gradesArrayCount\n                                      \
    \      ^\n/tmp/tmppwzd8hq2.swift:31:66: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresAverage\
    \ = gradesArraySumOfSquares / gradesArrayCount\n                             \
    \            ~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmppwzd8hq2.swift:31:66:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n                                                       \
    \          ^\n/tmp/tmppwzd8hq2.swift:35:72: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresSumAverage\
    \ = gradesArraySumOfSquaresSum / gradesArrayCount\n                          \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmppwzd8hq2.swift:35:72:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    var gradesArraySumOfSquaresSumAverage = gradesArraySumOfSquaresSum\
    \ / gradesArrayCount\n                                                       \
    \                ^\n/tmp/tmppwzd8hq2.swift:39:78: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    var gradesArraySumOfSquaresSumSumAverage\
    \ = gradesArraySumOfSquaresSumSum / gradesArrayCount\n                       \
    \                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n/tmp/tmppwzd8hq2.swift:39:78:\
    \ note: overloads for '/' exist with these partially matching param"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpf9nscjqb.swift:24:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.max()\n\
    \    var gpaIndex = grades.firstIndex(where: { $0 > gpa })\n    var gpaIndex2\
    \ = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex3 = grades.firstIndex(where:\
    \ { $0 > gpa })\n    var gpaIndex4 = grades.firstIndex(where: { $0 < gpa })\n\
    \    var gpaIndex5 = grades.firstIndex(where: { $0 > gpa })\n    var gpaIndex6\
    \ = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex7 = grades.firstIndex(where:\
    \ { $0 < gpa })\n    var gpaIndex8 = grades.firstIndex(where: { $0 < gpa })\n\
    \    var gpaIndex9 = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex10\
    \ = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex11 = grades.firstIndex(where:\
    \ { $0 < gpa })\n    var gpaIndex12 = grades.firstIndex(where: { $0 < gpa })\n\
    \    var gpaIndex13 = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex14\
    \ = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex15 = grades.firstIndex(where:\
    \ { $0 < gpa })\n    var gpaIndex16 = grades.firstIndex(where: { $0 < gpa })\n\
    \    var gpaIndex17 = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex18\
    \ = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex19 = grades.firstIndex(where:\
    \ { $0 < gpa })\n    var gpaIndex20 = grades.firstIndex(where: { $0 < gpa })\n\
    \    var gpaIndex21 = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex22\
    \ = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex23 = grades.firstIndex(where:\
    \ { $0 < gpa })\n    var gpaIndex24 = grades.firstIndex(where: { $0 < gpa })\n\
    \    var gpaIndex25 = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex26\
    \ = grades.firstIndex(where: { $0 < gpa })\n    var gpaIndex27 = grades.firstIndex(where:\
    \ { $0 < gpa })\n    var gpaIndex28 = grades.firstIndex(where: { $0 < gpa })\n\
    \    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp0iy_4llu.swift:53:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp0iy_4llu.swift:25:52: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n    var gpaIndex = grades.firstIndex(where:\
    \ { $0 > gpa })\n                                                   ^\n/tmp/tmp0iy_4llu.swift:25:52:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    var gpaIndex = grades.firstIndex(where: { $0 > gpa })\n         \
    \                                          ^\n                               \
    \                        ?? <#default value#>\n/tmp/tmp0iy_4llu.swift:25:52: note:\
    \ force-unwrap using '!' to abort execution if the optional value contains 'nil'\n\
    \    var gpaIndex = grades.firstIndex(where: { $0 > gpa })\n                 \
    \                                  ^\n                                       \
    \               !\n/tmp/tmp0iy_4llu.swift:26:53: error: value of optional type\
    \ 'Double?' must be unwrapped to a value of type 'Double'\n    var gpaIndex2 =\
    \ grades.firstIndex(where: { $0 < gpa })\n                                   \
    \                 ^\n/tmp/tmp0iy_4llu.swift:26:53: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n    var gpaIndex2\
    \ = grades.firstIndex(where: { $0 < gpa })\n                                 \
    \                   ^\n                                                      \
    \  ?? <#default value#>\n/tmp/tmp0iy_4llu.swift:26:53: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    var gpaIndex2\
    \ = grades.firstIndex(where: { $0 < gpa })\n                                 \
    \                   ^\n                                                      \
    \ !\n/tmp/tmp0iy_4llu.swift:27:53: error: value of optional type 'Double?' must\
    \ be unwrapped to a value of type 'Double'\n    var gpaIndex3 = grades.firstIndex(where:\
    \ { $0 > gpa })\n                                                    ^\n/tmp/tmp0iy_4llu.swift:27:53:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var gradesArrayLength = gradesArray.count\n    var letterGrades = [String]()\n\
    \    var gradesArrayIndex = 0\n    var gradesArrayIndex2 = 0\n    var letterGradeIndex\
    \ = 0\n    var letterGradeIndex2 = 0\n    var letterGradeString = \"\"\n    var\
    \ letterGradeString2 = \"\"\n    var letterGradeString3 = \"\"\n    var letterGradeString4\
    \ = \"\"\n    var letterGradeString5 = \"\"\n    var letterGradeString6 = \"\"\
    \n    var letterGradeString7 = \"\"\n    var letterGradeString8 = \"\"\n    var\
    \ letterGradeString9 = \"\"\n    var letterGradeString10 = \"\"\n    var letterGradeString11\
    \ = \"\"\n    var letterGradeString12 = \"\"\n    var letterGradeString13 = \"\
    \"\n    var letterGradeString14 = \"\"\n    var letterGradeString15 = \"\"\n \
    \   var letterGradeString16 = \"\"\n    var letterGradeString17 = \"\"\n    var\
    \ letterGradeString18 = \"\"\n    var letterGradeString19 = \"\"\n    var letterGradeString20\
    \ = \"\"\n    var letterGradeString21 = \"\"\n    var letterGradeString22 = \"\
    \"\n    var letterGradeString23 = \"\"\n    var letterGradeString24 = \"\"\n \
    \   var letterGradeString25 = \"\"\n    var letterGradeString26 = \"\"\n    var\
    \ letterGradeString27 = \"\"\n    var letterGradeString28 = \"\"\n    var letterGradeString29\
    \ = \"\"\n    var letterGradeString30 = \"\"\n    var letterGradeString31 = \"\
    \"\n    var letterGradeString32 = \"\"\n    var letterGradeString33 = \"\"\n \
    \   var letterGradeString34 = \"\"\n    var letterGradeString35 = \"\"\n    var\
    \ letterGradeString36 = \"\"\n    var letterGradeString37 = \"\"\n    var letterGradeString38\
    \ = \"\"\n    var letterGradeString39 = \"\"\n    var letterGradeString40 = \"\
    \"\n    var letterGradeString41 = \"\"\n    var letterGradeString42 = \"\"\n \
    \   var letterGradeString43 = \"\"\n    var letterGradeString44 = \"\"\n    var\
    \ letterGradeString45 = \"\"\n    var letterGradeString46 = \"\"\n    var letterGradeString47\
    \ = \"\"\n    var letterGradeString48 = \"\"\n    var letterGradeString49 = \"\
    \"\n    var letterGradeString50 = \"\"\n    var letterGradeString51 = \"\"\n \
    \   var letterGradeString52 = \"\"\n    var letterGradeString53 = \"\"\n    var\
    \ letterGradeString54 = \"\"\n    var letterGrade\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfprtfs6a.swift:85:9: error: type annotation missing in pattern\n\
    \    var letterGrade\n        ^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted(by:\
    \ <)\n    var letterGrades = [String]()\n    for i in 0..<gradesArray.count {\n\
    \        let gpa = gradesArray[i]\n        let letterGrade = letterGradeForGPA(gpa)\n\
    \        letterGrades.append(letterGrade)\n    }\n    return letterGrades\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcem6n7st.swift:28:27: error: cannot find 'letterGradeForGPA' in\
    \ scope\n        let letterGrade = letterGradeForGPA(gpa)\n                  \
    \        ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    gradesArray.append(\"\"\
    )\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\
    \")\n    gradesArray.append(\"\")\n    gradesArray.append(\"\")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpswtowhlx.swift:96:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7...3.0:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3...2.7:\n            letterGrades.append(\"A-\")\n        case 3.0...2.3:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7...2.0:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3...1.7:\n            letterGrades.append(\"\
    B-\")\n        case 2.0...1.3:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7...1.0:\n            letterGrades.append(\"C\")\n        case 1.3...0.0:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0...0.7:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7...0.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0...0.0:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        letterGrades.append(\"E\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af10a991c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af10a688561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af10a688286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af10a68813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af10a687bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp_jvxilb1                        0x000055a16803637c <unavailable> + 9084

    6    tmp_jvxilb1                        0x000055a16803578d <unavailable> + 6029

    7    libc.so.6                          0x00002af10ab7d460 __libc_start_main +
    245

    8    tmp_jvxilb1                        0x000055a168035449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"F\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpajymy9tq/tmpajymy9tq.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d22631c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d22328b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d22328988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d223277b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpajymy9tq                        0x0000557370a247f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b6d2281d460 __libc_start_main +
    245

    6    tmpajymy9tq                        0x0000557370a24319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted(by:\
    \ <)\n    var gradesArray2 = gradesArray\n    gradesArray2 = gradesArray2.sorted(by:\
    \ >)\n    var gradesArray3 = gradesArray\n    gradesArray3 = gradesArray3.sorted(by:\
    \ >=)\n    var gradesArray4 = gradesArray\n    gradesArray4 = gradesArray4.sorted(by:\
    \ <=)\n    var gradesArray5 = gradesArray\n    gradesArray5 = gradesArray5.sorted(by:\
    \ ==)\n    var gradesArray6 = gradesArray\n    gradesArray6 = gradesArray6.sorted(by:\
    \ !=)\n    var gradesArray7 = gradesArray\n    gradesArray7 = gradesArray7.sorted(by:\
    \ <=)\n    var gradesArray8 = gradesArray\n    gradesArray8 = gradesArray8.sorted(by:\
    \ >=)\n    var gradesArray9 = gradesArray\n    gradesArray9 = gradesArray9.sorted(by:\
    \ ==)\n    var gradesArray10 = gradesArray\n    gradesArray10 = gradesArray10.sorted(by:\
    \ !=)\n    var gradesArray11 = gradesArray\n    gradesArray11 = gradesArray11.sorted(by:\
    \ >=)\n    var gradesArray12 = gradesArray\n    gradesArray12 = gradesArray12.sorted(by:\
    \ <=)\n    var gradesArray13 = gradesArray\n    gradesArray13 = gradesArray13.sorted(by:\
    \ ==)\n    var gradesArray14 = gradesArray\n    gradesArray14 = gradesArray14.sorted(by:\
    \ !=)\n    var gradesArray15 = gradesArray\n    gradesArray15 = gradesArray15.sorted(by:\
    \ >=)\n    var gradesArray16 = gradesArray\n    gradesArray16 = gradesArray16.sorted(by:\
    \ <=)\n    var gradesArray17 = gradesArray\n    gradesArray17 = gradesArray17.sorted(by:\
    \ ==)\n    var gradesArray18 = gradesArray\n    gradesArray18 = gradesArray18.sorted(by:\
    \ !=)\n    var gradesArray19 = gradesArray\n    gradesArray19 = gradesArray19.sorted(by:\
    \ >=)\n    var gradesArray20 = gradesArray\n    gradesArray20 = gradesArray20.sorted(by:\
    \ <=)\n    var gradesArray21 = gradesArray\n    gradesArray21 = gradesArray21.sorted(by:\
    \ ==)\n    var gradesArray22 = gradesArray\n    grades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp5bcc1m9d.swift:66:5: warning: expression of type '[Double]' is\
    \ unused\n    grades\n    ^~~~~~\n/tmp/tmp5bcc1m9d.swift:65:9: warning: initialization\
    \ of variable 'gradesArray22' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArray22 = gradesArray\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp5bcc1m9d.swift:67:1: error: missing return in global function\
    \ expected to return '[String]'\n}\n^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades =\
    \ [String]()\n    var gpa = gradesArray[0]\n    var letterGrade = \"\"\n    \n\
    \    for index in 0..<gradesArray.count {\n        if gpa > gradesArray[index]\
    \ {\n            letterGrade = \"D-\"\n            break\n        } else if gpa\
    \ < gradesArray[index] {\n            letterGrade = \"D+\"\n            break\n\
    \        } else if gpa == gradesArray[index] {\n            letterGrade = \"D\"\
    \n            break\n        }\n    }\n    \n    for index in 0..<gradesArray.count\
    \ {\n        if gpa > gradesArray[index] {\n            letterGrade = \"C-\"\n\
    \            break\n        } else if gpa < gradesArray[index] {\n           \
    \ letterGrade = \"C+\"\n            break\n        } else if gpa == gradesArray[index]\
    \ {\n            letterGrade = \"C\"\n            break\n        }\n    }\n  \
    \  \n    for index in 0..<gradesArray.count {\n        if gpa > gradesArray[index]\
    \ {\n            letterGrade = \"B-\"\n            break\n        } else if gpa\
    \ < gradesArray[index] {\n            letterGrade = \"B+\"\n            break\n\
    \        } else if gpa == gradesArray[index] {\n            letterGrade = \"B\"\
    \n            break\n        }\n    }\n    \n    for index in 0..<gradesArray.count\
    \ {\n        if gpa > gradesArray[index] {\n            letterGrade = \"A-\"\n\
    \            break\n        } else if gpa < gradesArray[index] {\n           \
    \ letterGrade = \"A+\"\n            break\n        } else if gpa == gradesArray[index]\
    \ {\n            letterGrade = \"A\"\n            break\n        }\n    }\n  \
    \  \n    for index in 0..<gradesArray.count {\n        if gpa > gradesArray[index]\
    \ {\n            letterGrade = \"A+\"\n            break\n        } else if gpa\
    \ < gradesArray[index] {\n            letterGrade = \"A-\"\n            break\n\
    \        } else if gpa == gradesArray[index] {\n            letterGrade = \"A\"\
    \n            break\n        }\n    }\n    \n    for index in 0..<gradesArray.count\
    \ {\n        if gpa > gradesArray[index] {\n            letterGrade = \"B+\"\n\
    \            break\n        } else if gpa < gradesArray[index] {\n           \
    \ letterGrade = \"B-\"\n            break\n        } else if gpa == gradesArray[index]\
    \ {\n            letterGrade = \"B\"\n            break\n        }\n\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpp2_sw9vr.swift:125:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpp2_sw9vr.swift:22:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpp2_sw9vr.swift:108:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n/tmp/tmpp2_sw9vr.swift:23:9: warning: variable 'gradesArray'\
    \ was never mutated; consider changing to 'let' constant\n    var gradesArray\
    \ = grades.sorted()\n    ~~~ ^\n    let\n/tmp/tmpp2_sw9vr.swift:24:9: warning:\
    \ initialization of variable 'letterGrades' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var letterGrades = [String]()\n \
    \   ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpp2_sw9vr.swift:25:9: warning: variable 'gpa'\
    \ was never mutated; consider changing to 'let' constant\n    var gpa = gradesArray[0]\n\
    \    ~~~ ^\n    let\n/tmp/tmpp2_sw9vr.swift:26:9: warning: variable 'letterGrade'\
    \ was written to, but never read\n    var letterGrade = \"\"\n        ^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    switch $0 {\n        case 0...3.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.0...5.0:\n            gradesArray.append(\"A\")\n        case\
    \ 5.0...7.0:\n            gradesArray.append(\"A-\")\n        case 7.0...9.0:\n\
    \            gradesArray.append(\"B+\")\n        case 9.0...11.0:\n          \
    \  gradesArray.append(\"B\")\n        case 11.0...13.0:\n            gradesArray.append(\"\
    B-\")\n        case 13.0...15.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 15.0...17.0:\n            gradesArray.append(\"C\")\n        case 17.0...19.0:\n\
    \            gradesArray.append(\"C-\")\n        case 19.0...21.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 21.0...23.0:\n            gradesArray.append(\"\
    D\")\n        case 23.0...25.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 25.0...27.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpn2_fwopz/tmpn2_fwopz.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31b5610c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31b5307b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31b5307988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31b53067b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn2_fwopz                        0x000055cd76459826 <unavailable> + 6182

    5    libc.so.6                          0x00002b31b57fc460 __libc_start_main +
    245

    6    tmpn2_fwopz                        0x000055cd76459349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpf9nscjqb.swift:24:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reverse()\n\
    \    var gradesArray2 = gradesArray\n    gradesArray2 = gradesArray2.reverse()\n\
    \    var gradesArray3 = gradesArray\n    gradesArray3 = gradesArray3.reverse()\n\
    \    var gradesArray4 = gradesArray\n    gradesArray4 = gradesArray4.reverse()\n\
    \    var gradesArray5 = gradesArray\n    gradesArray5 = gradesArray5.reverse()\n\
    \    var gradesArray6 = gradesArray\n    gradesArray6 = gradesArray6.reverse()\n\
    \    var gradesArray7 = gradesArray\n    gradesArray7 = gradesArray7.reverse()\n\
    \    var gradesArray8 = gradesArray\n    gradesArray8 = gradesArray8.reverse()\n\
    \    var gradesArray9 = gradesArray\n    gradesArray9 = gradesArray9.reverse()\n\
    \    var gradesArray10 = gradesArray\n    gradesArray10 = gradesArray10.reverse()\n\
    \    var gradesArray11 = gradesArray\n    gradesArray11 = gradesArray11.reverse()\n\
    \    var gradesArray12 = gradesArray\n    gradesArray12 = gradesArray12.reverse()\n\
    \    var gradesArray13 = gradesArray\n    gradesArray13 = gradesArray13.reverse()\n\
    \    var gradesArray14 = gradesArray\n    gradesArray14 = gradesArray14.reverse()\n\
    \    var gradesArray15 = gradesArray\n    gradesArray15 = gradesArray15.reverse()\n\
    \    var gradesArray16 = gradesArray\n    gradesArray16 = gradesArray16.reverse()\n\
    \    var gradesArray17 = gradesArray\n    gradesArray17 = gradesArray17.reverse()\n\
    \    var gradesArray18 = gradesArray\n    gradesArray18 = gradesArray18.reverse()\n\
    \    var gradesArray19 = gradesArray\n    gradesArray19 = gradesArray19.reverse()\n\
    \    var gradesArray20 = gradesArray\n    gradesArray20 = gradesArray20.reverse()\n\
    \    var gradesArray21 = gradesArray\n    gradesArray21 = gradesArray21.reverse()\n\
    \    var gradesArray22 = gradesArray\n    gradesArray22 = gradesArray22.reverse()\n\
    \    var gradesArray23 = gradesArray\n    gradesArray23 = gradesArray23.reverse()\n\
    \    var gradesArray24 = gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmptzkvy652.swift:24:31: error: cannot assign value of type '()' to\
    \ type '[Double]'\n    gradesArray = gradesArray.reverse()\n                 \
    \ ~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:26:33: error: cannot assign value\
    \ of type '()' to type '[Double]'\n    gradesArray2 = gradesArray2.reverse()\n\
    \                   ~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:28:33: error:\
    \ cannot assign value of type '()' to type '[Double]'\n    gradesArray3 = gradesArray3.reverse()\n\
    \                   ~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:30:33: error:\
    \ cannot assign value of type '()' to type '[Double]'\n    gradesArray4 = gradesArray4.reverse()\n\
    \                   ~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:32:33: error:\
    \ cannot assign value of type '()' to type '[Double]'\n    gradesArray5 = gradesArray5.reverse()\n\
    \                   ~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:34:33: error:\
    \ cannot assign value of type '()' to type '[Double]'\n    gradesArray6 = gradesArray6.reverse()\n\
    \                   ~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:36:33: error:\
    \ cannot assign value of type '()' to type '[Double]'\n    gradesArray7 = gradesArray7.reverse()\n\
    \                   ~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:38:33: error:\
    \ cannot assign value of type '()' to type '[Double]'\n    gradesArray8 = gradesArray8.reverse()\n\
    \                   ~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:40:33: error:\
    \ cannot assign value of type '()' to type '[Double]'\n    gradesArray9 = gradesArray9.reverse()\n\
    \                   ~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:42:35: error:\
    \ cannot assign value of type '()' to type '[Double]'\n    gradesArray10 = gradesArray10.reverse()\n\
    \                    ~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:44:35: error:\
    \ cannot assign value of type '()' to type '[Double]'\n    gradesArray11 = gradesArray11.reverse()\n\
    \                    ~~~~~~~~~~~~~~^~~~~~~~~\n/tmp/tmptzkvy652.swift:46:35: error:\
    \ cannot assign value of type '()' to type '[Double]'\n    gradesArray12 = gradesArray12.reverse()\n\
    \        "
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n    var letterGrades = [String]()\n    \n    for grade\
    \ in grades {\n        \n        let letterGrade = grade >= 4.0 ? \"A+\" :\n \
    \           grade >= 3.7 ? \"A\" :\n            grade >= 3.3 ? \"A-\" :\n    \
    \        grade >= 3.0 ? \"B+\" :\n            grade >= 2.7 ? \"B\" :\n       \
    \     grade >= 2.3 ? \"B-\" :\n            grade >= 2.0 ? \"C+\" :\n         \
    \   grade >= 1.7 ? \"C\" :\n            grade >= 1.3 ? \"C-\" :\n            grade\
    \ >= 1.0 ? \"D+\" :\n            grade >= 0.7 ? \"D\" :\n            grade >=\
    \ 0.0 ? \"D-\" :\n            \"E\"\n        \n        letterGrades.append(letterGrade)\n\
    \    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpssot1zbc/tmpssot1zbc.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a6e281c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a6df78b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a6df78988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a6df777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpssot1zbc                        0x000055be9685e7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b8a6e46d460 __libc_start_main +
    245

    6    tmpssot1zbc                        0x000055be9685e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.map { $0 }\n    var letterGrades\
    \ = [String]()\n    var gpa = grades.reduce(0, combine: +)\n    var gpaIndex =\
    \ 0\n    while gpa > 0 {\n        let gpaIndex = gradesArray.index(of: gpa)!\n\
    \        let letterGrade = gpaIndex < grades.count - 1 ? gradesArray[gpaIndex\
    \ + 1] : \"E\"\n        letterGrades.append(letterGrade)\n        gpa -= grades[gpaIndex]\n\
    \    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfqwmodh1.swift:25:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n/tmp/tmpfqwmodh1.swift:29:68:\
    \ error: result values in '? :' expression have mismatching types 'Double' and\
    \ 'String'\n        let letterGrade = gpaIndex < grades.count - 1 ? gradesArray[gpaIndex\
    \ + 1] : \"E\"\n                                                        ~~~~~~~~~~~^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    \n    for grade in gradesArray {\n        if grade < 3.0 {\n            letterGrades.append(\"\
    A\")\n        } else if grade < 3.3 {\n            letterGrades.append(\"A-\"\
    )\n        } else if grade < 3.7 {\n            letterGrades.append(\"B+\")\n\
    \        } else if grade < 4.0 {\n            letterGrades.append(\"B\")\n   \
    \     } else if grade < 4.3 {\n            letterGrades.append(\"B-\")\n     \
    \   } else if grade < 4.7 {\n            letterGrades.append(\"C+\")\n       \
    \ } else if grade < 5.0 {\n            letterGrades.append(\"C\")\n        } else\
    \ if grade < 5.3 {\n            letterGrades.append(\"C-\")\n        } else if\
    \ grade < 5.7 {\n            letterGrades.append(\"D+\")\n        } else if grade\
    \ < 6.0 {\n            letterGrades.append(\"D\")\n        } else if grade < 6.3\
    \ {\n            letterGrades.append(\"D-\")\n        } else if grade < 6.7 {\n\
    \            letterGrades.append(\"E\")\n        } else {\n            letterGrades.append(\"\
    F\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpoinahm5h/tmpoinahm5h.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abbd56ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abbd53f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abbd53f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abbd53f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoinahm5h                        0x000055c5b5bfa7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002abbd58eb460 __libc_start_main +
    245

    6    tmpoinahm5h                        0x000055c5b5bfa319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades =\
    \ [String]()\n    var currentGrade = gradesArray[0]\n    var currentLetterGrade\
    \ = \"D+\"\n    \n    for grade in gradesArray {\n        if grade > currentGrade\
    \ {\n            letterGrades.append(currentLetterGrade)\n            currentGrade\
    \ = grade\n            currentLetterGrade = \"D+\"\n        } else if grade ==\
    \ currentGrade {\n            currentLetterGrade = \"D\"\n        } else if grade\
    \ < currentGrade {\n            letterGrades.append(currentLetterGrade)\n    \
    \        currentGrade = grade\n            currentLetterGrade = \"D-\"\n     \
    \   }\n    }\n    letterGrades.append(currentLetterGrade)\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmppzqu9q80/tmppzqu9q80.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b433ff9cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b433fc93b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b433fc93988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b433fc927b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppzqu9q80                        0x0000560e379398e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b4340188460 __libc_start_main +
    245

    6    tmppzqu9q80                        0x0000560e37939409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmpf9nscjqb.swift:24:1: error: missing return in global function expected
    to return ''[String]''

    }

    ^

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7266dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef72364561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aef72364286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aef7236413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aef72363bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxv281r_o                        0x000055bdafe8837c <unavailable> + 9084

    6    tmpxv281r_o                        0x000055bdafe8778d <unavailable> + 6029

    7    libc.so.6                          0x00002aef72859460 __libc_start_main +
    245

    8    tmpxv281r_o                        0x000055bdafe87449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach { grade\
    \ in\n        let letterGrade = grade\n        switch letterGrade {\n        case\
    \ 4.0:\n            gradesArray.append(\"A+\")\n        case 3.7...3.3:\n    \
    \        gradesArray.append(\"A\")\n        case 3.3...3.0:\n            gradesArray.append(\"\
    A-\")\n        case 3.0:\n            gradesArray.append(\"B+\")\n        case\
    \ 2.7...2.3:\n            gradesArray.append(\"B\")\n        case 2.3...2.0:\n\
    \            gradesArray.append(\"B-\")\n        case 2.0:\n            gradesArray.append(\"\
    C+\")\n        case 1.7...1.3:\n            gradesArray.append(\"C\")\n      \
    \  case 1.3...1.0:\n            gradesArray.append(\"C-\")\n        case 1.0:\n\
    \            gradesArray.append(\"D+\")\n        case 0.7...1.0:\n           \
    \ gradesArray.append(\"D\")\n        case 0.0:\n            gradesArray.append(\"\
    D-\")\n        case 0...0.1:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"F\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b368008cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b367fd83561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b367fd83286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b367fd8313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b367fd82bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp3zrzn15b                        0x00005622c5ce1274 <unavailable> + 8820

    6    tmp3zrzn15b                        0x00005622c5ce1f60 <unavailable> + 12128

    7    libswiftCore.so                    0x00002b367fde7800 Sequence.forEach(_:)
    + 420

    8    tmp3zrzn15b                        0x00005622c5ce1092 <unavailable> + 8338

    9    tmp3zrzn15b                        0x00005622c5ce068d <unavailable> + 5773

    10   libc.so.6                          0x00002b3680278460 __libc_start_main +
    245

    11   tmp3zrzn15b                        0x00005622c5ce0349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGrade = 0.0\n    var currentLetterGrade\
    \ = \"\"\n    var currentLetterGradeIndex = 0\n    var currentLetterGradeIndex2\
    \ = 0\n    var currentLetterGradeIndex3 = 0\n    var currentLetterGradeIndex4\
    \ = 0\n    var currentLetterGradeIndex5 = 0\n    var currentLetterGradeIndex6\
    \ = 0\n    var currentLetterGradeIndex7 = 0\n    var currentLetterGradeIndex8\
    \ = 0\n    var currentLetterGradeIndex9 = 0\n    var currentLetterGradeIndex10\
    \ = 0\n    var currentLetterGradeIndex11 = 0\n    var currentLetterGradeIndex12\
    \ = 0\n    var currentLetterGradeIndex13 = 0\n    var currentLetterGradeIndex14\
    \ = 0\n    var currentLetterGradeIndex15 = 0\n    var currentLetterGradeIndex16\
    \ = 0\n    var currentLetterGradeIndex17 = 0\n    var currentLetterGradeIndex18\
    \ = 0\n    var currentLetterGradeIndex19 = 0\n    var currentLetterGradeIndex20\
    \ = 0\n    var currentLetterGradeIndex21 = 0\n    var currentLetterGradeIndex22\
    \ = 0\n    var currentLetterGradeIndex23 = 0\n    var currentLetterGradeIndex24\
    \ = 0\n    var currentLetterGradeIndex25 = 0\n    var currentLetterGradeIndex26\
    \ = 0\n    var currentLetterGradeIndex27 = 0\n    var currentLetterGradeIndex28\
    \ = 0\n    var currentLetterGradeIndex29 = 0\n    var currentLetterGradeIndex30\
    \ = 0\n    var currentLetterGradeIndex31 = 0\n    var currentLetterGradeIndex32\
    \ = 0\n    var currentLetterGradeIndex33 = 0\n    var currentLetterGradeIndex34\
    \ = 0\n    var currentLetterGradeIndex35 = 0\n    var currentLetterGradeIndex36\
    \ = 0\n    var currentLetterGradeIndex37 = 0\n    var currentLetterGradeIndex38\
    \ = 0\n    var currentLetterGradeIndex39 = 0\n    var currentLetterGradeIndex40\
    \ = 0\n    var currentLetterGradeIndex41 = 0\n    var currentLetterGradeIndex42\
    \ = 0\n    var currentLetterGradeIndex43 = 0\n    var currentLetterGradeIndex44\
    \ = 0\n    var currentLetterGradeIndex45 = 0\n    var currentLetterGradeIndex46\
    \ = 0\n    var currentLetterGradeIndex47 = 0\n    var currentLetterGradeIndex48\
    \ = 0\n    var currentLetterGradeIndex49 = 0\n    var currentLetterGradeIndex50\
    \ = 0\n    var currentLetterGradeIndex51 = 0\n    var currentLetterGradeIndex52\
    \ = 0\n    var currentLetterGra\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphp7w287d.swift:80:9: error: type annotation missing in pattern\n\
    \    var currentLetterGra\n        ^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for i in grades {\n\
    \        if i > 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if i > 2.0 {\n            gradesArray.append(\"A\")\n        } else if i > 1.0\
    \ {\n            gradesArray.append(\"A-\")\n        } else if i > 0.7 {\n   \
    \         gradesArray.append(\"B+\")\n        } else if i > 0.3 {\n          \
    \  gradesArray.append(\"B\")\n        } else if i > 0.1 {\n            gradesArray.append(\"\
    B-\")\n        } else if i > 0.0 {\n            gradesArray.append(\"C+\")\n \
    \       } else if i > -0.7 {\n            gradesArray.append(\"C\")\n        }\
    \ else if i > -0.3 {\n            gradesArray.append(\"C-\")\n        } else if\
    \ i > -0.1 {\n            gradesArray.append(\"D+\")\n        } else if i > -0.0\
    \ {\n            gradesArray.append(\"D\")\n        } else {\n            gradesArray.append(\"\
    D-\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqsg1n97m/tmpqsg1n97m.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38f8c21c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38f8918b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38f8918988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38f89177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqsg1n97m                        0x000055e15c9467f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b38f8e0d460 __libc_start_main +
    245

    6    tmpqsg1n97m                        0x000055e15c946319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades =\
    \ [String]()\n    var currentGrade = gradesArray[0]\n    var currentLetterGrade\
    \ = \"E\"\n    for grade in gradesArray {\n        if grade > currentGrade {\n\
    \            letterGrades.append(currentLetterGrade)\n            currentGrade\
    \ = grade\n            currentLetterGrade = \"E\"\n        } else if grade ==\
    \ currentGrade {\n            currentLetterGrade = \"D\"\n        }\n    }\n \
    \   letterGrades.append(currentLetterGrade)\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpe5302f74/tmpe5302f74.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba062ac3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0627bab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0627ba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0627b97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5302f74                        0x000055d99da288e6 <unavailable> + 6374

    5    libc.so.6                          0x00002ba062caf460 __libc_start_main +
    245

    6    tmpe5302f74                        0x000055d99da28409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.map { $0 }\n    var letterGrades\
    \ = [String]()\n    \n    if gradesArray.count < 1 {\n        return letterGrades\n\
    \    }\n    \n    if gradesArray.count == 1 {\n        letterGrades.append(\"\
    E\")\n        return letterGrades\n    }\n    \n    if gradesArray.count == 2\
    \ {\n        letterGrades.append(\"D+\")\n        return letterGrades\n    }\n\
    \    \n    if gradesArray.count == 3 {\n        letterGrades.append(\"D-\")\n\
    \        return letterGrades\n    }\n    \n    if gradesArray.count == 4 {\n \
    \       letterGrades.append(\"C+\")\n        return letterGrades\n    }\n    \n\
    \    if gradesArray.count == 5 {\n        letterGrades.append(\"C\")\n       \
    \ return letterGrades\n    }\n    \n    if gradesArray.count == 6 {\n        letterGrades.append(\"\
    B-\")\n        return letterGrades\n    }\n    \n    if gradesArray.count == 7\
    \ {\n        letterGrades.append(\"B\")\n        return letterGrades\n    }\n\
    \    \n    if gradesArray.count == 8 {\n        letterGrades.append(\"B-\")\n\
    \        return letterGrades\n    }\n    \n    if gradesArray.count == 9 {\n \
    \       letterGrades.append(\"B\")\n        return letterGrades\n    }\n    \n\
    \    if gradesArray.count == 10 {\n        letterGrades.append(\"A-\")\n     \
    \   return letterGrades\n    }\n    \n    if gradesArray.count == 11 {\n     \
    \   letterGrades.append(\"A\")\n        return letterGrades\n    }\n    \n   \
    \ if gradesArray.count == 12 {\n        letterGrades.append(\"A-\")\n        return\
    \ letterGrades\n    }\n    \n    if gradesArray.count == 13 {\n        letterGrades.append(\"\
    A\")\n        return letterGrades\n    }\n    \n    if gradesArray.count == 14\
    \ {\n        letterGrades.append(\"A+\")\n        return letterGrades\n    }\n\
    \    \n    if gradesArray.count == 15 {\n        letterGrades.append(\"A\")\n\
    \        return letterGrades\n    }\n    \n    if gradesArray.count == 16 {\n\
    \        letterGrades.append(\"A+\")\n        return letterGrades\n    }\n   \
    \ \n    if gradesArray.count == 17 {\n        letterGrades.append(\"A\")\n   \
    \     return letterGrades\n    }\n    \n    if gradesArray.count == 18 {\n   \
    \     letterGrades.append(\"A+\")\n        return letterGrades\n    }\n    \n\
    \    if gradesArray.count == 19 {\n        letterGrades.append(\"A\")\n      \
    \  return letterGrades\n    }\n    \n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp74pbbcn1.swift:23:9: warning: variable 'gradesArray' was never\
    \ mutated; consider changing to 'let' constant\n    var gradesArray = grades.map\
    \ { $0 }\n    ~~~ ^\n    let\n/tmp/tmp74pbbcn1.swift:126:1: error: missing return\
    \ in global function expected to return '[String]'\n}\n^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for i in grades {\n\
    \        switch i {\n        case 4.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.7:\n            gradesArray.append(\"A\")\n        case 3.3:\n\
    \            gradesArray.append(\"A-\")\n        case 3.0:\n            gradesArray.append(\"\
    B+\")\n        case 2.7:\n            gradesArray.append(\"B\")\n        case\
    \ 2.3:\n            gradesArray.append(\"B-\")\n        case 2.0:\n          \
    \  gradesArray.append(\"C+\")\n        case 1.7:\n            gradesArray.append(\"\
    C\")\n        case 1.3:\n            gradesArray.append(\"C-\")\n        case\
    \ 1.0:\n            gradesArray.append(\"D+\")\n        case 0.7:\n          \
    \  gradesArray.append(\"D\")\n        case 0.0:\n            gradesArray.append(\"\
    D-\")\n        case 0.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            break\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5t19t_zq/tmp5t19t_zq.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8b1011c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8b0d08b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8b0d08988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8b0d077b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5t19t_zq                        0x00005584728ac7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ae8b11fd460 __libc_start_main +
    245

    6    tmp5t19t_zq                        0x00005584728ac319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7...3.3:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3...3.0:\n            letterGrades.append(\"A-\")\n        case 3.0...2.7:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7...2.3:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3...2.0:\n            letterGrades.append(\"\
    B-\")\n        case 2.0...1.7:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7...1.3:\n            letterGrades.append(\"C\")\n        case 1.3...1.0:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0...0.7:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7...0.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0...0.0:\n            letterGrades.append(\"D-\")\n     \
    \   case 0.0:\n            letterGrades.append(\"E\")\n        default:\n    \
    \        break\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002abedd0adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abedcda4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abedcda4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abedcda413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abedcda3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpiltxwb8q                        0x000055e17344f37c <unavailable> + 9084

    6    tmpiltxwb8q                        0x000055e17344e78d <unavailable> + 6029

    7    libc.so.6                          0x00002abedd299460 __libc_start_main +
    245

    8    tmpiltxwb8q                        0x000055e17344e449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    // TODO: Write your\
    \ code here\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp4j_fyys8/tmp4j_fyys8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b52fc3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b52cbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b52cba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b52cb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4j_fyys8                        0x000055855f056636 <unavailable> + 5686

    5    libc.so.6                          0x00002b6b531af460 __libc_start_main +
    245

    6    tmp4j_fyys8                        0x000055855f056159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    var letterGrade: String = \"\"\n    \n    for grade in grades {\n       \
    \ gpa = grade * 4.0\n        letterGrade = letterGrade + String(numericalLetterGrade(gpa))\n\
    \    }\n    \n    gradesArray.append(letterGrade)\n    return gradesArray\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpx8cza1b7.swift:29:44: error: cannot find 'numericalLetterGrade'\
    \ in scope\n        letterGrade = letterGrade + String(numericalLetterGrade(gpa))\n\
    \                                           ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            break\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpd3_0z2yn/tmpd3_0z2yn.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f2d191c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f2ce88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f2ce88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f2ce877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd3_0z2yn                        0x0000556b95c9f7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b2f2d37d460 __libc_start_main +
    245

    6    tmpd3_0z2yn                        0x0000556b95c9f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    switch gpa {\n    case 4.0:\n \
    \       letterGrade = \"A+\"\n    case 3.7:\n        letterGrade = \"A\"\n   \
    \ case 3.3:\n        letterGrade = \"A-\"\n    case 3.0:\n        letterGrade\
    \ = \"B+\"\n    case 2.7:\n        letterGrade = \"B\"\n    case 2.3:\n      \
    \  letterGrade = \"B-\"\n    case 2.0:\n        letterGrade = \"C+\"\n    case\
    \ 1.7:\n        letterGrade = \"C\"\n    case 1.3:\n        letterGrade = \"C-\"\
    \n    case 1.0:\n        letterGrade = \"D+\"\n    case 0.7:\n        letterGrade\
    \ = \"D\"\n    case 0.0:\n        letterGrade = \"D-\"\n    case 0.0:\n      \
    \  letterGrade = \"E\"\n    default:\n        letterGrade = \"Error\"\n    }\n\
    \    gradesArray.append(letterGrade)\n    return gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcgzs5dv_.swift:24:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7...3.3:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3...3.0:\n            letterGrades.append(\"A-\")\n        case 3.0:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7...2.3:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3...2.0:\n            letterGrades.append(\"\
    B-\")\n        case 2.0:\n            letterGrades.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            letterGrades.append(\"C\")\n        case 1.3...1.0:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0:\n            letterGrades.append(\"\
    D+\")\n        case 0.7...1.0:\n            letterGrades.append(\"D\")\n     \
    \   case 0.0:\n            letterGrades.append(\"D-\")\n        case 0...0.1:\n\
    \            letterGrades.append(\"E\")\n        default:\n            letterGrades.append(\"\
    F\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b9260afbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92607f2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b92607f2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b92607f213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b92607f1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpaqabcnue                        0x000056125503437c <unavailable> + 9084

    6    tmpaqabcnue                        0x000056125503378d <unavailable> + 6029

    7    libc.so.6                          0x00002b9260ce7460 __libc_start_main +
    245

    8    tmpaqabcnue                        0x0000561255033449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0.0:\n    \
    \        gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b81cbd29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81cba20561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b81cba20286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b81cba2013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b81cba1fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxxk04070                        0x0000556f740f137c <unavailable> + 9084

    6    tmpxxk04070                        0x0000556f740f078d <unavailable> + 6029

    7    libc.so.6                          0x00002b81cbf15460 __libc_start_main +
    245

    8    tmpxxk04070                        0x0000556f740f0449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n \
    \   var letterGrade = \"\"\n    var gradeIndex = 0\n    \n    for _ in grades\
    \ {\n        if gpa < 3.0 {\n            letterGrade = \"D-\"\n        } else\
    \ if gpa < 3.3 {\n            letterGrade = \"C-\"\n        } else if gpa < 3.7\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa < 4.0 {\n       \
    \     letterGrade = \"B-\"\n        } else if gpa < 4.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa < 4.7 {\n            letterGrade = \"B-\"\n\
    \        } else if gpa < 5.0 {\n            letterGrade = \"B-\"\n        } else\
    \ if gpa < 5.3 {\n            letterGrade = \"B-\"\n        } else if gpa < 5.7\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa < 6.0 {\n       \
    \     letterGrade = \"B-\"\n        } else if gpa < 6.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa < 6.7 {\n            letterGrade = \"B-\"\n\
    \        } else if gpa < 7.0 {\n            letterGrade = \"B-\"\n        } else\
    \ if gpa < 7.3 {\n            letterGrade = \"B-\"\n        } else if gpa < 7.7\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa < 8.0 {\n       \
    \     letterGrade = \"B-\"\n        } else if gpa < 8.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa < 8.7 {\n            letterGrade = \"B-\"\n\
    \        } else if gpa < 9.0 {\n            letterGrade = \"B-\"\n        } else\
    \ if gpa < 9.3 {\n            letterGrade = \"B-\"\n        } else if gpa < 9.7\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa < 10.0 {\n      \
    \      letterGrade = \"B-\"\n        } else if gpa < 10.3 {\n            letterGrade\
    \ = \"B-\"\n        } else if gpa < 10.7 {\n            letterGrade = \"B-\"\n\
    \        } else if gpa < 11.0 {\n            letterGrade = \"B-\"\n        } else\
    \ if gpa < 11.3 {\n            letterGrade = \"B-\"\n        } else if gpa < 11.7\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa < 12.0 {\n      \
    \      letterGra\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7fadigxw.swift:105:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp7fadigxw.swift:28:21:\
    \ note: to match this opening '{'\n    for _ in grades {\n                   \
    \ ^\n/tmp/tmp7fadigxw.swift:105:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmp7fadigxw.swift:22:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmp7fadigxw.swift:84:13: error: cannot find 'letterGra' in scope\n      \
    \      letterGra\n            ^~~~~~~~~\n/tmp/tmp7fadigxw.swift:88:6: error: operator\
    \ functions can only be declared at global or in type scope\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 0...4.0:\n            letterGrades.append(\"\
    A+\")\n        case 4.0...3.7:\n            letterGrades.append(\"A\")\n     \
    \   case 3.7...3.3:\n            letterGrades.append(\"A-\")\n        case 3.3...3.0:\n\
    \            letterGrades.append(\"B+\")\n        case 3.0...2.7:\n          \
    \  letterGrades.append(\"B\")\n        case 2.7...2.3:\n            letterGrades.append(\"\
    B-\")\n        case 2.0...1.7:\n            letterGrades.append(\"C+\")\n    \
    \    case 1.7...1.3:\n            letterGrades.append(\"C\")\n        case 1.3...1.0:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0...0.7:\n          \
    \  letterGrades.append(\"D+\")\n        case 0.7...0.0:\n            letterGrades.append(\"\
    D\")\n        case 0.0:\n            letterGrades.append(\"D-\")\n        case\
    \ _ where grade == 0.0:\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbx51z4zl.swift:25:9: error: switch must be exhaustive\n       \
    \ switch grade {\n        ^\n/tmp/tmpbx51z4zl.swift:25:9: note: do you want to\
    \ add a default clause?\n        switch grade {\n        ^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var letterGrades = [String]()\n    var totalGrades = gradesArray.count\n\
    \    var average = gradesArray.sum / totalGrades\n    var letterGrade = \"\"\n\
    \    var letterGradeLetter = \"\"\n    var letterGradeLetterIndex = 0\n    var\
    \ letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex\
    \ = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var\
    \ letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex\
    \ = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var\
    \ letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex\
    \ = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var\
    \ letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex\
    \ = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var\
    \ letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex\
    \ = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var\
    \ letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex\
    \ = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var\
    \ letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex\
    \ = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var\
    \ letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex\
    \ = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var\
    \ letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex\
    \ = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var\
    \ letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex\
    \ = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var\
    \ letterGradeIndex = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex\
    \ = 0\n    var letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var\
    \ letterGradeLetterIndex = 0\n    var letterGradeIndex = 0\n    var letterGradeLetterIndex\
    \ = 0\n    var letterGradeIndex = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpflo6ioak.swift:27:31: error: value of type '[Double]' has no member\
    \ 'sum'\n    var average = gradesArray.sum / totalGrades\n                  ~~~~~~~~~~~\
    \ ^~~\n/tmp/tmpflo6ioak.swift:32:9: error: invalid redeclaration of 'letterGradeLetterIndex'\n\
    \    var letterGradeLetterIndex = 0\n        ^\n/tmp/tmpflo6ioak.swift:30:9: note:\
    \ 'letterGradeLetterIndex' previously declared here\n    var letterGradeLetterIndex\
    \ = 0\n        ^\n/tmp/tmpflo6ioak.swift:33:9: error: invalid redeclaration of\
    \ 'letterGradeIndex'\n    var letterGradeIndex = 0\n        ^\n/tmp/tmpflo6ioak.swift:31:9:\
    \ note: 'letterGradeIndex' previously declared here\n    var letterGradeIndex\
    \ = 0\n        ^\n/tmp/tmpflo6ioak.swift:34:9: error: invalid redeclaration of\
    \ 'letterGradeLetterIndex'\n    var letterGradeLetterIndex = 0\n        ^\n/tmp/tmpflo6ioak.swift:30:9:\
    \ note: 'letterGradeLetterIndex' previously declared here\n    var letterGradeLetterIndex\
    \ = 0\n        ^\n/tmp/tmpflo6ioak.swift:35:9: error: invalid redeclaration of\
    \ 'letterGradeIndex'\n    var letterGradeIndex = 0\n        ^\n/tmp/tmpflo6ioak.swift:31:9:\
    \ note: 'letterGradeIndex' previously declared here\n    var letterGradeIndex\
    \ = 0\n        ^\n/tmp/tmpflo6ioak.swift:36:9: error: invalid redeclaration of\
    \ 'letterGradeLetterIndex'\n    var letterGradeLetterIndex = 0\n        ^\n/tmp/tmpflo6ioak.swift:30:9:\
    \ note: 'letterGradeLetterIndex' previously declared here\n    var letterGradeLetterIndex\
    \ = 0\n        ^\n/tmp/tmpflo6ioak.swift:37:9: error: invalid redeclaration of\
    \ 'letterGradeIndex'\n    var letterGradeIndex = 0\n        ^\n/tmp/tmpflo6ioak.swift:31:9:\
    \ note: 'letterGradeIndex' previously declared here\n    var letterGradeIndex\
    \ = 0\n        ^\n/tmp/tmpflo6ioak.swift:38:9: error: invalid redeclaration of\
    \ 'letterGradeLetterIndex'\n    var letterGradeLetterIndex = 0\n        ^\n/tmp/tmpflo6ioak.swift:30:9:\
    \ note: 'letterGradeLetterIndex' previously declared here\n    var letterGradeLetterIndex\
    \ = 0\n        ^\n/tmp/tmpflo6ioak.swift:39:9: error: invalid redeclaration of\
    \ 'letterGradeIndex'\n    var letterGradeIndex = 0\n        ^\n/tmp/tmpfl"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n    var gradesArray = grades.map { $0 }\n    \n    var\
    \ letterGrades = [String]()\n    \n    if gradesArray.count > 0 {\n        \n\
    \        let firstGrade = gradesArray[0]\n        \n        if firstGrade > 4.0\
    \ {\n            \n            letterGrades.append(\"A+\")\n            \n   \
    \     } else if firstGrade > 3.7 {\n            \n            letterGrades.append(\"\
    A\")\n            \n        } else if firstGrade > 3.3 {\n            \n     \
    \       letterGrades.append(\"A-\")\n            \n        } else if firstGrade\
    \ > 3.0 {\n            \n            letterGrades.append(\"B+\")\n           \
    \ \n        } else if firstGrade > 2.7 {\n            \n            letterGrades.append(\"\
    B\")\n            \n        } else if firstGrade > 2.3 {\n            \n     \
    \       letterGrades.append(\"B-\")\n            \n        } else if firstGrade\
    \ > 2.0 {\n            \n            letterGrades.append(\"C+\")\n           \
    \ \n        } else if firstGrade > 1.7 {\n            \n            letterGrades.append(\"\
    C\")\n            \n        } else if firstGrade > 1.3 {\n            \n     \
    \       letterGrades.append(\"C-\")\n            \n        } else if firstGrade\
    \ > 1.0 {\n            \n            letterGrades.append(\"D+\")\n           \
    \ \n        } else if firstGrade > 0.7 {\n            \n            letterGrades.append(\"\
    D\")\n            \n        } else if firstGrade > 0.0 {\n            \n     \
    \       letterGrades.append(\"D-\")\n            \n        } else {\n        \
    \    \n            letterGrades.append(\"E\")\n            \n        }\n     \
    \   \n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpowisvxws/tmpowisvxws.swift:104: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba642d2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba642a22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba642a22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba642a217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpowisvxws                        0x000055de3ed8c7e6 <unavailable> + 6118

    5    libc.so.6                          0x00002ba642f17460 __libc_start_main +
    245

    6    tmpowisvxws                        0x000055de3ed8c309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades =\
    \ [String]()\n    var gpa = gradesArray[0]\n    var letterGrade = \"\"\n    \n\
    \    for grade in gradesArray {\n        if grade > gpa {\n            letterGrade\
    \ = \"D-\"\n        } else if grade > 3.0 {\n            letterGrade = \"C+\"\n\
    \        } else if grade > 2.0 {\n            letterGrade = \"C\"\n        } else\
    \ if grade > 1.0 {\n            letterGrade = \"B+\"\n        } else if grade\
    \ > 0.7 {\n            letterGrade = \"B\"\n        } else if grade > 0.3 {\n\
    \            letterGrade = \"A-\"\n        } else if grade > 0.0 {\n         \
    \   letterGrade = \"A+\"\n        } else {\n            letterGrade = \"E\"\n\
    \        }\n        \n        letterGrades.append(letterGrade)\n        gpa =\
    \ grade\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptammabb6/tmptammabb6.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68f9a48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68f973fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68f973f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68f973e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptammabb6                        0x0000564a618598e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b68f9c34460 __libc_start_main +
    245

    6    tmptammabb6                        0x0000564a61859409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0...2.7:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0...1.7:\n            gradesArray.append(\"C+\")\n     \
    \   case 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0...0.7:\n           \
    \ gradesArray.append(\"D+\")\n        case 0.7...0.0:\n            gradesArray.append(\"\
    D\")\n        case 0.0...0.0:\n            gradesArray.append(\"E\")\n       \
    \ default:\n            gradesArray.append(\"E\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002af4e5619c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af4e5310561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af4e5310286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af4e531013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af4e530fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpjlc3m0e_                        0x0000561aaa09737c <unavailable> + 9084

    6    tmpjlc3m0e_                        0x0000561aaa09678d <unavailable> + 6029

    7    libc.so.6                          0x00002af4e5805460 __libc_start_main +
    245

    8    tmpjlc3m0e_                        0x0000561aaa096449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCopy\
    \ = gradesArray\n    var gradesArrayCopy2 = gradesArray\n    var gradesArrayCopy3\
    \ = gradesArray\n    var gradesArrayCopy4 = gradesArray\n    var gradesArrayCopy5\
    \ = gradesArray\n    var gradesArrayCopy6 = gradesArray\n    var gradesArrayCopy7\
    \ = gradesArray\n    var gradesArrayCopy8 = gradesArray\n    var gradesArrayCopy9\
    \ = gradesArray\n    var gradesArrayCopy10 = gradesArray\n    var gradesArrayCopy11\
    \ = gradesArray\n    var gradesArrayCopy12 = gradesArray\n    var gradesArrayCopy13\
    \ = gradesArray\n    var gradesArrayCopy14 = gradesArray\n    var gradesArrayCopy15\
    \ = gradesArray\n    var gradesArrayCopy16 = gradesArray\n    var gradesArrayCopy17\
    \ = gradesArray\n    var gradesArrayCopy18 = gradesArray\n    var gradesArrayCopy19\
    \ = gradesArray\n    var gradesArrayCopy20 = gradesArray\n    var gradesArrayCopy21\
    \ = gradesArray\n    var gradesArrayCopy22 = gradesArray\n    var gradesArrayCopy23\
    \ = gradesArray\n    var gradesArrayCopy24 = gradesArray\n    var gradesArrayCopy25\
    \ = gradesArray\n    var gradesArrayCopy26 = gradesArray\n    var gradesArrayCopy27\
    \ = gradesArray\n    var gradesArrayCopy28 = gradesArray\n    var gradesArrayCopy29\
    \ = gradesArray\n    var gradesArrayCopy30 = gradesArray\n    var gradesArrayCopy31\
    \ = gradesArray\n    var gradesArrayCopy32 = gradesArray\n    var gradesArrayCopy33\
    \ = gradesArray\n    var gradesArrayCopy34 = gradesArray\n    var gradesArrayCopy35\
    \ = gradesArray\n    var gradesArrayCopy36 = gradesArray\n    var gradesArrayCopy37\
    \ = gradesArray\n    var gradesArrayCopy38 = gradesArray\n    var gradesArrayCopy39\
    \ = gradesArray\n    var gradesArrayCopy40 = gradesArray\n    var gradesArrayCopy41\
    \ = gradesArray\n    var gradesArrayCopy42 = gradesArray\n    var gradesArrayCopy43\
    \ = gradesArray\n    var gradesArrayCopy44 = gradesArray\n    var gradesArrayCopy45\
    \ = gradesArray\n    var gradesArrayCopy46 = gradesArray\n    var gradesArrayCopy47\
    \ = grade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpu_zo1gwl.swift:70:29: error: cannot find 'grade' in scope\n   \
    \ var gradesArrayCopy47 = grade\n                            ^~~~~\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b61cc16bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61cbe62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b61cbe62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b61cbe6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b61cbe61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptnx6flla                        0x0000556a3800d337 <unavailable> + 9015

    6    tmptnx6flla                        0x0000556a3800c73d <unavailable> + 5949

    7    libc.so.6                          0x00002b61cc357460 __libc_start_main +
    245

    8    tmptnx6flla                        0x0000556a3800c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"Error\")\n        }\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpz_qzcn6h/tmpz_qzcn6h.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba0461bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba045eb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba045eb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba045eb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz_qzcn6h                        0x000055e7468e37f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba0463a8460 __libc_start_main +
    245

    6    tmpz_qzcn6h                        0x000055e7468e3319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex =\
    \ 0\n    var gradesArrayIndex2 = 0\n    var gradesArrayIndex3 = 0\n    var gradesArrayIndex4\
    \ = 0\n    var gradesArrayIndex5 = 0\n    var gradesArrayIndex6 = 0\n    var gradesArrayIndex7\
    \ = 0\n    var gradesArrayIndex8 = 0\n    var gradesArrayIndex9 = 0\n    var gradesArrayIndex10\
    \ = 0\n    var gradesArrayIndex11 = 0\n    var gradesArrayIndex12 = 0\n    var\
    \ gradesArrayIndex13 = 0\n    var gradesArrayIndex14 = 0\n    var gradesArrayIndex15\
    \ = 0\n    var gradesArrayIndex16 = 0\n    var gradesArrayIndex17 = 0\n    var\
    \ gradesArrayIndex18 = 0\n    var gradesArrayIndex19 = 0\n    var gradesArrayIndex20\
    \ = 0\n    var gradesArrayIndex21 = 0\n    var gradesArrayIndex22 = 0\n    var\
    \ gradesArrayIndex23 = 0\n    var gradesArrayIndex24 = 0\n    var gradesArrayIndex25\
    \ = 0\n    var gradesArrayIndex26 = 0\n    var gradesArrayIndex27 = 0\n    var\
    \ gradesArrayIndex28 = 0\n    var gradesArrayIndex29 = 0\n    var gradesArrayIndex30\
    \ = 0\n    var gradesArrayIndex31 = 0\n    var gradesArrayIndex32 = 0\n    var\
    \ gradesArrayIndex33 = 0\n    var gradesArrayIndex34 = 0\n    var gradesArrayIndex35\
    \ = 0\n    var gradesArrayIndex36 = 0\n    var gradesArrayIndex37 = 0\n    var\
    \ gradesArrayIndex38 = 0\n    var gradesArrayIndex39 = 0\n    var gradesArrayIndex40\
    \ = 0\n    var gradesArrayIndex41 = 0\n    var gradesArrayIndex42 = 0\n    var\
    \ gradesArrayIndex43 = 0\n    var gradesArrayIndex44 = 0\n    var gradesArrayIndex45\
    \ = 0\n    var gradesArrayIndex46 = 0\n    var gradesArrayIndex47 = 0\n    var\
    \ gradesArrayIndex48 = 0\n    var gradesArrayIndex49 = 0\n    var gradesArrayIndex50\
    \ = 0\n    var gradesArrayIndex51 = 0\n    var gradesArrayIndex52 = 0\n    var\
    \ gradesArrayIndex53 = 0\n    var gradesArrayIndex54 = 0\n    var gradesArrayIndex55\
    \ = 0\n    var gradesArrayIndex56 = 0\n    var gradesArrayIndex57 = 0\n    var\
    \ gradesArrayIndex58 = 0\n    var gradesArrayIndex59 = 0\n    var gradesArrayIndex60\
    \ = 0\n    var gradesArrayIndex61 = 0\n    var gradesArrayIndex62 = 0\n    var\
    \ gradesArrayIndex63 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4q95c25m.swift:23:9: warning: initialization of variable 'gradesArray'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArray = [String]()\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:24:9:\
    \ warning: initialization of variable 'gradesArrayIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:25:9: warning: initialization\
    \ of variable 'gradesArrayIndex2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4q95c25m.swift:26:9: warning: initialization of variable 'gradesArrayIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:27:9:\
    \ warning: initialization of variable 'gradesArrayIndex4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex4 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:28:9: warning: initialization\
    \ of variable 'gradesArrayIndex5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4q95c25m.swift:29:9: warning: initialization of variable 'gradesArrayIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex6 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:30:9:\
    \ warning: initialization of variable 'gradesArrayIndex7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex7 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:31:9: warning: initialization\
    \ of variable 'gradesArrayIndex8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex8 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4q95c25m.swift:32:9: warning: initialization of variable 'gradesArrayInd"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades =\
    \ [String]()\n    var currentGrade = gradesArray[0]\n    var currentLetterGrade\
    \ = \"D+\"\n    \n    for grade in gradesArray {\n        if grade < currentGrade\
    \ {\n            letterGrades.append(currentLetterGrade)\n            currentGrade\
    \ = grade\n            currentLetterGrade = \"D+\"\n        } else if grade ==\
    \ currentGrade {\n            currentLetterGrade = \"D\"\n        } else if grade\
    \ > currentGrade {\n            letterGrades.append(currentLetterGrade)\n    \
    \        currentGrade = grade\n            currentLetterGrade = \"D-\"\n     \
    \   } else {\n            currentLetterGrade = \"E\"\n        }\n    }\n    letterGrades.append(currentLetterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqnqku_f2/tmpqnqku_f2.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26a9ecbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26a9bc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26a9bc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26a9bc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqnqku_f2                        0x000055b16f96e8e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b26aa0b7460 __libc_start_main +
    245

    6    tmpqnqku_f2                        0x000055b16f96e409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7266dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef72364561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aef72364286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aef7236413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aef72363bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxv281r_o                        0x000055bdafe8837c <unavailable> + 9084

    6    tmpxv281r_o                        0x000055bdafe8778d <unavailable> + 6029

    7    libc.so.6                          0x00002aef72859460 __libc_start_main +
    245

    8    tmpxv281r_o                        0x000055bdafe87449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    \n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7u39lkss.swift:24:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var letterGrades = [String]()\n    var letterGrade = \"\"\
    \n    var gpa = gradesArray[0]\n    var gpaCount = 0\n    var gpaIndex = 0\n \
    \   var gpaIndex2 = 0\n    var gpaIndex3 = 0\n    var gpaIndex4 = 0\n    var gpaIndex5\
    \ = 0\n    var gpaIndex6 = 0\n    var gpaIndex7 = 0\n    var gpaIndex8 = 0\n \
    \   var gpaIndex9 = 0\n    var gpaIndex10 = 0\n    var gpaIndex11 = 0\n    var\
    \ gpaIndex12 = 0\n    var gpaIndex13 = 0\n    var gpaIndex14 = 0\n    var gpaIndex15\
    \ = 0\n    var gpaIndex16 = 0\n    var gpaIndex17 = 0\n    var gpaIndex18 = 0\n\
    \    var gpaIndex19 = 0\n    var gpaIndex20 = 0\n    var gpaIndex21 = 0\n    var\
    \ gpaIndex22 = 0\n    var gpaIndex23 = 0\n    var gpaIndex24 = 0\n    var gpaIndex25\
    \ = 0\n    var gpaIndex26 = 0\n    var gpaIndex27 = 0\n    var gpaIndex28 = 0\n\
    \    var gpaIndex29 = 0\n    var gpaIndex30 = 0\n    var gpaIndex31 = 0\n    var\
    \ gpaIndex32 = 0\n    var gpaIndex33 = 0\n    var gpaIndex34 = 0\n    var gpaIndex35\
    \ = 0\n    var gpaIndex36 = 0\n    var gpaIndex37 = 0\n    var gpaIndex38 = 0\n\
    \    var gpaIndex39 = 0\n    var gpaIndex40 = 0\n    var gpaIndex41 = 0\n    var\
    \ gpaIndex42 = 0\n    var gpaIndex43 = 0\n    var gpaIndex44 = 0\n    var gpaIndex45\
    \ = 0\n    var gpaIndex46 = 0\n    var gpaIndex47 = 0\n    var gpaIndex48 = 0\n\
    \    var gpaIndex49 = 0\n    var gpaIndex50 = 0\n    var gpaIndex51 = 0\n    var\
    \ gpaIndex52 = 0\n    var gpaIndex53 = 0\n    var gpaIndex54 = 0\n    var gpaIndex55\
    \ = 0\n    var gpaIndex56 = 0\n    var gpaIndex57 = 0\n    var gpaIndex58 = 0\n\
    \    var gpaIndex59 = 0\n    var gpaIndex60 = 0\n    var gpaIndex61 = 0\n    var\
    \ gpaIndex62 = 0\n    var gpaIndex63 = 0\n    var gpaIndex64 = 0\n    var gpaIndex65\
    \ = 0\n    var gpaIndex66 = 0\n    var g\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpvpiciypz.swift:95:9: error: type annotation missing in pattern\n\
    \    var g\n        ^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gradesArray2 = []\n\
    \    var gradesArray3 = [String]()\n    var gradesArray4 = [String]()\n    var\
    \ gradesArray5 = [String]()\n    var gradesArray6 = [String]()\n    var gradesArray7\
    \ = [String]()\n    var gradesArray8 = [String]()\n    var gradesArray9 = [String]()\n\
    \    var gradesArray10 = [String]()\n    var gradesArray11 = [String]()\n    var\
    \ gradesArray12 = [String]()\n    var gradesArray13 = [String]()\n    var gradesArray14\
    \ = [String]()\n    var gradesArray15 = [String]()\n    var gradesArray16 = [String]()\n\
    \    var gradesArray17 = [String]()\n    var gradesArray18 = [String]()\n    var\
    \ gradesArray19 = [String]()\n    var gradesArray20 = [String]()\n    var gradesArray21\
    \ = [String]()\n    var gradesArray22 = [String]()\n    var gradesArray23 = [String]()\n\
    \    var gradesArray24 = [String]()\n    var gradesArray25 = [String]()\n    var\
    \ gradesArray26 = [String]()\n    var gradesArray27 = [String]()\n    var gradesArray28\
    \ = [String]()\n    var gradesArray29 = [String]()\n    var gradesArray30 = [String]()\n\
    \    var gradesArray31 = [String]()\n    var gradesArray32 = [String]()\n    var\
    \ gradesArray33 = [String]()\n    var gradesArray34 = [String]()\n    var gradesArray35\
    \ = [String]()\n    var gradesArray36 = [String]()\n    var gradesArray37 = [String]()\n\
    \    var gradesArray38 = [String]()\n    var gradesArray39 = [String]()\n    var\
    \ gradesArray40 = [String]()\n    var gradesArray41 = [String]()\n    var gradesArray42\
    \ = [String]()\n    var gradesArray43 = [String]()\n    var gradesArray44 = [String]()\n\
    \    var gradesArray45 = [String]()\n    var gradesArray46 = [String]()\n    var\
    \ gradesArray47 = [String]()\n    var gradesArray48 = [String]()\n    var gradesArray49\
    \ = [String]()\n    var gradesArray50 = [String]()\n    var gradesArray51 = [String]()\n\
    \    var grade\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpik450j5w.swift:24:24: error: empty collection literal requires\
    \ an explicit type\n    var gradesArray2 = []\n                       ^~\n/tmp/tmpik450j5w.swift:74:9:\
    \ error: type annotation missing in pattern\n    var grade\n        ^\n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade < 3.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade < 3.3 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade < 3.7 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade < 4.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ < 4.3 {\n            letterGrades.append(\"B\")\n        } else if grade < 4.7\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade < 5.0 {\n\
    \            letterGrades.append(\"C+\")\n        } else if grade < 5.3 {\n  \
    \          letterGrades.append(\"C\")\n        } else if grade < 5.7 {\n     \
    \       letterGrades.append(\"C-\")\n        } else if grade < 6.0 {\n       \
    \     letterGrades.append(\"D+\")\n        } else if grade < 6.3 {\n         \
    \   letterGrades.append(\"D\")\n        } else if grade < 6.7 {\n            letterGrades.append(\"\
    D-\")\n        } else if grade < 7.0 {\n            letterGrades.append(\"E\"\
    )\n        } else {\n            letterGrades.append(\"F\")\n        }\n    }\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpl4nbre8r/tmpl4nbre8r.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0362fe4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0362cdbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0362cdb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0362cda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4nbre8r                        0x00005587966907f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b03631d0460 __libc_start_main +
    245

    6    tmpl4nbre8r                        0x0000558796690319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            gradesArray.append(\"E\")\n        }\n   \
    \ }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpm_rf5cgu/tmpm_rf5cgu.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2b42fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2b3ff4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2b3ff4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2b3ff37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm_rf5cgu                        0x00005615d4cc77a6 <unavailable> + 6054

    5    libc.so.6                          0x00002ae2b44e9460 __libc_start_main +
    245

    6    tmpm_rf5cgu                        0x00005615d4cc72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b61cc16bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61cbe62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b61cbe62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b61cbe6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b61cbe61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptnx6flla                        0x0000556a3800d337 <unavailable> + 9015

    6    tmptnx6flla                        0x0000556a3800c73d <unavailable> + 5949

    7    libc.so.6                          0x00002b61cc357460 __libc_start_main +
    245

    8    tmptnx6flla                        0x0000556a3800c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted(by:\
    \ <)\n    var letterGrades = [String]()\n    for grade in gradesArray {\n    \
    \    if grade > 4.0 {\n            letterGrades.append(\"A+\")\n        } else\
    \ if grade > 3.7 {\n            letterGrades.append(\"A\")\n        } else if\
    \ grade > 3.3 {\n            letterGrades.append(\"A-\")\n        } else if grade\
    \ > 3.0 {\n            letterGrades.append(\"B+\")\n        } else if grade >\
    \ 2.7 {\n            letterGrades.append(\"B\")\n        } else if grade > 2.3\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade > 2.0 {\n\
    \            letterGrades.append(\"C+\")\n        } else if grade > 1.7 {\n  \
    \          letterGrades.append(\"C\")\n        } else if grade > 1.3 {\n     \
    \       letterGrades.append(\"C-\")\n        } else if grade > 1.0 {\n       \
    \     letterGrades.append(\"D+\")\n        } else if grade > 0.7 {\n         \
    \   letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg116vbbz/tmpg116vbbz.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17bc636c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17bc32db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17bc32d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17bc32c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg116vbbz                        0x000055786b54d866 <unavailable> + 6246

    5    libc.so.6                          0x00002b17bc822460 __libc_start_main +
    245

    6    tmpg116vbbz                        0x000055786b54d389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b412d578c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b412d26f561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b412d26f286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b412d26f13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b412d26ebb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmprdo33zh3                        0x0000558361b6337c <unavailable> + 9084

    6    tmprdo33zh3                        0x0000558361b6278d <unavailable> + 6029

    7    libc.so.6                          0x00002b412d764460 __libc_start_main +
    245

    8    tmprdo33zh3                        0x0000558361b62449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = \"\"\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    gradesArray.append(letterGrade)\n\
    \    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy2etdvoz.swift:24:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = String()\n    \n    if gpa < 4.0 {\n    \
    \    letterGrade = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"\
    A\"\n    } else if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa\
    \ < 3.0 {\n        letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade\
    \ = \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else\
    \ if gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n  \
    \      letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"\
    C-\"\n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa\
    \ < 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    \n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpowkfdku5.swift:24:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    \n    for grade in grades\
    \ {\n        let letterGrade: String\n        \n        if grade < 3.0 {\n   \
    \         letterGrade = \"A+\"\n        } else if grade < 3.3 {\n            letterGrade\
    \ = \"A\"\n        } else if grade < 3.7 {\n            letterGrade = \"A-\"\n\
    \        } else if grade < 4.0 {\n            letterGrade = \"B+\"\n        }\
    \ else if grade < 2.7 {\n            letterGrade = \"B\"\n        } else if grade\
    \ < 2.3 {\n            letterGrade = \"B-\"\n        } else if grade < 2.0 {\n\
    \            letterGrade = \"C+\"\n        } else if grade < 1.7 {\n         \
    \   letterGrade = \"C\"\n        } else if grade < 1.3 {\n            letterGrade\
    \ = \"C-\"\n        } else if grade < 1.0 {\n            letterGrade = \"D+\"\n\
    \        } else if grade < 0.7 {\n            letterGrade = \"D\"\n        } else\
    \ if grade < 0.0 {\n            letterGrade = \"D-\"\n        } else {\n     \
    \       letterGrade = \"E\"\n        }\n        \n        gradesArray.append(letterGrade)\n\
    \    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpc18u0qp4/tmpc18u0qp4.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b454cde0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b454cad7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b454cad7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b454cad67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc18u0qp4                        0x0000564b28e497a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b454cfcc460 __libc_start_main +
    245

    6    tmpc18u0qp4                        0x0000564b28e492c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at:\
    \ 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n \
    \   gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at:\
    \ 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n \
    \   gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at:\
    \ 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n \
    \   gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at:\
    \ 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n \
    \   gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at:\
    \ 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n \
    \   gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at:\
    \ 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n \
    \   gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at:\
    \ 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n \
    \   gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at:\
    \ 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n \
    \   gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at:\
    \ 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n \
    \   gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArrayCopy.remove(at:\
    \ 0)\n    gradesArrayCopy.remove(at: 0)\n    gradesArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpravdgtb7.swift:74:5: warning: variable is unused\n    gradesArray\n\
    \    ^~~~~~~~~~~\n/tmp/tmpravdgtb7.swift:23:9: warning: variable 'gradesArray'\
    \ was never mutated; consider changing to 'let' constant\n    var gradesArray\
    \ = grades\n    ~~~ ^\n    let\n/tmp/tmpravdgtb7.swift:75:1: error: missing return\
    \ in global function expected to return '[String]'\n}\n^\n"
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n \
    \   var letterGrade = \"\"\n    \n    for grade in grades {\n        if gpa >\
    \ 3.0 {\n            letterGrade = \"D+\"\n        } else if gpa > 2.0 {\n   \
    \         letterGrade = \"D-\"\n        } else if gpa > 1.7 {\n            letterGrade\
    \ = \"C\"\n        } else if gpa > 1.0 {\n            letterGrade = \"C+\"\n \
    \       } else if gpa > 0.7 {\n            letterGrade = \"B\"\n        } else\
    \ if gpa > 0.3 {\n            letterGrade = \"B+\"\n        } else if gpa > 0.0\
    \ {\n            letterGrade = \"B-\"\n        } else if gpa > -0.3 {\n      \
    \      letterGrade = \"A-\"\n        } else if gpa > -0.7 {\n            letterGrade\
    \ = \"A+\"\n        } else if gpa > -1.0 {\n            letterGrade = \"A\"\n\
    \        } else {\n            letterGrade = \"E\"\n        }\n        gradesArray.append(letterGrade)\n\
    \        gpa -= grade\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpi_90_tx_/tmpi_90_tx_.swift:70: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b756ec13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b756e90ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b756e90a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b756e9097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi_90_tx_                        0x000055a86fb02856 <unavailable> + 6230

    5    libc.so.6                          0x00002b756edff460 __libc_start_main +
    245

    6    tmpi_90_tx_                        0x000055a86fb02379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            break\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpd3_0z2yn/tmpd3_0z2yn.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f2d191c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f2ce88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f2ce88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f2ce877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd3_0z2yn                        0x0000556b95c9f7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b2f2d37d460 __libc_start_main +
    245

    6    tmpd3_0z2yn                        0x0000556b95c9f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reversed()\n\
    \    var gradesArrayLength = gradesArray.count\n    var letterGrades = [String]()\n\
    \    for i in 0..<gradesArrayLength {\n        let grade = gradesArray[i]\n  \
    \      let letterGrade = grade < 3.0 ? \"A+\" :\n            grade < 3.7 ? \"\
    A\" :\n            grade < 3.3 ? \"A-\" :\n            grade < 3.0 ? \"B+\" :\n\
    \            grade < 2.7 ? \"B\" :\n            grade < 2.3 ? \"B-\" :\n     \
    \       grade < 2.0 ? \"C+\" :\n            grade < 1.7 ? \"C\" :\n          \
    \  grade < 1.3 ? \"C-\" :\n            grade < 1.0 ? \"D+\" :\n            grade\
    \ < 0.7 ? \"D\" :\n            grade < 0.0 ? \"D-\" :\n            \"E\"\n   \
    \     letterGrades.append(letterGrade)\n    }\n    return letterGrades\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpv7dgy5zk/tmpv7dgy5zk.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06bf87dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06bf574b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06bf574988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06bf5737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv7dgy5zk                        0x000055dcf7469926 <unavailable> + 6438

    5    libc.so.6                          0x00002b06bfa69460 __libc_start_main +
    245

    6    tmpv7dgy5zk                        0x000055dcf7469449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    \n    if gradesArray.count > 0 {\n   \
    \     let firstGPA = gradesArray[0]\n        let lastGPA = gradesArray[gradesArray.count\
    \ - 1]\n        \n        if firstGPA > lastGPA {\n            letterGrades.append(\"\
    D+\")\n            \n            for i in 1..<gradesArray.count {\n          \
    \      if gradesArray[i] > firstGPA {\n                    letterGrades.append(\"\
    D\")\n                }\n                \n                if gradesArray[i] <\
    \ lastGPA {\n                    letterGrades.append(\"D-\")\n               \
    \ }\n            }\n            \n            letterGrades.append(\"E\")\n   \
    \     } else {\n            letterGrades.append(\"D-\")\n            \n      \
    \      for i in 1..<gradesArray.count {\n                if gradesArray[i] < firstGPA\
    \ {\n                    letterGrades.append(\"D\")\n                }\n     \
    \           \n                if gradesArray[i] > lastGPA {\n                \
    \    letterGrades.append(\"D+\")\n                }\n            }\n         \
    \   \n            letterGrades.append(\"E\")\n        }\n    }\n    \n    return\
    \ letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpyxp6o89t/tmpyxp6o89t.swift:78: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7138660c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7138357b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7138357988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71383567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyxp6o89t                        0x000055e129737966 <unavailable> + 6502

    5    libc.so.6                          0x00002b713884c460 __libc_start_main +
    245

    6    tmpyxp6o89t                        0x000055e129737489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    \n    if grades.count > 0 {\n        gradesArray = grades.sorted()\n    }\n\
    \    \n    if gradesArray.count > 0 {\n        if gradesArray[0] > 3.0 {\n   \
    \         letterGrades.append(\"A+\")\n        }\n        else if gradesArray[0]\
    \ > 2.0 {\n            letterGrades.append(\"A\")\n        }\n        else if\
    \ gradesArray[0] > 1.0 {\n            letterGrades.append(\"A-\")\n        }\n\
    \        else if gradesArray[0] > 0.0 {\n            letterGrades.append(\"B+\"\
    )\n        }\n        else if gradesArray[0] > -0.7 {\n            letterGrades.append(\"\
    B\")\n        }\n        else if gradesArray[0] > -0.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        else if gradesArray[0] > -0.1 {\n            letterGrades.append(\"\
    C+\")\n        }\n        else if gradesArray[0] > -0.4 {\n            letterGrades.append(\"\
    C\")\n        }\n        else if gradesArray[0] > -0.2 {\n            letterGrades.append(\"\
    C-\")\n        }\n        else if gradesArray[0] > -0.1 {\n            letterGrades.append(\"\
    D+\")\n        }\n        else if gradesArray[0] > -0.3 {\n            letterGrades.append(\"\
    D\")\n        }\n        else if gradesArray[0] > -0.2 {\n            letterGrades.append(\"\
    D-\")\n        }\n        else if gradesArray[0] > -0.1 {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpxxnz5h9_/tmpxxnz5h9_.swift:87: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afda2313c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afda200ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afda200a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afda20097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxxnz5h9_                        0x0000564051a117e6 <unavailable> + 6118

    5    libc.so.6                          0x00002afda24ff460 __libc_start_main +
    245

    6    tmpxxnz5h9_                        0x0000564051a11309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades =\
    \ [String]()\n    var gpa = gradesArray[0]\n    var letterGrade = \"\"\n    \n\
    \    if gpa < 3.0 {\n        letterGrade = \"D-\"\n    } else if gpa < 3.3 {\n\
    \        letterGrade = \"C+\"\n    } else if gpa < 3.7 {\n        letterGrade\
    \ = \"B-\"\n    } else if gpa < 4.0 {\n        letterGrade = \"B+\"\n    } else\
    \ if gpa < 4.3 {\n        letterGrade = \"B-\"\n    } else if gpa < 4.7 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 5.0 {\n        letterGrade =\
    \ \"A+\"\n    } else if gpa < 5.3 {\n        letterGrade = \"A+\"\n    } else\
    \ if gpa < 5.7 {\n        letterGrade = \"A+\"\n    } else if gpa < 6.0 {\n  \
    \      letterGrade = \"A+\"\n    } else {\n        letterGrade = \"E\"\n    }\n\
    \    \n    for index in 0..<gradesArray.count {\n        if gradesArray[index]\
    \ == gpa {\n            letterGrades.append(letterGrade)\n        } else {\n \
    \           letterGrades.append(letterGrades[index])\n        }\n    }\n    \n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002ad960779c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad960470561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad960470286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad96047013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad96046fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002ad96026ffc3 <unavailable> + 188355

    6    tmpiz3eckjb                        0x0000565053e0672f <unavailable> + 10031

    7    tmpiz3eckjb                        0x0000565053e0581d <unavailable> + 6173

    8    libc.so.6                          0x00002ad960965460 __libc_start_main +
    245

    9    tmpiz3eckjb                        0x0000565053e054d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        let letterGrade = grade\n        switch letterGrade {\n        case 4.0:\n\
    \            gradesArray.append(\"A+\")\n        case 3.7...3.3:\n           \
    \ gradesArray.append(\"A\")\n        case 3.3...3.0:\n            gradesArray.append(\"\
    A-\")\n        case 3.0:\n            gradesArray.append(\"B+\")\n        case\
    \ 2.7...2.3:\n            gradesArray.append(\"B\")\n        case 2.3...2.0:\n\
    \            gradesArray.append(\"B-\")\n        case 2.0:\n            gradesArray.append(\"\
    C+\")\n        case 1.7...1.3:\n            gradesArray.append(\"C\")\n      \
    \  case 1.3...1.0:\n            gradesArray.append(\"C-\")\n        case 1.0:\n\
    \            gradesArray.append(\"D+\")\n        case 0.7...1.0:\n           \
    \ gradesArray.append(\"D\")\n        case 0.0:\n            gradesArray.append(\"\
    D-\")\n        case 0...0.1:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aecc0fbdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aecc0cb4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aecc0cb4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aecc0cb413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aecc0cb3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9wrlw6ru                        0x000055f72d76434c <unavailable> + 9036

    6    tmp9wrlw6ru                        0x000055f72d76373d <unavailable> + 5949

    7    libc.so.6                          0x00002aecc11a9460 __libc_start_main +
    245

    8    tmp9wrlw6ru                        0x000055f72d7633f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        if grade > 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if grade > 2.7 {\n            gradesArray.append(\"A\")\n        } else if grade\
    \ > 2.3 {\n            gradesArray.append(\"A-\")\n        } else if grade > 1.3\
    \ {\n            gradesArray.append(\"B+\")\n        } else if grade > 1.7 {\n\
    \            gradesArray.append(\"B\")\n        } else if grade > 1.0 {\n    \
    \        gradesArray.append(\"B-\")\n        } else if grade > 0.7 {\n       \
    \     gradesArray.append(\"C+\")\n        } else if grade > 0.3 {\n          \
    \  gradesArray.append(\"C\")\n        } else if grade > 0.0 {\n            gradesArray.append(\"\
    C-\")\n        } else if grade > 0.0 {\n            gradesArray.append(\"D+\"\
    )\n        } else if grade > 0.0 {\n            gradesArray.append(\"D\")\n  \
    \      } else if grade > 0.0 {\n            gradesArray.append(\"D-\")\n     \
    \   } else {\n            gradesArray.append(\"E\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpevb8lrbe/tmpevb8lrbe.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a02bdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a028d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a028d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a028d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevb8lrbe                        0x000056393bac57f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b7a02dc7460 __libc_start_main +
    245

    6    tmpevb8lrbe                        0x000056393bac5319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    switch $0 {\n        case 0...3.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.0...5.0:\n            gradesArray.append(\"A\")\n        case\
    \ 5.0...7.0:\n            gradesArray.append(\"A-\")\n        case 7.0...9.0:\n\
    \            gradesArray.append(\"B+\")\n        case 9.0...11.0:\n          \
    \  gradesArray.append(\"B\")\n        case 11.0...13.0:\n            gradesArray.append(\"\
    B-\")\n        case 13.0...15.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 15.0...17.0:\n            gradesArray.append(\"C\")\n        case 17.0...19.0:\n\
    \            gradesArray.append(\"C-\")\n        case 19.0...21.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 21.0...23.0:\n            gradesArray.append(\"\
    D\")\n        case 23.0...25.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 25.0...27.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"F\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp55ltk0oq/tmp55ltk0oq.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b2290c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b1f87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65b1f87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65b1f867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55ltk0oq                        0x000055752c86d826 <unavailable> + 6182

    5    libc.so.6                          0x00002b65b247c460 __libc_start_main +
    245

    6    tmp55ltk0oq                        0x000055752c86d349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted(by:\
    \ <)\n    \n    var gradesArrayCopy = gradesArray\n    \n    var gradesArrayCopy2\
    \ = gradesArray\n    \n    var gradesArrayCopy3 = gradesArray\n    \n    var gradesArrayCopy4\
    \ = gradesArray\n    \n    var gradesArrayCopy5 = gradesArray\n    \n    var gradesArrayCopy6\
    \ = gradesArray\n    \n    var gradesArrayCopy7 = gradesArray\n    \n    var gradesArrayCopy8\
    \ = gradesArray\n    \n    var gradesArrayCopy9 = gradesArray\n    \n    var gradesArrayCopy10\
    \ = gradesArray\n    \n    var gradesArrayCopy11 = gradesArray\n    \n    var\
    \ gradesArrayCopy12 = gradesArray\n    \n    var gradesArrayCopy13 = gradesArray\n\
    \    \n    var gradesArrayCopy14 = gradesArray\n    \n    var gradesArrayCopy15\
    \ = gradesArray\n    \n    var gradesArrayCopy16 = gradesArray\n    \n    var\
    \ gradesArrayCopy17 = gradesArray\n    \n    var gradesArrayCopy18 = gradesArray\n\
    \    \n    var gradesArrayCopy19 = gradesArray\n    \n    var gradesArrayCopy20\
    \ = gradesArray\n    \n    var gradesArrayCopy21 = gradesArray\n    \n    var\
    \ gradesArrayCopy22 = gradesArray\n    \n    var gradesArrayCopy23 = gradesArray\n\
    \    \n    var gradesArrayCopy24 = gradesArray\n    \n    var gradesArrayCopy25\
    \ = gradesArray\n    \n    var gradesArrayCopy26 = gradesArray\n    \n    var\
    \ gradesArrayCopy27 = gradesArray\n    \n    var gradesArrayCopy28 = gradesArray\n\
    \    \n    var gradesArrayCopy29 = gradesArray\n    \n    var gradesArrayCopy30\
    \ = gradesArray\n    \n    var gradesArrayCopy31 = gradesArray\n    \n    var\
    \ gradesArrayCopy32 = gradesArray\n    \n    var gradesArrayCopy33 = gradesArray\n\
    \    \n    var gradesArrayCopy34 = gradesArray\n    \n    var gradesArrayCopy35\
    \ = gradesArray\n    \n    var gradesArrayCopy36 = gradesArray\n    \n    var\
    \ gradesArrayCopy37 = gradesArray\n    \n    var gradesArrayCopy38 = gradesArray\n\
    \    \n    var gradesArrayCopy39 = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7acu8qpl.swift:102:28: error: expected initial value after '='\n\
    \    var gradesArrayCopy39 = \n                           ^\n"
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 0...3.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.0...6.0:\n            gradesArray.append(\"A\")\n      \
    \  case 6.0...9.0:\n            gradesArray.append(\"A-\")\n        case 9.0...12.0:\n\
    \            gradesArray.append(\"B+\")\n        case 12.0...15.0:\n         \
    \   gradesArray.append(\"B\")\n        case 15.0...18.0:\n            gradesArray.append(\"\
    B-\")\n        case 18.0...21.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 21.0...24.0:\n            gradesArray.append(\"C\")\n        case 24.0...27.0:\n\
    \            gradesArray.append(\"C-\")\n        case 27.0...30.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 30.0...33.0:\n            gradesArray.append(\"\
    D\")\n        case 33.0...36.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 36.0...39.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptzsaxvqm/tmptzsaxvqm.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac15ee40c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac15eb37b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac15eb37988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac15eb367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptzsaxvqm                        0x000056388159f8d6 <unavailable> + 6358

    5    libc.so.6                          0x00002ac15f02c460 __libc_start_main +
    245

    6    tmptzsaxvqm                        0x000056388159f3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade > 3.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade > 2.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade > 2.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade > 2.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ > 1.7 {\n            letterGrades.append(\"B\")\n        } else if grade > 1.3\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade > 1.0 {\n\
    \            letterGrades.append(\"C+\")\n        } else if grade > 0.7 {\n  \
    \          letterGrades.append(\"C\")\n        } else if grade > 0.3 {\n     \
    \       letterGrades.append(\"C-\")\n        } else if grade > 0.0 {\n       \
    \     letterGrades.append(\"D+\")\n        } else if grade > -0.3 {\n        \
    \    letterGrades.append(\"D\")\n        } else if grade > -0.7 {\n          \
    \  letterGrades.append(\"D-\")\n        } else if grade > -1.0 {\n           \
    \ letterGrades.append(\"E\")\n        } else {\n            letterGrades.append(\"\
    F\")\n        }\n    }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpk7t2zk7o/tmpk7t2zk7o.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5795568c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b579525fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b579525f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b579525e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7t2zk7o                        0x000055c15ee497f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b5795754460 __libc_start_main +
    245

    6    tmpk7t2zk7o                        0x000055c15ee49319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        let letterGrade = grade\n        switch letterGrade {\n        case 4.0:\n\
    \            gradesArray.append(\"A+\")\n        case 3.7:\n            gradesArray.append(\"\
    A\")\n        case 3.3:\n            gradesArray.append(\"A-\")\n        case\
    \ 3.0:\n            gradesArray.append(\"B+\")\n        case 2.7:\n          \
    \  gradesArray.append(\"B\")\n        case 2.3:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7:\n            gradesArray.append(\"C\")\n        case 1.3:\n           \
    \ gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7:\n            gradesArray.append(\"D\")\n        case\
    \ 0.0:\n            gradesArray.append(\"D-\")\n        case 0.0:\n          \
    \  gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpvlaurs2n/tmpvlaurs2n.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98a6166c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98a5e5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98a5e5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98a5e5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvlaurs2n                        0x000055ea16b4f7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b98a6352460 __libc_start_main +
    245

    6    tmpvlaurs2n                        0x000055ea16b4f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = gradesArray.count\n    var letterGrades = [String]()\n    var letterGrade\
    \ = \"\"\n    var gpa = gradesArray[0]\n    var letterGradeIndex = 0\n    var\
    \ letterGradeIndexCount = 0\n    var letterGradeIndexCountMax = gradesArrayCount\
    \ - 1\n    var letterGradeIndexCountMin = 0\n    var letterGradeIndexCountMaxMin\
    \ = gradesArrayCount - 1\n    var letterGradeIndexCountMinMax = gradesArrayCount\
    \ - 1\n    var letterGradeIndexCountMinMaxMin = gradesArrayCount - 1\n    var\
    \ letterGradeIndexCountMinMaxMinMax = gradesArrayCount - 1\n    var letterGradeIndexCountMinMaxMinMaxMin\
    \ = gradesArrayCount - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMax = gradesArrayCount\
    \ - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMin = gradesArrayCount -\
    \ 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMax = gradesArrayCount\
    \ - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMax = gradesArrayCount\
    \ - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMin = gradesArrayCount\
    \ - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMax = gradesArrayCount\
    \ - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMin = gradesArrayCount\
    \ - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = gradesArrayCount\
    \ - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin =\
    \ gradesArrayCount - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = gradesArrayCount - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = gradesArrayCount - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = gradesArrayCount - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = gradesArrayCount - 1\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = gradesArrayCount - 1\n    var letterGradeIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmps8mzyajd.swift:40:9: error: invalid redeclaration of 'letterGradeIndexCountMinMaxMinMaxMinMaxMinMax'\n\
    \    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMax = gradesArrayCount - 1\n\
    \        ^\n/tmp/tmps8mzyajd.swift:39:9: note: 'letterGradeIndexCountMinMaxMinMaxMinMaxMinMax'\
    \ previously declared here\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMax\
    \ = gradesArrayCount - 1\n        ^\n/tmp/tmps8mzyajd.swift:49:9: error: invalid\
    \ redeclaration of 'letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax'\n\
    \    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = gradesArrayCount - 1\n        ^\n/tmp/tmps8mzyajd.swift:48:9: note: 'letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax'\
    \ previously declared here\n    var letterGradeIndexCountMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = gradesArrayCount - 1\n        ^\n/tmp/tmps8mzyajd.swift:51:9: error: type\
    \ annotation missing in pattern\n    var letterGradeIndex\n        ^\n"
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    var gpa = grades.reduce(0,\
    \ combine: +)\n    var letterGrade = String()\n    if gpa < 4.0 {\n        letterGrade\
    \ = \"A+\"\n    } else if gpa < 3.7 {\n        letterGrade = \"A\"\n    } else\
    \ if gpa < 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa < 3.0 {\n  \
    \      letterGrade = \"B+\"\n    } else if gpa < 2.7 {\n        letterGrade =\
    \ \"B\"\n    } else if gpa < 2.3 {\n        letterGrade = \"B-\"\n    } else if\
    \ gpa < 2.0 {\n        letterGrade = \"C+\"\n    } else if gpa < 1.7 {\n     \
    \   letterGrade = \"C\"\n    } else if gpa < 1.3 {\n        letterGrade = \"C-\"\
    \n    } else if gpa < 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa <\
    \ 0.7 {\n        letterGrade = \"D\"\n    } else if gpa < 0.0 {\n        letterGrade\
    \ = \"D-\"\n    } else {\n        letterGrade = \"E\"\n    }\n    letterGrades.append(letterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcob0klno.swift:24:28: error: extraneous argument label 'combine:'\
    \ in call\n    var gpa = grades.reduce(0, combine: +)\n                      \
    \     ^   ~~~~~~~~~\n                               \n"
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGrade = 0.0\n    var currentLetterGrade\
    \ = \"\"\n    var currentLetterGradeIndex = 0\n    for currentGrade in gradesArray\
    \ {\n        if currentGrade > 3.0 {\n            letterGrades.append(currentLetterGrade)\n\
    \            currentLetterGrade = \"\"\n            currentLetterGradeIndex =\
    \ 0\n        }\n        if currentGrade > 2.7 {\n            currentLetterGrade\
    \ = \"B\"\n            currentLetterGradeIndex = 1\n        }\n        if currentGrade\
    \ > 2.3 {\n            currentLetterGrade = \"B-\"\n            currentLetterGradeIndex\
    \ = 2\n        }\n        if currentGrade > 2.0 {\n            currentLetterGrade\
    \ = \"C+\"\n            currentLetterGradeIndex = 3\n        }\n        if currentGrade\
    \ > 1.7 {\n            currentLetterGrade = \"C\"\n            currentLetterGradeIndex\
    \ = 4\n        }\n        if currentGrade > 1.3 {\n            currentLetterGrade\
    \ = \"C-\"\n            currentLetterGradeIndex = 5\n        }\n        if currentGrade\
    \ > 1.0 {\n            currentLetterGrade = \"D+\"\n            currentLetterGradeIndex\
    \ = 6\n        }\n        if currentGrade > 0.7 {\n            currentLetterGrade\
    \ = \"D\"\n            currentLetterGradeIndex = 7\n        }\n        if currentGrade\
    \ > 0.0 {\n            currentLetterGrade = \"D-\"\n            currentLetterGradeIndex\
    \ = 8\n        }\n        if currentGrade > 0.0 {\n            currentLetterGrade\
    \ = \"E\"\n            currentLetterGradeIndex = 9\n        }\n        currentLetterGrade\
    \ += String(currentLetterGradeIndex)\n    }\n    letterGrades.append(currentLetterGrade)\n\
    \    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpqmozjigz/tmpqmozjigz.swift:90: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae47e721c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae47e418b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae47e418988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae47e4177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmozjigz                        0x0000562b677ee9b6 <unavailable> + 6582

    5    libc.so.6                          0x00002ae47e90d460 __libc_start_main +
    245

    6    tmpqmozjigz                        0x0000562b677ee4d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var gradesArrayCopy = gradesArray\n\
    \    var letterGrades = [String]()\n    \n    for i in 0..<gradesArray.count {\n\
    \        if gradesArray[i] > 3.0 {\n            gradesArrayCopy[i] = gradesArray[i]\
    \ - 3.0\n        }\n    }\n    \n    for i in 0..<gradesArray.count {\n      \
    \  if gradesArray[i] < 3.0 {\n            gradesArrayCopy[i] = gradesArray[i]\
    \ + 3.0\n        }\n    }\n    \n    for i in 0..<gradesArray.count {\n      \
    \  if gradesArrayCopy[i] > 2.7 {\n            letterGrades.append(\"B+\")\n  \
    \      }\n        else if gradesArrayCopy[i] > 2.3 {\n            letterGrades.append(\"\
    B-\")\n        }\n        else if gradesArrayCopy[i] > 2.0 {\n            letterGrades.append(\"\
    C+\")\n        }\n        else if gradesArrayCopy[i] > 1.7 {\n            letterGrades.append(\"\
    C\")\n        }\n        else if gradesArrayCopy[i] > 1.3 {\n            letterGrades.append(\"\
    C-\")\n        }\n        else if gradesArrayCopy[i] > 1.0 {\n            letterGrades.append(\"\
    D+\")\n        }\n        else if gradesArrayCopy[i] > 0.7 {\n            letterGrades.append(\"\
    D\")\n        }\n        else if gradesArrayCopy[i] > 0.0 {\n            letterGrades.append(\"\
    D-\")\n        }\n        else if gradesArrayCopy[i] < 0.0 {\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp3iwi_0_s/tmp3iwi_0_s.swift:85: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9085170c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9084e67b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9084e67988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9084e667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3iwi_0_s                        0x0000564a34171916 <unavailable> + 6422

    5    libc.so.6                          0x00002b908535c460 __libc_start_main +
    245

    6    tmp3iwi_0_s                        0x0000564a34171439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach { grade\
    \ in\n        let letterGrade = letterGrade(grade)\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1xki06kx.swift:25:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(grade)\n     \
    \                     ^\n/tmp/tmp1xki06kx.swift:25:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(grade)\n            ^\n"
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gradesArrayIndex =\
    \ 0\n    var gradesArrayIndex2 = 0\n    var gradesArrayIndex3 = 0\n    var gradesArrayIndex4\
    \ = 0\n    var gradesArrayIndex5 = 0\n    var gradesArrayIndex6 = 0\n    var gradesArrayIndex7\
    \ = 0\n    var gradesArrayIndex8 = 0\n    var gradesArrayIndex9 = 0\n    var gradesArrayIndex10\
    \ = 0\n    var gradesArrayIndex11 = 0\n    var gradesArrayIndex12 = 0\n    var\
    \ gradesArrayIndex13 = 0\n    var gradesArrayIndex14 = 0\n    var gradesArrayIndex15\
    \ = 0\n    var gradesArrayIndex16 = 0\n    var gradesArrayIndex17 = 0\n    var\
    \ gradesArrayIndex18 = 0\n    var gradesArrayIndex19 = 0\n    var gradesArrayIndex20\
    \ = 0\n    var gradesArrayIndex21 = 0\n    var gradesArrayIndex22 = 0\n    var\
    \ gradesArrayIndex23 = 0\n    var gradesArrayIndex24 = 0\n    var gradesArrayIndex25\
    \ = 0\n    var gradesArrayIndex26 = 0\n    var gradesArrayIndex27 = 0\n    var\
    \ gradesArrayIndex28 = 0\n    var gradesArrayIndex29 = 0\n    var gradesArrayIndex30\
    \ = 0\n    var gradesArrayIndex31 = 0\n    var gradesArrayIndex32 = 0\n    var\
    \ gradesArrayIndex33 = 0\n    var gradesArrayIndex34 = 0\n    var gradesArrayIndex35\
    \ = 0\n    var gradesArrayIndex36 = 0\n    var gradesArrayIndex37 = 0\n    var\
    \ gradesArrayIndex38 = 0\n    var gradesArrayIndex39 = 0\n    var gradesArrayIndex40\
    \ = 0\n    var gradesArrayIndex41 = 0\n    var gradesArrayIndex42 = 0\n    var\
    \ gradesArrayIndex43 = 0\n    var gradesArrayIndex44 = 0\n    var gradesArrayIndex45\
    \ = 0\n    var gradesArrayIndex46 = 0\n    var gradesArrayIndex47 = 0\n    var\
    \ gradesArrayIndex48 = 0\n    var gradesArrayIndex49 = 0\n    var gradesArrayIndex50\
    \ = 0\n    var gradesArrayIndex51 = 0\n    var gradesArrayIndex52 = 0\n    var\
    \ gradesArrayIndex53 = 0\n    var gradesArrayIndex54 = 0\n    var gradesArrayIndex55\
    \ = 0\n    var gradesArrayIndex56 = 0\n    var gradesArrayIndex57 = 0\n    var\
    \ gradesArrayIndex58 = 0\n    var gradesArrayIndex59 = 0\n    var gradesArrayIndex60\
    \ = 0\n    var gradesArrayIndex61 = 0\n    var gradesArrayIndex62 = 0\n    var\
    \ gradesArrayIndex63 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp4q95c25m.swift:23:9: warning: initialization of variable 'gradesArray'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArray = [String]()\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:24:9:\
    \ warning: initialization of variable 'gradesArrayIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:25:9: warning: initialization\
    \ of variable 'gradesArrayIndex2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex2 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4q95c25m.swift:26:9: warning: initialization of variable 'gradesArrayIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex3 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:27:9:\
    \ warning: initialization of variable 'gradesArrayIndex4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex4 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:28:9: warning: initialization\
    \ of variable 'gradesArrayIndex5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4q95c25m.swift:29:9: warning: initialization of variable 'gradesArrayIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var gradesArrayIndex6 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:30:9:\
    \ warning: initialization of variable 'gradesArrayIndex7' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var gradesArrayIndex7 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4q95c25m.swift:31:9: warning: initialization\
    \ of variable 'gradesArrayIndex8' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var gradesArrayIndex8 = 0\n    ~~~~^~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp4q95c25m.swift:32:9: warning: initialization of variable 'gradesArrayInd"
  stdout: ''
  timestamp: 1660014897
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    var gpa: Double = 0.0\n\
    \    for grade in grades {\n        gpa += grade\n    }\n    gpa /= Double(grades.count)\n\
    \    gradesArray.append(String(format: \"%.2f\", gpa))\n    if gpa < 4.0 {\n \
    \       gradesArray.append(\"A+\")\n    } else if gpa < 3.7 {\n        gradesArray.append(\"\
    A\")\n    } else if gpa < 3.3 {\n        gradesArray.append(\"A-\")\n    } else\
    \ if gpa < 3.0 {\n        gradesArray.append(\"B+\")\n    } else if gpa < 2.7\
    \ {\n        gradesArray.append(\"B\")\n    } else if gpa < 2.3 {\n        gradesArray.append(\"\
    B-\")\n    } else if gpa < 2.0 {\n        gradesArray.append(\"C+\")\n    } else\
    \ if gpa < 1.7 {\n        gradesArray.append(\"C\")\n    } else if gpa < 1.3 {\n\
    \        gradesArray.append(\"C-\")\n    } else if gpa < 1.0 {\n        gradesArray.append(\"\
    D+\")\n    } else if gpa < 0.7 {\n        gradesArray.append(\"D\")\n    } else\
    \ if gpa < 0.0 {\n        gradesArray.append(\"D-\")\n    } else {\n        gradesArray.append(\"\
    E\")\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmphjzge85i.swift:29:24: error: no exact matches in call to initializer\
    \ \n    gradesArray.append(String(format: \"%.2f\", gpa))\n                  \
    \     ^\nSwift.String:4:23: note: candidate '(String) -> String' requires 1 argument,\
    \ but 2 were provided\n    @inlinable public init<T>(_ value: T) where T : LosslessStringConvertible\n\
    \                      ^\n/tmp/tmphjzge85i.swift:29:24: note: candidate has partially\
    \ matching parameter list (repeating: String, count: Int)\n    gradesArray.append(String(format:\
    \ \"%.2f\", gpa))\n                       ^\nSwift.String:3:12: note: candidate\
    \ '(String) -> String' requires 1 argument, but 2 were provided\n    public init<S>(_\
    \ other: S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n"
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    \n    var gradesArray = [String]()\n    \n    for grade in\
    \ grades {\n        \n        if grade >= 4.0 {\n            gradesArray.append(\"\
    A+\")\n        } else if grade >= 3.7 {\n            gradesArray.append(\"A\"\
    )\n        } else if grade >= 3.3 {\n            gradesArray.append(\"A-\")\n\
    \        } else if grade >= 3.0 {\n            gradesArray.append(\"B+\")\n  \
    \      } else if grade >= 2.7 {\n            gradesArray.append(\"B\")\n     \
    \   } else if grade >= 2.3 {\n            gradesArray.append(\"B-\")\n       \
    \ } else if grade >= 2.0 {\n            gradesArray.append(\"C+\")\n        }\
    \ else if grade >= 1.7 {\n            gradesArray.append(\"C\")\n        } else\
    \ if grade >= 1.3 {\n            gradesArray.append(\"C-\")\n        } else if\
    \ grade >= 1.0 {\n            gradesArray.append(\"D+\")\n        } else if grade\
    \ >= 0.7 {\n            gradesArray.append(\"D\")\n        } else if grade >=\
    \ 0.0 {\n            gradesArray.append(\"D-\")\n        } else {\n          \
    \  gradesArray.append(\"E\")\n        }\n    }\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptmdg05q_/tmptmdg05q_.swift:73: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba8f9ff9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba8f9cf0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba8f9cf0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba8f9cef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptmdg05q_                        0x00005625702897f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba8fa1e5460 __libc_start_main +
    245

    6    tmptmdg05q_                        0x0000562570289319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGrade: Double = 0.0\n    var\
    \ currentLetterGrade: String = \"\"\n    var currentLetterGradeIndex: Int = 0\n\
    \    var currentLetterGradeIndex2: Int = 0\n    var currentLetterGradeIndex3:\
    \ Int = 0\n    var currentLetterGradeIndex4: Int = 0\n    var currentLetterGradeIndex5:\
    \ Int = 0\n    var currentLetterGradeIndex6: Int = 0\n    var currentLetterGradeIndex7:\
    \ Int = 0\n    var currentLetterGradeIndex8: Int = 0\n    var currentLetterGradeIndex9:\
    \ Int = 0\n    var currentLetterGradeIndex10: Int = 0\n    var currentLetterGradeIndex11:\
    \ Int = 0\n    var currentLetterGradeIndex12: Int = 0\n    var currentLetterGradeIndex13:\
    \ Int = 0\n    var currentLetterGradeIndex14: Int = 0\n    var currentLetterGradeIndex15:\
    \ Int = 0\n    var currentLetterGradeIndex16: Int = 0\n    var currentLetterGradeIndex17:\
    \ Int = 0\n    var currentLetterGradeIndex18: Int = 0\n    var currentLetterGradeIndex19:\
    \ Int = 0\n    var currentLetterGradeIndex20: Int = 0\n    var currentLetterGradeIndex21:\
    \ Int = 0\n    var currentLetterGradeIndex22: Int = 0\n    var currentLetterGradeIndex23:\
    \ Int = 0\n    var currentLetterGradeIndex24: Int = 0\n    var currentLetterGradeIndex25:\
    \ Int = 0\n    var currentLetterGradeIndex26: Int = 0\n    var currentLetterGradeIndex27:\
    \ Int = 0\n    var currentLetterGradeIndex28: Int = 0\n    var currentLetterGradeIndex29:\
    \ Int = 0\n    var currentLetterGradeIndex30: Int = 0\n    var currentLetterGradeIndex31:\
    \ Int = 0\n    var currentLetterGradeIndex32: Int = 0\n    var currentLetterGradeIndex33:\
    \ Int = 0\n    var currentLetterGradeIndex34: Int = 0\n    var currentLetterGradeIndex35:\
    \ Int = 0\n    var currentLetterGradeIndex36: Int = 0\n    var currentLetterGradeIndex37:\
    \ Int = 0\n    var currentLetterGradeIndex38: Int = 0\n    var currentLetterGradeIndex39:\
    \ Int = 0\n    var currentLetterGradeIndex40: Int = 0\n    var currentLetterGradeIndex41:\
    \ Int = 0\n    var currentLetterGradeIndex42: Int = 0\n    var currentLetterGradeIndex43:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpgz0czj2i.swift:25:9: warning: initialization of variable 'letterGrades'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var letterGrades = [String]()\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpgz0czj2i.swift:26:9:\
    \ warning: variable 'currentGrade' was never used; consider replacing with '_'\
    \ or removing it\n    var currentGrade: Double = 0.0\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmpgz0czj2i.swift:27:9: warning: variable 'currentLetterGrade'\
    \ was never used; consider replacing with '_' or removing it\n    var currentLetterGrade:\
    \ String = \"\"\n        ^~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpgz0czj2i.swift:28:9:\
    \ warning: variable 'currentLetterGradeIndex' was never used; consider replacing\
    \ with '_' or removing it\n    var currentLetterGradeIndex: Int = 0\n        ^~~~~~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpgz0czj2i.swift:29:9: warning: variable 'currentLetterGradeIndex2'\
    \ was never used; consider replacing with '_' or removing it\n    var currentLetterGradeIndex2:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpgz0czj2i.swift:30:9:\
    \ warning: variable 'currentLetterGradeIndex3' was never used; consider replacing\
    \ with '_' or removing it\n    var currentLetterGradeIndex3: Int = 0\n       \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpgz0czj2i.swift:31:9: warning: variable\
    \ 'currentLetterGradeIndex4' was never used; consider replacing with '_' or removing\
    \ it\n    var currentLetterGradeIndex4: Int = 0\n        ^~~~~~~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpgz0czj2i.swift:32:9: warning: variable 'currentLetterGradeIndex5'\
    \ was never used; consider replacing with '_' or removing it\n    var currentLetterGradeIndex5:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpgz0czj2i.swift:33:9:\
    \ warning: variable 'currentLetterGradeIndex6' was never used; consider replacing\
    \ with '_' or removing it\n    var currentLetterGradeIndex6: Int = 0\n       \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpgz0czj2i.swift:34:9: warning: variable\
    \ 'currentLetterGradeIndex7' was never used; consider replacing with '_' or removing\
    \ it\n    v"
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"\"\n    var currentGPA = gradesArray[0]\n    var\
    \ currentGPAIndex = 0\n    var currentGPAIndex2 = 0\n    var currentGPAIndex3\
    \ = 0\n    var currentGPAIndex4 = 0\n    var currentGPAIndex5 = 0\n    var currentGPAIndex6\
    \ = 0\n    var currentGPAIndex7 = 0\n    var currentGPAIndex8 = 0\n    var currentGPAIndex9\
    \ = 0\n    var currentGPAIndex10 = 0\n    var currentGPAIndex11 = 0\n    var currentGPAIndex12\
    \ = 0\n    var currentGPAIndex13 = 0\n    var currentGPAIndex14 = 0\n    var currentGPAIndex15\
    \ = 0\n    var currentGPAIndex16 = 0\n    var currentGPAIndex17 = 0\n    var currentGPAIndex18\
    \ = 0\n    var currentGPAIndex19 = 0\n    var currentGPAIndex20 = 0\n    var currentGPAIndex21\
    \ = 0\n    var currentGPAIndex22 = 0\n    var currentGPAIndex23 = 0\n    var currentGPAIndex24\
    \ = 0\n    var currentGPAIndex25 = 0\n    var currentGPAIndex26 = 0\n    var currentGPAIndex27\
    \ = 0\n    var currentGPAIndex28 = 0\n    var currentGPAIndex29 = 0\n    var currentGPAIndex30\
    \ = 0\n    var currentGPAIndex31 = 0\n    var currentGPAIndex32 = 0\n    var currentGPAIndex33\
    \ = 0\n    var currentGPAIndex34 = 0\n    var currentGPAIndex35 = 0\n    var currentGPAIndex36\
    \ = 0\n    var currentGPAIndex37 = 0\n    var currentGPAIndex38 = 0\n    var currentGPAIndex39\
    \ = 0\n    var currentGPAIndex40 = 0\n    var currentGPAIndex41 = 0\n    var currentGPAIndex42\
    \ = 0\n    var currentGPAIndex43 = 0\n    var currentGPAIndex44 = 0\n    var currentGPAIndex45\
    \ = 0\n    var currentGPAIndex46 = 0\n    var currentGPAIndex47 = 0\n    var currentGPAIndex48\
    \ = 0\n    var currentGPAIndex49 = 0\n    var currentGPAIndex50 = 0\n    var currentGPAIndex51\
    \ = 0\n    var currentGPAIndex52 = 0\n    var currentGPAIndex53 = 0\n    var currentGPAIndex54\
    \ = 0\n    var currentGPAIndex55 = 0\n    var currentGPAIndex56 = 0\n    var currentGPAIndex57\
    \ = 0\n    var currentGP\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcidkb2px.swift:86:9: error: type annotation missing in pattern\n\
    \    var currentGP\n        ^\n"
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.0:\n            letterGrades.append(\"\
    E\")\n        default:\n            letterGrades.append(\"F\")\n        }\n  \
    \  }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2]) == [\"\
    D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp7frx8d3m/tmp7frx8d3m.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bbd7efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bbd4e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bbd4e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bbd4e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7frx8d3m                        0x0000564fcc8907f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b9bbd9db460 __libc_start_main +
    245

    6    tmp7frx8d3m                        0x0000564fcc890319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b61cc16bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61cbe62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b61cbe62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b61cbe6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b61cbe61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptnx6flla                        0x0000556a3800d337 <unavailable> + 9015

    6    tmptnx6flla                        0x0000556a3800c73d <unavailable> + 5949

    7    libc.so.6                          0x00002b61cc357460 __libc_start_main +
    245

    8    tmptnx6flla                        0x0000556a3800c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    var letterGrades = [String]()\n\
    \    \n    if gradesArray.count > 0 {\n        let average = gradesArray.reduce(0,\
    \ combine: +)/ gradesArray.count\n        \n        if average >= 3.0 {\n    \
    \        letterGrades.append(\"A+\")\n        }\n        else if average >= 3.0\
    \ && average < 3.7 {\n            letterGrades.append(\"A\")\n        }\n    \
    \    else if average >= 3.7 && average < 4.0 {\n            letterGrades.append(\"\
    A-\")\n        }\n        else if average >= 4.0 && average < 4.3 {\n        \
    \    letterGrades.append(\"B+\")\n        }\n        else if average >= 4.3 &&\
    \ average < 4.6 {\n            letterGrades.append(\"B\")\n        }\n       \
    \ else if average >= 4.6 && average < 4.9 {\n            letterGrades.append(\"\
    B-\")\n        }\n        else if average >= 4.9 && average < 5.2 {\n        \
    \    letterGrades.append(\"C+\")\n        }\n        else if average >= 5.2 &&\
    \ average < 5.5 {\n            letterGrades.append(\"C\")\n        }\n       \
    \ else if average >= 5.5 && average < 5.8 {\n            letterGrades.append(\"\
    C-\")\n        }\n        else if average >= 5.8 && average < 6.0 {\n        \
    \    letterGrades.append(\"D+\")\n        }\n        else if average >= 6.0 &&\
    \ average < 6.3 {\n            letterGrades.append(\"D\")\n        }\n       \
    \ else if average >= 6.3 && average < 6.6 {\n            letterGrades.append(\"\
    D-\")\n        }\n        else if average >= 6.6 && average < 6.9 {\n        \
    \    letterGrades.append(\"E\")\n        }\n        else if average < 6.9 {\n\
    \            letterGrades.append(\"F\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpe7bqpmgj.swift:27:57: error: consecutive statements on a line must\
    \ be separated by ';'\n        let average = gradesArray.reduce(0, combine: +)/\
    \ gradesArray.count\n                                                        ^\n\
    \                                                        ;\n/tmp/tmpe7bqpmgj.swift:27:56:\
    \ error: '/' is not a postfix unary operator\n        let average = gradesArray.reduce(0,\
    \ combine: +)/ gradesArray.count\n                                           \
    \            ^\n/tmp/tmpe7bqpmgj.swift:27:41: error: extraneous argument label\
    \ 'combine:' in call\n        let average = gradesArray.reduce(0, combine: +)/\
    \ gradesArray.count\n                                        ^   ~~~~~~~~~\n \
    \                                           \n/tmp/tmpe7bqpmgj.swift:27:70: warning:\
    \ expression of type 'Int' is unused\n        let average = gradesArray.reduce(0,\
    \ combine: +)/ gradesArray.count\n                                           \
    \              ~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n \
    \   var letterGrade = \"\"\n    \n    if gpa > 4.0 {\n        letterGrade = \"\
    A+\"\n    } else if gpa > 3.7 {\n        letterGrade = \"A\"\n    } else if gpa\
    \ > 3.3 {\n        letterGrade = \"A-\"\n    } else if gpa > 3.0 {\n        letterGrade\
    \ = \"B+\"\n    } else if gpa > 2.7 {\n        letterGrade = \"B\"\n    } else\
    \ if gpa > 2.3 {\n        letterGrade = \"B-\"\n    } else if gpa > 2.0 {\n  \
    \      letterGrade = \"C+\"\n    } else if gpa > 1.7 {\n        letterGrade =\
    \ \"C\"\n    } else if gpa > 1.3 {\n        letterGrade = \"C-\"\n    } else if\
    \ gpa > 1.0 {\n        letterGrade = \"D+\"\n    } else if gpa > 0.7 {\n     \
    \   letterGrade = \"D\"\n    } else if gpa > 0.0 {\n        letterGrade = \"D-\"\
    \n    } else {\n        letterGrade = \"E\"\n    }\n    \n    for grade in grades\
    \ {\n        gradesArray.append(letterGrade)\n    }\n    \n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp84ldu21q/tmp84ldu21q.swift:75: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54eb61ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54eb311b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54eb311988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54eb3107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84ldu21q                        0x000055c0af1f3856 <unavailable> + 6230

    5    libc.so.6                          0x00002b54eb806460 __libc_start_main +
    245

    6    tmp84ldu21q                        0x000055c0af1f3379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7...3.3:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3...3.0:\n            letterGrades.append(\"A-\")\n        case 3.0:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7...2.3:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3...2.0:\n            letterGrades.append(\"\
    B-\")\n        case 2.0:\n            letterGrades.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            letterGrades.append(\"C\")\n        case 1.3...1.0:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0:\n            letterGrades.append(\"\
    D+\")\n        case 0.7...1.0:\n            letterGrades.append(\"D\")\n     \
    \   case 0.0:\n            letterGrades.append(\"D-\")\n        case 0...0.1:\n\
    \            letterGrades.append(\"E\")\n        default:\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b235d3b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235d0a9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b235d0a9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b235d0a913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b235d0a8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnu0ih82p                        0x00005562346a937c <unavailable> + 9084

    6    tmpnu0ih82p                        0x00005562346a878d <unavailable> + 6029

    7    libc.so.6                          0x00002b235d59e460 __libc_start_main +
    245

    8    tmpnu0ih82p                        0x00005562346a8449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0.0:\n    \
    \        gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b81cbd29c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81cba20561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b81cba20286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b81cba2013c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b81cba1fbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxxk04070                        0x0000556f740f137c <unavailable> + 9084

    6    tmpxxk04070                        0x0000556f740f078d <unavailable> + 6029

    7    libc.so.6                          0x00002b81cbf15460 __libc_start_main +
    245

    8    tmpxxk04070                        0x0000556f740f0449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014897
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7:\n            gradesArray.append(\"A\")\n        case\
    \ 3.3:\n            gradesArray.append(\"A-\")\n        case 3.0:\n          \
    \  gradesArray.append(\"B+\")\n        case 2.7:\n            gradesArray.append(\"\
    B\")\n        case 2.3:\n            gradesArray.append(\"B-\")\n        case\
    \ 2.0:\n            gradesArray.append(\"C+\")\n        case 1.7:\n          \
    \  gradesArray.append(\"C\")\n        case 1.3:\n            gradesArray.append(\"\
    C-\")\n        case 1.0:\n            gradesArray.append(\"D+\")\n        case\
    \ 0.7:\n            gradesArray.append(\"D\")\n        case 0.0:\n           \
    \ gradesArray.append(\"D-\")\n        case 0.0:\n            gradesArray.append(\"\
    E\")\n        default:\n            break\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpd3_0z2yn/tmpd3_0z2yn.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f2d191c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f2ce88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f2ce88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f2ce877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd3_0z2yn                        0x0000556b95c9f7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002b2f2d37d460 __libc_start_main +
    245

    6    tmpd3_0z2yn                        0x0000556b95c9f319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.map { String(format: \"%.2f\", $0)\
    \ }\n    gradesArray = gradesArray.reversed()\n    gradesArray = gradesArray.map\
    \ { String($0) }\n    gradesArray = gradesArray.reversed()\n    gradesArray =\
    \ gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n \
    \   gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n    gradesArray = gradesArray.reversed()\n\
    \    gradesArray = gradesArray.map { String($0) }\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpcnr4atfy.swift:23:36: error: no exact matches in call to initializer\
    \ \n    var gradesArray = grades.map { String(format: \"%.2f\", $0) }\n      \
    \                             ^\nSwift.String:4:23: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    @inlinable public init<T>(_\
    \ value: T) where T : LosslessStringConvertible\n                      ^\n/tmp/tmpcnr4atfy.swift:23:36:\
    \ note: candidate has partially matching parameter list (repeating: String, count:\
    \ Int)\n    var gradesArray = grades.map { String(format: \"%.2f\", $0) }\n  \
    \                                 ^\nSwift.String:3:12: note: candidate '(String)\
    \ -> String' requires 1 argument, but 2 were provided\n    public init<S>(_ other:\
    \ S) where S : LosslessStringConvertible, S : Sequence, S.Element == Character\n\
    \           ^\nSwift.String:4:12: note: candidate '(String) -> String' requires\
    \ 1 argument, but 2 were provided\n    public init<S>(_ characters: S) where S\
    \ : Sequence, S.Element == Character\n           ^\nSwift.RangeReplaceableCollection:3:23:\
    \ note: candidate '(String) -> String' requires 1 argument, but 2 were provided\n\
    \    @inlinable public init<S>(_ elements: S) where S : Sequence, Self.Element\
    \ == S.Element\n                      ^\n"
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        let letterGrade = letterGrade(grade)\n        gradesArray.append(letterGrade)\n\
    \    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp09d74hqn.swift:25:27: error: use of local variable 'letterGrade'\
    \ before its declaration\n        let letterGrade = letterGrade(grade)\n     \
    \                     ^\n/tmp/tmp09d74hqn.swift:25:13: note: 'letterGrade' declared\
    \ here\n        let letterGrade = letterGrade(grade)\n            ^\n"
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray: [String] = []\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b61cc16bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61cbe62561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b61cbe62286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b61cbe6213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b61cbe61bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmptnx6flla                        0x0000556a3800d337 <unavailable> + 9015

    6    tmptnx6flla                        0x0000556a3800c73d <unavailable> + 5949

    7    libc.so.6                          0x00002b61cc357460 __libc_start_main +
    245

    8    tmptnx6flla                        0x0000556a3800c3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        if grade > 4.0 {\n            letterGrades.append(\"A+\")\n        }\
    \ else if grade > 3.7 {\n            letterGrades.append(\"A\")\n        } else\
    \ if grade > 3.3 {\n            letterGrades.append(\"A-\")\n        } else if\
    \ grade > 3.0 {\n            letterGrades.append(\"B+\")\n        } else if grade\
    \ > 2.7 {\n            letterGrades.append(\"B\")\n        } else if grade > 2.3\
    \ {\n            letterGrades.append(\"B-\")\n        } else if grade > 2.0 {\n\
    \            letterGrades.append(\"C+\")\n        } else if grade > 1.7 {\n  \
    \          letterGrades.append(\"C\")\n        } else if grade > 1.3 {\n     \
    \       letterGrades.append(\"C-\")\n        } else if grade > 1.0 {\n       \
    \     letterGrades.append(\"D+\")\n        } else if grade > 0.7 {\n         \
    \   letterGrades.append(\"D\")\n        } else if grade > 0.0 {\n            letterGrades.append(\"\
    D-\")\n        } else {\n            letterGrades.append(\"E\")\n        }\n \
    \   }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmptks9adx5/tmptks9adx5.swift:69: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb1be5bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb1bb52b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb1bb52988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb1bb517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptks9adx5                        0x000056445258b7f6 <unavailable> + 6134

    5    libc.so.6                          0x00002acb1c047460 __libc_start_main +
    245

    6    tmptks9adx5                        0x000056445258b319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    switch $0 {\n        case 0...3.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.0...5.0:\n            gradesArray.append(\"A\")\n        case\
    \ 5.0...7.0:\n            gradesArray.append(\"A-\")\n        case 7.0...9.0:\n\
    \            gradesArray.append(\"B+\")\n        case 9.0...11.0:\n          \
    \  gradesArray.append(\"B\")\n        case 11.0...13.0:\n            gradesArray.append(\"\
    B-\")\n        case 13.0...15.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 15.0...17.0:\n            gradesArray.append(\"C\")\n        case 17.0...19.0:\n\
    \            gradesArray.append(\"C-\")\n        case 19.0...21.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 21.0...23.0:\n            gradesArray.append(\"\
    D\")\n        case 23.0...25.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 25.0...27.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"F\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp55ltk0oq/tmp55ltk0oq.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65b2290c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65b1f87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65b1f87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65b1f867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp55ltk0oq                        0x000055752c86d826 <unavailable> + 6182

    5    libc.so.6                          0x00002b65b247c460 __libc_start_main +
    245

    6    tmp55ltk0oq                        0x000055752c86d349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    grades.forEach {\n    \
    \    switch $0 {\n        case 0...3.0:\n            gradesArray.append(\"A+\"\
    )\n        case 3.0...5.0:\n            gradesArray.append(\"A\")\n        case\
    \ 5.0...7.0:\n            gradesArray.append(\"A-\")\n        case 7.0...9.0:\n\
    \            gradesArray.append(\"B+\")\n        case 9.0...10.0:\n          \
    \  gradesArray.append(\"B\")\n        case 10.0...12.0:\n            gradesArray.append(\"\
    B-\")\n        case 12.0...15.0:\n            gradesArray.append(\"C+\")\n   \
    \     case 15.0...17.0:\n            gradesArray.append(\"C\")\n        case 17.0...19.0:\n\
    \            gradesArray.append(\"C-\")\n        case 19.0...20.0:\n         \
    \   gradesArray.append(\"D+\")\n        case 20.0...24.0:\n            gradesArray.append(\"\
    D\")\n        case 24.0...25.0:\n            gradesArray.append(\"D-\")\n    \
    \    case 25.0...27.0:\n            gradesArray.append(\"E\")\n        default:\n\
    \            gradesArray.append(\"E\")\n        }\n    }\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpiw1_imim/tmpiw1_imim.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1729657c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b172934eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b172934e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b172934d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiw1_imim                        0x0000560ceaff2826 <unavailable> + 6182

    5    libc.so.6                          0x00002b1729843460 __libc_start_main +
    245

    6    tmpiw1_imim                        0x0000560ceaff2349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0.0:\n    \
    \        gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    \n    return gradesArray\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b3e5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b3e2c3561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b4b3e2c3286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b4b3e2c313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b4b3e2c2bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpdqpzkzje                        0x0000560fc9a7537c <unavailable> + 9084

    6    tmpdqpzkzje                        0x0000560fc9a7478d <unavailable> + 6029

    7    libc.so.6                          0x00002b4b3e7b8460 __libc_start_main +
    245

    8    tmpdqpzkzje                        0x0000560fc9a74449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades =\
    \ [String]()\n    var gpa = gradesArray[0]\n    var letterGrade = \"\"\n    \n\
    \    for grade in gradesArray {\n        if gpa > grade {\n            letterGrade\
    \ = \"D-\"\n            break\n        } else if gpa < grade {\n            letterGrade\
    \ = \"D+\"\n            break\n        } else if gpa == grade {\n            letterGrade\
    \ = \"D\"\n            break\n        }\n        \n        if gpa >= 3.0 {\n \
    \           letterGrade = \"C+\"\n            break\n        } else if gpa >=\
    \ 2.7 {\n            letterGrade = \"C\"\n            break\n        } else if\
    \ gpa >= 2.3 {\n            letterGrade = \"C-\"\n            break\n        }\
    \ else if gpa >= 1.7 {\n            letterGrade = \"B+\"\n            break\n\
    \        } else if gpa >= 1.3 {\n            letterGrade = \"B\"\n           \
    \ break\n        } else if gpa >= 0.7 {\n            letterGrade = \"B-\"\n  \
    \          break\n        } else if gpa >= 0.3 {\n            letterGrade = \"\
    A-\"\n            break\n        } else if gpa >= 0.0 {\n            letterGrade\
    \ = \"A+\"\n            break\n        }\n        \n        if gpa < 3.0 {\n \
    \           letterGrade = \"A\"\n            break\n        } else if gpa < 2.7\
    \ {\n            letterGrade = \"A-\"\n            break\n        } else if gpa\
    \ < 2.3 {\n            letterGrade = \"B+\"\n            break\n        } else\
    \ if gpa < 1.7 {\n            letterGrade = \"B\"\n            break\n       \
    \ } else if gpa < 1.3 {\n            letterGrade = \"B-\"\n            break\n\
    \        } else if gpa < 0.7 {\n            letterGrade = \"C+\"\n           \
    \ break\n        } else if gpa < 0.3 {\n            letterGrade = \"C\"\n    \
    \        break\n        } else if gpa < 0.0 {\n            letterGrade = \"C-\"\
    \n            break\n        }\n        \n        if gpa > 0.0 {\n           \
    \ letterGrade = \"D+\"\n            break\n        }\n        \n        letterGrades.append(letterGrade)\n\
    \        gpa = grade\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpseuuw2ku/tmpseuuw2ku.swift:117: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09f4cd3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09f49cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09f49ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09f49c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpseuuw2ku                        0x00005639048658e6 <unavailable> + 6374

    5    libc.so.6                          0x00002b09f4ebf460 __libc_start_main +
    245

    6    tmpseuuw2ku                        0x0000563904865409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var letterGrades =\
    \ [String]()\n    var currentGrade = gradesArray[0]\n    var currentLetterGrade\
    \ = \"\"\n    var currentLetterGradeIndex = 0\n    var currentLetterGradeIndex2\
    \ = 0\n    var currentLetterGradeIndex3 = 0\n    var currentLetterGradeIndex4\
    \ = 0\n    var currentLetterGradeIndex5 = 0\n    var currentLetterGradeIndex6\
    \ = 0\n    var currentLetterGradeIndex7 = 0\n    var currentLetterGradeIndex8\
    \ = 0\n    var currentLetterGradeIndex9 = 0\n    var currentLetterGradeIndex10\
    \ = 0\n    var currentLetterGradeIndex11 = 0\n    var currentLetterGradeIndex12\
    \ = 0\n    var currentLetterGradeIndex13 = 0\n    var currentLetterGradeIndex14\
    \ = 0\n    var currentLetterGradeIndex15 = 0\n    var currentLetterGradeIndex16\
    \ = 0\n    var currentLetterGradeIndex17 = 0\n    var currentLetterGradeIndex18\
    \ = 0\n    var currentLetterGradeIndex19 = 0\n    var currentLetterGradeIndex20\
    \ = 0\n    var currentLetterGradeIndex21 = 0\n    var currentLetterGradeIndex22\
    \ = 0\n    var currentLetterGradeIndex23 = 0\n    var currentLetterGradeIndex24\
    \ = 0\n    var currentLetterGradeIndex25 = 0\n    var currentLetterGradeIndex26\
    \ = 0\n    var currentLetterGradeIndex27 = 0\n    var currentLetterGradeIndex28\
    \ = 0\n    var currentLetterGradeIndex29 = 0\n    var currentLetterGradeIndex30\
    \ = 0\n    var currentLetterGradeIndex31 = 0\n    var currentLetterGradeIndex32\
    \ = 0\n    var currentLetterGradeIndex33 = 0\n    var currentLetterGradeIndex34\
    \ = 0\n    var currentLetterGradeIndex35 = 0\n    var currentLetterGradeIndex36\
    \ = 0\n    var currentLetterGradeIndex37 = 0\n    var currentLetterGradeIndex38\
    \ = 0\n    var currentLetterGradeIndex39 = 0\n    var currentLetterGradeIndex40\
    \ = 0\n    var currentLetterGradeIndex41 = 0\n    var currentLetterGradeIndex42\
    \ = 0\n    var currentLetterGradeIndex43 = 0\n    var currentLetterGradeIndex44\
    \ = 0\n    var currentLetterGradeIndex45 = 0\n    var currentLetterGradeIndex46\
    \ = 0\n    var currentLetterGradeIndex47 = 0\n    var currentLetterGradeIndex48\
    \ = 0\n    var currentLetterGradeIndex49 = 0\n    var currentLetterGradeIndex50\
    \ = 0\n    var currentLetterGradeIndex51 = 0\n    var currentLetterGradeIndex52\
    \ = 0\n    var currentLetterGradeIndex53 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpr6v4cho6.swift:23:9: warning: variable 'gradesArray' was never\
    \ mutated; consider changing to 'let' constant\n    var gradesArray = grades.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmpr6v4cho6.swift:24:9: warning: initialization of variable\
    \ 'letterGrades' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var letterGrades = [String]()\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpr6v4cho6.swift:25:9: warning: initialization of variable 'currentGrade'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var currentGrade = gradesArray[0]\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpr6v4cho6.swift:26:9:\
    \ warning: initialization of variable 'currentLetterGrade' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var currentLetterGrade\
    \ = \"\"\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpr6v4cho6.swift:27:9: warning:\
    \ initialization of variable 'currentLetterGradeIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var currentLetterGradeIndex\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpr6v4cho6.swift:28:9: warning:\
    \ initialization of variable 'currentLetterGradeIndex2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var currentLetterGradeIndex2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpr6v4cho6.swift:29:9: warning:\
    \ initialization of variable 'currentLetterGradeIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var currentLetterGradeIndex3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpr6v4cho6.swift:30:9: warning:\
    \ initialization of variable 'currentLetterGradeIndex4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var currentLetterGradeIndex4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpr6v4cho6.swift:31:9: warning:\
    \ initialization of variable 'currentLetterGradeIndex5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var currentLetterGradeIndex5\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpr6v4cho6.s"
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n \
    \   for grade in grades {\n        if gpa > 3.0 {\n            gradesArray.append(\"\
    A+\")\n        } else if gpa > 2.7 {\n            gradesArray.append(\"A\")\n\
    \        } else if gpa > 2.3 {\n            gradesArray.append(\"A-\")\n     \
    \   } else if gpa > 1.7 && gpa < 2.0 {\n            gradesArray.append(\"B+\"\
    )\n        } else if gpa > 1.3 && gpa < 1.7 {\n            gradesArray.append(\"\
    B\")\n        } else if gpa > 1.0 && gpa < 1.3 {\n            gradesArray.append(\"\
    B-\")\n        } else if gpa > 0.7 && gpa < 1.0 {\n            gradesArray.append(\"\
    C+\")\n        } else if gpa > 0.3 && gpa < 0.7 {\n            gradesArray.append(\"\
    C\")\n        } else if gpa > 0.0 {\n            gradesArray.append(\"C-\")\n\
    \        } else {\n            gradesArray.append(\"D+\")\n        }\n       \
    \ gpa -= grade\n    }\n    gradesArray.append(\"E\")\n    return gradesArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpg6sgmct8/tmpg6sgmct8.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8823a56c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b882374db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b882374d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b882374c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg6sgmct8                        0x000055dedff13856 <unavailable> + 6230

    5    libc.so.6                          0x00002b8823c42460 __libc_start_main +
    245

    6    tmpg6sgmct8                        0x000055dedff13379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.sorted(by:\
    \ <)\n    gradesArray = gradesArray.sorted(by: >)\n    gradesArray = gradesArray.sorted(by:\
    \ >=)\n    gradesArray = gradesArray.sorted(by: <=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ >)\n    gradesArray = gradesArray.sorted(by: <)\n    gradesArray = gradesArray.sorted(by:\
    \ <=)\n    gradesArray = gradesArray.sorted(by: >=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ ==)\n    gradesArray = gradesArray.sorted(by: !=)\n    gradesArray = gradesArray.sorted(by:\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: '/tmp/tmp5ik921zb.swift:63:1: error: expected expression in list of expressions

    }

    ^

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7:\n            letterGrades.append(\"A\")\n        case\
    \ 3.3:\n            letterGrades.append(\"A-\")\n        case 3.0:\n         \
    \   letterGrades.append(\"B+\")\n        case 2.7:\n            letterGrades.append(\"\
    B\")\n        case 2.3:\n            letterGrades.append(\"B-\")\n        case\
    \ 2.0:\n            letterGrades.append(\"C+\")\n        case 1.7:\n         \
    \   letterGrades.append(\"C\")\n        case 1.3:\n            letterGrades.append(\"\
    C-\")\n        case 1.0:\n            letterGrades.append(\"D+\")\n        case\
    \ 0.7:\n            letterGrades.append(\"D\")\n        case 0.0:\n          \
    \  letterGrades.append(\"D-\")\n        case 0.0:\n            letterGrades.append(\"\
    E\")\n        default:\n            letterGrades.append(\"E\")\n        }\n  \
    \  }\n    return letterGrades\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpba904jh2/tmpba904jh2.swift:72: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba646f8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba646c85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba646c85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba646c847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba904jh2                        0x00005606125817f6 <unavailable> + 6134

    5    libc.so.6                          0x00002ba64717a460 __libc_start_main +
    245

    6    tmpba904jh2                        0x0000560612581319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 0...3.0:\n            letterGrades.append(\"\
    E\")\n        case 4.0...5.0:\n            letterGrades.append(\"A+\")\n     \
    \   case 6.0...7.0:\n            letterGrades.append(\"A\")\n        case 8.0...9.0:\n\
    \            letterGrades.append(\"A-\")\n        case 10.0...11.0:\n        \
    \    letterGrades.append(\"B+\")\n        case 12.0...13.0:\n            letterGrades.append(\"\
    B\")\n        case 14.0...15.0:\n            letterGrades.append(\"B-\")\n   \
    \     case 16.0...17.0:\n            letterGrades.append(\"C+\")\n        case\
    \ 18.0...19.0:\n            letterGrades.append(\"C\")\n        case 20.0...21.0:\n\
    \            letterGrades.append(\"C-\")\n        case 22.0...23.0:\n        \
    \    letterGrades.append(\"D+\")\n        case 24.0...25.0:\n            letterGrades.append(\"\
    D\")\n        case 26.0...27.0:\n            letterGrades.append(\"D-\")\n   \
    \     case 28.0...29.0:\n            letterGrades.append(\"E\")\n        default:\n\
    \            letterGrades.append(\"F\")\n        }\n    }\n    return letterGrades\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmp5qt1cayt/tmp5qt1cayt.swift:74: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca11015c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca10d0cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca10d0c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca10d0b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5qt1cayt                        0x000055597c8a2926 <unavailable> + 6438

    5    libc.so.6                          0x00002aca11201460 __libc_start_main +
    245

    6    tmp5qt1cayt                        0x000055597c8a2449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0...0.1:\n\
    \            gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002aef7266dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aef72364561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aef72364286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aef7236413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aef72363bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpxv281r_o                        0x000055bdafe8837c <unavailable> + 9084

    6    tmpxv281r_o                        0x000055bdafe8778d <unavailable> + 6029

    7    libc.so.6                          0x00002aef72859460 __libc_start_main +
    245

    8    tmpxv281r_o                        0x000055bdafe87449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014896
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    var gpa = grades[0]\n \
    \   for grade in grades {\n        if grade > gpa {\n            gradesArray.append(\"\
    A+\")\n        } else if grade > 3.7 {\n            gradesArray.append(\"A\")\n\
    \        } else if grade > 3.3 {\n            gradesArray.append(\"A-\")\n   \
    \     } else if grade > 3.0 {\n            gradesArray.append(\"B+\")\n      \
    \  } else if grade > 2.7 {\n            gradesArray.append(\"B\")\n        } else\
    \ if grade > 2.3 {\n            gradesArray.append(\"B-\")\n        } else if\
    \ grade > 2.0 {\n            gradesArray.append(\"C+\")\n        } else if grade\
    \ > 1.7 {\n            gradesArray.append(\"C\")\n        } else if grade > 1.3\
    \ {\n            gradesArray.append(\"C-\")\n        } else if grade > 1.0 {\n\
    \            gradesArray.append(\"D+\")\n        } else if grade > 0.7 {\n   \
    \         gradesArray.append(\"D\")\n        } else if grade > 0.0 {\n       \
    \     gradesArray.append(\"D-\")\n        } else {\n            gradesArray.append(\"\
    E\")\n        }\n        gpa = grade\n    }\n    return gradesArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpiucqc6gt/tmpiucqc6gt.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b249b163c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b249ae5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b249ae5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b249ae597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiucqc6gt                        0x000055982f004856 <unavailable> + 6230

    5    libc.so.6                          0x00002b249b34f460 __libc_start_main +
    245

    6    tmpiucqc6gt                        0x000055982f004379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var letterGrades = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            letterGrades.append(\"\
    A+\")\n        case 3.7...3.3:\n            letterGrades.append(\"A\")\n     \
    \   case 3.3...3.0:\n            letterGrades.append(\"A-\")\n        case 3.0:\n\
    \            letterGrades.append(\"B+\")\n        case 2.7...2.3:\n          \
    \  letterGrades.append(\"B\")\n        case 2.3...2.0:\n            letterGrades.append(\"\
    B-\")\n        case 2.0:\n            letterGrades.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            letterGrades.append(\"C\")\n        case 1.3...1.0:\n\
    \            letterGrades.append(\"C-\")\n        case 1.0:\n            letterGrades.append(\"\
    D+\")\n        case 0.7...1.0:\n            letterGrades.append(\"D\")\n     \
    \   case 0.0:\n            letterGrades.append(\"D-\")\n        case 0...0.1:\n\
    \            letterGrades.append(\"E\")\n        default:\n            letterGrades.append(\"\
    E\")\n        }\n    }\n    \n    return letterGrades\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) ==\
    \ [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b235d3b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b235d0a9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b235d0a9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b235d0a913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b235d0a8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpnu0ih82p                        0x00005562346a937c <unavailable> + 9084

    6    tmpnu0ih82p                        0x00005562346a878d <unavailable> + 6029

    7    libc.so.6                          0x00002b235d59e460 __libc_start_main +
    245

    8    tmpnu0ih82p                        0x00005562346a8449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    for grade in grades {\n\
    \        if grade < 3.0 {\n            gradesArray.append(\"A+\")\n        } else\
    \ if grade < 3.3 {\n            gradesArray.append(\"A\")\n        } else if grade\
    \ < 3.7 {\n            gradesArray.append(\"A-\")\n        } else if grade < 4.0\
    \ {\n            gradesArray.append(\"B+\")\n        } else if grade < 4.3 {\n\
    \            gradesArray.append(\"B\")\n        } else if grade < 4.7 {\n    \
    \        gradesArray.append(\"B-\")\n        } else if grade < 5.0 {\n       \
    \     gradesArray.append(\"C+\")\n        } else if grade < 5.3 {\n          \
    \  gradesArray.append(\"C\")\n        } else if grade < 5.7 {\n            gradesArray.append(\"\
    C-\")\n        } else if grade < 6.0 {\n            gradesArray.append(\"D+\"\
    )\n        } else if grade < 6.3 {\n            gradesArray.append(\"D\")\n  \
    \      } else if grade < 6.7 {\n            gradesArray.append(\"D-\")\n     \
    \   } else if grade < 7.0 {\n            gradesArray.append(\"E\")\n        }\
    \ else {\n            gradesArray.append(\"F\")\n        }\n    }\n    return\
    \ gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(numerical_letter_grade(grades:\
    \ [4.0, 3, 1.7, 2, 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'tmpegfai50o/tmpegfai50o.swift:71: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aced57a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aced549fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aced549f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aced549e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpegfai50o                        0x000055ef0af397f6 <unavailable> + 6134

    5    libc.so.6                          0x00002aced5994460 __libc_start_main +
    245

    6    tmpegfai50o                        0x000055ef0af39319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades\n    gradesArray = gradesArray.reverse()\n\
    \    var letterGrades = [String]()\n    var currentGrade = gradesArray[0]\n  \
    \  var currentLetterGrade = \"E\"\n    var currentLetterGradeIndex = 0\n    var\
    \ currentGPA = gradesArray[0]\n    var currentGPAIndex = 0\n    for _ in gradesArray\
    \ {\n        if currentGrade < currentGPA {\n            currentLetterGrade =\
    \ \"D-\"\n            currentGPAIndex = currentGPAIndex + 1\n            currentGPA\
    \ = gradesArray[currentGPAIndex]\n        } else if currentGrade > currentGPA\
    \ {\n            currentLetterGrade = \"D+\"\n            currentGPAIndex = currentGPAIndex\
    \ + 1\n            currentGPA = gradesArray[currentGPAIndex]\n        } else if\
    \ currentGrade == currentGPA {\n            currentLetterGrade = \"D\"\n     \
    \       currentGPAIndex = currentGPAIndex + 1\n            currentGPA = gradesArray[currentGPAIndex]\n\
    \        } else if currentGrade < currentGPA {\n            currentLetterGrade\
    \ = \"C-\"\n            currentGPAIndex = currentGPAIndex + 1\n            currentGPA\
    \ = gradesArray[currentGPAIndex]\n        } else if currentGrade > currentGPA\
    \ {\n            currentLetterGrade = \"C+\"\n            currentGPAIndex = currentGPAIndex\
    \ + 1\n            currentGPA = gradesArray[currentGPAIndex]\n        } else if\
    \ currentGrade == currentGPA {\n            currentLetterGrade = \"C\"\n     \
    \       currentGPAIndex = currentGPAIndex + 1\n            currentGPA = gradesArray[currentGPAIndex]\n\
    \        } else if currentGrade < currentGPA {\n            currentLetterGrade\
    \ = \"B-\"\n            currentGPAIndex = currentGPAIndex + 1\n            currentGPA\
    \ = gradesArray[currentGPAIndex]\n        } else if currentGrade > currentGPA\
    \ {\n            currentLetterGrade = \"B+\"\n            currentGPAIndex = currentGPAIndex\
    \ + 1\n            currentGPA = gradesArray[currentGPAIndex]\n        } else if\
    \ currentGrade == currentGPA {\n            currentLetterGrade = \"B\"\n     \
    \       currentGPAIndex = currentGPAIndex + 1\n            currentGPA = gradesArray[currentGPAIndex]\n\
    \        } else if currentGrade < currentGPA {\n            currentLetterGrade\
    \ = \"A-\"\n            currentGPAIndex = currentGPAIndex + 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\
    \ == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzqzcsp__.swift:91:66: error: expected '}' at end of brace statement\n\
    assert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"])\n      \
    \                                                           ^\n/tmp/tmpzqzcsp__.swift:31:26:\
    \ note: to match this opening '{'\n    for _ in gradesArray {\n              \
    \           ^\n/tmp/tmpzqzcsp__.swift:91:66: error: expected '}' at end of brace\
    \ statement\nassert(numerical_letter_grade(grades: [0.0, 0.7]) == [\"E\", \"D-\"\
    ])\n                                                                 ^\n/tmp/tmpzqzcsp__.swift:22:59:\
    \ note: to match this opening '{'\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n                                                          ^\n\
    /tmp/tmpzqzcsp__.swift:24:31: error: cannot assign value of type '()' to type\
    \ '[Double]'\n    gradesArray = gradesArray.reverse()\n                  ~~~~~~~~~~~~^~~~~~~~~\n\
    /tmp/tmpzqzcsp__.swift:74:6: error: operator functions can only be declared at\
    \ global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014898
- exit_code: -4
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = [String]()\n    \n    for grade in grades\
    \ {\n        switch grade {\n        case 4.0:\n            gradesArray.append(\"\
    A+\")\n        case 3.7...3.3:\n            gradesArray.append(\"A\")\n      \
    \  case 3.3...3.0:\n            gradesArray.append(\"A-\")\n        case 3.0:\n\
    \            gradesArray.append(\"B+\")\n        case 2.7...2.3:\n           \
    \ gradesArray.append(\"B\")\n        case 2.3...2.0:\n            gradesArray.append(\"\
    B-\")\n        case 2.0:\n            gradesArray.append(\"C+\")\n        case\
    \ 1.7...1.3:\n            gradesArray.append(\"C\")\n        case 1.3...1.0:\n\
    \            gradesArray.append(\"C-\")\n        case 1.0:\n            gradesArray.append(\"\
    D+\")\n        case 0.7...1.0:\n            gradesArray.append(\"D\")\n      \
    \  case 0.0:\n            gradesArray.append(\"D-\")\n        case 0.0:\n    \
    \        gradesArray.append(\"E\")\n        default:\n            gradesArray.append(\"\
    E\")\n        }\n    }\n    return gradesArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5]) == [\"A+\"\
    , \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades: [1.2])\
    \ == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades: [1.0, 0.3, 1.5, 2.8,\
    \ 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7f810ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7f7e01561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ae7f7e01286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ae7f7e0113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ae7f7e00bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpc5y29drs                        0x000055616589237c <unavailable> + 9084

    6    tmpc5y29drs                        0x000055616589178d <unavailable> + 6029

    7    libc.so.6                          0x00002ae7f82f6460 __libc_start_main +
    245

    8    tmpc5y29drs                        0x0000556165891449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1660014898
- exit_code: 1
  program: "\n/// It is the last week of the semester and the teacher has to give\
    \ the grades\n/// to students. The teacher has been making her own algorithm for\
    \ grading.\n/// The only problem is, she has lost the code she used for grading.\n\
    /// She has given you a list of GPAs for some students and you have to write \n\
    /// a function that can output a list of letter grades using the following table:\n\
    /// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7        \
    \        A \n/// > 3.3                A- \n/// > 3.0                B+\n/// >\
    \ 2.7                B \n/// > 2.3                B-\n/// > 2.0              \
    \  C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0    \
    \            D+ \n/// > 0.7                D \n/// > 0.0                D-\n///\
    \ 0.0                E\n/// Example:\nfunc numerical_letter_grade(grades: [Double])\
    \ -> [String] {\n    var gradesArray = grades.sorted()\n    var gradesArrayCount\
    \ = grades.count\n    var gradesArraySum = grades.reduce(0, combine: +)\n    var\
    \ gradesArrayAverage = gradesArraySum / gradesArrayCount\n    var gradesArrayMin\
    \ = grades.min()\n    var gradesArrayMax = grades.max()\n    var gradesArrayMedian\
    \ = grades.sorted().middleIndex\n    var gradesArraySumOfSquares = grades.reduce(0,\
    \ combine: +)\n    var gradesArraySumOfSquaresOfAverage = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfMedian = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfMax = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfMin = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMedian = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMax = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMin = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfMedianOfMax = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfMedianOfMin = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfMaxOfMedian = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfMaxOfMedian = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfMinOfMedian = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfMinOfMedian = gradesArraySumOfSquares\
    \ / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMedianOfMax =\
    \ gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMedianOfMin\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArraySumOfSquaresOfAverageOfMinOfMedian\
    \ = gradesArraySumOfSquares / gradesArrayCount\n    var gradesArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(numerical_letter_grade(grades: [4.0, 3, 1.7, 2,\
    \ 3.5]) == [\"A+\", \"B\", \"C-\", \"C\", \"A-\"])\nassert(numerical_letter_grade(grades:\
    \ [1.2]) == [\"D+\"])\nassert(numerical_letter_grade(grades: [0.5]) == [\"D-\"\
    ])\nassert(numerical_letter_grade(grades: [0.0]) == [\"E\"])\nassert(numerical_letter_grade(grades:\
    \ [1.0, 0.3, 1.5, 2.8, 3.3]) == [\"D\", \"D-\", \"C-\", \"B\", \"B+\"])\nassert(numerical_letter_grade(grades:\
    \ [0.0, 0.7]) == [\"E\", \"D-\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2e4e29vl.swift:25:39: error: extraneous argument label 'combine:'\
    \ in call\n    var gradesArraySum = grades.reduce(0, combine: +)\n           \
    \                           ^   ~~~~~~~~~\n                                  \
    \        \n/tmp/tmp2e4e29vl.swift:29:45: error: value of type '[Double]' has no\
    \ member 'middleIndex'\n    var gradesArrayMedian = grades.sorted().middleIndex\n\
    \                            ~~~~~~~~~~~~~~~ ^~~~~~~~~~~\n/tmp/tmp2e4e29vl.swift:30:48:\
    \ error: extraneous argument label 'combine:' in call\n    var gradesArraySumOfSquares\
    \ = grades.reduce(0, combine: +)\n                                           \
    \    ^   ~~~~~~~~~\n                                                   \n/tmp/tmp2e4e29vl.swift:47:9:\
    \ error: type annotation missing in pattern\n    var gradesArray\n        ^\n"
  stdout: ''
  timestamp: 1660014898
