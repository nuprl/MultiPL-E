name: HumanEval_112_reverse_delete
language: swift
prompt: "\n/// Task\n/// We are given two strings s and c, you have to deleted all\
  \ the characters in s that are equal to any character in c\n/// then check if the\
  \ result string is palindrome.\n/// A string is called palindrome if it reads the\
  \ same backward as forward.\n/// You should return a tuple containing the result\
  \ string and True/False for the check.\n/// Example\nfunc reverse_delete(s: String,\
  \ c: String) -> (String, Bool) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(reverse_delete(s: \"abcde\", c: \"ae\")\
  \ == (\"bcd\", false))\nassert(reverse_delete(s: \"abcdef\", c: \"b\") == (\"acdef\"\
  , false))\nassert(reverse_delete(s: \"abcdedcba\", c: \"ab\") == (\"cdedc\", true))\n\
  assert(reverse_delete(s: \"dwik\", c: \"w\") == (\"dik\", false))\nassert(reverse_delete(s:\
  \ \"a\", c: \"a\") == (\"\", true))\nassert(reverse_delete(s: \"abcdedcba\", c:\
  \ \"\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"abcdedcba\", c: \"\
  v\") == (\"abcdedcba\", true))\nassert(reverse_delete(s: \"vabba\", c: \"v\") ==\
  \ (\"abba\", true))\nassert(reverse_delete(s: \"mamma\", c: \"mia\") == (\"\", true))"
completions: []
stop_tokens:
- "\n}"
