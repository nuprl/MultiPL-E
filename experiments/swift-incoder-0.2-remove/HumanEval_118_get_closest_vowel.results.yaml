language: swift
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    var vowelsCountIndex: [Int] = []\n    var vowelsIndexCount: [Int]\
    \ = []\n    var vowelsIndexCountIndex: [Int] = []\n    var vowelsIndexCountIndexIndex:\
    \ [Int] = []\n    var vowelsIndexCountIndexIndexCount: [Int] = []\n    var vowelsIndexCountIndexCountIndex:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCount: [Int] = []\n    var\
    \ vowelsIndexCountIndexCountIndexCountIndex: [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndex:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCount: [Int] =\
    \ []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndex: [Int] = []\n\
    \    var vowelsIndexCountIndexCountIndexCountIndexCountIndex: [Int] = []\n   \
    \ var vowelsIndexCountIndexCountIndexCountIndexCountIndexCount: [Int] = []\n \
    \   var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex: [Int] =\
    \ []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex: [Int]\
    \ = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n    var vowelsIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxq2xv1cz.swift:20:9: error: invalid redeclaration of 'vowelsIndexCountIndexCountIndexCountIndex'\n\
    \    var vowelsIndexCountIndexCountIndexCountIndex: [Int] = []\n        ^\n/tmp/tmpxq2xv1cz.swift:19:9:\
    \ note: 'vowelsIndexCountIndexCountIndexCountIndex' previously declared here\n\
    \    var vowelsIndexCountIndexCountIndexCountIndex: [Int] = []\n        ^\n/tmp/tmpxq2xv1cz.swift:23:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountIndexCountIndexCountIndexCountIndex'\n\
    \    var vowelsIndexCountIndexCountIndexCountIndexCountIndex: [Int] = []\n   \
    \     ^\n/tmp/tmpxq2xv1cz.swift:22:9: note: 'vowelsIndexCountIndexCountIndexCountIndexCountIndex'\
    \ previously declared here\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndex:\
    \ [Int] = []\n        ^\n/tmp/tmpxq2xv1cz.swift:26:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex'\n    var\
    \ vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex: [Int] = []\n\
    \        ^\n/tmp/tmpxq2xv1cz.swift:25:9: note: 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex'\
    \ previously declared here\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndex:\
    \ [Int] = []\n        ^\n/tmp/tmpxq2xv1cz.swift:33:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount'\n\
    \    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n        ^\n/tmp/tmpxq2xv1cz.swift:32:9: note: 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount'\
    \ previously declared here\n    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []\n        ^\n/tmp/tmpxq2xv1cz.swift:35:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount'\n\
    \    var vowelsIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount:\
    \ [Int] = []"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountIndex2: Int = 0\n    var vowelsCountIndex3: Int\
    \ = 0\n    var vowelsCountIndex4: Int = 0\n    var vowelsCountIndex5: Int = 0\n\
    \    var vowelsCountIndex6: Int = 0\n    var vowelsCountIndex7: Int = 0\n    var\
    \ vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9: Int = 0\n    var vowelsCountIndex10:\
    \ Int = 0\n    var vowelsCountIndex11: Int = 0\n    var vowelsCountIndex12: Int\
    \ = 0\n    var vowelsCountIndex13: Int = 0\n    var vowelsCountIndex14: Int =\
    \ 0\n    var vowelsCountIndex15: Int = 0\n    var vowelsCountIndex16: Int = 0\n\
    \    var vowelsCountIndex17: Int = 0\n    var vowelsCountIndex18: Int = 0\n  \
    \  var vowelsCountIndex19: Int = 0\n    var vowelsCountIndex20: Int = 0\n    var\
    \ vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22: Int = 0\n    var vowelsCountIndex23:\
    \ Int = 0\n    var vowelsCountIndex24: Int = 0\n    var vowelsCountIndex25: Int\
    \ = 0\n    var vowelsCountIndex26: Int = 0\n    var vowelsCountIndex27: Int =\
    \ 0\n    var vowelsCountIndex28: Int = 0\n    var vowelsCountIndex29: Int = 0\n\
    \    var vowelsCountIndex30: Int = 0\n    var vowelsCountIndex31: Int = 0\n  \
    \  var vowelsCountIndex32: Int = 0\n    var vowelsCountIndex33: Int = 0\n    var\
    \ vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35: Int = 0\n    var vowelsCountIndex36:\
    \ Int = 0\n    var vowelsCountIndex37: Int = 0\n    var vowelsCountIndex38: Int\
    \ = 0\n    var vowelsCountIndex39: Int = 0\n    var vowelsCountIndex40: Int =\
    \ 0\n    var vowelsCountIndex41: Int = 0\n    var vowelsCountIndex42: Int = 0\n\
    \    var vowelsCountIndex43: Int = 0\n    var vowelsCountIndex44: Int = 0\n  \
    \  var vowelsCountIndex45: Int = 0\n    var vowelsCountIndex46: Int = 0\n    var\
    \ vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48: Int = 0\n    var vowelsCountIndex49:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphy34y7wt.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmphy34y7wt.swift:10:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmphy34y7wt.swift:11:9: warning: variable 'vowelsCountIndex'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~\n        _\n/tmp/tmphy34y7wt.swift:12:9: warning:\
    \ variable 'vowelsCountIndex2' was never used; consider replacing with '_' or\
    \ removing it\n    var vowelsCountIndex2: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmphy34y7wt.swift:13:9: warning: variable 'vowelsCountIndex3'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmphy34y7wt.swift:14:9:\
    \ warning: variable 'vowelsCountIndex4' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex4: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmphy34y7wt.swift:15:9: warning: variable 'vowelsCountIndex5'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex5:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmphy34y7wt.swift:16:9:\
    \ warning: variable 'vowelsCountIndex6' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex6: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmphy34y7wt.swift:17:9: warning: variable 'vowelsCountIndex7'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex7:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmphy34y7wt.swift:18:9:\
    \ warning: variable 'vowelsCountIndex8' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex8: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmphy34y7wt.swift:19:9: warning: variable 'vowelsCountIndex9'\
    \ was never used; consi"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex = word.characters.filter({\
    \ vowels.contains($0) }).index(of: vowels.last!)\n    \n    if vowelsIndex ==\
    \ word.characters.count - 1 {\n        return \"\"\n    }\n    \n    let consonantsCount\
    \ = word.characters.filter({ !vowels.contains($0) }).count\n    \n    if consonantsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let consonantsIndex = word.characters.index(of:\
    \ vowels.last!, offsetBy: vowelsIndex + 1)\n    \n    if consonantsIndex == 0\
    \ {\n        return \"\"\n    }\n    \n    let consonantsIndex = word.characters.index(of:\
    \ vowels.first!, offsetBy: consonantsIndex - 1)\n    \n    if consonantsIndex\
    \ == word.characters.count - 1 {\n        return \"\"\n    }\n    \n    return\
    \ word.substring(to: consonantsIndex + 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmptzzbm4y8.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptzzbm4y8.swift:18:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: vowels.last!)\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmptzzbm4y8.swift:18:71: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    let vowelsIndex = word.characters.filter({\
    \ vowels.contains($0) }).index(of: vowels.last!)\n                           \
    \                                           ^\n/tmp/tmptzzbm4y8.swift:18:71: note:\
    \ use 'firstIndex(of:)' instead\n    let vowelsIndex = word.characters.filter({\
    \ vowels.contains($0) }).index(of: vowels.last!)\n                           \
    \                                           ^~~~~\n                          \
    \                                            firstIndex\n/tmp/tmptzzbm4y8.swift:20:20:\
    \ error: binary operator '==' cannot be applied to operands of type 'String.Index?'\
    \ and 'Int'\n    if vowelsIndex == word.characters.count - 1 {\n       ~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmptzzbm4y8.swift:20:20: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Int, Int)\n \
    \   if vowelsIndex == word.characters.count - 1 {\n                   ^\n/tmp/tmptzzbm4y8.swift:24:32:\
    \ error: 'characters' is unavailable: Please use String directly\n    let consonantsCount\
    \ = word.characters.filter({ !vowels.contains($0) }).count\n                 \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmptzzbm4y8.swift:30:4"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    for char in word.characters {\n \
    \       if vowels.contains(char) {\n            vowelsCount[vowels.indexOf(char)]++\n\
    \        }\n    }\n    if vowelsCount.contains(0) {\n        return \"\"\n   \
    \ }\n    var minVowel: Int = vowelsCount.min()!\n    var maxVowel: Int = vowelsCount.max()!\n\
    \    var closestVowel: Int\n    if minVowel == maxVowel {\n        closestVowel\
    \ = minVowel\n    } else {\n        closestVowel = minVowel\n        for char\
    \ in vowels {\n            if vowelsCount[vowels.indexOf(char)] == minVowel {\n\
    \                closestVowel = vowels.indexOf(char) + 1\n            }\n    \
    \    }\n    }\n    return vowels[closestVowel]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7t_5gy0r.swift:11:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp7t_5gy0r.swift:12:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmp7t_5gy0r.swift:13:46:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  vowelsCount[vowels.indexOf(char)]++\n                                     \
    \        ^~\n/tmp/tmp7t_5gy0r.swift:13:32: error: value of type '[String]' has\
    \ no member 'indexOf'\n            vowelsCount[vowels.indexOf(char)]++\n     \
    \                   ~~~~~~ ^~~~~~~\n/tmp/tmp7t_5gy0r.swift:27:35: error: value\
    \ of type '[String]' has no member 'indexOf'\n            if vowelsCount[vowels.indexOf(char)]\
    \ == minVowel {\n                           ~~~~~~ ^~~~~~~\n/tmp/tmp7t_5gy0r.swift:28:39:\
    \ error: value of type '[String]' has no member 'indexOf'\n                closestVowel\
    \ = vowels.indexOf(char) + 1\n                               ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelCount: Int = 0\n    var vowelIndex2: Int = 0\n    var vowelCount2:\
    \ Int = 0\n    var vowelIndex3: Int = 0\n    var vowelCount3: Int = 0\n    var\
    \ vowelIndex4: Int = 0\n    var vowelCount4: Int = 0\n    var vowelIndex5: Int\
    \ = 0\n    var vowelCount5: Int = 0\n    var vowelIndex6: Int = 0\n    var vowelCount6:\
    \ Int = 0\n    var vowelIndex7: Int = 0\n    var vowelCount7: Int = 0\n    var\
    \ vowelIndex8: Int = 0\n    var vowelCount8: Int = 0\n    var vowelIndex9: Int\
    \ = 0\n    var vowelCount9: Int = 0\n    var vowelIndex10: Int = 0\n    var vowelCount10:\
    \ Int = 0\n    var vowelIndex11: Int = 0\n    var vowelCount11: Int = 0\n    var\
    \ vowelIndex12: Int = 0\n    var vowelCount12: Int = 0\n    var vowelIndex13:\
    \ Int = 0\n    var vowelCount13: Int = 0\n    var vowelIndex14: Int = 0\n    var\
    \ vowelCount14: Int = 0\n    var vowelIndex15: Int = 0\n    var vowelCount15:\
    \ Int = 0\n    var vowelIndex16: Int = 0\n    var vowelCount16: Int = 0\n    var\
    \ vowelIndex17: Int = 0\n    var vowelCount17: Int = 0\n    var vowelIndex18:\
    \ Int = 0\n    var vowelCount18: Int = 0\n    var vowelIndex19: Int = 0\n    var\
    \ vowelCount19: Int = 0\n    var vowelIndex20: Int = 0\n    var vowelCount20:\
    \ Int = 0\n    var vowelIndex21: Int = 0\n    var vowelCount21: Int = 0\n    var\
    \ vowelIndex22: Int = 0\n    var vowelCount22: Int = 0\n    var vowelIndex23:\
    \ Int = 0\n    var vowelCount23: Int = 0\n    var vowelIndex24: Int = 0\n    var\
    \ vowelCount24: Int = 0\n    var vowelIndex25: Int = 0\n    var vowelCount25:\
    \ Int = 0\n    var vowelIndex26: Int = 0\n    var vowelCount26: Int = 0\n    var\
    \ vowelIndex27: Int = 0\n    var vowelCount27: Int = 0\n    var vowelIndex28:\
    \ Int = 0\n    var vowelCount28: Int = 0\n    var vowelIndex29: Int = 0\n    var\
    \ vowelCount29: Int = 0\n    var vowelIndex30: Int = 0\n    var vowelCount30:\
    \ Int = 0\n    var vowelIndex31: Int = 0\n    var vowelCount31: Int = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpliwwck8o.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpliwwck8o.swift:10:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpliwwck8o.swift:11:9: warning: variable 'vowelIndex' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex: Int =\
    \ 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpliwwck8o.swift:12:9: warning: variable\
    \ 'vowelCount' was never used; consider replacing with '_' or removing it\n  \
    \  var vowelCount: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpliwwck8o.swift:13:9:\
    \ warning: variable 'vowelIndex2' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelIndex2: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpliwwck8o.swift:14:9: warning: variable 'vowelCount2' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelCount2: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpliwwck8o.swift:15:9: warning: variable 'vowelIndex3' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex3: Int =\
    \ 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpliwwck8o.swift:16:9: warning: variable\
    \ 'vowelCount3' was never used; consider replacing with '_' or removing it\n \
    \   var vowelCount3: Int = 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpliwwck8o.swift:17:9:\
    \ warning: variable 'vowelIndex4' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelIndex4: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpliwwck8o.swift:18:9: warning: variable 'vowelCount4' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelCount4: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpliwwck8o.swift:19:9: warning: variable 'vowelIndex5' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex5: Int =\
    \ 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpliwwck8o.swift:20:9: warning: variable\
    \ 'vowelCou"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels = [String]()\n    vowels.append(\"\
    a\")\n    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"\
    o\")\n    vowels.append(\"u\")\n    \n    var vowelsCount = vowels.count\n   \
    \ \n    var vowelIndex = 0\n    var vowelCount = 0\n    \n    for char in word.characters\
    \ {\n        if vowelIndex == vowelsCount {\n            vowelIndex = 0\n    \
    \        vowelCount = 0\n        }\n        \n        if char == vowels[vowelIndex]\
    \ {\n            vowelCount += 1\n        }\n        \n        if vowelIndex ==\
    \ vowelsCount - 1 {\n            if vowelCount > 1 {\n                return \"\
    \"\n            }\n            else {\n                return vowels[vowelIndex]\n\
    \            }\n        }\n        \n        vowelIndex += 1\n    }\n    \n  \
    \  return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpqlw8upgh.swift:22:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpqlw8upgh.swift:28:17:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        if char == vowels[vowelIndex] {\n           ~~~~ ^  ~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqlw8upgh.swift:28:17: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ if char == vowels[vowelIndex] {\n                ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    var vowelsIndexCount: [Int] = []\n    var vowelsIndexCountMax: Int\
    \ = -1\n    var vowelsIndexCountMin: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9m2gaa1l.swift:17:9: error: invalid redeclaration of 'vowelsIndexCountMaxIndex'\n\
    \    var vowelsIndexCountMaxIndex: Int = -1\n        ^\n/tmp/tmp9m2gaa1l.swift:15:9:\
    \ note: 'vowelsIndexCountMaxIndex' previously declared here\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n        ^\n/tmp/tmp9m2gaa1l.swift:18:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountMinIndex'\n    var vowelsIndexCountMinIndex: Int = -1\n\
    \        ^\n/tmp/tmp9m2gaa1l.swift:16:9: note: 'vowelsIndexCountMinIndex' previously\
    \ declared here\n    var vowelsIndexCountMinIndex: Int = -1\n        ^\n/tmp/tmp9m2gaa1l.swift:19:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountMaxIndex'\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n        ^\n/tmp/tmp9m2gaa1l.swift:15:9: note: 'vowelsIndexCountMaxIndex'\
    \ previously declared here\n    var vowelsIndexCountMaxIndex: Int = -1\n     \
    \   ^\n/tmp/tmp9m2gaa1l.swift:20:9: error: invalid redeclaration of 'vowelsIndexCountMinIndex'\n\
    \    var vowelsIndexCountMinIndex: Int = -1\n        ^\n/tmp/tmp9m2gaa1l.swift:16:9:\
    \ note: 'vowelsIndexCountMinIndex' previously declared here\n    var vowelsIndexCountMinIndex:\
    \ Int = -1\n        ^\n/tmp/tmp9m2gaa1l.swift:21:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountMaxIndex'\n    var vowelsIndexCountMaxIndex: Int = -1\n\
    \        ^\n/tmp/tmp9m2gaa1l.swift:15:9: note: 'vowelsIndexCountMaxIndex' previously\
    \ declared here\n    var vowelsIndexCountMaxIndex: Int = -1\n        ^\n/tmp/tmp9m2gaa1l.swift:22:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountMinIndex'\n    var vowelsIndexCountMinIndex:\
    \ Int = -1\n        ^\n/tmp/tmp9m2gaa1l.swift:16:9: note: 'vowelsIndexCountMinIndex'\
    \ previously declared here\n    var vowelsIndexCountMinIndex: Int = -1\n     \
    \   ^\n/tmp/tmp9m2gaa1l.swift:23:9: error: invalid redeclaration of 'vowelsIndexCountMaxIndex'\n\
    \    var vowelsIndexCountMaxIndex: Int = -1\n        ^\n/tmp/tmp9m2gaa1l.swift:15:9:\
    \ note: 'vowelsIndexCountMaxIndex' previously declared here\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n        ^\n/tmp/tmp9m2gaa1l.swift:24:9: error: invalid redeclaration\
    \ of 'vowelsIndexCountMin"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    var vowelsIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    \n    var consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    var consonantsCount = word.characters.filter({ consonants.contains($0) }).count\n\
    \    \n    while vowelsIndex < vowelsCount {\n        if word.characters.count\
    \ > vowelsIndex + 1 {\n            if word.characters.last! == consonants[consonantsCountIndex]\
    \ {\n                vowelsIndex = vowelsIndex + 1\n                consonantsCountIndex\
    \ = consonantsCountIndex + 1\n            } else {\n                vowelsIndex\
    \ = vowelsIndex + 1\n            }\n        } else {\n            return \"\"\n\
    \        }\n    }\n    \n    return word.substring(vowelsIndex + 1, word.characters.count\
    \ - 1)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp4ybpa16g.swift:11:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4ybpa16g.swift:21:32: error: 'characters' is unavailable:\
    \ Please use String directly\n    var consonantsCount = word.characters.filter({\
    \ consonants.contains($0) }).count\n                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4ybpa16g.swift:24:17:\
    \ error: 'characters' is unavailable: Please use String directly\n        if word.characters.count\
    \ > vowelsIndex + 1 {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4ybpa16g.swift:25:52: error: cannot find 'consonantsCountIndex'\
    \ in scope\n            if word.characters.last! == consonants[consonantsCountIndex]\
    \ {\n                                                   ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4ybpa16g.swift:27:17: error: cannot find 'consonantsCountIndex' in scope\n\
    \                consonantsCountIndex = consonantsCountIndex + 1\n           \
    \     ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4ybpa16g.swift:27:40: error: cannot find 'consonantsCountIndex'\
    \ in scope\n                consonantsCountIndex = consonantsCountIndex + 1\n\
    \                                       ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4ybpa16g.swift:36:17:\
    \ error: value of type 'String' has no member 'substring'\n    return word.substring(vowelsIndex\
    \ + 1, word.characters.count - 1)\n           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"\",\"a\",\"e\",\"i\",\"o\",\"u\"]\n\
    \    var vowelsCount = word.characters.count\n    var vowelsIndex = 0\n    var\
    \ vowelsIndex2 = 0\n    var vowelsIndex3 = 0\n    var vowelsIndex4 = 0\n    var\
    \ vowelsIndex5 = 0\n    var vowelsIndex6 = 0\n    var vowelsIndex7 = 0\n    var\
    \ vowelsIndex8 = 0\n    var vowelsIndex9 = 0\n    var vowelsIndex10 = 0\n    var\
    \ vowelsIndex11 = 0\n    var vowelsIndex12 = 0\n    var vowelsIndex13 = 0\n  \
    \  var vowelsIndex14 = 0\n    var vowelsIndex15 = 0\n    var vowelsIndex16 = 0\n\
    \    var vowelsIndex17 = 0\n    var vowelsIndex18 = 0\n    var vowelsIndex19 =\
    \ 0\n    var vowelsIndex20 = 0\n    var vowelsIndex21 = 0\n    var vowelsIndex22\
    \ = 0\n    var vowelsIndex23 = 0\n    var vowelsIndex24 = 0\n    var vowelsIndex25\
    \ = 0\n    var vowelsIndex26 = 0\n    var vowelsIndex27 = 0\n    var vowelsIndex28\
    \ = 0\n    var vowelsIndex29 = 0\n    var vowelsIndex30 = 0\n    var vowelsIndex31\
    \ = 0\n    var vowelsIndex32 = 0\n    var vowelsIndex33 = 0\n    var vowelsIndex34\
    \ = 0\n    var vowelsIndex35 = 0\n    var vowelsIndex36 = 0\n    var vowelsIndex37\
    \ = 0\n    var vowelsIndex38 = 0\n    var vowelsIndex39 = 0\n    var vowelsIndex40\
    \ = 0\n    var vowelsIndex41 = 0\n    var vowelsIndex42 = 0\n    var vowelsIndex43\
    \ = 0\n    var vowelsIndex44 = 0\n    var vowelsIndex45 = 0\n    var vowelsIndex46\
    \ = 0\n    var vowelsIndex47 = 0\n    var vowelsIndex48 = 0\n    var vowelsIndex49\
    \ = 0\n    var vowelsIndex50 = 0\n    var vowelsIndex51 = 0\n    var vowelsIndex52\
    \ = 0\n    var vowelsIndex53 = 0\n    var vowelsIndex54 = 0\n    var vowelsIndex55\
    \ = 0\n    var vowelsIndex56 = 0\n    var vowelsIndex57 = 0\n    var vowelsIndex58\
    \ = 0\n    var vowelsIndex59 = 0\n    var vowelsIndex60 = 0\n    var vowelsIndex61\
    \ = 0\n    var vowelsIndex62 = 0\n    var vowelsIndex63 = 0\n    var vowelsIndex64\
    \ = 0\n    var vowelsIndex65 = 0\n    var vowelsIndex66 = 0\n    var vowelsIndex67\
    \ = 0\n    var vowelsIndex68 = 0\n    var vowelsIndex69 = 0\n    var vowelsIndex70\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphprmzf4j.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphprmzf4j.swift:9:9: warning: initialization of variable 'vowels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowels = [\"\",\"a\",\"e\",\"i\",\"o\",\"u\"]\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmphprmzf4j.swift:10:9: warning: initialization of variable 'vowelsCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCount = word.characters.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphprmzf4j.swift:11:9:\
    \ warning: initialization of variable 'vowelsIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsIndex = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphprmzf4j.swift:12:9: warning: initialization of variable 'vowelsIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex2 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphprmzf4j.swift:13:9:\
    \ warning: initialization of variable 'vowelsIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex3 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphprmzf4j.swift:14:9: warning: initialization\
    \ of variable 'vowelsIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex4 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmphprmzf4j.swift:15:9: warning: initialization of variable 'vowelsIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex5 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphprmzf4j.swift:16:9:\
    \ warning: initialization of variable 'vowelsIndex6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex6 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphprmzf4j.swift:17:9: warning: initialization\
    \ of variable 'vowelsIndex7' was nev"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelIndex = 0\n    var vowelIndexEnd = word.characters.count\
    \ - 1\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpp2o4l2i9.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpp2o4l2i9.swift:12:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndexEnd = word.characters.count - 1\n   \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpp2o4l2i9.swift:14:9: error: invalid redeclaration of 'vowelIndexEnd'\n\
    \    var vowelIndexEnd = 0\n        ^\n/tmp/tmpp2o4l2i9.swift:12:9: note: 'vowelIndexEnd'\
    \ previously declared here\n    var vowelIndexEnd = word.characters.count - 1\n\
    \        ^\n/tmp/tmpp2o4l2i9.swift:15:9: error: invalid redeclaration of 'vowelIndexStart'\n\
    \    var vowelIndexStart = 0\n        ^\n/tmp/tmpp2o4l2i9.swift:13:9: note: 'vowelIndexStart'\
    \ previously declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmpp2o4l2i9.swift:16:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmpp2o4l2i9.swift:12:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.characters.count - 1\n        ^\n/tmp/tmpp2o4l2i9.swift:17:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmpp2o4l2i9.swift:13:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmpp2o4l2i9.swift:18:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmpp2o4l2i9.swift:12:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.characters.count - 1\n        ^\n/tmp/tmpp2o4l2i9.swift:19:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmpp2o4l2i9.swift:13:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStar"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels.first!)\n    \n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n\
    \    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels.first!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reversed\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpvmixs879.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvmixs879.swift:18:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels.first!)\n                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpvmixs879.swift:20:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpvmixs879.swift:20:9: error: invalid redeclaration\
    \ of 'vowelsCount'\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n        ^\n/tmp/tmpvmixs879.swift:12:9: note: 'vowelsCount' previously\
    \ declared here\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n        ^\n/tmp/tmpvmixs879.swift:26:27: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels.first!)\n                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpvmixs879.swift:26:9: error: invalid redeclaration\
    \ of 'vowelIndex'\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels.first!)\n        ^\n/tmp/tmpvmixs879.swift:18:9: note: 'vowelIndex' previously\
    \ declared here\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels.first!)\n        ^\n/tmp/tmpvmixs879.swift:32:27: error: 'characters'\
    \ is unavailab"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelIndexEnd = word.characters.count - 1\n    var vowelIndexStart =\
    \ 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpv5tlhn79.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndexEnd = word.characters.count - 1\n   \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpv5tlhn79.swift:13:9: error: invalid redeclaration of 'vowelIndexEnd'\n\
    \    var vowelIndexEnd = 0\n        ^\n/tmp/tmpv5tlhn79.swift:11:9: note: 'vowelIndexEnd'\
    \ previously declared here\n    var vowelIndexEnd = word.characters.count - 1\n\
    \        ^\n/tmp/tmpv5tlhn79.swift:14:9: error: invalid redeclaration of 'vowelIndexStart'\n\
    \    var vowelIndexStart = 0\n        ^\n/tmp/tmpv5tlhn79.swift:12:9: note: 'vowelIndexStart'\
    \ previously declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmpv5tlhn79.swift:15:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmpv5tlhn79.swift:11:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.characters.count - 1\n        ^\n/tmp/tmpv5tlhn79.swift:16:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmpv5tlhn79.swift:12:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmpv5tlhn79.swift:17:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmpv5tlhn79.swift:11:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.characters.count - 1\n        ^\n/tmp/tmpv5tlhn79.swift:18:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmpv5tlhn79.swift:12:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmpv5tlhn79.swift:19:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmpv5tlhn79.swift:11:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.characters.count - 1\n        ^\n/tmp/tmpv5tlhn79.swift:20:9:\
    \ error: invali"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndex2 = vowels.count - 1\n\
    \    var vowelIndex3 = vowels.count - 2\n    var vowelIndex4 = vowels.count -\
    \ 3\n    var vowelIndex5 = vowels.count - 4\n    var vowelIndex6 = vowels.count\
    \ - 5\n    var vowelIndex7 = vowels.count - 6\n    var vowelIndex8 = vowels.count\
    \ - 7\n    var vowelIndex9 = vowels.count - 8\n    var vowelIndex10 = vowels.count\
    \ - 9\n    var vowelIndex11 = vowels.count - 10\n    var vowelIndex12 = vowels.count\
    \ - 11\n    var vowelIndex13 = vowels.count - 12\n    var vowelIndex14 = vowels.count\
    \ - 13\n    var vowelIndex15 = vowels.count - 14\n    var vowelIndex16 = vowels.count\
    \ - 15\n    var vowelIndex17 = vowels.count - 16\n    var vowelIndex18 = vowels.count\
    \ - 17\n    var vowelIndex19 = vowels.count - 18\n    var vowelIndex20 = vowels.count\
    \ - 19\n    var vowelIndex21 = vowels.count - 20\n    var vowelIndex22 = vowels.count\
    \ - 21\n    var vowelIndex23 = vowels.count - 22\n    var vowelIndex24 = vowels.count\
    \ - 23\n    var vowelIndex25 = vowels.count - 24\n    var vowelIndex26 = vowels.count\
    \ - 25\n    var vowelIndex27 = vowels.count - 26\n    var vowelIndex28 = vowels.count\
    \ - 27\n    var vowelIndex29 = vowels.count - 28\n    var vowelIndex30 = vowels.count\
    \ - 29\n    var vowelIndex31 = vowels.count - 30\n    var vowelIndex32 = vowels.count\
    \ - 31\n    var vowelIndex33 = vowels.count - 32\n    var vowelIndex34 = vowels.count\
    \ - 33\n    var vowelIndex35 = vowels.count - 34\n    var vowelIndex36 = vowels.count\
    \ - 35\n    var vowelIndex37 = vowels.count - 36\n    var vowelIndex38 = vowels.count\
    \ - 37\n    var vowelIndex39 = vowels.count - 38\n    var vowelIndex40 = vowels.count\
    \ - 39\n    var vowelIndex41 = vowels.count - 40\n    var vowelIndex42 = vowels.count\
    \ - 41\n    var vowelIndex43 = vowels.count - 42\n    var vowelIndex44 = vowels.count\
    \ - 43\n    var vowelIndex45 = vowels.count - 44\n    var vowelIndex46 = vowels.count\
    \ - 45\n    var vowelIndex47 = vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpuij7p3ff.swift:57:24: error: cannot find 'vowel' in scope\n   \
    \ var vowelIndex47 = vowel\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsArray =\
    \ vowels.characters\n    var vowelsCount = vowels.characters.count\n    var vowelsArrayCount\
    \ = vowels.characters.count\n    var vowelsArrayCount2 = vowels.characters.count\n\
    \    var vowelsArrayCount3 = vowels.characters.count\n    var vowelsArrayCount4\
    \ = vowels.characters.count\n    var vowelsArrayCount5 = vowels.characters.count\n\
    \    var vowelsArrayCount6 = vowels.characters.count\n    var vowelsArrayCount7\
    \ = vowels.characters.count\n    var vowelsArrayCount8 = vowels.characters.count\n\
    \    var vowelsArrayCount9 = vowels.characters.count\n    var vowelsArrayCount10\
    \ = vowels.characters.count\n    var vowelsArrayCount11 = vowels.characters.count\n\
    \    var vowelsArrayCount12 = vowels.characters.count\n    var vowelsArrayCount13\
    \ = vowels.characters.count\n    var vowelsArrayCount14 = vowels.characters.count\n\
    \    var vowelsArrayCount15 = vowels.characters.count\n    var vowelsArrayCount16\
    \ = vowels.characters.count\n    var vowelsArrayCount17 = vowels.characters.count\n\
    \    var vowelsArrayCount18 = vowels.characters.count\n    var vowelsArrayCount19\
    \ = vowels.characters.count\n    var vowelsArrayCount20 = vowels.characters.count\n\
    \    var vowelsArrayCount21 = vowels.characters.count\n    var vowelsArrayCount22\
    \ = vowels.characters.count\n    var vowelsArrayCount23 = vowels.characters.count\n\
    \    var vowelsArrayCount24 = vowels.characters.count\n    var vowelsArrayCount25\
    \ = vowels.characters.count\n    var vowelsArrayCount26 = vowels.characters.count\n\
    \    var vowelsArrayCount27 = vowels.characters.count\n    var vowelsArrayCount28\
    \ = vowels.characters.count\n    var vowelsArrayCount29 = vowels.characters.count\n\
    \    var vowelsArrayCount30 = vowels.characters.count\n    var vowelsArrayCount31\
    \ = vowels.characters.count\n    var vowelsArrayCount32 = vowels.characters.count\n\
    \    var vowelsArrayCount33 = vowels.characters.count\n    var vowelsArrayCount34\
    \ = vowels.characters.count\n    var vowelsArrayCount35 = vowels.characters.count\n\
    \    var vowelsArrayCount36 = vowels.characters.count\n    var vowelsArrayCount37\
    \ = vowels.characters.count\n    var vowelsArrayCount38 = vowels.characters.count\n\
    \    var vowelsArrayCount39 = vowels.characters.count\n    var vowelsArrayCount40\
    \ = vowels.characters.count\n    var vowelsArrayCount41 = vowels.characters.count\n\
    \    var vowelsArrayCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpj0j9joxd.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpj0j9joxd.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpj0j9joxd.swift:12:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArrayCount = vowels.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj0j9joxd.swift:13:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelsArrayCount2 = vowels.characters.count\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj0j9joxd.swift:14:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelsArrayCount3 = vowels.characters.count\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj0j9joxd.swift:15:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelsArrayCount4 = vowels.characters.count\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpj0j9joxd.swift:16:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelsArrayCount5 = vowels.characters.count\n\
    \                     "
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    var vowelIndex = 0\n    var vowelIndex2 = word.count\n    \n \
    \   while vowelIndex < vowels.count && vowelIndex2 < word.count {\n        if\
    \ word.substringFromIndex(vowelIndex).lowercaseString.rangeOfString(vowels[vowelIndex])\
    \ != nil {\n            vowelIndex++\n        }\n        if word.substringFromIndex(vowelIndex2).lowercaseString.rangeOfString(vowels[vowelIndex2])\
    \ != nil {\n            vowelIndex2++\n        }\n    }\n    \n    if vowelIndex\
    \ == 0 {\n        return \"\"\n    }\n    \n    if vowelIndex2 == word.count {\n\
    \        return \"\"\n    }\n    \n    return word.substringFromIndex(vowelIndex).lowercaseString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmps4b50pw6.swift:16:17: error: value of type 'String' has no member\
    \ 'substringFromIndex'\n        if word.substringFromIndex(vowelIndex).lowercaseString.rangeOfString(vowels[vowelIndex])\
    \ != nil {\n           ~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmps4b50pw6.swift:17:23:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  vowelIndex++\n                      ^~\n/tmp/tmps4b50pw6.swift:19:17: error:\
    \ value of type 'String' has no member 'substringFromIndex'\n        if word.substringFromIndex(vowelIndex2).lowercaseString.rangeOfString(vowels[vowelIndex2])\
    \ != nil {\n           ~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmps4b50pw6.swift:20:24:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  vowelIndex2++\n                       ^~\n/tmp/tmps4b50pw6.swift:32:17: error:\
    \ value of type 'String' has no member 'substringFromIndex'\n    return word.substringFromIndex(vowelIndex).lowercaseString\n\
    \           ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelsCountFromRight:\
    \ Int = 0\n    var vowelsCountFromLeft: Int = 0\n    var vowelsCountFromBoth:\
    \ Int = 0\n    var vowelsCountFromBothEnd: Int = 0\n    var vowelsCountFromBothStart:\
    \ Int = 0\n    var vowelsCountFromBothBoth: Int = 0\n    var vowelsCountFromBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothStart: Int = 0\n    var vowelsCountFromBothBothBoth:\
    \ Int = 0\n    var vowelsCountFromBothBothBothEnd: Int = 0\n    var vowelsCountFromBothBothBothStart:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothStart: Int = 0\n    var vowelsCountFromBothBothBothBothBoth:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd: Int = 0\n    var vowelsCountFromBothBothBothBothBothStart:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowelsCountFromBothBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowelsCountFromBothBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowelsCountFromBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowelsCountFromBothBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowelsCountFromBothBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3005b5me.swift:30:9: error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothEnd'\n\
    \    var vowelsCountFromBothBothBothBothBothEnd: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:27:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothEnd' previously declared here\n  \
    \  var vowelsCountFromBothBothBothBothBothEnd: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:31:9:\
    \ error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothStart'\n\
    \    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:28:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothStart' previously declared here\n\
    \    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:32:9:\
    \ error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothBoth'\n\
    \    var vowelsCountFromBothBothBothBothBothBoth: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:29:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothBoth' previously declared here\n \
    \   var vowelsCountFromBothBothBothBothBothBoth: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:33:9:\
    \ error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothEnd'\n \
    \   var vowelsCountFromBothBothBothBothBothEnd: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:27:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothEnd' previously declared here\n  \
    \  var vowelsCountFromBothBothBothBothBothEnd: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:34:9:\
    \ error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothStart'\n\
    \    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:28:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothStart' previously declared here\n\
    \    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:35:9:\
    \ error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothBoth'\n\
    \    var vowelsCountFromBothBothBothBothBothBoth: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:29:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothBoth' previously declared here\n \
    \   var vowelsCountFromBothBothBothBothBothBoth: Int = 0\n        ^\n/tmp/tmp3005b5"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = 0\n    var vowelIndex = 0\n    var vowelIndex2\
    \ = 0\n    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 =\
    \ 0\n    var vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n\
    \    var vowelIndex9 = 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n\
    \    var vowelIndex12 = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n\
    \    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n\
    \    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n\
    \    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n\
    \    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n\
    \    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n\
    \    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n\
    \    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n\
    \    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n\
    \    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n\
    \    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n\
    \    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n\
    \    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n\
    \    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n\
    \    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n\
    \    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n\
    \    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n\
    \    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n\
    \    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n\
    \    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n\
    \    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n\
    \    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n\
    \    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n\
    \    var vowelIndex81 = 0\n    var vowelIndex82 = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzcfb75mj.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpzcfb75mj.swift:10:9:\
    \ warning: initialization of variable 'vowelsCount' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsCount = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzcfb75mj.swift:11:9: warning: initialization of variable 'vowelIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpzcfb75mj.swift:12:9:\
    \ warning: initialization of variable 'vowelIndex2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzcfb75mj.swift:13:9: warning: initialization of variable 'vowelIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpzcfb75mj.swift:14:9:\
    \ warning: initialization of variable 'vowelIndex4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzcfb75mj.swift:15:9: warning: initialization of variable 'vowelIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpzcfb75mj.swift:16:9:\
    \ warning: initialization of variable 'vowelIndex6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzcfb75mj.swift:17:9: warning: initialization of variable 'vowelIndex7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpzcfb75mj.swift:18:9:\
    \ warning: initialization of variable 'vowelIndex8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzcfb75mj.swift:19:9: warning: ini"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsArray =\
    \ vowels.characters\n    var vowelsArrayCount = vowels.characters.count\n    var\
    \ vowelsArrayIndex = 0\n    var vowelsArrayIndexCount = 0\n    var vowelsArrayIndexCountMinusOne\
    \ = 0\n    var vowelsArrayIndexCountMinusTwo = 0\n    var vowelsArrayIndexCountMinusThree\
    \ = 0\n    var vowelsArrayIndexCountMinusFour = 0\n    var vowelsArrayIndexCountMinusFive\
    \ = 0\n    var vowelsArrayIndexCountMinusSix = 0\n    var vowelsArrayIndexCountMinusSeven\
    \ = 0\n    var vowelsArrayIndexCountMinusEight = 0\n    var vowelsArrayIndexCountMinusNine\
    \ = 0\n    var vowelsArrayIndexCountMinusTen = 0\n    var vowelsArrayIndexCountMinusEleven\
    \ = 0\n    var vowelsArrayIndexCountMinusTwelve = 0\n    var vowelsArrayIndexCountMinusThirteen\
    \ = 0\n    var vowelsArrayIndexCountMinusFourteen = 0\n    var vowelsArrayIndexCountMinusFifteen\
    \ = 0\n    var vowelsArrayIndexCountMinusSixteen = 0\n    var vowelsArrayIndexCountMinusSeventeen\
    \ = 0\n    var vowelsArrayIndexCountMinusEighteen = 0\n    var vowelsArrayIndexCountMinusNineteen\
    \ = 0\n    var vowelsArrayIndexCountMinusTwenty = 0\n    var vowelsArrayIndexCountMinusThirty\
    \ = 0\n    var vowelsArrayIndexCountMinusFourty = 0\n    var vowelsArrayIndexCountMinusFifty\
    \ = 0\n    var vowelsArrayIndexCountMinusSixty = 0\n    var vowelsArrayIndexCountMinusSeventy\
    \ = 0\n    var vowelsArrayIndexCountMinusEighty = 0\n    var vowelsArrayIndexCountMinusNinety\
    \ = 0\n    var vowelsArrayIndexCountMinusOne = 0\n    var vowelsArrayIndexCountMinusTwo\
    \ = 0\n    var vowelsArrayIndexCountMinusThree = 0\n    var vowelsArrayIndexCountMinusFour\
    \ = 0\n    var vowelsArrayIndexCountMinusFive = 0\n    var vowelsArrayIndexCountMinusSix\
    \ = 0\n    var vowelsArrayIndexCountMinusSeven = 0\n    var vowelsArrayIndexCountMinusEight\
    \ = 0\n    var vowelsArrayIndexCountMinusNine = 0\n    var vowelsArrayIndexCountMinusTen\
    \ = 0\n    var vowelsArrayIndexCountMinusEleven = 0\n    var vowelsArrayIndexCountMinusTwel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpawcs2ga7.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpawcs2ga7.swift:11:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArrayCount = vowels.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpawcs2ga7.swift:41:9: error: invalid redeclaration of\
    \ 'vowelsArrayIndexCountMinusOne'\n    var vowelsArrayIndexCountMinusOne = 0\n\
    \        ^\n/tmp/tmpawcs2ga7.swift:14:9: note: 'vowelsArrayIndexCountMinusOne'\
    \ previously declared here\n    var vowelsArrayIndexCountMinusOne = 0\n      \
    \  ^\n/tmp/tmpawcs2ga7.swift:42:9: error: invalid redeclaration of 'vowelsArrayIndexCountMinusTwo'\n\
    \    var vowelsArrayIndexCountMinusTwo = 0\n        ^\n/tmp/tmpawcs2ga7.swift:15:9:\
    \ note: 'vowelsArrayIndexCountMinusTwo' previously declared here\n    var vowelsArrayIndexCountMinusTwo\
    \ = 0\n        ^\n/tmp/tmpawcs2ga7.swift:43:9: error: invalid redeclaration of\
    \ 'vowelsArrayIndexCountMinusThree'\n    var vowelsArrayIndexCountMinusThree =\
    \ 0\n        ^\n/tmp/tmpawcs2ga7.swift:16:9: note: 'vowelsArrayIndexCountMinusThree'\
    \ previously declared here\n    var vowelsArrayIndexCountMinusThree = 0\n    \
    \    ^\n/tmp/tmpawcs2ga7.swift:44:9: error: invalid redeclaration of 'vowelsArrayIndexCountMinusFour'\n\
    \    var vowelsArrayIndexCountMinusFour = 0\n        ^\n/tmp/tmpawcs2ga7.swift:17:9:\
    \ note: 'vowelsArrayIndexCountMinusFour' previously declared here\n    var vowelsArrayIndexCountMinusFour\
    \ = 0\n        ^\n/tmp/tmpawcs2ga7.swift:45:9: error: invalid redeclaration of\
    \ 'vowelsArrayIndexCountMinusFive'\n    var vowelsArrayIndexCountMinusFive = 0\n\
    \        ^\n/tmp/tmpawcs2ga7.swift:18:9: note: 'vowelsArrayIndexCountMinusFive'\
    \ previously declared here\n    var vowelsArrayInd"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelsIndex: Int = 0\n    var\
    \ vowelsIndex2: Int = 0\n    var vowelsIndex3: Int = 0\n    var vowelsIndex4:\
    \ Int = 0\n    var vowelsIndex5: Int = 0\n    var vowelsIndex6: Int = 0\n    var\
    \ vowelsIndex7: Int = 0\n    var vowelsIndex8: Int = 0\n    var vowelsIndex9:\
    \ Int = 0\n    var vowelsIndex10: Int = 0\n    var vowelsIndex11: Int = 0\n  \
    \  var vowelsIndex12: Int = 0\n    var vowelsIndex13: Int = 0\n    var vowelsIndex14:\
    \ Int = 0\n    var vowelsIndex15: Int = 0\n    var vowelsIndex16: Int = 0\n  \
    \  var vowelsIndex17: Int = 0\n    var vowelsIndex18: Int = 0\n    var vowelsIndex19:\
    \ Int = 0\n    var vowelsIndex20: Int = 0\n    var vowelsIndex21: Int = 0\n  \
    \  var vowelsIndex22: Int = 0\n    var vowelsIndex23: Int = 0\n    var vowelsIndex24:\
    \ Int = 0\n    var vowelsIndex25: Int = 0\n    var vowelsIndex26: Int = 0\n  \
    \  var vowelsIndex27: Int = 0\n    var vowelsIndex28: Int = 0\n    var vowelsIndex29:\
    \ Int = 0\n    var vowelsIndex30: Int = 0\n    var vowelsIndex31: Int = 0\n  \
    \  var vowelsIndex32: Int = 0\n    var vowelsIndex33: Int = 0\n    var vowelsIndex34:\
    \ Int = 0\n    var vowelsIndex35: Int = 0\n    var vowelsIndex36: Int = 0\n  \
    \  var vowelsIndex37: Int = 0\n    var vowelsIndex38: Int = 0\n    var vowelsIndex39:\
    \ Int = 0\n    var vowelsIndex40: Int = 0\n    var vowelsIndex41: Int = 0\n  \
    \  var vowelsIndex42: Int = 0\n    var vowelsIndex43: Int = 0\n    var vowelsIndex44:\
    \ Int = 0\n    var vowelsIndex45: Int = 0\n    var vowelsIndex46: Int = 0\n  \
    \  var vowelsIndex47: Int = 0\n    var vowelsIndex48: Int = 0\n    var vowelsIndex49:\
    \ Int = 0\n    var vowelsIndex50: Int = 0\n    var vowelsIndex51: Int = 0\n  \
    \  var vowelsIndex52: Int = 0\n    var vowelsIndex53: Int = 0\n    var vowelsIndex54:\
    \ Int = 0\n    var vowelsIndex55: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmps3g1rovr.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmps3g1rovr.swift:10:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmps3g1rovr.swift:11:9: warning: variable 'vowelsIndex' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelsIndex: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmps3g1rovr.swift:12:9: warning: variable 'vowelsIndex2' was\
    \ never used; consider replacing with '_' or removing it\n    var vowelsIndex2:\
    \ Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:13:9: warning:\
    \ variable 'vowelsIndex3' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex3: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:14:9:\
    \ warning: variable 'vowelsIndex4' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsIndex4: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmps3g1rovr.swift:15:9: warning: variable 'vowelsIndex5' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex5: Int\
    \ = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:16:9: warning:\
    \ variable 'vowelsIndex6' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex6: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:17:9:\
    \ warning: variable 'vowelsIndex7' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsIndex7: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmps3g1rovr.swift:18:9: warning: variable 'vowelsIndex8' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex8: Int\
    \ = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:19:9: warning:\
    \ variable 'vowelsIndex9' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex9: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:20:9:\
    \ warning: vari"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountIndex2: Int = 0\n    var vowelsCountIndex3: Int\
    \ = 0\n    var vowelsCountIndex4: Int = 0\n    var vowelsCountIndex5: Int = 0\n\
    \    var vowelsCountIndex6: Int = 0\n    var vowelsCountIndex7: Int = 0\n    var\
    \ vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9: Int = 0\n    var vowelsCountIndex10:\
    \ Int = 0\n    var vowelsCountIndex11: Int = 0\n    var vowelsCountIndex12: Int\
    \ = 0\n    var vowelsCountIndex13: Int = 0\n    var vowelsCountIndex14: Int =\
    \ 0\n    var vowelsCountIndex15: Int = 0\n    var vowelsCountIndex16: Int = 0\n\
    \    var vowelsCountIndex17: Int = 0\n    var vowelsCountIndex18: Int = 0\n  \
    \  var vowelsCountIndex19: Int = 0\n    var vowelsCountIndex20: Int = 0\n    var\
    \ vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22: Int = 0\n    var vowelsCountIndex23:\
    \ Int = 0\n    var vowelsCountIndex24: Int = 0\n    var vowelsCountIndex25: Int\
    \ = 0\n    var vowelsCountIndex26: Int = 0\n    var vowelsCountIndex27: Int =\
    \ 0\n    var vowelsCountIndex28: Int = 0\n    var vowelsCountIndex29: Int = 0\n\
    \    var vowelsCountIndex30: Int = 0\n    var vowelsCountIndex31: Int = 0\n  \
    \  var vowelsCountIndex32: Int = 0\n    var vowelsCountIndex33: Int = 0\n    var\
    \ vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35: Int = 0\n    var vowelsCountIndex36:\
    \ Int = 0\n    var vowelsCountIndex37: Int = 0\n    var vowelsCountIndex38: Int\
    \ = 0\n    var vowelsCountIndex39: Int = 0\n    var vowelsCountIndex40: Int =\
    \ 0\n    var vowelsCountIndex41: Int = 0\n    var vowelsCountIndex42: Int = 0\n\
    \    var vowelsCountIndex43: Int = 0\n    var vowelsCountIndex44: Int = 0\n  \
    \  var vowelsCountIndex45: Int = 0\n    var vowelsCountIndex46: Int = 0\n    var\
    \ vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48: Int = 0\n    var vowelsCountIndex49:\
    \ Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpx2wddlky.swift:10:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpx2wddlky.swift:11:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpx2wddlky.swift:12:9: warning: variable 'vowelsCountIndex'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~\n        _\n/tmp/tmpx2wddlky.swift:13:9: warning:\
    \ variable 'vowelsCountIndex2' was never used; consider replacing with '_' or\
    \ removing it\n    var vowelsCountIndex2: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpx2wddlky.swift:14:9: warning: variable 'vowelsCountIndex3'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpx2wddlky.swift:15:9:\
    \ warning: variable 'vowelsCountIndex4' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex4: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpx2wddlky.swift:16:9: warning: variable 'vowelsCountIndex5'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex5:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpx2wddlky.swift:17:9:\
    \ warning: variable 'vowelsCountIndex6' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex6: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpx2wddlky.swift:18:9: warning: variable 'vowelsCountIndex7'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex7:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpx2wddlky.swift:19:9:\
    \ warning: variable 'vowelsCountIndex8' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex8: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpx2wddlky.swift:20:9: warning: variable 'vowelsCountIndex9'\
    \ was never used; cons"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"\",\"a\",\"e\",\"i\",\"o\",\"u\"]\n\
    \    var vowelsCount = word.characters.count\n    var vowelIndex = 0\n    var\
    \ vowelIndex2 = word.characters.count - 1\n    var vowelIndex3 = word.characters.count\
    \ - 2\n    var vowelIndex4 = word.characters.count - 3\n    var vowelIndex5 =\
    \ word.characters.count - 4\n    var vowelIndex6 = word.characters.count - 5\n\
    \    var vowelIndex7 = word.characters.count - 6\n    var vowelIndex8 = word.characters.count\
    \ - 7\n    var vowelIndex9 = word.characters.count - 8\n    var vowelIndex10 =\
    \ word.characters.count - 9\n    var vowelIndex11 = word.characters.count - 10\n\
    \    var vowelIndex12 = word.characters.count - 11\n    var vowelIndex13 = word.characters.count\
    \ - 12\n    var vowelIndex14 = word.characters.count - 13\n    var vowelIndex15\
    \ = word.characters.count - 14\n    var vowelIndex16 = word.characters.count -\
    \ 15\n    var vowelIndex17 = word.characters.count - 16\n    var vowelIndex18\
    \ = word.characters.count - 17\n    var vowelIndex19 = word.characters.count -\
    \ 18\n    var vowelIndex20 = word.characters.count - 19\n    var vowelIndex21\
    \ = word.characters.count - 20\n    var vowelIndex22 = word.characters.count -\
    \ 21\n    var vowelIndex23 = word.characters.count - 22\n    var vowelIndex24\
    \ = word.characters.count - 23\n    var vowelIndex25 = word.characters.count -\
    \ 24\n    var vowelIndex26 = word.characters.count - 25\n    var vowelIndex27\
    \ = word.characters.count - 26\n    var vowelIndex28 = word.characters.count -\
    \ 27\n    var vowelIndex29 = word.characters.count - 28\n    var vowelIndex30\
    \ = word.characters.count - 29\n    var vowelIndex31 = word.characters.count -\
    \ 30\n    var vowelIndex32 = word.characters.count - 31\n    var vowelIndex33\
    \ = word.characters.count - 32\n    var vowelIndex34 = word.characters.count -\
    \ 33\n    var vowelIndex35 = word.characters.count - 34\n    var vowelIndex36\
    \ = word.characters.count - 35\n    var vowelIndex37 = word.characters.count -\
    \ 36\n    var vowelIndex38 = word.characters.count - 37\n    var vowelIndex39\
    \ = word.characters.count - 38\n    var vowelIndex40 = word.characters.count -\
    \ 39\n    var vowelIndex41 = word.characters.count - 40\n    var vowelIndex42\
    \ = word.characters.count - 41\n    var vowelIndex43 = word.characters.count -\
    \ 42\n    var vowelIndex44 = word.characters.count - 43\n    var vowelIndex45\
    \ = word.characters.count - 44\n    var vowelIndex46 = word.characters.count -\
    \ 45\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpv46dja26.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv46dja26.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv46dja26.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex3 = word.characters.count - 2\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv46dja26.swift:14:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex4 = word.characters.count - 3\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv46dja26.swift:15:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex5 = word.characters.count - 4\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv46dja26.swift:16:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex6 = word.characters.count - 5\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpv46dja26.swift:17:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex7 = word.characters.count - 6\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'chara"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    \n    for char in word.characters\
    \ {\n        if vowels.contains(char) {\n            vowelsCount[vowels.indexOf(char)]++\n\
    \        }\n    }\n    \n    var closestVowel = \"\"\n    var closestVowelCount\
    \ = 0\n    \n    for char in word.characters {\n        if vowelsCount[vowels.indexOf(char)]\
    \ == closestVowelCount {\n            closestVowel = char\n            closestVowelCount\
    \ = vowelsCount[vowels.indexOf(char)]\n        }\n    }\n    \n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpuvu5_ohi.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpuvu5_ohi.swift:13:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpuvu5_ohi.swift:14:46:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  vowelsCount[vowels.indexOf(char)]++\n                                     \
    \        ^~\n/tmp/tmpuvu5_ohi.swift:14:32: error: value of type '[String]' has\
    \ no member 'indexOf'\n            vowelsCount[vowels.indexOf(char)]++\n     \
    \                   ~~~~~~ ^~~~~~~\n/tmp/tmpuvu5_ohi.swift:21:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in word.characters\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpuvu5_ohi.swift:22:31: error: value of type '[String]' has\
    \ no member 'indexOf'\n        if vowelsCount[vowels.indexOf(char)] == closestVowelCount\
    \ {\n                       ~~~~~~ ^~~~~~~\n/tmp/tmpuvu5_ohi.swift:23:28: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            closestVowel\
    \ = char\n                           ^~~~\n/tmp/tmpuvu5_ohi.swift:24:52: error:\
    \ value of type '[String]' has no member 'indexOf'\n            closestVowelCount\
    \ = vowelsCount[vowels.indexOf(char)]\n                                      \
    \      ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelsCountIndex = 0\n    var\
    \ vowelsCountMax = vowels.count\n    var vowelsCountMin = vowelsCountMax\n   \
    \ var vowelsCountSum = 0\n    var vowelsCountSumIndex = 0\n    var vowelsCountSumMax\
    \ = vowelsCountSum\n    var vowelsCountSumMin = vowelsCountSum\n    var vowelsCountSumSum\
    \ = 0\n    var vowelsCountSumSumIndex = 0\n    var vowelsCountSumSumMax = vowelsCountSumSum\n\
    \    var vowelsCountSumSumMin = vowelsCountSumSum\n    var vowelsCountSumSumSum\
    \ = 0\n    var vowelsCountSumSumSumIndex = 0\n    var vowelsCountSumSumSumMax\
    \ = vowelsCountSumSumSum\n    var vowelsCountSumSumSumMin = vowelsCountSumSumSum\n\
    \    var vowelsCountSumSumSumSum = 0\n    var vowelsCountSumSumSumSumIndex = 0\n\
    \    var vowelsCountSumSumSumSumMax = vowelsCountSumSumSumSum\n    var vowelsCountSumSumSumSumMin\
    \ = vowelsCountSumSumSumSum\n    var vowelsCountSumSumSumSumSum = 0\n    var vowelsCountSumSumSumSumSumIndex\
    \ = 0\n    var vowelsCountSumSumSumSumSumMax = vowelsCountSumSumSumSumSum\n  \
    \  var vowelsCountSumSumSumSumSumMin = vowelsCountSumSumSumSumSum\n    var vowelsCountSumSumSumSumSumSum\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumIndex = 0\n    var vowelsCountSumSumSumSumSumSumMax\
    \ = vowelsCountSumSumSumSumSumSum\n    var vowelsCountSumSumSumSumSumMin = vowelsCountSumSumSumSumSumSum\n\
    \    var vowelsCountSumSumSumSumSumSumSum = 0\n    var vowelsCountSumSumSumSumSumSumIndex\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumMax = vowelsCountSumSumSumSumSumSumSum\n\
    \    var vowelsCountSumSumSumSumSumSumMin = vowelsCountSumSumSumSumSumSumSum\n\
    \    var vowelsCountSumSumSumSumSumSumSumSum = 0\n    var vowelsCountSumSumSumSumSumSumSumIndex\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumSumMax = vowelsCountSumSumSumSumSumSumSum\n\
    \    var vowelsCountSumSumSumSumSumSumSumMin\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpe15vskg3.swift:37:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumMin'\n\
    \    var vowelsCountSumSumSumSumSumMin = vowelsCountSumSumSumSumSumSum\n     \
    \   ^\n/tmp/tmpe15vskg3.swift:33:9: note: 'vowelsCountSumSumSumSumSumMin' previously\
    \ declared here\n    var vowelsCountSumSumSumSumSumMin = vowelsCountSumSumSumSumSum\n\
    \        ^\n/tmp/tmpe15vskg3.swift:39:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumIndex'\n\
    \    var vowelsCountSumSumSumSumSumSumIndex = 0\n        ^\n/tmp/tmpe15vskg3.swift:35:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumIndex' previously declared here\n    var\
    \ vowelsCountSumSumSumSumSumSumIndex = 0\n        ^\n/tmp/tmpe15vskg3.swift:40:9:\
    \ error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumMax'\n    var\
    \ vowelsCountSumSumSumSumSumSumMax = vowelsCountSumSumSumSumSumSumSum\n      \
    \  ^\n/tmp/tmpe15vskg3.swift:36:9: note: 'vowelsCountSumSumSumSumSumSumMax' previously\
    \ declared here\n    var vowelsCountSumSumSumSumSumSumMax = vowelsCountSumSumSumSumSumSum\n\
    \        ^\n/tmp/tmpe15vskg3.swift:45:9: error: type annotation missing in pattern\n\
    \    var vowelsCountSumSumSumSumSumSumSumMin\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    vowels.append(\"y\")\n    \n    var vowelsCount\
    \ = vowels.count\n    \n    var vowelIndex = 0\n    \n    var vowelsCount = 0\n\
    \    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount\
    \ = 0\n    \n    var vowelsCount = 0\n    \n    var vowelsCount = 0\n    \n  \
    \  var vowelsCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp4pb0ztn_.swift:21:9: error: invalid redeclaration of 'vowelsCount'\n\
    \    var vowelsCount = 0\n        ^\n/tmp/tmp4pb0ztn_.swift:17:9: note: 'vowelsCount'\
    \ previously declared here\n    var vowelsCount = vowels.count\n        ^\n/tmp/tmp4pb0ztn_.swift:23:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    var vowelsCount = 0\n   \
    \     ^\n/tmp/tmp4pb0ztn_.swift:17:9: note: 'vowelsCount' previously declared\
    \ here\n    var vowelsCount = vowels.count\n        ^\n/tmp/tmp4pb0ztn_.swift:25:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    var vowelsCount = 0\n   \
    \     ^\n/tmp/tmp4pb0ztn_.swift:17:9: note: 'vowelsCount' previously declared\
    \ here\n    var vowelsCount = vowels.count\n        ^\n/tmp/tmp4pb0ztn_.swift:27:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    var vowelsCount = 0\n   \
    \     ^\n/tmp/tmp4pb0ztn_.swift:17:9: note: 'vowelsCount' previously declared\
    \ here\n    var vowelsCount = vowels.count\n        ^\n/tmp/tmp4pb0ztn_.swift:29:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    var vowelsCount = 0\n   \
    \     ^\n/tmp/tmp4pb0ztn_.swift:17:9: note: 'vowelsCount' previously declared\
    \ here\n    var vowelsCount = vowels.count\n        ^\n/tmp/tmp4pb0ztn_.swift:31:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    var vowelsCount = 0\n   \
    \     ^\n/tmp/tmp4pb0ztn_.swift:17:9: note: 'vowelsCount' previously declared\
    \ here\n    var vowelsCount = vowels.count\n        ^\n/tmp/tmp4pb0ztn_.swift:33:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    var vowelsCount = 0\n   \
    \     ^\n/tmp/tmp4pb0ztn_.swift:17:9: note: 'vowelsCount' previously declared\
    \ here\n    var vowelsCount = vowels.count\n        ^\n/tmp/tmp4pb0ztn_.swift:35:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    var vowelsCount = 0\n   \
    \     ^\n/tmp/tmp4pb0ztn_.swift:17:9: note: 'vowelsCount' previously declared\
    \ here\n    var vowelsCount = vowels.count\n        ^\n/tmp/tmp4pb0ztn_.swift:37:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    var vowelsCount = 0\n   \
    \     ^\n/tmp/tmp4pb0ztn_.swift:17:9: note: 'vowelsCount' previously declared\
    \ here\n    var vowelsCount = vowels.count\n      "
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = vowels.count\n    \n  \
    \  var vowelIndex = 0\n    \n    for char in word.characters.reverse() {\n   \
    \     if vowelIndex < vowelsCount {\n            if vowels[vowelIndex] == char\
    \ {\n                vowelIndex += 1\n            }\n        } else {\n      \
    \      return \"\"\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpx96kcyb2.swift:20:33: error: value of type 'String' has no member\
    \ 'reverse'\n    for char in word.characters.reverse() {\n                ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowelsCount =\
    \ vowels.characters.count\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels.first!)\n    \n    if vowelIndex == -1 { return \"\" }\n    \n    let\
    \ vowelsCount = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n    let vowelsCount = word.characters.count\n\
    \    \n    let vowelsCount = word.characters.count\n    \n    let vowelsCount\
    \ = word.characters.count\n    \n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6d67l8_t.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6d67l8_t.swift:12:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels.first!)\n                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp6d67l8_t.swift:14:19: error: binary operator\
    \ '==' cannot be applied to operands of type 'ReversedCollection<String>.Index?'\
    \ and 'Int'\n    if vowelIndex == -1 { return \"\" }\n       ~~~~~~~~~~ ^  ~~\n\
    /tmp/tmp6d67l8_t.swift:14:19: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Int, Int)\n    if vowelIndex == -1 { return \"\"\
    \ }\n                  ^\n/tmp/tmp6d67l8_t.swift:16:28: error: 'characters' is\
    \ unavailable: Please use String directly\n    let vowelsCount = word.characters.count\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6d67l8_t.swift:16:9: error: invalid redeclaration of\
    \ 'vowelsCount'\n    let vowelsCount = word.characters.count\n        ^\n/tmp/tmp6d67l8_t.swift:10:9:\
    \ note: 'vowelsCount' previously declared here\n    let vowelsCount = vowels.characters.count\n\
    \        ^\n/tmp/tmp6d67l8_t.swift:18:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsCount = word.characters.count\n  \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmp6d67l8_t.swift:18:9: error: invalid redeclaration of 'vowelsCount'\n\
    \    let vowelsCount = word.characters.count\n        ^\n/tmp/tmp6d67l8_t.swift:10:9:\
    \ n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelsArray = vowels.characters\n    var vowelsArrayCount\
    \ = vowelsArray.count\n    var vowelsArrayIndex = vowelsArray.startIndex\n   \
    \ var vowelsArrayLastIndex = vowelsArray.endIndex\n    var vowelsArrayFirstIndex\
    \ = vowelsArray.startIndex\n    var vowelsArrayLastIndex = vowelsArray.endIndex\n\
    \    var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n  \
    \  var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n  \
    \  var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n  \
    \  var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n  \
    \  var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n  \
    \  var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n  \
    \  var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n  \
    \  var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n  \
    \  var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n  \
    \  var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n  \
    \  var vowelsArrayFirstIndex: Int = 0\n    var vowelsArrayLastIndex: Int = 0\n\
    \    var vowelsArrayIndex: Int = 0\n    var vowelsArrayLastIndex: Int\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpj0b_pw2z.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpj0b_pw2z.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpj0b_pw2z.swift:16:9: error: invalid redeclaration of 'vowelsArrayLastIndex'\n\
    \    var vowelsArrayLastIndex = vowelsArray.endIndex\n        ^\n/tmp/tmpj0b_pw2z.swift:14:9:\
    \ note: 'vowelsArrayLastIndex' previously declared here\n    var vowelsArrayLastIndex\
    \ = vowelsArray.endIndex\n        ^\n/tmp/tmpj0b_pw2z.swift:17:9: error: invalid\
    \ redeclaration of 'vowelsArrayFirstIndex'\n    var vowelsArrayFirstIndex: Int\
    \ = 0\n        ^\n/tmp/tmpj0b_pw2z.swift:15:9: note: 'vowelsArrayFirstIndex' previously\
    \ declared here\n    var vowelsArrayFirstIndex = vowelsArray.startIndex\n    \
    \    ^\n/tmp/tmpj0b_pw2z.swift:18:9: error: invalid redeclaration of 'vowelsArrayLastIndex'\n\
    \    var vowelsArrayLastIndex: Int = 0\n        ^\n/tmp/tmpj0b_pw2z.swift:14:9:\
    \ note: 'vowelsArrayLastIndex' previously declared here\n    var vowelsArrayLastIndex\
    \ = vowelsArray.endIndex\n        ^\n/tmp/tmpj0b_pw2z.swift:19:9: error: invalid\
    \ redeclaration of 'vowelsArrayIndex'\n    var vowelsArrayIndex: Int = 0\n   \
    \     ^\n/tmp/tmpj0b_pw2z.swift:13:9: note: 'vowelsArrayIndex' previously declared\
    \ here\n    var vowelsArrayIndex = vowelsArray.startIndex\n        ^\n/tmp/tmpj0b_pw2z.swift:20:9:\
    \ error: invalid redeclaration of 'vowelsArrayLastIndex'\n    var vowelsArrayLastIndex:\
    \ Int = 0\n        ^\n/tmp/tmpj0b_pw2z.swift:14:9: note: 'vowelsArrayLastIndex'\
    \ previously declared here\n    var vowelsArrayLastIndex = vowelsArray.endIndex\n\
    \        ^\n/tmp/tmpj0b_pw2z.swift:21:9: error: invalid redec"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.count\n    var vowelIndex = 0\n    var vowelIndex2 = 0\n    var vowelIndex3\
    \ = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 = 0\n    var vowelIndex6 =\
    \ 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n    var vowelIndex9 = 0\n\
    \    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n    var vowelIndex12 = 0\n\
    \    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n    var vowelIndex15 = 0\n\
    \    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n    var vowelIndex18 = 0\n\
    \    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n    var vowelIndex21 = 0\n\
    \    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n    var vowelIndex24 = 0\n\
    \    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n    var vowelIndex27 = 0\n\
    \    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n    var vowelIndex30 = 0\n\
    \    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n    var vowelIndex33 = 0\n\
    \    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n    var vowelIndex36 = 0\n\
    \    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n    var vowelIndex39 = 0\n\
    \    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n    var vowelIndex42 = 0\n\
    \    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n    var vowelIndex45 = 0\n\
    \    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n    var vowelIndex48 = 0\n\
    \    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n    var vowelIndex51 = 0\n\
    \    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n    var vowelIndex54 = 0\n\
    \    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n    var vowelIndex57 = 0\n\
    \    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n    var vowelIndex60 = 0\n\
    \    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n    var vowelIndex63 = 0\n\
    \    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n    var vowelIndex66 = 0\n\
    \    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n    var vowelIndex69 = 0\n\
    \    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n    var vowelIndex72 = 0\n\
    \    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n    var vowelIndex75 = 0\n\
    \    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n    var vowelIndex78 = 0\n\
    \    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n    var vowelIndex81 = 0\n\
    \    var vowelIndex82 = 0\n    var vowelIndex83\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp246vczhj.swift:93:9: error: type annotation missing in pattern\n\
    \    var vowelIndex83\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"\", \"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    var vowelsCount = word.characters.count\n    \n    for index in 0..<vowelsCount\
    \ {\n        if vowels[index] == word.characters.last {\n            return word.substring(word.startIndex.advancedBy(index),\
    \ word.endIndex.advancedBy(index))\n        }\n    }\n    return \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpn4t7riiz.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpn4t7riiz.swift:13:26: error: type '((String.Element) throws -> Bool)\
    \ throws -> String.Element?' (aka '((Character) throws -> Bool) throws -> Optional<Character>')\
    \ cannot conform to 'StringProtocol'\n        if vowels[index] == word.characters.last\
    \ {\n                         ^\n/tmp/tmpn4t7riiz.swift:13:26: note: only concrete\
    \ types such as structs, enums and classes can conform to protocols\n        if\
    \ vowels[index] == word.characters.last {\n                         ^\n/tmp/tmpn4t7riiz.swift:13:26:\
    \ note: required by operator function '==' where 'RHS' = '((String.Element) throws\
    \ -> Bool) throws -> String.Element?' (aka '((Character) throws -> Bool) throws\
    \ -> Optional<Character>')\n        if vowels[index] == word.characters.last {\n\
    \                         ^\n/tmp/tmpn4t7riiz.swift:14:25: error: value of type\
    \ 'String' has no member 'substring'\n            return word.substring(word.startIndex.advancedBy(index),\
    \ word.endIndex.advancedBy(index))\n                   ~~~~ ^~~~~~~~~\n/tmp/tmpn4t7riiz.swift:14:51:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ return word.substring(word.startIndex.advancedBy(index), word.endIndex.advancedBy(index))\n\
    \                                  ~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpn4t7riiz.swift:14:84:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n           \
    \ return word.substring(word.startIndex.advancedBy(index), word.endIndex.advancedBy(index))\n\
    \                                                                     ~~~~~~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    var vowelIndex = 0\n    \n    for char in word.characters {\n\
    \        if vowels.contains(char) {\n            vowelIndex = vowels.firstIndex(of:\
    \ char)!\n            break\n        }\n    }\n    \n    if vowelIndex == 0 {\n\
    \        return \"\"\n    }\n    \n    var vowelIndex2 = vowelIndex - 1\n    \n\
    \    for char in word.characters {\n        if vowels.contains(char) {\n     \
    \       vowelIndex2 = vowels.firstIndex(of: char)!\n            break\n      \
    \  }\n    }\n    \n    if vowelIndex2 == 0 {\n        return \"\"\n    }\n   \
    \ \n    if vowelIndex2 > vowelIndex {\n        return \"\"\n    }\n    \n    var\
    \ vowelIndex3 = vowelIndex2\n    \n    for char in word.characters {\n       \
    \ if vowels.contains(char) {\n            vowelIndex3 = vowels.firstIndex(of:\
    \ char)!\n            break\n        }\n    }\n    \n    if vowelIndex3 == 0 {\n\
    \        return \"\"\n    }\n    \n    if vowelIndex3 > vowelIndex2 {\n      \
    \  return \"\"\n    }\n    \n    var vowelIndex4 = vowelIndex3\n    \n    for\
    \ char in word.characters {\n        if vowels.contains(char) {\n            vowelIndex4\
    \ = vowels.firstIndex(of: char)!\n            break\n        }\n    }\n    \n\
    \    if vowelIndex4 == 0 {\n        return \"\"\n    }\n    \n    if vowelIndex4\
    \ > vowelIndex3 {\n        return \"\"\n    }\n    \n    var vowelIndex5 = vowelIndex4\n\
    \    \n    for char in word.characters {\n        if vowels.contains(char) {\n\
    \            vowelIndex5 = vowels.firstIndex(of: char)!\n            break\n \
    \       }\n    }\n    \n    if vowelIndex5 == 0 {\n        return \"\"\n    }\n\
    \    \n    if vowelIndex5 > vowelIndex4 {\n        return \"\"\n    }\n    \n\
    \    var vowelIndex6 = vowelIndex5\n    \n    for char in word.characters {\n\
    \        if vowels.contains(char) {\n            vowelIndex6 = vowels.firstIndex(of:\
    \ char)!\n            break\n        }\n    }\n    \n    if vowelIndex6 == 0 {\n\
    \        return \"\"\n    }\n    \n    if vowelIndex6 > vowelIndex5 {\n      \
    \  return \"\"\n    }\n    \n    var vowelIndex7 = vowelIndex6\n    \n    for\
    \ char in word.characters {\n        if vowels.contains(char) {\n            vowelIndex7\
    \ = vowels.firstIndex(of: char)!\n            break\n        }\n    }\n    \n\
    \    if vowelIndex7 == 0 {\n        return \"\"\n    }\n    \n    if vowelIndex7\
    \ > vowelIndex6 {\n        return \"\"\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpx5kgvpec.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpx5kgvpec.swift:15:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpx5kgvpec.swift:16:48:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowelIndex = vowels.firstIndex(of: char)!\n                     \
    \                          ^\n/tmp/tmpx5kgvpec.swift:27:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in word.characters\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpx5kgvpec.swift:28:28: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n        if vowels.contains(char)\
    \ {\n                           ^\n/tmp/tmpx5kgvpec.swift:29:49: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \       vowelIndex2 = vowels.firstIndex(of: char)!\n                         \
    \                       ^\n/tmp/tmpx5kgvpec.swift:44:22: error: 'characters' is\
    \ unavailable: Please use String directly\n    for char in word.characters {\n\
    \                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpx5kgvpec.swift:45:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(char) {\n   \
    \                        ^\n/tmp/tmpx5kgvpec.swift:46:49: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            vowelIndex3\
    \ = vowels.firstIndex(of: char)!\n                                           \
    \     ^\n/tmp"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsArray =\
    \ vowels.characters\n    var vowelsArrayCount = vowels.characters.count\n    var\
    \ vowelsArrayIndex = vowels.characters.indices\n    var vowelsArrayLastIndex =\
    \ vowels.characters.last!\n    var vowelsArrayFirstIndex = vowels.characters.first!\n\
    \    var vowelsArrayLast = vowels.characters.last!\n    var vowelsArrayFirst =\
    \ vowels.characters.first!\n    var vowelsArrayLast2 = vowels.characters.last!\n\
    \    var vowelsArrayFirst2 = vowels.characters.first!\n    var vowelsArrayLast3\
    \ = vowels.characters.last!\n    var vowelsArrayFirst3 = vowels.characters.first!\n\
    \    var vowelsArrayLast4 = vowels.characters.last!\n    var vowelsArrayFirst4\
    \ = vowels.characters.first!\n    var vowelsArrayLast5 = vowels.characters.last!\n\
    \    var vowelsArrayFirst5 = vowels.characters.first!\n    var vowelsArrayLast6\
    \ = vowels.characters.last!\n    var vowelsArrayFirst6 = vowels.characters.first!\n\
    \    var vowelsArrayLast7 = vowels.characters.last!\n    var vowelsArrayFirst7\
    \ = vowels.characters.first!\n    var vowelsArrayLast8 = vowels.characters.last!\n\
    \    var vowelsArrayFirst8 = vowels.characters.first!\n    var vowelsArrayLast9\
    \ = vowels.characters.last!\n    var vowelsArrayFirst9 = vowels.characters.first!\n\
    \    var vowelsArrayLast10 = vowels.characters.last!\n    var vowelsArrayFirst10\
    \ = vowels.characters.first!\n    var vowelsArrayLast11 = vowels.characters.last!\n\
    \    var vowelsArrayFirst11 = vowels.characters.first!\n    var vowelsArrayLast12\
    \ = vowels.characters.last!\n    var vowelsArrayFirst12 = vowels.characters.first!\n\
    \    var vowelsArrayLast13 = vowels.characters.last!\n    var vowelsArrayFirst13\
    \ = vowels.characters.first!\n    var vowelsArrayLast14 = vowels.characters.last!\n\
    \    var vowelsArrayFirst14 = vowels.characters.first!\n    var vowelsArrayLast15\
    \ = vowels.characters.last!\n    var vowelsArrayFirst15 = vowels.characters.first!\n\
    \    var vowelsArrayLast16 = vowels.characters.last!\n    var vowelsArrayFirst16\
    \ = vowels.characters.first!\n    var vowelsArrayLast17 = vowels.characters.last!\n\
    \    var vowelsArrayFirst17 = vowels.characters.first!\n    var vowelsArrayLast18\
    \ = vowels.characters.last!\n    var vowelsArrayFirst18 = vowels.characters.first!\n\
    \    var vowelsArrayLast\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmperbo5n5i.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmperbo5n5i.swift:11:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArrayCount = vowels.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmperbo5n5i.swift:12:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelsArrayIndex = vowels.characters.indices\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmperbo5n5i.swift:13:39: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelsArrayLastIndex = vowels.characters.last!\n\
    \                                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmperbo5n5i.swift:14:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelsArrayFirstIndex = vowels.characters.first!\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmperbo5n5i.swift:15:34: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelsArrayLast = vowels.characters.last!\n\
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmperbo5n5i.swift:16:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelsArrayFirst = vowels.characters.first"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelsArray = vowels.characters\n    var vowelsArrayCount\
    \ = vowelsArray.count\n    var vowelsArrayIndex = vowelsArray.index(of: \"a\"\
    )\n    var vowelsArrayIndex2 = vowelsArray.index(of: \"e\")\n    var vowelsArrayIndex3\
    \ = vowelsArray.index(of: \"i\")\n    var vowelsArrayIndex4 = vowelsArray.index(of:\
    \ \"o\")\n    var vowelsArrayIndex5 = vowelsArray.index(of: \"u\")\n    var vowelsArrayIndex6\
    \ = vowelsArray.index(of: \"A\")\n    var vowelsArrayIndex7 = vowelsArray.index(of:\
    \ \"E\")\n    var vowelsArrayIndex8 = vowelsArray.index(of: \"I\")\n    var vowelsArrayIndex9\
    \ = vowelsArray.index(of: \"O\")\n    var vowelsArrayIndex10 = vowelsArray.index(of:\
    \ \"U\")\n    var vowelsArrayIndex11 = vowelsArray.index(of: \"a\")\n    var vowelsArrayIndex12\
    \ = vowelsArray.index(of: \"e\")\n    var vowelsArrayIndex13 = vowelsArray.index(of:\
    \ \"i\")\n    var vowelsArrayIndex14 = vowelsArray.index(of: \"o\")\n    var vowelsArrayIndex15\
    \ = vowelsArray.index(of: \"u\")\n    var vowelsArrayIndex16 = vowelsArray.index(of:\
    \ \"A\")\n    var vowelsArrayIndex17 = vowelsArray.index(of: \"E\")\n    var vowelsArrayIndex18\
    \ = vowelsArray.index(of: \"I\")\n    var vowelsArrayIndex19 = vowelsArray.index(of:\
    \ \"O\")\n    var vowelsArrayIndex20 = vowelsArray.index(of: \"U\")\n    var vowelsArrayIndex21\
    \ = vowelsArray.index(of: \"a\")\n    var vowelsArrayIndex22 = vowelsArray.index(of:\
    \ \"e\")\n    var vowelsArrayIndex23 = vowelsArray.index(of: \"i\")\n    var vowelsArrayIndex24\
    \ = vowelsArray.index(of: \"o\")\n    var vowelsArrayIndex25 = vowelsArray.index(of:\
    \ \"u\")\n    var vowelsArrayIndex26 = vowelsArray.index(of: \"A\")\n    var vowelsArrayIndex27\
    \ = vowelsArray.index(of: \"E\")\n    var vowelsArrayIndex28 = vowelsArray.index(of:\
    \ \"I\")\n    var vowelsArrayIndex29 = vowelsArray.index(of: \"O\")\n    var vowelsArrayIndex30\
    \ = vowelsArray.index(of: \"U\")\n    var vowelsArrayIndex31 = vowelsArray.\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpieexfu04.swift:43:41: error: expected member name following '.'\n\
    \    var vowelsArrayIndex31 = vowelsArray.\n                                 \
    \       ^\n/tmp/tmpieexfu04.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpieexfu04.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpieexfu04.swift:13:40: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n    var vowelsArrayIndex = vowelsArray.index(of: \"a\"\
    )\n                                       ^\n/tmp/tmpieexfu04.swift:13:40: note:\
    \ use 'firstIndex(of:)' instead\n    var vowelsArrayIndex = vowelsArray.index(of:\
    \ \"a\")\n                                       ^~~~~\n                     \
    \                  firstIndex\n/tmp/tmpieexfu04.swift:14:41: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    var vowelsArrayIndex2 = vowelsArray.index(of:\
    \ \"e\")\n                                        ^\n/tmp/tmpieexfu04.swift:14:41:\
    \ note: use 'firstIndex(of:)' instead\n    var vowelsArrayIndex2 = vowelsArray.index(of:\
    \ \"e\")\n                                        ^~~~~\n                    \
    \                    firstIndex\n/tmp/tmpieexfu04.swift:15:41: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    var vowelsArrayIndex3 = vowelsArray.index(of:\
    \ \"i\")\n                                        ^\n/tmp/tmpieexfu04.swift:15:41:\
    \ note: use 'firstIndex(of:)' instead\n    var vowelsArrayIndex3 = vowelsArray.index(of:\
    \ \"i\")\n                                        ^~~~~\n                    \
    \                    firstIndex\n/tmp/tmpieexfu04.swift:16:41: warning: 'index(of:)'\
    \ is d"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelIndex = 0\n    var vowelCount = 0\n  \
    \  var vowelIndex2 = vowels.characters.count\n    var vowelCount2 = 0\n    var\
    \ vowelIndex3 = vowels.characters.count\n    var vowelCount3 = 0\n    var vowelIndex4\
    \ = vowels.characters.count\n    var vowelCount4 = 0\n    var vowelIndex5 = vowels.characters.count\n\
    \    var vowelCount5 = 0\n    var vowelIndex6 = vowels.characters.count\n    var\
    \ vowelCount6 = 0\n    var vowelIndex7 = vowels.characters.count\n    var vowelCount7\
    \ = 0\n    var vowelIndex8 = vowels.characters.count\n    var vowelCount8 = 0\n\
    \    var vowelIndex9 = vowels.characters.count\n    var vowelCount9 = 0\n    var\
    \ vowelIndex10 = vowels.characters.count\n    var vowelCount10 = 0\n    var vowelIndex11\
    \ = vowels.characters.count\n    var vowelCount11 = 0\n    var vowelIndex12 =\
    \ vowels.characters.count\n    var vowelCount12 = 0\n    var vowelIndex13 = vowels.characters.count\n\
    \    var vowelCount13 = 0\n    var vowelIndex14 = vowels.characters.count\n  \
    \  var vowelCount14 = 0\n    var vowelIndex15 = vowels.characters.count\n    var\
    \ vowelCount15 = 0\n    var vowelIndex16 = vowels.characters.count\n    var vowelCount16\
    \ = 0\n    var vowelIndex17 = vowels.characters.count\n    var vowelCount17 =\
    \ 0\n    var vowelIndex18 = vowels.characters.count\n    var vowelCount18 = 0\n\
    \    var vowelIndex19 = vowels.characters.count\n    var vowelCount19 = 0\n  \
    \  var vowelIndex20 = vowels.characters.count\n    var vowelCount20 = 0\n    var\
    \ vowelIndex21 = vowels.characters.count\n    var vowelCount21 = 0\n    var vowelIndex22\
    \ = vowels.characters.count\n    var vowelCount22 = 0\n    var vowelIndex23 =\
    \ vowels.characters.count\n    var vowelCount23 = 0\n    var vowelIndex24 = vowels.characters.count\n\
    \    var vowelCount24 = 0\n    var vowelIndex25 = vowels.characters.count\n  \
    \  var vowelCount25 = 0\n    var vowelIndex26 = vowels.characters.count\n    var\
    \ vowelCount26 = 0\n    var vowelIndex27 = vowels.characters.count\n    var vowelCount27\
    \ = 0\n    var vowelIndex28 = vowels.characters.count\n    var vowelCount28 =\
    \ 0\n    var vowelIndex29 = vowels.characters.count\n    var vowelCount29 = 0\n\
    \    var vowelIndex30 = vowels.characters.count\n    var vowelCount30 = 0\n  \
    \  var vowelIndex31 = vowels.characters.count\n    var vowelCount31 = 0\n    var\
    \ vowelIndex32 = vowels.characters.count\n    var vowelCount32\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpsy2rd379.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsy2rd379.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsy2rd379.swift:15:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex3 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsy2rd379.swift:17:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex4 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsy2rd379.swift:19:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex5 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsy2rd379.swift:21:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex6 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpsy2rd379.swift:23:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex7 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'c"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: vowels.first!)\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelIndex\
    \ == -1 || vowelsCount < 2 {\n        return \"\"\n    }\n    \n    let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: vowels[vowelIndex!])\n    \n   \
    \ let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n  \
    \  \n    if vowelIndex == -1 || vowelsCount < 2 {\n        return \"\"\n    }\n\
    \    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelIndex == -1 || vowelsCount < 2 {\n        return \"\"\n   \
    \ }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelIndex == -1 || vowelsCount < 2 {\n        return \"\"\n   \
    \ }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelIndex == -1 || vowelsCount < 2 {\n        return \"\"\n   \
    \ }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelIndex == -1 || vowelsCount < 2 {\n        return \"\"\n   \
    \ }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelIndex == -1 || vowelsCount < 2 {\n        return \"\"\n   \
    \ }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelIndex == -1 || vowelsCount < 2 {\n        return \"\"\n   \
    \ }\n    \n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels[vowelIndex!\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmprznnrkke.swift:79:1: error: expected ']' in expression list\n}\n\
    ^\n/tmp/tmprznnrkke.swift:78:70: note: to match this opening '['\n    let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: vowels[vowelIndex!\n           \
    \                                                          ^\n/tmp/tmprznnrkke.swift:12:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n                  \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprznnrkke.swift:14:27:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: vowels.first!)\n               \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmprznnrkke.swift:16:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmprznnrkke.swift:16:9: error: invalid redeclaration of\
    \ 'vowelsCount'\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n        ^\n/tmp/tmprznnrkke.swift:12:9: note: 'vowelsCount' previously\
    \ declared here\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n        ^\n/tmp/tmprznnrkke.swift:18:8: error: cannot convert value\
    \ of type 'ReversedCollection<String>.Index?' to expected argument type 'Int'\n\
    \    if vowelIndex == -1 || vowelsCount < 2 {\n       ^\n/tmp/tmprznnrkke.swift:22:81:\
    \ error: cannot convert value of type 'ReversedCollection<String>.Index' to expected\
    \ argument type 'String.Index'\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels[vowelIndex!])\n                     "
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelIndex2\
    \ = 0\n    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 =\
    \ 0\n    var vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n\
    \    var vowelIndex9 = 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n\
    \    var vowelIndex12 = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n\
    \    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n\
    \    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n\
    \    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n\
    \    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n\
    \    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n\
    \    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n\
    \    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n\
    \    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n\
    \    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n\
    \    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n\
    \    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n\
    \    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n\
    \    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n\
    \    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n\
    \    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n\
    \    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n\
    \    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n\
    \    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n\
    \    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n\
    \    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n\
    \    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n\
    \    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n\
    \    var vowelIndex81 = 0\n    var vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpuz98_nfp.swift:92:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelIndex2 = word.count\n    var vowelIndex3 = word.count\n    var vowelIndex4\
    \ = word.count\n    var vowelIndex5 = word.count\n    var vowelIndex6 = word.count\n\
    \    var vowelIndex7 = word.count\n    var vowelIndex8 = word.count\n    var vowelIndex9\
    \ = word.count\n    var vowelIndex10 = word.count\n    var vowelIndex11 = word.count\n\
    \    var vowelIndex12 = word.count\n    var vowelIndex13 = word.count\n    var\
    \ vowelIndex14 = word.count\n    var vowelIndex15 = word.count\n    var vowelIndex16\
    \ = word.count\n    var vowelIndex17 = word.count\n    var vowelIndex18 = word.count\n\
    \    var vowelIndex19 = word.count\n    var vowelIndex20 = word.count\n    var\
    \ vowelIndex21 = word.count\n    var vowelIndex22 = word.count\n    var vowelIndex23\
    \ = word.count\n    var vowelIndex24 = word.count\n    var vowelIndex25 = word.count\n\
    \    var vowelIndex26 = word.count\n    var vowelIndex27 = word.count\n    var\
    \ vowelIndex28 = word.count\n    var vowelIndex29 = word.count\n    var vowelIndex30\
    \ = word.count\n    var vowelIndex31 = word.count\n    var vowelIndex32 = word.count\n\
    \    var vowelIndex33 = word.count\n    var vowelIndex34 = word.count\n    var\
    \ vowelIndex35 = word.count\n    var vowelIndex36 = word.count\n    var vowelIndex37\
    \ = word.count\n    var vowelIndex38 = word.count\n    var vowelIndex39 = word.count\n\
    \    var vowelIndex40 = word.count\n    var vowelIndex41 = word.count\n    var\
    \ vowelIndex42 = word.count\n    var vowelIndex43 = word.count\n    var vowelIndex44\
    \ = word.count\n    var vowelIndex45 = word.count\n    var vowelIndex46 = word.count\n\
    \    var vowelIndex47 = word.count\n    var vowelIndex48 = word.count\n    var\
    \ vowelIndex49 = word.count\n    var vowelIndex50 = word.count\n    var vowelIndex51\
    \ = word.count\n    var vowelIndex52 = word.count\n    var vowelIndex53 = word.count\n\
    \    var vowelIndex54 = word.count\n    var vowelIndex55 = word.count\n    var\
    \ vowelIndex56 = word.count\n    var vowelIndex57 = word.count\n    var vowelIndex58\
    \ = word.count\n    var vowelIndex59 = word.count\n    var vowelIndex60 = word.count\n\
    \    var vowelIndex61 = word.count\n    var vowelIndex62 = word.count\n    var\
    \ vowelIndex63 = word.count\n    var vowelIndex64 = word.count\n    var vowelIndex65\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpkn5o_urz.swift:74:9: error: type annotation missing in pattern\n\
    \    var vowelIndex65\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowelsCount =\
    \ vowels.characters.count\n    \n    let vowelIndex = word.characters.reversed().enumerate().filter\
    \ { (index, element) -> Bool in\n        let isVowel = vowels.contains(element)\n\
    \        let isConsonant = element == \"a\" || element == \"e\" || element ==\
    \ \"i\" || element == \"o\" || element == \"u\"\n        return isVowel && isConsonant\n\
    \    }.first?.offset\n    \n    if vowelIndex == nil {\n        return \"\"\n\
    \    }\n    \n    let vowelsCount = vowels.characters.count\n    let vowelIndex\
    \ = vowelIndex!\n    let vowelsCount = vowels.characters.count\n    \n    let\
    \ consonantIndex = word.characters.reversed().enumerate().filter { (index, element)\
    \ -> Bool in\n        let isVowel = vowels.contains(element)\n        let isConsonant\
    \ = element == \"a\" || element == \"e\" || element == \"i\" || element == \"\
    o\" || element == \"u\"\n        return !isVowel && isConsonant\n    }.first?.offset\n\
    \    \n    if consonantIndex == nil {\n        return \"\"\n    }\n    \n    let\
    \ consonantIndex = consonantIndex!\n    let consonantCount = word.characters.count\n\
    \    \n    let vowelIndex = word.characters.reversed().enumerate().filter { (index,\
    \ element) -> Bool in\n        let isVowel = vowels.contains(element)\n      \
    \  let isConsonant = element == \"a\" || element == \"e\" || element == \"i\"\
    \ || element == \"o\" || element == \"u\"\n        return isVowel && isConsonant\n\
    \    }.first?.offset\n    \n    if vowelIndex == nil {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = vowelIndex!\n    let vowelsCount = vowels.characters.count\n\
    \    \n    let consonantIndex = word.characters.reversed().enumerate().filter\
    \ { (index, element) -> Bool in\n        let isVowel = vowels.contains(element)\n\
    \        let isConsonant = element == \"a\" || element == \"e\" || element ==\
    \ \"i\" || element == \"o\" || element == \"u\"\n        return !isVowel && isConsonant\n\
    \    }.first?.offset\n    \n    if consonantIndex == nil {\n        return \"\"\
    \n    }\n    \n    let consonantIndex = consonantIndex!\n    let consonantCount\
    \ = word.characters.count\n    \n    let vowelIndex = word.characters.reversed().enumerate().filter\
    \ { (index, element) -> Bool in\n        let isVowel = vowels.contains(element)\n\
    \        let isConsonan\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7dxb90sf.swift:95:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmp7dxb90sf.swift:8:48: note: to match this opening\
    \ '{'\nfunc get_closest_vowel(word: String) -> String {\n                    \
    \                           ^\n/tmp/tmp7dxb90sf.swift:10:30: error: 'characters'\
    \ is unavailable: Please use String directly\n    let vowelsCount = vowels.characters.count\n\
    \                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7dxb90sf.swift:16:14: error: type of expression is\
    \ ambiguous without more context\n    }.first?.offset\n~~~~~~~~~~~~~^~~~~~\n/tmp/tmp7dxb90sf.swift:22:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsCount\
    \ = vowels.characters.count\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp7dxb90sf.swift:22:9: error: invalid redeclaration\
    \ of 'vowelsCount'\n    let vowelsCount = vowels.characters.count\n        ^\n\
    /tmp/tmp7dxb90sf.swift:10:9: note: 'vowelsCount' previously declared here\n  \
    \  let vowelsCount = vowels.characters.count\n        ^\n/tmp/tmp7dxb90sf.swift:24:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsCount\
    \ = vowels.characters.count\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp7dxb90sf.swift:24:9: error: invalid redeclaration\
    \ of 'vowelsCount'\n    let vowelsCount = vowels.characters.count\n        ^\n\
    /tmp/tmp7dxb90sf.swift:10:9: note: 'vowelsCount' previously declared here\n  \
    \  let vowelsCount = vowels.characters.count\n        ^\n/tmp/tmp7dxb90sf.swift:30:14:\
    \ error: type of expression is ambiguous without more context\n    }.first?.offset\n\
    ~~~~~~~~~~~~~^~~~~~\n/tmp/tmp7dxb9"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = vowels.count\n    \n  \
    \  if vowelsCount == 0 {\n        return \"\"\n    }\n    \n    var vowelIndex\
    \ = 0\n    var vowelIndex2 = vowelsCount - 1\n    \n    while vowelIndex < vowelsCount\
    \ && vowelIndex2 < vowelsCount {\n        if word.rangeOfString(vowels[vowelIndex])\
    \ != nil {\n            vowelIndex = vowelIndex + 1\n        }\n        if word.rangeOfString(vowels[vowelIndex2])\
    \ != nil {\n            vowelIndex2 = vowelIndex2 + 1\n        }\n    }\n    \n\
    \    if vowelIndex == vowelsCount {\n        return \"\"\n    }\n    \n    if\
    \ word.rangeOfString(vowels[vowelIndex]) != nil {\n        return vowels[vowelIndex]\n\
    \    }\n    \n    if word.rangeOfString(vowels[vowelIndex2]) != nil {\n      \
    \  return vowels[vowelIndex2]\n    }\n    \n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpr827kt56.swift:26:17: error: value of type 'String' has no member\
    \ 'rangeOfString'\n        if word.rangeOfString(vowels[vowelIndex]) != nil {\n\
    \           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr827kt56.swift:29:17: error: value of\
    \ type 'String' has no member 'rangeOfString'\n        if word.rangeOfString(vowels[vowelIndex2])\
    \ != nil {\n           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr827kt56.swift:38:13: error:\
    \ value of type 'String' has no member 'rangeOfString'\n    if word.rangeOfString(vowels[vowelIndex])\
    \ != nil {\n       ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpr827kt56.swift:42:13: error: value\
    \ of type 'String' has no member 'rangeOfString'\n    if word.rangeOfString(vowels[vowelIndex2])\
    \ != nil {\n       ~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsArray =\
    \ vowels.characters\n    var vowelsArrayCount = vowels.characters.count\n    var\
    \ vowelsArrayIndex = 0\n    var vowelsArrayLastIndex = 0\n    var vowelsArrayLast\
    \ = vowelsArray[vowelsArrayLastIndex]\n    var vowelsArrayFirst = vowelsArray[0]\n\
    \    var vowelsArrayFirstIndex = vowelsArray.firstIndex(of: vowelsArrayFirst)\n\
    \    var vowelsArrayLastIndex = vowelsArray.lastIndex(of: vowelsArrayLast)\n \
    \   var vowelsArrayFirstLast = vowelsArray[vowelsArrayFirstIndex...vowelsArrayLastIndex]\n\
    \    var vowelsArrayFirstLastIndex = vowelsArrayFirstLast.index(of: vowelsArrayFirst)\n\
    \    var vowelsArrayFirstLastLast = vowelsArray[vowelsArrayFirstLastIndex...vowelsArrayLastIndex]\n\
    \    var vowelsArrayFirstLastLastIndex = vowelsArrayFirstLastLast.index(of: vowelsArrayLast)\n\
    \    var vowelsArrayFirstLastLastLast = vowelsArray[vowelsArrayFirstLastLastIndex...vowelsArrayLastIndex]\n\
    \    var vowelsArrayFirstLastLastLastIndex = vowelsArrayFirstLastLastLast.index(of:\
    \ vowelsArrayFirst)\n    var vowelsArrayFirstLastLastLastLast = vowelsArray[vowelsArrayFirstLastLastLastIndex...vowelsArrayLastIndex]\n\
    \    var vowelsArrayFirstLastLastLastLastIndex = vowelsArrayFirstLastLastLastLast.index(of:\
    \ vowelsArrayLast)\n    var vowelsArrayFirstLastLastLastLastLast = vowelsArray[vowelsArrayFirstLastLastLastLastIndex...vowelsArrayLastIndex]\n\
    \    var vowelsArrayFirstLastLastLastLastLastIndex = vowelsArrayFirstLastLastLastLastLast.index(of:\
    \ vowelsArrayFirst)\n    var vowelsArrayFirstLastLastLastLastLastLast = vowelsArray[vowelsArrayFirstLastLastLastLastLastIndex...vowelsArrayLastIndex]\n\
    \    var vowelsArrayFirstLastLastLastLastLastLastIndex = vowelsArrayFirstLastLastLastLastLastLast.index(of:\
    \ vowelsArrayLast)\n    var vowelsArrayFirstLastLastLastLastLastLastLast = vowelsArray[vowelsArrayFirstLastLastLastLastLastLastIndex...vowelsArrayLastIndex]\n\
    \    var vowelsArrayFirstLastLastLastLastLastLastLastIndex = vowelsArrayFirstLastLastLastLastLastLastLast.index(of:\
    \ vowelsArrayFirst)\n    var vowelsArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmps6layplq.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmps6layplq.swift:11:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArrayCount = vowels.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps6layplq.swift:14:27: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    var vowelsArrayLast\
    \ = vowelsArray[vowelsArrayLastIndex]\n                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmps6layplq.swift:15:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var vowelsArrayFirst = vowelsArray[0]\n   \
    \                        ^~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmps6layplq.swift:17:9: error: invalid\
    \ redeclaration of 'vowelsArrayLastIndex'\n    var vowelsArrayLastIndex = vowelsArray.lastIndex(of:\
    \ vowelsArrayLast)\n        ^\n/tmp/tmps6layplq.swift:13:9: note: 'vowelsArrayLastIndex'\
    \ previously declared here\n    var vowelsArrayLastIndex = 0\n        ^\n/tmp/tmps6layplq.swift:18:44:\
    \ error: value of optional type 'String.Index?' must be unwrapped to a value of\
    \ type 'String.Index'\n    var vowelsArrayFirstLast = vowelsArray[vowelsArrayFirstIndex...vowelsArrayLastIndex]\n\
    \                                           ^\n/tmp/tmps6layplq.swift:16:9: note:\
    \ short-circuit using 'guard' to exit this function early if the optional"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowels_count = vowels.count\n    var vowels_index = word.characters.reversed().enumerate().filter\
    \ { ($0.element.lowercased(), $0.offset) in\n        vowels_count -= 1\n     \
    \   vowels_count += vowels.count - vowels_index\n        return vowels_count >\
    \ 0\n    }.first?.offset\n    \n    if vowels_index == 0 {\n        return \"\"\
    \n    }\n    \n    var vowels_index = word.characters.reversed().enumerate().filter\
    \ { ($0.element.lowercased(), $0.offset) in\n        vowels_count -= 1\n     \
    \   vowels_count += vowels.count - vowels_index\n        return vowels_count >\
    \ 0\n    }.last?.offset\n    \n    if vowels_index == word.characters.count {\n\
    \        return \"\"\n    }\n    \n    return word.substringFromIndex(vowels_index).lowercased()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpabzvgs8a.swift:11:73: error: expected parameter name followed by\
    \ ':'\n    var vowels_index = word.characters.reversed().enumerate().filter {\
    \ ($0.element.lowercased(), $0.offset) in\n                                  \
    \                                      ^\n/tmp/tmpabzvgs8a.swift:11:98: error:\
    \ expected parameter name followed by ':'\n    var vowels_index = word.characters.reversed().enumerate().filter\
    \ { ($0.element.lowercased(), $0.offset) in\n                                \
    \                                                                 ^\n/tmp/tmpabzvgs8a.swift:21:73:\
    \ error: expected parameter name followed by ':'\n    var vowels_index = word.characters.reversed().enumerate().filter\
    \ { ($0.element.lowercased(), $0.offset) in\n                                \
    \                                        ^\n/tmp/tmpabzvgs8a.swift:21:98: error:\
    \ expected parameter name followed by ':'\n    var vowels_index = word.characters.reversed().enumerate().filter\
    \ { ($0.element.lowercased(), $0.offset) in\n                                \
    \                                                                 ^\n/tmp/tmpabzvgs8a.swift:15:14:\
    \ error: type of expression is ambiguous without more context\n    }.first?.offset\n\
    ~~~~~~~~~~~~~^~~~~~\n/tmp/tmpabzvgs8a.swift:25:13: error: type of expression is\
    \ ambiguous without more context\n    }.last?.offset\n~~~~~~~~~~~~^~~~~~\n/tmp/tmpabzvgs8a.swift:31:17:\
    \ error: value of type 'String' has no member 'substringFromIndex'\n    return\
    \ word.substringFromIndex(vowels_index).lowercased()\n           ~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    var vowelIndexEnd = word.count\n    \n    while vowelIndex < vowelIndexEnd\
    \ && vowels.contains(word[vowelIndex]) {\n        vowelIndex += 1\n    }\n   \
    \ \n    if vowelIndex == 0 {\n        return \"\"\n    }\n    \n    var vowelIndexStart\
    \ = word.count - 1\n    \n    while vowelIndexStart > 0 && vowels.contains(word[vowelIndexStart])\
    \ {\n        vowelIndexStart -= 1\n    }\n    \n    if vowelIndexStart == 0 {\n\
    \        return \"\"\n    }\n    \n    var vowelIndexMin = vowelIndex\n    var\
    \ vowelIndexMax = vowelIndex\n    \n    if vowelIndex < vowelIndexEnd {\n    \
    \    vowelIndexMax = vowelIndex\n    } else {\n        vowelIndexMin = vowelIndex\n\
    \        vowelIndexMax = vowelIndexEnd\n    }\n    \n    var vowelIndexMinEnd\
    \ = vowelIndex\n    var vowelIndexMaxEnd = vowelIndex\n    \n    if vowelIndex\
    \ < vowelIndexEnd {\n        vowelIndexMinEnd = vowelIndex\n    } else {\n   \
    \     vowelIndexMaxEnd = vowelIndex\n    }\n    \n    var vowelIndexMinStart =\
    \ vowelIndex\n    var vowelIndexMaxStart = vowelIndex\n    \n    if vowelIndex\
    \ < vowelIndexEnd {\n        vowelIndexMinStart = vowelIndex\n    } else {\n \
    \       vowelIndexMaxStart = vowelIndex\n    }\n    \n    if vowelIndex == 0 {\n\
    \        return \"\"\n    }\n    \n    var vowelIndexMin = vowelIndex\n    var\
    \ vowelIndexMax = vowelIndex\n    \n    if vowelIndex < vowelIndexEnd {\n    \
    \    vowelIndexMax = vowelIndex\n    } else {\n        vowelIndexMin = vowelIndex\n\
    \        vowelIndexMax = vowelIndexEnd\n    }\n    \n    var vowelIndexMinEnd\
    \ = vowelIndex\n    var vowelIndexMaxEnd = vowelIndex\n    \n    if vowelIndex\
    \ < vowelIndexEnd {\n        vowelIndexMinEnd = vowelIndex\n    } else {\n   \
    \     vowelIndexMaxEnd = vowelIndex\n    }\n    \n    var vowelIndexMinStart =\
    \ vowelIndex\n    var vowelIndexMaxStart = vowelIndex\n    \n    if vowelIndex\
    \ < vowelIndexEnd {\n        vowelIndexMinStart = vowelIndex\n    } else {\n \
    \       vowelIndexMaxStart = vowelIndex\n    }\n    \n    if vowelIndex == 0 {\n\
    \        return \"\"\n    }\n    \n    var vowelIndexMin = vowelIndex\n    var\
    \ vowelIndexMax = vowelIndex\n    \n    if vowelIndex < vowelIndexEnd {\n    \
    \    vowelIndexMax = vowelIndex\n    } else {\n        vowelIndexMin = vowelIndex\n\
    \        vowelIndexMax = vowelIndexEnd\n    }\n    \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwq09ays5.swift:15:57: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    while vowelIndex\
    \ < vowelIndexEnd && vowels.contains(word[vowelIndex]) {\n                   \
    \                                     ^~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpwq09ays5.swift:25:50: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n    while vowelIndexStart > 0 && vowels.contains(word[vowelIndexStart])\
    \ {\n                                                 ^~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwq09ays5.swift:65:9:\
    \ error: invalid redeclaration of 'vowelIndexMin'\n    var vowelIndexMin = vowelIndex\n\
    \        ^\n/tmp/tmpwq09ays5.swift:33:9: note: 'vowelIndexMin' previously declared\
    \ here\n    var vowelIndexMin = vowelIndex\n        ^\n/tmp/tmpwq09ays5.swift:66:9:\
    \ error: invalid redeclaration of 'vowelIndexMax'\n    var vowelIndexMax = vowelIndex\n\
    \        ^\n/tmp/tmpwq09ays5.swift:34:9: note: 'vowelIndexMax' previously declared\
    \ here\n    var vowelIndexMax = vowelIndex\n        ^\n/tmp/tmpwq09ays5.swift:75:9:\
    \ error: invalid redeclaration of 'vowelIndexMinEnd'\n    var vowelIndexMinEnd\
    \ = vowelIndex\n        ^\n/tmp/tmpwq09ays5.swift:43:9: note: 'vowelIndexMinEnd'\
    \ previously declared here\n    var vowelIndexMinEnd = vowelIndex\n        ^\n\
    /tmp/tmpwq09ays5.swift:76:9: error: invalid redeclaration of 'vowelIndexMaxEnd'\n\
    \    var vowelIndexMaxEnd = vowelIndex\n        ^\n/tmp/tmpwq09ays5.swift:44:9:\
    \ note: 'vowelIndexMaxEnd' previously declared here\n    var vowelIndexMaxEnd\
    \ = vowelIndex\n        ^\n/tmp/tmpwq09ays5.swift:84:9: error: invalid redeclaration\
    \ of 'vowelIndexMinStart'\n    var vowelIndexMinStart = vowelIndex\n        ^\n\
    /tmp/tmpwq09ays5.swift:52:9: note: 'vowelIndexMinStart' previo"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.count\n    var vowelIndex = 0\n    var vowelIndex2 = word.count - 1\n \
    \   var vowelIndex3 = word.count - 2\n    var vowelIndex4 = word.count - 3\n \
    \   var vowelIndex5 = word.count - 4\n    var vowelIndex6 = word.count - 5\n \
    \   var vowelIndex7 = word.count - 6\n    var vowelIndex8 = word.count - 7\n \
    \   var vowelIndex9 = word.count - 8\n    var vowelIndex10 = word.count - 9\n\
    \    var vowelIndex11 = word.count - 10\n    var vowelIndex12 = word.count - 11\n\
    \    var vowelIndex13 = word.count - 12\n    var vowelIndex14 = word.count - 13\n\
    \    var vowelIndex15 = word.count - 14\n    var vowelIndex16 = word.count - 15\n\
    \    var vowelIndex17 = word.count - 16\n    var vowelIndex18 = word.count - 17\n\
    \    var vowelIndex19 = word.count - 18\n    var vowelIndex20 = word.count - 19\n\
    \    var vowelIndex21 = word.count - 20\n    var vowelIndex22 = word.count - 21\n\
    \    var vowelIndex23 = word.count - 22\n    var vowelIndex24 = word.count - 23\n\
    \    var vowelIndex25 = word.count - 24\n    var vowelIndex26 = word.count - 25\n\
    \    var vowelIndex27 = word.count - 26\n    var vowelIndex28 = word.count - 27\n\
    \    var vowelIndex29 = word.count - 28\n    var vowelIndex30 = word.count - 29\n\
    \    var vowelIndex31 = word.count - 30\n    var vowelIndex32 = word.count - 31\n\
    \    var vowelIndex33 = word.count - 32\n    var vowelIndex34 = word.count - 33\n\
    \    var vowelIndex35 = word.count - 34\n    var vowelIndex36 = word.count - 35\n\
    \    var vowelIndex37 = word.count - 36\n    var vowelIndex38 = word.count - 37\n\
    \    var vowelIndex39 = word.count - 38\n    var vowelIndex40 = word.count - 39\n\
    \    var vowelIndex41 = word.count - 40\n    var vowelIndex42 = word.count - 41\n\
    \    var vowelIndex43 = word.count - 42\n    var vowelIndex44 = word.count - 43\n\
    \    var vowelIndex45 = word.count - 44\n    var vowelIndex46 = word.count - 45\n\
    \    var vowelIndex47 = word.count - 46\n    var vowelIndex48 = word.count - 47\n\
    \    var vowelIndex49 = word.count - 48\n    var vowelIndex50 = word.count - 49\n\
    \    var vowelIndex51 = word.count - 50\n    var vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnfwp2e5q.swift:62:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n\
    \    let vowelIndex = word.characters.reverse().firstIndex(of: vowels.last!)\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelsCount = word.characters.reverse().firstIndex(of: vowels[vowelIndex\
    \ + 1])\n    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n \
    \   let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex\
    \ + 1])\n    \n    return word.substring(to: vowelIndex).lowercased()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp850mxib7.swift:12:64: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    let vowelsCount =\
    \ word.characters.filter({ vowels.contains($0) }).count\n                    \
    \                                           ^\n/tmp/tmp850mxib7.swift:18:38: error:\
    \ value of type 'String' has no member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels.last!)\n                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp850mxib7.swift:24:39:\
    \ error: value of type 'String' has no member 'reverse'\n    let vowelsCount =\
    \ word.characters.reverse().firstIndex(of: vowels[vowelIndex + 1])\n         \
    \             ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp850mxib7.swift:30:38: error: value\
    \ of type 'String' has no member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels[vowelIndex + 1])\n                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp850mxib7.swift:32:17:\
    \ error: value of type 'String' has no member 'substring'\n    return word.substring(to:\
    \ vowelIndex).lowercased()\n           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelIndex2: Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4:\
    \ Int = 0\n    var vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var\
    \ vowelIndex7: Int = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int\
    \ = 0\n    var vowelIndex10: Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12:\
    \ Int = 0\n    var vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var\
    \ vowelIndex15: Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17:\
    \ Int = 0\n    var vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var\
    \ vowelIndex20: Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22:\
    \ Int = 0\n    var vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var\
    \ vowelIndex25: Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27:\
    \ Int = 0\n    var vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var\
    \ vowelIndex30: Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32:\
    \ Int = 0\n    var vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var\
    \ vowelIndex35: Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37:\
    \ Int = 0\n    var vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var\
    \ vowelIndex40: Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42:\
    \ Int = 0\n    var vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var\
    \ vowelIndex45: Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47:\
    \ Int = 0\n    var vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var\
    \ vowelIndex50: Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52:\
    \ Int = 0\n    var vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var\
    \ vowelIndex55: Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57:\
    \ Int = 0\n    var vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var\
    \ vowelIndex60: Int = 0\n    var vowelIndex61: Int = 0\n    var vowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzntk6dqx.swift:72:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    \n    var vowelsCount = 0\n    \n    for char in word.characters\
    \ {\n        if vowels.contains(char) {\n            vowelsCount += 1\n      \
    \  }\n    }\n    \n    if vowelsCount > 0 {\n        var vowelsCountMin = vowelsCount\n\
    \        var vowelsCountMax = vowelsCount\n        \n        for char in word.characters\
    \ {\n            if vowels.contains(char) {\n                if vowelsCount >\
    \ vowelsCountMin && vowelsCount < vowelsCountMax {\n                    return\
    \ char\n                }\n                \n                vowelsCountMax =\
    \ vowelsCount\n                vowelsCountMin = vowelsCount\n            }\n \
    \       }\n    }\n    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6qvyt3ck.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp6qvyt3ck.swift:15:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmp6qvyt3ck.swift:24:26:\
    \ error: 'characters' is unavailable: Please use String directly\n        for\
    \ char in word.characters {\n                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp6qvyt3ck.swift:25:32: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            if\
    \ vowels.contains(char) {\n                               ^\n/tmp/tmp6qvyt3ck.swift:27:28:\
    \ error: cannot convert return expression of type 'Character' to return type 'String'\n\
    \                    return char\n                           ^~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowelsCount =\
    \ vowels.characters.count\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n    let vowelsCount = vowels.characters.count\n    let vowelIndex =\
    \ word.characters.reversed().firstIndex(of: vowels)\n    if vowelIndex == nil\
    \ || vowelIndex == word.characters.count - 1 {\n        return \"\"\n    }\n \
    \   let vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n    let\
    \ vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n    if vowelIndex\
    \ == nil || vowelIndex == word.characters.count - 1 {\n        return \"\"\n \
    \   }\n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n\
    \    let vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n    if\
    \ vowelIndex == nil || vowelIndex == word.characters.count - 1 {\n        return\
    \ \"\"\n    }\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n\
    \    if vowelIndex == nil || vowelIndex == word.characters.count - 1 {\n     \
    \   return \"\"\n    }\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n\
    \    if vowelIndex == nil || vowelIndex == word.characters.count - 1 {\n     \
    \   return \"\"\n    }\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n\
    \    if vowelIndex == nil || vowelIndex == word.characters.count - 1 {\n     \
    \   return \"\"\n    }\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n\
    \    if vowelIndex == nil || vowelIndex == word.characters.count - 1 {\n     \
    \   return \"\"\n    }\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n\
    \    if vowelIndex == nil || vowelIndex == word.characters.count - 1 {\n     \
    \   return \"\"\n    }\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n\
    \    if vowelIndex == nil || vowelIndex == word.characters.count - 1 {\n     \
    \   return \"\"\n    }\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n    let vowelIndex = word.characters.reversed().firstIndex(of: vowels)\n\
    \    if vowelIndex == \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpoft4yn4l.swift:60:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpoft4yn4l.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpoft4yn4l.swift:11:64: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n    let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: vowels)\n                      \
    \                                         ^\n/tmp/tmpoft4yn4l.swift:12:30: error:\
    \ 'characters' is unavailable: Please use String directly\n    let vowelsCount\
    \ = vowels.characters.count\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpoft4yn4l.swift:12:9: error: invalid redeclaration\
    \ of 'vowelsCount'\n    let vowelsCount = vowels.characters.count\n        ^\n\
    /tmp/tmpoft4yn4l.swift:10:9: note: 'vowelsCount' previously declared here\n  \
    \  let vowelsCount = vowels.characters.count\n        ^\n/tmp/tmpoft4yn4l.swift:13:64:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n                                                               ^\n\
    /tmp/tmpoft4yn4l.swift:17:64: error: cannot convert value of type 'String' to\
    \ expected argument type 'String.Element' (aka 'Character')\n    let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: vowels)\n                      \
    \                                         ^\n/tmp/tmpoft4yn4l.swift:18:64: error:\
    \ cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n                                                               ^\n\
    /tmp/tmpof"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelIndex = 0\n    var vowelIndexEnd = vowels.characters.count\
    \ - 1\n    var vowelIndexStart = 0\n    var vowelIndexStartEnd = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd2 = vowels.characters.count - 1\n    var vowelIndexStartEnd3\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd4 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd5 = vowels.characters.count - 1\n    var vowelIndexStartEnd6\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd7 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd8 = vowels.characters.count - 1\n    var vowelIndexStartEnd9\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd10 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd11 = vowels.characters.count - 1\n    var vowelIndexStartEnd12\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd13 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd14 = vowels.characters.count - 1\n    var vowelIndexStartEnd15\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd16 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd17 = vowels.characters.count - 1\n    var vowelIndexStartEnd18\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd19 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd20 = vowels.characters.count - 1\n    var vowelIndexStartEnd21\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd22 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd23 = vowels.characters.count - 1\n    var vowelIndexStartEnd24\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd25 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd26 = vowels.characters.count - 1\n    var vowelIndexStartEnd27\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd28 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd29 = vowels.characters.count - 1\n    var vowelIndexStartEnd30\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd31 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd32 = vowels.characters.count - 1\n    var vowelIndexStartEnd33\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd34 = vowels.characters.count\
    \ - 1\n    var vowelIndexStartEnd35 = vowels.characters.count - 1\n    var vowelIndexStartEnd36\
    \ = vowels.characters.count - 1\n    var vowelIndexStartEnd37 = vowels.characters.count\
    \ - 1\n    var vowelIndexStart\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpawhu9n2i.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpawhu9n2i.swift:12:32: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndexEnd = vowels.characters.count - 1\n \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpawhu9n2i.swift:14:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndexStartEnd = vowels.characters.count\
    \ - 1\n                                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpawhu9n2i.swift:15:38: error: 'characters'\
    \ is unavailable: Please use String directly\n    var vowelIndexStartEnd2 = vowels.characters.count\
    \ - 1\n                                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpawhu9n2i.swift:16:38: error: 'characters'\
    \ is unavailable: Please use String directly\n    var vowelIndexStartEnd3 = vowels.characters.count\
    \ - 1\n                                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpawhu9n2i.swift:17:38: error: 'characters'\
    \ is unavailable: Please use String directly\n    var vowelIndexStartEnd4 = vowels.characters.count\
    \ - 1\n                                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpawhu9n2i.swift:18:38: error: 'characters'\
    \ is unavailable: Please use String directly\n    var vowelIndexStartEnd5"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    var vowelsIndexCount: [Int] = [0]\n    var vowelsIndexCountMax: Int\
    \ = vowelsIndexCount.max\n    var vowelsIndexCountMin: Int = vowelsIndexCount.min\n\
    \    var vowelsIndexCountSum: Int = vowelsIndexCount.reduce(0, +)\n    var vowelsIndexCountSumMax:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n    var vowelsIndexCountSumMin: Int\
    \ = vowelsIndexCount.reduce(Int.min, +)\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpdusgij8p.swift:35:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpdusgij8p.swift:13:53: error: cannot convert value of type '() ->\
    \ Int?' to specified type 'Int'\n    var vowelsIndexCountMax: Int = vowelsIndexCount.max\n\
    \                                   ~~~~~~~~~~~~~~~~~^~~\n/tmp/tmpdusgij8p.swift:14:53:\
    \ error: cannot convert value of type '() -> Int?' to specified type 'Int'\n \
    \   var vowelsIndexCountMin: Int = vowelsIndexCount.min\n                    \
    \               ~~~~~~~~~~~~~~~~~^~~\n/tmp/tmpdusgij8p.swift:20:9: error: invalid\
    \ redeclaration of 'vowelsIndexCountSumMaxIndex'\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n        ^\n/tmp/tmpdusgij8p.swift:18:9:\
    \ note: 'vowelsIndexCountSumMaxIndex' previously declared here\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n        ^\n/tmp/tmpdusgij8p.swift:21:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountSumMinIndex'\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n        ^\n/tmp/tmpdusgij8p.swift:19:9:\
    \ note: 'vowelsIndexCountSumMinIndex' previously declared here\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n        ^\n/tmp/tmpdusgij8p.swift:22:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountSumMaxIndex'\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n        ^\n/tmp/tmpdusgij8p.swift:18:9:\
    \ note: 'vowelsIndexCountSumMaxIndex' previously declared here\n    var vowelsIndexCountSumMaxIndex:\
    \ Int = vowelsIndexCount.reduce(Int.max, +)\n        ^\n/tmp/tmpdusgij8p.swift:23:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountSumMinIndex'\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n        ^\n/tmp/tmpdusgij8p.swift:19:9:\
    \ note: 'vowelsIndexCountSumMinIndex' previously declared here\n    var vowelsIndexCountSumMinIndex:\
    \ Int = vowelsIndexCount.reduce(Int.min, +)\n        ^\n/tmp/tmpdusgij8p.swift:24:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountSumMaxIndex'\n    var vowelsIndexC"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    var vowelIndex2 = word.count - 1\n    \n    var closestVowel = \"\"\
    \n    \n    while vowelIndex < word.count {\n        if vowels[vowelIndex] ==\
    \ word[vowelIndex2] {\n            closestVowel = vowels[vowelIndex]\n       \
    \     vowelIndex++\n            vowelIndex2--\n        } else {\n            vowelIndex++\n\
    \        }\n    }\n    \n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5p_ba1q3.swift:18:12: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if vowels[vowelIndex]\
    \ == word[vowelIndex2] {\n           ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp5p_ba1q3.swift:18:34: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n        if vowels[vowelIndex] == word[vowelIndex2] {\n           \
    \                      ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp5p_ba1q3.swift:19:34: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            closestVowel\
    \ = vowels[vowelIndex]\n                           ~~~~~~^~~~~~~~~~~~\n/tmp/tmp5p_ba1q3.swift:20:23:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  vowelIndex++\n                      ^~\n/tmp/tmp5p_ba1q3.swift:21:24: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n            vowelIndex2--\n\
    \                       ^~\n/tmp/tmp5p_ba1q3.swift:23:23: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n            vowelIndex++\n            \
    \          ^~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    var vowelIndex = 0\n    var vowelIndex2 = -1\n    \n    for char\
    \ in word.characters {\n        if vowels.contains(char) {\n            vowelIndex\
    \ = word.characters.index(of: char)\n            vowelIndex2 = word.characters.index(of:\
    \ char, offsetBy: 1)\n            break\n        }\n    }\n    \n    if vowelIndex\
    \ == -1 || vowelIndex2 == -1 {\n        return \"\"\n    }\n    \n    if vowelIndex\
    \ < vowelIndex2 {\n        return word.substring(to: vowelIndex + 1)\n    } else\
    \ {\n        return word.substring(to: vowelIndex2 + 1)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0uqso05z.swift:15:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp0uqso05z.swift:16:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmp0uqso05z.swift:17:42:\
    \ error: cannot assign value of type 'String.Index?' to type 'Int'\n         \
    \   vowelIndex = word.characters.index(of: char)\n                         ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n\
    /tmp/tmp0uqso05z.swift:18:43: error: no exact matches in call to instance method\
    \ 'index'\n            vowelIndex2 = word.characters.index(of: char, offsetBy:\
    \ 1)\n                                          ^\n/tmp/tmp0uqso05z.swift:18:43:\
    \ note: found candidate with type '(String.Index, Int) -> String.Index'\n    \
    \        vowelIndex2 = word.characters.index(of: char, offsetBy: 1)\n        \
    \                                  ^\n/tmp/tmp0uqso05z.swift:18:43: note: found\
    \ candidate with type '(String.Element) -> String.Index?' (aka '(Character) ->\
    \ Optional<String.Index>')\n            vowelIndex2 = word.characters.index(of:\
    \ char, offsetBy: 1)\n                                          ^\n/tmp/tmp0uqso05z.swift:18:43:\
    \ error: no 'index' candidates produce the expected contextual result type 'Int'\n\
    \            vowelIndex2 = word.characters.index(of: char, offsetBy: 1)\n    \
    \                                      ^\nSwift.String:9:17: note: 'index(_:offsetBy:)'\
    \ produces 'String.Index', not the expected contextual result type 'Int'\n   \
    \ public func index(_ i: String.Index, offsetBy distance: Int) -> String.Index\n\
    \                ^\nSwift.Collection:6:28: note: 'index(_:offsetBy:)' produces\
    \ 'String.Index', not the expected contextual result type 'Int'\n    @inlinable\
    \ public func index(_ i: Self.Index, offsetBy distance: Int) -> Self.Index\n \
    \                          ^\nSwift.Collection:3:"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsCountIndex: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsCountIndex2: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex3: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsCountIndex4: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsCountIndex5: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex6: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsCountIndex7: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsCountIndex8: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex9: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsCountIndex10: [Int] = [0, 1, 2, 3, 4]\n   \
    \ var vowelsCountIndex11: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex12:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex13: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex14: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex15:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex16: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex17: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex18:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex19: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex20: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex21:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex22: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex23: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex24:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex25: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex26: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex27:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex28: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex29: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex30:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex31: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex32: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex33:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex34: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex35: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex36:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex37: [\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmprhhlwud3.swift:48:30: error: expected element type\n    var vowelsCountIndex37:\
    \ [\n                             ^\n                              <#type#>\n\
    /tmp/tmprhhlwud3.swift:48:30: error: expected ']' in array type\n    var vowelsCountIndex37:\
    \ [\n                             ^\n/tmp/tmprhhlwud3.swift:48:29: note: to match\
    \ this opening '['\n    var vowelsCountIndex37: [\n                          \
    \  ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = word.characters.count - 1\n    var vowelIndex2\
    \ = word.characters.count - 2\n    var vowelIndex3 = word.characters.count - 3\n\
    \    var vowelIndex4 = word.characters.count - 4\n    var vowelIndex5 = word.characters.count\
    \ - 5\n    var vowelIndex6 = word.characters.count - 6\n    var vowelIndex7 =\
    \ word.characters.count - 7\n    var vowelIndex8 = word.characters.count - 8\n\
    \    var vowelIndex9 = word.characters.count - 9\n    var vowelIndex10 = word.characters.count\
    \ - 10\n    var vowelIndex11 = word.characters.count - 11\n    var vowelIndex12\
    \ = word.characters.count - 12\n    var vowelIndex13 = word.characters.count -\
    \ 13\n    var vowelIndex14 = word.characters.count - 14\n    var vowelIndex15\
    \ = word.characters.count - 15\n    var vowelIndex16 = word.characters.count -\
    \ 16\n    var vowelIndex17 = word.characters.count - 17\n    var vowelIndex18\
    \ = word.characters.count - 18\n    var vowelIndex19 = word.characters.count -\
    \ 19\n    var vowelIndex20 = word.characters.count - 20\n    var vowelIndex21\
    \ = word.characters.count - 21\n    var vowelIndex22 = word.characters.count -\
    \ 22\n    var vowelIndex23 = word.characters.count - 23\n    var vowelIndex24\
    \ = word.characters.count - 24\n    var vowelIndex25 = word.characters.count -\
    \ 25\n    var vowelIndex26 = word.characters.count - 26\n    var vowelIndex27\
    \ = word.characters.count - 27\n    var vowelIndex28 = word.characters.count -\
    \ 28\n    var vowelIndex29 = word.characters.count - 29\n    var vowelIndex30\
    \ = word.characters.count - 30\n    var vowelIndex31 = word.characters.count -\
    \ 31\n    var vowelIndex32 = word.characters.count - 32\n    var vowelIndex33\
    \ = word.characters.count - 33\n    var vowelIndex34 = word.characters.count -\
    \ 34\n    var vowelIndex35 = word.characters.count - 35\n    var vowelIndex36\
    \ = word.characters.count - 36\n    var vowelIndex37 = word.characters.count -\
    \ 37\n    var vowelIndex38 = word.characters.count - 38\n    var vowelIndex39\
    \ = word.characters.count - 39\n    var vowelIndex40 = word.characters.count -\
    \ 40\n    var vowelIndex41 = word.characters.count - 41\n    var vowelIndex42\
    \ = word.characters.count - 42\n    var vowelIndex43 = word.characters.count -\
    \ 43\n    var vowelIndex44 = word.characters.count - 44\n    var vowelIndex45\
    \ = word.characters.count - 45\n    var vowelIndex46 = word.characters.count -\
    \ 46\n    var vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjmx7oetf.swift:11:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex = word.characters.count - 1\n      \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjmx7oetf.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = word.characters.count - 2\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjmx7oetf.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex3 = word.characters.count - 3\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjmx7oetf.swift:14:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex4 = word.characters.count - 4\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjmx7oetf.swift:15:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex5 = word.characters.count - 5\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjmx7oetf.swift:16:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex6 = word.characters.count - 6\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjmx7oetf.swift:17:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex7 = word.characters.count - 7\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'cha"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowelIndex = 0\n    var vowelIndex2 = vowels.count\n    var vowelIndex3\
    \ = vowels.count - 1\n    var vowelIndex4 = vowels.count - 2\n    var vowelIndex5\
    \ = vowels.count - 3\n    var vowelIndex6 = vowels.count - 4\n    var vowelIndex7\
    \ = vowels.count - 5\n    var vowelIndex8 = vowels.count - 6\n    var vowelIndex9\
    \ = vowels.count - 7\n    var vowelIndex10 = vowels.count - 8\n    var vowelIndex11\
    \ = vowels.count - 9\n    var vowelIndex12 = vowels.count - 10\n    var vowelIndex13\
    \ = vowels.count - 11\n    var vowelIndex14 = vowels.count - 12\n    var vowelIndex15\
    \ = vowels.count - 13\n    var vowelIndex16 = vowels.count - 14\n    var vowelIndex17\
    \ = vowels.count - 15\n    var vowelIndex18 = vowels.count - 16\n    var vowelIndex19\
    \ = vowels.count - 17\n    var vowelIndex20 = vowels.count - 18\n    var vowelIndex21\
    \ = vowels.count - 19\n    var vowelIndex22 = vowels.count - 20\n    var vowelIndex23\
    \ = vowels.count - 21\n    var vowelIndex24 = vowels.count - 22\n    var vowelIndex25\
    \ = vowels.count - 23\n    var vowelIndex26 = vowels.count - 24\n    var vowelIndex27\
    \ = vowels.count - 25\n    var vowelIndex28 = vowels.count - 26\n    var vowelIndex29\
    \ = vowels.count - 27\n    var vowelIndex30 = vowels.count - 28\n    var vowelIndex31\
    \ = vowels.count - 29\n    var vowelIndex32 = vowels.count - 30\n    var vowelIndex33\
    \ = vowels.count - 31\n    var vowelIndex34 = vowels.count - 32\n    var vowelIndex35\
    \ = vowels.count - 33\n    var vowelIndex36 = vowels.count - 34\n    var vowelIndex37\
    \ = vowels.count - 35\n    var vowelIndex38 = vowels.count - 36\n    var vowelIndex39\
    \ = vowels.count - 37\n    var vowelIndex40 = vowels.count - 38\n    var vowelIndex41\
    \ = vowels.count - 39\n    var vowelIndex42 = vowels.count - 40\n    var vowelIndex43\
    \ = vowels.count - 41\n    var vowelIndex44 = vowels.count - 42\n    var vowelIndex45\
    \ = vowels.count - 43\n    var vowelIndex46 = vowels.count - 44\n    var vowelIndex47\
    \ = vowels.count - 45\n    var vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7zqyp1jl.swift:57:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n\
    \    \n    for char in word.characters.reverse() {\n        if vowels.contains(char)\
    \ {\n            if char == char.lowercased() {\n                result += char\n\
    \            } else {\n                result += char.uppercased()\n         \
    \   }\n        } else {\n            result += char\n        }\n    }\n    \n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpgh1dyrmy.swift:12:33: error: value of type 'String' has no member\
    \ 'reverse'\n    for char in word.characters.reverse() {\n                ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelIndex = 0\n    var vowelIndex2 = 0\n \
    \   var vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 = 0\n  \
    \  var vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n   \
    \ var vowelIndex9 = 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n  \
    \  var vowelIndex12 = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n\
    \    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n\
    \    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n\
    \    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n\
    \    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n\
    \    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n\
    \    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n\
    \    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n\
    \    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n\
    \    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n\
    \    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n\
    \    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n\
    \    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n\
    \    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n\
    \    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n\
    \    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n\
    \    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n\
    \    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n\
    \    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n\
    \    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n\
    \    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n\
    \    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n\
    \    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n\
    \    var vowelIndex81 = 0\n    var vowelIndex82 = 0\n    var vowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpeapg46d1.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpeapg46d1.swift:93:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelIndex2 = word.characters.count - 1\n    var vowelIndex3 = word.characters.count\
    \ - 2\n    var vowelIndex4 = word.characters.count - 3\n    var vowelIndex5 =\
    \ word.characters.count - 4\n    var vowelIndex6 = word.characters.count - 5\n\
    \    var vowelIndex7 = word.characters.count - 6\n    var vowelIndex8 = word.characters.count\
    \ - 7\n    var vowelIndex9 = word.characters.count - 8\n    var vowelIndex10 =\
    \ word.characters.count - 9\n    var vowelIndex11 = word.characters.count - 10\n\
    \    var vowelIndex12 = word.characters.count - 11\n    var vowelIndex13 = word.characters.count\
    \ - 12\n    var vowelIndex14 = word.characters.count - 13\n    var vowelIndex15\
    \ = word.characters.count - 14\n    var vowelIndex16 = word.characters.count -\
    \ 15\n    var vowelIndex17 = word.characters.count - 16\n    var vowelIndex18\
    \ = word.characters.count - 17\n    var vowelIndex19 = word.characters.count -\
    \ 18\n    var vowelIndex20 = word.characters.count - 19\n    var vowelIndex21\
    \ = word.characters.count - 20\n    var vowelIndex22 = word.characters.count -\
    \ 21\n    var vowelIndex23 = word.characters.count - 22\n    var vowelIndex24\
    \ = word.characters.count - 23\n    var vowelIndex25 = word.characters.count -\
    \ 24\n    var vowelIndex26 = word.characters.count - 25\n    var vowelIndex27\
    \ = word.characters.count - 26\n    var vowelIndex28 = word.characters.count -\
    \ 27\n    var vowelIndex29 = word.characters.count - 28\n    var vowelIndex30\
    \ = word.characters.count - 29\n    var vowelIndex31 = word.characters.count -\
    \ 30\n    var vowelIndex32 = word.characters.count - 31\n    var vowelIndex33\
    \ = word.characters.count - 32\n    var vowelIndex34 = word.characters.count -\
    \ 33\n    var vowelIndex35 = word.characters.count - 34\n    var vowelIndex36\
    \ = word.characters.count - 35\n    var vowelIndex37 = word.characters.count -\
    \ 36\n    var vowelIndex38 = word.characters.count - 37\n    var vowelIndex39\
    \ = word.characters.count - 38\n    var vowelIndex40 = word.characters.count -\
    \ 39\n    var vowelIndex41 = word.characters.count - 40\n    var vowelIndex42\
    \ = word.characters.count - 41\n    var vowelIndex43 = word.characters.count -\
    \ 42\n    var vowelIndex44 = word.characters.count - 43\n    var vowelIndex45\
    \ = word.characters.count - 44\n    var vowelIndex46 = word.characters.count -\
    \ 45\n    var vowelIndex47 = word.characters.count - 46\n    var vowelIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpo7uvj7ys.swift:11:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpo7uvj7ys.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex3 = word.characters.count - 2\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpo7uvj7ys.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex4 = word.characters.count - 3\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpo7uvj7ys.swift:14:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex5 = word.characters.count - 4\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpo7uvj7ys.swift:15:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex6 = word.characters.count - 5\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpo7uvj7ys.swift:16:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex7 = word.characters.count - 6\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpo7uvj7ys.swift:17:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex8 = word.characters.count - 7\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'c"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsCountMax = 0\n    var vowelsCountMin = 0\n    var vowelsCountSum\
    \ = 0\n    var vowelsCountSumMax = 0\n    var vowelsCountSumMin = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex\
    \ = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n\
    \    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var\
    \ vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex\
    \ = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n\
    \    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var\
    \ vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex\
    \ = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n\
    \    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var\
    \ vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp28ejc17a.swift:20:9: error: invalid redeclaration of 'vowelsCountSumMaxIndex'\n\
    \    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:18:9: note:\
    \ 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:21:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:19:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    var vowelsCountSumMinIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:22:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMaxIndex'\n    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:18:9:\
    \ note: 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:23:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:19:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    var vowelsCountSumMinIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:24:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMaxIndex'\n    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:18:9:\
    \ note: 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:25:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:19:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    var vowelsCountSumMinIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:26:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMaxIndex'\n    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:18:9:\
    \ note: 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:27:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:19:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    v"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsCountIndex2 = 0\n    var vowelsCountIndex3 = 0\n    var vowelsCountIndex4\
    \ = 0\n    var vowelsCountIndex5 = 0\n    var vowelsCountIndex6 = 0\n    var vowelsCountIndex7\
    \ = 0\n    var vowelsCountIndex8 = 0\n    var vowelsCountIndex9 = 0\n    var vowelsCountIndex10\
    \ = 0\n    var vowelsCountIndex11 = 0\n    var vowelsCountIndex12 = 0\n    var\
    \ vowelsCountIndex13 = 0\n    var vowelsCountIndex14 = 0\n    var vowelsCountIndex15\
    \ = 0\n    var vowelsCountIndex16 = 0\n    var vowelsCountIndex17 = 0\n    var\
    \ vowelsCountIndex18 = 0\n    var vowelsCountIndex19 = 0\n    var vowelsCountIndex20\
    \ = 0\n    var vowelsCountIndex21 = 0\n    var vowelsCountIndex22 = 0\n    var\
    \ vowelsCountIndex23 = 0\n    var vowelsCountIndex24 = 0\n    var vowelsCountIndex25\
    \ = 0\n    var vowelsCountIndex26 = 0\n    var vowelsCountIndex27 = 0\n    var\
    \ vowelsCountIndex28 = 0\n    var vowelsCountIndex29 = 0\n    var vowelsCountIndex30\
    \ = 0\n    var vowelsCountIndex31 = 0\n    var vowelsCountIndex32 = 0\n    var\
    \ vowelsCountIndex33 = 0\n    var vowelsCountIndex34 = 0\n    var vowelsCountIndex35\
    \ = 0\n    var vowelsCountIndex36 = 0\n    var vowelsCountIndex37 = 0\n    var\
    \ vowelsCountIndex38 = 0\n    var vowelsCountIndex39 = 0\n    var vowelsCountIndex40\
    \ = 0\n    var vowelsCountIndex41 = 0\n    var vowelsCountIndex42 = 0\n    var\
    \ vowelsCountIndex43 = 0\n    var vowelsCountIndex44 = 0\n    var vowelsCountIndex45\
    \ = 0\n    var vowelsCountIndex46 = 0\n    var vowelsCountIndex47 = 0\n    var\
    \ vowelsCountIndex48 = 0\n    var vowelsCountIndex49 = 0\n    var vowelsCountIndex50\
    \ = 0\n    var vowelsCountIndex51 = 0\n    var vowelsCountIndex52 = 0\n    var\
    \ vowelsCountIndex53 = 0\n    var vowelsCountIndex54 = 0\n    var vowelsCountIndex55\
    \ = 0\n    var vowelsCountIndex56 = 0\n    var vowelsCountIndex57 = 0\n    var\
    \ vowelsCountIndex58 = 0\n    var vowelsCountIndex59 = 0\n    var vowelsCountIndex60\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppkj3uht9.swift:72:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelsIndex:\
    \ Int = 0\n    var vowelsCountIndex: Int = 0\n    var vowelsCountIndex2: Int =\
    \ 0\n    var vowelsCountIndex3: Int = 0\n    var vowelsCountIndex4: Int = 0\n\
    \    var vowelsCountIndex5: Int = 0\n    var vowelsCountIndex6: Int = 0\n    var\
    \ vowelsCountIndex7: Int = 0\n    var vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9:\
    \ Int = 0\n    var vowelsCountIndex10: Int = 0\n    var vowelsCountIndex11: Int\
    \ = 0\n    var vowelsCountIndex12: Int = 0\n    var vowelsCountIndex13: Int =\
    \ 0\n    var vowelsCountIndex14: Int = 0\n    var vowelsCountIndex15: Int = 0\n\
    \    var vowelsCountIndex16: Int = 0\n    var vowelsCountIndex17: Int = 0\n  \
    \  var vowelsCountIndex18: Int = 0\n    var vowelsCountIndex19: Int = 0\n    var\
    \ vowelsCountIndex20: Int = 0\n    var vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22:\
    \ Int = 0\n    var vowelsCountIndex23: Int = 0\n    var vowelsCountIndex24: Int\
    \ = 0\n    var vowelsCountIndex25: Int = 0\n    var vowelsCountIndex26: Int =\
    \ 0\n    var vowelsCountIndex27: Int = 0\n    var vowelsCountIndex28: Int = 0\n\
    \    var vowelsCountIndex29: Int = 0\n    var vowelsCountIndex30: Int = 0\n  \
    \  var vowelsCountIndex31: Int = 0\n    var vowelsCountIndex32: Int = 0\n    var\
    \ vowelsCountIndex33: Int = 0\n    var vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35:\
    \ Int = 0\n    var vowelsCountIndex36: Int = 0\n    var vowelsCountIndex37: Int\
    \ = 0\n    var vowelsCountIndex38: Int = 0\n    var vowelsCountIndex39: Int =\
    \ 0\n    var vowelsCountIndex40: Int = 0\n    var vowelsCountIndex41: Int = 0\n\
    \    var vowelsCountIndex42: Int = 0\n    var vowelsCountIndex43: Int = 0\n  \
    \  var vowelsCountIndex44: Int = 0\n    var vowelsCountIndex45: Int = 0\n    var\
    \ vowelsCountIndex46: Int = 0\n    var vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48:\
    \ Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp48oiz30v.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmp48oiz30v.swift:10:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmp48oiz30v.swift:11:9: warning: variable 'vowelIndex' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelIndex: Int = 0\n        ^~~~~~~~~~\n\
    \        _\n/tmp/tmp48oiz30v.swift:12:9: warning: variable 'vowelsIndex' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex: Int =\
    \ 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmp48oiz30v.swift:13:9: warning: variable\
    \ 'vowelsCountIndex' was never used; consider replacing with '_' or removing it\n\
    \    var vowelsCountIndex: Int = 0\n        ^~~~~~~~~~~~~~~~\n        _\n/tmp/tmp48oiz30v.swift:14:9:\
    \ warning: variable 'vowelsCountIndex2' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex2: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmp48oiz30v.swift:15:9: warning: variable 'vowelsCountIndex3'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmp48oiz30v.swift:16:9:\
    \ warning: variable 'vowelsCountIndex4' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex4: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmp48oiz30v.swift:17:9: warning: variable 'vowelsCountIndex5'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCountIndex5:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~\n        _\n/tmp/tmp48oiz30v.swift:18:9:\
    \ warning: variable 'vowelsCountIndex6' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsCountIndex6: Int = 0\n        ^~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmp48oiz30v.swift:19:9: warning: variable 'vowelsCountIndex7'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsCou"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountMax: Int = vowels.count\n    var vowelsCountMin:\
    \ Int = vowels.count - 1\n    var vowelsCountSum: Int = 0\n    var vowelsCountSumMax:\
    \ Int = vowelsCountMax\n    var vowelsCountSumMin: Int = vowelsCountMin - 1\n\
    \    var vowelsCountSumSum: Int = 0\n    var vowelsCountSumSumMax: Int = vowelsCountSumMax\n\
    \    var vowelsCountSumSumMin: Int = vowelsCountSumMin - 1\n    var vowelsCountSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumMax: Int = vowelsCountSumSumMax\n    var\
    \ vowelsCountSumSumSumMin: Int = vowelsCountSumSumMin - 1\n    var vowelsCountSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumMax: Int = vowelsCountSumSumSumMax\n\
    \    var vowelsCountSumSumSumSumMin: Int = vowelsCountSumSumSumMin - 1\n    var\
    \ vowelsCountSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumMax:\
    \ Int = vowelsCountSumSumSumSumMax\n    var vowelsCountSumSumSumSumSumMin: Int\
    \ = vowelsCountSumSumSumSumMin - 1\n    var vowelsCountSumSumSumSumSumSum: Int\
    \ = 0\n    var vowelsCountSumSumSumSumSumSumMax: Int = vowelsCountSumSumSumSumSumSumMax\n\
    \    var vowelsCountSumSumSumSumSumSumMin: Int = vowelsCountSumSumSumSumSumMin\
    \ - 1\n    var vowelsCountSumSumSumSumSumSumSum: Int = 0\n    var vowelsCountSumSumSumSumSumSumSumMax:\
    \ Int = vowelsCountSumSumSumSumSumSumSumMax\n    var vowelsCountSumSumSumSumSumSumSumMin:\
    \ Int = vowelsCountSumSumSumSumSumSumSumSumMin - 1\n    var vowelsCountSumSumSumSumSumSumSumSum:\
    \ Int = 0\n    var vowelsCountSumSumSumSumSumSumSumSumMax: Int = vowelsCountSumSumSumSumSumSumSumSumMax\n\
    \    var vowelsCountSumSumSumSumSumSumSumMin: Int = vowelsCountSumSumSumSumSumSumSumSumMin\
    \ - 1\n    var vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0na_4h4r.swift:30:49: error: use of local variable 'vowelsCountSumSumSumSumSumSumMax'\
    \ before its declaration\n    var vowelsCountSumSumSumSumSumSumMax: Int = vowelsCountSumSumSumSumSumSumMax\n\
    \                                                ^\n/tmp/tmp0na_4h4r.swift:30:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumMax' declared here\n    var vowelsCountSumSumSumSumSumSumMax:\
    \ Int = vowelsCountSumSumSumSumSumSumMax\n        ^\n/tmp/tmp0na_4h4r.swift:33:52:\
    \ error: use of local variable 'vowelsCountSumSumSumSumSumSumSumMax' before its\
    \ declaration\n    var vowelsCountSumSumSumSumSumSumSumMax: Int = vowelsCountSumSumSumSumSumSumSumMax\n\
    \                                                   ^\n/tmp/tmp0na_4h4r.swift:33:9:\
    \ note: 'vowelsCountSumSumSumSumSumSumSumMax' declared here\n    var vowelsCountSumSumSumSumSumSumSumMax:\
    \ Int = vowelsCountSumSumSumSumSumSumSumMax\n        ^\n/tmp/tmp0na_4h4r.swift:34:52:\
    \ error: cannot find 'vowelsCountSumSumSumSumSumSumSumSumMin' in scope\n    var\
    \ vowelsCountSumSumSumSumSumSumSumMin: Int = vowelsCountSumSumSumSumSumSumSumSumMin\
    \ - 1\n                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0na_4h4r.swift:36:55: error: use of local variable 'vowelsCountSumSumSumSumSumSumSumSumMax'\
    \ before its declaration\n    var vowelsCountSumSumSumSumSumSumSumSumMax: Int\
    \ = vowelsCountSumSumSumSumSumSumSumSumMax\n                                 \
    \                     ^\n/tmp/tmp0na_4h4r.swift:36:9: note: 'vowelsCountSumSumSumSumSumSumSumSumMax'\
    \ declared here\n    var vowelsCountSumSumSumSumSumSumSumSumMax: Int = vowelsCountSumSumSumSumSumSumSumSumMax\n\
    \        ^\n/tmp/tmp0na_4h4r.swift:37:52: error: cannot find 'vowelsCountSumSumSumSumSumSumSumSumMin'\
    \ in scope\n    var vowelsCountSumSumSumSumSumSumSumMin: Int = vowelsCountSumSumSumSumSumSumSumSumMin\
    \ - 1\n                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0na_4h4r.swift:37:9: error: invalid redeclaration of 'vowelsCountSumSumSumSumSumSumSumMin'\n\
    \    var vowelsCountSumSumSumSumSumSumSumMin: Int = "
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsIndex2 = word.characters.reversed().filter({\
    \ vowels.contains($0) }).firstIndex(of: vowels.first!)\n    \n    if vowelsIndex\
    \ == 0 || vowelsIndex2 == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex3\
    \ = word.characters.reversed().filter({ vowels.contains($0) }).lastIndex(of: vowels.last!)\n\
    \    \n    if vowelsIndex3 == word.characters.count - 1 {\n        return \"\"\
    \n    }\n    \n    let vowelsIndex4 = word.characters.reversed().filter({ vowels.contains($0)\
    \ }).index(of: vowels.last!)\n    \n    let vowelsIndex5 = word.characters.reversed().filter({\
    \ vowels.contains($0) }).index(of: vowels.first!)\n    \n    if vowelsIndex4 ==\
    \ word.characters.count - 1 || vowelsIndex5 == 0 {\n        return \"\"\n    }\n\
    \    \n    let vowelsIndex6 = word.characters.reversed().filter({ vowels.contains($0)\
    \ }).index(of: vowels.first!, offsetBy: 1)\n    \n    if vowelsIndex6 == 0 {\n\
    \        return \"\"\n    }\n    \n    let vowelsIndex7 = word.characters.reversed().filter({\
    \ vowels.contains($0) }).index(of: vowels.first!, offsetBy: 2)\n    \n    if vowelsIndex7\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex8 = word.characters.reversed().filter({\
    \ vowels.contains($0) }).index(of: vowels.first!, offsetBy: 3)\n    \n    if vowelsIndex8\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex9 = word.characters.reversed().filter({\
    \ vowels.contains($0) }).index(of: vowels.first!, offsetBy: 4)\n    \n    if vowelsIndex9\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex10 = word.characters.reversed().filter({\
    \ vowels.contains($0) }).index(of: vowels.first!, offsetBy: 5)\n    \n    if vowelsIndex10\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex11 = word.characters.reversed().filter({\
    \ vowels.contains($0) }).index(of: vowels.first!\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpg1o0f4y4.swift:71:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpg1o0f4y4.swift:70:89: note: to match this opening '('\n    let vowelsIndex11\
    \ = word.characters.reversed().filter({ vowels.contains($0) }).index(of: vowels.first!\n\
    \                                                                            \
    \            ^\n/tmp/tmpg1o0f4y4.swift:12:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg1o0f4y4.swift:18:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpg1o0f4y4.swift:20:29: error: 'characters'\
    \ is unavailable: Please use String directly\n    let vowelsIndex2 = word.characters.reversed().filter({\
    \ vowels.contains($0) }).firstIndex(of: vowels.first!)\n                     \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpg1o0f4y4.swift:26:29:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsIndex3\
    \ = word.characters.reversed().filter({ vowels.contains($0) }).lastIndex(of: vowels.last!)\n\
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg1o0f4y4.swift:28:29: error: 'characters' is unavailable:\
    \ Please use String directly\n    if vowelsIndex3 == word.characters.count - 1\
    \ {\n                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.count\n    var vowelIndex = 0\n    var vowelIndex2 = word.count - 1\n \
    \   var vowelIndex3 = word.count - 2\n    var vowelIndex4 = word.count - 3\n \
    \   var vowelIndex5 = word.count - 4\n    var vowelIndex6 = word.count - 5\n \
    \   var vowelIndex7 = word.count - 6\n    var vowelIndex8 = word.count - 7\n \
    \   var vowelIndex9 = word.count - 8\n    var vowelIndex10 = word.count - 9\n\
    \    var vowelIndex11 = word.count - 10\n    var vowelIndex12 = word.count - 11\n\
    \    var vowelIndex13 = word.count - 12\n    var vowelIndex14 = word.count - 13\n\
    \    var vowelIndex15 = word.count - 14\n    var vowelIndex16 = word.count - 15\n\
    \    var vowelIndex17 = word.count - 16\n    var vowelIndex18 = word.count - 17\n\
    \    var vowelIndex19 = word.count - 18\n    var vowelIndex20 = word.count - 19\n\
    \    var vowelIndex21 = word.count - 20\n    var vowelIndex22 = word.count - 21\n\
    \    var vowelIndex23 = word.count - 22\n    var vowelIndex24 = word.count - 23\n\
    \    var vowelIndex25 = word.count - 24\n    var vowelIndex26 = word.count - 25\n\
    \    var vowelIndex27 = word.count - 26\n    var vowelIndex28 = word.count - 27\n\
    \    var vowelIndex29 = word.count - 28\n    var vowelIndex30 = word.count - 29\n\
    \    var vowelIndex31 = word.count - 30\n    var vowelIndex32 = word.count - 31\n\
    \    var vowelIndex33 = word.count - 32\n    var vowelIndex34 = word.count - 33\n\
    \    var vowelIndex35 = word.count - 34\n    var vowelIndex36 = word.count - 35\n\
    \    var vowelIndex37 = word.count - 36\n    var vowelIndex38 = word.count - 37\n\
    \    var vowelIndex39 = word.count - 38\n    var vowelIndex40 = word.count - 39\n\
    \    var vowelIndex41 = word.count - 40\n    var vowelIndex42 = word.count - 41\n\
    \    var vowelIndex43 = word.count - 42\n    var vowelIndex44 = word.count - 43\n\
    \    var vowelIndex45 = word.count - 44\n    var vowelIndex46 = word.count - 45\n\
    \    var vowelIndex47 = word.count - 46\n    var vowelIndex48 = word.count - 47\n\
    \    var vowelIndex49 = word.count - 48\n    var vowelIndex50 = word.count - 49\n\
    \    var vowelIndex51 = word.count - 50\n    var vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnfwp2e5q.swift:62:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsIndex = word.characters.filter({\
    \ vowels.contains($0) }).index(of: vowels.last!)\n    \n    let vowelsCount =\
    \ word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ > 1 {\n        return \"\"\n    }\n    \n    let consonantsCount = word.characters.filter({\
    \ !vowels.contains($0) }).count\n    \n    if consonantsCount > 1 {\n        return\
    \ \"\"\n    }\n    \n    let consonantsIndex = word.characters.index(of: vowels.last!)\n\
    \    \n    let consonantsCount = word.characters.filter({ !vowels.contains($0)\
    \ }).count\n    \n    if consonantsCount > 1 {\n        return \"\"\n    }\n \
    \   \n    let consonantsIndex = word.characters.index(of: vowels.last!)\n    \n\
    \    let consonantsCount = word.characters.filter({ !vowels.contains($0) }).count\n\
    \    \n    if consonantsCount > 1 {\n        return \"\"\n    }\n    \n    let\
    \ consonantsIndex = word.characters.index(of: vowels.last!)\n    \n    let consonantsCount\
    \ = word.characters.filter({ !vowels.contains($0) }).count\n    \n    if consonantsCount\
    \ > 1 {\n        return \"\"\n    }\n    \n    let consonantsIndex = word.characters.index(of:\
    \ vowels.last!)\n    \n    let consonantsCount = word.characters.filter({ !vowels.contains($0)\
    \ }).count\n    \n    if consonantsCount > 1 {\n        return \"\"\n    }\n \
    \   \n    let consonantsIndex = word.characters.index(of: vowels.last!)\n    \n\
    \    let consonantsCount = word.characters.filter({ !vowels.contains($0) }).count\n\
    \    \n    if consonantsCount > 1 {\n        return \"\"\n    }\n    \n    let\
    \ consonantsIndex = word.characters.index(of: vowels.last!)\n    \n    let consonantsCount\
    \ = word.characters.filter({ !vowels.contains($0) }).count\n    \n    if consonantsCount\
    \ > 1 {\n        return \"\"\n    }\n    \n    let consonantsIndex = word.characters.index(of:\
    \ vowels.last!)\n    \n    let consonantsCount = word.characters.filter({ !vowels.contains($0)\
    \ }).count\n    \n    if consonantsCount > 1 {\n        return \"\"\n    }\n \
    \   \n    let conson\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1xmln2r4.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1xmln2r4.swift:18:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: vowels.last!)\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp1xmln2r4.swift:18:71: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    let vowelsIndex = word.characters.filter({\
    \ vowels.contains($0) }).index(of: vowels.last!)\n                           \
    \                                           ^\n/tmp/tmp1xmln2r4.swift:18:71: note:\
    \ use 'firstIndex(of:)' instead\n    let vowelsIndex = word.characters.filter({\
    \ vowels.contains($0) }).index(of: vowels.last!)\n                           \
    \                                           ^~~~~\n                          \
    \                                            firstIndex\n/tmp/tmp1xmln2r4.swift:20:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n                  \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1xmln2r4.swift:20:9:\
    \ error: invalid redeclaration of 'vowelsCount'\n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n        ^\n/tmp/tmp1xmln2r4.swift:12:9: note:\
    \ 'vowelsCount' previously declared here\n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n        ^\n/tmp/tmp1xmln2r4.swift:26:32: error:\
    \ 'characters' is unavailable: Please use String directly\n    let consonantsCount\
    \ = word.c"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    for letter in word {\n        if\
    \ vowels.contains(letter) {\n            vowelsCount[vowels.indexOf(letter)!]\
    \ += 1\n        }\n    }\n    if vowelsCount.contains(0) {\n        return \"\"\
    \n    }\n    var closestVowel: Int = 0\n    var closestVowelCount: Int = vowelsCount[0]\n\
    \    for index in vowels.indices {\n        if vowelsCount[index] > closestVowelCount\
    \ {\n            closestVowel = index\n            closestVowelCount = vowelsCount[index]\n\
    \        }\n    }\n    return vowels[closestVowel]\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpt_x73s73.swift:12:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(letter) {\n \
    \                          ^\n/tmp/tmpt_x73s73.swift:13:32: error: value of type\
    \ '[String]' has no member 'indexOf'\n            vowelsCount[vowels.indexOf(letter)!]\
    \ += 1\n                        ~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountIndex2: Int = 0\n    var vowelsCountIndex3: Int\
    \ = 0\n    var vowelsCountIndex4: Int = 0\n    var vowelsCountIndex5: Int = 0\n\
    \    var vowelsCountIndex6: Int = 0\n    var vowelsCountIndex7: Int = 0\n    var\
    \ vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9: Int = 0\n    var vowelsCountIndex10:\
    \ Int = 0\n    var vowelsCountIndex11: Int = 0\n    var vowelsCountIndex12: Int\
    \ = 0\n    var vowelsCountIndex13: Int = 0\n    var vowelsCountIndex14: Int =\
    \ 0\n    var vowelsCountIndex15: Int = 0\n    var vowelsCountIndex16: Int = 0\n\
    \    var vowelsCountIndex17: Int = 0\n    var vowelsCountIndex18: Int = 0\n  \
    \  var vowelsCountIndex19: Int = 0\n    var vowelsCountIndex20: Int = 0\n    var\
    \ vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22: Int = 0\n    var vowelsCountIndex23:\
    \ Int = 0\n    var vowelsCountIndex24: Int = 0\n    var vowelsCountIndex25: Int\
    \ = 0\n    var vowelsCountIndex26: Int = 0\n    var vowelsCountIndex27: Int =\
    \ 0\n    var vowelsCountIndex28: Int = 0\n    var vowelsCountIndex29: Int = 0\n\
    \    var vowelsCountIndex30: Int = 0\n    var vowelsCountIndex31: Int = 0\n  \
    \  var vowelsCountIndex32: Int = 0\n    var vowelsCountIndex33: Int = 0\n    var\
    \ vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35: Int = 0\n    var vowelsCountIndex36:\
    \ Int = 0\n    var vowelsCountIndex37: Int = 0\n    var vowelsCountIndex38: Int\
    \ = 0\n    var vowelsCountIndex39: Int = 0\n    var vowelsCountIndex40: Int =\
    \ 0\n    var vowelsCountIndex41: Int = 0\n    var vowelsCountIndex42: Int = 0\n\
    \    var vowelsCountIndex43: Int = 0\n    var vowelsCountIndex44: Int = 0\n  \
    \  var vowelsCountIndex45: Int = 0\n    var vowelsCountIndex46: Int = 0\n    var\
    \ vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48: Int = 0\n    var vowelsCountIndex49\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpz0ur_6w0.swift:60:9: error: type annotation missing in pattern\n\
    \    var vowelsCountIndex49\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelsCountIndex: Int = 0\n    var vowelsCountIndex2: Int = 0\n\
    \    var vowelsCountIndex3: Int = 0\n    var vowelsCountIndex4: Int = 0\n    var\
    \ vowelsCountIndex5: Int = 0\n    var vowelsCountIndex6: Int = 0\n    var vowelsCountIndex7:\
    \ Int = 0\n    var vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9: Int\
    \ = 0\n    var vowelsCountIndex10: Int = 0\n    var vowelsCountIndex11: Int =\
    \ 0\n    var vowelsCountIndex12: Int = 0\n    var vowelsCountIndex13: Int = 0\n\
    \    var vowelsCountIndex14: Int = 0\n    var vowelsCountIndex15: Int = 0\n  \
    \  var vowelsCountIndex16: Int = 0\n    var vowelsCountIndex17: Int = 0\n    var\
    \ vowelsCountIndex18: Int = 0\n    var vowelsCountIndex19: Int = 0\n    var vowelsCountIndex20:\
    \ Int = 0\n    var vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22: Int\
    \ = 0\n    var vowelsCountIndex23: Int = 0\n    var vowelsCountIndex24: Int =\
    \ 0\n    var vowelsCountIndex25: Int = 0\n    var vowelsCountIndex26: Int = 0\n\
    \    var vowelsCountIndex27: Int = 0\n    var vowelsCountIndex28: Int = 0\n  \
    \  var vowelsCountIndex29: Int = 0\n    var vowelsCountIndex30: Int = 0\n    var\
    \ vowelsCountIndex31: Int = 0\n    var vowelsCountIndex32: Int = 0\n    var vowelsCountIndex33:\
    \ Int = 0\n    var vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35: Int\
    \ = 0\n    var vowelsCountIndex36: Int = 0\n    var vowelsCountIndex37: Int =\
    \ 0\n    var vowelsCountIndex38: Int = 0\n    var vowelsCountIndex39: Int = 0\n\
    \    var vowelsCountIndex40: Int = 0\n    var vowelsCountIndex41: Int = 0\n  \
    \  var vowelsCountIndex42: Int = 0\n    var vowelsCountIndex43: Int = 0\n    var\
    \ vowelsCountIndex44: Int = 0\n    var vowelsCountIndex45: Int = 0\n    var vowelsCountIndex46:\
    \ Int = 0\n    var vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48: Int\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_9g9l9c_.swift:60:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    \n    for char in word.characters.reversed() {\n        if vowels.contains(String(char))\
    \ {\n            vowelIndex = word.index(char, offsetBy: vowelIndex + 1)\n   \
    \     }\n    }\n    \n    if vowelIndex < word.characters.count {\n        return\
    \ String(word.characters.reversed()[vowelIndex])\n    }\n    \n    return \"\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpt2v79gkx.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpt2v79gkx.swift:16:37: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String.Index'\n            vowelIndex\
    \ = word.index(char, offsetBy: vowelIndex + 1)\n                             \
    \       ^\n/tmp/tmpt2v79gkx.swift:16:31: error: cannot assign value of type 'String.Index'\
    \ to type 'Int'\n            vowelIndex = word.index(char, offsetBy: vowelIndex\
    \ + 1)\n                         ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpt2v79gkx.swift:20:26: error: 'characters' is unavailable: Please use String\
    \ directly\n    if vowelIndex < word.characters.count {\n                    \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpt2v79gkx.swift:21:28:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ String(word.characters.reversed()[vowelIndex])\n                           ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsArray =\
    \ vowels.characters\n    var vowelsArrayCount = vowels.characters.count\n    var\
    \ vowelsArrayIndex = 0\n    var vowelsArrayLastIndex = 0\n    var vowelsArrayLastIndexCount\
    \ = 0\n    var vowelsArrayLastIndexCount2 = 0\n    var vowelsArrayLastIndexCount3\
    \ = 0\n    var vowelsArrayLastIndexCount4 = 0\n    var vowelsArrayLastIndexCount5\
    \ = 0\n    var vowelsArrayLastIndexCount6 = 0\n    var vowelsArrayLastIndexCount7\
    \ = 0\n    var vowelsArrayLastIndexCount8 = 0\n    var vowelsArrayLastIndexCount9\
    \ = 0\n    var vowelsArrayLastIndexCount10 = 0\n    var vowelsArrayLastIndexCount11\
    \ = 0\n    var vowelsArrayLastIndexCount12 = 0\n    var vowelsArrayLastIndexCount13\
    \ = 0\n    var vowelsArrayLastIndexCount14 = 0\n    var vowelsArrayLastIndexCount15\
    \ = 0\n    var vowelsArrayLastIndexCount16 = 0\n    var vowelsArrayLastIndexCount17\
    \ = 0\n    var vowelsArrayLastIndexCount18 = 0\n    var vowelsArrayLastIndexCount19\
    \ = 0\n    var vowelsArrayLastIndexCount20 = 0\n    var vowelsArrayLastIndexCount21\
    \ = 0\n    var vowelsArrayLastIndexCount22 = 0\n    var vowelsArrayLastIndexCount23\
    \ = 0\n    var vowelsArrayLastIndexCount24 = 0\n    var vowelsArrayLastIndexCount25\
    \ = 0\n    var vowelsArrayLastIndexCount26 = 0\n    var vowelsArrayLastIndexCount27\
    \ = 0\n    var vowelsArrayLastIndexCount28 = 0\n    var vowelsArrayLastIndexCount29\
    \ = 0\n    var vowelsArrayLastIndexCount30 = 0\n    var vowelsArrayLastIndexCount31\
    \ = 0\n    var vowelsArrayLastIndexCount32 = 0\n    var vowelsArrayLastIndexCount33\
    \ = 0\n    var vowelsArrayLastIndexCount34 = 0\n    var vowelsArrayLastIndexCount35\
    \ = 0\n    var vowelsArrayLastIndexCount36 = 0\n    var vowelsArrayLastIndexCount37\
    \ = 0\n    var vowelsArrayLastIndexCount38 = 0\n    var vowelsArrayLastIndexCount39\
    \ = 0\n    var vowelsArrayLastIndexCount40 = 0\n    var vowelsArrayLastIndexCount41\
    \ = 0\n    var vowelsArrayLastIndexCount42 = 0\n    var vowelsArrayLastIndexCount43\
    \ = 0\n    var vowelsArrayLastIndexCount44 = 0\n    var vowelsArrayLastIndexCount45\
    \ = 0\n    var vowelsArrayLastIndexCount46 = 0\n    var vowelsArrayLastIndexCount47\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpro19yt0u.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpro19yt0u.swift:11:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArrayCount = vowels.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpro19yt0u.swift:9:9: warning: variable 'vowels' was\
    \ never mutated; consider changing to 'let' constant\n    var vowels = \"aeiouAEIOU\"\
    \n    ~~~ ^\n    let\n/tmp/tmpro19yt0u.swift:10:9: warning: initialization of\
    \ variable 'vowelsArray' was never used; consider replacing with assignment to\
    \ '_' or removing it\n    var vowelsArray = vowels.characters\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpro19yt0u.swift:11:9: warning: initialization of variable 'vowelsArrayCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsArrayCount = vowels.characters.count\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpro19yt0u.swift:12:9: warning: initialization of variable 'vowelsArrayIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsArrayIndex = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpro19yt0u.swift:13:9:\
    \ warning: initialization of variable 'vowelsArrayLastIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsArrayLastIndex\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpro19yt0u.swift:14:9: warning:\
    \ initialization of variable 'vowelsArrayLastIndexCount' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsArrayLastIndexCount\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpro19yt0u.swift:15:9:\
    \ warning: initialization of variable 'vowelsArrayLastIndexCount2' was never used;\
    \ consider replac"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelIndex2: Int = 0\n    var vowelsCountIndex2: Int = 0\n\
    \    var vowelIndex3: Int = 0\n    var vowelsCountIndex3: Int = 0\n    var vowelIndex4:\
    \ Int = 0\n    var vowelsCountIndex4: Int = 0\n    var vowelIndex5: Int = 0\n\
    \    var vowelsCountIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var vowelsCountIndex6:\
    \ Int = 0\n    var vowelIndex7: Int = 0\n    var vowelsCountIndex7: Int = 0\n\
    \    var vowelIndex8: Int = 0\n    var vowelsCountIndex8: Int = 0\n    var vowelIndex9:\
    \ Int = 0\n    var vowelsCountIndex9: Int = 0\n    var vowelIndex10: Int = 0\n\
    \    var vowelsCountIndex10: Int = 0\n    var vowelIndex11: Int = 0\n    var vowelsCountIndex11:\
    \ Int = 0\n    var vowelIndex12: Int = 0\n    var vowelsCountIndex12: Int = 0\n\
    \    var vowelIndex13: Int = 0\n    var vowelsCountIndex13: Int = 0\n    var vowelIndex14:\
    \ Int = 0\n    var vowelsCountIndex14: Int = 0\n    var vowelIndex15: Int = 0\n\
    \    var vowelsCountIndex15: Int = 0\n    var vowelIndex16: Int = 0\n    var vowelsCountIndex16:\
    \ Int = 0\n    var vowelIndex17: Int = 0\n    var vowelsCountIndex17: Int = 0\n\
    \    var vowelIndex18: Int = 0\n    var vowelsCountIndex18: Int = 0\n    var vowelIndex19:\
    \ Int = 0\n    var vowelsCountIndex19: Int = 0\n    var vowelIndex20: Int = 0\n\
    \    var vowelsCountIndex20: Int = 0\n    var vowelIndex21: Int = 0\n    var vowelsCountIndex21:\
    \ Int = 0\n    var vowelIndex22: Int = 0\n    var vowelsCountIndex22: Int = 0\n\
    \    var vowelIndex23: Int = 0\n    var vowelsCountIndex23: Int = 0\n    var vowelIndex24:\
    \ Int = 0\n    var vowelsCountIndex24: Int = 0\n    var vowelIndex25: Int = 0\n\
    \    var vowelsCountIndex25: Int = 0\n    var vowelIndex26: Int = 0\n    var vowelsCountIndex26:\
    \ Int = 0\n    var vowelIndex27: Int = 0\n    var vowelsCountIndex27: Int = 0\n\
    \    var vowelIndex28: Int = 0\n    var vowelsCount\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzenwlspd.swift:66:9: error: type annotation missing in pattern\n\
    \    var vowelsCount\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelIndex2 = word.count - 1\n    var vowelIndex3 = word.count - 2\n\
    \    var vowelIndex4 = word.count - 3\n    var vowelIndex5 = word.count - 4\n\
    \    var vowelIndex6 = word.count - 5\n    var vowelIndex7 = word.count - 6\n\
    \    var vowelIndex8 = word.count - 7\n    var vowelIndex9 = word.count - 8\n\
    \    var vowelIndex10 = word.count - 9\n    var vowelIndex11 = word.count - 10\n\
    \    var vowelIndex12 = word.count - 11\n    var vowelIndex13 = word.count - 12\n\
    \    var vowelIndex14 = word.count - 13\n    var vowelIndex15 = word.count - 14\n\
    \    var vowelIndex16 = word.count - 15\n    var vowelIndex17 = word.count - 16\n\
    \    var vowelIndex18 = word.count - 17\n    var vowelIndex19 = word.count - 18\n\
    \    var vowelIndex20 = word.count - 19\n    var vowelIndex21 = word.count - 20\n\
    \    var vowelIndex22 = word.count - 21\n    var vowelIndex23 = word.count - 22\n\
    \    var vowelIndex24 = word.count - 23\n    var vowelIndex25 = word.count - 24\n\
    \    var vowelIndex26 = word.count - 25\n    var vowelIndex27 = word.count - 26\n\
    \    var vowelIndex28 = word.count - 27\n    var vowelIndex29 = word.count - 28\n\
    \    var vowelIndex30 = word.count - 29\n    var vowelIndex31 = word.count - 30\n\
    \    var vowelIndex32 = word.count - 31\n    var vowelIndex33 = word.count - 32\n\
    \    var vowelIndex34 = word.count - 33\n    var vowelIndex35 = word.count - 34\n\
    \    var vowelIndex36 = word.count - 35\n    var vowelIndex37 = word.count - 36\n\
    \    var vowelIndex38 = word.count - 37\n    var vowelIndex39 = word.count - 38\n\
    \    var vowelIndex40 = word.count - 39\n    var vowelIndex41 = word.count - 40\n\
    \    var vowelIndex42 = word.count - 41\n    var vowelIndex43 = word.count - 42\n\
    \    var vowelIndex44 = word.count - 43\n    var vowelIndex45 = word.count - 44\n\
    \    var vowelIndex46 = word.count - 45\n    var vowelIndex47 = word.count - 46\n\
    \    var vowelIndex48 = word.count - 47\n    var vowelIndex49 = word.count - 48\n\
    \    var vowelIndex50 = word.count - 49\n    var vowelIndex51 = word.count - 50\n\
    \    var vowelIndex52 = word.count - 51\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmprrxas4b8.swift:9:9: warning: initialization of immutable value\
    \ 'vowels' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let vowels = \"aeiouAEIOU\"\n    ~~~~^~~~~~\n    _\n/tmp/tmprrxas4b8.swift:10:9:\
    \ warning: initialization of variable 'vowelIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmprrxas4b8.swift:11:9: warning: initialization of variable 'vowelIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex2 = word.count - 1\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmprrxas4b8.swift:12:9:\
    \ warning: initialization of variable 'vowelIndex3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex3 = word.count - 2\n\
    \    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmprrxas4b8.swift:13:9: warning: initialization\
    \ of variable 'vowelIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelIndex4 = word.count - 3\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmprrxas4b8.swift:14:9: warning: initialization of variable 'vowelIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex5 = word.count - 4\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmprrxas4b8.swift:15:9:\
    \ warning: initialization of variable 'vowelIndex6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex6 = word.count - 5\n\
    \    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmprrxas4b8.swift:16:9: warning: initialization\
    \ of variable 'vowelIndex7' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelIndex7 = word.count - 6\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmprrxas4b8.swift:17:9: warning: initialization of variable 'vowelIndex8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex8 = word.count - 7\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmprrxas4b8.swift:18:9:\
    \ warning: initialization of variable 'vowelIndex9' was never used; consider replacing\
    \ with assignment to '_' or "
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n\
    \    let vowelIndex = word.characters.reversed().firstIndex(of: \"a\")!\n    \n\
    \    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelsCount > 0 {\n        let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ \"a\")!\n        \n        let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n        \n        if vowelsCount > 0 {\n            let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: \"a\")!\n            \n        \
    \    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \            \n            if vowelsCount > 0 {\n                let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: \"a\")!\n                \n    \
    \            let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \                \n                if vowelsCount > 0 {\n                    let\
    \ vowelIndex = word.characters.reversed().firstIndex(of: \"a\")!\n           \
    \         \n                    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                    \n                    if vowelsCount > 0 {\n \
    \                       let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ \"a\")!\n                        \n                        let vowelsCount =\
    \ word.characters.filter({ vowels.contains($0) }).count\n                    \
    \    \n                        if vowelsCount > 0 {\n                        \
    \    let vowelIndex = word.characters.reversed().firstIndex(of: \"a\")!\n    \
    \                        \n                            let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n                            \n               \
    \             if vowelsCount > 0 {\n                                let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: \"a\")!\n                      \
    \          \n                                let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n                                \n           \
    \                     if vowelsCount > 0 {\n                                 \
    \   let vowelIndex = word.characters.reversed().firstIndex(of: \"a\")!\n     \
    \                               \n                                    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n                  \
    \                  \n                                    if vowelsCount > 0 {\n\
    \                                        let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ \"a\")!\n                                        \n                        \
    \                let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                                        \n                       \
    \                 if vowelsCount > 0 {\n                                     \
    \       return \"\"\n                                        }\n             \
    \                       }\n                                }\n               \
    \             }\n                        }\n                    }\n          \
    \      }\n            }\n        }\n    }\n\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp2imlwl7q.swift:12:64: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    let vowelsCount =\
    \ word.characters.filter({ vowels.contains($0) }).count\n                    \
    \                                           ^\n/tmp/tmp2imlwl7q.swift:18:27: error:\
    \ 'characters' is unavailable: Please use String directly\n    let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: \"a\")!\n                      \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2imlwl7q.swift:20:64:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String'\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                                                               ^\n\
    /tmp/tmp2imlwl7q.swift:23:31: error: 'characters' is unavailable: Please use String\
    \ directly\n        let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ \"a\")!\n                              ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp2imlwl7q.swift:25:68: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n\
    \        let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \                                                                   ^\n/tmp/tmp2imlwl7q.swift:28:35:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ let vowelIndex = word.characters.reversed().firstIndex(of: \"a\")!\n       \
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2imlwl7q.swift:30:72: error: cannot convert value of\
    \ type 'String.Element' (aka 'Character') to expected argument type 'String'\n\
    \            let vowelsCount = word.characters.filter({ vowels.contai"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"]\n    var vowelIndex = 0\n    var vowelIndex2 = 0\n    var\
    \ vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 = 0\n    var vowelIndex6\
    \ = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n    var vowelIndex9 =\
    \ 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n    var vowelIndex12\
    \ = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n    var vowelIndex15\
    \ = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n    var vowelIndex18\
    \ = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n    var vowelIndex21\
    \ = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n    var vowelIndex24\
    \ = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n    var vowelIndex27\
    \ = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n    var vowelIndex30\
    \ = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n    var vowelIndex33\
    \ = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n    var vowelIndex36\
    \ = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n    var vowelIndex39\
    \ = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n    var vowelIndex42\
    \ = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n    var vowelIndex45\
    \ = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n    var vowelIndex48\
    \ = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n    var vowelIndex51\
    \ = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n    var vowelIndex54\
    \ = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n    var vowelIndex57\
    \ = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n    var vowelIndex60\
    \ = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n    var vowelIndex63\
    \ = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n    var vowelIndex66\
    \ = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n    var vowelIndex69\
    \ = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n    var vowelIndex72\
    \ = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n    var vowelIndex75\
    \ = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n    var vowelIndex78\
    \ = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n    var vowelIndex81\
    \ = 0\n    var vowelIndex82 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjb9dx9h2.swift:9:9: warning: variable 'vowels' was written to,\
    \ but never read\n    var vowels = [String]()\n        ^\n/tmp/tmpjb9dx9h2.swift:11:9:\
    \ warning: initialization of variable 'vowelIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpjb9dx9h2.swift:12:9: warning: initialization of variable 'vowelIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpjb9dx9h2.swift:13:9:\
    \ warning: initialization of variable 'vowelIndex3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpjb9dx9h2.swift:14:9: warning: initialization of variable 'vowelIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpjb9dx9h2.swift:15:9:\
    \ warning: initialization of variable 'vowelIndex5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex5 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpjb9dx9h2.swift:16:9: warning: initialization of variable 'vowelIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex6 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpjb9dx9h2.swift:17:9:\
    \ warning: initialization of variable 'vowelIndex7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex7 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpjb9dx9h2.swift:18:9: warning: initialization of variable 'vowelIndex8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex8 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpjb9dx9h2.swift:19:9:\
    \ warning: initialization of variable 'vowelIndex9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex9 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpjb9dx9h2.swift:20:9: warning: initialization of variable 'vowelIndex10'\
    \ was never used; consider repl"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex2: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex3: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex4:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex5: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex6: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex7:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex8: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex9: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex10:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex11: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex12: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex13:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex14: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex15: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex16:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex17: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex18: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex19:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex20: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex21: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex22:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex23: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex24: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex25:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex26: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex27: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex28:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex29: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex30: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex31:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex32: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex33: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex34:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex35: [Int] = [0, 1, 2, 3, 4]\n\
    \    var vowelsCountIndex36: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex37:\
    \ [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpmriz7ptm.swift:48:9: error: type annotation missing in pattern\n\
    \    var vowelsCountIndex\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountMax: Int = vowels.count\n    var vowelsCountMin:\
    \ Int = vowels.count - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax -\
    \ 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzs_lcy_7.swift:43:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpzs_lcy_7.swift:16:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:17:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:15:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmpzs_lcy_7.swift:18:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:19:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:15:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmpzs_lcy_7.swift:20:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:21:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:15:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmpzs_lcy_7.swift:22:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously decl"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = 0\n    var vowelIndex = 0\n    var vowelIndex2\
    \ = 0\n    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 =\
    \ 0\n    var vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n\
    \    var vowelIndex9 = 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n\
    \    var vowelIndex12 = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n\
    \    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n\
    \    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n\
    \    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n\
    \    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n\
    \    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n\
    \    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n\
    \    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n\
    \    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n\
    \    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n\
    \    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n\
    \    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n\
    \    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n\
    \    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n\
    \    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n\
    \    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n\
    \    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n\
    \    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n\
    \    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n\
    \    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n\
    \    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n\
    \    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n\
    \    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n\
    \    var vowelIndex81 = 0\n    var vowelIndex82 = 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzcfb75mj.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpzcfb75mj.swift:10:9:\
    \ warning: initialization of variable 'vowelsCount' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsCount = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzcfb75mj.swift:11:9: warning: initialization of variable 'vowelIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpzcfb75mj.swift:12:9:\
    \ warning: initialization of variable 'vowelIndex2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzcfb75mj.swift:13:9: warning: initialization of variable 'vowelIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpzcfb75mj.swift:14:9:\
    \ warning: initialization of variable 'vowelIndex4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex4 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzcfb75mj.swift:15:9: warning: initialization of variable 'vowelIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex5 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpzcfb75mj.swift:16:9:\
    \ warning: initialization of variable 'vowelIndex6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex6 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzcfb75mj.swift:17:9: warning: initialization of variable 'vowelIndex7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex7 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpzcfb75mj.swift:18:9:\
    \ warning: initialization of variable 'vowelIndex8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex8 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpzcfb75mj.swift:19:9: warning: ini"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelsCountIndex: Int = 0\n    var vowelsCountIndex2: Int = 0\n\
    \    var vowelsCountIndex3: Int = 0\n    var vowelsCountIndex4: Int = 0\n    var\
    \ vowelsCountIndex5: Int = 0\n    var vowelsCountIndex6: Int = 0\n    var vowelsCountIndex7:\
    \ Int = 0\n    var vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9: Int\
    \ = 0\n    var vowelsCountIndex10: Int = 0\n    var vowelsCountIndex11: Int =\
    \ 0\n    var vowelsCountIndex12: Int = 0\n    var vowelsCountIndex13: Int = 0\n\
    \    var vowelsCountIndex14: Int = 0\n    var vowelsCountIndex15: Int = 0\n  \
    \  var vowelsCountIndex16: Int = 0\n    var vowelsCountIndex17: Int = 0\n    var\
    \ vowelsCountIndex18: Int = 0\n    var vowelsCountIndex19: Int = 0\n    var vowelsCountIndex20:\
    \ Int = 0\n    var vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22: Int\
    \ = 0\n    var vowelsCountIndex23: Int = 0\n    var vowelsCountIndex24: Int =\
    \ 0\n    var vowelsCountIndex25: Int = 0\n    var vowelsCountIndex26: Int = 0\n\
    \    var vowelsCountIndex27: Int = 0\n    var vowelsCountIndex28: Int = 0\n  \
    \  var vowelsCountIndex29: Int = 0\n    var vowelsCountIndex30: Int = 0\n    var\
    \ vowelsCountIndex31: Int = 0\n    var vowelsCountIndex32: Int = 0\n    var vowelsCountIndex33:\
    \ Int = 0\n    var vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35: Int\
    \ = 0\n    var vowelsCountIndex36: Int = 0\n    var vowelsCountIndex37: Int =\
    \ 0\n    var vowelsCountIndex38: Int = 0\n    var vowelsCountIndex39: Int = 0\n\
    \    var vowelsCountIndex40: Int = 0\n    var vowelsCountIndex41: Int = 0\n  \
    \  var vowelsCountIndex42: Int = 0\n    var vowelsCountIndex43: Int = 0\n    var\
    \ vowelsCountIndex44: Int = 0\n    var vowelsCountIndex45: Int = 0\n    var vowelsCountIndex46:\
    \ Int = 0\n    var vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48: Int\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_9g9l9c_.swift:60:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = [0, 1, 2, 3, 4]\n    var vowelsIndexCount: [Int] = [0, 1, 2, 3, 4]\n    var\
    \ vowelsIndexCountMax: Int = 4\n    var vowelsIndexCountMin: Int = 0\n    var\
    \ vowelsIndexCountMinMax: Int = 4\n    var vowelsIndexCountMaxMin: Int = 4\n \
    \   var vowelsIndexCountMinMaxMax: Int = 4\n    var vowelsIndexCountMinMaxMinMax:\
    \ Int = 4\n    var vowelsIndexCountMinMaxMinMaxMax: Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMax:\
    \ Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMax: Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMax:\
    \ Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax: Int = 4\n    var\
    \ vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax: Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax:\
    \ Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax: Int = 4\n    var\
    \ vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax: Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax:\
    \ Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMax: Int = 4\n \
    \   var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMax: Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax: Int = 4\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMaxMax: Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax:\
    \ Int = 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int =\
    \ 4\n    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 4\n \
    \   var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 4\n    var\
    \ vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax: Int = 4\n    var vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpafu2rv55.swift:22:9: error: invalid redeclaration of 'vowelsIndexCountMinMaxMinMaxMaxMaxMax'\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMax: Int = 4\n        ^\n/tmp/tmpafu2rv55.swift:21:9:\
    \ note: 'vowelsIndexCountMinMaxMinMaxMaxMaxMax' previously declared here\n   \
    \ var vowelsIndexCountMinMaxMinMaxMaxMaxMax: Int = 4\n        ^\n/tmp/tmpafu2rv55.swift:24:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax'\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax: Int = 4\n        ^\n/tmp/tmpafu2rv55.swift:23:9:\
    \ note: 'vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax' previously declared here\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax: Int = 4\n        ^\n/tmp/tmpafu2rv55.swift:25:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax'\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax: Int = 4\n        ^\n/tmp/tmpafu2rv55.swift:23:9:\
    \ note: 'vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax' previously declared here\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMax: Int = 4\n        ^\n/tmp/tmpafu2rv55.swift:27:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax'\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax: Int = 4\n        ^\n/tmp/tmpafu2rv55.swift:26:9:\
    \ note: 'vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax' previously declared here\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax: Int = 4\n        ^\n/tmp/tmpafu2rv55.swift:28:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax'\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax: Int = 4\n        ^\n/tmp/tmpafu2rv55.swift:26:9:\
    \ note: 'vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax' previously declared here\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMax: Int = 4\n        ^\n/tmp/tmpafu2rv55.swift:30:9:\
    \ error: invalid redeclaration of 'vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMax'\n\
    \    var vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMax: Int = 4\n        ^\n\
    /tmp/tmpafu2rv55.swift:29:9: note: 'vowelsIndexCountMinMaxMinMaxMaxMaxMaxMaxMaxMax'\
    \ previously declared here\n    var vowelsIndexCountMinM"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = 0\n    var vowelsIndex = 0\n    var vowelsIndex2\
    \ = 0\n    var vowelsIndex3 = 0\n    var vowelsIndex4 = 0\n    var vowelsIndex5\
    \ = 0\n    var vowelsIndex6 = 0\n    var vowelsIndex7 = 0\n    var vowelsIndex8\
    \ = 0\n    var vowelsIndex9 = 0\n    var vowelsIndex10 = 0\n    var vowelsIndex11\
    \ = 0\n    var vowelsIndex12 = 0\n    var vowelsIndex13 = 0\n    var vowelsIndex14\
    \ = 0\n    var vowelsIndex15 = 0\n    var vowelsIndex16 = 0\n    var vowelsIndex17\
    \ = 0\n    var vowelsIndex18 = 0\n    var vowelsIndex19 = 0\n    var vowelsIndex20\
    \ = 0\n    var vowelsIndex21 = 0\n    var vowelsIndex22 = 0\n    var vowelsIndex23\
    \ = 0\n    var vowelsIndex24 = 0\n    var vowelsIndex25 = 0\n    var vowelsIndex26\
    \ = 0\n    var vowelsIndex27 = 0\n    var vowelsIndex28 = 0\n    var vowelsIndex29\
    \ = 0\n    var vowelsIndex30 = 0\n    var vowelsIndex31 = 0\n    var vowelsIndex32\
    \ = 0\n    var vowelsIndex33 = 0\n    var vowelsIndex34 = 0\n    var vowelsIndex35\
    \ = 0\n    var vowelsIndex36 = 0\n    var vowelsIndex37 = 0\n    var vowelsIndex38\
    \ = 0\n    var vowelsIndex39 = 0\n    var vowelsIndex40 = 0\n    var vowelsIndex41\
    \ = 0\n    var vowelsIndex42 = 0\n    var vowelsIndex43 = 0\n    var vowelsIndex44\
    \ = 0\n    var vowelsIndex45 = 0\n    var vowelsIndex46 = 0\n    var vowelsIndex47\
    \ = 0\n    var vowelsIndex48 = 0\n    var vowelsIndex49 = 0\n    var vowelsIndex50\
    \ = 0\n    var vowelsIndex51 = 0\n    var vowelsIndex52 = 0\n    var vowelsIndex53\
    \ = 0\n    var vowelsIndex54 = 0\n    var vowelsIndex55 = 0\n    var vowelsIndex56\
    \ = 0\n    var vowelsIndex57 = 0\n    var vowelsIndex58 = 0\n    var vowelsIndex59\
    \ = 0\n    var vowelsIndex60 = 0\n    var vowelsIndex61 = 0\n    var vowelsIndex62\
    \ = 0\n    var vowelsIndex63 = 0\n    var vowelsIndex64 = 0\n    var vowelsIndex65\
    \ = 0\n    var vowelsIndex66 = 0\n    var vowelsIndex67 = 0\n    var vowelsIndex68\
    \ = 0\n    var vowelsIndex69 = 0\n    var vowelsIndex70 = 0\n    var \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpxhou0ulg.swift:81:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpxhou0ulg.swift:9:9: warning: variable 'vowels' was never used; consider\
    \ replacing with '_' or removing it\n    var vowels: [String] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpxhou0ulg.swift:10:9:\
    \ warning: initialization of variable 'vowelsCount' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsCount = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpxhou0ulg.swift:11:9: warning: initialization of variable 'vowelsIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpxhou0ulg.swift:12:9:\
    \ warning: initialization of variable 'vowelsIndex2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex2 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpxhou0ulg.swift:13:9: warning: initialization\
    \ of variable 'vowelsIndex3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex3 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpxhou0ulg.swift:14:9: warning: initialization of variable 'vowelsIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex4 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpxhou0ulg.swift:15:9:\
    \ warning: initialization of variable 'vowelsIndex5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex5 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpxhou0ulg.swift:16:9: warning: initialization\
    \ of variable 'vowelsIndex6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex6 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpxhou0ulg.swift:17:9: warning: initialization of variable 'vowelsIndex7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex7 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpxhou0ulg.swift:18:9:\
    \ warning: initialization of variable 'vowelsIndex8' was never used; consider\
    \ replacing with assignment to '_' or removing i"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    \n    var vowelIndex:\
    \ Int = 0\n    var vowelCount: Int = 0\n    \n    for char in word.characters\
    \ {\n        if vowelsCount[vowelIndex] == 0 {\n            vowelIndex += 1\n\
    \        }\n        \n        if vowelsCount[vowelIndex] == vowelsCount[vowelIndex\
    \ - 1] {\n            vowelCount += 1\n        }\n        \n        if vowelsCount[vowelIndex]\
    \ == vowelsCount[vowelIndex + 1] {\n            vowelCount += 1\n        }\n \
    \       \n        if vowelsCount[vowelIndex] == vowelsCount[vowelIndex + 2] {\n\
    \            vowelCount += 1\n        }\n        \n        if vowelsCount[vowelIndex]\
    \ == vowelsCount[vowelIndex + 3] {\n            vowelCount += 1\n        }\n \
    \       \n        if vowelsCount[vowelIndex] == vowelsCount[vowelIndex + 4] {\n\
    \            vowelCount += 1\n        }\n        \n        if vowelsCount[vowelIndex]\
    \ == vowelsCount[vowelIndex + 5] {\n            vowelCount += 1\n        }\n \
    \       \n        if vowelsCount[vowelIndex] == vowelsCount[vowelIndex + 6] {\n\
    \            vowelCount += 1\n        }\n        \n        if vowelsCount[vowelIndex]\
    \ == vowelsCount[vowelIndex + 7] {\n            vowelCount += 1\n        }\n \
    \       \n        if vowelsCount[vowelIndex] == vowelsCount[vowelIndex + 8] {\n\
    \            vowelCount += 1\n        }\n        \n        if vowelsCount[vowelIndex]\
    \ == vowelsCount[vowelIndex + 9] {\n            vowelCount += 1\n        }\n \
    \       \n        if vowelsCount[vowelIndex] == vowelsCount[vowelIndex + 10] {\n\
    \            vowelCount += 1\n        }\n        \n        if vowelsCount[vowelIndex]\
    \ == vowelsCount[vowelIndex + 11] {\n            vowelCount += 1\n        }\n\
    \        \n        if vowelsCount[vowelIndex] == vowelsCount[vowelIndex + 12]\
    \ {\n            vowelCount += 1\n        }\n        \n        if vowelsCount[vowelIndex]\
    \ == vowelsCount[vowelIndex + 13] {\n            vowelCount += 1\n        }\n\
    \        \n        if vowelsCount[vowelIndex] == vowelsCount[vowelIndex + 14]\
    \ {\n            vowelCount += 1\n        }\n        \n        if vowelsCount[vowelIndex]\
    \ == vowelsCount[vowelIndex + 15] {\n            vowelCount += 1\n        }\n\
    \        \n        if vowelsCount[vowelIndex] == vowels\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpmu0flyba.swift:85:45: error: expected '{' after 'if' condition\n\
    \        if vowelsCount[vowelIndex] == vowels\n                              \
    \              ^\n/tmp/tmpmu0flyba.swift:113:48: error: expected '}' at end of\
    \ brace statement\nassert(get_closest_vowel(word: \"Above\") == \"o\")\n     \
    \                                          ^\n/tmp/tmpmu0flyba.swift:8:48: note:\
    \ to match this opening '{'\nfunc get_closest_vowel(word: String) -> String {\n\
    \                                               ^\n/tmp/tmpmu0flyba.swift:16:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpmu0flyba.swift:85:36: error: binary operator\
    \ '==' cannot be applied to operands of type 'Int' and '[String]'\n        if\
    \ vowelsCount[vowelIndex] == vowels\n           ~~~~~~~~~~~~~~~~~~~~~~~ ^  ~~~~~~\n\
    /tmp/tmpmu0flyba.swift:85:36: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Int, Int)\n        if vowelsCount[vowelIndex] ==\
    \ vowels\n                                   ^\n/tmp/tmpmu0flyba.swift:89:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndexEnd = word.count - 1\n\
    \    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart\
    \ = 0\n    var vowelIndexEnd = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd\
    \ = 0\n    var vowelIndexStart = 0\n    var vowelIndexEnd = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpmwqzrjx1.swift:93:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmwqzrjx1.swift:14:9: error: invalid redeclaration of 'vowelIndexEnd'\n\
    \    var vowelIndexEnd = 0\n        ^\n/tmp/tmpmwqzrjx1.swift:12:9: note: 'vowelIndexEnd'\
    \ previously declared here\n    var vowelIndexEnd = word.count - 1\n        ^\n\
    /tmp/tmpmwqzrjx1.swift:15:9: error: invalid redeclaration of 'vowelIndexStart'\n\
    \    var vowelIndexStart = 0\n        ^\n/tmp/tmpmwqzrjx1.swift:13:9: note: 'vowelIndexStart'\
    \ previously declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmpmwqzrjx1.swift:16:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmpmwqzrjx1.swift:12:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count - 1\n        ^\n/tmp/tmpmwqzrjx1.swift:17:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmpmwqzrjx1.swift:13:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmpmwqzrjx1.swift:18:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmpmwqzrjx1.swift:12:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count - 1\n        ^\n/tmp/tmpmwqzrjx1.swift:19:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmpmwqzrjx1.swift:13:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmpmwqzrjx1.swift:20:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelIndexEnd = 0\n\
    \        ^\n/tmp/tmpmwqzrjx1.swift:12:9: note: 'vowelIndexEnd' previously declared\
    \ here\n    var vowelIndexEnd = word.count - 1\n        ^\n/tmp/tmpmwqzrjx1.swift:21:9:\
    \ error: invalid redeclaration of 'vowelIndexStart'\n    var vowelIndexStart =\
    \ 0\n        ^\n/tmp/tmpmwqzrjx1.swift:13:9: note: 'vowelIndexStart' previously\
    \ declared here\n    var vowelIndexStart = 0\n        ^\n/tmp/tmpmwqzrjx1.swift:22:9:\
    \ error: invalid redeclaration of 'vowelIndexEnd'\n    var vowelInd"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = 0\n    var vowelIndex: Int = 0\n    var vowelCount\
    \ = 0\n    var vowelsIndex: Int = 0\n    var vowelsCountIndex: Int = 0\n    var\
    \ vowelsCountIndex2: Int = 0\n    var vowelsCountIndex3: Int = 0\n    var vowelsCountIndex4:\
    \ Int = 0\n    var vowelsCountIndex5: Int = 0\n    var vowelsCountIndex6: Int\
    \ = 0\n    var vowelsCountIndex7: Int = 0\n    var vowelsCountIndex8: Int = 0\n\
    \    var vowelsCountIndex9: Int = 0\n    var vowelsCountIndex10: Int = 0\n   \
    \ var vowelsCountIndex11: Int = 0\n    var vowelsCountIndex12: Int = 0\n    var\
    \ vowelsCountIndex13: Int = 0\n    var vowelsCountIndex14: Int = 0\n    var vowelsCountIndex15:\
    \ Int = 0\n    var vowelsCountIndex16: Int = 0\n    var vowelsCountIndex17: Int\
    \ = 0\n    var vowelsCountIndex18: Int = 0\n    var vowelsCountIndex19: Int =\
    \ 0\n    var vowelsCountIndex20: Int = 0\n    var vowelsCountIndex21: Int = 0\n\
    \    var vowelsCountIndex22: Int = 0\n    var vowelsCountIndex23: Int = 0\n  \
    \  var vowelsCountIndex24: Int = 0\n    var vowelsCountIndex25: Int = 0\n    var\
    \ vowelsCountIndex26: Int = 0\n    var vowelsCountIndex27: Int = 0\n    var vowelsCountIndex28:\
    \ Int = 0\n    var vowelsCountIndex29: Int = 0\n    var vowelsCountIndex30: Int\
    \ = 0\n    var vowelsCountIndex31: Int = 0\n    var vowelsCountIndex32: Int =\
    \ 0\n    var vowelsCountIndex33: Int = 0\n    var vowelsCountIndex34: Int = 0\n\
    \    var vowelsCountIndex35: Int = 0\n    var vowelsCountIndex36: Int = 0\n  \
    \  var vowelsCountIndex37: Int = 0\n    var vowelsCountIndex38: Int = 0\n    var\
    \ vowelsCountIndex39: Int = 0\n    var vowelsCountIndex40: Int = 0\n    var vowelsCountIndex41:\
    \ Int = 0\n    var vowelsCountIndex42: Int = 0\n    var vowelsCountIndex43: Int\
    \ = 0\n    var vowelsCountIndex44: Int = 0\n    var vowelsCountIndex45: Int =\
    \ 0\n    var vowelsCountIndex46: Int = 0\n    var vowelsCountIndex47: Int = 0\n\
    \    var vowelsCountIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7typdwpa.swift:61:9: error: type annotation missing in pattern\n\
    \    var vowelsCountIndex\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    var vowelIndex2 = word.characters.count - 1\n    \n    while vowelIndex\
    \ < vowels.characters.count && vowelIndex2 < vowels.characters.count {\n     \
    \   if word.characters.contains(vowels[vowelIndex]) {\n            vowelIndex\
    \ += 1\n        } else {\n            vowelIndex2 -= 1\n        }\n    }\n   \
    \ \n    if vowelIndex == 0 {\n        return \"\"\n    }\n    \n    if vowelIndex\
    \ == vowels.characters.count - 1 {\n        return \"\"\n    }\n    \n    return\
    \ word.characters.suffix(vowelIndex).first!\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpg243_8ti.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpg243_8ti.swift:15:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    while vowelIndex < vowels.characters.count && vowelIndex2\
    \ < vowels.characters.count {\n                              ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpg243_8ti.swift:15:72: error: 'characters'\
    \ is unavailable: Please use String directly\n    while vowelIndex < vowels.characters.count\
    \ && vowelIndex2 < vowels.characters.count {\n                               \
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpg243_8ti.swift:16:17: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word.characters.contains(vowels[vowelIndex])\
    \ {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpg243_8ti.swift:16:37: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if word.characters.contains(vowels[vowelIndex])\
    \ {\n                                    ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpg243_8ti.swift:27:29:\
    \ error: 'characters' is unavailable: Please use String directly\n    if vowelIndex\
    \ == vowels.characters.count - 1 {\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n "
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsArray =\
    \ vowels.characters\n    var vowelsArrayCount = vowels.characters.count\n    var\
    \ vowelsArrayIndex = 0\n    var vowelsArrayLastIndex = 0\n    var vowelsArrayLastIndexCount\
    \ = 0\n    var vowelsArrayLastIndexIndex = 0\n    var vowelsArrayLastIndexLastIndex\
    \ = 0\n    var vowelsArrayLastIndexLastIndexCount = 0\n    var vowelsArrayLastIndexLastIndexIndex\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndex = 0\n    var vowelsArrayLastIndexLastIndexLastIndexCount\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexIndexIndex = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexCount = 0\n    var\
    \ vowelsArrayLastIndexLastIndexLastIndexLastIndexIndexIndex = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexCount = 0\n    var\
    \ vowelsArrayLastIndexLastIndexLastIndexLastIndexIndexIndex = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexCount =\
    \ 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexIndex = 0\n\
    \    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexCount = 0\n \
    \   var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexIndexIndex = 0\n\
    \    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexLastIndex = 0\n\
    \    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexCount\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexIndex\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexCount\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexIndex\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexCount\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexIndexCount\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexIndexCount\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexIndexCount\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexLastIndexCount\
    \ = 0\n    var vowelsArrayLastIndexLastIndexLastIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpg6yb5_gq.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpg6yb5_gq.swift:11:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArrayCount = vowels.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg6yb5_gq.swift:25:9: error: invalid redeclaration of\
    \ 'vowelsArrayLastIndexLastIndexLastIndexLastIndex'\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        ^\n/tmp/tmpg6yb5_gq.swift:22:9: note: 'vowelsArrayLastIndexLastIndexLastIndexLastIndex'\
    \ previously declared here\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndex\
    \ = 0\n        ^\n/tmp/tmpg6yb5_gq.swift:26:9: error: invalid redeclaration of\
    \ 'vowelsArrayLastIndexLastIndexLastIndexLastIndexCount'\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexCount\
    \ = 0\n        ^\n/tmp/tmpg6yb5_gq.swift:23:9: note: 'vowelsArrayLastIndexLastIndexLastIndexLastIndexCount'\
    \ previously declared here\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexCount\
    \ = 0\n        ^\n/tmp/tmpg6yb5_gq.swift:27:9: error: invalid redeclaration of\
    \ 'vowelsArrayLastIndexLastIndexLastIndexLastIndexIndexIndex'\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexIndexIndex\
    \ = 0\n        ^\n/tmp/tmpg6yb5_gq.swift:24:9: note: 'vowelsArrayLastIndexLastIndexLastIndexLastIndexIndexIndex'\
    \ previously declared here\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexIndexIndex\
    \ = 0\n        ^\n/tmp/tmpg6yb5_gq.swift:31:9: error: invalid redeclaration of\
    \ 'vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexCount'\n    var vowelsArrayLastIndexLastIndexLastIndexLastIndexLastIndexCount\
    \ = 0\n        ^\n/tmp/tmpg6yb5_gq.swift:29:9: note: 'vowelsArrayLastIndexLastIndexLastIndexLast"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsCountIndex2 = 0\n    var vowelsCountIndex3 = 0\n    var vowelsCountIndex4\
    \ = 0\n    var vowelsCountIndex5 = 0\n    var vowelsCountIndex6 = 0\n    var vowelsCountIndex7\
    \ = 0\n    var vowelsCountIndex8 = 0\n    var vowelsCountIndex9 = 0\n    var vowelsCountIndex10\
    \ = 0\n    var vowelsCountIndex11 = 0\n    var vowelsCountIndex12 = 0\n    var\
    \ vowelsCountIndex13 = 0\n    var vowelsCountIndex14 = 0\n    var vowelsCountIndex15\
    \ = 0\n    var vowelsCountIndex16 = 0\n    var vowelsCountIndex17 = 0\n    var\
    \ vowelsCountIndex18 = 0\n    var vowelsCountIndex19 = 0\n    var vowelsCountIndex20\
    \ = 0\n    var vowelsCountIndex21 = 0\n    var vowelsCountIndex22 = 0\n    var\
    \ vowelsCountIndex23 = 0\n    var vowelsCountIndex24 = 0\n    var vowelsCountIndex25\
    \ = 0\n    var vowelsCountIndex26 = 0\n    var vowelsCountIndex27 = 0\n    var\
    \ vowelsCountIndex28 = 0\n    var vowelsCountIndex29 = 0\n    var vowelsCountIndex30\
    \ = 0\n    var vowelsCountIndex31 = 0\n    var vowelsCountIndex32 = 0\n    var\
    \ vowelsCountIndex33 = 0\n    var vowelsCountIndex34 = 0\n    var vowelsCountIndex35\
    \ = 0\n    var vowelsCountIndex36 = 0\n    var vowelsCountIndex37 = 0\n    var\
    \ vowelsCountIndex38 = 0\n    var vowelsCountIndex39 = 0\n    var vowelsCountIndex40\
    \ = 0\n    var vowelsCountIndex41 = 0\n    var vowelsCountIndex42 = 0\n    var\
    \ vowelsCountIndex43 = 0\n    var vowelsCountIndex44 = 0\n    var vowelsCountIndex45\
    \ = 0\n    var vowelsCountIndex46 = 0\n    var vowelsCountIndex47 = 0\n    var\
    \ vowelsCountIndex48 = 0\n    var vowelsCountIndex49 = 0\n    var vowelsCountIndex50\
    \ = 0\n    var vowelsCountIndex51 = 0\n    var vowelsCountIndex52 = 0\n    var\
    \ vowelsCountIndex53 = 0\n    var vowelsCountIndex54 = 0\n    var vowelsCountIndex55\
    \ = 0\n    var vowelsCountIndex56 = 0\n    var vowelsCountIndex57 = 0\n    var\
    \ vowelsCountIndex58 = 0\n    var vowelsCountIndex59 = 0\n    var vowelsCountIndex60\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppkj3uht9.swift:72:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    \n    var vowelIndex: Int = 0\n    \n    var vowelIndex2:\
    \ Int = 0\n    \n    var vowelIndex3: Int = 0\n    \n    var vowelIndex4: Int\
    \ = 0\n    \n    var vowelIndex5: Int = 0\n    \n    var vowelIndex6: Int = 0\n\
    \    \n    var vowelIndex7: Int = 0\n    \n    var vowelIndex8: Int = 0\n    \n\
    \    var vowelIndex9: Int = 0\n    \n    var vowelIndex10: Int = 0\n    \n   \
    \ var vowelIndex11: Int = 0\n    \n    var vowelIndex12: Int = 0\n    \n    var\
    \ vowelIndex13: Int = 0\n    \n    var vowelIndex14: Int = 0\n    \n    var vowelIndex15:\
    \ Int = 0\n    \n    var vowelIndex16: Int = 0\n    \n    var vowelIndex17: Int\
    \ = 0\n    \n    var vowelIndex18: Int = 0\n    \n    var vowelIndex19: Int =\
    \ 0\n    \n    var vowelIndex20: Int = 0\n    \n    var vowelIndex21: Int = 0\n\
    \    \n    var vowelIndex22: Int = 0\n    \n    var vowelIndex23: Int = 0\n  \
    \  \n    var vowelIndex24: Int = 0\n    \n    var vowelIndex25: Int = 0\n    \n\
    \    var vowelIndex26: Int = 0\n    \n    var vowelIndex27: Int = 0\n    \n  \
    \  var vowelIndex28: Int = 0\n    \n    var vowelIndex29: Int = 0\n    \n    var\
    \ vowelIndex30: Int = 0\n    \n    var vowelIndex31: Int = 0\n    \n    var vowelIndex32:\
    \ Int = 0\n    \n    var vowelIndex33: Int = 0\n    \n    var vowelIndex34: Int\
    \ = 0\n    \n    var vowelIndex35: Int = 0\n    \n    var vowelIndex36: Int =\
    \ 0\n    \n    var vowelIndex37: Int = 0\n    \n    var vowelIndex38: Int = 0\n\
    \    \n    var vowelIndex39: Int = 0\n    \n    var vowelIndex40: Int = 0\n  \
    \  \n    var vowelIndex41: Int = 0\n    \n    var vowelIndex42: Int = 0\n    \n\
    \    var vowelIndex43: Int = 0\n    \n    var vowelIndex44: Int = 0\n    \n  \
    \  var vowelIndex45: Int = 0\n    \n    var vowelIndex46: Int = 0\n    \n    var\
    \ vowelIndex47: Int = 0\n    \n    var vowelIndex48: Int = 0\n    \n    var vowelIndex49:\
    \ Int = 0\n    \n    var vowelIndex50: Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpsffkmgu9.swift:10:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpsffkmgu9.swift:12:9:\
    \ warning: variable 'vowelIndex' was never used; consider replacing with '_' or\
    \ removing it\n    var vowelIndex: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpsffkmgu9.swift:14:9:\
    \ warning: variable 'vowelIndex2' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelIndex2: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpsffkmgu9.swift:16:9: warning: variable 'vowelIndex3' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelIndex3: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpsffkmgu9.swift:18:9: warning: variable 'vowelIndex4' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex4: Int =\
    \ 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpsffkmgu9.swift:20:9: warning: variable\
    \ 'vowelIndex5' was never used; consider replacing with '_' or removing it\n \
    \   var vowelIndex5: Int = 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpsffkmgu9.swift:22:9:\
    \ warning: variable 'vowelIndex6' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelIndex6: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpsffkmgu9.swift:24:9: warning: variable 'vowelIndex7' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelIndex7: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpsffkmgu9.swift:26:9: warning: variable 'vowelIndex8' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex8: Int =\
    \ 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpsffkmgu9.swift:28:9: warning: variable\
    \ 'vowelIndex9' was never used; consider replacing with '_' or removing it\n \
    \   var vowelIndex9: Int = 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpsffkmgu9.swift:30:9:\
    \ warning: variable 'vowelIndex10' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelIndex10: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmpsffkmgu9.swift:32:9: warning: variable 'vowelIndex11' was"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountMax: Int = vowels.count\n    var vowelsCountMin:\
    \ Int = vowels.count - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax -\
    \ 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzs_lcy_7.swift:43:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpzs_lcy_7.swift:16:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:17:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:15:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmpzs_lcy_7.swift:18:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:19:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:15:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmpzs_lcy_7.swift:20:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:21:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:15:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmpzs_lcy_7.swift:22:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously decl"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"\", \"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    var vowelsCount = word.characters.count\n    var vowelsIndex = 0\n \
    \   var vowelsIndex2 = 0\n    var vowelsIndex3 = 0\n    var vowelsIndex4 = 0\n\
    \    var vowelsIndex5 = 0\n    var vowelsIndex6 = 0\n    var vowelsIndex7 = 0\n\
    \    var vowelsIndex8 = 0\n    var vowelsIndex9 = 0\n    var vowelsIndex10 = 0\n\
    \    var vowelsIndex11 = 0\n    var vowelsIndex12 = 0\n    var vowelsIndex13 =\
    \ 0\n    var vowelsIndex14 = 0\n    var vowelsIndex15 = 0\n    var vowelsIndex16\
    \ = 0\n    var vowelsIndex17 = 0\n    var vowelsIndex18 = 0\n    var vowelsIndex19\
    \ = 0\n    var vowelsIndex20 = 0\n    var vowelsIndex21 = 0\n    var vowelsIndex22\
    \ = 0\n    var vowelsIndex23 = 0\n    var vowelsIndex24 = 0\n    var vowelsIndex25\
    \ = 0\n    var vowelsIndex26 = 0\n    var vowelsIndex27 = 0\n    var vowelsIndex28\
    \ = 0\n    var vowelsIndex29 = 0\n    var vowelsIndex30 = 0\n    var vowelsIndex31\
    \ = 0\n    var vowelsIndex32 = 0\n    var vowelsIndex33 = 0\n    var vowelsIndex34\
    \ = 0\n    var vowelsIndex35 = 0\n    var vowelsIndex36 = 0\n    var vowelsIndex37\
    \ = 0\n    var vowelsIndex38 = 0\n    var vowelsIndex39 = 0\n    var vowelsIndex40\
    \ = 0\n    var vowelsIndex41 = 0\n    var vowelsIndex42 = 0\n    var vowelsIndex43\
    \ = 0\n    var vowelsIndex44 = 0\n    var vowelsIndex45 = 0\n    var vowelsIndex46\
    \ = 0\n    var vowelsIndex47 = 0\n    var vowelsIndex48 = 0\n    var vowelsIndex49\
    \ = 0\n    var vowelsIndex50 = 0\n    var vowelsIndex51 = 0\n    var vowelsIndex52\
    \ = 0\n    var vowelsIndex53 = 0\n    var vowelsIndex54 = 0\n    var vowelsIndex55\
    \ = 0\n    var vowelsIndex56 = 0\n    var vowelsIndex57 = 0\n    var vowelsIndex58\
    \ = 0\n    var vowelsIndex59 = 0\n    var vowelsIndex60 = 0\n    var vowelsIndex61\
    \ = 0\n    var vowelsIndex62 = 0\n    var vowelsIndex63 = 0\n    var vowelsIndex64\
    \ = 0\n    var vowelsIndex65 = 0\n    var vowelsIndex66 = 0\n    var vowelsIndex67\
    \ = 0\n    var vowelsIndex68 = 0\n    var vowelsIndex69 = 0\n    var vowelsIndex70\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpfw1t0d_f.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfw1t0d_f.swift:9:9: warning: initialization of variable 'vowels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowels = [\"\", \"a\", \"e\", \"i\", \"o\", \"u\"]\n    ~~~~^~~~~~\n \
    \   _\n/tmp/tmpfw1t0d_f.swift:10:9: warning: initialization of variable 'vowelsCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCount = word.characters.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpfw1t0d_f.swift:11:9:\
    \ warning: initialization of variable 'vowelsIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsIndex = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpfw1t0d_f.swift:12:9: warning: initialization of variable 'vowelsIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex2 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpfw1t0d_f.swift:13:9:\
    \ warning: initialization of variable 'vowelsIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex3 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpfw1t0d_f.swift:14:9: warning: initialization\
    \ of variable 'vowelsIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex4 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpfw1t0d_f.swift:15:9: warning: initialization of variable 'vowelsIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex5 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpfw1t0d_f.swift:16:9:\
    \ warning: initialization of variable 'vowelsIndex6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex6 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpfw1t0d_f.swift:17:9: warning: initialization\
    \ of variable 'vowelsIndex7' wa"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n\
    \    \n    if word.characters.count > 0 {\n        let firstIndex = word.startIndex\n\
    \        let lastIndex = word.endIndex\n        \n        if firstIndex == lastIndex\
    \ {\n            return \"\"\n        }\n        \n        let firstChar = word.characters[firstIndex]\n\
    \        let lastChar = word.characters[lastIndex]\n        \n        if firstChar\
    \ == lastChar {\n            if firstChar == vowels.characters.first {\n     \
    \           result = firstChar\n            }\n            else {\n          \
    \      result = firstChar\n            }\n        }\n        else {\n        \
    \    if firstChar == vowels.characters.last {\n                result = firstChar\n\
    \            }\n            else {\n                result = firstChar\n     \
    \       }\n        }\n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpflt9bhm1.swift:12:13: error: 'characters' is unavailable: Please\
    \ use String directly\n    if word.characters.count > 0 {\n            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpflt9bhm1.swift:20:30:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ firstChar = word.characters[firstIndex]\n                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpflt9bhm1.swift:21:29:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ lastChar = word.characters[lastIndex]\n                            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpflt9bhm1.swift:24:36:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if firstChar == vowels.characters.first {\n                                \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpflt9bhm1.swift:25:26:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      result = firstChar\n                         ^~~~~~~~~\n/tmp/tmpflt9bhm1.swift:28:26:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      result = firstChar\n                         ^~~~~~~~~\n/tmp/tmpflt9bhm1.swift:32:36:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ if firstChar == vowels.characters.last {\n                                 \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpflt9bhm1.swift:33:26:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      result = firstChar\n                         ^~~~~~~~~\n/tmp/tmpflt9b"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    var vowelsCount = vowels.count\n    var vowelsCount2\
    \ = vowelsCount - 1\n    var vowelsCount3 = vowelsCount - 2\n    var vowelsCount4\
    \ = vowelsCount - 3\n    var vowelsCount5 = vowelsCount - 4\n    var vowelsCount6\
    \ = vowelsCount - 5\n    var vowelsCount7 = vowelsCount - 6\n    var vowelsCount8\
    \ = vowelsCount - 7\n    var vowelsCount9 = vowelsCount - 8\n    var vowelsCount10\
    \ = vowelsCount - 9\n    var vowelsCount11 = vowelsCount - 10\n    var vowelsCount12\
    \ = vowelsCount - 11\n    var vowelsCount13 = vowelsCount - 12\n    var vowelsCount14\
    \ = vowelsCount - 13\n    var vowelsCount15 = vowelsCount - 14\n    var vowelsCount16\
    \ = vowelsCount - 15\n    var vowelsCount17 = vowelsCount - 16\n    var vowelsCount18\
    \ = vowelsCount - 17\n    var vowelsCount19 = vowelsCount - 18\n    var vowelsCount20\
    \ = vowelsCount - 19\n    var vowelsCount21 = vowelsCount - 20\n    var vowelsCount22\
    \ = vowelsCount - 21\n    var vowelsCount23 = vowelsCount - 22\n    var vowelsCount24\
    \ = vowelsCount - 23\n    var vowelsCount25 = vowelsCount - 24\n    var vowelsCount26\
    \ = vowelsCount - 25\n    var vowelsCount27 = vowelsCount - 26\n    var vowelsCount28\
    \ = vowelsCount - 27\n    var vowelsCount29 = vowelsCount - 28\n    var vowelsCount30\
    \ = vowelsCount - 29\n    var vowelsCount31 = vowelsCount - 30\n    var vowelsCount32\
    \ = vowelsCount - 31\n    var vowelsCount33 = vowelsCount - 32\n    var vowelsCount34\
    \ = vowelsCount - 33\n    var vowelsCount35 = vowelsCount - 34\n    var vowelsCount36\
    \ = vowelsCount - 35\n    var vowelsCount37 = vowelsCount - 36\n    var vowelsCount38\
    \ = vowelsCount - 37\n    var vowelsCount39 = vowelsCount - 38\n    var vowelsCount40\
    \ = vowelsCount - 39\n    var vowelsCount41 = vowelsCount - 40\n    var vowelsCount42\
    \ = vowelsCount - 41\n    var vowelsCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp32cs0w37.swift:53:9: error: type annotation missing in pattern\n\
    \    var vowelsCount\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = vowels.count\n    \n  \
    \  var vowelIndex = 0\n    \n    for char in word.characters {\n        if vowelIndex\
    \ < vowelsCount {\n            if char == vowels[vowelIndex] {\n             \
    \   vowelIndex += 1\n            }\n        } else {\n            return \"\"\n\
    \        }\n    }\n    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpqf167cqt.swift:20:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpqf167cqt.swift:22:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n            if char == vowels[vowelIndex] {\n               ~~~~\
    \ ^  ~~~~~~~~~~~~~~~~~~\n/tmp/tmpqf167cqt.swift:22:21: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n            if char == vowels[vowelIndex] {\n            \
    \        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowelsCount =\
    \ vowels.characters.count\n    \n    let vowelIndex = word.characters.reversed().index(of:\
    \ vowels.characters.last!)\n    let vowelIndex2 = word.characters.reversed().index(of:\
    \ vowels.characters.first!)\n    \n    if vowelIndex != nil && vowelIndex2 !=\
    \ nil {\n        let vowelIndex3 = word.characters.reversed().index(of: vowels.characters.first!,\
    \ offsetBy: vowelIndex! - vowelIndex2!)\n        if vowelIndex3 != nil {\n   \
    \         return word.substring(to: vowelIndex3!)\n        }\n    }\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpejq3oqt3.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpejq3oqt3.swift:12:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelIndex = word.characters.reversed().index(of:\
    \ vowels.characters.last!)\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpejq3oqt3.swift:12:49: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    let vowelIndex = word.characters.reversed().index(of:\
    \ vowels.characters.last!)\n                                                ^\n\
    /tmp/tmpejq3oqt3.swift:12:49: note: use 'firstIndex(of:)' instead\n    let vowelIndex\
    \ = word.characters.reversed().index(of: vowels.characters.last!)\n          \
    \                                      ^~~~~\n                               \
    \                 firstIndex\n/tmp/tmpejq3oqt3.swift:12:66: error: 'characters'\
    \ is unavailable: Please use String directly\n    let vowelIndex = word.characters.reversed().index(of:\
    \ vowels.characters.last!)\n                                                 \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpejq3oqt3.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelIndex2 = word.characters.reversed().index(of:\
    \ vowels.characters.first!)\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpejq3oqt3.swift:13:50: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    let vowelIndex2 = word.characters.reversed().index(of:\
    \ vowels.characters.first!)\n    "
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = word.characters.count\n\
    \    \n    for vowel in vowels {\n        if word.characters.count > vowelsCount\
    \ {\n            vowelsCount = word.characters.count\n        }\n        \n  \
    \      if word.characters.count < vowelsCount {\n            vowelsCount = word.characters.count\n\
    \        }\n        \n        if word.characters.count > vowelsCount {\n     \
    \       vowelsCount = word.characters.count\n        }\n        \n        if word.characters.count\
    \ < vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ < vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ < vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ < vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ < vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ < vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ < vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ < vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ < vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpc3yvmr0c.swift:129:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpc3yvmr0c.swift:18:25: note: to match this opening\
    \ '{'\n    for vowel in vowels {\n                        ^\n/tmp/tmpc3yvmr0c.swift:129:48:\
    \ error: expected '}' at end of brace statement\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")\n                                               ^\n/tmp/tmpc3yvmr0c.swift:8:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmpc3yvmr0c.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    var vowelsCount\
    \ = word.characters.count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpc3yvmr0c.swift:19:17: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word.characters.count\
    \ > vowelsCount {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpc3yvmr0c.swift:20:32: error: 'characters' is unavailable:\
    \ Please use String directly\n            vowelsCount = word.characters.count\n\
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpc3yvmr0c.swift:23:17: error: 'characters' is unavailable:\
    \ Please use String directly\n        if word.characters.count < vowelsCount {\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpc3yvmr0c.swift:24:32: error: 'characters' is unavailable: Please\
    \ use String directly\n            vowelsCount = word.characters.count\n     \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.characters.count\n    var vowelIndex = 0\n    var closestVowel = \"\"\n\
    \    var closestVowelIndex = 0\n    var closestVowelCount = 0\n    var closestVowelIndexCount\
    \ = 0\n    \n    for char in word.characters {\n        if vowels.contains(char)\
    \ {\n            vowelIndex += 1\n            if vowelIndex == vowelsCount {\n\
    \                closestVowel = char\n                closestVowelIndex = vowelIndex\n\
    \                closestVowelCount = vowelIndex\n                closestVowelIndexCount\
    \ = vowelIndex\n            }\n        }\n    }\n    \n    if closestVowelIndexCount\
    \ > vowelsCount {\n        return \"\"\n    }\n    \n    for char in word.characters\
    \ {\n        if vowels.contains(char) {\n            vowelIndex += 1\n       \
    \     if vowelIndex == vowelsCount {\n                closestVowel = char\n  \
    \              closestVowelIndex = vowelIndex\n                closestVowelCount\
    \ = vowelIndex\n                closestVowelIndexCount = vowelIndex\n        \
    \    }\n        }\n    }\n    \n    if closestVowelIndexCount < vowelsCount {\n\
    \        return \"\"\n    }\n    \n    if closestVowelIndex == closestVowelIndexCount\
    \ {\n        return closestVowel\n    }\n    \n    if closestVowelIndex > closestVowelIndexCount\
    \ {\n        return \"\"\n    }\n    \n    if closestVowelIndex < closestVowelIndexCount\
    \ {\n        return \"\"\n    }\n    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1lz9ei4m.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1lz9ei4m.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp1lz9ei4m.swift:21:32:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      closestVowel = char\n                               ^~~~\n/tmp/tmp1lz9ei4m.swift:33:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp1lz9ei4m.swift:37:32: error: cannot assign\
    \ value of type 'Character' to type 'String'\n                closestVowel = char\n\
    \                               ^~~~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"\",\"a\",\"e\",\"i\",\"o\",\"u\"]\n\
    \    var vowelsCount = word.characters.count\n    var vowelsCount2 = vowels.count\n\
    \    var vowelsCount3 = vowelsCount + vowelsCount2\n    var vowelsCount4 = vowelsCount3\
    \ - vowelsCount\n    var vowelsCount5 = vowelsCount4 - vowelsCount3\n    var vowelsCount6\
    \ = vowelsCount5 - vowelsCount4\n    var vowelsCount7 = vowelsCount6 - vowelsCount5\n\
    \    var vowelsCount8 = vowelsCount7 - vowelsCount6\n    var vowelsCount9 = vowelsCount8\
    \ - vowelsCount7\n    var vowelsCount10 = vowelsCount9 - vowelsCount8\n    var\
    \ vowelsCount11 = vowelsCount10 - vowelsCount9\n    var vowelsCount12 = vowelsCount11\
    \ - vowelsCount10\n    var vowelsCount13 = vowelsCount12 - vowelsCount11\n   \
    \ var vowelsCount14 = vowelsCount13 - vowelsCount12\n    var vowelsCount15 = vowelsCount14\
    \ - vowelsCount13\n    var vowelsCount16 = vowelsCount15 - vowelsCount14\n   \
    \ var vowelsCount17 = vowelsCount16 - vowelsCount15\n    var vowelsCount18 = vowelsCount17\
    \ - vowelsCount16\n    var vowelsCount19 = vowelsCount18 - vowelsCount17\n   \
    \ var vowelsCount20 = vowelsCount19 - vowelsCount18\n    var vowelsCount21 = vowelsCount20\
    \ - vowelsCount19\n    var vowelsCount22 = vowelsCount21 - vowelsCount20\n   \
    \ var vowelsCount23 = vowelsCount22 - vowelsCount21\n    var vowelsCount24 = vowelsCount23\
    \ - vowelsCount22\n    var vowelsCount25 = vowelsCount24 - vowelsCount23\n   \
    \ var vowelsCount26 = vowelsCount25 - vowelsCount24\n    var vowelsCount27 = vowelsCount26\
    \ - vowelsCount25\n    var vowelsCount28 = vowelsCount27 - vowelsCount26\n   \
    \ var vowelsCount29 = vowelsCount28 - vowelsCount27\n    var vowelsCount30 = vowelsCount29\
    \ - vowelsCount28\n    var vowelsCount31 = vowelsCount30 - vowelsCount29\n   \
    \ var vowelsCount32 = vowelsCount31 - vowelsCount30\n    var vowelsCount33 = vowelsCount32\
    \ - vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpp9sh7yn8.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpp9sh7yn8.swift:42:41: error: cannot convert value of type '[String]'\
    \ to expected argument type 'Int'\n    var vowelsCount33 = vowelsCount32 - vowels\n\
    \                                        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.characters.filter({ vowels.contains($0) }).count\n    var vowelIndex =\
    \ word.characters.reversed().firstIndex({ vowels.contains($0) })\n    if vowelIndex\
    \ == -1 { return \"\" }\n    var vowel = word.characters.reversed()[vowelIndex\
    \ + 1]\n    if vowelsCount > 1 {\n        vowel = word.characters.reversed()[vowelIndex\
    \ + 2]\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwccuu0gd.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwccuu0gd.swift:11:60: error: missing argument label\
    \ 'where:' in call\n    var vowelIndex = word.characters.reversed().firstIndex({\
    \ vowels.contains($0) })\n                                                   \
    \        ^\n                                                           where:\
    \ \n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    var vowelIndex2 = word.characters.count - 1\n    \n    while vowelIndex\
    \ < word.characters.count && vowelIndex2 < word.characters.count {\n        if\
    \ vowels[vowelIndex] == word[vowelIndex2] {\n            vowelIndex += 1\n   \
    \         vowelIndex2 -= 1\n        } else {\n            vowelIndex += 1\n  \
    \          vowelIndex2 -= 1\n        }\n    }\n    \n    if vowelIndex == word.characters.count\
    \ {\n        return \"\"\n    }\n    \n    return word[vowelIndex..<vowelIndex2]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpcavg_qo5.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpcavg_qo5.swift:15:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    while vowelIndex < word.characters.count && vowelIndex2\
    \ < word.characters.count {\n                            ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpcavg_qo5.swift:15:68: error: 'characters'\
    \ is unavailable: Please use String directly\n    while vowelIndex < word.characters.count\
    \ && vowelIndex2 < word.characters.count {\n                                 \
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcavg_qo5.swift:16:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ vowels[vowelIndex] == word[vowelIndex2] {\n           ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcavg_qo5.swift:16:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if vowels[vowelIndex] == word[vowelIndex2]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpcavg_qo5.swift:25:27: error:\
    \ 'characters' is unavailable: Please use String directly\n    if vowelIndex ==\
    \ word.characters.count {\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var char"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    \n    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n    let vowelIndex\
    \ = word.characters.reverse().firstIndex(of: vowels.last!)\n    \n    if vowelIndex\
    \ == word.characters.count - 1 {\n        return \"\"\n    }\n    \n    let vowelIndex\
    \ = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n    \n    if\
    \ vowelIndex == word.characters.count - 1 {\n        return \"\"\n    }\n    \n\
    \    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowelIndex == word.characters.count - 1 {\n        return \"\"\n\
    \    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n\
    \    \n    if vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5pur4vpp.swift:91:13: error: expected '{' after 'if' condition\n\
    \    if vowel\n            ^\n/tmp/tmp5pur4vpp.swift:11:64: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n\
    \    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \                                                               ^\n/tmp/tmp5pur4vpp.swift:17:38:\
    \ error: value of type 'String' has no member 'reverse'\n    let vowelIndex =\
    \ word.characters.reverse().firstIndex(of: vowels.last!)\n                   \
    \  ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp5pur4vpp.swift:23:38: error: value of type\
    \ 'String' has no member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels[vowelIndex!])\n                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp5pur4vpp.swift:29:38:\
    \ error: value of type 'String' has no member 'reverse'\n    let vowelIndex =\
    \ word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n            \
    \         ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp5pur4vpp.swift:35:38: error: value\
    \ of type 'String' has no member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels[vowelIndex!])\n                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp5pur4vpp.swift:41:38:\
    \ error: value of type 'String' has no member 'reverse'\n    let vowelIndex =\
    \ word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n            \
    \         ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp5pur4vpp.swift:47:38: error: value\
    \ of type 'String' has no member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels[vowelIndex!])\n                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp5pur4vpp.swift:53:38:\
    \ error: value of type 'String' has no member 'reverse'\n    let vowelIndex =\
    \ word.characters.reverse().firstIndex(of: vowels[vowelIndex!])\n            \
    \         ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmp5pur4vpp.swift:59:38: error: value\
    \ of type 'String' has no member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels[vowelIndex!])\n                     ~~~~~~~~"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsCountIndex2 = 0\n    var vowelsCountIndex3 = 0\n    var vowelsCountIndex4\
    \ = 0\n    var vowelsCountIndex5 = 0\n    var vowelsCountIndex6 = 0\n    var vowelsCountIndex7\
    \ = 0\n    var vowelsCountIndex8 = 0\n    var vowelsCountIndex9 = 0\n    var vowelsCountIndex10\
    \ = 0\n    var vowelsCountIndex11 = 0\n    var vowelsCountIndex12 = 0\n    var\
    \ vowelsCountIndex13 = 0\n    var vowelsCountIndex14 = 0\n    var vowelsCountIndex15\
    \ = 0\n    var vowelsCountIndex16 = 0\n    var vowelsCountIndex17 = 0\n    var\
    \ vowelsCountIndex18 = 0\n    var vowelsCountIndex19 = 0\n    var vowelsCountIndex20\
    \ = 0\n    var vowelsCountIndex21 = 0\n    var vowelsCountIndex22 = 0\n    var\
    \ vowelsCountIndex23 = 0\n    var vowelsCountIndex24 = 0\n    var vowelsCountIndex25\
    \ = 0\n    var vowelsCountIndex26 = 0\n    var vowelsCountIndex27 = 0\n    var\
    \ vowelsCountIndex28 = 0\n    var vowelsCountIndex29 = 0\n    var vowelsCountIndex30\
    \ = 0\n    var vowelsCountIndex31 = 0\n    var vowelsCountIndex32 = 0\n    var\
    \ vowelsCountIndex33 = 0\n    var vowelsCountIndex34 = 0\n    var vowelsCountIndex35\
    \ = 0\n    var vowelsCountIndex36 = 0\n    var vowelsCountIndex37 = 0\n    var\
    \ vowelsCountIndex38 = 0\n    var vowelsCountIndex39 = 0\n    var vowelsCountIndex40\
    \ = 0\n    var vowelsCountIndex41 = 0\n    var vowelsCountIndex42 = 0\n    var\
    \ vowelsCountIndex43 = 0\n    var vowelsCountIndex44 = 0\n    var vowelsCountIndex45\
    \ = 0\n    var vowelsCountIndex46 = 0\n    var vowelsCountIndex47 = 0\n    var\
    \ vowelsCountIndex48 = 0\n    var vowelsCountIndex49 = 0\n    var vowelsCountIndex50\
    \ = 0\n    var vowelsCountIndex51 = 0\n    var vowelsCountIndex52 = 0\n    var\
    \ vowelsCountIndex53 = 0\n    var vowelsCountIndex54 = 0\n    var vowelsCountIndex55\
    \ = 0\n    var vowelsCountIndex56 = 0\n    var vowelsCountIndex57 = 0\n    var\
    \ vowelsCountIndex58 = 0\n    var vowelsCountIndex59 = 0\n    var vowelsCountIndex60\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppkj3uht9.swift:72:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\",\"\
    e\",\"i\",\"o\",\"u\")\n    vowels.sort{$0.compare($1) == .orderedAscending}\n\
    \    var vowelIndex = 0\n    var vowelFound = false\n    for char in word.characters.reverse()\
    \ {\n        if vowelIndex < vowels.count {\n            if vowels[vowelIndex]\
    \ == char {\n                vowelFound = true\n            }\n            vowelIndex\
    \ += 1\n        } else {\n            break\n        }\n    }\n    if vowelFound\
    \ {\n        return \"\"\n    } else {\n        return word.characters.reverse().first!\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpqo8tuw_w.swift:10:18: error: extra arguments at positions #2, #3,\
    \ #4, #5 in call\n    vowels.append(\"a\",\"e\",\"i\",\"o\",\"u\")\n         \
    \        ^\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable public\
    \ mutating func append(_ newElement: __owned Element)\n                      \
    \              ^\n/tmp/tmpqo8tuw_w.swift:11:20: error: value of type 'String'\
    \ has no member 'compare'\n    vowels.sort{$0.compare($1) == .orderedAscending}\n\
    \                ~~ ^~~~~~~\n/tmp/tmpqo8tuw_w.swift:14:33: error: value of type\
    \ 'String' has no member 'reverse'\n    for char in word.characters.reverse()\
    \ {\n                ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpqo8tuw_w.swift:27:32: error:\
    \ value of type 'String' has no member 'reverse'\n        return word.characters.reverse().first!\n\
    \               ~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelIndex2:\
    \ Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4: Int = 0\n    var\
    \ vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var vowelIndex7: Int\
    \ = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int = 0\n    var vowelIndex10:\
    \ Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12: Int = 0\n    var\
    \ vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var vowelIndex15:\
    \ Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17: Int = 0\n    var\
    \ vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var vowelIndex20:\
    \ Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22: Int = 0\n    var\
    \ vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var vowelIndex25:\
    \ Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27: Int = 0\n    var\
    \ vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var vowelIndex30:\
    \ Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32: Int = 0\n    var\
    \ vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var vowelIndex35:\
    \ Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37: Int = 0\n    var\
    \ vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var vowelIndex40:\
    \ Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42: Int = 0\n    var\
    \ vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var vowelIndex45:\
    \ Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47: Int = 0\n    var\
    \ vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var vowelIndex50:\
    \ Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52: Int = 0\n    var\
    \ vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var vowelIndex55:\
    \ Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57: Int = 0\n    var\
    \ vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var vowelIndex60:\
    \ Int = 0\n    var vowelIndex61: Int = 0\n    var vowelIndex62: \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpw09a4dhe.swift:72:22: error: expected type\n    var vowelIndex62:\
    \ \n                     ^\n                      <#type#>\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowelsCount = vowels.count\n    var vowelsIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsIndex2 = 0\n    var vowelsCountIndex2 = 0\n    var vowelsIndex3\
    \ = 0\n    var vowelsCountIndex3 = 0\n    var vowelsIndex4 = 0\n    var vowelsCountIndex4\
    \ = 0\n    var vowelsIndex5 = 0\n    var vowelsCountIndex5 = 0\n    var vowelsIndex6\
    \ = 0\n    var vowelsCountIndex6 = 0\n    var vowelsIndex7 = 0\n    var vowelsCountIndex7\
    \ = 0\n    var vowelsIndex8 = 0\n    var vowelsCountIndex8 = 0\n    var vowelsIndex9\
    \ = 0\n    var vowelsCountIndex9 = 0\n    var vowelsIndex10 = 0\n    var vowelsCountIndex10\
    \ = 0\n    var vowelsIndex11 = 0\n    var vowelsCountIndex11 = 0\n    var vowelsIndex12\
    \ = 0\n    var vowelsCountIndex12 = 0\n    var vowelsIndex13 = 0\n    var vowelsCountIndex13\
    \ = 0\n    var vowelsIndex14 = 0\n    var vowelsCountIndex14 = 0\n    var vowelsIndex15\
    \ = 0\n    var vowelsCountIndex15 = 0\n    var vowelsIndex16 = 0\n    var vowelsCountIndex16\
    \ = 0\n    var vowelsIndex17 = 0\n    var vowelsCountIndex17 = 0\n    var vowelsIndex18\
    \ = 0\n    var vowelsCountIndex18 = 0\n    var vowelsIndex19 = 0\n    var vowelsCountIndex19\
    \ = 0\n    var vowelsIndex20 = 0\n    var vowelsCountIndex20 = 0\n    var vowelsIndex21\
    \ = 0\n    var vowelsCountIndex21 = 0\n    var vowelsIndex22 = 0\n    var vowelsCountIndex22\
    \ = 0\n    var vowelsIndex23 = 0\n    var vowelsCountIndex23 = 0\n    var vowelsIndex24\
    \ = 0\n    var vowelsCountIndex24 = 0\n    var vowelsIndex25 = 0\n    var vowelsCountIndex25\
    \ = 0\n    var vowelsIndex26 = 0\n    var vowelsCountIndex26 = 0\n    var vowelsIndex27\
    \ = 0\n    var vowelsCountIndex27 = 0\n    var vowelsIndex28 = 0\n    var vowelsCountIndex28\
    \ = 0\n    var vowelsIndex29 = 0\n    var vowelsCountIndex29 = 0\n    var vowelsIndex30\
    \ = 0\n    var vowelsCountIndex30 = 0\n    var vowelsIndex31 = 0\n    var vowelsCountIndex31\
    \ = 0\n    var vowelsIndex32 = 0\n    var vowelsCountIndex32 = 0\n    var vowelsIndex33\
    \ = 0\n    var vowelsCountIndex33\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnjg_l8x6.swift:76:9: error: type annotation missing in pattern\n\
    \    var vowelsCountIndex33\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.count\n    var vowelIndex = 0\n    var vowelIndex2 = vowels.count - 1\n\
    \    var vowelIndex3 = vowels.count - 2\n    var vowelIndex4 = vowels.count -\
    \ 3\n    var vowelIndex5 = vowels.count - 4\n    var vowelIndex6 = vowels.count\
    \ - 5\n    var vowelIndex7 = vowels.count - 6\n    var vowelIndex8 = vowels.count\
    \ - 7\n    var vowelIndex9 = vowels.count - 8\n    var vowelIndex10 = vowels.count\
    \ - 9\n    var vowelIndex11 = vowels.count - 10\n    var vowelIndex12 = vowels.count\
    \ - 11\n    var vowelIndex13 = vowels.count - 12\n    var vowelIndex14 = vowels.count\
    \ - 13\n    var vowelIndex15 = vowels.count - 14\n    var vowelIndex16 = vowels.count\
    \ - 15\n    var vowelIndex17 = vowels.count - 16\n    var vowelIndex18 = vowels.count\
    \ - 17\n    var vowelIndex19 = vowels.count - 18\n    var vowelIndex20 = vowels.count\
    \ - 19\n    var vowelIndex21 = vowels.count - 20\n    var vowelIndex22 = vowels.count\
    \ - 21\n    var vowelIndex23 = vowels.count - 22\n    var vowelIndex24 = vowels.count\
    \ - 23\n    var vowelIndex25 = vowels.count - 24\n    var vowelIndex26 = vowels.count\
    \ - 25\n    var vowelIndex27 = vowels.count - 26\n    var vowelIndex28 = vowels.count\
    \ - 27\n    var vowelIndex29 = vowels.count - 28\n    var vowelIndex30 = vowels.count\
    \ - 29\n    var vowelIndex31 = vowels.count - 30\n    var vowelIndex32 = vowels.count\
    \ - 31\n    var vowelIndex33 = vowels.count - 32\n    var vowelIndex34 = vowels.count\
    \ - 33\n    var vowelIndex35 = vowels.count - 34\n    var vowelIndex36 = vowels.count\
    \ - 35\n    var vowelIndex37 = vowels.count - 36\n    var vowelIndex38 = vowels.count\
    \ - 37\n    var vowelIndex39 = vowels.count - 38\n    var vowelIndex40 = vowels.count\
    \ - 39\n    var vowelIndex41 = vowels.count - 40\n    var vowelIndex42 = vowels.count\
    \ - 41\n    var vowelIndex43 = vowels.count - 42\n    var vowelIndex44 = vowels.count\
    \ - 43\n    var vowelIndex45 = vowels.count - 44\n    var vowelIndex46 = vowels.count\
    \ - 45\n    var vowelIndex47 = vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpuij7p3ff.swift:57:24: error: cannot find 'vowel' in scope\n   \
    \ var vowelIndex47 = vowel\n                       ^~~~~\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowelsCount =\
    \ vowels.characters.count\n    \n    let vowelIndex = word.characters.reversed().index(of:\
    \ vowels.first!)\n    \n    if vowelIndex == word.characters.count - 1 {\n   \
    \     return \"\"\n    }\n    \n    let consonantIndex = vowelIndex + vowelsCount\n\
    \    \n    if consonantIndex < word.characters.count {\n        return word.substring(to:\
    \ consonantIndex)\n    }\n    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzy77vjzp.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzy77vjzp.swift:12:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelIndex = word.characters.reversed().index(of:\
    \ vowels.first!)\n                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpzy77vjzp.swift:12:49: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    let vowelIndex = word.characters.reversed().index(of:\
    \ vowels.first!)\n                                                ^\n/tmp/tmpzy77vjzp.swift:12:49:\
    \ note: use 'firstIndex(of:)' instead\n    let vowelIndex = word.characters.reversed().index(of:\
    \ vowels.first!)\n                                                ^~~~~\n    \
    \                                            firstIndex\n/tmp/tmpzy77vjzp.swift:14:19:\
    \ error: binary operator '==' cannot be applied to operands of type 'ReversedCollection<String>.Index?'\
    \ and 'Int'\n    if vowelIndex == word.characters.count - 1 {\n       ~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpzy77vjzp.swift:14:19: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Int, Int)\n \
    \   if vowelIndex == word.characters.count - 1 {\n                  ^\n/tmp/tmpzy77vjzp.swift:18:26:\
    \ error: cannot convert value of type 'ReversedCollection<String>.Index?' to expected\
    \ argument type 'Int'\n    let consonantIndex = vowelIndex + vowelsCount\n   \
    \                      ^\n/tmp/tmpzy77vjzp.swift:21:21: error: value of type 'String'\
    \ has no member 'substring'\n        return word.substring(to: consonantIndex)\n\
    \               ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowelIndex = 0\n    var vowelIndex2 = word.characters.count - 1\n   \
    \ var vowelIndex3 = word.characters.count - 2\n    var vowelIndex4 = word.characters.count\
    \ - 3\n    var vowelIndex5 = word.characters.count - 4\n    var vowelIndex6 =\
    \ word.characters.count - 5\n    var vowelIndex7 = word.characters.count - 6\n\
    \    var vowelIndex8 = word.characters.count - 7\n    var vowelIndex9 = word.characters.count\
    \ - 8\n    var vowelIndex10 = word.characters.count - 9\n    var vowelIndex11\
    \ = word.characters.count - 10\n    var vowelIndex12 = word.characters.count -\
    \ 11\n    var vowelIndex13 = word.characters.count - 12\n    var vowelIndex14\
    \ = word.characters.count - 13\n    var vowelIndex15 = word.characters.count -\
    \ 14\n    var vowelIndex16 = word.characters.count - 15\n    var vowelIndex17\
    \ = word.characters.count - 16\n    var vowelIndex18 = word.characters.count -\
    \ 17\n    var vowelIndex19 = word.characters.count - 18\n    var vowelIndex20\
    \ = word.characters.count - 19\n    var vowelIndex21 = word.characters.count -\
    \ 20\n    var vowelIndex22 = word.characters.count - 21\n    var vowelIndex23\
    \ = word.characters.count - 22\n    var vowelIndex24 = word.characters.count -\
    \ 23\n    var vowelIndex25 = word.characters.count - 24\n    var vowelIndex26\
    \ = word.characters.count - 25\n    var vowelIndex27 = word.characters.count -\
    \ 26\n    var vowelIndex28 = word.characters.count - 27\n    var vowelIndex29\
    \ = word.characters.count - 28\n    var vowelIndex30 = word.characters.count -\
    \ 29\n    var vowelIndex31 = word.characters.count - 30\n    var vowelIndex32\
    \ = word.characters.count - 31\n    var vowelIndex33 = word.characters.count -\
    \ 32\n    var vowelIndex34 = word.characters.count - 33\n    var vowelIndex35\
    \ = word.characters.count - 34\n    var vowelIndex36 = word.characters.count -\
    \ 35\n    var vowelIndex37 = word.characters.count - 36\n    var vowelIndex38\
    \ = word.characters.count - 37\n    var vowelIndex39 = word.characters.count -\
    \ 38\n    var vowelIndex40 = word.characters.count - 39\n    var vowelIndex41\
    \ = word.characters.count - 40\n    var vowelIndex42 = word.characters.count -\
    \ 41\n    var vowelIndex43 = word.characters.count - 42\n    var vowelIndex44\
    \ = word.characters.count - 43\n    var vowelIndex45 = word.characters.count -\
    \ 44\n    var vowelIndex46 = word.characters.count - 45\n    var vowelIndex47\
    \ = word.characters.count - 46\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5f2ujvbe.swift:11:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5f2ujvbe.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex3 = word.characters.count - 2\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5f2ujvbe.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex4 = word.characters.count - 3\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5f2ujvbe.swift:14:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex5 = word.characters.count - 4\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5f2ujvbe.swift:15:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex6 = word.characters.count - 5\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5f2ujvbe.swift:16:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex7 = word.characters.count - 6\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5f2ujvbe.swift:17:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex8 = word.characters.count - 7\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'c"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let vowelsCount = vowels.count\n    let vowelsIndex = word.characters.reversed().enumerate().filter\
    \ { ($0.element == \"a\" || $0.element == \"e\" || $0.element == \"i\" || $0.element\
    \ == \"o\" || $0.element == \"u\") }.count\n    let vowelsIndex2 = word.characters.reversed().enumerate().filter\
    \ { ($0.element == \"a\" || $0.element == \"e\" || $0.element == \"i\" || $0.element\
    \ == \"o\" || $0.element == \"u\") }.count\n    if vowelsIndex == 0 || vowelsIndex2\
    \ == 0 {\n        return \"\"\n    }\n    if vowelsIndex > vowelsIndex2 {\n  \
    \      let index = word.characters.reversed().enumerate().filter { ($0.element\
    \ == \"a\" || $0.element == \"e\" || $0.element == \"i\" || $0.element == \"o\"\
    \ || $0.element == \"u\") }.first!.index\n        return word.substring(to: index)\n\
    \    } else {\n        let index = word.characters.reversed().enumerate().filter\
    \ { ($0.element == \"a\" || $0.element == \"e\" || $0.element == \"i\" || $0.element\
    \ == \"o\" || $0.element == \"u\") }.last!.index\n        return word.substring(from:\
    \ index)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpyn_bf89a.swift:11:23: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let vowelsIndex = word.characters.reversed().enumerate().filter\
    \ { ($0.element == \"a\" || $0.element == \"e\" || $0.element == \"i\" || $0.element\
    \ == \"o\" || $0.element == \"u\") }.count\n                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyn_bf89a.swift:12:24: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    let vowelsIndex2 = word.characters.reversed().enumerate().filter\
    \ { ($0.element == \"a\" || $0.element == \"e\" || $0.element == \"i\" || $0.element\
    \ == \"o\" || $0.element == \"u\") }.count\n                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyn_bf89a.swift:17:21: error: the compiler is unable to type-check this\
    \ expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n        let index = word.characters.reversed().enumerate().filter\
    \ { ($0.element == \"a\" || $0.element == \"e\" || $0.element == \"i\" || $0.element\
    \ == \"o\" || $0.element == \"u\") }.first!.index\n                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyn_bf89a.swift:18:21: error: value of type 'String' has no member 'substring'\n\
    \        return word.substring(to: index)\n               ~~~~ ^~~~~~~~~\n/tmp/tmpyn_bf89a.swift:20:21:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        let index\
    \ = word.characters.reversed().enumerate().filter { ($0.element == \"a\" || $0.element\
    \ =="
  stdout: ''
  timestamp: 1660030417
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels = [String]()\n    vowels.append(\"\
    a\")\n    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"\
    o\")\n    vowels.append(\"u\")\n    \n    var vowelsCount = [String: Int]()\n\
    \    vowelsCount[\"a\"] = 1\n    vowelsCount[\"e\"] = 1\n    vowelsCount[\"i\"\
    ] = 1\n    vowelsCount[\"o\"] = 1\n    vowelsCount[\"u\"] = 1\n    \n    var vowelsCount2\
    \ = Dictionary<String, Int>()\n    vowelsCount2[\"a\"] = 1\n    vowelsCount2[\"\
    e\"] = 1\n    vowelsCount2[\"i\"] = 1\n    vowelsCount2[\"o\"] = 1\n    vowelsCount2[\"\
    u\"] = 1\n    \n    var vowelsCount3 = Dictionary<String, Int>()\n    vowelsCount3[\"\
    a\"] = 1\n    vowelsCount3[\"e\"] = 1\n    vowelsCount3[\"i\"] = 1\n    vowelsCount3[\"\
    o\"] = 1\n    vowelsCount3[\"u\"] = 1\n    \n    var vowelsCount4 = Dictionary<String,\
    \ Int>()\n    vowelsCount4[\"a\"] = 1\n    vowelsCount4[\"e\"] = 1\n    vowelsCount4[\"\
    i\"] = 1\n    vowelsCount4[\"o\"] = 1\n    vowelsCount4[\"u\"] = 1\n    \n   \
    \ var vowelsCount5 = Dictionary<String, Int>()\n    vowelsCount5[\"a\"] = 1\n\
    \    vowelsCount5[\"e\"] = 1\n    vowelsCount5[\"i\"] = 1\n    vowelsCount5[\"\
    o\"] = 1\n    vowelsCount5[\"u\"] = 1\n    \n    var vowelsCount6 = Dictionary<String,\
    \ Int>()\n    vowelsCount6[\"a\"] = 1\n    vowelsCount6[\"e\"] = 1\n    vowelsCount6[\"\
    i\"] = 1\n    vowelsCount6[\"o\"] = 1\n    vowelsCount6[\"u\"] = 1\n    \n   \
    \ var vowelsCount7 = Dictionary<String, Int>()\n    vowelsCount7[\"a\"] = 1\n\
    \    vowelsCount7[\"e\"] = 1\n    vowelsCount7[\"i\"] = 1\n    vowelsCount7[\"\
    o\"] = 1\n    vowelsCount7[\"u\"] = 1\n    \n    var vowelsCount8 = Dictionary<String,\
    \ Int>()\n    vowelsCount8[\"a\"] = 1\n    vowelsCount8[\"e\"] = 1\n    vowelsCount8[\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpfak9q8v3.swift:69:18: error: unterminated string literal\n    vowelsCount8[\"\
    \n                 ^\n/tmp/tmpfak9q8v3.swift:69:18: error: missing argument for\
    \ parameter #1 in call\n    vowelsCount8[\"\n                 ^\n            \
    \     <#Dictionary<String, Int>.Index#>\nSwift.Dictionary:8:23: note: 'subscript(_:)'\
    \ declared here\n    @inlinable public subscript(position: Dictionary<Key, Value>.Index)\
    \ -> Dictionary<Key, Value>.Element { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelIndex2:\
    \ Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4: Int = 0\n    var\
    \ vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var vowelIndex7: Int\
    \ = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int = 0\n    var vowelIndex10:\
    \ Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12: Int = 0\n    var\
    \ vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var vowelIndex15:\
    \ Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17: Int = 0\n    var\
    \ vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var vowelIndex20:\
    \ Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22: Int = 0\n    var\
    \ vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var vowelIndex25:\
    \ Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27: Int = 0\n    var\
    \ vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var vowelIndex30:\
    \ Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32: Int = 0\n    var\
    \ vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var vowelIndex35:\
    \ Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37: Int = 0\n    var\
    \ vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var vowelIndex40:\
    \ Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42: Int = 0\n    var\
    \ vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var vowelIndex45:\
    \ Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47: Int = 0\n    var\
    \ vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var vowelIndex50:\
    \ Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52: Int = 0\n    var\
    \ vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var vowelIndex55:\
    \ Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57: Int = 0\n    var\
    \ vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var vowelIndex60:\
    \ Int = 0\n    var vowelIndex61: Int = 0\n    var vowelIndex62: \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpw09a4dhe.swift:72:22: error: expected type\n    var vowelIndex62:\
    \ \n                     ^\n                      <#type#>\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.characters.count\n    var vowelIndex = 0\n    var vowelIndex2 = word.characters.count\
    \ - 1\n    var vowelIndex3 = word.characters.count - 2\n    var vowelIndex4 =\
    \ word.characters.count - 3\n    var vowelIndex5 = word.characters.count - 4\n\
    \    var vowelIndex6 = word.characters.count - 5\n    var vowelIndex7 = word.characters.count\
    \ - 6\n    var vowelIndex8 = word.characters.count - 7\n    var vowelIndex9 =\
    \ word.characters.count - 8\n    var vowelIndex10 = word.characters.count - 9\n\
    \    var vowelIndex11 = word.characters.count - 10\n    var vowelIndex12 = word.characters.count\
    \ - 11\n    var vowelIndex13 = word.characters.count - 12\n    var vowelIndex14\
    \ = word.characters.count - 13\n    var vowelIndex15 = word.characters.count -\
    \ 14\n    var vowelIndex16 = word.characters.count - 15\n    var vowelIndex17\
    \ = word.characters.count - 16\n    var vowelIndex18 = word.characters.count -\
    \ 17\n    var vowelIndex19 = word.characters.count - 18\n    var vowelIndex20\
    \ = word.characters.count - 19\n    var vowelIndex21 = word.characters.count -\
    \ 20\n    var vowelIndex22 = word.characters.count - 21\n    var vowelIndex23\
    \ = word.characters.count - 22\n    var vowelIndex24 = word.characters.count -\
    \ 23\n    var vowelIndex25 = word.characters.count - 24\n    var vowelIndex26\
    \ = word.characters.count - 25\n    var vowelIndex27 = word.characters.count -\
    \ 26\n    var vowelIndex28 = word.characters.count - 27\n    var vowelIndex29\
    \ = word.characters.count - 28\n    var vowelIndex30 = word.characters.count -\
    \ 29\n    var vowelIndex31 = word.characters.count - 30\n    var vowelIndex32\
    \ = word.characters.count - 31\n    var vowelIndex33 = word.characters.count -\
    \ 32\n    var vowelIndex34 = word.characters.count - 33\n    var vowelIndex35\
    \ = word.characters.count - 34\n    var vowelIndex36 = word.characters.count -\
    \ 35\n    var vowelIndex37 = word.characters.count - 36\n    var vowelIndex38\
    \ = word.characters.count - 37\n    var vowelIndex39 = word.characters.count -\
    \ 38\n    var vowelIndex40 = word.characters.count - 39\n    var vowelIndex41\
    \ = word.characters.count - 40\n    var vowelIndex42 = word.characters.count -\
    \ 41\n    var vowelIndex43 = word.characters.count - 42\n    var vowelIndex44\
    \ = word.characters.count - 43\n    var vowelIndex45 = word.characters.count -\
    \ 44\n    var vowelIndex46 = word.characters.count - 45\n    var vowelIndex47\
    \ = word.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpf2s8x78w.swift:57:28: error: expected member name following '.'\n\
    \    var vowelIndex47 = word.\n                           ^\n/tmp/tmpf2s8x78w.swift:10:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    var vowelsCount\
    \ = word.characters.count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpf2s8x78w.swift:12:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var vowelIndex2 = word.characters.count\
    \ - 1\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2s8x78w.swift:13:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndex3 = word.characters.count - 2\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2s8x78w.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndex4 = word.characters.count - 3\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2s8x78w.swift:15:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndex5 = word.characters.count - 4\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2s8x78w.swift:16:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndex6 = word.characters.count - 5\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2s8x78w.swift:17:28: error: 'characters' is unavailable:\
    \ Please use Str"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowelIndex = 0\n    var vowelIndex2 = word.length - 1\n    var vowelIndex3\
    \ = word.length - 1\n    var vowelIndex4 = word.length - 1\n    var vowelIndex5\
    \ = word.length - 1\n    var vowelIndex6 = word.length - 1\n    var vowelIndex7\
    \ = word.length - 1\n    var vowelIndex8 = word.length - 1\n    var vowelIndex9\
    \ = word.length - 1\n    var vowelIndex10 = word.length - 1\n    var vowelIndex11\
    \ = word.length - 1\n    var vowelIndex12 = word.length - 1\n    var vowelIndex13\
    \ = word.length - 1\n    var vowelIndex14 = word.length - 1\n    var vowelIndex15\
    \ = word.length - 1\n    var vowelIndex16 = word.length - 1\n    var vowelIndex17\
    \ = word.length - 1\n    var vowelIndex18 = word.length - 1\n    var vowelIndex19\
    \ = word.length - 1\n    var vowelIndex20 = word.length - 1\n    var vowelIndex21\
    \ = word.length - 1\n    var vowelIndex22 = word.length - 1\n    var vowelIndex23\
    \ = word.length - 1\n    var vowelIndex24 = word.length - 1\n    var vowelIndex25\
    \ = word.length - 1\n    var vowelIndex26 = word.length - 1\n    var vowelIndex27\
    \ = word.length - 1\n    var vowelIndex28 = word.length - 1\n    var vowelIndex29\
    \ = word.length - 1\n    var vowelIndex30 = word.length - 1\n    var vowelIndex31\
    \ = word.length - 1\n    var vowelIndex32 = word.length - 1\n    var vowelIndex33\
    \ = word.length - 1\n    var vowelIndex34 = word.length - 1\n    var vowelIndex35\
    \ = word.length - 1\n    var vowelIndex36 = word.length - 1\n    var vowelIndex37\
    \ = word.length - 1\n    var vowelIndex38 = word.length - 1\n    var vowelIndex39\
    \ = word.length - 1\n    var vowelIndex40 = word.length - 1\n    var vowelIndex41\
    \ = word.length - 1\n    var vowelIndex42 = word.length - 1\n    var vowelIndex43\
    \ = word.length - 1\n    var vowelIndex44 = word.length - 1\n    var vowelIndex45\
    \ = word.length - 1\n    var vowelIndex46 = word.length - 1\n    var vowelIndex47\
    \ = word.length - 1\n    var vowelIndex48 = word.length - 1\n    var vowelIndex49\
    \ = word.length - 1\n    var vowelIndex50 = word.length - 1\n    var vowelIndex51\
    \ = word.length - 1\n    var vowelIndex52 = word.length - 1\n    var vowelIndex53\
    \ = word.length - 1\n    var vowelIndex54 = word.length - 1\n    var vowelIndex55\
    \ = word.length - 1\n    var vowelIndex56 = word.length - 1\n    var vowelIndex57\
    \ = word.length - 1\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwq761n0l.swift:67:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpwq761n0l.swift:11:28: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex2 = word.length - 1\n                      ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:12:28: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex3 = word.length - 1\n                      ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:13:28: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex4 = word.length - 1\n                      ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:14:28: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex5 = word.length - 1\n                      ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:15:28: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex6 = word.length - 1\n                      ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:16:28: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex7 = word.length - 1\n                      ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:17:28: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex8 = word.length - 1\n                      ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:18:28: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex9 = word.length - 1\n                      ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:19:29: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex10 = word.length - 1\n                       ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:20:29: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex11 = word.length - 1\n                       ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:21:29: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex12 = word.length - 1\n                       ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:22:29: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex13 = word.length - 1\n                       ~~~~\
    \ ^~~~~~\n/tmp/tmpwq761n0l.swift:23:29: error: value of type 'String' has no member\
    \ 'length'\n    var vowelIndex14 = wor"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = vowels.count\n    \n  \
    \  var vowelIndex = 0\n    var vowelCount = 0\n    var vowelFound = false\n  \
    \  \n    for index in word.characters.reverse() {\n        if vowels[vowelIndex]\
    \ == String(index) {\n            vowelFound = true\n            vowelCount +=\
    \ 1\n        }\n        \n        if vowelFound == true {\n            if vowelCount\
    \ > vowelsCount {\n                vowelIndex = vowelIndex + 1\n             \
    \   vowelCount = 0\n            }\n        }\n    }\n    \n    if vowelFound ==\
    \ false {\n        return \"\"\n    }\n    \n    return vowels[vowelIndex]\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpgpg0wxvi.swift:22:34: error: value of type 'String' has no member\
    \ 'reverse'\n    for index in word.characters.reverse() {\n                 ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsCountIndex2 = 0\n    var vowelsCountIndex3 = 0\n    var vowelsCountIndex4\
    \ = 0\n    var vowelsCountIndex5 = 0\n    var vowelsCountIndex6 = 0\n    var vowelsCountIndex7\
    \ = 0\n    var vowelsCountIndex8 = 0\n    var vowelsCountIndex9 = 0\n    var vowelsCountIndex10\
    \ = 0\n    var vowelsCountIndex11 = 0\n    var vowelsCountIndex12 = 0\n    var\
    \ vowelsCountIndex13 = 0\n    var vowelsCountIndex14 = 0\n    var vowelsCountIndex15\
    \ = 0\n    var vowelsCountIndex16 = 0\n    var vowelsCountIndex17 = 0\n    var\
    \ vowelsCountIndex18 = 0\n    var vowelsCountIndex19 = 0\n    var vowelsCountIndex20\
    \ = 0\n    var vowelsCountIndex21 = 0\n    var vowelsCountIndex22 = 0\n    var\
    \ vowelsCountIndex23 = 0\n    var vowelsCountIndex24 = 0\n    var vowelsCountIndex25\
    \ = 0\n    var vowelsCountIndex26 = 0\n    var vowelsCountIndex27 = 0\n    var\
    \ vowelsCountIndex28 = 0\n    var vowelsCountIndex29 = 0\n    var vowelsCountIndex30\
    \ = 0\n    var vowelsCountIndex31 = 0\n    var vowelsCountIndex32 = 0\n    var\
    \ vowelsCountIndex33 = 0\n    var vowelsCountIndex34 = 0\n    var vowelsCountIndex35\
    \ = 0\n    var vowelsCountIndex36 = 0\n    var vowelsCountIndex37 = 0\n    var\
    \ vowelsCountIndex38 = 0\n    var vowelsCountIndex39 = 0\n    var vowelsCountIndex40\
    \ = 0\n    var vowelsCountIndex41 = 0\n    var vowelsCountIndex42 = 0\n    var\
    \ vowelsCountIndex43 = 0\n    var vowelsCountIndex44 = 0\n    var vowelsCountIndex45\
    \ = 0\n    var vowelsCountIndex46 = 0\n    var vowelsCountIndex47 = 0\n    var\
    \ vowelsCountIndex48 = 0\n    var vowelsCountIndex49 = 0\n    var vowelsCountIndex50\
    \ = 0\n    var vowelsCountIndex51 = 0\n    var vowelsCountIndex52 = 0\n    var\
    \ vowelsCountIndex53 = 0\n    var vowelsCountIndex54 = 0\n    var vowelsCountIndex55\
    \ = 0\n    var vowelsCountIndex56 = 0\n    var vowelsCountIndex57 = 0\n    var\
    \ vowelsCountIndex58 = 0\n    var vowelsCountIndex59 = 0\n    var vowelsCountIndex60\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppkj3uht9.swift:72:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    var vowelIndex = 0\n    var vowelCount = 0\n    var vowelIndex2\
    \ = 0\n    var vowelCount2 = 0\n    \n    for char in word.characters {\n    \
    \    if vowels.contains(char) {\n            vowelCount += 1\n            if vowelIndex\
    \ == 0 {\n                vowelIndex = word.characters.index(of: char)!\n    \
    \        }\n        } else {\n            vowelCount -= 1\n            if vowelIndex2\
    \ == 0 {\n                vowelIndex2 = word.characters.index(of: char)!\n   \
    \         }\n        }\n    }\n    \n    if vowelCount > 0 {\n        for char\
    \ in word.characters {\n            if vowels.contains(char) {\n             \
    \   vowelCount2 += 1\n                if vowelIndex2 == word.characters.index(of:\
    \ char)! {\n                    vowelIndex2 = word.characters.index(of: char)!\n\
    \                }\n            } else {\n                vowelCount2 -= 1\n \
    \               if vowelIndex2 == word.characters.index(of: char)! {\n       \
    \             vowelIndex2 = word.characters.index(of: char)!\n               \
    \ }\n            }\n        }\n    }\n    \n    if vowelCount > 0 {\n        return\
    \ \"\"\n    }\n    \n    if vowelCount2 > 0 {\n        return \"\"\n    }\n  \
    \  \n    if vowelIndex == word.characters.count - 1 {\n        return word.characters.last!\n\
    \    }\n    \n    if vowelIndex2 == word.characters.count - 1 {\n        return\
    \ word.characters.last!\n    }\n    \n    if vowelIndex < vowelIndex2 {\n    \
    \    return word.characters.last!\n    }\n    \n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmph0357izx.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmph0357izx.swift:18:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmph0357izx.swift:21:61:\
    \ error: cannot assign value of type 'String.Index' to type 'Int'\n          \
    \      vowelIndex = word.characters.index(of: char)!\n                       \
    \      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n/tmp/tmph0357izx.swift:26:62: error:\
    \ cannot assign value of type 'String.Index' to type 'Int'\n                vowelIndex2\
    \ = word.characters.index(of: char)!\n                              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    /tmp/tmph0357izx.swift:32:26: error: 'characters' is unavailable: Please use String\
    \ directly\n        for char in word.characters {\n                         ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmph0357izx.swift:33:32:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            if vowels.contains(char) {\n                               ^\n/tmp/tmph0357izx.swift:35:32:\
    \ error: operator function '==' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \                if vowelIndex2 == word.characters.index(of: char)! {\n      \
    \                         ^\nSwift.BinaryInteger:2:24: note: where 'Other' = 'String.Index'\n\
    \    public static func == <Other>(lhs: Self, rhs: Other) -> Bool where Other\
    \ : BinaryInteger\n                       ^\n/tmp/tmph0357izx.swift:36:66: error:\
    \ cannot assign value of type 'String.Index' to type 'Int'\n                 \
    \   vowelIndex2 = word.characters.index(of: char)!\n                         \
    \         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n/tmp/tmph0357izx.swift:40:32: error:\
    \ op"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowelsCount =\
    \ vowels.characters.count\n    let vowelsArray = vowels.characters\n    let vowelsArrayCount\
    \ = vowelsArray.count\n    var vowelIndex = 0\n    var vowelIndex2 = 0\n    var\
    \ vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 = 0\n    var vowelIndex6\
    \ = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n    var vowelIndex9 =\
    \ 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n    var vowelIndex12\
    \ = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n    var vowelIndex15\
    \ = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n    var vowelIndex18\
    \ = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n    var vowelIndex21\
    \ = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n    var vowelIndex24\
    \ = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n    var vowelIndex27\
    \ = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n    var vowelIndex30\
    \ = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n    var vowelIndex33\
    \ = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n    var vowelIndex36\
    \ = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n    var vowelIndex39\
    \ = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n    var vowelIndex42\
    \ = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n    var vowelIndex45\
    \ = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n    var vowelIndex48\
    \ = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n    var vowelIndex51\
    \ = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n    var vowelIndex54\
    \ = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n    var vowelIndex57\
    \ = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n    var vowelIndex60\
    \ = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n    var vowelIndex63\
    \ = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n    var vowelIndex66\
    \ = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n    var vowelIndex69\
    \ = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n    var vowelIndex72\
    \ = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n    var vowelIndex75\
    \ = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n    var vowelIndex78\
    \ = 0\n    var vowelIndex79 = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpy50g04u_.swift:92:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpy50g04u_.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpy50g04u_.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpy50g04u_.swift:10:9: warning: initialization of immutable value 'vowelsCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let vowelsCount = vowels.characters.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpy50g04u_.swift:12:9:\
    \ warning: initialization of immutable value 'vowelsArrayCount' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    let vowelsArrayCount\
    \ = vowelsArray.count\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpy50g04u_.swift:13:9:\
    \ warning: initialization of variable 'vowelIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpy50g04u_.swift:14:9: warning: initialization of variable 'vowelIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpy50g04u_.swift:15:9:\
    \ warning: initialization of variable 'vowelIndex3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpy50g04u_.swift:16:9: warning: initialization of variable 'vowelIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpy50g04u_.swift:17:9:\
    \ warning: initialization of variable 'vowelIndex5' was never used"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsArray =\
    \ vowels.characters\n    var vowelsCount = vowels.characters.count\n    var vowelsArrayCount\
    \ = vowelsArray.count\n    var vowelsArrayIndex = 0\n    var vowelsArrayIndexCount\
    \ = 0\n    var vowelsArrayIndexCountMax = vowelsArrayCount - 1\n    var vowelsArrayIndexCountMin\
    \ = 0\n    var vowelsArrayIndexCountMinMax = vowelsArrayCount - 1\n    var vowelsArrayIndexCountMaxMin\
    \ = vowelsArrayCount - 1\n    var vowelsArrayIndexCountMinMaxMin = vowelsArrayCount\
    \ - 1\n    var vowelsArrayIndexCountMaxMinMax = vowelsArrayCount - 1\n    var\
    \ vowelsArrayIndexCountMaxMinMaxMin = vowelsArrayCount - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMax\
    \ = vowelsArrayCount - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMin = vowelsArrayCount\
    \ - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMax = vowelsArrayCount -\
    \ 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMin = vowelsArrayCount\
    \ - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMax = vowelsArrayCount\
    \ - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArrayCount\
    \ - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArrayCount\
    \ - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrayCount\
    \ - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrayCount\
    \ - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArrayCount\
    \ - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax =\
    \ vowelsArrayCount - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsArrayCount - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsArrayCount - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsArrayCount - 1\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsArrayCount - 1\n    var vowelsArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpl0xxmia3.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl0xxmia3.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpl0xxmia3.swift:28:9: error: invalid redeclaration of 'vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin'\n\
    \    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin = vowelsArrayCount\
    \ - 1\n        ^\n/tmp/tmpl0xxmia3.swift:27:9: note: 'vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin'\
    \ previously declared here\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMin\
    \ = vowelsArrayCount - 1\n        ^\n/tmp/tmpl0xxmia3.swift:30:9: error: invalid\
    \ redeclaration of 'vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax'\n\
    \    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrayCount\
    \ - 1\n        ^\n/tmp/tmpl0xxmia3.swift:29:9: note: 'vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax'\
    \ previously declared here\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsArrayCount - 1\n        ^\n/tmp/tmpl0xxmia3.swift:33:9: error: invalid\
    \ redeclaration of 'vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax'\n\
    \    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax = vowelsArrayCount\
    \ - 1\n        ^\n/tmp/tmpl0xxmia3.swift:32:9: note: 'vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax'\
    \ previously declared here\n    var vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMax\
    \ = vowelsArrayCount - 1\n        ^\n/tmp/tmpl0xxmia3.swift:35:9: error: invalid\
    \ redeclaration of 'vowelsArrayIndexCountMaxMinMaxMinMaxMinMaxMinMaxMinMaxMinMaxMin'\n\
    \    var vowelsArrayI"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsCountIndex2 = 0\n    var vowelsCountIndex3 = 0\n    var vowelsCountIndex4\
    \ = 0\n    var vowelsCountIndex5 = 0\n    var vowelsCountIndex6 = 0\n    var vowelsCountIndex7\
    \ = 0\n    var vowelsCountIndex8 = 0\n    var vowelsCountIndex9 = 0\n    var vowelsCountIndex10\
    \ = 0\n    var vowelsCountIndex11 = 0\n    var vowelsCountIndex12 = 0\n    var\
    \ vowelsCountIndex13 = 0\n    var vowelsCountIndex14 = 0\n    var vowelsCountIndex15\
    \ = 0\n    var vowelsCountIndex16 = 0\n    var vowelsCountIndex17 = 0\n    var\
    \ vowelsCountIndex18 = 0\n    var vowelsCountIndex19 = 0\n    var vowelsCountIndex20\
    \ = 0\n    var vowelsCountIndex21 = 0\n    var vowelsCountIndex22 = 0\n    var\
    \ vowelsCountIndex23 = 0\n    var vowelsCountIndex24 = 0\n    var vowelsCountIndex25\
    \ = 0\n    var vowelsCountIndex26 = 0\n    var vowelsCountIndex27 = 0\n    var\
    \ vowelsCountIndex28 = 0\n    var vowelsCountIndex29 = 0\n    var vowelsCountIndex30\
    \ = 0\n    var vowelsCountIndex31 = 0\n    var vowelsCountIndex32 = 0\n    var\
    \ vowelsCountIndex33 = 0\n    var vowelsCountIndex34 = 0\n    var vowelsCountIndex35\
    \ = 0\n    var vowelsCountIndex36 = 0\n    var vowelsCountIndex37 = 0\n    var\
    \ vowelsCountIndex38 = 0\n    var vowelsCountIndex39 = 0\n    var vowelsCountIndex40\
    \ = 0\n    var vowelsCountIndex41 = 0\n    var vowelsCountIndex42 = 0\n    var\
    \ vowelsCountIndex43 = 0\n    var vowelsCountIndex44 = 0\n    var vowelsCountIndex45\
    \ = 0\n    var vowelsCountIndex46 = 0\n    var vowelsCountIndex47 = 0\n    var\
    \ vowelsCountIndex48 = 0\n    var vowelsCountIndex49 = 0\n    var vowelsCountIndex50\
    \ = 0\n    var vowelsCountIndex51 = 0\n    var vowelsCountIndex52 = 0\n    var\
    \ vowelsCountIndex53 = 0\n    var vowelsCountIndex54 = 0\n    var vowelsCountIndex55\
    \ = 0\n    var vowelsCountIndex56 = 0\n    var vowelsCountIndex57 = 0\n    var\
    \ vowelsCountIndex58 = 0\n    var vowelsCountIndex59 = 0\n    var vowelsCountIndex60\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppkj3uht9.swift:72:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsArray =\
    \ vowels.characters\n    var vowelsArrayCount = vowels.characters.count\n    var\
    \ vowelsArrayIndex = vowels.characters.index(of: \"a\")\n    var vowelsArrayLastIndex\
    \ = vowels.characters.index(of: \"e\")\n    var vowelsArrayFirstIndex = vowels.characters.index(of:\
    \ \"i\")\n    var vowelsArrayLast = vowels.characters.index(of: \"o\")\n    var\
    \ vowelsArrayFirst = vowels.characters.index(of: \"u\")\n    var vowelsArrayLast2\
    \ = vowels.characters.index(of: \"A\")\n    var vowelsArrayFirst2 = vowels.characters.index(of:\
    \ \"E\")\n    var vowelsArrayFirst3 = vowels.characters.index(of: \"I\")\n   \
    \ var vowelsArrayLast3 = vowels.characters.index(of: \"O\")\n    var vowelsArrayFirst4\
    \ = vowels.characters.index(of: \"U\")\n    var vowelsArrayLast4 = vowels.characters.index(of:\
    \ \"a\")\n    var vowelsArrayFirst5 = vowels.characters.index(of: \"e\")\n   \
    \ var vowelsArrayLast5 = vowels.characters.index(of: \"i\")\n    var vowelsArrayFirst6\
    \ = vowels.characters.index(of: \"o\")\n    var vowelsArrayLast6 = vowels.characters.index(of:\
    \ \"u\")\n    var vowelsArrayFirst7 = vowels.characters.index(of: \"A\")\n   \
    \ var vowelsArrayLast7 = vowels.characters.index(of: \"E\")\n    var vowelsArrayFirst8\
    \ = vowels.characters.index(of: \"I\")\n    var vowelsArrayLast8 = vowels.characters.index(of:\
    \ \"O\")\n    var vowelsArrayFirst9 = vowels.characters.index(of: \"U\")\n   \
    \ var vowelsArrayLast9 = vowels.characters.index(of: \"a\")\n    var vowelsArrayFirst10\
    \ = vowels.characters.index(of: \"e\")\n    var vowelsArrayLast10 = vowels.characters.index(of:\
    \ \"i\")\n    var vowelsArrayFirst11 = vowels.characters.index(of: \"o\")\n  \
    \  var vowelsArrayLast11 = vowels.characters.index(of: \"u\")\n    var vowelsArrayFirst12\
    \ = vowels.characters.index(of: \"A\")\n    var vowelsArrayLast12 = vowels.characters.index(of:\
    \ \"E\")\n    var vowelsArrayFirst13 = vowels.characters.index(of: \"I\")\n  \
    \  var vowelsArrayLast13 = vowels.characters.index(of: \"O\")\n    var vowelsArrayFirst14\
    \ = vowels.characters.index(of: \"U\")\n    var vowelsArrayLast14 = vowels.characters.index(of:\
    \ \"a\")\n    var vowelsArrayFirst15 = vowels.characters.index(of: \"e\")\n  \
    \  var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ydlkb_d.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArray = vowels.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp5ydlkb_d.swift:11:35: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsArrayCount = vowels.characters.count\n  \
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5ydlkb_d.swift:12:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelsArrayIndex = vowels.characters.index(of:\
    \ \"a\")\n                                  ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp5ydlkb_d.swift:12:46: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n    var vowelsArrayIndex = vowels.characters.index(of:\
    \ \"a\")\n                                             ^\n/tmp/tmp5ydlkb_d.swift:12:46:\
    \ note: use 'firstIndex(of:)' instead\n    var vowelsArrayIndex = vowels.characters.index(of:\
    \ \"a\")\n                                             ^~~~~\n               \
    \                              firstIndex\n/tmp/tmp5ydlkb_d.swift:13:39: error:\
    \ 'characters' is unavailable: Please use String directly\n    var vowelsArrayLastIndex\
    \ = vowels.characters.index(of: \"e\")\n                                     \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp5ydlkb_d.swift:13:50:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n    var vowelsArrayLastIndex\
    \ = vowels.characters.index(of: \"e\")\n                                     \
    \            ^\n/tmp/tmp5ydlkb_d.swift:13:50: note: use 'firstIndex(of:)' instead\n\
    \    var vowelsArrayLastIndex = vowels.characters.index(of"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountIndex2: Int = 0\n    var vowelsCountIndex3: Int\
    \ = 0\n    var vowelsCountIndex4: Int = 0\n    var vowelsCountIndex5: Int = 0\n\
    \    var vowelsCountIndex6: Int = 0\n    var vowelsCountIndex7: Int = 0\n    var\
    \ vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9: Int = 0\n    var vowelsCountIndex10:\
    \ Int = 0\n    var vowelsCountIndex11: Int = 0\n    var vowelsCountIndex12: Int\
    \ = 0\n    var vowelsCountIndex13: Int = 0\n    var vowelsCountIndex14: Int =\
    \ 0\n    var vowelsCountIndex15: Int = 0\n    var vowelsCountIndex16: Int = 0\n\
    \    var vowelsCountIndex17: Int = 0\n    var vowelsCountIndex18: Int = 0\n  \
    \  var vowelsCountIndex19: Int = 0\n    var vowelsCountIndex20: Int = 0\n    var\
    \ vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22: Int = 0\n    var vowelsCountIndex23:\
    \ Int = 0\n    var vowelsCountIndex24: Int = 0\n    var vowelsCountIndex25: Int\
    \ = 0\n    var vowelsCountIndex26: Int = 0\n    var vowelsCountIndex27: Int =\
    \ 0\n    var vowelsCountIndex28: Int = 0\n    var vowelsCountIndex29: Int = 0\n\
    \    var vowelsCountIndex30: Int = 0\n    var vowelsCountIndex31: Int = 0\n  \
    \  var vowelsCountIndex32: Int = 0\n    var vowelsCountIndex33: Int = 0\n    var\
    \ vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35: Int = 0\n    var vowelsCountIndex36:\
    \ Int = 0\n    var vowelsCountIndex37: Int = 0\n    var vowelsCountIndex38: Int\
    \ = 0\n    var vowelsCountIndex39: Int = 0\n    var vowelsCountIndex40: Int =\
    \ 0\n    var vowelsCountIndex41: Int = 0\n    var vowelsCountIndex42: Int = 0\n\
    \    var vowelsCountIndex43: Int = 0\n    var vowelsCountIndex44: Int = 0\n  \
    \  var vowelsCountIndex45: Int = 0\n    var vowelsCountIndex46: Int = 0\n    var\
    \ vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48: Int = 0\n    var vowelsCountIndex49\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpz0ur_6w0.swift:60:9: error: type annotation missing in pattern\n\
    \    var vowelsCountIndex49\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"\"]\n    for char in word.characters\
    \ {\n        if char.unicodeScalars.contains(.vowel) {\n            vowels.append(char)\n\
    \        }\n    }\n    if vowels.count > 0 {\n        return vowels.last!\n  \
    \  }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpczmt83w8.swift:10:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpczmt83w8.swift:11:42:\
    \ error: type 'Unicode.Scalar' has no member 'vowel'\n        if char.unicodeScalars.contains(.vowel)\
    \ {\n                                        ~^~~~~\n/tmp/tmpczmt83w8.swift:12:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(char)\n                          ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    var closestVowelIndex = 0\n    var closestVowelDistance = word.count\n\
    \    \n    for index in 0..<word.count {\n        if vowels.contains(word[index])\
    \ {\n            vowelIndex = index\n        }\n    }\n    \n    for index in\
    \ 0..<word.count {\n        if vowels.contains(word[index]) {\n            closestVowelIndex\
    \ = index\n            closestVowelDistance = word.count - index\n        }\n\
    \    }\n    \n    if closestVowelDistance < word.count {\n        return \"\"\n\
    \    }\n    \n    if closestVowelDistance == 0 {\n        return word[vowelIndex]\n\
    \    }\n    \n    if closestVowelDistance == word.count {\n        return word[vowelIndex..<word.count]\n\
    \    }\n    \n    if closestVowelDistance > word.count {\n        return \"\"\n\
    \    }\n    \n    return word[vowelIndex..<closestVowelIndex]\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0m45autr.swift:16:28: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if vowels.contains(word[index])\
    \ {\n                           ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp0m45autr.swift:22:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if vowels.contains(word[index]) {\n                           ^~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0m45autr.swift:33:20:\
    \ error: cannot convert return expression of type 'Character' to return type 'String'\n\
    \        return word[vowelIndex]\n               ~~~~^~~~~~~~~~~~\n/tmp/tmp0m45autr.swift:37:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n        return word[vowelIndex..<word.count]\n\
    \               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmp0m45autr.swift:44:12: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an integer range, use a String.Index range instead.\n    return\
    \ word[vowelIndex..<closestVowelIndex]\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    let vowelsArray\
    \ = vowels.characters.map { String($0) }\n    \n    let vowelsArray2 = vowels.characters.map\
    \ { String($0) }\n    \n    let vowelsArray3 = vowels.characters.map { String($0)\
    \ }\n    \n    let vowelsArray4 = vowels.characters.map { String($0) }\n    \n\
    \    let vowelsArray5 = vowels.characters.map { String($0) }\n    \n    let vowelsArray6\
    \ = vowels.characters.map { String($0) }\n    \n    let vowelsArray7 = vowels.characters.map\
    \ { String($0) }\n    \n    let vowelsArray8 = vowels.characters.map { String($0)\
    \ }\n    \n    let vowelsArray9 = vowels.characters.map { String($0) }\n    \n\
    \    let vowelsArray10 = vowels.characters.map { String($0) }\n    \n    let vowelsArray11\
    \ = vowels.characters.map { String($0) }\n    \n    let vowelsArray12 = vowels.characters.map\
    \ { String($0) }\n    \n    let vowelsArray13 = vowels.characters.map { String($0)\
    \ }\n    \n    let vowelsArray14 = vowels.characters.map { String($0) }\n    \n\
    \    let vowelsArray15 = vowels.characters.map { String($0) }\n    \n    let vowelsArray16\
    \ = vowels.characters.map { String($0) }\n    \n    let vowelsArray17 = vowels.characters.map\
    \ { String($0) }\n    \n    let vowelsArray18 = vowels.characters.map { String($0)\
    \ }\n    \n    let vowelsArray19 = vowels.characters.map { String($0) }\n    \n\
    \    let vowelsArray20 = vowels.characters.map { String($0) }\n    \n    let vowelsArray21\
    \ = vowels.characters.map { String($0) }\n    \n    let vowelsArray22 = vowels.characters.map\
    \ { String($0) }\n    \n    let vowelsArray23 = vowels.characters.map { String($0)\
    \ }\n    \n    let vowelsArray24 = vowels.characters.map { String($0) }\n    \n\
    \    let vowelsArray25 = vowels.characters.map { String($0) }\n    \n    let vowelsArray26\
    \ = vowels.characters.map { String($0) }\n    \n    let vowelsArray27 = vowels.characters.map\
    \ { String($0) }\n    \n    let vowelsArray28 = vowels.characters.map { String($0)\
    \ }\n    \n    let vowelsArray29 = \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpj4sk2_7y.swift:68:24: error: expected initial value after '='\n\
    \    let vowelsArray29 = \n                       ^\n/tmp/tmpj4sk2_7y.swift:12:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsArray\
    \ = vowels.characters.map { String($0) }\n                             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj4sk2_7y.swift:14:31:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsArray2\
    \ = vowels.characters.map { String($0) }\n                              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj4sk2_7y.swift:16:31:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsArray3\
    \ = vowels.characters.map { String($0) }\n                              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj4sk2_7y.swift:18:31:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsArray4\
    \ = vowels.characters.map { String($0) }\n                              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj4sk2_7y.swift:20:31:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsArray5\
    \ = vowels.characters.map { String($0) }\n                              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj4sk2_7y.swift:22:31:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsArray6\
    \ = vowels.characters.map { String($0) }\n                              ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               "
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelsIndex: Int = 0\n    var\
    \ vowelsIndex2: Int = 0\n    var vowelsIndex3: Int = 0\n    var vowelsIndex4:\
    \ Int = 0\n    var vowelsIndex5: Int = 0\n    var vowelsIndex6: Int = 0\n    var\
    \ vowelsIndex7: Int = 0\n    var vowelsIndex8: Int = 0\n    var vowelsIndex9:\
    \ Int = 0\n    var vowelsIndex10: Int = 0\n    var vowelsIndex11: Int = 0\n  \
    \  var vowelsIndex12: Int = 0\n    var vowelsIndex13: Int = 0\n    var vowelsIndex14:\
    \ Int = 0\n    var vowelsIndex15: Int = 0\n    var vowelsIndex16: Int = 0\n  \
    \  var vowelsIndex17: Int = 0\n    var vowelsIndex18: Int = 0\n    var vowelsIndex19:\
    \ Int = 0\n    var vowelsIndex20: Int = 0\n    var vowelsIndex21: Int = 0\n  \
    \  var vowelsIndex22: Int = 0\n    var vowelsIndex23: Int = 0\n    var vowelsIndex24:\
    \ Int = 0\n    var vowelsIndex25: Int = 0\n    var vowelsIndex26: Int = 0\n  \
    \  var vowelsIndex27: Int = 0\n    var vowelsIndex28: Int = 0\n    var vowelsIndex29:\
    \ Int = 0\n    var vowelsIndex30: Int = 0\n    var vowelsIndex31: Int = 0\n  \
    \  var vowelsIndex32: Int = 0\n    var vowelsIndex33: Int = 0\n    var vowelsIndex34:\
    \ Int = 0\n    var vowelsIndex35: Int = 0\n    var vowelsIndex36: Int = 0\n  \
    \  var vowelsIndex37: Int = 0\n    var vowelsIndex38: Int = 0\n    var vowelsIndex39:\
    \ Int = 0\n    var vowelsIndex40: Int = 0\n    var vowelsIndex41: Int = 0\n  \
    \  var vowelsIndex42: Int = 0\n    var vowelsIndex43: Int = 0\n    var vowelsIndex44:\
    \ Int = 0\n    var vowelsIndex45: Int = 0\n    var vowelsIndex46: Int = 0\n  \
    \  var vowelsIndex47: Int = 0\n    var vowelsIndex48: Int = 0\n    var vowelsIndex49:\
    \ Int = 0\n    var vowelsIndex50: Int = 0\n    var vowelsIndex51: Int = 0\n  \
    \  var vowelsIndex52: Int = 0\n    var vowelsIndex53: Int = 0\n    var vowelsIndex54:\
    \ Int = 0\n    var vowelsIndex55: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmps3g1rovr.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmps3g1rovr.swift:10:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmps3g1rovr.swift:11:9: warning: variable 'vowelsIndex' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelsIndex: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmps3g1rovr.swift:12:9: warning: variable 'vowelsIndex2' was\
    \ never used; consider replacing with '_' or removing it\n    var vowelsIndex2:\
    \ Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:13:9: warning:\
    \ variable 'vowelsIndex3' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex3: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:14:9:\
    \ warning: variable 'vowelsIndex4' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsIndex4: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmps3g1rovr.swift:15:9: warning: variable 'vowelsIndex5' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex5: Int\
    \ = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:16:9: warning:\
    \ variable 'vowelsIndex6' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex6: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:17:9:\
    \ warning: variable 'vowelsIndex7' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsIndex7: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmps3g1rovr.swift:18:9: warning: variable 'vowelsIndex8' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex8: Int\
    \ = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:19:9: warning:\
    \ variable 'vowelsIndex9' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex9: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:20:9:\
    \ warning: vari"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    var vowelIndex = 0\n    var vowelIndex2 = vowels.count - 1\n \
    \   \n    var closestVowel = \"\"\n    \n    for char in word.characters {\n \
    \       \n        if vowelIndex == 0 {\n            \n            if char == \"\
    a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n  \
    \              \n                closestVowel = char\n                vowelIndex++\n\
    \            }\n        }\n        \n        if vowelIndex2 == 0 {\n         \
    \   \n            if char == \"a\" || char == \"e\" || char == \"i\" || char ==\
    \ \"o\" || char == \"u\" {\n                \n                closestVowel = char\n\
    \                vowelIndex2--\n            }\n        }\n        \n        if\
    \ char == closestVowel {\n            \n            vowelIndex++\n           \
    \ vowelIndex2--\n        }\n    }\n    \n    return closestVowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmplnqmzzrd.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmplnqmzzrd.swift:23:32:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      closestVowel = char\n                               ^~~~\n/tmp/tmplnqmzzrd.swift:24:27:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \      vowelIndex++\n                          ^~\n/tmp/tmplnqmzzrd.swift:32:32:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      closestVowel = char\n                               ^~~~\n/tmp/tmplnqmzzrd.swift:33:28:\
    \ error: cannot find operator '--' in scope; did you mean '-= 1'?\n          \
    \      vowelIndex2--\n                           ^~\n/tmp/tmplnqmzzrd.swift:37:17:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        if char == closestVowel {\n           ~~~~ ^  ~~~~~~~~~~~~\n\
    /tmp/tmplnqmzzrd.swift:37:17: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ if char == closestVowel {\n                ^\n/tmp/tmplnqmzzrd.swift:39:23:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  vowelIndex++\n                      ^~\n/tmp/tmplnqmzzrd.swift:40:24: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n            vowelIndex2--\n\
    \                       ^~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelsCountIndex\
    \ = 0\n    var vowelsCountMax = 0\n    var vowelsCountMin = 0\n    var vowelsCountSum\
    \ = 0\n    var vowelsCountSumMax = 0\n    var vowelsCountSumMin = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex\
    \ = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n\
    \    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var\
    \ vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex\
    \ = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n\
    \    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var\
    \ vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex\
    \ = 0\n    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n\
    \    var vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var\
    \ vowelsCountSumMaxIndex = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex\
    \ = 0\n    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n\
    \    var vowelsCountSumMinIndex = 0\n    var vowelsCountSumMaxIndex = 0\n    var\
    \ vowelsCountSumMinIndex = 0\n    var vowelsCountSumMax\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp28ejc17a.swift:20:9: error: invalid redeclaration of 'vowelsCountSumMaxIndex'\n\
    \    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:18:9: note:\
    \ 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:21:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:19:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    var vowelsCountSumMinIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:22:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMaxIndex'\n    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:18:9:\
    \ note: 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:23:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:19:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    var vowelsCountSumMinIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:24:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMaxIndex'\n    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:18:9:\
    \ note: 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:25:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:19:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    var vowelsCountSumMinIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:26:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMaxIndex'\n    var vowelsCountSumMaxIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:18:9:\
    \ note: 'vowelsCountSumMaxIndex' previously declared here\n    var vowelsCountSumMaxIndex\
    \ = 0\n        ^\n/tmp/tmp28ejc17a.swift:27:9: error: invalid redeclaration of\
    \ 'vowelsCountSumMinIndex'\n    var vowelsCountSumMinIndex = 0\n        ^\n/tmp/tmp28ejc17a.swift:19:9:\
    \ note: 'vowelsCountSumMinIndex' previously declared here\n    v"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    var vowelIndex = 0\n    var vowelIndex2 = word.characters.count\
    \ - 1\n    \n    while vowelIndex < vowels.count && vowelIndex2 < word.characters.count\
    \ {\n        if vowels[vowelIndex] == word.characters[vowelIndex2] {\n       \
    \     vowelIndex += 1\n            vowelIndex2 -= 1\n        } else {\n      \
    \      vowelIndex += 1\n            vowelIndex2 -= 1\n        }\n    }\n    \n\
    \    if vowelIndex == 0 {\n        return \"\"\n    }\n    \n    if vowelIndex\
    \ == vowels.count {\n        return \"\"\n    }\n    \n    return vowels[vowelIndex\
    \ - 1]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpa49nmpp1.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = word.characters.count - 1\n     \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpa49nmpp1.swift:15:59: error: 'characters' is unavailable: Please\
    \ use String directly\n    while vowelIndex < vowels.count && vowelIndex2 < word.characters.count\
    \ {\n                                                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpa49nmpp1.swift:16:49: error: no exact\
    \ matches in call to subscript \n        if vowels[vowelIndex] == word.characters[vowelIndex2]\
    \ {\n                                                ^\nSwift.String:3:12: note:\
    \ candidate expects value of type 'Range<String.Index>' for parameter #1 (got\
    \ 'Int')\n    public subscript(r: Range<String.Index>) -> Substring { get }\n\
    \           ^\nSwift.Collection:3:23: note: candidate expects value of type '(UnboundedRange_)\
    \ -> ()' for parameter #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_)\
    \ -> ()) -> Self.SubSequence { get }\n                      ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelCount: Int = 0\n    var vowelIndex2: Int = 0\n    var vowelCount2:\
    \ Int = 0\n    var vowelIndex3: Int = 0\n    var vowelCount3: Int = 0\n    var\
    \ vowelIndex4: Int = 0\n    var vowelCount4: Int = 0\n    var vowelIndex5: Int\
    \ = 0\n    var vowelCount5: Int = 0\n    var vowelIndex6: Int = 0\n    var vowelCount6:\
    \ Int = 0\n    var vowelIndex7: Int = 0\n    var vowelCount7: Int = 0\n    var\
    \ vowelIndex8: Int = 0\n    var vowelCount8: Int = 0\n    var vowelIndex9: Int\
    \ = 0\n    var vowelCount9: Int = 0\n    var vowelIndex10: Int = 0\n    var vowelCount10:\
    \ Int = 0\n    var vowelIndex11: Int = 0\n    var vowelCount11: Int = 0\n    var\
    \ vowelIndex12: Int = 0\n    var vowelCount12: Int = 0\n    var vowelIndex13:\
    \ Int = 0\n    var vowelCount13: Int = 0\n    var vowelIndex14: Int = 0\n    var\
    \ vowelCount14: Int = 0\n    var vowelIndex15: Int = 0\n    var vowelCount15:\
    \ Int = 0\n    var vowelIndex16: Int = 0\n    var vowelCount16: Int = 0\n    var\
    \ vowelIndex17: Int = 0\n    var vowelCount17: Int = 0\n    var vowelIndex18:\
    \ Int = 0\n    var vowelCount18: Int = 0\n    var vowelIndex19: Int = 0\n    var\
    \ vowelCount19: Int = 0\n    var vowelIndex20: Int = 0\n    var vowelCount20:\
    \ Int = 0\n    var vowelIndex21: Int = 0\n    var vowelCount21: Int = 0\n    var\
    \ vowelIndex22: Int = 0\n    var vowelCount22: Int = 0\n    var vowelIndex23:\
    \ Int = 0\n    var vowelCount23: Int = 0\n    var vowelIndex24: Int = 0\n    var\
    \ vowelCount24: Int = 0\n    var vowelIndex25: Int = 0\n    var vowelCount25:\
    \ Int = 0\n    var vowelIndex26: Int = 0\n    var vowelCount26: Int = 0\n    var\
    \ vowelIndex27: Int = 0\n    var vowelCount27: Int = 0\n    var vowelIndex28:\
    \ Int = 0\n    var vowelCount28: Int = 0\n    var vowelIndex29: Int = 0\n    var\
    \ vowelCount29: Int = 0\n    var vowelIndex30: Int = 0\n    var vowelCount30:\
    \ Int = 0\n    var vowelIndex31: Int = 0\n    var vowelCount31: Int = 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpliwwck8o.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpliwwck8o.swift:10:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpliwwck8o.swift:11:9: warning: variable 'vowelIndex' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex: Int =\
    \ 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpliwwck8o.swift:12:9: warning: variable\
    \ 'vowelCount' was never used; consider replacing with '_' or removing it\n  \
    \  var vowelCount: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpliwwck8o.swift:13:9:\
    \ warning: variable 'vowelIndex2' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelIndex2: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpliwwck8o.swift:14:9: warning: variable 'vowelCount2' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelCount2: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpliwwck8o.swift:15:9: warning: variable 'vowelIndex3' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex3: Int =\
    \ 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpliwwck8o.swift:16:9: warning: variable\
    \ 'vowelCount3' was never used; consider replacing with '_' or removing it\n \
    \   var vowelCount3: Int = 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpliwwck8o.swift:17:9:\
    \ warning: variable 'vowelIndex4' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelIndex4: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmpliwwck8o.swift:18:9: warning: variable 'vowelCount4' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelCount4: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpliwwck8o.swift:19:9: warning: variable 'vowelIndex5' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelIndex5: Int =\
    \ 0\n        ^~~~~~~~~~~\n        _\n/tmp/tmpliwwck8o.swift:20:9: warning: variable\
    \ 'vowelCou"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    \n    var vowelsCount = [Int]()\n    \n    for char in word.characters\
    \ {\n        if vowels.contains(char) {\n            vowelsCount.append(vowels.count)\n\
    \        }\n    }\n    \n    let vowelsCount = vowelsCount.maxElement()\n    \n\
    \    if vowelsCount > 0 {\n        let vowelIndex = vowels.firstIndex(of: String(char))!\n\
    \        let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n       \
    \ let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n        let vowelsCount\
    \ = vowelsCount.firstIndex(of: String(char))!\n        let vowelsCount = vowelsCount.firstIndex(of:\
    \ String(char))!\n        let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n\
    \        let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n       \
    \ let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n        let vowelsCount\
    \ = vowelsCount.firstIndex(of: String(char))!\n        let vowelsCount = vowelsCount.firstIndex(of:\
    \ String(char))!\n        let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n\
    \        let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n       \
    \ let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n        let vowelsCount\
    \ = vowelsCount.firstIndex(of: String(char))!\n        let vowelsCount = vowelsCount.firstIndex(of:\
    \ String(char))!\n        let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n\
    \        let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n       \
    \ let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n        let vowelsCount\
    \ = vowelsCount.firstIndex(of: String(char))!\n        let vowelsCount = vowelsCount.firstIndex(of:\
    \ String(char))!\n        let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n\
    \        let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n       \
    \ let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n        let vowelsCount\
    \ = vowelsCount.firstIndex(of: String(char))!\n        let vowelsCount = vowelsCount.firstIndex(of:\
    \ String(char))!\n        let vowelsCount = vowelsCount.first\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphfy4mkvd.swift:76:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmphfy4mkvd.swift:8:48: note: to match this opening\
    \ '{'\nfunc get_closest_vowel(word: String) -> String {\n                    \
    \                           ^\n/tmp/tmphfy4mkvd.swift:14:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in word.characters\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmphfy4mkvd.swift:15:28: error: cannot convert value of type\
    \ 'Character' to expected argument type 'String'\n        if vowels.contains(char)\
    \ {\n                           ^\n/tmp/tmphfy4mkvd.swift:20:35: error: value\
    \ of type '[Int]' has no member 'maxElement'\n    let vowelsCount = vowelsCount.maxElement()\n\
    \                      ~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmphfy4mkvd.swift:23:55: error:\
    \ cannot find 'char' in scope\n        let vowelIndex = vowels.firstIndex(of:\
    \ String(char))!\n                                                      ^~~~\n\
    /tmp/tmphfy4mkvd.swift:24:61: error: cannot find 'char' in scope\n        let\
    \ vowelsCount = vowelsCount.firstIndex(of: String(char))!\n                  \
    \                                          ^~~~\n/tmp/tmphfy4mkvd.swift:25:61:\
    \ error: cannot find 'char' in scope\n        let vowelsCount = vowelsCount.firstIndex(of:\
    \ String(char))!\n                                                           \
    \ ^~~~\n/tmp/tmphfy4mkvd.swift:26:61: error: cannot find 'char' in scope\n   \
    \     let vowelsCount = vowelsCount.firstIndex(of: String(char))!\n          \
    \                                                  ^~~~\n/tmp/tmphfy4mkvd.swift:27:61:\
    \ error: cannot find 'char' in scope\n        let vowelsCount = vowelsCount.firstIndex(of:\
    \ String(char))!\n                                                           \
    \ ^~~~\n/tmp/tmphfy4mkvd.swift:28:61: error: cannot find 'char' in scope\n   \
    \     let vowelsCount = vowel"
  stdout: ''
  timestamp: 1660030322
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    // Your code here\n    \n    return \"\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6tw8q_tz/tmp6tw8q_tz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d58e5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d58b53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d58b53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d58b527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6tw8q_tz                        0x0000560698f55307 <unavailable> + 4871

    5    libc.so.6                          0x00002b5d59048460 __libc_start_main +
    245

    6    tmp6tw8q_tz                        0x0000560698f54f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelIndex2:\
    \ Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4: Int = 0\n    var\
    \ vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var vowelIndex7: Int\
    \ = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int = 0\n    var vowelIndex10:\
    \ Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12: Int = 0\n    var\
    \ vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var vowelIndex15:\
    \ Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17: Int = 0\n    var\
    \ vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var vowelIndex20:\
    \ Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22: Int = 0\n    var\
    \ vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var vowelIndex25:\
    \ Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27: Int = 0\n    var\
    \ vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var vowelIndex30:\
    \ Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32: Int = 0\n    var\
    \ vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var vowelIndex35:\
    \ Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37: Int = 0\n    var\
    \ vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var vowelIndex40:\
    \ Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42: Int = 0\n    var\
    \ vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var vowelIndex45:\
    \ Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47: Int = 0\n    var\
    \ vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var vowelIndex50:\
    \ Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52: Int = 0\n    var\
    \ vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var vowelIndex55:\
    \ Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57: Int = 0\n    var\
    \ vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var vowelIndex60:\
    \ Int = 0\n    var vowelIndex61: Int = 0\n    var vowelIndex62: \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpw09a4dhe.swift:72:22: error: expected type\n    var vowelIndex62:\
    \ \n                     ^\n                      <#type#>\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelsIndex = 0\n    var vowelsIndex2 = vowelsIndex\
    \ + vowelsCount\n    var vowelsIndex3 = vowelsIndex2 + vowelsCount\n    var vowelsIndex4\
    \ = vowelsIndex3 + vowelsCount\n    var vowelsIndex5 = vowelsIndex4 + vowelsCount\n\
    \    var vowelsIndex6 = vowelsIndex5 + vowelsCount\n    var vowelsIndex7 = vowelsIndex6\
    \ + vowelsCount\n    var vowelsIndex8 = vowelsIndex7 + vowelsCount\n    var vowelsIndex9\
    \ = vowelsIndex8 + vowelsCount\n    var vowelsIndex10 = vowelsIndex9 + vowelsCount\n\
    \    var vowelsIndex11 = vowelsIndex10 + vowelsCount\n    var vowelsIndex12 =\
    \ vowelsIndex11 + vowelsCount\n    var vowelsIndex13 = vowelsIndex12 + vowelsCount\n\
    \    var vowelsIndex14 = vowelsIndex13 + vowelsCount\n    var vowelsIndex15 =\
    \ vowelsIndex14 + vowelsCount\n    var vowelsIndex16 = vowelsIndex15 + vowelsCount\n\
    \    var vowelsIndex17 = vowelsIndex16 + vowelsCount\n    var vowelsIndex18 =\
    \ vowelsIndex17 + vowelsCount\n    var vowelsIndex19 = vowelsIndex18 + vowelsCount\n\
    \    var vowelsIndex20 = vowelsIndex19 + vowelsCount\n    var vowelsIndex21 =\
    \ vowelsIndex20 + vowelsCount\n    var vowelsIndex22 = vowelsIndex21 + vowelsCount\n\
    \    var vowelsIndex23 = vowelsIndex22 + vowelsCount\n    var vowelsIndex24 =\
    \ vowelsIndex23 + vowelsCount\n    var vowelsIndex25 = vowelsIndex24 + vowelsCount\n\
    \    var vowelsIndex26 = vowelsIndex25 + vowelsCount\n    var vowelsIndex27 =\
    \ vowelsIndex26 + vowelsCount\n    var vowelsIndex28 = vowelsIndex27 + vowelsCount\n\
    \    var vowelsIndex29 = vowelsIndex28 + vowelsCount\n    var vowelsIndex30 =\
    \ vowelsIndex29 + vowelsCount\n    var vowelsIndex31 = vowelsIndex30 + vowelsCount\n\
    \    var vowelsIndex32 = vowelsIndex31 + vowelsCount\n    var vowelsIndex33 =\
    \ vowelsIndex32 + vowelsCount\n    var vowelsIndex34 = vowelsIndex33 + vowelsCount\n\
    \    var vowelsIndex35 = vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpto_3vr0q.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpto_3vr0q.swift:45:25: error: cannot find 'vowel' in scope\n    var\
    \ vowelsIndex35 = vowel\n                        ^~~~~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    for letter in word {\n        if\
    \ vowels.contains(letter) {\n            vowelsCount.append(1)\n        } else\
    \ {\n            vowelsCount.removeAll{$0 > 1}\n        }\n    }\n    if vowelsCount.count\
    \ == 0 {\n        return \"\"\n    }\n    let vowelIndex = vowels.firstIndex(of:\
    \ vowels.last!)!\n    let vowelCount = vowelsCount.last!\n    if vowelIndex ==\
    \ word.count - vowelCount {\n        return \"\"\n    }\n    return vowels[vowelIndex]\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpve0c42sb.swift:12:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(letter) {\n \
    \                          ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelIndex = 0\n    var vowelIndexEnd = word.characters.count\
    \ - 1\n    var vowelIndexStart = 0\n    var vowelIndexStartEnd = word.characters.count\
    \ - 1\n    var vowelIndexStartEnd = 0\n    var vowelIndexStartEndEnd = 0\n   \
    \ var vowelIndexStartEndEndEnd = 0\n    var vowelIndexStartEndEndEndEnd = 0\n\
    \    var vowelIndexStartEndEndEndEndEnd = 0\n    var vowelIndexStartEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n  \
    \  var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n    var\
    \ vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n    var vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpusre39ey.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpusre39ey.swift:12:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndexEnd = word.characters.count - 1\n   \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpusre39ey.swift:14:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndexStartEnd = word.characters.count\
    \ - 1\n                                  ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpusre39ey.swift:15:9: error: invalid redeclaration\
    \ of 'vowelIndexStartEnd'\n    var vowelIndexStartEnd = 0\n        ^\n/tmp/tmpusre39ey.swift:14:9:\
    \ note: 'vowelIndexStartEnd' previously declared here\n    var vowelIndexStartEnd\
    \ = word.characters.count - 1\n        ^\n/tmp/tmpusre39ey.swift:33:9: error:\
    \ invalid redeclaration of 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpusre39ey.swift:32:9: note: 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\
    \ previously declared here\n    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpusre39ey.swift:35:9: error: invalid redeclaration of\
    \ 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\n\
    \    var vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\
    \ = 0\n        ^\n/tmp/tmpusre39ey.swift:34:9: note: 'vowelIndexStartEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd'\
    \ previously declared here\n    var vowelInd"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowelsCount = word.characters.count\n    var vowelIndex = 0\n    var\
    \ vowelIndex2 = 0\n    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5\
    \ = 0\n    var vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 =\
    \ 0\n    var vowelIndex9 = 0\n    var vowelIndex10 = 0\n    var vowelIndex11 =\
    \ 0\n    var vowelIndex12 = 0\n    var vowelIndex13 = 0\n    var vowelIndex14\
    \ = 0\n    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n    var vowelIndex17\
    \ = 0\n    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n    var vowelIndex20\
    \ = 0\n    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n    var vowelIndex23\
    \ = 0\n    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n    var vowelIndex26\
    \ = 0\n    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n    var vowelIndex29\
    \ = 0\n    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n    var vowelIndex32\
    \ = 0\n    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n    var vowelIndex35\
    \ = 0\n    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n    var vowelIndex38\
    \ = 0\n    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n    var vowelIndex41\
    \ = 0\n    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n    var vowelIndex44\
    \ = 0\n    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n    var vowelIndex47\
    \ = 0\n    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n    var vowelIndex50\
    \ = 0\n    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n    var vowelIndex53\
    \ = 0\n    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n    var vowelIndex56\
    \ = 0\n    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n    var vowelIndex59\
    \ = 0\n    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n    var vowelIndex62\
    \ = 0\n    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n    var vowelIndex65\
    \ = 0\n    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n    var vowelIndex68\
    \ = 0\n    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n    var vowelIndex71\
    \ = 0\n    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n    var vowelIndex74\
    \ = 0\n    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n    var vowelIndex77\
    \ = 0\n    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n    var vowelIndex80\
    \ = 0\n    var vowelIndex81 = 0\n    var vowelIndex82 = 0\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0_thncyv.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp0_thncyv.swift:9:9: warning: initialization of variable 'vowels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmp0_thncyv.swift:10:9: warning: initialization of variable 'vowelsCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCount = word.characters.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp0_thncyv.swift:11:9:\
    \ warning: initialization of variable 'vowelIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp0_thncyv.swift:12:9: warning: initialization of variable 'vowelIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp0_thncyv.swift:13:9:\
    \ warning: initialization of variable 'vowelIndex3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp0_thncyv.swift:14:9: warning: initialization of variable 'vowelIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp0_thncyv.swift:15:9:\
    \ warning: initialization of variable 'vowelIndex5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex5 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp0_thncyv.swift:16:9: warning: initialization of variable 'vowelIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex6 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp0_thncyv.swift:17:9:\
    \ warning: initialization of variable 'vowelIndex7' was never used; consider "
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    var vowelsIndexCount: [Int] = []\n    var vowelsIndexCountMax: Int\
    \ = 0\n    var vowelsIndexCountMin: Int = 0\n    var vowelsIndexCountSum: Int\
    \ = 0\n    var vowelsIndexCountSumMax: Int = 0\n    var vowelsIndexCountSumMin:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex: Int = 0\n    var vowelsIndexCountSumMinIndex:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex2: Int = 0\n    var vowelsIndexCountSumMinIndex2:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex3: Int = 0\n    var vowelsIndexCountSumMinIndex3:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex4: Int = 0\n    var vowelsIndexCountSumMinIndex4:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex5: Int = 0\n    var vowelsIndexCountSumMinIndex5:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex6: Int = 0\n    var vowelsIndexCountSumMinIndex6:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex7: Int = 0\n    var vowelsIndexCountSumMinIndex7:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex8: Int = 0\n    var vowelsIndexCountSumMinIndex8:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex9: Int = 0\n    var vowelsIndexCountSumMinIndex9:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex10: Int = 0\n    var vowelsIndexCountSumMinIndex10:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex11: Int = 0\n    var vowelsIndexCountSumMinIndex11:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex12: Int = 0\n    var vowelsIndexCountSumMinIndex12:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex13: Int = 0\n    var vowelsIndexCountSumMinIndex13:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex14: Int = 0\n    var vowelsIndexCountSumMinIndex14:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex15: Int = 0\n    var vowelsIndexCountSumMinIndex15:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex16: Int = 0\n    var vowelsIndexCountSumMinIndex16:\
    \ Int = 0\n    var vowelsIndexCountSumMaxIndex17: \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpwxv_h5e3.swift:50:39: error: expected type\n    var vowelsIndexCountSumMaxIndex17:\
    \ \n                                      ^\n                                \
    \       <#type#>\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    var vowelsCount = 1\n\
    \    var vowelIndex = 0\n    for char in word.characters {\n        if char ==\
    \ \"a\" || char == \"e\" || char == \"i\" || char == \"o\" || char == \"u\" {\n\
    \            vowels.append(char)\n            vowelsCount += 1\n        }\n  \
    \  }\n    if vowelsCount > 1 {\n        vowelIndex = vowels.count - 1\n    }\n\
    \    if vowelsCount > 2 {\n        vowelIndex = vowels.count - 2\n    }\n    if\
    \ vowelIndex < 0 {\n        return \"\"\n    }\n    if vowelIndex == 0 {\n   \
    \     return vowels[0]\n    }\n    if vowelIndex == vowels.count - 1 {\n     \
    \   return vowels[vowels.count - 2]\n    }\n    if vowelIndex == vowels.count\
    \ - 2 {\n        return vowels[vowels.count - 3]\n    }\n    return \"\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpiojb_dl1.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpiojb_dl1.swift:14:27:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            vowels.append(char)\n                          ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.count\n    var vowelIndex = 0\n    var vowelIndex2 = word.count - 1\n \
    \   var vowelIndex3 = word.count - 2\n    var vowelIndex4 = word.count - 3\n \
    \   var vowelIndex5 = word.count - 4\n    var vowelIndex6 = word.count - 5\n \
    \   var vowelIndex7 = word.count - 6\n    var vowelIndex8 = word.count - 7\n \
    \   var vowelIndex9 = word.count - 8\n    var vowelIndex10 = word.count - 9\n\
    \    var vowelIndex11 = word.count - 10\n    var vowelIndex12 = word.count - 11\n\
    \    var vowelIndex13 = word.count - 12\n    var vowelIndex14 = word.count - 13\n\
    \    var vowelIndex15 = word.count - 14\n    var vowelIndex16 = word.count - 15\n\
    \    var vowelIndex17 = word.count - 16\n    var vowelIndex18 = word.count - 17\n\
    \    var vowelIndex19 = word.count - 18\n    var vowelIndex20 = word.count - 19\n\
    \    var vowelIndex21 = word.count - 20\n    var vowelIndex22 = word.count - 21\n\
    \    var vowelIndex23 = word.count - 22\n    var vowelIndex24 = word.count - 23\n\
    \    var vowelIndex25 = word.count - 24\n    var vowelIndex26 = word.count - 25\n\
    \    var vowelIndex27 = word.count - 26\n    var vowelIndex28 = word.count - 27\n\
    \    var vowelIndex29 = word.count - 28\n    var vowelIndex30 = word.count - 29\n\
    \    var vowelIndex31 = word.count - 30\n    var vowelIndex32 = word.count - 31\n\
    \    var vowelIndex33 = word.count - 32\n    var vowelIndex34 = word.count - 33\n\
    \    var vowelIndex35 = word.count - 34\n    var vowelIndex36 = word.count - 35\n\
    \    var vowelIndex37 = word.count - 36\n    var vowelIndex38 = word.count - 37\n\
    \    var vowelIndex39 = word.count - 38\n    var vowelIndex40 = word.count - 39\n\
    \    var vowelIndex41 = word.count - 40\n    var vowelIndex42 = word.count - 41\n\
    \    var vowelIndex43 = word.count - 42\n    var vowelIndex44 = word.count - 43\n\
    \    var vowelIndex45 = word.count - 44\n    var vowelIndex46 = word.count - 45\n\
    \    var vowelIndex47 = word.count - 46\n    var vowelIndex48 = word.count - 47\n\
    \    var vowelIndex49 = word.count - 48\n    var vowelIndex50 = word.count - 49\n\
    \    var vowelIndex51 = word.count - 50\n    var vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnfwp2e5q.swift:62:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels = [String]()\n    vowels.append(\"\
    a\",\"e\",\"i\",\"o\",\"u\")\n    \n    var vowelsCount = vowels.count\n    \n\
    \    var vowelIndex = 0\n    \n    for char in word.characters {\n        if vowelsCount\
    \ > 0 {\n            if vowelIndex == vowelsCount {\n                vowelIndex\
    \ = 0\n            }\n            if char == vowels[vowelIndex] {\n          \
    \      vowelIndex += 1\n            } else {\n                vowelIndex = 0\n\
    \            }\n        } else {\n            if char == vowels[vowelIndex] {\n\
    \                vowelIndex += 1\n            } else {\n                vowelIndex\
    \ = 0\n            }\n        }\n    }\n    \n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjdtcbwv4.swift:11:18: error: extra arguments at positions #2, #3,\
    \ #4, #5 in call\n    vowels.append(\"a\",\"e\",\"i\",\"o\",\"u\")\n         \
    \        ^\nSwift.Array:6:37: note: 'append' declared here\n    @inlinable public\
    \ mutating func append(_ newElement: __owned Element)\n                      \
    \              ^\n/tmp/tmpjdtcbwv4.swift:17:22: error: 'characters' is unavailable:\
    \ Please use String directly\n    for char in word.characters {\n            \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpjdtcbwv4.swift:22:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n            if char == vowels[vowelIndex] {\n               ~~~~\
    \ ^  ~~~~~~~~~~~~~~~~~~\n/tmp/tmpjdtcbwv4.swift:22:21: note: overloads for '=='\
    \ exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n            if char == vowels[vowelIndex] {\n            \
    \        ^\n/tmp/tmpjdtcbwv4.swift:28:21: error: binary operator '==' cannot be\
    \ applied to operands of type 'Character' and 'String'\n            if char ==\
    \ vowels[vowelIndex] {\n               ~~~~ ^  ~~~~~~~~~~~~~~~~~~\n/tmp/tmpjdtcbwv4.swift:28:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n            if char == vowels[vowelIndex]\
    \ {\n                    ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelIndex2:\
    \ Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4: Int = 0\n    var\
    \ vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var vowelIndex7: Int\
    \ = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int = 0\n    var vowelIndex10:\
    \ Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12: Int = 0\n    var\
    \ vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var vowelIndex15:\
    \ Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17: Int = 0\n    var\
    \ vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var vowelIndex20:\
    \ Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22: Int = 0\n    var\
    \ vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var vowelIndex25:\
    \ Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27: Int = 0\n    var\
    \ vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var vowelIndex30:\
    \ Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32: Int = 0\n    var\
    \ vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var vowelIndex35:\
    \ Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37: Int = 0\n    var\
    \ vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var vowelIndex40:\
    \ Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42: Int = 0\n    var\
    \ vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var vowelIndex45:\
    \ Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47: Int = 0\n    var\
    \ vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var vowelIndex50:\
    \ Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52: Int = 0\n    var\
    \ vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var vowelIndex55:\
    \ Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57: Int = 0\n    var\
    \ vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var vowelIndex60:\
    \ Int = 0\n    var vowelIndex61: Int = 0\n    var vowelIndex62: \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpw09a4dhe.swift:72:22: error: expected type\n    var vowelIndex62:\
    \ \n                     ^\n                      <#type#>\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowelsCount =\
    \ vowels.characters.count\n    let vowelIndex = word.characters.reversed().firstIndex(of:\
    \ vowels)\n    if vowelIndex == nil {\n        return \"\"\n    }\n    let vowelCount\
    \ = word.characters.count\n    let vowelRange = vowelIndex!..<vowelIndex! + vowelsCount\n\
    \    let vowelRangeCount = vowelRange.count\n    if vowelRangeCount > vowelCount\
    \ {\n        return \"\"\n    }\n    let consonantIndex = vowelIndex! + vowelsCount\n\
    \    let consonantCount = word.characters.count\n    let consonantRange = consonantIndex..<consonantIndex\
    \ + consonantCount\n    let consonantRangeCount = consonantRange.count\n    if\
    \ consonantRangeCount > vowelCount {\n        return \"\"\n    }\n    let vowelRangeCount\
    \ = vowelRange.count\n    let consonantRangeCount = consonantRange.count\n   \
    \ if vowelRangeCount == 0 {\n        return \"\"\n    }\n    if consonantRangeCount\
    \ == 0 {\n        return \"\"\n    }\n    let vowelRange = vowelRange.sorted()\n\
    \    let consonantRange = consonantRange.sorted()\n    let vowelRangeCount = vowelRange.count\n\
    \    let consonantRangeCount = consonantRange.count\n    if vowelRangeCount ==\
    \ 0 {\n        return \"\"\n    }\n    if consonantRangeCount == 0 {\n       \
    \ return \"\"\n    }\n    let vowelRange = vowelRange.sorted()\n    let consonantRange\
    \ = consonantRange.sorted()\n    let vowelRangeCount = vowelRange.count\n    let\
    \ consonantRangeCount = consonantRange.count\n    if vowelRangeCount == 0 {\n\
    \        return \"\"\n    }\n    if consonantRangeCount == 0 {\n        return\
    \ \"\"\n    }\n    let vowelRange = vowelRange.sorted()\n    let consonantRange\
    \ = consonantRange.sorted()\n    let vowelRangeCount = vowelRange.count\n    let\
    \ consonantRangeCount = consonantRange.count\n    if vowelRangeCount == 0 {\n\
    \        return \"\"\n    }\n    if consonantRangeCount == 0 {\n        return\
    \ \"\"\n    }\n    let vowelRange = vowelRange.sorted()\n    let consonantRange\
    \ = consonantRange.sorted()\n    let vowelRangeCount = vowelRange.count\n    let\
    \ consonantRangeCount = consonantRange.count\n    if vowelRangeCount == 0 {\n\
    \        return \"\"\n    }\n    if consonantRangeCount == 0 {\n        return\
    \ \"\"\n    }\n    let vowelRange = vowelRange.sorted()\n    let \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpi1butqiv.swift:77:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmpi1butqiv.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpi1butqiv.swift:11:64: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n    let vowelIndex\
    \ = word.characters.reversed().firstIndex(of: vowels)\n                      \
    \                                         ^\n/tmp/tmpi1butqiv.swift:15:27: error:\
    \ 'characters' is unavailable: Please use String directly\n    let vowelCount\
    \ = word.characters.count\n                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpi1butqiv.swift:22:31: error: 'characters'\
    \ is unavailable: Please use String directly\n    let consonantCount = word.characters.count\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelIndex = 0\n    var vowelIndex2 = vowels.characters.count\n\
    \    var vowelIndex3 = vowels.characters.count\n    var vowelIndex4 = vowels.characters.count\n\
    \    var vowelIndex5 = vowels.characters.count\n    var vowelIndex6 = vowels.characters.count\n\
    \    var vowelIndex7 = vowels.characters.count\n    var vowelIndex8 = vowels.characters.count\n\
    \    var vowelIndex9 = vowels.characters.count\n    var vowelIndex10 = vowels.characters.count\n\
    \    var vowelIndex11 = vowels.characters.count\n    var vowelIndex12 = vowels.characters.count\n\
    \    var vowelIndex13 = vowels.characters.count\n    var vowelIndex14 = vowels.characters.count\n\
    \    var vowelIndex15 = vowels.characters.count\n    var vowelIndex16 = vowels.characters.count\n\
    \    var vowelIndex17 = vowels.characters.count\n    var vowelIndex18 = vowels.characters.count\n\
    \    var vowelIndex19 = vowels.characters.count\n    var vowelIndex20 = vowels.characters.count\n\
    \    var vowelIndex21 = vowels.characters.count\n    var vowelIndex22 = vowels.characters.count\n\
    \    var vowelIndex23 = vowels.characters.count\n    var vowelIndex24 = vowels.characters.count\n\
    \    var vowelIndex25 = vowels.characters.count\n    var vowelIndex26 = vowels.characters.count\n\
    \    var vowelIndex27 = vowels.characters.count\n    var vowelIndex28 = vowels.characters.count\n\
    \    var vowelIndex29 = vowels.characters.count\n    var vowelIndex30 = vowels.characters.count\n\
    \    var vowelIndex31 = vowels.characters.count\n    var vowelIndex32 = vowels.characters.count\n\
    \    var vowelIndex33 = vowels.characters.count\n    var vowelIndex34 = vowels.characters.count\n\
    \    var vowelIndex35 = vowels.characters.count\n    var vowelIndex36 = vowels.characters.count\n\
    \    var vowelIndex37 = vowels.characters.count\n    var vowelIndex38 = vowels.characters.count\n\
    \    var vowelIndex39 = vowels.characters.count\n    var vowelIndex40 = vowels.characters.count\n\
    \    var vowelIndex41 = vowels.characters.count\n    var vowelIndex42 = vowels.characters.count\n\
    \    var vowelIndex43 = vowels.characters.count\n    var vowelIndex44 = vowels.characters.count\n\
    \    var vowelIndex45 = vowels.characters.count\n    var vowelIndex46 = vowels.characters.count\n\
    \    var vowelIndex47 = vowels.characters.count\n    var vowelIndex48 = vowels.characters.count\n\
    \    var vowelIndex49 = vowels.characters.count\n    var vowelIndex50 = vowels.characters.count\n\
    \    var vowelIndex51 = vowels.characters.count\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpplcpa_bd.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpplcpa_bd.swift:12:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpplcpa_bd.swift:13:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex3 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpplcpa_bd.swift:14:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex4 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpplcpa_bd.swift:15:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex5 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpplcpa_bd.swift:16:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex6 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpplcpa_bd.swift:17:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex7 = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'c"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelCount\
    \ = 0\n    var vowelIndex2 = 0\n    var vowelCount2 = 0\n    var vowelIndex3 =\
    \ 0\n    var vowelCount3 = 0\n    var vowelIndex4 = 0\n    var vowelCount4 = 0\n\
    \    var vowelIndex5 = 0\n    var vowelCount5 = 0\n    var vowelIndex6 = 0\n \
    \   var vowelCount6 = 0\n    var vowelIndex7 = 0\n    var vowelCount7 = 0\n  \
    \  var vowelIndex8 = 0\n    var vowelCount8 = 0\n    var vowelIndex9 = 0\n   \
    \ var vowelCount9 = 0\n    var vowelIndex10 = 0\n    var vowelCount10 = 0\n  \
    \  var vowelIndex11 = 0\n    var vowelCount11 = 0\n    var vowelIndex12 = 0\n\
    \    var vowelCount12 = 0\n    var vowelIndex13 = 0\n    var vowelCount13 = 0\n\
    \    var vowelIndex14 = 0\n    var vowelCount14 = 0\n    var vowelIndex15 = 0\n\
    \    var vowelCount15 = 0\n    var vowelIndex16 = 0\n    var vowelCount16 = 0\n\
    \    var vowelIndex17 = 0\n    var vowelCount17 = 0\n    var vowelIndex18 = 0\n\
    \    var vowelCount18 = 0\n    var vowelIndex19 = 0\n    var vowelCount19 = 0\n\
    \    var vowelIndex20 = 0\n    var vowelCount20 = 0\n    var vowelIndex21 = 0\n\
    \    var vowelCount21 = 0\n    var vowelIndex22 = 0\n    var vowelCount22 = 0\n\
    \    var vowelIndex23 = 0\n    var vowelCount23 = 0\n    var vowelIndex24 = 0\n\
    \    var vowelCount24 = 0\n    var vowelIndex25 = 0\n    var vowelCount25 = 0\n\
    \    var vowelIndex26 = 0\n    var vowelCount26 = 0\n    var vowelIndex27 = 0\n\
    \    var vowelCount27 = 0\n    var vowelIndex28 = 0\n    var vowelCount28 = 0\n\
    \    var vowelIndex29 = 0\n    var vowelCount29 = 0\n    var vowelIndex30 = 0\n\
    \    var vowelCount30 = 0\n    var vowelIndex31 = 0\n    var vowelCount31 = 0\n\
    \    var vowelIndex32 = 0\n    var vowelCount32 = 0\n    var vowelIndex33 = 0\n\
    \    var vowelCount33 = 0\n    var vowelIndex34 = 0\n    var vowelCount34 = 0\n\
    \    var vowelIndex35 = 0\n    var vowelCount35 = 0\n    var vowelIndex36 = 0\n\
    \    var vowelCount36 = 0\n    var vowelIndex37 = 0\n    var vowelCount37 = 0\n\
    \    var vowelIndex38 = 0\n    var vowelCount38 = 0\n    var vowelIndex39 = 0\n\
    \    var vowelCount39 = 0\n    var vowelIndex40 = 0\n    var vowelCount40 = 0\n\
    \    var vowelIndex41 = 0\n    var vowelCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzjo888w5.swift:92:9: error: type annotation missing in pattern\n\
    \    var vowelCount\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    var vowelsIndexCount: [Int] = []\n    var vowelsIndexCountMax: Int\
    \ = -1\n    var vowelsIndexCountMin: Int = -1\n    var vowelsIndexCountMinIndex:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex: Int = -1\n    var vowelsIndexCountMinIndex2:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex2: Int = -1\n    var vowelsIndexCountMinIndex3:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex3: Int = -1\n    var vowelsIndexCountMinIndex4:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex4: Int = -1\n    var vowelsIndexCountMinIndex5:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex5: Int = -1\n    var vowelsIndexCountMinIndex6:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex6: Int = -1\n    var vowelsIndexCountMinIndex7:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex7: Int = -1\n    var vowelsIndexCountMinIndex8:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex8: Int = -1\n    var vowelsIndexCountMinIndex9:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex9: Int = -1\n    var vowelsIndexCountMinIndex10:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex10: Int = -1\n    var vowelsIndexCountMinIndex11:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex11: Int = -1\n    var vowelsIndexCountMinIndex12:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex12: Int = -1\n    var vowelsIndexCountMinIndex13:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex13: Int = -1\n    var vowelsIndexCountMinIndex14:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex14: Int = -1\n    var vowelsIndexCountMinIndex15:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex15: Int = -1\n    var vowelsIndexCountMinIndex16:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex16: Int = -1\n    var vowelsIndexCountMinIndex17:\
    \ Int = -1\n    var vowelsIndexCountMaxIndex17: Int = -1\n    var vowelsIndexCountMinIndex18:\
    \ Int = -1\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp9_l0ppsk.swift:50:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp9_l0ppsk.swift:9:9: warning: variable 'vowels' was never used; consider\
    \ replacing with '_' or removing it\n    var vowels: [String] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmp9_l0ppsk.swift:10:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmp9_l0ppsk.swift:11:9: warning: variable 'vowelsIndex' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex: [Int]\
    \ = []\n        ^~~~~~~~~~~\n        _\n/tmp/tmp9_l0ppsk.swift:12:9: warning:\
    \ variable 'vowelsIndexCount' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndexCount: [Int] = []\n        ^~~~~~~~~~~~~~~~\n       \
    \ _\n/tmp/tmp9_l0ppsk.swift:13:9: warning: variable 'vowelsIndexCountMax' was\
    \ never used; consider replacing with '_' or removing it\n    var vowelsIndexCountMax:\
    \ Int = -1\n        ^~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmp9_l0ppsk.swift:14:9:\
    \ warning: variable 'vowelsIndexCountMin' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsIndexCountMin: Int = -1\n        ^~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmp9_l0ppsk.swift:15:9: warning: variable 'vowelsIndexCountMinIndex'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsIndexCountMinIndex:\
    \ Int = -1\n        ^~~~~~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmp9_l0ppsk.swift:16:9:\
    \ warning: variable 'vowelsIndexCountMaxIndex' was never used; consider replacing\
    \ with '_' or removing it\n    var vowelsIndexCountMaxIndex: Int = -1\n      \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmp9_l0ppsk.swift:17:9: warning:\
    \ variable 'vowelsIndexCountMinIndex2' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsIndexCountMinIndex2: Int = -1\n        ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmp9_l0ppsk.swift:18:9: warning: variable 'vowelsIndexCountMaxIndex2'\
    \ was never used; consider replacing with '_' or removing it\n    var v"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelsCountIndex: Int = 0\n    var vowelsCountIndex2: Int = 0\n\
    \    var vowelsCountIndex3: Int = 0\n    var vowelsCountIndex4: Int = 0\n    var\
    \ vowelsCountIndex5: Int = 0\n    var vowelsCountIndex6: Int = 0\n    var vowelsCountIndex7:\
    \ Int = 0\n    var vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9: Int\
    \ = 0\n    var vowelsCountIndex10: Int = 0\n    var vowelsCountIndex11: Int =\
    \ 0\n    var vowelsCountIndex12: Int = 0\n    var vowelsCountIndex13: Int = 0\n\
    \    var vowelsCountIndex14: Int = 0\n    var vowelsCountIndex15: Int = 0\n  \
    \  var vowelsCountIndex16: Int = 0\n    var vowelsCountIndex17: Int = 0\n    var\
    \ vowelsCountIndex18: Int = 0\n    var vowelsCountIndex19: Int = 0\n    var vowelsCountIndex20:\
    \ Int = 0\n    var vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22: Int\
    \ = 0\n    var vowelsCountIndex23: Int = 0\n    var vowelsCountIndex24: Int =\
    \ 0\n    var vowelsCountIndex25: Int = 0\n    var vowelsCountIndex26: Int = 0\n\
    \    var vowelsCountIndex27: Int = 0\n    var vowelsCountIndex28: Int = 0\n  \
    \  var vowelsCountIndex29: Int = 0\n    var vowelsCountIndex30: Int = 0\n    var\
    \ vowelsCountIndex31: Int = 0\n    var vowelsCountIndex32: Int = 0\n    var vowelsCountIndex33:\
    \ Int = 0\n    var vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35: Int\
    \ = 0\n    var vowelsCountIndex36: Int = 0\n    var vowelsCountIndex37: Int =\
    \ 0\n    var vowelsCountIndex38: Int = 0\n    var vowelsCountIndex39: Int = 0\n\
    \    var vowelsCountIndex40: Int = 0\n    var vowelsCountIndex41: Int = 0\n  \
    \  var vowelsCountIndex42: Int = 0\n    var vowelsCountIndex43: Int = 0\n    var\
    \ vowelsCountIndex44: Int = 0\n    var vowelsCountIndex45: Int = 0\n    var vowelsCountIndex46:\
    \ Int = 0\n    var vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48: Int\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_9g9l9c_.swift:60:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = word.characters.count\n\
    \    \n    for vowel in vowels {\n        if word.characters.count > vowelsCount\
    \ {\n            vowelsCount = word.characters.count\n        }\n        \n  \
    \      if word.characters.count > vowelsCount {\n            vowelsCount = word.characters.count\n\
    \        }\n        \n        if word.characters.count > vowelsCount {\n     \
    \       vowelsCount = word.characters.count\n        }\n        \n        if word.characters.count\
    \ > vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ > vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ > vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ > vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ > vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ > vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ > vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ > vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n        }\n        \n        if word.characters.count\
    \ > vowelsCount {\n            vowelsCount = word.characters.count\n        }\n\
    \        \n        if word.characters.count > vowelsCount {\n            vowelsCount\
    \ = word.characters.count\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpqd2f4c61.swift:129:48: error: expected '}' at end of brace statement\n\
    assert(get_closest_vowel(word: \"Above\") == \"o\")\n                        \
    \                       ^\n/tmp/tmpqd2f4c61.swift:18:25: note: to match this opening\
    \ '{'\n    for vowel in vowels {\n                        ^\n/tmp/tmpqd2f4c61.swift:129:48:\
    \ error: expected '}' at end of brace statement\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")\n                                               ^\n/tmp/tmpqd2f4c61.swift:8:48:\
    \ note: to match this opening '{'\nfunc get_closest_vowel(word: String) -> String\
    \ {\n                                               ^\n/tmp/tmpqd2f4c61.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    var vowelsCount\
    \ = word.characters.count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpqd2f4c61.swift:19:17: error: 'characters'\
    \ is unavailable: Please use String directly\n        if word.characters.count\
    \ > vowelsCount {\n                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqd2f4c61.swift:20:32: error: 'characters' is unavailable:\
    \ Please use String directly\n            vowelsCount = word.characters.count\n\
    \                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqd2f4c61.swift:23:17: error: 'characters' is unavailable:\
    \ Please use String directly\n        if word.characters.count > vowelsCount {\n\
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpqd2f4c61.swift:24:32: error: 'characters' is unavailable: Please\
    \ use String directly\n            vowelsCount = word.characters.count\n     \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    \n    var vowelIndex\
    \ = 0\n    var vowelCount = 0\n    var vowelIndex2 = 0\n    var vowelCount2 =\
    \ 0\n    \n    for char in word.characters {\n        if vowels.contains(String(char))\
    \ {\n            vowelCount += 1\n        }\n    }\n    \n    for char in word.characters\
    \ {\n        if vowels.contains(String(char)) {\n            vowelIndex += 1\n\
    \        }\n    }\n    \n    for char in word.characters {\n        if vowels.contains(String(char))\
    \ {\n            vowelIndex2 += 1\n        }\n    }\n    \n    for char in word.characters\
    \ {\n        if vowels.contains(String(char)) {\n            vowelCount2 += 1\n\
    \        }\n    }\n    \n    if vowelCount > vowelCount2 {\n        return \"\"\
    \n    }\n    \n    if vowelIndex == 0 {\n        return \"\"\n    }\n    \n  \
    \  if vowelIndex2 == 0 {\n        return \"\"\n    }\n    \n    if vowelIndex\
    \ > vowelIndex2 {\n        return \"\"\n    }\n    \n    if vowelIndex < vowelIndex2\
    \ {\n        return \"\"\n    }\n    \n    if vowelIndex == vowelIndex2 {\n  \
    \      return \"\"\n    }\n    \n    if vowelIndex > vowelIndex2 {\n        return\
    \ \"\"\n    }\n    \n    if vowelIndex < vowelIndex2 {\n        return \"\"\n\
    \    }\n    \n    if vowelIndex == vowelIndex2 {\n        return \"\"\n    }\n\
    \    \n    if vowelIndex > vowelIndex2 {\n        return \"\"\n    }\n    \n \
    \   if vowelIndex < vowelIndex2 {\n        return \"\"\n    }\n    \n    if vowelIndex\
    \ == vowelIndex2 {\n        return \"\"\n    }\n    \n    if vowelIndex > vowelIndex2\
    \ {\n        return \"\"\n    }\n    \n    if vowelIndex < vowelIndex2 {\n   \
    \     return \"\"\n    }\n    \n    if vowelIndex == vowelIndex2 {\n        return\
    \ \"\"\n    }\n    \n    if vowelIndex > vowelIndex2 {\n        return \"\"\n\
    \    }\n    \n    if vowelIndex < vowelIndex2 {\n        return \"\"\n    }\n\
    \    \n    if vowelIndex == vowelIndex2 {\n        return \"\"\n    }\n    \n\
    \    if vowelIndex > vowelIndex2 {\n        return \"\"\n    }\n    \n    if vowelIndex\
    \ < vowelIndex2 {\n        return \"\"\n    }\n    \n    if vowelIndex == vowelIndex2\
    \ {\n        return \"\"\n    }\n    \n    if vowelIndex > vowelIndex2 {\n   \
    \     return \"\"\n    }\n    \n    if vowelIndex < vowelIndex2 {\n        return\
    \ \"\"\n    }\n    \n    if vowelIndex == vowelIndex2 {\n        return \"\"\n\
    \    }\n    \n    if vowelIndex > vowelIndex2 {\n        return \"\"\n    }\n\
    \    \n    if vowelIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpbh9070av.swift:140:18: error: expected '{' after 'if' condition\n\
    \    if vowelIndex\n                 ^\n/tmp/tmpbh9070av.swift:16:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in word.characters\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpbh9070av.swift:22:22: error: 'characters' is unavailable:\
    \ Please use String directly\n    for char in word.characters {\n            \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpbh9070av.swift:28:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpbh9070av.swift:34:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    for char in word.characters\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpbh9070av.swift:140:8: error: type 'Int' cannot be used\
    \ as a boolean; test for '!= 0' instead\n    if vowelIndex\n       ^\n       (\
    \          != 0)\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowelIndex = 0\n    var vowelIndex2 = -1\n    var vowelIndex3 = -1\n\
    \    var vowelIndex4 = -1\n    var vowelIndex5 = -1\n    var vowelIndex6 = -1\n\
    \    var vowelIndex7 = -1\n    var vowelIndex8 = -1\n    var vowelIndex9 = -1\n\
    \    var vowelIndex10 = -1\n    var vowelIndex11 = -1\n    var vowelIndex12 =\
    \ -1\n    var vowelIndex13 = -1\n    var vowelIndex14 = -1\n    var vowelIndex15\
    \ = -1\n    var vowelIndex16 = -1\n    var vowelIndex17 = -1\n    var vowelIndex18\
    \ = -1\n    var vowelIndex19 = -1\n    var vowelIndex20 = -1\n    var vowelIndex21\
    \ = -1\n    var vowelIndex22 = -1\n    var vowelIndex23 = -1\n    var vowelIndex24\
    \ = -1\n    var vowelIndex25 = -1\n    var vowelIndex26 = -1\n    var vowelIndex27\
    \ = -1\n    var vowelIndex28 = -1\n    var vowelIndex29 = -1\n    var vowelIndex30\
    \ = -1\n    var vowelIndex31 = -1\n    var vowelIndex32 = -1\n    var vowelIndex33\
    \ = -1\n    var vowelIndex34 = -1\n    var vowelIndex35 = -1\n    var vowelIndex36\
    \ = -1\n    var vowelIndex37 = -1\n    var vowelIndex38 = -1\n    var vowelIndex39\
    \ = -1\n    var vowelIndex40 = -1\n    var vowelIndex41 = -1\n    var vowelIndex42\
    \ = -1\n    var vowelIndex43 = -1\n    var vowelIndex44 = -1\n    var vowelIndex45\
    \ = -1\n    var vowelIndex46 = -1\n    var vowelIndex47 = -1\n    var vowelIndex48\
    \ = -1\n    var vowelIndex49 = -1\n    var vowelIndex50 = -1\n    var vowelIndex51\
    \ = -1\n    var vowelIndex52 = -1\n    var vowelIndex53 = -1\n    var vowelIndex54\
    \ = -1\n    var vowelIndex55 = -1\n    var vowelIndex56 = -1\n    var vowelIndex57\
    \ = -1\n    var vowelIndex58 = -1\n    var vowelIndex59 = -1\n    var vowelIndex60\
    \ = -1\n    var vowelIndex61 = -1\n    var vowelIndex62 = -1\n    var vowelIndex63\
    \ = -1\n    var vowelIndex64 = -1\n    var vowelIndex65 = -1\n    var vowelIndex66\
    \ = -1\n    var vowelIndex67 = -1\n    var vowelIndex68 = -1\n    var vowelIndex69\
    \ = -1\n    var vowelIndex70 = -1\n    var vowelIndex71 = -1\n    var vowelIndex72\
    \ = -1\n    var vowelIndex73 = -1\n    var vowelIndex74 = -1\n    var vowelIndex75\
    \ = -1\n    var vowelIndex76 = -1\n    var vowelIndex77 = -1\n    var vowelIndex78\
    \ = -1\n    var vowelIndex79 = -1\n    var vowelIndex80 = -1\n    var vowelIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpifod01q_.swift:90:9: error: type annotation missing in pattern\n\
    \    var vowelIndex\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.characters.count\n    var vowelIndex = 0\n    var vowelIndex2 = word.characters.count\
    \ - 1\n    var vowelIndex3 = word.characters.count - 2\n    var vowelIndex4 =\
    \ word.characters.count - 3\n    var vowelIndex5 = word.characters.count - 4\n\
    \    var vowelIndex6 = word.characters.count - 5\n    var vowelIndex7 = word.characters.count\
    \ - 6\n    var vowelIndex8 = word.characters.count - 7\n    var vowelIndex9 =\
    \ word.characters.count - 8\n    var vowelIndex10 = word.characters.count - 9\n\
    \    var vowelIndex11 = word.characters.count - 10\n    var vowelIndex12 = word.characters.count\
    \ - 11\n    var vowelIndex13 = word.characters.count - 12\n    var vowelIndex14\
    \ = word.characters.count - 13\n    var vowelIndex15 = word.characters.count -\
    \ 14\n    var vowelIndex16 = word.characters.count - 15\n    var vowelIndex17\
    \ = word.characters.count - 16\n    var vowelIndex18 = word.characters.count -\
    \ 17\n    var vowelIndex19 = word.characters.count - 18\n    var vowelIndex20\
    \ = word.characters.count - 19\n    var vowelIndex21 = word.characters.count -\
    \ 20\n    var vowelIndex22 = word.characters.count - 21\n    var vowelIndex23\
    \ = word.characters.count - 22\n    var vowelIndex24 = word.characters.count -\
    \ 23\n    var vowelIndex25 = word.characters.count - 24\n    var vowelIndex26\
    \ = word.characters.count - 25\n    var vowelIndex27 = word.characters.count -\
    \ 26\n    var vowelIndex28 = word.characters.count - 27\n    var vowelIndex29\
    \ = word.characters.count - 28\n    var vowelIndex30 = word.characters.count -\
    \ 29\n    var vowelIndex31 = word.characters.count - 30\n    var vowelIndex32\
    \ = word.characters.count - 31\n    var vowelIndex33 = word.characters.count -\
    \ 32\n    var vowelIndex34 = word.characters.count - 33\n    var vowelIndex35\
    \ = word.characters.count - 34\n    var vowelIndex36 = word.characters.count -\
    \ 35\n    var vowelIndex37 = word.characters.count - 36\n    var vowelIndex38\
    \ = word.characters.count - 37\n    var vowelIndex39 = word.characters.count -\
    \ 38\n    var vowelIndex40 = word.characters.count - 39\n    var vowelIndex41\
    \ = word.characters.count - 40\n    var vowelIndex42 = word.characters.count -\
    \ 41\n    var vowelIndex43 = word.characters.count - 42\n    var vowelIndex44\
    \ = word.characters.count - 43\n    var vowelIndex45 = word.characters.count -\
    \ 44\n    var vowelIndex46 = word.characters.count - 45\n    var vowelIndex47\
    \ = word.\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpf2s8x78w.swift:57:28: error: expected member name following '.'\n\
    \    var vowelIndex47 = word.\n                           ^\n/tmp/tmpf2s8x78w.swift:10:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    var vowelsCount\
    \ = word.characters.count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpf2s8x78w.swift:12:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var vowelIndex2 = word.characters.count\
    \ - 1\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2s8x78w.swift:13:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndex3 = word.characters.count - 2\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2s8x78w.swift:14:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndex4 = word.characters.count - 3\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2s8x78w.swift:15:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndex5 = word.characters.count - 4\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2s8x78w.swift:16:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    var vowelIndex6 = word.characters.count - 5\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf2s8x78w.swift:17:28: error: 'characters' is unavailable:\
    \ Please use Str"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelIndex = word.characters.count\n    var\
    \ vowelIndex2 = word.characters.count\n    var vowelIndex3 = word.characters.count\n\
    \    var vowelIndex4 = word.characters.count\n    var vowelIndex5 = word.characters.count\n\
    \    var vowelIndex6 = word.characters.count\n    var vowelIndex7 = word.characters.count\n\
    \    var vowelIndex8 = word.characters.count\n    var vowelIndex9 = word.characters.count\n\
    \    var vowelIndex10 = word.characters.count\n    var vowelIndex11 = word.characters.count\n\
    \    var vowelIndex12 = word.characters.count\n    var vowelIndex13 = word.characters.count\n\
    \    var vowelIndex14 = word.characters.count\n    var vowelIndex15 = word.characters.count\n\
    \    var vowelIndex16 = word.characters.count\n    var vowelIndex17 = word.characters.count\n\
    \    var vowelIndex18 = word.characters.count\n    var vowelIndex19 = word.characters.count\n\
    \    var vowelIndex20 = word.characters.count\n    var vowelIndex21 = word.characters.count\n\
    \    var vowelIndex22 = word.characters.count\n    var vowelIndex23 = word.characters.count\n\
    \    var vowelIndex24 = word.characters.count\n    var vowelIndex25 = word.characters.count\n\
    \    var vowelIndex26 = word.characters.count\n    var vowelIndex27 = word.characters.count\n\
    \    var vowelIndex28 = word.characters.count\n    var vowelIndex29 = word.characters.count\n\
    \    var vowelIndex30 = word.characters.count\n    var vowelIndex31 = word.characters.count\n\
    \    var vowelIndex32 = word.characters.count\n    var vowelIndex33 = word.characters.count\n\
    \    var vowelIndex34 = word.characters.count\n    var vowelIndex35 = word.characters.count\n\
    \    var vowelIndex36 = word.characters.count\n    var vowelIndex37 = word.characters.count\n\
    \    var vowelIndex38 = word.characters.count\n    var vowelIndex39 = word.characters.count\n\
    \    var vowelIndex40 = word.characters.count\n    var vowelIndex41 = word.characters.count\n\
    \    var vowelIndex42 = word.characters.count\n    var vowelIndex43 = word.characters.count\n\
    \    var vowelIndex44 = word.characters.count\n    var vowelIndex45 = word.characters.count\n\
    \    var vowelIndex46 = word.characters.count\n    var vowelIndex47 = word.characters.count\n\
    \    var vowelIndex48 = word.characters.count\n    var vowelIndex49 = word.characters.count\n\
    \    var vowelIndex50 = word.characters.count\n    var vowelIndex51 = word.characters.count\n\
    \    var vowelIndex52 = word.characters.count\n    var vowelIndex53 = word.characters.count\n\
    \    var vowelIndex54 = word.characters.count\n    var vowelIndex55 = word.characters.count\n\
    \    var vowelIndex56 = word.characters.count\n    var vowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphlzkilrx.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphlzkilrx.swift:11:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex = word.characters.count\n          \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphlzkilrx.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex2 = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphlzkilrx.swift:13:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex3 = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphlzkilrx.swift:14:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex4 = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphlzkilrx.swift:15:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex5 = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphlzkilrx.swift:16:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelIndex6 = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ i"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let vowelsCount =\
    \ vowels.characters.count\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    if vowelIndex == nil {\n        return \"\"\n    }\n    \n\
    \    let vowelsCount = word.characters.count\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n    \n    if vowelIndex\
    \ == nil {\n        return \"\"\n    }\n    \n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n    \n    let vowelsCount = word.characters.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpm0v3e8_0.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpm0v3e8_0.swift:12:38: error: value of type 'String' has no member\
    \ 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of: vowels)\n\
    \                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpm0v3e8_0.swift:18:28: error:\
    \ 'characters' is unavailable: Please use String directly\n    let vowelsCount\
    \ = word.characters.count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpm0v3e8_0.swift:18:9: error: invalid redeclaration\
    \ of 'vowelsCount'\n    let vowelsCount = word.characters.count\n        ^\n/tmp/tmpm0v3e8_0.swift:10:9:\
    \ note: 'vowelsCount' previously declared here\n    let vowelsCount = vowels.characters.count\n\
    \        ^\n/tmp/tmpm0v3e8_0.swift:20:38: error: value of type 'String' has no\
    \ member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpm0v3e8_0.swift:22:28:\
    \ error: 'characters' is unavailable: Please use String directly\n    let vowelsCount\
    \ = word.characters.count\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpm0v3e8_0.swift:22:9: error: invalid redeclaration\
    \ of 'vowelsCount'\n    let vowelsCount = word.characters.count\n        ^\n/tmp/tmpm0v3e8_0.swift:10:9:\
    \ note: 'vowelsCount' previously declared here\n    let vowelsCount = vowels.characters.count\n\
    \        ^\n/tmp/tmpm0v3e8_0.swift:28:38: error: value of type 'String' has no\
    \ member 'reverse'\n    let vowelIndex = word.characters.reverse().firstIndex(of:\
    \ vowels)\n                     ~~~~~~~~~~~~~~~ ^~~~~~~\n/tmp/tmpm0v3e8_0.swi"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.count\n    var vowelIndex = 0\n    var vowelIndex2 = word.count - 1\n \
    \   var vowelIndex3 = word.count - 2\n    var vowelIndex4 = word.count - 3\n \
    \   var vowelIndex5 = word.count - 4\n    var vowelIndex6 = word.count - 5\n \
    \   var vowelIndex7 = word.count - 6\n    var vowelIndex8 = word.count - 7\n \
    \   var vowelIndex9 = word.count - 8\n    var vowelIndex10 = word.count - 9\n\
    \    var vowelIndex11 = word.count - 10\n    var vowelIndex12 = word.count - 11\n\
    \    var vowelIndex13 = word.count - 12\n    var vowelIndex14 = word.count - 13\n\
    \    var vowelIndex15 = word.count - 14\n    var vowelIndex16 = word.count - 15\n\
    \    var vowelIndex17 = word.count - 16\n    var vowelIndex18 = word.count - 17\n\
    \    var vowelIndex19 = word.count - 18\n    var vowelIndex20 = word.count - 19\n\
    \    var vowelIndex21 = word.count - 20\n    var vowelIndex22 = word.count - 21\n\
    \    var vowelIndex23 = word.count - 22\n    var vowelIndex24 = word.count - 23\n\
    \    var vowelIndex25 = word.count - 24\n    var vowelIndex26 = word.count - 25\n\
    \    var vowelIndex27 = word.count - 26\n    var vowelIndex28 = word.count - 27\n\
    \    var vowelIndex29 = word.count - 28\n    var vowelIndex30 = word.count - 29\n\
    \    var vowelIndex31 = word.count - 30\n    var vowelIndex32 = word.count - 31\n\
    \    var vowelIndex33 = word.count - 32\n    var vowelIndex34 = word.count - 33\n\
    \    var vowelIndex35 = word.count - 34\n    var vowelIndex36 = word.count - 35\n\
    \    var vowelIndex37 = word.count - 36\n    var vowelIndex38 = word.count - 37\n\
    \    var vowelIndex39 = word.count - 38\n    var vowelIndex40 = word.count - 39\n\
    \    var vowelIndex41 = word.count - 40\n    var vowelIndex42 = word.count - 41\n\
    \    var vowelIndex43 = word.count - 42\n    var vowelIndex44 = word.count - 43\n\
    \    var vowelIndex45 = word.count - 44\n    var vowelIndex46 = word.count - 45\n\
    \    var vowelIndex47 = word.count - 46\n    var vowelIndex48 = word.count - 47\n\
    \    var vowelIndex49 = word.count - 48\n    var vowelIndex50 = word.count - 49\n\
    \    var vowelIndex51 = word.count - 50\n    var vowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpnfwp2e5q.swift:62:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    for letter in word {\n        if\
    \ vowels.contains(letter) {\n            vowelsCount[vowels.indexOf(letter)!]\
    \ += 1\n        }\n    }\n    if vowelsCount.contains(0) {\n        return \"\"\
    \n    }\n    var minVowel = vowels.min()\n    var maxVowel = vowels.max()\n  \
    \  if vowelsCount.contains(1) {\n        return minVowel\n    }\n    if vowelsCount.contains(2)\
    \ {\n        return maxVowel\n    }\n    if vowelsCount.contains(3) {\n      \
    \  return minVowel\n    }\n    if vowelsCount.contains(4) {\n        return maxVowel\n\
    \    }\n    if vowelsCount.contains(5) {\n        return minVowel\n    }\n   \
    \ if vowelsCount.contains(6) {\n        return maxVowel\n    }\n    return \"\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpz7a3uffq.swift:12:28: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n        if vowels.contains(letter) {\n \
    \                          ^\n/tmp/tmpz7a3uffq.swift:13:32: error: value of type\
    \ '[String]' has no member 'indexOf'\n            vowelsCount[vowels.indexOf(letter)!]\
    \ += 1\n                        ~~~~~~ ^~~~~~~\n/tmp/tmpz7a3uffq.swift:22:16:\
    \ error: value of optional type 'String?' must be unwrapped to a value of type\
    \ 'String'\n        return minVowel\n               ^\n/tmp/tmpz7a3uffq.swift:22:16:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        return minVowel\n               ^\n                        ??\
    \ <#default value#>\n/tmp/tmpz7a3uffq.swift:22:16: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        return minVowel\n\
    \               ^\n                       !\n/tmp/tmpz7a3uffq.swift:25:16: error:\
    \ value of optional type 'String?' must be unwrapped to a value of type 'String'\n\
    \        return maxVowel\n               ^\n/tmp/tmpz7a3uffq.swift:25:16: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        return maxVowel\n               ^\n                        ?? <#default\
    \ value#>\n/tmp/tmpz7a3uffq.swift:25:16: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        return maxVowel\n  \
    \             ^\n                       !\n/tmp/tmpz7a3uffq.swift:28:16: error:\
    \ value of optional type 'String?' must be unwrapped to a value of type 'String'\n\
    \        return minVowel\n               ^\n/tmp/tmpz7a3uffq.swift:28:16: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        return minVowel\n               ^\n                        ?? <#default\
    \ value#>\n/tmp/tmpz7a3uffq.swift:28:16: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        return minVowel\n  \
    \             ^\n                       !\n/tmp/tmpz7a3uffq.swift:31:16: error:\
    \ value of optional type 'String?' "
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result: String\
    \ = \"\"\n    \n    for char in word.characters {\n        if vowels.contains(char.lowercaseString)\
    \ {\n            result = char.lowercaseString\n        }\n    }\n    \n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpf3_blh13.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpf3_blh13.swift:13:33:\
    \ error: value of type 'Character' has no member 'lowercaseString'\n        if\
    \ vowels.contains(char.lowercaseString) {\n                           ~~~~ ^~~~~~~~~~~~~~~\n\
    /tmp/tmpf3_blh13.swift:14:27: error: value of type 'Character' has no member 'lowercaseString'\n\
    \            result = char.lowercaseString\n                     ~~~~ ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsCountIndex:\
    \ Int = 0\n    var vowelsCountMax: Int = vowels.count\n    var vowelsCountMin:\
    \ Int = vowels.count - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax -\
    \ 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var vowelsCountMinIndex:\
    \ Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax\
    \ - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n    var \n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzs_lcy_7.swift:43:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpzs_lcy_7.swift:16:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:17:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:15:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmpzs_lcy_7.swift:18:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:19:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:15:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmpzs_lcy_7.swift:20:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously declared here\n    var vowelsCountMaxIndex:\
    \ Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:21:9: error: invalid\
    \ redeclaration of 'vowelsCountMinIndex'\n    var vowelsCountMinIndex: Int = vowelsCountMin\
    \ - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:15:9: note: 'vowelsCountMinIndex' previously\
    \ declared here\n    var vowelsCountMinIndex: Int = vowelsCountMin - 1\n     \
    \   ^\n/tmp/tmpzs_lcy_7.swift:22:9: error: invalid redeclaration of 'vowelsCountMaxIndex'\n\
    \    var vowelsCountMaxIndex: Int = vowelsCountMax - 1\n        ^\n/tmp/tmpzs_lcy_7.swift:14:9:\
    \ note: 'vowelsCountMaxIndex' previously decl"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    vowels.append(\"a\")\n\
    \    vowels.append(\"e\")\n    vowels.append(\"i\")\n    vowels.append(\"o\")\n\
    \    vowels.append(\"u\")\n    \n    var vowelsCount = vowels.count\n    \n  \
    \  var vowelIndex = 0\n    var vowelIndex2 = vowelIndex\n    \n    var vowelIndex3\
    \ = vowelIndex\n    \n    var vowelIndex4 = vowelIndex\n    \n    var vowelIndex5\
    \ = vowelIndex\n    \n    var vowelIndex6 = vowelIndex\n    \n    var vowelIndex7\
    \ = vowelIndex\n    \n    var vowelIndex8 = vowelIndex\n    \n    var vowelIndex9\
    \ = vowelIndex\n    \n    var vowelIndex10 = vowelIndex\n    \n    var vowelIndex11\
    \ = vowelIndex\n    \n    var vowelIndex12 = vowelIndex\n    \n    var vowelIndex13\
    \ = vowelIndex\n    \n    var vowelIndex14 = vowelIndex\n    \n    var vowelIndex15\
    \ = vowelIndex\n    \n    var vowelIndex16 = vowelIndex\n    \n    var vowelIndex17\
    \ = vowelIndex\n    \n    var vowelIndex18 = vowelIndex\n    \n    var vowelIndex19\
    \ = vowelIndex\n    \n    var vowelIndex20 = vowelIndex\n    \n    var vowelIndex21\
    \ = vowelIndex\n    \n    var vowelIndex22 = vowelIndex\n    \n    var vowelIndex23\
    \ = vowelIndex\n    \n    var vowelIndex24 = vowelIndex\n    \n    var vowelIndex25\
    \ = vowelIndex\n    \n    var vowelIndex26 = vowelIndex\n    \n    var vowelIndex27\
    \ = vowelIndex\n    \n    var vowelIndex28 = vowelIndex\n    \n    var vowelIndex29\
    \ = vowelIndex\n    \n    var vowelIndex30 = vowelIndex\n    \n    var vowelIndex31\
    \ = vowelIndex\n    \n    var vowelIndex32 = vowelIndex\n    \n    var vowelIndex33\
    \ = vowelIndex\n    \n    var vowelIndex34 = vowelIndex\n    \n    var vowelIndex35\
    \ = vowelIndex\n    \n    var vowelIndex36 = vowelIndex\n    \n    var vowelIndex37\
    \ = vowelIndex\n    \n    var vowelIndex38 = vowelIndex\n    \n    var vowelIndex39\
    \ = vowelIndex\n    \n    var vowelIndex40 = vowelIndex\n    \n    var vowelIndex41\
    \ = vowelIndex\n    \n    var vowelIndex42 = vowelIndex\n    \n    var vowelIndex43\
    \ = vowelIndex\n    \n    var vowelIndex44 = vowelIndex\n    \n    var vowelIndex45\
    \ = vowelIndex\n    \n    var vowelIndex46 = vowelIndex\n    \n    var vowelIndex47\
    \ = vowelIndex\n    \n    var vowelIndex48 = vowelIndex\n    \n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpd8uad8e1.swift:16:9: warning: initialization of variable 'vowelsCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCount = vowels.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpd8uad8e1.swift:18:9:\
    \ warning: variable 'vowelIndex' was never mutated; consider changing to 'let'\
    \ constant\n    var vowelIndex = 0\n    ~~~ ^\n    let\n/tmp/tmpd8uad8e1.swift:19:9:\
    \ warning: initialization of variable 'vowelIndex2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex2 = vowelIndex\n  \
    \  ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpd8uad8e1.swift:21:9: warning: initialization\
    \ of variable 'vowelIndex3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelIndex3 = vowelIndex\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpd8uad8e1.swift:23:9: warning: initialization of variable 'vowelIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex4 = vowelIndex\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpd8uad8e1.swift:25:9:\
    \ warning: initialization of variable 'vowelIndex5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex5 = vowelIndex\n  \
    \  ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpd8uad8e1.swift:27:9: warning: initialization\
    \ of variable 'vowelIndex6' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelIndex6 = vowelIndex\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpd8uad8e1.swift:29:9: warning: initialization of variable 'vowelIndex7'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex7 = vowelIndex\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpd8uad8e1.swift:31:9:\
    \ warning: initialization of variable 'vowelIndex8' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex8 = vowelIndex\n  \
    \  ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpd8uad8e1.swift:33:9: warning: initialization\
    \ of variable 'vowelIndex9' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelIndex9 = vowelIndex\n    ~~~~^~~~~~~~~"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowel:\
    \ String = String()\n    var consonantIndex: Int = 0\n    var consonant: String\
    \ = String()\n    var consonantCount: Int = 0\n    var consonantIndex2: Int =\
    \ 0\n    var consonant2: String = String()\n    var consonantCount2: Int = 0\n\
    \    var consonantIndex3: Int = 0\n    var consonant3: String = String()\n   \
    \ var consonantCount3: Int = 0\n    var consonantIndex4: Int = 0\n    var consonant4:\
    \ String = String()\n    var consonantCount4: Int = 0\n    var consonantIndex5:\
    \ Int = 0\n    var consonant5: String = String()\n    var consonantCount5: Int\
    \ = 0\n    var consonantIndex6: Int = 0\n    var consonant6: String = String()\n\
    \    var consonantCount6: Int = 0\n    var consonantIndex7: Int = 0\n    var consonant7:\
    \ String = String()\n    var consonantCount7: Int = 0\n    var consonantIndex8:\
    \ Int = 0\n    var consonant8: String = String()\n    var consonantCount8: Int\
    \ = 0\n    var consonantIndex9: Int = 0\n    var consonant9: String = String()\n\
    \    var consonantCount9: Int = 0\n    var consonantIndex10: Int = 0\n    var\
    \ consonant10: String = String()\n    var consonantCount10: Int = 0\n    var consonantIndex11:\
    \ Int = 0\n    var consonant11: String = String()\n    var consonantCount11: Int\
    \ = 0\n    var consonantIndex12: Int = 0\n    var consonant12: String = String()\n\
    \    var consonantCount12: Int = 0\n    var consonantIndex13: Int = 0\n    var\
    \ consonant13: String = String()\n    var consonantCount13: Int = 0\n    var consonantIndex14:\
    \ Int = 0\n    var consonant14: String = String()\n    var consonantCount14: Int\
    \ = 0\n    var consonantIndex15: Int = 0\n    var consonant15: String = String()\n\
    \    var consonantCount15: Int = 0\n    var consonantIndex16: Int = 0\n    var\
    \ consonant16: String = String()\n    var consonantCount16: Int = 0\n    var consonantIndex17:\
    \ Int = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3o0zsmki.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmp3o0zsmki.swift:10:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmp3o0zsmki.swift:11:9: warning: variable 'vowelIndex' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelIndex: Int = 0\n        ^~~~~~~~~~\n\
    \        _\n/tmp/tmp3o0zsmki.swift:12:9: warning: variable 'vowel' was never used;\
    \ consider replacing with '_' or removing it\n    var vowel: String = String()\n\
    \        ^~~~~\n        _\n/tmp/tmp3o0zsmki.swift:13:9: warning: variable 'consonantIndex'\
    \ was never used; consider replacing with '_' or removing it\n    var consonantIndex:\
    \ Int = 0\n        ^~~~~~~~~~~~~~\n        _\n/tmp/tmp3o0zsmki.swift:14:9: warning:\
    \ variable 'consonant' was never used; consider replacing with '_' or removing\
    \ it\n    var consonant: String = String()\n        ^~~~~~~~~\n        _\n/tmp/tmp3o0zsmki.swift:15:9:\
    \ warning: variable 'consonantCount' was never used; consider replacing with '_'\
    \ or removing it\n    var consonantCount: Int = 0\n        ^~~~~~~~~~~~~~\n  \
    \      _\n/tmp/tmp3o0zsmki.swift:16:9: warning: variable 'consonantIndex2' was\
    \ never used; consider replacing with '_' or removing it\n    var consonantIndex2:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~\n        _\n/tmp/tmp3o0zsmki.swift:17:9: warning:\
    \ variable 'consonant2' was never used; consider replacing with '_' or removing\
    \ it\n    var consonant2: String = String()\n        ^~~~~~~~~~\n        _\n/tmp/tmp3o0zsmki.swift:18:9:\
    \ warning: variable 'consonantCount2' was never used; consider replacing with\
    \ '_' or removing it\n    var consonantCount2: Int = 0\n        ^~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmp3o0zsmki.swift:19:9: warning: variable 'consonantIndex3' was\
    \ never used; consider replacing with '_' or removing it\n    var consonantIndex3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~\n        _\n/tmp/tmp3o0z"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelsIndex = 0\n    var vowelsIndex2 = 0\n\
    \    var vowelsIndex3 = 0\n    var vowelsIndex4 = 0\n    var vowelsIndex5 = 0\n\
    \    var vowelsIndex6 = 0\n    var vowelsIndex7 = 0\n    var vowelsIndex8 = 0\n\
    \    var vowelsIndex9 = 0\n    var vowelsIndex10 = 0\n    var vowelsIndex11 =\
    \ 0\n    var vowelsIndex12 = 0\n    var vowelsIndex13 = 0\n    var vowelsIndex14\
    \ = 0\n    var vowelsIndex15 = 0\n    var vowelsIndex16 = 0\n    var vowelsIndex17\
    \ = 0\n    var vowelsIndex18 = 0\n    var vowelsIndex19 = 0\n    var vowelsIndex20\
    \ = 0\n    var vowelsIndex21 = 0\n    var vowelsIndex22 = 0\n    var vowelsIndex23\
    \ = 0\n    var vowelsIndex24 = 0\n    var vowelsIndex25 = 0\n    var vowelsIndex26\
    \ = 0\n    var vowelsIndex27 = 0\n    var vowelsIndex28 = 0\n    var vowelsIndex29\
    \ = 0\n    var vowelsIndex30 = 0\n    var vowelsIndex31 = 0\n    var vowelsIndex32\
    \ = 0\n    var vowelsIndex33 = 0\n    var vowelsIndex34 = 0\n    var vowelsIndex35\
    \ = 0\n    var vowelsIndex36 = 0\n    var vowelsIndex37 = 0\n    var vowelsIndex38\
    \ = 0\n    var vowelsIndex39 = 0\n    var vowelsIndex40 = 0\n    var vowelsIndex41\
    \ = 0\n    var vowelsIndex42 = 0\n    var vowelsIndex43 = 0\n    var vowelsIndex44\
    \ = 0\n    var vowelsIndex45 = 0\n    var vowelsIndex46 = 0\n    var vowelsIndex47\
    \ = 0\n    var vowelsIndex48 = 0\n    var vowelsIndex49 = 0\n    var vowelsIndex50\
    \ = 0\n    var vowelsIndex51 = 0\n    var vowelsIndex52 = 0\n    var vowelsIndex53\
    \ = 0\n    var vowelsIndex54 = 0\n    var vowelsIndex55 = 0\n    var vowelsIndex56\
    \ = 0\n    var vowelsIndex57 = 0\n    var vowelsIndex58 = 0\n    var vowelsIndex59\
    \ = 0\n    var vowelsIndex60 = 0\n    var vowelsIndex61 = 0\n    var vowelsIndex62\
    \ = 0\n    var vowelsIndex63 = 0\n    var vowelsIndex64 = 0\n    var vowelsIndex65\
    \ = 0\n    var vowelsIndex66 = 0\n    var vowelsIndex67 = 0\n    var vowelsIndex68\
    \ = 0\n    var vowelsIndex69 = 0\n    var vowelsIndex70 = 0\n    var vowelsIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpopqq4ys1.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpopqq4ys1.swift:81:9: error: type annotation missing in pattern\n\
    \    var vowelsIndex\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [String]()\n    var vowelIndex = 0\n \
    \   \n    for char in word.characters {\n        if char.lowercased() == \"a\"\
    \ || char.lowercased() == \"e\" || char.lowercased() == \"i\" || char.lowercased()\
    \ == \"o\" || char.lowercased() == \"u\" {\n            vowels.append(word.substringWithRange(NSMakeRange(vowelIndex,\
    \ word.characters.count - vowelIndex)))\n            vowelIndex += word.characters.count\
    \ - vowelIndex\n        }\n    }\n    \n    if vowels.count > 0 {\n        return\
    \ vowels[0]\n    }\n    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1t_8ke7u.swift:12:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp1t_8ke7u.swift:14:51:\
    \ error: cannot find 'NSMakeRange' in scope\n            vowels.append(word.substringWithRange(NSMakeRange(vowelIndex,\
    \ word.characters.count - vowelIndex)))\n                                    \
    \              ^~~~~~~~~~~\n/tmp/tmp1t_8ke7u.swift:14:32: error: value of type\
    \ 'String' has no member 'substringWithRange'\n            vowels.append(word.substringWithRange(NSMakeRange(vowelIndex,\
    \ word.characters.count - vowelIndex)))\n                          ~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1t_8ke7u.swift:15:32: error: 'characters' is unavailable: Please use String\
    \ directly\n            vowelIndex += word.characters.count - vowelIndex\n   \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelsCountFromRight:\
    \ Int = 0\n    var vowelsCountFromLeft: Int = 0\n    var vowelsCountFromBoth:\
    \ Int = 0\n    var vowelsCountFromBothEnd: Int = 0\n    var vowelsCountFromBothStart:\
    \ Int = 0\n    var vowelsCountFromBothBoth: Int = 0\n    var vowelsCountFromBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothStart: Int = 0\n    var vowelsCountFromBothBothBoth:\
    \ Int = 0\n    var vowelsCountFromBothBothBothEnd: Int = 0\n    var vowelsCountFromBothBothBothStart:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothStart: Int = 0\n    var vowelsCountFromBothBothBothBothBoth:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd: Int = 0\n    var vowelsCountFromBothBothBothBothBothStart:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowelsCountFromBothBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowelsCountFromBothBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowelsCountFromBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowelsCountFromBothBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowelsCountFromBothBothBothBothBothBoth: Int = 0\n    var vowelsCountFromBothBothBothBothBothEnd:\
    \ Int = 0\n    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n    var\
    \ vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3005b5me.swift:30:9: error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothEnd'\n\
    \    var vowelsCountFromBothBothBothBothBothEnd: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:27:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothEnd' previously declared here\n  \
    \  var vowelsCountFromBothBothBothBothBothEnd: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:31:9:\
    \ error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothStart'\n\
    \    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:28:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothStart' previously declared here\n\
    \    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:32:9:\
    \ error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothBoth'\n\
    \    var vowelsCountFromBothBothBothBothBothBoth: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:29:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothBoth' previously declared here\n \
    \   var vowelsCountFromBothBothBothBothBothBoth: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:33:9:\
    \ error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothEnd'\n \
    \   var vowelsCountFromBothBothBothBothBothEnd: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:27:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothEnd' previously declared here\n  \
    \  var vowelsCountFromBothBothBothBothBothEnd: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:34:9:\
    \ error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothStart'\n\
    \    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:28:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothStart' previously declared here\n\
    \    var vowelsCountFromBothBothBothBothBothStart: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:35:9:\
    \ error: invalid redeclaration of 'vowelsCountFromBothBothBothBothBothBoth'\n\
    \    var vowelsCountFromBothBothBothBothBothBoth: Int = 0\n        ^\n/tmp/tmp3005b5me.swift:29:9:\
    \ note: 'vowelsCountFromBothBothBothBothBothBoth' previously declared here\n \
    \   var vowelsCountFromBothBothBothBothBothBoth: Int = 0\n        ^\n/tmp/tmp3005b5"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelIndex2: Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4:\
    \ Int = 0\n    var vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var\
    \ vowelIndex7: Int = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int\
    \ = 0\n    var vowelIndex10: Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12:\
    \ Int = 0\n    var vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var\
    \ vowelIndex15: Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17:\
    \ Int = 0\n    var vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var\
    \ vowelIndex20: Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22:\
    \ Int = 0\n    var vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var\
    \ vowelIndex25: Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27:\
    \ Int = 0\n    var vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var\
    \ vowelIndex30: Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32:\
    \ Int = 0\n    var vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var\
    \ vowelIndex35: Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37:\
    \ Int = 0\n    var vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var\
    \ vowelIndex40: Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42:\
    \ Int = 0\n    var vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var\
    \ vowelIndex45: Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47:\
    \ Int = 0\n    var vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var\
    \ vowelIndex50: Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52:\
    \ Int = 0\n    var vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var\
    \ vowelIndex55: Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57:\
    \ Int = 0\n    var vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var\
    \ vowelIndex60: Int = 0\n    var vowelIndex61: Int = 0\n    var vowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzntk6dqx.swift:72:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelCount\
    \ = 0\n    var vowelIndex2 = 0\n    var vowelCount2 = 0\n    var vowelIndex3 =\
    \ 0\n    var vowelCount3 = 0\n    var vowelIndex4 = 0\n    var vowelCount4 = 0\n\
    \    var vowelIndex5 = 0\n    var vowelCount5 = 0\n    var vowelIndex6 = 0\n \
    \   var vowelCount6 = 0\n    var vowelIndex7 = 0\n    var vowelCount7 = 0\n  \
    \  var vowelIndex8 = 0\n    var vowelCount8 = 0\n    var vowelIndex9 = 0\n   \
    \ var vowelCount9 = 0\n    var vowelIndex10 = 0\n    var vowelCount10 = 0\n  \
    \  var vowelIndex11 = 0\n    var vowelCount11 = 0\n    var vowelIndex12 = 0\n\
    \    var vowelCount12 = 0\n    var vowelIndex13 = 0\n    var vowelCount13 = 0\n\
    \    var vowelIndex14 = 0\n    var vowelCount14 = 0\n    var vowelIndex15 = 0\n\
    \    var vowelCount15 = 0\n    var vowelIndex16 = 0\n    var vowelCount16 = 0\n\
    \    var vowelIndex17 = 0\n    var vowelCount17 = 0\n    var vowelIndex18 = 0\n\
    \    var vowelCount18 = 0\n    var vowelIndex19 = 0\n    var vowelCount19 = 0\n\
    \    var vowelIndex20 = 0\n    var vowelCount20 = 0\n    var vowelIndex21 = 0\n\
    \    var vowelCount21 = 0\n    var vowelIndex22 = 0\n    var vowelCount22 = 0\n\
    \    var vowelIndex23 = 0\n    var vowelCount23 = 0\n    var vowelIndex24 = 0\n\
    \    var vowelCount24 = 0\n    var vowelIndex25 = 0\n    var vowelCount25 = 0\n\
    \    var vowelIndex26 = 0\n    var vowelCount26 = 0\n    var vowelIndex27 = 0\n\
    \    var vowelCount27 = 0\n    var vowelIndex28 = 0\n    var vowelCount28 = 0\n\
    \    var vowelIndex29 = 0\n    var vowelCount29 = 0\n    var vowelIndex30 = 0\n\
    \    var vowelCount30 = 0\n    var vowelIndex31 = 0\n    var vowelCount31 = 0\n\
    \    var vowelIndex32 = 0\n    var vowelCount32 = 0\n    var vowelIndex33 = 0\n\
    \    var vowelCount33 = 0\n    var vowelIndex34 = 0\n    var vowelCount34 = 0\n\
    \    var vowelIndex35 = 0\n    var vowelCount35 = 0\n    var vowelIndex36 = 0\n\
    \    var vowelCount36 = 0\n    var vowelIndex37 = 0\n    var vowelCount37 = 0\n\
    \    var vowelIndex38 = 0\n    var vowelCount38 = 0\n    var vowelIndex39 = 0\n\
    \    var vowelCount39 = 0\n    var vowelIndex40 = 0\n    var vowelCount40 = 0\n\
    \    var vowelIndex41 = 0\n    var vowelCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzjo888w5.swift:92:9: error: type annotation missing in pattern\n\
    \    var vowelCount\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelIndex = 0\n    var vowelIndex2\
    \ = 0\n    var vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 =\
    \ 0\n    var vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n\
    \    var vowelIndex9 = 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n\
    \    var vowelIndex12 = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n\
    \    var vowelIndex15 = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n\
    \    var vowelIndex18 = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n\
    \    var vowelIndex21 = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n\
    \    var vowelIndex24 = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n\
    \    var vowelIndex27 = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n\
    \    var vowelIndex30 = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n\
    \    var vowelIndex33 = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n\
    \    var vowelIndex36 = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n\
    \    var vowelIndex39 = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n\
    \    var vowelIndex42 = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n\
    \    var vowelIndex45 = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n\
    \    var vowelIndex48 = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n\
    \    var vowelIndex51 = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n\
    \    var vowelIndex54 = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n\
    \    var vowelIndex57 = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n\
    \    var vowelIndex60 = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n\
    \    var vowelIndex63 = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n\
    \    var vowelIndex66 = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n\
    \    var vowelIndex69 = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n\
    \    var vowelIndex72 = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n\
    \    var vowelIndex75 = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n\
    \    var vowelIndex78 = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n\
    \    var vowelIndex81 = 0\n    var vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpuz98_nfp.swift:92:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelIndex2: Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4:\
    \ Int = 0\n    var vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var\
    \ vowelIndex7: Int = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int\
    \ = 0\n    var vowelIndex10: Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12:\
    \ Int = 0\n    var vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var\
    \ vowelIndex15: Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17:\
    \ Int = 0\n    var vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var\
    \ vowelIndex20: Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22:\
    \ Int = 0\n    var vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var\
    \ vowelIndex25: Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27:\
    \ Int = 0\n    var vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var\
    \ vowelIndex30: Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32:\
    \ Int = 0\n    var vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var\
    \ vowelIndex35: Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37:\
    \ Int = 0\n    var vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var\
    \ vowelIndex40: Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42:\
    \ Int = 0\n    var vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var\
    \ vowelIndex45: Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47:\
    \ Int = 0\n    var vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var\
    \ vowelIndex50: Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52:\
    \ Int = 0\n    var vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var\
    \ vowelIndex55: Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57:\
    \ Int = 0\n    var vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var\
    \ vowelIndex60: Int = 0\n    var vowelIndex61: Int = 0\n    var vowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzntk6dqx.swift:72:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"\",\"a\",\"e\",\"i\",\"o\",\"u\"]\n\
    \    var vowelsCount = word.characters.count\n    var vowelsIndex = 0\n    var\
    \ vowelsIndex2 = 0\n    var vowelsIndex3 = 0\n    var vowelsIndex4 = 0\n    var\
    \ vowelsIndex5 = 0\n    var vowelsIndex6 = 0\n    var vowelsIndex7 = 0\n    var\
    \ vowelsIndex8 = 0\n    var vowelsIndex9 = 0\n    var vowelsIndex10 = 0\n    var\
    \ vowelsIndex11 = 0\n    var vowelsIndex12 = 0\n    var vowelsIndex13 = 0\n  \
    \  var vowelsIndex14 = 0\n    var vowelsIndex15 = 0\n    var vowelsIndex16 = 0\n\
    \    var vowelsIndex17 = 0\n    var vowelsIndex18 = 0\n    var vowelsIndex19 =\
    \ 0\n    var vowelsIndex20 = 0\n    var vowelsIndex21 = 0\n    var vowelsIndex22\
    \ = 0\n    var vowelsIndex23 = 0\n    var vowelsIndex24 = 0\n    var vowelsIndex25\
    \ = 0\n    var vowelsIndex26 = 0\n    var vowelsIndex27 = 0\n    var vowelsIndex28\
    \ = 0\n    var vowelsIndex29 = 0\n    var vowelsIndex30 = 0\n    var vowelsIndex31\
    \ = 0\n    var vowelsIndex32 = 0\n    var vowelsIndex33 = 0\n    var vowelsIndex34\
    \ = 0\n    var vowelsIndex35 = 0\n    var vowelsIndex36 = 0\n    var vowelsIndex37\
    \ = 0\n    var vowelsIndex38 = 0\n    var vowelsIndex39 = 0\n    var vowelsIndex40\
    \ = 0\n    var vowelsIndex41 = 0\n    var vowelsIndex42 = 0\n    var vowelsIndex43\
    \ = 0\n    var vowelsIndex44 = 0\n    var vowelsIndex45 = 0\n    var vowelsIndex46\
    \ = 0\n    var vowelsIndex47 = 0\n    var vowelsIndex48 = 0\n    var vowelsIndex49\
    \ = 0\n    var vowelsIndex50 = 0\n    var vowelsIndex51 = 0\n    var vowelsIndex52\
    \ = 0\n    var vowelsIndex53 = 0\n    var vowelsIndex54 = 0\n    var vowelsIndex55\
    \ = 0\n    var vowelsIndex56 = 0\n    var vowelsIndex57 = 0\n    var vowelsIndex58\
    \ = 0\n    var vowelsIndex59 = 0\n    var vowelsIndex60 = 0\n    var vowelsIndex61\
    \ = 0\n    var vowelsIndex62 = 0\n    var vowelsIndex63 = 0\n    var vowelsIndex64\
    \ = 0\n    var vowelsIndex65 = 0\n    var vowelsIndex66 = 0\n    var vowelsIndex67\
    \ = 0\n    var vowelsIndex68 = 0\n    var vowelsIndex69 = 0\n    var vowelsIndex70\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphprmzf4j.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmphprmzf4j.swift:9:9: warning: initialization of variable 'vowels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowels = [\"\",\"a\",\"e\",\"i\",\"o\",\"u\"]\n    ~~~~^~~~~~\n    _\n\
    /tmp/tmphprmzf4j.swift:10:9: warning: initialization of variable 'vowelsCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsCount = word.characters.count\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmphprmzf4j.swift:11:9:\
    \ warning: initialization of variable 'vowelsIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsIndex = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmphprmzf4j.swift:12:9: warning: initialization of variable 'vowelsIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex2 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphprmzf4j.swift:13:9:\
    \ warning: initialization of variable 'vowelsIndex3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex3 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphprmzf4j.swift:14:9: warning: initialization\
    \ of variable 'vowelsIndex4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsIndex4 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmphprmzf4j.swift:15:9: warning: initialization of variable 'vowelsIndex5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelsIndex5 = 0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphprmzf4j.swift:16:9:\
    \ warning: initialization of variable 'vowelsIndex6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var vowelsIndex6 = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmphprmzf4j.swift:17:9: warning: initialization\
    \ of variable 'vowelsIndex7' was nev"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowelIndex = 0\n    var vowelCount = 0\n    var vowelString = \"\"\n\
    \    \n    for char in word.characters {\n        if vowels.contains(char) {\n\
    \            vowelCount += 1\n            if vowelIndex == 0 {\n             \
    \   vowelString = char\n                vowelIndex = 1\n            } else {\n\
    \                if vowelIndex == vowels.count - 1 {\n                    vowelString\
    \ = char\n                    vowelIndex = 0\n                } else {\n     \
    \               vowelString = vowels[vowelIndex] + vowelString\n             \
    \       vowelIndex += 1\n                }\n            }\n        }\n    }\n\
    \    return vowelString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpdv3ltlt_.swift:14:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpdv3ltlt_.swift:15:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmpdv3ltlt_.swift:18:31:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      vowelString = char\n                              ^~~~\n/tmp/tmpdv3ltlt_.swift:22:35:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \          vowelString = char\n                                  ^~~~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    \n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n    \n    if vowelsCount == 0 {\n        return \"\"\n    }\n    \n\
    \    let vowelsIndex = word.characters.filter({ vowels.contains($0) }).index(of:\
    \ word.characters.last!)\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: word.characters.last!)\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: word.characters.last!)\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: word.characters.last!)\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: word.characters.last!)\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: word.characters.last!)\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: word.characters.last!)\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: word.characters.last!)\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    if vowelsCount == 0 {\n        return\
    \ \"\"\n    }\n    \n    let vowelsIndex = word.characters.filter(\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpennvq272.swift:83:1: error: expected expression in list of expressions\n\
    }\n^\n/tmp/tmpennvq272.swift:12:64: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    let vowelsCount =\
    \ word.characters.filter({ vowels.contains($0) }).count\n                    \
    \                                           ^\n/tmp/tmpennvq272.swift:18:64: error:\
    \ cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String'\n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: word.characters.last!)\n                                      \
    \                         ^\n/tmp/tmpennvq272.swift:20:64: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n\
    \    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \                                                               ^\n/tmp/tmpennvq272.swift:26:64:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String'\n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: word.characters.last!)\n                                      \
    \                         ^\n/tmp/tmpennvq272.swift:28:64: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n\
    \    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \                                                               ^\n/tmp/tmpennvq272.swift:34:64:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String'\n    let vowelsIndex = word.characters.filter({ vowels.contains($0)\
    \ }).index(of: word.characters.last!)\n                                      \
    \                         ^\n/tmp/tmpennvq272.swift:36:64: error: cannot convert\
    \ value of type 'String.Element' (aka 'Character') to expected argument type 'String'\n\
    \    let vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \          "
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount = [Int]()\n    var vowelsIndex: [Int] = []\n   \
    \ var vowelsIndexCount: [Int] = []\n    var vowelsIndexCountMax: Int = 0\n   \
    \ var vowelsIndexCountMin: Int = 0\n    var vowelsIndexCountMaxIndex: Int = 0\n\
    \    var vowelsIndexCountMinIndex: Int = 0\n    var vowelsIndexCountMinIndex2:\
    \ Int = 0\n    var vowelsIndexCountMinIndex3: Int = 0\n    var vowelsIndexCountMinIndex4:\
    \ Int = 0\n    var vowelsIndexCountMinIndex5: Int = 0\n    var vowelsIndexCountMinIndex6:\
    \ Int = 0\n    var vowelsIndexCountMinIndex7: Int = 0\n    var vowelsIndexCountMinIndex8:\
    \ Int = 0\n    var vowelsIndexCountMinIndex9: Int = 0\n    var vowelsIndexCountMinIndex10:\
    \ Int = 0\n    var vowelsIndexCountMinIndex11: Int = 0\n    var vowelsIndexCountMinIndex12:\
    \ Int = 0\n    var vowelsIndexCountMinIndex13: Int = 0\n    var vowelsIndexCountMinIndex14:\
    \ Int = 0\n    var vowelsIndexCountMinIndex15: Int = 0\n    var vowelsIndexCountMinIndex16:\
    \ Int = 0\n    var vowelsIndexCountMinIndex17: Int = 0\n    var vowelsIndexCountMinIndex18:\
    \ Int = 0\n    var vowelsIndexCountMinIndex19: Int = 0\n    var vowelsIndexCountMinIndex20:\
    \ Int = 0\n    var vowelsIndexCountMinIndex21: Int = 0\n    var vowelsIndexCountMinIndex22:\
    \ Int = 0\n    var vowelsIndexCountMinIndex23: Int = 0\n    var vowelsIndexCountMinIndex24:\
    \ Int = 0\n    var vowelsIndexCountMinIndex25: Int = 0\n    var vowelsIndexCountMinIndex26:\
    \ Int = 0\n    var vowelsIndexCountMinIndex27: Int = 0\n    var vowelsIndexCountMinIndex28:\
    \ Int = 0\n    var vowelsIndexCountMinIndex29: Int = 0\n    var vowelsIndexCountMinIndex30:\
    \ Int = 0\n    var vowelsIndexCountMinIndex31: Int = 0\n    var vowelsIndexCountMinIndex32:\
    \ Int = 0\n    var vowelsIndexCountMinIndex33: Int = 0\n    var vowelsIndexCountMinIndex34:\
    \ Int = 0\n    var vowelsIndexCountMinIndex35: Int = 0\n    var vowelsIndexCountMinIndex36:\
    \ Int = 0\n    var vowelsIndexCountMinIndex37: Int = 0\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpvs87mirm.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpvs87mirm.swift:10:9:\
    \ warning: initialization of variable 'vowelsCount' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelsCount = [Int]()\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpvs87mirm.swift:11:9: warning: variable 'vowelsIndex' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex: [Int]\
    \ = []\n        ^~~~~~~~~~~\n        _\n/tmp/tmpvs87mirm.swift:12:9: warning:\
    \ variable 'vowelsIndexCount' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndexCount: [Int] = []\n        ^~~~~~~~~~~~~~~~\n       \
    \ _\n/tmp/tmpvs87mirm.swift:13:9: warning: variable 'vowelsIndexCountMax' was\
    \ never used; consider replacing with '_' or removing it\n    var vowelsIndexCountMax:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpvs87mirm.swift:14:9:\
    \ warning: variable 'vowelsIndexCountMin' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsIndexCountMin: Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpvs87mirm.swift:15:9: warning: variable 'vowelsIndexCountMaxIndex'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsIndexCountMaxIndex:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpvs87mirm.swift:16:9:\
    \ warning: variable 'vowelsIndexCountMinIndex' was never used; consider replacing\
    \ with '_' or removing it\n    var vowelsIndexCountMinIndex: Int = 0\n       \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpvs87mirm.swift:17:9: warning: variable\
    \ 'vowelsIndexCountMinIndex2' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndexCountMinIndex2: Int = 0\n        ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpvs87mirm.swift:18:9: warning: variable 'vowelsIndexCountMinIndex3'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsIndexCountMinIndex3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.characters.count\n    var vowelIndex = 0\n    var vowelCount = 0\n    var\
    \ consonantIndex = 0\n    var consonantCount = 0\n    var consonantIndex2 = 0\n\
    \    var consonantCount2 = 0\n    var consonantIndex3 = 0\n    var consonantCount3\
    \ = 0\n    var consonantIndex4 = 0\n    var consonantCount4 = 0\n    var consonantIndex5\
    \ = 0\n    var consonantCount5 = 0\n    var consonantIndex6 = 0\n    var consonantCount6\
    \ = 0\n    var consonantIndex7 = 0\n    var consonantCount7 = 0\n    var consonantIndex8\
    \ = 0\n    var consonantCount8 = 0\n    var consonantIndex9 = 0\n    var consonantCount9\
    \ = 0\n    var consonantIndex10 = 0\n    var consonantCount10 = 0\n    var consonantIndex11\
    \ = 0\n    var consonantCount11 = 0\n    var consonantIndex12 = 0\n    var consonantCount12\
    \ = 0\n    var consonantIndex13 = 0\n    var consonantCount13 = 0\n    var consonantIndex14\
    \ = 0\n    var consonantCount14 = 0\n    var consonantIndex15 = 0\n    var consonantCount15\
    \ = 0\n    var consonantIndex16 = 0\n    var consonantCount16 = 0\n    var consonantIndex17\
    \ = 0\n    var consonantCount17 = 0\n    var consonantIndex18 = 0\n    var consonantCount18\
    \ = 0\n    var consonantIndex19 = 0\n    var consonantCount19 = 0\n    var consonantIndex20\
    \ = 0\n    var consonantCount20 = 0\n    var consonantIndex21 = 0\n    var consonantCount21\
    \ = 0\n    var consonantIndex22 = 0\n    var consonantCount22 = 0\n    var consonantIndex23\
    \ = 0\n    var consonantCount23 = 0\n    var consonantIndex24 = 0\n    var consonantCount24\
    \ = 0\n    var consonantIndex25 = 0\n    var consonantCount25 = 0\n    var consonantIndex26\
    \ = 0\n    var consonantCount26 = 0\n    var consonantIndex27 = 0\n    var consonantCount27\
    \ = 0\n    var consonantIndex28 = 0\n    var consonantCount28 = 0\n    var consonantIndex29\
    \ = 0\n    var consonantCount29 = 0\n    var consonantIndex30 = 0\n    var consonantCount30\
    \ = 0\n    var consonantIndex31\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp4iw9st1d.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp4iw9st1d.swift:73:9: error: type annotation missing in pattern\n\
    \    var consonantIndex31\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    var vowelsIndexCount: [Int] = []\n    var vowelsIndexCountMax: Int\
    \ = -1\n    var vowelsIndexCountMin: Int = -1\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n    var vowelsIndexCountMinIndex: Int = -1\n    var vowelsIndexCountMaxIndex2:\
    \ Int = -1\n    var vowelsIndexCountMinIndex2: Int = -1\n    var vowelsIndexCountMaxIndex3:\
    \ Int = -1\n    var vowelsIndexCountMinIndex3: Int = -1\n    var vowelsIndexCountMaxIndex4:\
    \ Int = -1\n    var vowelsIndexCountMinIndex4: Int = -1\n    var vowelsIndexCountMaxIndex5:\
    \ Int = -1\n    var vowelsIndexCountMinIndex5: Int = -1\n    var vowelsIndexCountMaxIndex6:\
    \ Int = -1\n    var vowelsIndexCountMinIndex6: Int = -1\n    var vowelsIndexCountMaxIndex7:\
    \ Int = -1\n    var vowelsIndexCountMinIndex7: Int = -1\n    var vowelsIndexCountMaxIndex8:\
    \ Int = -1\n    var vowelsIndexCountMinIndex8: Int = -1\n    var vowelsIndexCountMaxIndex9:\
    \ Int = -1\n    var vowelsIndexCountMinIndex9: Int = -1\n    var vowelsIndexCountMaxIndex10:\
    \ Int = -1\n    var vowelsIndexCountMinIndex10: Int = -1\n    var vowelsIndexCountMaxIndex11:\
    \ Int = -1\n    var vowelsIndexCountMinIndex11: Int = -1\n    var vowelsIndexCountMaxIndex12:\
    \ Int = -1\n    var vowelsIndexCountMinIndex12: Int = -1\n    var vowelsIndexCountMaxIndex13:\
    \ Int = -1\n    var vowelsIndexCountMinIndex13: Int = -1\n    var vowelsIndexCountMaxIndex14:\
    \ Int = -1\n    var vowelsIndexCountMinIndex14: Int = -1\n    var vowelsIndexCountMaxIndex15:\
    \ Int = -1\n    var vowelsIndexCountMinIndex15: Int = -1\n    var vowelsIndexCountMaxIndex16:\
    \ Int = -1\n    var vowelsIndexCountMinIndex16: Int = -1\n    var vowelsIndexCountMaxIndex17:\
    \ Int = -1\n    var vowelsIndexCountMinIndex17: Int = -1\n    var vowelsIndexCountMaxIndex18:\
    \ Int = -1\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpgat8pdy2.swift:50:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpgat8pdy2.swift:9:9: warning: variable 'vowels' was never used; consider\
    \ replacing with '_' or removing it\n    var vowels: [String] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmpgat8pdy2.swift:10:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmpgat8pdy2.swift:11:9: warning: variable 'vowelsIndex' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex: [Int]\
    \ = []\n        ^~~~~~~~~~~\n        _\n/tmp/tmpgat8pdy2.swift:12:9: warning:\
    \ variable 'vowelsIndexCount' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndexCount: [Int] = []\n        ^~~~~~~~~~~~~~~~\n       \
    \ _\n/tmp/tmpgat8pdy2.swift:13:9: warning: variable 'vowelsIndexCountMax' was\
    \ never used; consider replacing with '_' or removing it\n    var vowelsIndexCountMax:\
    \ Int = -1\n        ^~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpgat8pdy2.swift:14:9:\
    \ warning: variable 'vowelsIndexCountMin' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsIndexCountMin: Int = -1\n        ^~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpgat8pdy2.swift:15:9: warning: variable 'vowelsIndexCountMaxIndex'\
    \ was never used; consider replacing with '_' or removing it\n    var vowelsIndexCountMaxIndex:\
    \ Int = -1\n        ^~~~~~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpgat8pdy2.swift:16:9:\
    \ warning: variable 'vowelsIndexCountMinIndex' was never used; consider replacing\
    \ with '_' or removing it\n    var vowelsIndexCountMinIndex: Int = -1\n      \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpgat8pdy2.swift:17:9: warning:\
    \ variable 'vowelsIndexCountMaxIndex2' was never used; consider replacing with\
    \ '_' or removing it\n    var vowelsIndexCountMaxIndex2: Int = -1\n        ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpgat8pdy2.swift:18:9: warning: variable 'vowelsIndexCountMinIndex2'\
    \ was never used; consider replacing with '_' or removing it\n    var v"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowelsCount = vowels.count\n    var vowelIndex = 0\n    var vowelCount\
    \ = 0\n    var vowelIndex2 = 0\n    var vowelCount2 = 0\n    var vowelIndex3 =\
    \ 0\n    var vowelCount3 = 0\n    var vowelIndex4 = 0\n    var vowelCount4 = 0\n\
    \    var vowelIndex5 = 0\n    var vowelCount5 = 0\n    var vowelIndex6 = 0\n \
    \   var vowelCount6 = 0\n    var vowelIndex7 = 0\n    var vowelCount7 = 0\n  \
    \  var vowelIndex8 = 0\n    var vowelCount8 = 0\n    var vowelIndex9 = 0\n   \
    \ var vowelCount9 = 0\n    var vowelIndex10 = 0\n    var vowelCount10 = 0\n  \
    \  var vowelIndex11 = 0\n    var vowelCount11 = 0\n    var vowelIndex12 = 0\n\
    \    var vowelCount12 = 0\n    var vowelIndex13 = 0\n    var vowelCount13 = 0\n\
    \    var vowelIndex14 = 0\n    var vowelCount14 = 0\n    var vowelIndex15 = 0\n\
    \    var vowelCount15 = 0\n    var vowelIndex16 = 0\n    var vowelCount16 = 0\n\
    \    var vowelIndex17 = 0\n    var vowelCount17 = 0\n    var vowelIndex18 = 0\n\
    \    var vowelCount18 = 0\n    var vowelIndex19 = 0\n    var vowelCount19 = 0\n\
    \    var vowelIndex20 = 0\n    var vowelCount20 = 0\n    var vowelIndex21 = 0\n\
    \    var vowelCount21 = 0\n    var vowelIndex22 = 0\n    var vowelCount22 = 0\n\
    \    var vowelIndex23 = 0\n    var vowelCount23 = 0\n    var vowelIndex24 = 0\n\
    \    var vowelCount24 = 0\n    var vowelIndex25 = 0\n    var vowelCount25 = 0\n\
    \    var vowelIndex26 = 0\n    var vowelCount26 = 0\n    var vowelIndex27 = 0\n\
    \    var vowelCount27 = 0\n    var vowelIndex28 = 0\n    var vowelCount28 = 0\n\
    \    var vowelIndex29 = 0\n    var vowelCount29 = 0\n    var vowelIndex30 = 0\n\
    \    var vowelCount30 = 0\n    var vowelIndex31 = 0\n    var vowelCount31 = 0\n\
    \    var vowelIndex32 = 0\n    var vowelCount32 = 0\n    var vowelIndex33 = 0\n\
    \    var vowelCount33 = 0\n    var vowelIndex34 = 0\n    var vowelCount34 = 0\n\
    \    var vowelIndex35 = 0\n    var vowelCount35 = 0\n    var vowelIndex36 = 0\n\
    \    var vowelCount36 = 0\n    var vowelIndex37 = 0\n    var vowelCount37 = 0\n\
    \    var vowelIndex38 = 0\n    var vowelCount38 = 0\n    var vowelIndex39 = 0\n\
    \    var vowelCount39 = 0\n    var vowelIndex40 = 0\n    var vowelCount40 = 0\n\
    \    var vowelIndex41 = 0\n    var vowelCount41 = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1_qzbf2y.swift:93:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1_qzbf2y.swift:9:9: warning: variable 'vowels' was never mutated;\
    \ consider changing to 'let' constant\n    var vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    ~~~ ^\n    let\n/tmp/tmp1_qzbf2y.swift:10:9: warning: initialization\
    \ of variable 'vowelsCount' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var vowelsCount = vowels.count\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp1_qzbf2y.swift:11:9: warning: initialization of variable 'vowelIndex'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmp1_qzbf2y.swift:12:9:\
    \ warning: initialization of variable 'vowelCount' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelCount = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmp1_qzbf2y.swift:13:9: warning: initialization of variable 'vowelIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp1_qzbf2y.swift:14:9:\
    \ warning: initialization of variable 'vowelCount2' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelCount2 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp1_qzbf2y.swift:15:9: warning: initialization of variable 'vowelIndex3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex3 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp1_qzbf2y.swift:16:9:\
    \ warning: initialization of variable 'vowelCount3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelCount3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmp1_qzbf2y.swift:17:9: warning: initialization of variable 'vowelIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmp1_qzbf2y.swift:18:9:\
    \ warning: initialization of variable 'vowelCount4' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelCount4 = 0\n    ~~~~^"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelsCountIndex: Int = 0\n    var vowelsCountIndex2: Int = 0\n\
    \    var vowelsCountIndex3: Int = 0\n    var vowelsCountIndex4: Int = 0\n    var\
    \ vowelsCountIndex5: Int = 0\n    var vowelsCountIndex6: Int = 0\n    var vowelsCountIndex7:\
    \ Int = 0\n    var vowelsCountIndex8: Int = 0\n    var vowelsCountIndex9: Int\
    \ = 0\n    var vowelsCountIndex10: Int = 0\n    var vowelsCountIndex11: Int =\
    \ 0\n    var vowelsCountIndex12: Int = 0\n    var vowelsCountIndex13: Int = 0\n\
    \    var vowelsCountIndex14: Int = 0\n    var vowelsCountIndex15: Int = 0\n  \
    \  var vowelsCountIndex16: Int = 0\n    var vowelsCountIndex17: Int = 0\n    var\
    \ vowelsCountIndex18: Int = 0\n    var vowelsCountIndex19: Int = 0\n    var vowelsCountIndex20:\
    \ Int = 0\n    var vowelsCountIndex21: Int = 0\n    var vowelsCountIndex22: Int\
    \ = 0\n    var vowelsCountIndex23: Int = 0\n    var vowelsCountIndex24: Int =\
    \ 0\n    var vowelsCountIndex25: Int = 0\n    var vowelsCountIndex26: Int = 0\n\
    \    var vowelsCountIndex27: Int = 0\n    var vowelsCountIndex28: Int = 0\n  \
    \  var vowelsCountIndex29: Int = 0\n    var vowelsCountIndex30: Int = 0\n    var\
    \ vowelsCountIndex31: Int = 0\n    var vowelsCountIndex32: Int = 0\n    var vowelsCountIndex33:\
    \ Int = 0\n    var vowelsCountIndex34: Int = 0\n    var vowelsCountIndex35: Int\
    \ = 0\n    var vowelsCountIndex36: Int = 0\n    var vowelsCountIndex37: Int =\
    \ 0\n    var vowelsCountIndex38: Int = 0\n    var vowelsCountIndex39: Int = 0\n\
    \    var vowelsCountIndex40: Int = 0\n    var vowelsCountIndex41: Int = 0\n  \
    \  var vowelsCountIndex42: Int = 0\n    var vowelsCountIndex43: Int = 0\n    var\
    \ vowelsCountIndex44: Int = 0\n    var vowelsCountIndex45: Int = 0\n    var vowelsCountIndex46:\
    \ Int = 0\n    var vowelsCountIndex47: Int = 0\n    var vowelsCountIndex48: Int\
    \ = 0\n    var vowels\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_9g9l9c_.swift:60:9: error: type annotation missing in pattern\n\
    \    var vowels\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    var vowels: [String] = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    \n    var vowelIndex:\
    \ Int = 0\n    var vowelCount: Int = 0\n    \n    var vowelIndex2: Int = 0\n \
    \   var vowelCount2: Int = 0\n    \n    var vowelIndex3: Int = 0\n    var vowelCount3:\
    \ Int = 0\n    \n    var vowelIndex4: Int = 0\n    var vowelCount4: Int = 0\n\
    \    \n    var vowelIndex5: Int = 0\n    var vowelCount5: Int = 0\n    \n    var\
    \ vowelIndex6: Int = 0\n    var vowelCount6: Int = 0\n    \n    var vowelIndex7:\
    \ Int = 0\n    var vowelCount7: Int = 0\n    \n    var vowelIndex8: Int = 0\n\
    \    var vowelCount8: Int = 0\n    \n    var vowelIndex9: Int = 0\n    var vowelCount9:\
    \ Int = 0\n    \n    var vowelIndex10: Int = 0\n    var vowelCount10: Int = 0\n\
    \    \n    var vowelIndex11: Int = 0\n    var vowelCount11: Int = 0\n    \n  \
    \  var vowelIndex12: Int = 0\n    var vowelCount12: Int = 0\n    \n    var vowelIndex13:\
    \ Int = 0\n    var vowelCount13: Int = 0\n    \n    var vowelIndex14: Int = 0\n\
    \    var vowelCount14: Int = 0\n    \n    var vowelIndex15: Int = 0\n    var vowelCount15:\
    \ Int = 0\n    \n    var vowelIndex16: Int = 0\n    var vowelCount16: Int = 0\n\
    \    \n    var vowelIndex17: Int = 0\n    var vowelCount17: Int = 0\n    \n  \
    \  var vowelIndex18: Int = 0\n    var vowelCount18: Int = 0\n    \n    var vowelIndex19:\
    \ Int = 0\n    var vowelCount19: Int = 0\n    \n    var vowelIndex20: Int = 0\n\
    \    var vowelCount20: Int = 0\n    \n    var vowelIndex21: Int = 0\n    var vowelCount21:\
    \ Int = 0\n    \n    var vowelIndex22: Int = 0\n    var vowelCount22: Int = 0\n\
    \    \n    var vowelIndex23: Int = 0\n    var vowelCount23: Int = 0\n    \n  \
    \  var vowelIndex24: Int = 0\n    var vowelCount24: Int = 0\n    \n    var vowelIndex25:\
    \ Int = 0\n    var vowelCount25: Int = 0\n    \n    var vowelIndex26: Int = 0\n\
    \    var vowelCount26: Int = 0\n    \n    var vowelIndex27: Int = 0\n    var vowelCount27:\
    \ Int = 0\n    \n    var vowelIndex28: \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_93agk29.swift:94:22: error: expected type\n    var vowelIndex28:\
    \ \n                     ^\n                      <#type#>\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelsIndex: [Int]\
    \ = []\n    \n    for char in word.characters {\n        if vowels.contains(char)\
    \ {\n            vowelsIndex.append(vowels.indexOf(char))\n        }\n    }\n\
    \    \n    if vowelsIndex.count > 0 {\n        var minIndex: Int = 0\n       \
    \ var minDistance: Int = Int.max\n        \n        for index in vowelsIndex.reverse()\
    \ {\n            let distance = abs(index - vowelsCount.last!)\n            if\
    \ distance < minDistance {\n                minDistance = distance\n         \
    \       minIndex = index\n            }\n        }\n        \n        return vowels[minIndex]\n\
    \    }\n    \n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1ltw_yom.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp1ltw_yom.swift:14:28:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \        if vowels.contains(char) {\n                           ^\n/tmp/tmp1ltw_yom.swift:15:39:\
    \ error: value of type '[String]' has no member 'indexOf'\n            vowelsIndex.append(vowels.indexOf(char))\n\
    \                               ~~~~~~ ^~~~~~~\n/tmp/tmp1ltw_yom.swift:23:34:\
    \ error: for-in loop requires '()' to conform to 'Sequence'\n        for index\
    \ in vowelsIndex.reverse() {\n                     ~~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.count\n    var vowelIndex = 0\n    var vowelIndex2 = 0\n    var vowelIndex3\
    \ = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 = 0\n    var vowelIndex6 =\
    \ 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n    var vowelIndex9 = 0\n\
    \    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n    var vowelIndex12 = 0\n\
    \    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n    var vowelIndex15 = 0\n\
    \    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n    var vowelIndex18 = 0\n\
    \    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n    var vowelIndex21 = 0\n\
    \    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n    var vowelIndex24 = 0\n\
    \    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n    var vowelIndex27 = 0\n\
    \    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n    var vowelIndex30 = 0\n\
    \    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n    var vowelIndex33 = 0\n\
    \    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n    var vowelIndex36 = 0\n\
    \    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n    var vowelIndex39 = 0\n\
    \    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n    var vowelIndex42 = 0\n\
    \    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n    var vowelIndex45 = 0\n\
    \    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n    var vowelIndex48 = 0\n\
    \    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n    var vowelIndex51 = 0\n\
    \    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n    var vowelIndex54 = 0\n\
    \    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n    var vowelIndex57 = 0\n\
    \    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n    var vowelIndex60 = 0\n\
    \    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n    var vowelIndex63 = 0\n\
    \    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n    var vowelIndex66 = 0\n\
    \    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n    var vowelIndex69 = 0\n\
    \    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n    var vowelIndex72 = 0\n\
    \    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n    var vowelIndex75 = 0\n\
    \    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n    var vowelIndex78 = 0\n\
    \    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n    var vowelIndex81 = 0\n\
    \    var vowelIndex82 = 0\n    var vowelIndex83\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp246vczhj.swift:93:9: error: type annotation missing in pattern\n\
    \    var vowelIndex83\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelIndex: Int = 0\n    var vowelIndex2:\
    \ Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4: Int = 0\n    var\
    \ vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var vowelIndex7: Int\
    \ = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int = 0\n    var vowelIndex10:\
    \ Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12: Int = 0\n    var\
    \ vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var vowelIndex15:\
    \ Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17: Int = 0\n    var\
    \ vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var vowelIndex20:\
    \ Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22: Int = 0\n    var\
    \ vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var vowelIndex25:\
    \ Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27: Int = 0\n    var\
    \ vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var vowelIndex30:\
    \ Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32: Int = 0\n    var\
    \ vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var vowelIndex35:\
    \ Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37: Int = 0\n    var\
    \ vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var vowelIndex40:\
    \ Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42: Int = 0\n    var\
    \ vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var vowelIndex45:\
    \ Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47: Int = 0\n    var\
    \ vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var vowelIndex50:\
    \ Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52: Int = 0\n    var\
    \ vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var vowelIndex55:\
    \ Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57: Int = 0\n    var\
    \ vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var vowelIndex60:\
    \ Int = 0\n    var vowelIndex61: Int = 0\n    var vowelIndex62: \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpw09a4dhe.swift:72:22: error: expected type\n    var vowelIndex62:\
    \ \n                     ^\n                      <#type#>\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n    let vowels = \"aeiouAEIOU\"\n    \n    let vowelsCount\
    \ = word.characters.filter({ vowels.contains($0) }).count\n    \n    if vowelsCount\
    \ == 0 {\n        return \"\"\n    }\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n    \n    let vowelsCount = word.characters.filter({\
    \ vowels.contains($0) }).count\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpk35h47bz.swift:12:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk35h47bz.swift:18:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk35h47bz.swift:18:9: error: invalid redeclaration of\
    \ 'vowelsCount'\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n        ^\n/tmp/tmpk35h47bz.swift:12:9: note: 'vowelsCount' previously\
    \ declared here\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n        ^\n/tmp/tmpk35h47bz.swift:20:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk35h47bz.swift:20:9: error: invalid redeclaration of\
    \ 'vowelsCount'\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n        ^\n/tmp/tmpk35h47bz.swift:12:9: note: 'vowelsCount' previously\
    \ declared here\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n        ^\n/tmp/tmpk35h47bz.swift:22:28: error: 'characters' is unavailable:\
    \ Please use String directly\n    let vowelsCount = word.characters.filter({ vowels.contains($0)\
    \ }).count\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk35h47bz.swift:22:9: error: invalid redeclaration of\
    \ 'vowe"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: [Int] = [0, 1, 2, 3, 4]\n    var vowelIndex: Int\
    \ = 0\n    var vowelIndex2: Int = 0\n    var vowelIndex3: Int = 0\n    var vowelIndex4:\
    \ Int = 0\n    var vowelIndex5: Int = 0\n    var vowelIndex6: Int = 0\n    var\
    \ vowelIndex7: Int = 0\n    var vowelIndex8: Int = 0\n    var vowelIndex9: Int\
    \ = 0\n    var vowelIndex10: Int = 0\n    var vowelIndex11: Int = 0\n    var vowelIndex12:\
    \ Int = 0\n    var vowelIndex13: Int = 0\n    var vowelIndex14: Int = 0\n    var\
    \ vowelIndex15: Int = 0\n    var vowelIndex16: Int = 0\n    var vowelIndex17:\
    \ Int = 0\n    var vowelIndex18: Int = 0\n    var vowelIndex19: Int = 0\n    var\
    \ vowelIndex20: Int = 0\n    var vowelIndex21: Int = 0\n    var vowelIndex22:\
    \ Int = 0\n    var vowelIndex23: Int = 0\n    var vowelIndex24: Int = 0\n    var\
    \ vowelIndex25: Int = 0\n    var vowelIndex26: Int = 0\n    var vowelIndex27:\
    \ Int = 0\n    var vowelIndex28: Int = 0\n    var vowelIndex29: Int = 0\n    var\
    \ vowelIndex30: Int = 0\n    var vowelIndex31: Int = 0\n    var vowelIndex32:\
    \ Int = 0\n    var vowelIndex33: Int = 0\n    var vowelIndex34: Int = 0\n    var\
    \ vowelIndex35: Int = 0\n    var vowelIndex36: Int = 0\n    var vowelIndex37:\
    \ Int = 0\n    var vowelIndex38: Int = 0\n    var vowelIndex39: Int = 0\n    var\
    \ vowelIndex40: Int = 0\n    var vowelIndex41: Int = 0\n    var vowelIndex42:\
    \ Int = 0\n    var vowelIndex43: Int = 0\n    var vowelIndex44: Int = 0\n    var\
    \ vowelIndex45: Int = 0\n    var vowelIndex46: Int = 0\n    var vowelIndex47:\
    \ Int = 0\n    var vowelIndex48: Int = 0\n    var vowelIndex49: Int = 0\n    var\
    \ vowelIndex50: Int = 0\n    var vowelIndex51: Int = 0\n    var vowelIndex52:\
    \ Int = 0\n    var vowelIndex53: Int = 0\n    var vowelIndex54: Int = 0\n    var\
    \ vowelIndex55: Int = 0\n    var vowelIndex56: Int = 0\n    var vowelIndex57:\
    \ Int = 0\n    var vowelIndex58: Int = 0\n    var vowelIndex59: Int = 0\n    var\
    \ vowelIndex60: Int = 0\n    var vowelIndex61: Int = 0\n    var vowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpzntk6dqx.swift:72:9: error: type annotation missing in pattern\n\
    \    var vowel\n        ^\n"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels: [String] = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"]\n    var vowelsCount: Int = 0\n    var vowelsIndex: Int = 0\n    var\
    \ vowelsIndex2: Int = 0\n    var vowelsIndex3: Int = 0\n    var vowelsIndex4:\
    \ Int = 0\n    var vowelsIndex5: Int = 0\n    var vowelsIndex6: Int = 0\n    var\
    \ vowelsIndex7: Int = 0\n    var vowelsIndex8: Int = 0\n    var vowelsIndex9:\
    \ Int = 0\n    var vowelsIndex10: Int = 0\n    var vowelsIndex11: Int = 0\n  \
    \  var vowelsIndex12: Int = 0\n    var vowelsIndex13: Int = 0\n    var vowelsIndex14:\
    \ Int = 0\n    var vowelsIndex15: Int = 0\n    var vowelsIndex16: Int = 0\n  \
    \  var vowelsIndex17: Int = 0\n    var vowelsIndex18: Int = 0\n    var vowelsIndex19:\
    \ Int = 0\n    var vowelsIndex20: Int = 0\n    var vowelsIndex21: Int = 0\n  \
    \  var vowelsIndex22: Int = 0\n    var vowelsIndex23: Int = 0\n    var vowelsIndex24:\
    \ Int = 0\n    var vowelsIndex25: Int = 0\n    var vowelsIndex26: Int = 0\n  \
    \  var vowelsIndex27: Int = 0\n    var vowelsIndex28: Int = 0\n    var vowelsIndex29:\
    \ Int = 0\n    var vowelsIndex30: Int = 0\n    var vowelsIndex31: Int = 0\n  \
    \  var vowelsIndex32: Int = 0\n    var vowelsIndex33: Int = 0\n    var vowelsIndex34:\
    \ Int = 0\n    var vowelsIndex35: Int = 0\n    var vowelsIndex36: Int = 0\n  \
    \  var vowelsIndex37: Int = 0\n    var vowelsIndex38: Int = 0\n    var vowelsIndex39:\
    \ Int = 0\n    var vowelsIndex40: Int = 0\n    var vowelsIndex41: Int = 0\n  \
    \  var vowelsIndex42: Int = 0\n    var vowelsIndex43: Int = 0\n    var vowelsIndex44:\
    \ Int = 0\n    var vowelsIndex45: Int = 0\n    var vowelsIndex46: Int = 0\n  \
    \  var vowelsIndex47: Int = 0\n    var vowelsIndex48: Int = 0\n    var vowelsIndex49:\
    \ Int = 0\n    var vowelsIndex50: Int = 0\n    var vowelsIndex51: Int = 0\n  \
    \  var vowelsIndex52: Int = 0\n    var vowelsIndex53: Int = 0\n    var vowelsIndex54:\
    \ Int = 0\n    var vowelsIndex55: Int\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmps3g1rovr.swift:9:9: warning: variable 'vowels' was never used;\
    \ consider replacing with '_' or removing it\n    var vowels: [String] = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]\n        ^~~~~~\n        _\n/tmp/tmps3g1rovr.swift:10:9:\
    \ warning: variable 'vowelsCount' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsCount: Int = 0\n        ^~~~~~~~~~~\n        _\n\
    /tmp/tmps3g1rovr.swift:11:9: warning: variable 'vowelsIndex' was never used; consider\
    \ replacing with '_' or removing it\n    var vowelsIndex: Int = 0\n        ^~~~~~~~~~~\n\
    \        _\n/tmp/tmps3g1rovr.swift:12:9: warning: variable 'vowelsIndex2' was\
    \ never used; consider replacing with '_' or removing it\n    var vowelsIndex2:\
    \ Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:13:9: warning:\
    \ variable 'vowelsIndex3' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex3: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:14:9:\
    \ warning: variable 'vowelsIndex4' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsIndex4: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmps3g1rovr.swift:15:9: warning: variable 'vowelsIndex5' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex5: Int\
    \ = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:16:9: warning:\
    \ variable 'vowelsIndex6' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex6: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:17:9:\
    \ warning: variable 'vowelsIndex7' was never used; consider replacing with '_'\
    \ or removing it\n    var vowelsIndex7: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmps3g1rovr.swift:18:9: warning: variable 'vowelsIndex8' was never\
    \ used; consider replacing with '_' or removing it\n    var vowelsIndex8: Int\
    \ = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:19:9: warning:\
    \ variable 'vowelsIndex9' was never used; consider replacing with '_' or removing\
    \ it\n    var vowelsIndex9: Int = 0\n        ^~~~~~~~~~~~\n        _\n/tmp/tmps3g1rovr.swift:20:9:\
    \ warning: vari"
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelIndex2 = -1\n    var vowelIndex3 = -1\n    var vowelIndex4 = -1\n\
    \    var vowelIndex5 = -1\n    var vowelIndex6 = -1\n    var vowelIndex7 = -1\n\
    \    var vowelIndex8 = -1\n    var vowelIndex9 = -1\n    var vowelIndex10 = -1\n\
    \    var vowelIndex11 = -1\n    var vowelIndex12 = -1\n    var vowelIndex13 =\
    \ -1\n    var vowelIndex14 = -1\n    var vowelIndex15 = -1\n    var vowelIndex16\
    \ = -1\n    var vowelIndex17 = -1\n    var vowelIndex18 = -1\n    var vowelIndex19\
    \ = -1\n    var vowelIndex20 = -1\n    var vowelIndex21 = -1\n    var vowelIndex22\
    \ = -1\n    var vowelIndex23 = -1\n    var vowelIndex24 = -1\n    var vowelIndex25\
    \ = -1\n    var vowelIndex26 = -1\n    var vowelIndex27 = -1\n    var vowelIndex28\
    \ = -1\n    var vowelIndex29 = -1\n    var vowelIndex30 = -1\n    var vowelIndex31\
    \ = -1\n    var vowelIndex32 = -1\n    var vowelIndex33 = -1\n    var vowelIndex34\
    \ = -1\n    var vowelIndex35 = -1\n    var vowelIndex36 = -1\n    var vowelIndex37\
    \ = -1\n    var vowelIndex38 = -1\n    var vowelIndex39 = -1\n    var vowelIndex40\
    \ = -1\n    var vowelIndex41 = -1\n    var vowelIndex42 = -1\n    var vowelIndex43\
    \ = -1\n    var vowelIndex44 = -1\n    var vowelIndex45 = -1\n    var vowelIndex46\
    \ = -1\n    var vowelIndex47 = -1\n    var vowelIndex48 = -1\n    var vowelIndex49\
    \ = -1\n    var vowelIndex50 = -1\n    var vowelIndex51 = -1\n    var vowelIndex52\
    \ = -1\n    var vowelIndex53 = -1\n    var vowelIndex54 = -1\n    var vowelIndex55\
    \ = -1\n    var vowelIndex56 = -1\n    var vowelIndex57 = -1\n    var vowelIndex58\
    \ = -1\n    var vowelIndex59 = -1\n    var vowelIndex60 = -1\n    var vowelIndex61\
    \ = -1\n    var vowelIndex62 = -1\n    var vowelIndex63 = -1\n    var vowelIndex64\
    \ = -1\n    var vowelIndex65 = -1\n    var vowelIndex66 = -1\n    var vowelIndex67\
    \ = -1\n    var vowelIndex68 = -1\n    var vowelIndex69 = -1\n    var vowelIndex70\
    \ = -1\n    var vowelIndex71 = -1\n    var vowelIndex72 = -1\n    var vowelIndex73\
    \ = -1\n    var vowelIndex74 = -1\n    var vowelIndex75 = -1\n    var vowelIndex76\
    \ = -1\n    var vowelIndex77 = -1\n    var vowelIndex78 = -1\n    var vowelIndex79\
    \ = -1\n    var vowelIndex80 = -1\n    var vowelIndex81 = -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmptftqc_ct.swift:9:9: warning: initialization of variable 'vowels'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowels = \"aeiouAEIOU\"\n    ~~~~^~~~~~\n    _\n/tmp/tmptftqc_ct.swift:10:9:\
    \ warning: initialization of variable 'vowelIndex' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmptftqc_ct.swift:11:9: warning: initialization of variable 'vowelIndex2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex2 = -1\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmptftqc_ct.swift:12:9:\
    \ warning: initialization of variable 'vowelIndex3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex3 = -1\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmptftqc_ct.swift:13:9: warning: initialization of variable 'vowelIndex4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex4 = -1\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmptftqc_ct.swift:14:9:\
    \ warning: initialization of variable 'vowelIndex5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex5 = -1\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmptftqc_ct.swift:15:9: warning: initialization of variable 'vowelIndex6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex6 = -1\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmptftqc_ct.swift:16:9:\
    \ warning: initialization of variable 'vowelIndex7' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex7 = -1\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmptftqc_ct.swift:17:9: warning: initialization of variable 'vowelIndex8'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var vowelIndex8 = -1\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmptftqc_ct.swift:18:9:\
    \ warning: initialization of variable 'vowelIndex9' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var vowelIndex9 = -1\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmptftqc_ct.swift:19:9:"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: '/tmp/tmpc3zxh4u1.swift:10:1: error: missing return in global function expected
    to return ''String''

    }

    ^

    '
  stdout: ''
  timestamp: 1660030321
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ word.characters.count\n    var vowelIndex = 0\n    var vowelIndex2 = 0\n   \
    \ var vowelIndex3 = 0\n    var vowelIndex4 = 0\n    var vowelIndex5 = 0\n    var\
    \ vowelIndex6 = 0\n    var vowelIndex7 = 0\n    var vowelIndex8 = 0\n    var vowelIndex9\
    \ = 0\n    var vowelIndex10 = 0\n    var vowelIndex11 = 0\n    var vowelIndex12\
    \ = 0\n    var vowelIndex13 = 0\n    var vowelIndex14 = 0\n    var vowelIndex15\
    \ = 0\n    var vowelIndex16 = 0\n    var vowelIndex17 = 0\n    var vowelIndex18\
    \ = 0\n    var vowelIndex19 = 0\n    var vowelIndex20 = 0\n    var vowelIndex21\
    \ = 0\n    var vowelIndex22 = 0\n    var vowelIndex23 = 0\n    var vowelIndex24\
    \ = 0\n    var vowelIndex25 = 0\n    var vowelIndex26 = 0\n    var vowelIndex27\
    \ = 0\n    var vowelIndex28 = 0\n    var vowelIndex29 = 0\n    var vowelIndex30\
    \ = 0\n    var vowelIndex31 = 0\n    var vowelIndex32 = 0\n    var vowelIndex33\
    \ = 0\n    var vowelIndex34 = 0\n    var vowelIndex35 = 0\n    var vowelIndex36\
    \ = 0\n    var vowelIndex37 = 0\n    var vowelIndex38 = 0\n    var vowelIndex39\
    \ = 0\n    var vowelIndex40 = 0\n    var vowelIndex41 = 0\n    var vowelIndex42\
    \ = 0\n    var vowelIndex43 = 0\n    var vowelIndex44 = 0\n    var vowelIndex45\
    \ = 0\n    var vowelIndex46 = 0\n    var vowelIndex47 = 0\n    var vowelIndex48\
    \ = 0\n    var vowelIndex49 = 0\n    var vowelIndex50 = 0\n    var vowelIndex51\
    \ = 0\n    var vowelIndex52 = 0\n    var vowelIndex53 = 0\n    var vowelIndex54\
    \ = 0\n    var vowelIndex55 = 0\n    var vowelIndex56 = 0\n    var vowelIndex57\
    \ = 0\n    var vowelIndex58 = 0\n    var vowelIndex59 = 0\n    var vowelIndex60\
    \ = 0\n    var vowelIndex61 = 0\n    var vowelIndex62 = 0\n    var vowelIndex63\
    \ = 0\n    var vowelIndex64 = 0\n    var vowelIndex65 = 0\n    var vowelIndex66\
    \ = 0\n    var vowelIndex67 = 0\n    var vowelIndex68 = 0\n    var vowelIndex69\
    \ = 0\n    var vowelIndex70 = 0\n    var vowelIndex71 = 0\n    var vowelIndex72\
    \ = 0\n    var vowelIndex73 = 0\n    var vowelIndex74 = 0\n    var vowelIndex75\
    \ = 0\n    var vowelIndex76 = 0\n    var vowelIndex77 = 0\n    var vowelIndex78\
    \ = 0\n    var vowelIndex79 = 0\n    var vowelIndex80 = 0\n    var vowelIndex81\
    \ = 0\n    var vowelIndex82 = 0\n    var vowelIndex\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpz44__5ne.swift:10:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = word.characters.count\n         \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpz44__5ne.swift:93:9: error: type annotation missing in pattern\n\
    \    var vowelIndex\n        ^\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = \"aeiouAEIOU\"\n    var vowelsCount =\
    \ vowels.characters.count\n    var vowelsIndex = 0\n    var vowelsIndex2 = vowelsIndex\
    \ + vowelsCount\n    var vowelsIndex3 = vowelsIndex2 + vowelsCount\n    var vowelsIndex4\
    \ = vowelsIndex3 + vowelsCount\n    var vowelsIndex5 = vowelsIndex4 + vowelsCount\n\
    \    var vowelsIndex6 = vowelsIndex5 + vowelsCount\n    var vowelsIndex7 = vowelsIndex6\
    \ + vowelsCount\n    var vowelsIndex8 = vowelsIndex7 + vowelsCount\n    var vowelsIndex9\
    \ = vowelsIndex8 + vowelsCount\n    var vowelsIndex10 = vowelsIndex9 + vowelsCount\n\
    \    var vowelsIndex11 = vowelsIndex10 + vowelsCount\n    var vowelsIndex12 =\
    \ vowelsIndex11 + vowelsCount\n    var vowelsIndex13 = vowelsIndex12 + vowelsCount\n\
    \    var vowelsIndex14 = vowelsIndex13 + vowelsCount\n    var vowelsIndex15 =\
    \ vowelsIndex14 + vowelsCount\n    var vowelsIndex16 = vowelsIndex15 + vowelsCount\n\
    \    var vowelsIndex17 = vowelsIndex16 + vowelsCount\n    var vowelsIndex18 =\
    \ vowelsIndex17 + vowelsCount\n    var vowelsIndex19 = vowelsIndex18 + vowelsCount\n\
    \    var vowelsIndex20 = vowelsIndex19 + vowelsCount\n    var vowelsIndex21 =\
    \ vowelsIndex20 + vowelsCount\n    var vowelsIndex22 = vowelsIndex21 + vowelsCount\n\
    \    var vowelsIndex23 = vowelsIndex22 + vowelsCount\n    var vowelsIndex24 =\
    \ vowelsIndex23 + vowelsCount\n    var vowelsIndex25 = vowelsIndex24 + vowelsCount\n\
    \    var vowelsIndex26 = vowelsIndex25 + vowelsCount\n    var vowelsIndex27 =\
    \ vowelsIndex26 + vowelsCount\n    var vowelsIndex28 = vowelsIndex27 + vowelsCount\n\
    \    var vowelsIndex29 = vowelsIndex28 + vowelsCount\n    var vowelsIndex30 =\
    \ vowelsIndex29 + vowelsCount\n    var vowelsIndex31 = vowelsIndex30 + vowelsCount\n\
    \    var vowelsIndex32 = vowelsIndex31 + vowelsCount\n    var vowelsIndex33 =\
    \ vowelsIndex32 + vowelsCount\n    var vowelsIndex34 = vowelsIndex33 + vowelsCount\n\
    \    var vowelsIndex35 = vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpto_3vr0q.swift:10:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var vowelsCount = vowels.characters.count\n       \
    \                      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpto_3vr0q.swift:45:25: error: cannot find 'vowel' in scope\n    var\
    \ vowelsIndex35 = vowel\n                        ^~~~~\n"
  stdout: ''
  timestamp: 1660030322
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowelsCount = word.characters.filter({ vowels.contains($0) }).count\n\
    \    if vowelsCount == 0 {\n        return \"\"\n    }\n    var vowelIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).firstIndex(of: vowels.last!)\n    if vowelIndex == word.characters.count\
    \ - 1 {\n        return \"\"\n    }\n    return word.substring(vowelIndex + 1,\
    \ word.characters.count - vowelIndex - 1)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp47krly9r.swift:10:64: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String'\n    var vowelsCount =\
    \ word.characters.filter({ vowels.contains($0) }).count\n                    \
    \                                           ^\n/tmp/tmp47krly9r.swift:14:107:\
    \ error: cannot convert value of type 'String' to expected argument type 'String.Element'\
    \ (aka 'Character')\n    var vowelIndex = word.characters.reversed().filter({\
    \ vowels.contains($0) }).firstIndex(of: vowels.last!)\n                      \
    \                                                                            \
    \        ^\n/tmp/tmp47krly9r.swift:14:74: error: cannot convert value of type\
    \ 'String.Element' (aka 'Character') to expected argument type 'String'\n    var\
    \ vowelIndex = word.characters.reversed().filter({ vowels.contains($0) }).firstIndex(of:\
    \ vowels.last!)\n                                                            \
    \             ^\n/tmp/tmp47krly9r.swift:18:17: error: value of type 'String' has\
    \ no member 'substring'\n    return word.substring(vowelIndex + 1, word.characters.count\
    \ - vowelIndex - 1)\n           ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660030323
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var vowelIndex = 0\n\
    \    var vowelIndex2 = word.count\n    var vowelIndex3 = word.count\n    var vowelIndex4\
    \ = word.count\n    var vowelIndex5 = word.count\n    var vowelIndex6 = word.count\n\
    \    var vowelIndex7 = word.count\n    var vowelIndex8 = word.count\n    var vowelIndex9\
    \ = word.count\n    var vowelIndex10 = word.count\n    var vowelIndex11 = word.count\n\
    \    var vowelIndex12 = word.count\n    var vowelIndex13 = word.count\n    var\
    \ vowelIndex14 = word.count\n    var vowelIndex15 = word.count\n    var vowelIndex16\
    \ = word.count\n    var vowelIndex17 = word.count\n    var vowelIndex18 = word.count\n\
    \    var vowelIndex19 = word.count\n    var vowelIndex20 = word.count\n    var\
    \ vowelIndex21 = word.count\n    var vowelIndex22 = word.count\n    var vowelIndex23\
    \ = word.count\n    var vowelIndex24 = word.count\n    var vowelIndex25 = word.count\n\
    \    var vowelIndex26 = word.count\n    var vowelIndex27 = word.count\n    var\
    \ vowelIndex28 = word.count\n    var vowelIndex29 = word.count\n    var vowelIndex30\
    \ = word.count\n    var vowelIndex31 = word.count\n    var vowelIndex32 = word.count\n\
    \    var vowelIndex33 = word.count\n    var vowelIndex34 = word.count\n    var\
    \ vowelIndex35 = word.count\n    var vowelIndex36 = word.count\n    var vowelIndex37\
    \ = word.count\n    var vowelIndex38 = word.count\n    var vowelIndex39 = word.count\n\
    \    var vowelIndex40 = word.count\n    var vowelIndex41 = word.count\n    var\
    \ vowelIndex42 = word.count\n    var vowelIndex43 = word.count\n    var vowelIndex44\
    \ = word.count\n    var vowelIndex45 = word.count\n    var vowelIndex46 = word.count\n\
    \    var vowelIndex47 = word.count\n    var vowelIndex48 = word.count\n    var\
    \ vowelIndex49 = word.count\n    var vowelIndex50 = word.count\n    var vowelIndex51\
    \ = word.count\n    var vowelIndex52 = word.count\n    var vowelIndex53 = word.count\n\
    \    var vowelIndex54 = word.count\n    var vowelIndex55 = word.count\n    var\
    \ vowelIndex56 = word.count\n    var vowelIndex57 = word.count\n    var vowelIndex58\
    \ = word.count\n    var vowelIndex59 = word.count\n    var vowelIndex60 = word.count\n\
    \    var vowelIndex61 = word.count\n    var vowelIndex62 = word.count\n    var\
    \ vowelIndex63 = word.count\n    var vowelIndex64 = word.count\n    var vowelIndex65\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpkn5o_urz.swift:74:9: error: type annotation missing in pattern\n\
    \    var vowelIndex65\n        ^\n"
  stdout: ''
  timestamp: 1660030321
