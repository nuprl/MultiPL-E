language: swift
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0.0\n    var sum2: Double = 0.0\n\
    \    for number in numbers {\n        sum += number\n        sum2 += number *\
    \ number\n    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8nvylo52.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return\
    \ Double(numbers.map { abs($0 - mean) }.sum) / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpho87ujb3.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n/tmp/tmpho87ujb3.swift:9:50:\
    \ error: value of type '[Double]' has no member 'sum'\n    return Double(numbers.map\
    \ { abs($0 - mean) }.sum) / Double(numbers.count)\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum\
    \ += n * n\n    }\n    return Double(sum) / Double(numbers.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpc252y63o/tmpc252y63o.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a0f53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a0c4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a0c4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a0c497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc252y63o                        0x0000556329332563 <unavailable> + 5475

    5    libc.so.6                          0x00002b72a113f460 __libc_start_main +
    245

    6    tmpc252y63o                        0x00005563293321b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum\
    \ += math.pow((n - mean), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcf_zs5cn.swift:10:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow((n - mean), 2)\n               ^~~~\n/tmp/tmpcf_zs5cn.swift:10:30:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow((n - mean), 2)\n\
    \                             ^~~~\n/tmp/tmpcf_zs5cn.swift:12:12: error: cannot\
    \ find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n  \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += math.pow(number - mean(), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprctmn583.swift:10:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow(number - mean(), 2)\n               ^~~~\n/tmp/tmprctmn583.swift:10:34:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow(number - mean(),\
    \ 2)\n                                 ^~~~\n/tmp/tmprctmn583.swift:12:12: error:\
    \ cannot find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n\
    \           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_qg0gpqu.swift:9:43: error: value of type '[Double]' has no member\
    \ 'mean'\n    return numbers.map { abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    var sumSquares = 0.0\n    for\
    \ number in numbers {\n        sum += number\n        sumSquares += number * number\n\
    \    }\n    return sqrt(sumSquares / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpyzibqbtn.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sumSquares / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_qg0gpqu.swift:9:43: error: value of type '[Double]' has no member\
    \ 'mean'\n    return numbers.map { abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return mean(absolute_deviation(numbers))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmhfauydn.swift:8:12: error: cannot find 'mean' in scope\n    return\
    \ mean(absolute_deviation(numbers))\n           ^~~~\n/tmp/tmpmhfauydn.swift:8:17:\
    \ error: cannot find 'absolute_deviation' in scope\n    return mean(absolute_deviation(numbers))\n\
    \                ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for x in numbers {\n        sum\
    \ += abs(x - mean(x))\n    }\n    return sum / Double(numbers.count)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprcl0lpts.swift:10:24: error: cannot find 'mean' in scope\n    \
    \    sum += abs(x - mean(x))\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for x in numbers {\n        sum\
    \ += abs(x - mean)\n    }\n    return sum / Double(numbers.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4g0rv6cv.swift:10:24: error: cannot find 'mean' in scope\n    \
    \    sum += abs(x - mean)\n                       ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    var sumOfSquares = 0.0\n    for\
    \ number in numbers {\n        sum += number\n        sumOfSquares += (number\
    \ - Double(number)) / Double(numbers.count)\n    }\n    return sumOfSquares /\
    \ Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmph0a_0vu0/tmph0a_0vu0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abd5a009c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abd59d00b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abd59d00988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abd59cff7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph0a_0vu0                        0x000055bb813c7563 <unavailable> + 5475

    5    libc.so.6                          0x00002abd5a1f5460 __libc_start_main +
    245

    6    tmph0a_0vu0                        0x000055bb813c71b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    for number in numbers {\n\
    \        sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65g8oy6u.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    var sumSquares = 0.0\n    for\
    \ number in numbers {\n        sum += number\n        sumSquares += number * number\n\
    \    }\n    return Double(sumSquares) / Double(numbers.count)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp_of_in43/tmp_of_in43.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc5613bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc55e32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc55e32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc55e317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_of_in43                        0x000055d2f539d563 <unavailable> + 5475

    5    libc.so.6                          0x00002abc56327460 __libc_start_main +
    245

    6    tmp_of_in43                        0x000055d2f539d1b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum\
    \ += n * n\n    }\n    return Double(sum / Double(numbers.count))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpfrr_51gs/tmpfrr_51gs.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f29baac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f298a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f298a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f298a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrr_51gs                        0x000055be80735563 <unavailable> + 5475

    5    libc.so.6                          0x00002b5f29d96460 __libc_start_main +
    245

    6    tmpfrr_51gs                        0x000055be807351b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.map { abs($0 - mean) }).sum\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_zmp91fc.swift:8:42: error: cannot find 'mean' in scope\n    return\
    \ Double(numbers.map { abs($0 - mean) }).sum / Double(numbers.count)\n       \
    \                                  ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum\
    \ += n * n\n    }\n    return Double(sum / Double(numbers.count))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpfrr_51gs/tmpfrr_51gs.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f29baac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f298a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f298a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f298a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrr_51gs                        0x000055be80735563 <unavailable> + 5475

    5    libc.so.6                          0x00002b5f29d96460 __libc_start_main +
    245

    6    tmpfrr_51gs                        0x000055be807351b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp686275h6.swift:8:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp686275h6.swift:8:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return\
    \ Double(numbers.reduce(0, combine: +) - mean)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp0lfmafrr.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n/tmp/tmp0lfmafrr.swift:9:33:\
    \ error: extraneous argument label 'combine:' in call\n    return Double(numbers.reduce(0,\
    \ combine: +) - mean)\n                                ^   ~~~~~~~~~\n       \
    \                             \n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.reduce(0, +) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw0vfullm.swift:8:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdn2n0nzh.swift:8:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum\
    \ += n * n\n    }\n    return Double(sum) / Double(numbers.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpc252y63o/tmpc252y63o.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a0f53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a0c4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a0c4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a0c497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc252y63o                        0x0000556329332563 <unavailable> + 5475

    5    libc.so.6                          0x00002b72a113f460 __libc_start_main +
    245

    6    tmpc252y63o                        0x00005563293321b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp686275h6.swift:8:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0, { $0 + Double($1)\
    \ }) / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp0xc6pknz/tmp0xc6pknz.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b027bcb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b027b9aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b027b9aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b027b9a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0xc6pknz                        0x00005611e1996473 <unavailable> + 5235

    5    libc.so.6                          0x00002b027be9f460 __libc_start_main +
    245

    6    tmp0xc6pknz                        0x00005611e19960c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009142
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp686275h6.swift:8:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n \
    \   for number in numbers {\n        sum += number\n        sum2 += number * number\n\
    \    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6li7hia_.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n \
    \   for number in numbers {\n        sum += number\n        sum2 += number * number\n\
    \    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6li7hia_.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return mean(absolute_deviation(numbers))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpmhfauydn.swift:8:12: error: cannot find 'mean' in scope\n    return\
    \ mean(absolute_deviation(numbers))\n           ^~~~\n/tmp/tmpmhfauydn.swift:8:17:\
    \ error: cannot find 'absolute_deviation' in scope\n    return mean(absolute_deviation(numbers))\n\
    \                ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum\
    \ += n * n\n    }\n    return Double(sum) / Double(numbers.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpc252y63o/tmpc252y63o.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a0f53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a0c4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a0c4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a0c497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc252y63o                        0x0000556329332563 <unavailable> + 5475

    5    libc.so.6                          0x00002b72a113f460 __libc_start_main +
    245

    6    tmpc252y63o                        0x00005563293321b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    for number in numbers {\n\
    \        sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65g8oy6u.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_qg0gpqu.swift:9:43: error: value of type '[Double]' has no member\
    \ 'mean'\n    return numbers.map { abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_qg0gpqu.swift:9:43: error: value of type '[Double]' has no member\
    \ 'mean'\n    return numbers.map { abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return statistics.meanAbsoluteDeviation(numbers)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpw0vfullm.swift:8:12: error: cannot find 'statistics' in scope\n\
    \    return statistics.meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    for number in numbers {\n\
    \        sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65g8oy6u.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n \
    \   for number in numbers {\n        sum += number\n        sum2 += number * number\n\
    \    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6li7hia_.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    var sumOfSquares = 0.0\n    for\
    \ number in numbers {\n        sum += number\n        sumOfSquares += number *\
    \ number\n    }\n    return sqrt(sumOfSquares / Double(numbers.count))\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpy8uh6lmf.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sumOfSquares / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdn2n0nzh.swift:8:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp686275h6.swift:8:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    var sum2 = 0.0\n    var n = numbers.count\n\
    \    for i in 0..<n {\n        sum += numbers[i]\n        sum2 += numbers[i] *\
    \ numbers[i]\n    }\n    return Double(sum / Double(n)) - (sum2 / Double(n))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpko9v4a53/tmpko9v4a53.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b816acd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b816a9d0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b816a9d0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b816a9cf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpko9v4a53                        0x000055e6cbf8d5d3 <unavailable> + 5587

    5    libc.so.6                          0x00002b816aec5460 __libc_start_main +
    245

    6    tmpko9v4a53                        0x000055e6cbf8d229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0.0\n    var sum2: Double = 0.0\n\
    \    for number in numbers {\n        sum += number\n        sum2 += number *\
    \ number\n    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8nvylo52.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map{ abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpzrf0eegy.swift:9:42: error: value of type '[Double]' has no member\
    \ 'mean'\n    return numbers.map{ abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, combine: +)\n    return\
    \ numbers.map { abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpn0y9xwg0.swift:8:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +)\n                    \
    \         ^   ~~~~~~~~~\n                                 \n/tmp/tmpn0y9xwg0.swift:9:43:\
    \ error: value of type '[Double]' has no member 'mean'\n    return numbers.map\
    \ { abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum\
    \ += n * n\n    }\n    return Double(sum / Double(numbers.count))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpfrr_51gs/tmpfrr_51gs.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f29baac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f298a1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f298a1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f298a07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfrr_51gs                        0x000055be80735563 <unavailable> + 5475

    5    libc.so.6                          0x00002b5f29d96460 __libc_start_main +
    245

    6    tmpfrr_51gs                        0x000055be807351b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum\
    \ += n * n\n    }\n    return Double(sum) / Double(numbers.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmpc252y63o/tmpc252y63o.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b72a0f53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b72a0c4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b72a0c4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72a0c497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc252y63o                        0x0000556329332563 <unavailable> + 5475

    5    libc.so.6                          0x00002b72a113f460 __libc_start_main +
    245

    6    tmpc252y63o                        0x00005563293321b9 <unavailable> + 4537

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_qg0gpqu.swift:9:43: error: value of type '[Double]' has no member\
    \ 'mean'\n    return numbers.map { abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n \
    \   for number in numbers {\n        sum += number\n        sum2 += number * number\n\
    \    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6li7hia_.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdn2n0nzh.swift:8:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdn2n0nzh.swift:8:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n \
    \   for number in numbers {\n        sum += number\n        sum2 += number * number\n\
    \    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6li7hia_.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.reduce(0, { $0 + abs($1 - mean) }) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += math.pow(number - mean(), 2)\n    }\n    return math.sqrt(sum / numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpqd_fanb2.swift:10:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow(number - mean(), 2)\n               ^~~~\n/tmp/tmpqd_fanb2.swift:10:34:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow(number - mean(),\
    \ 2)\n                                 ^~~~\n/tmp/tmpqd_fanb2.swift:12:12: error:\
    \ cannot find 'math' in scope\n    return math.sqrt(sum / numbers.count)\n   \
    \        ^~~~\n/tmp/tmpqd_fanb2.swift:12:26: error: binary operator '/' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    return math.sqrt(sum\
    \ / numbers.count)\n                     ~~~ ^ ~~~~~~~~~~~~~\n/tmp/tmpqd_fanb2.swift:12:26:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    return math.sqrt(sum / numbers.count)\n  \
    \                       ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.mean()\n    return numbers.map\
    \ { abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpd6yehoxf.swift:8:24: error: value of type '[Double]' has no member\
    \ 'mean'\n    let mean = numbers.mean()\n               ~~~~~~~ ^~~~\n/tmp/tmpd6yehoxf.swift:9:43:\
    \ error: value of type '[Double]' has no member 'mean'\n    return numbers.map\
    \ { abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: -4
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return Double(numbers.reduce(0.0, +) / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: Exception
  stderr: 'tmp13057tu9/tmp13057tu9.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c845ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c8151b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c8151988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c81507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13057tu9                        0x000055abdaa4a473 <unavailable> + 5235

    5    libc.so.6                          0x00002b30c8646460 __libc_start_main +
    245

    6    tmp13057tu9                        0x000055abdaa4a0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_qg0gpqu.swift:9:43: error: value of type '[Double]' has no member\
    \ 'mean'\n    return numbers.map { abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n \
    \   for number in numbers {\n        sum += number\n        sum2 += number * number\n\
    \    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6li7hia_.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp_qg0gpqu.swift:9:43: error: value of type '[Double]' has no member\
    \ 'mean'\n    return numbers.map { abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map{ abs($0 - mean) }.mean()\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpzrf0eegy.swift:9:42: error: value of type '[Double]' has no member\
    \ 'mean'\n    return numbers.map{ abs($0 - mean) }.mean()\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    for number in numbers {\n\
    \        sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65g8oy6u.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum\
    \ += math.pow((n - mean), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcf_zs5cn.swift:10:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow((n - mean), 2)\n               ^~~~\n/tmp/tmpcf_zs5cn.swift:10:30:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow((n - mean), 2)\n\
    \                             ^~~~\n/tmp/tmpcf_zs5cn.swift:12:12: error: cannot\
    \ find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n  \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for n in numbers {\n        sum\
    \ += math.pow((n - mean), 2)\n    }\n    return math.sqrt(sum / Double(numbers.count))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpcf_zs5cn.swift:10:16: error: cannot find 'math' in scope\n    \
    \    sum += math.pow((n - mean), 2)\n               ^~~~\n/tmp/tmpcf_zs5cn.swift:10:30:\
    \ error: cannot find 'mean' in scope\n        sum += math.pow((n - mean), 2)\n\
    \                             ^~~~\n/tmp/tmpcf_zs5cn.swift:12:12: error: cannot\
    \ find 'math' in scope\n    return math.sqrt(sum / Double(numbers.count))\n  \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    for number in numbers {\n\
    \        sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp65g8oy6u.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return meanAbsoluteDeviation(numbers)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpdn2n0nzh.swift:8:12: error: cannot find 'meanAbsoluteDeviation'\
    \ in scope\n    return meanAbsoluteDeviation(numbers)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0.0\n    var sum2: Double = 0.0\n\
    \    for number in numbers {\n        sum += number\n        sum2 += number *\
    \ number\n    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8nvylo52.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    var sumSquares = 0.0\n    for\
    \ number in numbers {\n        sum += number\n        sumSquares += number * number\n\
    \    }\n    return sqrt(sumSquares / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpyzibqbtn.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sumSquares / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    for number in numbers {\n    \
    \    sum += abs(number - mean)\n    }\n    return sum / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpk61ius0x.swift:10:29: error: cannot find 'mean' in scope\n    \
    \    sum += abs(number - mean)\n                            ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n \
    \   for number in numbers {\n        sum += number\n        sum2 += number * number\n\
    \    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6li7hia_.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0\n    var sum2: Double = 0\n \
    \   for number in numbers {\n        sum += number\n        sum2 += number * number\n\
    \    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6li7hia_.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum: Double = 0.0\n    var sum2: Double = 0.0\n\
    \    for number in numbers {\n        sum += number\n        sum2 += number *\
    \ number\n    }\n    return sqrt(sum2 / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp8nvylo52.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sum2 / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpiin_ri_u.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpiin_ri_u.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpiin_ri_u.swift:9:12:\
    \ error: cannot find 'meanAbsoluteDeviation' in scope\n    return meanAbsoluteDeviation(numbers,\
    \ mean)\n           ^~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    return ma(numbers)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp686275h6.swift:8:12: error: cannot find 'ma' in scope\n    return\
    \ ma(numbers)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 0
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = numbers.reduce(0, +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.reduce(0, +) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    var sum = 0.0\n    var sumSquares = 0.0\n    for\
    \ number in numbers {\n        sum += number\n        sumSquares += number * number\n\
    \    }\n    return sqrt(sumSquares / Double(numbers.count))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpyzibqbtn.swift:14:12: error: cannot find 'sqrt' in scope\n    return\
    \ sqrt(sumSquares / Double(numbers.count))\n           ^~~~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return ma(numbers,\
    \ mean)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpp50ujdp5.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpp50ujdp5.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n/tmp/tmpp50ujdp5.swift:9:12:\
    \ error: cannot find 'ma' in scope\n    return ma(numbers, mean)\n           ^~\n"
  stdout: ''
  timestamp: 1660009141
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\nfunc mean_absolute_deviation(numbers:\
    \ [Double]) -> Double {\n    let mean = mean(numbers)\n    return mean(numbers.map\
    \ { abs($0 - mean) })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp6tdysxp0.swift:8:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp6tdysxp0.swift:8:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1660009141
