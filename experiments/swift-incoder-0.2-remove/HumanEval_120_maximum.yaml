name: HumanEval_120_maximum
language: swift
prompt: "\n/// Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n///\
  \ Example 2:\n/// Example 3:\n/// Note:\n/// 1. The length of the array will be\
  \ in the range of [1, 1000].\n/// 2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr: [Int], k: Int)\
  \ -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(maximum(arr: [-3, -4, 5], k: 3) == [-4,\
  \ -3, 5])\nassert(maximum(arr: [4, -4, 4], k: 2) == [4, 4])\nassert(maximum(arr:\
  \ [-3, 2, 1, 2, -1, -2, 1], k: 1) == [2])\nassert(maximum(arr: [123, -123, 20, 0,\
  \ 1, 2, -3], k: 3) == [2, 20, 123])\nassert(maximum(arr: [-123, 20, 0, 1, 2, -3],\
  \ k: 4) == [0, 1, 2, 20])\nassert(maximum(arr: [5, 15, 0, 3, -13, -8, 0], k: 7)\
  \ == [-13, -8, 0, 0, 3, 5, 15])\nassert(maximum(arr: [-1, 0, 2, 5, 3, -10], k: 2)\
  \ == [3, 5])\nassert(maximum(arr: [1, 0, 5, -7], k: 1) == [5])\nassert(maximum(arr:\
  \ [4, -4], k: 2) == [-4, 4])\nassert(maximum(arr: [-10, 10], k: 2) == [-10, 10])\n\
  assert(maximum(arr: [1, 2, 3, -23, 243, -400, 0], k: 0) == [] as [Int])"
completions: ["    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    var result = Array(repeating: 0, count: k)\n    var max =\
    \ 0\n    for x in arr {\n        if x > max {\n            max = x\n        }\n\
    \    }\n    for x in arr {\n        if x == max {\n            result[k-1] = x\n\
    \            k--\n        }\n    }\n    return result", "    precondition(k <=\
    \ arr.count, \"k should be less than or equal to the length of arr\")\n    var\
    \ max = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n    for index in\
    \ 0..<arr.count {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex]\
    \ = arr[index]\n            maxIndex = index\n        }\n    }\n    return max",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    for i in 0..<k {\n       \
    \ max[i] = max(arr[i], max[i])\n    }\n    return max", '    return maximumHelper(arr,
    k)', '    return maximumHelper(arr, k, 0)', '    return maximumHelper(arr, k)',
  '    return maximumHelper(arr, k)', "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var result = [Int]()\n    var max\
    \ = 0\n    for x in arr {\n        if x > max {\n            max = x\n       \
    \ }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x < max {\n            result.append(x)\n\
    \        }\n    }\n    return result", '    return maximumHelper(arr, k)', '    return
    maximum3(arr, k)', '    return maximum3(arr, k)', "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var result = [Int]()\n\
    \    var max = 0\n    for x in arr {\n        if x > max {\n            max =\
    \ x\n        }\n    }\n    for x in arr {\n        if x == max {\n           \
    \ result.append(x)\n        }\n    }\n    return result", '    return maximumHelper(arr,
    k)', "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    \n    var max = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n \
    \   \n    for index in 0..<arr.count {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    \n    return max", '    return maximumHelper(arr, k, 0)',
  '    return sort(arr, k)', "    precondition(k <= arr.count, \"k must be less than\
    \ or equal to the length of arr\")\n    \n    var max = [Int]()\n    \n    for\
    \ x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x > max[1] {\n            max[1] = x\n\
    \        }\n    }\n    \n    for x in arr {\n        if x > max[2] {\n       \
    \     max[2] = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[3]\
    \ {\n            max[3] = x\n        }\n    }\n    \n    for x in arr {\n    \
    \    if x > max[4] {\n            max[4] = x\n        }\n    }\n    \n    for\
    \ x in arr {\n        if x > max[5] {\n            max[5] = x\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x > max[6] {\n            max[6] = x\n\
    \        }\n    }\n    \n    for x in arr {\n        if x > max[7] {\n       \
    \     max[7] = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[8]\
    \ {\n            max[8] = x\n        }\n    }\n    \n    for x in arr {\n    \
    \    if x > max[9] {\n            max[9] = x\n        }\n    }\n    \n    for\
    \ x in arr {\n        if x > max[10] {\n            max[10] = x\n        }\n \
    \   }\n    \n    for x in arr {\n        if x > max[11] {\n            max[11]\
    \ = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[12] {\n\
    \            max[12] = x\n        }\n    }\n    \n    for x in arr {\n       \
    \ if x > max[13] {\n            max[13] = x\n        }\n    }\n    \n    for x\
    \ in arr {\n        if x > max[14] {\n            max[14] = x\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x > max[15] {\n            max[15] =\
    \ x\n        }\n    }\n    \n    for x in arr {\n        if x > max[16] {\n  \
    \          max[16] = x\n        }\n    }\n    \n    for x in arr {\n        if\
    \ x > max[17] {\n            max[17] = x\n        }\n    }\n    \n    for x in\
    \ arr {\n        if x > max[18] {\n            max[18] = x\n        }\n    }\n\
    \    \n    for x in arr {\n        if x > max[19] {\n            max[19] = x\n\
    \        }\n    }\n    \n    for x in arr {\n        if x > max[20] {\n      \
    \      max[20] = x\n        }\n    }\n    \n    for x in arr {\n        if x >\
    \ max", '    return maximum3(arr, k)', '    return maximumSubArray(arr, k)', '    return
    maximumHelper(arr, k)', "    \n    // write your code here\n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<k {\n        if arr[i] > max[i] {\n   \
    \         max[i] = arr[i]\n        }\n    }\n    \n    return max", '    return
    maximum3(arr, k)', '    return maximumHelper(arr, k)', '    return maximumByOrdered(arr,
    k)', '    return maximumHelper(arr, k, 0)', "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var result = Array(repeating:\
    \ 0, count: k)\n    var max = 0\n    for el in arr {\n        if max < el {\n\
    \            max = el\n        }\n    }\n    for el in arr {\n        if max <\
    \ el {\n            result[result.count - 1] = el\n        }\n    }\n    return\
    \ result", "    \n    var result = Array<Int>()\n    \n    if arr.count < k {\n\
    \        return arr\n    }\n    \n    if k == 1 {\n        result = arr\n    }\
    \ else {\n        var max = 0\n        var maxIndex = 0\n        \n        for\
    \ i in 0..<k {\n            if arr[i] > max {\n                max = arr[i]\n\
    \                maxIndex = i\n            }\n        }\n        \n        for\
    \ i in 0..<k {\n            if arr[i] > max {\n                result[maxIndex]\
    \ = arr[i]\n                maxIndex += 1\n            }\n        }\n    }\n \
    \   \n    return result", '    return maximumHelper(arr, k, 0)', '    return maximumHelper(arr,
    k)', '    return maximumHelper(arr, k, 0)', '    return maximumHelper(arr, k,
    0)', '    return maximumHelper(arr, k)', '    return Array(arr).sorted().prefix(k)',
  '    return maximum3(arr, k)', "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n\
    \    var maxIndex = 0\n    for index in 0..<k {\n        if arr[index] > max[index]\
    \ {\n            maxIndex = index\n            max = [Int](repeating: arr[index],\
    \ count: k)\n        }\n    }\n    return max", '    return maximum3(arr, k)',
  '    return maximumHelper(arr, k, 0)', "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var result = Array<Int>(repeating:\
    \ 0, count: k)\n    for index in 0..<k {\n        result[index] = max(arr[index],\
    \ result[index])\n    }\n    return result", '    return maximumHelper(arr, k)',
  "    \n    let result = Array(repeating: 0, count: k)\n    \n    for i in 0..<arr.count\
    \ {\n        result[i] = max(arr[i], result[i])\n    }\n    \n    return result",
  "    precondition(k <= arr.count, \"k should be less than or equal to the length\
    \ of arr\")\n    var max = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n\
    \    for index in 0..<arr.count {\n        if arr[index] > max[maxIndex] {\n \
    \           max[maxIndex] = arr[index]\n            maxIndex = index\n       \
    \ }\n    }\n    return max", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex = 0\n\
    \    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n         \
    \   max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n    }\n\
    \    return max", "    precondition(k <= arr.count, \"k should be less than or\
    \ equal to arr.count\")\n    var max = [Int](repeating: 0, count: k)\n    var\
    \ maxIndex = 0\n    for index in 0..<arr.count {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var result = arr\n    for _ in 0..k-1\
    \ {\n        result = result.maxElement()\n    }\n    return result", "    \n\
    \    // write your code here\n    \n    return arr", "    precondition(k <= arr.count,\
    \ \"k must be less than or equal to arr.count\")\n    \n    var max = [Int]()\n\
    \    var maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] >\
    \ max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    \n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max", "    precondition(k <= arr.count, \"\
    k must be less than or equal to arr.count\")\n    \n    var max = [Int]()\n  \
    \  for x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n\
    \    }\n    for x in arr {\n        if x > max[1] {\n            max[1] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[2] {\n            max[2]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[3] {\n       \
    \     max[3] = x\n        }\n    }\n    for x in arr {\n        if x > max[4]\
    \ {\n            max[4] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[5] {\n            max[5] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[6] {\n            max[6] = x\n        }\n    }\n    for x\
    \ in arr {\n        if x > max[7] {\n            max[7] = x\n        }\n    }\n\
    \    for x in arr {\n        if x > max[8] {\n            max[8] = x\n       \
    \ }\n    }\n    for x in arr {\n        if x > max[9] {\n            max[9] =\
    \ x\n        }\n    }\n    for x in arr {\n        if x > max[10] {\n        \
    \    max[10] = x\n        }\n    }\n    for x in arr {\n        if x > max[11]\
    \ {\n            max[11] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[12] {\n            max[12] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[13] {\n            max[13] = x\n        }\n    }\n    for\
    \ x in arr {\n        if x > max[14] {\n            max[14] = x\n        }\n \
    \   }\n    for x in arr {\n        if x > max[15] {\n            max[15] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[16] {\n            max[16]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[17] {\n      \
    \      max[17] = x\n        }\n    }\n    for x in arr {\n        if x > max[18]\
    \ {\n            max[18] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[19] {\n            max[19] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[20] {\n            max[20] = x\n        }\n    }\n    for\
    \ x in arr {\n        if x > max[21] {\n            max[21] = x\n        }\n \
    \   }\n    for x in arr {\n        if x > max[22] {\n            max[22] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[", '    return merge(maximumHelper(arr,
    k), maximumHelper(arr, k + 1))', '    return merge(merge(arr[0..<k], arr[k..<arr.count]),
    arr[arr.count..<k])', "    \n    // write your code here\n    \n    return arr",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for index in 0..<k\
    \ {\n        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \            maxIndex = index\n        }\n    }\n    \n    return max", '    return
    maximumHelper(arr, k, 0)', "    precondition(k <= arr.count, \"k must be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0, count:\
    \ k)\n    var maxIndex = 0\n    \n    for i in 0..<arr.count {\n        if arr[i]\
    \ > max[maxIndex] {\n            max[maxIndex] = arr[i]\n            maxIndex\
    \ = maxIndex + 1\n        }\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int]()\n    var maxIndex = 0\n    for index in 0..<k {\n        if arr[index]\
    \ > max[maxIndex] {\n            maxIndex = index\n        }\n    }\n    for index\
    \ in 0..<k {\n        max[index] = arr[index]\n    }\n    for index in 0..<k {\n\
    \        if arr[index] > max[maxIndex] {\n            max[maxIndex] = arr[index]\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n   \
    \         max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n\
    \    }\n    return max", "    \n    // 1. write your code here\n    \n    return\
    \ arr", '    return maximumHelper(arr, k)', "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var result = [Int](repeating:\
    \ 0, count: k)\n    var max = 0\n    for x in arr {\n        if x > max {\n  \
    \          max = x\n        }\n    }\n    for x in arr {\n        if x == max\
    \ {\n            result[x - max] = x\n        }\n    }\n    return result", '    return
    merge(arr, k, arr.maxIndex({ $0 > $1 }))', '    return merge(arr, 0, arr.count,
    k)', "    \n    var max = [Int]()\n    \n    for x in arr {\n        if x > max[0]\
    \ {\n            max[0] = x\n        }\n    }\n    \n    for x in arr {\n    \
    \    if x > max[1] {\n            max[1] = x\n        }\n    }\n    \n    for\
    \ x in arr {\n        if x > max[2] {\n            max[2] = x\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x > max[3] {\n            max[3] = x\n\
    \        }\n    }\n    \n    for x in arr {\n        if x > max[4] {\n       \
    \     max[4] = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[5]\
    \ {\n            max[5] = x\n        }\n    }\n    \n    for x in arr {\n    \
    \    if x > max[6] {\n            max[6] = x\n        }\n    }\n    \n    for\
    \ x in arr {\n        if x > max[7] {\n            max[7] = x\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x > max[8] {\n            max[8] = x\n\
    \        }\n    }\n    \n    for x in arr {\n        if x > max[9] {\n       \
    \     max[9] = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[10]\
    \ {\n            max[10] = x\n        }\n    }\n    \n    for x in arr {\n   \
    \     if x > max[11] {\n            max[11] = x\n        }\n    }\n    \n    for\
    \ x in arr {\n        if x > max[12] {\n            max[12] = x\n        }\n \
    \   }\n    \n    for x in arr {\n        if x > max[13] {\n            max[13]\
    \ = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[14] {\n\
    \            max[14] = x\n        }\n    }\n    \n    for x in arr {\n       \
    \ if x > max[15] {\n            max[15] = x\n        }\n    }\n    \n    for x\
    \ in arr {\n        if x > max[16] {\n            max[16] = x\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x > max[17] {\n            max[17] =\
    \ x\n        }\n    }\n    \n    for x in arr {\n        if x > max[18] {\n  \
    \          max[18] = x\n        }\n    }\n    \n    for x in arr {\n        if\
    \ x > max[19] {\n            max[19] = x\n        }\n    }\n    \n    for x in\
    \ arr {\n        if x > max[20] {\n            max[20] = x\n        }\n    }\n\
    \    \n    for x in arr {\n        if x > max[21] {\n            max[21] = x\n\
    \        }\n    }\n    \n    for x in ", "    precondition(k <= arr.count, \"\
    k is out of bounds\")\n    var result = Array<Int>(repeating: 0, count: k)\n \
    \   var max = 0\n    for i in 0..<k {\n        if arr[i] > max {\n           \
    \ max = arr[i]\n        }\n        result[i] = max\n    }\n    return result",
  "    \n    var result = [Int]()\n    \n    if arr.count < k {\n        return result\n\
    \    }\n    \n    if k == 1 {\n        result = arr\n        return result\n \
    \   }\n    \n    var max = [Int]()\n    var maxIndex = 0\n    \n    for i in 0..<k\
    \ {\n        if arr[i] > max[maxIndex] {\n            max[maxIndex] = arr[i]\n\
    \            maxIndex = i\n        }\n    }\n    \n    for i in 0..<k {\n    \
    \    if arr[i] > max[maxIndex] {\n            result.append(max[maxIndex])\n \
    \           maxIndex = i\n        }\n    }\n    \n    for i in 0..<k {\n     \
    \   if arr[i] > max[maxIndex] {\n            result.append(arr[i])\n        }\n\
    \    }\n    \n    return result", "    \n    let len = arr.count\n    \n    if\
    \ k > len {\n        return arr\n    }\n    \n    if k == 0 {\n        return\
    \ arr\n    }\n    \n    let mid = len / 2\n    \n    let max1 = maximum(arr[..<mid],\
    \ k - 1)\n    let max2 = maximum(arr[mid..<len], k)\n    \n    return max1 + max2",
  "    \n    let len = arr.count\n    \n    if k > len {\n        return arr\n   \
    \ }\n    \n    var max = [Int](repeating: 0, count: k)\n    \n    for i in 0..<k\
    \ {\n        let j = arr.index(of: max[i])\n        max[i] = arr[j]\n    }\n \
    \   \n    return max", '    return maximumHelper(arr, k)', '    return maximumHelper(arr,
    k, 0)', '    return maximumHelper(arr, k)', "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int]()\n  \
    \  for index in 0..<k {\n        if arr[index] > max[index] {\n            max\
    \ = [Int](repeatElement(arr[index], k))\n        }\n    }\n    return max", " \
    \   \n    // write your code here\n    \n    return arr", "    \n    var result\
    \ = Array<Int>(repeating: 0, count: k)\n    \n    for i in 0..<arr.count {\n \
    \       if arr[i] > result[0] {\n            result[0] = arr[i]\n        }\n \
    \   }\n    \n    return result", '    return maximumHelper(arr, k)', '    return
    merge(arr, maximumHelper(arr, k))', '    return maximumHelper(arr, k)', "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int](repeating: 0, count: k)\n    \n    for i in 0..<k {\n        let\
    \ maxIndex = arr.index(of: max(arr))\n        max[i] = arr[maxIndex]\n       \
    \ arr.remove(at: maxIndex)\n    }\n    \n    return max", "    precondition(k\
    \ <= arr.count, \"k must be less than or equal to arr.count\")\n    var max =\
    \ [Int](repeating: 0, count: k)\n    for x in arr {\n        if x > max[k-1] {\n\
    \            max[k-1] = x\n        }\n    }\n    return max", '    return maximumHelper(arr,
    k)', '    return maximumByOrdered(arr, k)', "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var result = Array<Int>(repeating:\
    \ 0, count: k)\n    var max = 0\n    for x in arr {\n        if x > max {\n  \
    \          max = x\n        }\n    }\n    for x in arr {\n        if x == max\
    \ {\n            result[result.count-1] = x\n        }\n    }\n    return result",
  '    return maximumHelper(arr, k)', '    return maximum3(arr, k)', "    precondition(k\
    \ <= arr.count, \"k must be less than or equal to the length of arr\")\n    var\
    \ max = [Int]()\n    for x in arr {\n        if x > max[0] {\n            max[0]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[1] {\n       \
    \     max[1] = x\n        }\n    }\n    return max", '    return maximumByOrdered(arr,
    k)', "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n    for\
    \ index in 0..<arr.count {\n        if arr[index] > max[maxIndex] {\n        \
    \    max[maxIndex] = arr[index]\n            maxIndex = index\n        }\n   \
    \ }\n    return max", "    \n    var result = [Int]()\n    \n    for x in arr\
    \ {\n        if result.count < k {\n            result.append(x)\n        } else\
    \ {\n            if x > result[k] {\n                result[k] = x\n         \
    \   }\n        }\n    }\n    \n    return result", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var result = Array<Int>(repeating:\
    \ 0, count: k)\n    var max = 0\n    for x in arr {\n        if x > max {\n  \
    \          max = x\n        }\n    }\n    for x in arr {\n        if x == max\
    \ {\n            result[k-1] = x\n            k -= 1\n        }\n    }\n    return\
    \ result", '    return merge(arr, maximumHelper(arr, k))', "    \n    var result\
    \ = arr\n    \n    if k > result.count {\n        return result\n    }\n    \n\
    \    if k == 0 {\n        return result\n    }\n    \n    if k == 1 {\n      \
    \  return result.sorted()\n    }\n    \n    if k == result.count {\n        return\
    \ result.sorted()\n    }\n    \n    if k == result.count - 1 {\n        return\
    \ result.sorted().reversed()\n    }\n    \n    if k == result.count - 2 {\n  \
    \      return result.sorted().reversed().sorted()\n    }\n    \n    if k == result.count\
    \ - 3 {\n        return result.sorted().reversed().sorted().reversed()\n    }\n\
    \    \n    if k == result.count - 4 {\n        return result.sorted().reversed().sorted().reversed().sorted()\n\
    \    }\n    \n    if k == result.count - 5 {\n        return result.sorted().reversed().sorted().reversed().sorted().reversed()\n\
    \    }\n    \n    if k == result.count - 6 {\n        return result.sorted().reversed().sorted().reversed().sorted().reversed().sorted()\n\
    \    }\n    \n    if k == result.count - 7 {\n        return result.sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed()\n\
    \    }\n    \n    if k == result.count - 8 {\n        return result.sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted()\n\
    \    }\n    \n    if k == result.count - 9 {\n        return result.sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed()\n\
    \    }\n    \n    if k == result.count - 10 {\n        return result.sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted()\n\
    \    }\n    \n    if k == result.count - 11 {\n        return result.sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed()\n\
    \    }\n    \n    if k == result.count - 12 {\n        return result.sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted()\n\
    \    }\n    \n    if k == result.count - 13 {\n        return result.sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed().sorted().reversed()\n",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var result = [Int]()\n    var max = 0\n    for element in arr {\n     \
    \   if element > max {\n            max = element\n        }\n    }\n    for element\
    \ in arr {\n        if element == max {\n            result.append(element)\n\
    \        }\n    }\n    for element in arr {\n        if element > max {\n    \
    \        result.append(element)\n        }\n    }\n    return result", '    return
    maximumHelper(arr, k, 0)', "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    for x in arr\
    \ {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n    for\
    \ x in arr {\n        if x > max[1] {\n            max[1] = x\n        }\n   \
    \ }\n    for x in arr {\n        if x > max[2] {\n            max[2] = x\n   \
    \     }\n    }\n    for x in arr {\n        if x > max[3] {\n            max[3]\
    \ = x\n        }\n    }\n    \n    return max[k..<arr.count]", '    return merge(arr,
    k, arr, 0, arr.count - 1)', '    return maximumHelper(arr, k)', "    \n    //\
    \ write your code here\n    \n    return arr", '    return maximumHelper(arr,
    k, 0)', '    return mergeSort(arr, k)', "    precondition(k <= arr.count, \"k\
    \ should be less than or equal to arr.count\")\n    var result = Array(repeating:\
    \ 0, count: k)\n    var max = 0\n    for index in 0..<arr.count {\n        if\
    \ arr[index] > max {\n            max = arr[index]\n        }\n    }\n    for\
    \ index in 0..<k {\n        result[index] = max\n    }\n    return result", " \
    \   precondition(k <= arr.count, \"k is out of bounds\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max", '    return maximumHelper(arr, k)',
  '    return maximumHelper(arr, k, 0)', '    return mergeSort(arr, k)', '    return
    maximumSort(arr, k)', '    return maximum3(arr, k)', "    \n    var max = [Int]()\n\
    \    var maxIndex = 0\n    \n    for index in 0..<k {\n        if arr[index] >\
    \ max[maxIndex] {\n            max[maxIndex] = arr[index]\n            maxIndex\
    \ = index\n        }\n    }\n    \n    return max", '    return merge(arr, arr.maxIndex({
    $0 < $1 }), k)', "    precondition(k <= arr.count, \"k is out of bounds\")\n \
    \   var max = [Int]()\n    var maxIndex = 0\n    for index in 0..<k {\n      \
    \  if arr[index] > max[maxIndex] {\n            maxIndex = index\n        }\n\
    \    }\n    max = append(max, arr[k])\n    for index in k+1..<arr.count {\n  \
    \      if arr[index] > max[maxIndex] {\n            maxIndex = index\n       \
    \ }\n    }\n    return max", '    return maximumHelper(arr, k)', '    return maximumHelper(arr,
    k, 0)', "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    var result = Array<Int>(repeating: 0, count: k)\n    var max\
    \ = 0\n    for element in arr {\n        if element > max {\n            max =\
    \ element\n        }\n    }\n    for element in arr {\n        if element == max\
    \ {\n            result[result.count - 1] = element\n        }\n    }\n    return\
    \ result", '    return mergeSort(arr, k)', '    return mergeSort(arr, k)', " \
    \   \n    // write your code here\n    \n    return arr", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    \n    var\
    \ max = [Int](repeating: 0, count: k)\n    \n    for i in 0..<k {\n        max[i]\
    \ = max(arr[i], max[i])\n    }\n    \n    return max", '    return maximumHelper(arr,
    k)', '    return maximumHelper(arr, k)', "    precondition(k <= arr.count, \"\
    k is out of bounds\")\n    var max = [Int]()\n    for x in arr {\n        if x\
    \ > max[0] {\n            max[0] = x\n        }\n    }\n    for x in arr {\n \
    \       if x < max[0] {\n            continue\n        }\n        for y in max\
    \ {\n            if x == y {\n                continue\n            }\n      \
    \      if x > y {\n                max[0] = y\n                break\n       \
    \     }\n        }\n    }\n    return max", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for index in 0..<k {\n        let maxIndex = arr.index(arr.startIndex,\
    \ offsetBy: index)\n        max[index] = arr[maxIndex]\n    }\n    \n    return\
    \ max", '    return maximumHelper(arr, k)', "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    var max = [Int](repeating:\
    \ 0, count: k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1]\
    \ = x\n        }\n    }\n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    for index in 0..<k {\n        if arr[index] > max[index] {\n\
    \            max[index] = arr[index]\n        }\n    }\n    return max", '    return
    maximumHelper(arr, k)', "    \n    // 1. sort\n    let result = arr.sorted()\n\
    \    \n    // 2. get k largest elements\n    let result2 = result[k..<result.count]\n\
    \    \n    return result2", "    precondition(k <= arr.count, \"k should be less\
    \ than or equal to arr.count\")\n    \n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    \n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n\
    \            max[maxIndex] = arr[index]\n            maxIndex = index\n      \
    \  }\n    }\n    \n    return max", '    return maximum3(arr, k)', '    return
    sort(arr, k)', '    return maximumHelper(arr, k)', '    return maximumHelper(arr,
    k, 0)', "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    var max = [Int](repeating: 0, count: k)\n    var maxIndex\
    \ = 0\n    for index in 0..<k {\n        if arr[index] > max[index] {\n      \
    \      maxIndex = index\n            max = [Int](repeating: arr[index], count:\
    \ k)\n        }\n    }\n    return max", "    precondition(k <= arr.count, \"\
    k should be less than or equal to arr.count\")\n    \n    var max = [Int](repeating:\
    \ 0, count: k)\n    \n    for i in 0..<k {\n        max[i] = max(arr[i], max[i])\n\
    \    }\n    \n    return max", '    return maximum3(arr, k)', '    return maximumHelper(arr,
    k, 0)', "    precondition(k <= arr.count, \"k should be less than or equal to\
    \ arr.count\")\n    var result = [Int]()\n    var max = 0\n    for x in arr {\n\
    \        if x > max {\n            max = x\n        }\n    }\n    for x in arr\
    \ {\n        if x == max {\n            result.append(x)\n        }\n    }\n \
    \   for x in arr {\n        if x < max {\n            result.append(x)\n     \
    \   }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x > max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x < max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x > max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x < max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x > max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x < max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x > max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x < max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x > max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x < max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x > max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x < max {\n            result.append(x)\n\
    \        }\n", '    return maximumHelper(arr, k)', '    return maximumHelper(arr,
    k, 0)', '    return merge(arr, maximumHelper(arr, k))', '    return maximumHelper(arr,
    k)', '    return maximumHelper(arr, k)', '    return maximumSubArray(arr, k)',
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    \n    var max = [Int](repeating: 0, count: k)\n    \n    for i in 0..<k\
    \ {\n        if arr[i] > max[i] {\n            max[i] = arr[i]\n        }\n  \
    \  }\n    \n    return max", '    return maximumHelper(arr, k)', "    \n    //\
    \ write your code here\n    \n    return arr", "    precondition(k <= arr.count,\
    \ \"k should be less than or equal to arr.count\")\n    \n    var max = [Int]()\n\
    \    \n    for _ in 0..<k {\n        var maxIndex = -1\n        var maxValue =\
    \ arr[0]\n        for index in 0..<arr.count {\n            if arr[index] > maxValue\
    \ {\n                maxValue = arr[index]\n                maxIndex = index\n\
    \            }\n        }\n        \n        max.append(maxValue)\n        arr.remove(at:\
    \ maxIndex)\n    }\n    \n    return max", "    \n    // write your code here\n\
    \    \n    return arr", '    return mergeSort(arr, k)', '    return mergeSort(arr,
    k)', '    return merge(maximumHelper(arr, k), maximumHelper(arr, k + 1))', '    return
    maximum3(arr, k)', '    return maximumHelper(arr, k)', "    precondition(k <=\
    \ arr.count, \"k should be less than or equal to arr.count\")\n    var max = [Int]()\n\
    \    var maxIndex = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    return max", "    precondition(k <= arr.count, \"k must be\
    \ less than or equal to arr.count\")\n    \n    var max = [Int](repeating: 0,\
    \ count: k)\n    \n    for i in 0..<k {\n        if arr[i] > max[i] {\n      \
    \      max[i] = arr[i]\n        }\n    }\n    \n    return max", '    return sort(arr,
    k)', "    \n    let result = Array(repeating: 0, count: k)\n    \n    for i in\
    \ 0..<arr.count {\n        result[i] = max(arr[i], result[i])\n    }\n    \n \
    \   return result", "    precondition(k <= arr.count, \"k should be less than\
    \ or equal to the length of the array\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for x in arr {\n        if x > max[k-1] {\n            max[k-1] = x\n\
    \        }\n    }\n    return max", "    precondition(k <= arr.count, \"k is out\
    \ of bounds\")\n    var max = [Int]()\n    for x in arr {\n        if x > max[k]\
    \ {\n            max = [Int](repeatElement(max[k], k))\n        }\n        max[k]\
    \ = x\n    }\n    return max", '    return merge(arr, 0, arr.count, k)', "   \
    \ precondition(k <= arr.count, \"k is out of bounds\")\n    var max = [Int](repeating:\
    \ -1000, count: k)\n    for x in arr {\n        if x < max[0] {\n            max[0]\
    \ = x\n        }\n        if x > max[1] {\n            max[1] = x\n        }\n\
    \    }\n    return max", "    \n    var max = [Int]()\n    \n    for x in arr\
    \ {\n        if x > max[0] {\n            max[0] = x\n        }\n    }\n    \n\
    \    for x in arr {\n        if x > max[1] {\n            max[1] = x\n       \
    \ }\n    }\n    \n    for x in arr {\n        if x > max[2] {\n            max[2]\
    \ = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[3] {\n \
    \           max[3] = x\n        }\n    }\n    \n    for x in arr {\n        if\
    \ x > max[4] {\n            max[4] = x\n        }\n    }\n    \n    for x in arr\
    \ {\n        if x > max[5] {\n            max[5] = x\n        }\n    }\n    \n\
    \    for x in arr {\n        if x > max[6] {\n            max[6] = x\n       \
    \ }\n    }\n    \n    for x in arr {\n        if x > max[7] {\n            max[7]\
    \ = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[8] {\n \
    \           max[8] = x\n        }\n    }\n    \n    for x in arr {\n        if\
    \ x > max[9] {\n            max[9] = x\n        }\n    }\n    \n    for x in arr\
    \ {\n        if x > max[10] {\n            max[10] = x\n        }\n    }\n   \
    \ \n    for x in arr {\n        if x > max[11] {\n            max[11] = x\n  \
    \      }\n    }\n    \n    for x in arr {\n        if x > max[12] {\n        \
    \    max[12] = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[13]\
    \ {\n            max[13] = x\n        }\n    }\n    \n    for x in arr {\n   \
    \     if x > max[14] {\n            max[14] = x\n        }\n    }\n    \n    for\
    \ x in arr {\n        if x > max[15] {\n            max[15] = x\n        }\n \
    \   }\n    \n    for x in arr {\n        if x > max[16] {\n            max[16]\
    \ = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[17] {\n\
    \            max[17] = x\n        }\n    }\n    \n    for x in arr {\n       \
    \ if x > max[18] {\n            max[18] = x\n        }\n    }\n    \n    for x\
    \ in arr {\n        if x > max[19] {\n            max[19] = x\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x > max[20] {\n            max[20] =\
    \ x\n        }\n    }\n    \n    for x in arr {\n        if x > max[21] {\n  \
    \          max[21] = x\n        }\n    }\n    \n    for x in ", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int]()\n    for x in arr {\n        if x > max[0] {\n            max[0] =\
    \ x\n        }\n    }\n    for x in arr {\n        if x == max[0] {\n        \
    \    for y in max {\n                if y > x {\n                    max[1] =\
    \ y\n                    break\n                }\n            }\n        }\n\
    \    }\n    for x in arr {\n        if x == max[1] {\n            for y in max\
    \ {\n                if y > x {\n                    max[2] = y\n            \
    \        break\n                }\n            }\n        }\n    }\n    for x\
    \ in arr {\n        if x == max[2] {\n            for y in max {\n           \
    \     if y > x {\n                    max[3] = y\n                    break\n\
    \                }\n            }\n        }\n    }\n    return max", "    \n\
    \    // write your code here\n    \n    return arr", "    \n    // write your\
    \ code here\n    \n    return arr", "    \n    var max = [Int]()\n    \n    for\
    \ x in arr {\n        if x > max[0] {\n            max[0] = x\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x > max[1] {\n            max[1] = x\n\
    \        }\n    }\n    \n    for x in arr {\n        if x > max[2] {\n       \
    \     max[2] = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[3]\
    \ {\n            max[3] = x\n        }\n    }\n    \n    for x in arr {\n    \
    \    if x > max[4] {\n            max[4] = x\n        }\n    }\n    \n    for\
    \ x in arr {\n        if x > max[5] {\n            max[5] = x\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x > max[6] {\n            max[6] = x\n\
    \        }\n    }\n    \n    for x in arr {\n        if x > max[7] {\n       \
    \     max[7] = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[8]\
    \ {\n            max[8] = x\n        }\n    }\n    \n    for x in arr {\n    \
    \    if x > max[9] {\n            max[9] = x\n        }\n    }\n    \n    for\
    \ x in arr {\n        if x > max[10] {\n            max[10] = x\n        }\n \
    \   }\n    \n    for x in arr {\n        if x > max[11] {\n            max[11]\
    \ = x\n        }\n    }\n    \n    for x in arr {\n        if x > max[12] {\n\
    \            max[12] = x\n        }\n    }\n    \n    for x in arr {\n       \
    \ if x > max[13] {\n            max[13] = x\n        }\n    }\n    \n    for x\
    \ in arr {\n        if x > max[14] {\n            max[14] = x\n        }\n   \
    \ }\n    \n    for x in arr {\n        if x > max[15] {\n            max[15] =\
    \ x\n        }\n    }\n    \n    for x in arr {\n        if x > max[16] {\n  \
    \          max[16] = x\n        }\n    }\n    \n    for x in arr {\n        if\
    \ x > max[17] {\n            max[17] = x\n        }\n    }\n    \n    for x in\
    \ arr {\n        if x > max[18] {\n            max[18] = x\n        }\n    }\n\
    \    \n    for x in arr {\n        if x > max[19] {\n            max[19] = x\n\
    \        }\n    }\n    \n    for x in arr {\n        if x > max[20] {\n      \
    \      max[20] = x\n        }\n    }\n    \n    for x in arr {\n        if x >\
    \ max[21] {\n            max[21] = x\n        }\n    }\n    \n    for x in ",
  "    precondition(k <= arr.count, \"k should be less than or equal to arr.count\"\
    )\n    var max = [Int](repeating: 0, count: k)\n    for x in arr {\n        if\
    \ x > max[k-1] {\n            max[k-1] = x\n        }\n    }\n    return max",
  '    return maximumInRange(arr, k)', "    precondition(k <= arr.count, \"k should\
    \ be less than or equal to arr.count\")\n    var max = [Int](repeating: 0, count:\
    \ k)\n    for (_, v) in arr.enumerated() {\n        if v > max[k-1] {\n      \
    \      max[k-1] = v\n        }\n    }\n    return max", '    return merge(merge(arr[0..<k],
    arr[k..<arr.count]), arr[k..<arr.count])', '    return maximumSubArray(arr, k)',
  '    return maximumHelper(arr, k)', '    return maximum3(arr, k)', '    return maximumSubArray(arr,
    k)', '    return Array(Set(arr).sorted().prefix(k))', '    return maximumHelper(arr,
    k)', '    return merge(maximumHelper(arr, k), maximumHelper(arr, k))', '    return
    mergeSort(arr, k)', '    return maximumHelper(arr, k, 0)', '    return maximumHelper(arr,
    k, 0)', '    return maximumSort(arr, k)', '    return maximumHelper(arr, k)',
  '    return maximumHelper(arr, k)', '    return maximumHelper(arr, k)', "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var max\
    \ = [Int](repeating: 0, count: k)\n    var maxIndex = 0\n    for index in 0..<k\
    \ {\n        if arr[index] > max[index] {\n            maxIndex = index\n    \
    \        max = [Int](repeating: 0, count: k)\n        }\n        max[index] =\
    \ arr[index]\n    }\n    return max", '    return maximumHelper(arr, k)', '    return
    maximumInPlace(arr, k)', '    return merge(arr, k - 1, arr.count, &(arr[0]), &(arr[k]))',
  '    return maximumHelper(arr, k)', "    precondition(k <= arr.count, \"k is out\
    \ of bounds\")\n    var max = [Int](repeating: 0, count: k)\n    var maxIndex\
    \ = 0\n    for index in 0..<arr.count {\n        if arr[index] > max[maxIndex]\
    \ {\n            max[maxIndex] = arr[index]\n            maxIndex = index\n  \
    \      }\n    }\n    return max", '    return merge(arr, maximumHelper(arr, k))',
  '    return sort(arr, k)', '    return maximumSort(arr, k)', '    return merge(arr,
    maximumHelper(arr, k))', '    return mergeSort(arr, k)', "    \n    let result\
    \ = Array(repeating: 0, count: k)\n    \n    for i in 0..<arr.count {\n      \
    \  result[i] = max(arr[i], result[i])\n    }\n    \n    return result", "    precondition(k\
    \ <= arr.count, \"k should be less than or equal to arr.count\")\n    var result\
    \ = [Int]()\n    var max = 0\n    for x in arr {\n        if x > max {\n     \
    \       max = x\n        }\n    }\n    for x in arr {\n        if x == max {\n\
    \            result.append(x)\n        }\n    }\n    for x in arr {\n        if\
    \ x > max {\n            result.append(x)\n        }\n    }\n    for x in arr\
    \ {\n        if x == max {\n            result.append(x)\n        }\n    }\n \
    \   for x in arr {\n        if x == max {\n            result.append(x)\n    \
    \    }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n    }\n    for x in arr {\n        if x == max {\n            result.append(x)\n\
    \        }\n", "    precondition(k <= arr.count, \"k should be less than or equal\
    \ to arr.count\")\n    var max = [Int]()\n    for x in arr {\n        if x > max[0]\
    \ {\n            max[0] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[1] {\n            max[1] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[2] {\n            max[2] = x\n        }\n    }\n    for x\
    \ in arr {\n        if x > max[3] {\n            max[3] = x\n        }\n    }\n\
    \    for x in arr {\n        if x > max[4] {\n            max[4] = x\n       \
    \ }\n    }\n    for x in arr {\n        if x > max[5] {\n            max[5] =\
    \ x\n        }\n    }\n    for x in arr {\n        if x > max[6] {\n         \
    \   max[6] = x\n        }\n    }\n    for x in arr {\n        if x > max[7] {\n\
    \            max[7] = x\n        }\n    }\n    for x in arr {\n        if x >\
    \ max[8] {\n            max[8] = x\n        }\n    }\n    for x in arr {\n   \
    \     if x > max[9] {\n            max[9] = x\n        }\n    }\n    for x in\
    \ arr {\n        if x > max[10] {\n            max[10] = x\n        }\n    }\n\
    \    for x in arr {\n        if x > max[11] {\n            max[11] = x\n     \
    \   }\n    }\n    for x in arr {\n        if x > max[12] {\n            max[12]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[13] {\n      \
    \      max[13] = x\n        }\n    }\n    for x in arr {\n        if x > max[14]\
    \ {\n            max[14] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[15] {\n            max[15] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[16] {\n            max[16] = x\n        }\n    }\n    for\
    \ x in arr {\n        if x > max[17] {\n            max[17] = x\n        }\n \
    \   }\n    for x in arr {\n        if x > max[18] {\n            max[18] = x\n\
    \        }\n    }\n    for x in arr {\n        if x > max[19] {\n            max[19]\
    \ = x\n        }\n    }\n    for x in arr {\n        if x > max[20] {\n      \
    \      max[20] = x\n        }\n    }\n    for x in arr {\n        if x > max[21]\
    \ {\n            max[21] = x\n        }\n    }\n    for x in arr {\n        if\
    \ x > max[22] {\n            max[22] = x\n        }\n    }\n    for x in arr {\n\
    \        if x > max[23] {", '    return maximum3(arr, k, 0)', "    \n    let result\
    \ = Array(repeating: 0, count: k)\n    \n    for i in 0..<arr.count {\n      \
    \  result[i] = max(arr[i], result[i])\n    }\n    \n    return result", "    precondition(k\
    \ <= arr.count, \"k is out of range\")\n    var max = [Int]()\n    var maxIndex\
    \ = 0\n    for index in 0..<k {\n        if arr[index] > max[maxIndex] {\n   \
    \         maxIndex = index\n        }\n    }\n    for index in 0..<k {\n     \
    \   max[maxIndex] = arr[index]\n        maxIndex += 1\n    }\n    return max",
  '    return maximumHelper(arr, k)', '    return maximumHelper(arr, k, 0)', '    return
    maximumHelper(arr, k)']
stop_tokens:
- "\n}"
