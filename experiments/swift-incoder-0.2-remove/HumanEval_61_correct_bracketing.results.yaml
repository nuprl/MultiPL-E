language: swift
name: HumanEval_61_correct_bracketing
results:
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = false\n        case \"{\"\
    :\n            opening = false\n        case \"}\":\n            closing = true\n\
    \        default:\n            continue\n        }\n        if opening && !closing\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp7d61so21/tmp7d61so21.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b83aaf99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b83aac90b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b83aac90988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b83aac8f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7d61so21                        0x000055ed1a7be40b <unavailable> + 5131

    5    libc.so.6                          0x00002b83ab185460 __libc_start_main +
    245

    6    tmp7d61so21                        0x000055ed1a7be099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   opening = false\n            closing = false\n        }\n    }\n    return\
    \ opening && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpl64_kcxp/tmpl64_kcxp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1de00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1daf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1daf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1daf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl64_kcxp                        0x000056233984240b <unavailable> + 5131

    5    libc.so.6                          0x00002b2b1dfec460 __libc_start_main +
    245

    6    tmpl64_kcxp                        0x0000562339842099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var openingBracketCount = 0\n\
    \    var closingBracketCount = 0\n    for bracket in brackets {\n        if bracket\
    \ == \"(\" {\n            openingBracketCount += 1\n        } else if bracket\
    \ == \")\" {\n            closingBracketCount += 1\n        } else {\n       \
    \     bracketCount += 1\n        }\n    }\n    if bracketCount != openingBracketCount\
    \ {\n        return false\n    }\n    if bracketCount != closingBracketCount {\n\
    \        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp8ruzbk0i/tmp8ruzbk0i.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0facf3dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0facc34b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0facc34988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0facc337b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8ruzbk0i                        0x000055622380640b <unavailable> + 5131

    5    libc.so.6                          0x00002b0fad129460 __libc_start_main +
    245

    6    tmp8ruzbk0i                        0x0000556223806099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracket = String()\n    var closingBracket\
    \ = String()\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"(\" {\n            openingBrackets.removeFirst()\n            closingBrackets.removeLast()\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \")\" {\n            openingBrackets.removeLast()\n            closingBrackets.removeFirst()\n\
    \        }\n    }\n\n    return openingBrackets.count == 0 && closingBrackets.count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7x1ogffu.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7x1ogffu.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7x1ogffu.swift:7:9: warning: initialization of variable\
    \ 'openingBracket' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var openingBracket = String()\n    ~~~~^~~~~~~~~~~~~~\n   \
    \ _\n/tmp/tmp7x1ogffu.swift:8:9: warning: initialization of variable 'closingBracket'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var closingBracket = String()\n    ~~~~^~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = false\n        case \"{\"\
    :\n            opening = false\n        case \"}\":\n            closing = true\n\
    \        default:\n            return false\n        }\n    }\n    return opening\
    \ && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpqb6y9pxk/tmpqb6y9pxk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae7db2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae7d822b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae7d822988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae7d8217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqb6y9pxk                        0x000055a2f4f0140b <unavailable> + 5131

    5    libc.so.6                          0x00002aae7dd17460 __libc_start_main +
    245

    6    tmpqb6y9pxk                        0x000055a2f4f01099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   if opening {\n                opening = false\n            } else {\n    \
    \            closing = false\n            }\n        }\n    }\n    return !opening\
    \ && !closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpe3fqhh8e/tmpe3fqhh8e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76e297dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76e2674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76e2674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76e26737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3fqhh8e                        0x000055a520cd56a3 <unavailable> + 5795

    5    libc.so.6                          0x00002b76e2b69460 __libc_start_main +
    245

    6    tmpe3fqhh8e                        0x000055a520cd5099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   if opening {\n                opening = false\n            } else {\n    \
    \            closing = false\n            }\n        }\n    }\n    return !opening\
    \ && !closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpe3fqhh8e/tmpe3fqhh8e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76e297dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76e2674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76e2674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76e26737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3fqhh8e                        0x000055a520cd56a3 <unavailable> + 5795

    5    libc.so.6                          0x00002b76e2b69460 __libc_start_main +
    245

    6    tmpe3fqhh8e                        0x000055a520cd5099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var lastChar = String()\n \
    \   for char in brackets {\n        if char == \"(\" {\n            bracketCount++\n\
    \        } else if char == \")\" {\n            bracketCount--\n        } else\
    \ if bracketCount == 0 {\n            lastChar = char\n        }\n    }\n    return\
    \ bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0u4ruh8b.swift:9:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            bracketCount++\n                        ^~\n\
    /tmp/tmp0u4ruh8b.swift:11:25: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            bracketCount--\n                        ^~\n/tmp/tmp0u4ruh8b.swift:13:24:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  lastChar = char\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    openingBrackets.reverse()\n    closingBrackets.reverse()\n    for openingBracket\
    \ in openingBrackets {\n        if closingBrackets.contains(openingBracket) {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph3md7pcm.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph3md7pcm.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph3md7pcm.swift:9:21: error: value of type 'String'\
    \ has no member 'reverse'\n    openingBrackets.reverse()\n    ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmph3md7pcm.swift:10:21: error: value of type 'String' has no\
    \ member 'reverse'\n    closingBrackets.reverse()\n    ~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n\n       \
    \ if openingBracket == \"(\" {\n            openingBracketIndex += 1\n       \
    \ } else if openingBracket == \")\" {\n            openingBracketIndex += 1\n\
    \            closingBracketIndex += 1\n        } else {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph421b3wu.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph421b3wu.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph421b3wu.swift:15:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmph421b3wu.swift:17:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmph421b3wu.swift:18:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var lastChar: Character?\n\
    \    for char in brackets {\n        switch char {\n        case \"(\":\n    \
    \        bracketCount += 1\n        case \"[\":\n            bracketCount += 2\n\
    \        case \"{\":\n            bracketCount += 3\n        case \"}\":\n   \
    \         bracketCount -= 3\n        default:\n            lastChar = char\n \
    \       }\n    }\n    return bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpxnzc882a/tmpxnzc882a.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82c3af6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82c37edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82c37ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82c37ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxnzc882a                        0x00005587d95a140b <unavailable> + 5131

    5    libc.so.6                          0x00002b82c3ce2460 __libc_start_main +
    245

    6    tmpxnzc882a                        0x00005587d95a1099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = false\n        case \"{\"\
    :\n            opening = false\n        case \"}\":\n            closing = true\n\
    \        default:\n            return false\n        }\n    }\n    return opening\
    \ && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpqb6y9pxk/tmpqb6y9pxk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae7db2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae7d822b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae7d822988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae7d8217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqb6y9pxk                        0x000055a2f4f0140b <unavailable> + 5131

    5    libc.so.6                          0x00002aae7dd17460 __libc_start_main +
    245

    6    tmpqb6y9pxk                        0x000055a2f4f01099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph1y08gka.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmph1y08gka.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        if c == '(' {\n            opening = true\n       \
    \ } else if c == ')' {\n            closing = true\n        } else if opening\
    \ {\n            opening = false\n        }\n    }\n    return opening && closing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpub95f9zt.swift:8:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmpub95f9zt.swift:10:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n\n    while opening_brackets_count\
    \ > 0 && closing_brackets_count > 0 {\n        if opening_brackets[opening_brackets_count\
    \ - 1] == '(' {\n            opening_brackets_count -= 1\n            closing_brackets_count\
    \ -= 1\n        } else if opening_brackets[opening_brackets_count - 1] == ')'\
    \ {\n            opening_brackets_count -= 1\n            closing_brackets_count\
    \ -= 1\n        } else {\n            return false\n        }\n    }\n    return\
    \ opening_brackets_count == 0 && closing_brackets_count == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphd4uexqs.swift:11:60: error: single-quoted string literal found,\
    \ use '\"'\n        if opening_brackets[opening_brackets_count - 1] == '(' {\n\
    \                                                           ^~~\n            \
    \                                               \"(\"\n/tmp/tmphd4uexqs.swift:14:67:\
    \ error: single-quoted string literal found, use '\"'\n        } else if opening_brackets[opening_brackets_count\
    \ - 1] == ')' {\n                                                            \
    \      ^~~\n                                                                 \
    \ \")\"\n/tmp/tmphd4uexqs.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphd4uexqs.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphd4uexqs.swift:7:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmphd4uexqs.swift:8:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphd4uexqs.swift:11:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if opening_brackets[opening_brackets_count\
    \ - 1] ="
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracket = openingBrackets.first!\n \
    \   var closingBracket = closingBrackets.first!\n\n    while openingBracket !=\
    \ nil {\n        if openingBracket.unicodeScalars.count == 0 {\n            openingBracket\
    \ = openingBrackets.next\n            continue\n        }\n\n        if openingBracket.unicodeScalars.first!.value\
    \ == closingBracket.unicodeScalars.first!.value {\n            openingBracket\
    \ = openingBrackets.next\n            closingBracket = closingBrackets.next\n\
    \            continue\n        }\n\n        if openingBracket.unicodeScalars.first!.value\
    \ > closingBracket.unicodeScalars.first!.value {\n            openingBracket =\
    \ openingBrackets.next\n        } else {\n            closingBracket = closingBrackets.next\n\
    \        }\n    }\n\n    return openingBrackets == brackets\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmps1wjdutw.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps1wjdutw.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmps1wjdutw.swift:11:26: warning: comparing non-optional\
    \ value of type 'String.Element' (aka 'Character') to 'nil' always returns true\n\
    \    while openingBracket != nil {\n          ~~~~~~~~~~~~~~ ^  ~~~\n/tmp/tmps1wjdutw.swift:13:46:\
    \ error: value of type 'String' has no member 'next'\n            openingBracket\
    \ = openingBrackets.next\n                             ~~~~~~~~~~~~~~~ ^~~~\n\
    /tmp/tmps1wjdutw.swift:18:46: error: value of type 'String' has no member 'next'\n\
    \            openingBracket = openingBrackets.next\n                         \
    \    ~~~~~~~~~~~~~~~ ^~~~\n/tmp/tmps1wjdutw.swift:19:46: error: value of type\
    \ 'String' has no member 'next'\n            closingBracket = closingBrackets.next\n\
    \                             ~~~~~~~~~~~~~~~ ^~~~\n/tmp/tmps1wjdutw.swift:24:46:\
    \ error: value of type 'String' has no member 'next'\n            openingBracket\
    \ = openingBrackets.next\n                             ~~~~~~~~~~~~~~~ ^~~~\n\
    /tmp/tmps1wjdutw.swift:26:46: error: value of type 'String' has no member 'next'\n\
    \            closingBracket = closingBrackets.next\n                         \
    \    ~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n\n       \
    \ if openingBracket == \"(\" {\n            openingBracketIndex += 1\n       \
    \ } else if openingBracket == \")\" {\n            closingBracketIndex -= 1\n\
    \        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"[\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"]\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        }\n\n        openingBrackets[openingBracketIndex] = closingBracket\n\
    \        closingBrackets[closingBracketIndex] = openingBracket\n    }\n\n    return\
    \ openingBracketIndex == brackets.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9vw_cjk3.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9vw_cjk3.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp9vw_cjk3.swift:15:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp9vw_cjk3.swift:17:33: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex -= 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp9vw_cjk3.swift:19:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp9vw_cjk3.swift:20:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp9vw_cjk3.swift:22:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp9vw_cjk3.swift:23:33: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex -= 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp9vw_cjk3.swift:25:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp9vw_cjk3.swift:26:33: error:\
    \ binary operator '+=' c"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = 0\n    var closingCount = 0\n  \
    \  for char in opening {\n        if char == \")\" {\n            closingCount\
    \ += 1\n        } else if char == \"(\" {\n            openingCount += 1\n   \
    \     }\n    }\n    if openingCount != closingCount {\n        return false\n\
    \    }\n    for char in closing {\n        if char == \")\" {\n            closingCount\
    \ -= 1\n        } else if char == \"(\" {\n            openingCount -= 1\n   \
    \     }\n    }\n    if openingCount != closingCount {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1jjao9my.swift:5:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp1jjao9my.swift:6:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp1jjao9my.swift:5:9:\
    \ warning: variable 'opening' was never mutated; consider changing to 'let' constant\n\
    \    var opening = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmp1jjao9my.swift:6:9:\
    \ warning: variable 'closing' was never mutated; consider changing to 'let' constant\n\
    \    var closing = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let allBrackets = openingBrackets + closingBrackets\n    return allBrackets.count\
    \ == openingBrackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx31aykmk.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpx31aykmk.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return false\n    }\n    if openingBrackets.first == \"(\" {\n  \
    \      openingBrackets.removeFirst()\n    }\n    if closingBrackets.last == \"\
    )\" {\n        closingBrackets.removeLast()\n    }\n    if openingBrackets.last\
    \ != closingBrackets.first {\n        return false\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2_54jc1d.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2_54jc1d.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_bracket = String()\n    var closing_bracket\
    \ = String()\n    var opening_quote = String()\n    var closing_quote = String()\n\
    \    var opening_paren = String()\n    var closing_paren = String()\n    var opening_curly\
    \ = String()\n    var closing_curly = String()\n    var opening_square = String()\n\
    \    var closing_square = String()\n    var opening_curly_bracket = String()\n\
    \    var closing_curly_bracket = String()\n    var opening_square_bracket = String()\n\
    \    var closing_square_bracket = String()\n    var opening_curly_bracket_bracket\
    \ = String()\n    var closing_curly_bracket_bracket = String()\n    var opening_square_bracket_bracket\
    \ = String()\n    var closing_square_bracket_bracket = String()\n    var opening_curly_bracket_bracket_bracket\
    \ = String()\n    var closing_curly_bracket_bracket_bracket = String()\n    var\
    \ opening_square_bracket_bracket_bracket = String()\n    var closing_square_bracket_bracket_bracket\
    \ = String()\n    var opening_curly_bracket_bracket_bracket_bracket = String()\n\
    \    var closing_curly_bracket_bracket_bracket_bracket = String()\n    var opening_square_bracket_bracket_bracket_bracket\
    \ = String()\n    var closing_square_bracket_bracket_bracket_bracket = String()\n\
    \    var opening_curly_bracket_bracket_bracket_bracket_bracket = String()\n  \
    \  var closing_curly_bracket_bracket_bracket_bracket_bracket = String()\n    var\
    \ opening_square_bracket_bracket_bracket_bracket_bracket = String()\n    var closing_square_bracket_bracket_bracket_bracket_bracket\
    \ = String()\n    var opening_curly_bracket_bracket_bracket_bracket_bracket_bracket\
    \ = String()\n    var closing_curly_bracket_bracket_bracket_bracket_bracket_bracket\
    \ = String()\n    var opening_square_bracket_bracket_bracket_bracket_bracket_bracket\
    \ = String()\n    var closing_square_bracket_bracket_bracket_bracket_bracket_bracket\
    \ = String()\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpmtpamtmd.swift:41:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmtpamtmd.swift:5:37: error: 'characters' is unavailable: Please use\
    \ String directly\n    var opening_brackets = brackets.characters\n          \
    \                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpmtpamtmd.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpmtpamtmd.swift:5:9: warning: initialization of variable\
    \ 'opening_brackets' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var opening_brackets = brackets.characters\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpmtpamtmd.swift:6:9: warning: initialization of variable 'closing_brackets'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var closing_brackets = brackets.characters\n    ~~~~^~~~~~~~~~~~~~~~\n   \
    \ _\n/tmp/tmpmtpamtmd.swift:7:9: warning: initialization of variable 'opening_bracket'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var opening_bracket = String()\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpmtpamtmd.swift:8:9:\
    \ warning: initialization of variable 'closing_bracket' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var closing_bracket = String()\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpmtpamtmd.swift:9:9: warning: initialization\
    \ of variable 'opening_quote' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var opening_quote = String()\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpmtpamtmd.swift:10:9: warning: initialization of variable 'closing_quote'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var closing_quote = String()\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpmtpa"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n\
    \    opening_brackets.reverse()\n    closing_brackets.reverse()\n    for opening_bracket\
    \ in opening_brackets {\n        if closing_brackets.contains(opening_bracket)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwb7ndz8m.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwb7ndz8m.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwb7ndz8m.swift:9:22: error: value of type 'String'\
    \ has no member 'reverse'\n    opening_brackets.reverse()\n    ~~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmpwb7ndz8m.swift:10:22: error: value of type 'String' has no\
    \ member 'reverse'\n    closing_brackets.reverse()\n    ~~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    let openingBracketCount = openingBrackets.count\n    let closingBracketCount\
    \ = closingBrackets.count\n    if openingBracketCount != closingBracketCount {\n\
    \        return false\n    }\n    for openingBracket in openingBrackets {\n  \
    \      let closingBracketIndex = openingBrackets.firstIndex(of: openingBracket)\n\
    \        if closingBracketIndex == nil {\n            return false\n        }\n\
    \        let closingBracket = closingBrackets[closingBracketIndex!]\n        if\
    \ openingBracket != closingBracket {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4c90hr9q.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4c90hr9q.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"(\" {\n            openingBracketsCount += 1\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketsCount -= 1\n        }\n        if openingBracketsCount\
    \ < 0 {\n            return false\n        }\n    }\n\n    for closingBracket\
    \ in closingBrackets {\n        if closingBracket == \"(\" {\n            closingBracketsCount\
    \ += 1\n        } else if closingBracket == \")\" {\n            closingBracketsCount\
    \ -= 1\n        }\n        if closingBracketsCount < 0 {\n            return false\n\
    \        }\n    }\n\n    return openingBracketsCount == closingBracketsCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbhvbnvt5.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbhvbnvt5.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbhvbnvt5.swift:5:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpbhvbnvt5.swift:6:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var openingBracketCount = 0\n\
    \    var closingBracketCount = 0\n    for char in brackets {\n        switch char\
    \ {\n        case \"(\":\n            openingBracketCount++\n        case \"[\"\
    :\n            bracketCount++\n        case \"{\":\n            bracketCount++\n\
    \        case \"}\":\n            bracketCount--\n        default:\n         \
    \   if openingBracketCount > 0 {\n                openingBracketCount--\n    \
    \        } else {\n                closingBracketCount++\n            }\n    \
    \    }\n    }\n    return bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprne0206j.swift:11:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            openingBracketCount++\n                  \
    \             ^~\n/tmp/tmprne0206j.swift:13:25: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            bracketCount++\n               \
    \         ^~\n/tmp/tmprne0206j.swift:15:25: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            bracketCount++\n                  \
    \      ^~\n/tmp/tmprne0206j.swift:17:25: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n            bracketCount--\n                        ^~\n\
    /tmp/tmprne0206j.swift:20:36: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n                openingBracketCount--\n                      \
    \             ^~\n/tmp/tmprne0206j.swift:22:36: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n                closingBracketCount++\n    \
    \                               ^~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    while openingBrackets.count > 0 {\n        let\
    \ openingBracket = openingBrackets.first!\n        openingBrackets.remove(at:\
    \ openingBrackets.index(openingBracket, offsetBy: 1))\n        if openingBracket\
    \ == \"(\" {\n            openingBrackets.append(\")\")\n        }\n    }\n\n\
    \    while closingBrackets.count > 0 {\n        let closingBracket = closingBrackets.first!\n\
    \        closingBrackets.remove(at: closingBrackets.index(closingBracket, offsetBy:\
    \ 1))\n        if closingBracket == \")\" {\n            closingBrackets.append(\"\
    (\")\n        }\n    }\n\n    return brackets == String(openingBrackets)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf9w92rq_.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf9w92rq_.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpf9w92rq_.swift:10:58: error: cannot convert value of\
    \ type 'String.Element' (aka 'Character') to expected argument type 'String.Index'\n\
    \        openingBrackets.remove(at: openingBrackets.index(openingBracket, offsetBy:\
    \ 1))\n                                                         ^\n/tmp/tmpf9w92rq_.swift:18:58:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String.Index'\n        closingBrackets.remove(at: closingBrackets.index(closingBracket,\
    \ offsetBy: 1))\n                                                         ^\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n\n    for i in 0..<openingBrackets.count {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzgz3q7j4.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzgz3q7j4.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzgz3q7j4.swift:13:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzgz3q7j4.swift:13:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzgz3q7j4.swift:5:9: warning:\
    \ variable 'openingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var openingBrackets = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpzgz3q7j4.swift:6:9:\
    \ warning: variable 'closingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var closingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBrackets.count {\n        if\
    \ openingBrackets[openingBracketsIndex] == '(' {\n            openingBracketsIndex\
    \ += 1\n        } else if openingBrackets[openingBracketsIndex] == ')' {\n   \
    \         openingBracketsIndex += 1\n            closingBracketsIndex += 1\n \
    \       } else if openingBrackets[openingBracketsIndex] == '[' {\n           \
    \ openingBracketsIndex += 1\n        } else if openingBrackets[openingBracketsIndex]\
    \ == ']' {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else if openingBrackets[openingBracketsIndex] == '{' {\n   \
    \         openingBracketsIndex += 1\n        } else if openingBrackets[openingBracketsIndex]\
    \ == '}' {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else if openingBrackets[openingBracketsIndex] == '<' {\n   \
    \         openingBracketsIndex += 1\n        } else if openingBrackets[openingBracketsIndex]\
    \ == '>' {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n\n    while\
    \ closingBracketsIndex < closingBrackets.count {\n        if closingBrackets[closingBracketsIndex]\
    \ == '(' {\n            closingBracketsIndex += 1\n        } else if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n            closingBracketsIndex += 1\n            openingBracketsIndex\
    \ += 1\n        } else if closingBrackets[closingBracketsIndex] == '[' {\n   \
    \         closingBracketsIndex += 1\n        } else if closingBrackets[closingBracketsIndex]\
    \ == ']' {\n            closingBracketsIndex += 1\n            openingBracketsIndex\
    \ += 1\n        } else if closingBrackets[closingBracketsIndex] == '{' {\n   \
    \         closingBracketsIndex += 1\n        } else if closingBrackets[closingBracketsIndex]\
    \ == '}' {\n            closingBracketsIndex += 1\n            openingBracketsIndex\
    \ += 1\n        } else if closingBrackets[closingBracketsIndex] == '<\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpf21xbfm8.swift:11:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '(' {\n      \
    \                                              ^~~\n                         \
    \                           \"(\"\n/tmp/tmpf21xbfm8.swift:13:60: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketsIndex]\
    \ == ')' {\n                                                           ^~~\n \
    \                                                          \")\"\n/tmp/tmpf21xbfm8.swift:16:60:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketsIndex]\
    \ == '[' {\n                                                           ^~~\n \
    \                                                          \"[\"\n/tmp/tmpf21xbfm8.swift:18:60:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketsIndex]\
    \ == ']' {\n                                                           ^~~\n \
    \                                                          \"]\"\n/tmp/tmpf21xbfm8.swift:21:60:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketsIndex]\
    \ == '{' {\n                                                           ^~~\n \
    \                                                          \"{\"\n/tmp/tmpf21xbfm8.swift:23:60:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketsIndex]\
    \ == '}' {\n                                                           ^~~\n \
    \                                                          \"}\"\n/tmp/tmpf21xbfm8.swift:26:60:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketsIndex]\
    \ == '<' {\n                                                           ^~~\n \
    \                                                          \"<\"\n/tmp/tmpf21xbfm8.swift:28:60:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[openingBracketsIndex]\
    \ == '>' {\n                   "
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   if opening {\n                opening = false\n            } else {\n    \
    \            closing = false\n            }\n        }\n    }\n    return opening\
    \ && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpdcxwkwtz/tmpdcxwkwtz.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad56e478c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad56e16fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad56e16f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad56e16e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdcxwkwtz                        0x000055c537c5040b <unavailable> + 5131

    5    libc.so.6                          0x00002ad56e664460 __libc_start_main +
    245

    6    tmpdcxwkwtz                        0x000055c537c50099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketIndex = openingBrackets.startIndex\n    var closingBracketIndex\
    \ = closingBrackets.startIndex\n    while openingBracketIndex < openingBrackets.endIndex\
    \ {\n        if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n            return false\n        }\n        openingBracketIndex += 1\n \
    \       closingBracketIndex -= 1\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzl2gslzh.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzl2gslzh.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzl2gslzh.swift:15:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpzl2gslzh.swift:16:29: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex -= 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        if c == \"(\" {\n            opening = true\n     \
    \   } else if c == \")\" {\n            closing = true\n        } else if opening\
    \ && closing {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpv_b67o3c/tmpv_b67o3c.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d5671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d5368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d5368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d53677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_b67o3c                        0x000055e8c5e6c6a3 <unavailable> + 5795

    5    libc.so.6                          0x00002ad5d585d460 __libc_start_main +
    245

    6    tmpv_b67o3c                        0x000055e8c5e6c099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBrackets.count {\n        if\
    \ openingBrackets[openingBracketsIndex] == \")\" {\n            closingBracketsIndex\
    \ += 1\n            if closingBracketsIndex < closingBrackets.count {\n      \
    \          openingBracketsIndex += 1\n            } else {\n                return\
    \ false\n            }\n        } else if openingBrackets[openingBracketsIndex]\
    \ != \"(\" {\n            return false\n        }\n        openingBracketsIndex\
    \ += 1\n    }\n\n    while closingBracketsIndex < closingBrackets.count {\n  \
    \      if closingBrackets[closingBracketsIndex] == \")\" {\n            openingBracketsIndex\
    \ += 1\n            if openingBracketsIndex < openingBrackets.count {\n      \
    \          closingBracketsIndex += 1\n            } else {\n                return\
    \ false\n            }\n        } else if closingBrackets[closingBracketsIndex]\
    \ != \"(\" {\n            return false\n        }\n        closingBracketsIndex\
    \ += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3afptjz5.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3afptjz5.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3afptjz5.swift:11:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[openingBracketsIndex] == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3afptjz5.swift:18:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if openingBrackets[openingBracketsIndex]\
    \ != \"(\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3afptjz5.swift:25:12:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if closingBrackets[closingBracketsIndex]\
    \ == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3afptjz5.swift:32:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if closingBrackets[closingBracketsIndex]\
    \ != \"(\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ closingBrackets.contains(where: { $0 == openingBracket }) {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprnw2c_s0.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmprnw2c_s0.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n\n       \
    \ if openingBracket == \"(\" && closingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"(\" && closingBracket != \")\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket != \")\" && closingBracket == \"(\" {\n    \
    \        closingBracketIndex += 1\n        } else {\n            return false\n\
    \        }\n    }\n\n    return openingBracketIndex == brackets.endIndex\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwdz5rdll.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwdz5rdll.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwdz5rdll.swift:15:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpwdz5rdll.swift:16:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpwdz5rdll.swift:18:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpwdz5rdll.swift:20:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var openingBracketCount = 0\n\
    \    var closingBracketCount = 0\n    for character in brackets {\n        if\
    \ character == \"(\" {\n            openingBracketCount += 1\n        } else if\
    \ character == \")\" {\n            closingBracketCount += 1\n        } else {\n\
    \            bracketCount += 1\n        }\n    }\n    if bracketCount == openingBracketCount\
    \ && bracketCount == closingBracketCount {\n        return true\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpz211or53/tmpz211or53.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b7fabbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b7f7b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b7f7b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b7f7b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz211or53                        0x0000558c3b95840b <unavailable> + 5131

    5    libc.so.6                          0x00002b5b7fca7460 __libc_start_main +
    245

    6    tmpz211or53                        0x0000558c3b958099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n\
    \    if opening_brackets.count != closing_brackets.count {\n        return false\n\
    \    }\n    for opening_bracket in opening_brackets {\n        if closing_brackets.contains(opening_bracket)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7cxg1gu0.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7cxg1gu0.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    while openingBrackets.count > 0 {\n        var\
    \ openingBracket = openingBrackets.first!\n        openingBrackets.remove(at:\
    \ openingBrackets.index(openingBracket, offsetBy: 1))\n        openingBrackets.remove(at:\
    \ openingBrackets.index(openingBracket, offsetBy: 1))\n\n        if openingBrackets.count\
    \ > 0 {\n            var closingBracket = openingBrackets.first!\n           \
    \ closingBrackets.remove(at: closingBrackets.index(closingBracket, offsetBy: 1))\n\
    \            closingBrackets.remove(at: closingBrackets.index(closingBracket,\
    \ offsetBy: 1))\n\n            if openingBracket == closingBracket {\n       \
    \         openingBrackets.remove(at: openingBrackets.index(openingBracket, offsetBy:\
    \ 1))\n                closingBrackets.remove(at: closingBrackets.index(closingBracket,\
    \ offsetBy: 1))\n            }\n        }\n    }\n\n    return openingBrackets.count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy7pginim.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy7pginim.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy7pginim.swift:10:58: error: cannot convert value of\
    \ type 'String.Element' (aka 'Character') to expected argument type 'String.Index'\n\
    \        openingBrackets.remove(at: openingBrackets.index(openingBracket, offsetBy:\
    \ 1))\n                                                         ^\n/tmp/tmpy7pginim.swift:11:58:\
    \ error: cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String.Index'\n        openingBrackets.remove(at: openingBrackets.index(openingBracket,\
    \ offsetBy: 1))\n                                                         ^\n\
    /tmp/tmpy7pginim.swift:15:62: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String.Index'\n            closingBrackets.remove(at:\
    \ closingBrackets.index(closingBracket, offsetBy: 1))\n                      \
    \                                       ^\n/tmp/tmpy7pginim.swift:16:62: error:\
    \ cannot convert value of type 'String.Element' (aka 'Character') to expected\
    \ argument type 'String.Index'\n            closingBrackets.remove(at: closingBrackets.index(closingBracket,\
    \ offsetBy: 1))\n                                                            \
    \ ^\n/tmp/tmpy7pginim.swift:19:66: error: cannot convert value of type 'String.Element'\
    \ (aka 'Character') to expected argument type 'String.Index'\n               \
    \ openingBrackets.remove(at: openingBrackets.index(openingBracket, offsetBy: 1))\n\
    \                   "
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeFirst()\n    closingBrackets.removeLast()\n\
    \    if openingBrackets.isEmpty() {\n        return false\n    }\n    if closingBrackets.isEmpty()\
    \ {\n        return false\n    }\n    if openingBrackets.first == closingBrackets.first\
    \ {\n        return false\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return false\n    }\n    if openingBrackets.last == closingBrackets.first\
    \ {\n        return false\n    }\n    if openingBrackets.last == closingBrackets.last\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpge82uar0.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpge82uar0.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpge82uar0.swift:9:24: error: cannot call value of non-function\
    \ type 'Bool'\n    if openingBrackets.isEmpty() {\n                       ^  \
    \    ~~\n                              \n/tmp/tmpge82uar0.swift:12:24: error:\
    \ cannot call value of non-function type 'Bool'\n    if closingBrackets.isEmpty()\
    \ {\n                       ^      ~~\n                              \n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpksytyag0.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpksytyag0.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpksytyag0.swift:13:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpksytyag0.swift:13:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   if opening {\n                opening = false\n            } else {\n    \
    \            closing = false\n            }\n        }\n    }\n    return opening\
    \ && !closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp1f0m17sg/tmp1f0m17sg.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b27c4e39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b27c4b30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b27c4b30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b27c4b2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1f0m17sg                        0x000055dcebc5e40b <unavailable> + 5131

    5    libc.so.6                          0x00002b27c5025460 __libc_start_main +
    245

    6    tmp1f0m17sg                        0x000055dcebc5e099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            if opening\
    \ {\n                return false\n            }\n            opening = true\n\
    \        case \"[\":\n            if closing {\n                return false\n\
    \            }\n            closing = true\n        case \")\":\n            if\
    \ !opening {\n                return false\n            }\n            opening\
    \ = false\n        default:\n            if !opening && !closing {\n         \
    \       return false\n            }\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpba1c3_tv/tmpba1c3_tv.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac414182c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac413e79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac413e79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac413e787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba1c3_tv                        0x000055e83f5134a9 <unavailable> + 5289

    5    libc.so.6                          0x00002ac41436e460 __libc_start_main +
    245

    6    tmpba1c3_tv                        0x000055e83f513099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n\n  \
    \  while openingBracketIndex < openingBrackets.count {\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n            return false\n        }\n        openingBracketCount\
    \ += 1\n        openingBracketIndex += 1\n    }\n\n    while closingBracketIndex\
    \ < closingBrackets.count {\n        guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n            return false\n        }\n        closingBracketCount\
    \ += 1\n        closingBracketIndex += 1\n    }\n\n    if openingBracketCount\
    \ != closingBracketCount {\n        return false\n    }\n\n    while openingBracketIndex\
    \ < openingBrackets.count {\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n    }\n\n    while closingBracketIndex < closingBrackets.count {\n   \
    \     guard closingBrackets[closingBracketIndex] == ')' else {\n            return\
    \ false\n        }\n        closingBracketIndex += 1\n    }\n\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfuztydor.swift:13:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmpfuztydor.swift:21:55: error:\
    \ single-quoted string literal found, use '\"'\n        guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpfuztydor.swift:33:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n                                                      ^~~\n \
    \                                                     \"(\"\n/tmp/tmpfuztydor.swift:40:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpfuztydor.swift:5:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpfuztydor.swift:6:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfuztydor.swift:13:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if openingBrackets.last == closingBrackets.first\
    \ {\n        return false\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdlseuhwa.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdlseuhwa.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   if opening {\n                opening = false\n            } else {\n    \
    \            closing = false\n            }\n        }\n    }\n    return !opening\
    \ && !closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpe3fqhh8e/tmpe3fqhh8e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76e297dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76e2674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76e2674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76e26737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3fqhh8e                        0x000055a520cd56a3 <unavailable> + 5795

    5    libc.so.6                          0x00002b76e2b69460 __libc_start_main +
    245

    6    tmpe3fqhh8e                        0x000055a520cd5099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for char in brackets {\n  \
    \      if char == \"(\" {\n            bracketCount += 1\n        } else if char\
    \ == \")\" {\n            bracketCount -= 1\n            if bracketCount == 0\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpocm57lbv/tmpocm57lbv.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59b792cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59b7623b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59b7623988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59b76227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpocm57lbv                        0x0000555d3017740b <unavailable> + 5131

    5    libc.so.6                          0x00002b59b7b18460 __libc_start_main +
    245

    6    tmpocm57lbv                        0x0000555d30177099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   if opening {\n                opening = false\n            }\n           \
    \ if closing {\n                closing = false\n            }\n        }\n  \
    \  }\n    return !opening && !closing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp5kli8ifo/tmp5kli8ifo.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad85e817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad85e50eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad85e50e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad85e50d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kli8ifo                        0x000055e92689a6a3 <unavailable> + 5795

    5    libc.so.6                          0x00002ad85ea03460 __libc_start_main +
    245

    6    tmp5kli8ifo                        0x000055e92689a099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = -1\n    var closingBracketIndex\
    \ = -1\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n\n \
    \   for index in 0..<brackets.characters.count {\n        let character = brackets.characters[index]\n\
    \        switch character {\n        case \"(\":\n            openingBracketCount++\n\
    \            if openingBracketIndex == -1 {\n                openingBracketIndex\
    \ = index\n            }\n        case \"[\":\n            openingBracketCount++\n\
    \            if openingBracketIndex == -1 {\n                openingBracketIndex\
    \ = index\n            }\n        case \"{\":\n            openingBracketCount++\n\
    \            if openingBracketIndex == -1 {\n                openingBracketIndex\
    \ = index\n            }\n        case \"(\":\n            closingBracketCount++\n\
    \            if closingBracketIndex == -1 {\n                closingBracketIndex\
    \ = index\n            }\n        case \"[\":\n            closingBracketCount++\n\
    \            if closingBracketIndex == -1 {\n                closingBracketIndex\
    \ = index\n            }\n        case \"{\":\n            closingBracketCount++\n\
    \            if closingBracketIndex == -1 {\n                closingBracketIndex\
    \ = index\n            }\n        default:\n            break\n        }\n   \
    \ }\n\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n\n    if openingBracketIndex == -1 {\n        return true\n    }\n\n \
    \   if openingBracketIndex < closingBracketIndex {\n        return false\n   \
    \ }\n\n    let openingBracket = brackets.characters[openingBracketIndex]\n   \
    \ let closingBracket = brackets.characters[closingBracketIndex]\n\n    if openingBracket\
    \ != closingBracket {\n        return false\n    }\n\n    return correct_bracketing(brackets.substringWithRange(NSMakeRange(openingBracketIndex\
    \ + 1, brackets.characters.count - openingBracketIndex - 1)))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp04gxi4nu.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp04gxi4nu.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp04gxi4nu.swift:12:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in 0..<brackets.characters.count {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp04gxi4nu.swift:13:25: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ character = brackets.characters[index]\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp04gxi4nu.swift:13:34:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ character = brackets.characters[index]\n                                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp04gxi4nu.swift:16:32:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  openingBracketCount++\n                               ^~\n/tmp/tmp04gxi4nu.swift:21:32:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  openingBracketCount++\n                               ^~\n/tmp/tmp04gxi4nu.swift:26:32:\
    \ error: cannot find operator '++' in scope; did you mean '+="
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var openingBracketCount = 0\n\
    \    var closingBracketCount = 0\n    var openingBracket: Character?\n    var\
    \ closingBracket: Character?\n    for character in brackets {\n        switch\
    \ character {\n        case \"(\":\n            openingBracketCount++\n      \
    \      openingBracket = character\n        case \"[\":\n            bracketCount++\n\
    \        case \"{\":\n            bracketCount++\n        case \"(\":\n      \
    \      closingBracketCount++\n            closingBracket = character\n       \
    \ default:\n            if openingBracketCount > 0 {\n                openingBracketCount--\n\
    \                if openingBracketCount == 0 {\n                    openingBracket\
    \ = nil\n                }\n            }\n            if closingBracketCount\
    \ > 0 {\n                closingBracketCount--\n                if closingBracketCount\
    \ == 0 {\n                    closingBracket = nil\n                }\n      \
    \      }\n        }\n    }\n    return bracketCount == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptqbsinde.swift:13:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            openingBracketCount++\n                  \
    \             ^~\n/tmp/tmptqbsinde.swift:16:25: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            bracketCount++\n               \
    \         ^~\n/tmp/tmptqbsinde.swift:18:25: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            bracketCount++\n                  \
    \      ^~\n/tmp/tmptqbsinde.swift:20:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            closingBracketCount++\n                  \
    \             ^~\n/tmp/tmptqbsinde.swift:24:36: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n                openingBracketCount--\n    \
    \                               ^~\n/tmp/tmptqbsinde.swift:30:36: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n                closingBracketCount--\n\
    \                                   ^~\n/tmp/tmptqbsinde.swift:19:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case \"(\":\n             ^~~\n/tmp/tmptqbsinde.swift:12:14: note: first\
    \ occurrence of identical literal pattern is here\n        case \"(\":\n     \
    \        ^~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n    var isCorrect = true\n    while openingBrackets.count > 0 || closingBrackets.count\
    \ > 0 {\n        if openingBrackets.count > 0 && closingBrackets.count > 0 {\n\
    \            if openingBrackets.last == closingBrackets.first {\n            \
    \    openingBrackets.removeLast()\n                closingBrackets.removeFirst()\n\
    \                openingBracketsCount--\n                closingBracketsCount--\n\
    \            } else {\n                isCorrect = false\n            }\n    \
    \    } else if openingBrackets.count > 0 {\n            openingBrackets.removeLast()\n\
    \            openingBracketsCount--\n        } else if closingBrackets.count >\
    \ 0 {\n            closingBrackets.removeFirst()\n            closingBracketsCount--\n\
    \        }\n    }\n    return isCorrect\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpk2ytb2fa.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk2ytb2fa.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpk2ytb2fa.swift:15:37: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n                openingBracketsCount--\n   \
    \                                 ^~\n/tmp/tmpk2ytb2fa.swift:16:37: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n                closingBracketsCount--\n\
    \                                    ^~\n/tmp/tmpk2ytb2fa.swift:22:33: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmpk2ytb2fa.swift:25:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracket = String()\n    var closingBracket\
    \ = String()\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"(\" {\n            openingBrackets.removeFirst()\n            closingBrackets.removeLast()\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \")\" {\n            openingBrackets.removeLast()\n            closingBrackets.removeFirst()\n\
    \        }\n    }\n\n    return openingBrackets.count == 0 && closingBrackets.count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7x1ogffu.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7x1ogffu.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7x1ogffu.swift:7:9: warning: initialization of variable\
    \ 'openingBracket' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var openingBracket = String()\n    ~~~~^~~~~~~~~~~~~~\n   \
    \ _\n/tmp/tmp7x1ogffu.swift:8:9: warning: initialization of variable 'closingBracket'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var closingBracket = String()\n    ~~~~^~~~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n        if\
    \ openingBracket == \"(\" && closingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"(\" && closingBracket == \"}\" {\n            openingBracketIndex += 1\n\
    \            closingBracketIndex += 1\n        } else if openingBracket == \"\
    {\" && closingBracket == \"}\" {\n            openingBracketIndex += 1\n     \
    \       closingBracketIndex += 1\n        } else if openingBracket == \"[\" &&\
    \ closingBracket == \"]\" {\n            openingBracketIndex += 1\n          \
    \  closingBracketIndex += 1\n        } else if openingBracket == \"[\" && closingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"<\" && closingBracket == \">\" {\n\
    \            openingBracketIndex += 1\n            closingBracketIndex += 1\n\
    \        } else if openingBracket == \"<\" && closingBracket == \"/>\" {\n   \
    \         openingBracketIndex += 1\n            closingBracketIndex += 1\n   \
    \     } else if openingBracket == \"<\" && closingBracket == \"/>\" {\n      \
    \      openingBracketIndex += 1\n            closingBracketIndex += 1\n      \
    \  } else if openingBracket == \"<\" && closingBracket == \"/>\" {\n         \
    \   openingBracketIndex += 1\n            closingBracketIndex += 1\n        }\
    \ else if openingBracket == \"<\" && closingBracket == \"/>\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"<\" && closingBracket == \"/>\" {\n            openingBracketIndex += 1\n\
    \            closingBracketIndex += 1\n        } else if openingBracket == \"\
    <\" && closingBracket == \"/>\" {\n            openingBracketIndex += 1\n    \
    \        closingBracketIndex += 1\n        } else if openingBracket == \"<\" &&\
    \ closingBracket == \"/>\" {\n            openingBracketIndex += 1\n         \
    \   closingBracketIndex += 1\n        } else if open\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpiu4f1qnl.swift:51:23: error: expected '{' after 'if' condition\n\
    \        } else if open\n                      ^\n/tmp/tmpiu4f1qnl.swift:78:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpiu4f1qnl.swift:4:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpiu4f1qnl.swift:5:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiu4f1qnl.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiu4f1qnl.swift:13:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpiu4f1qnl.swift:14:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpiu4f1qnl.swift:16:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpiu4f1qnl.swift:17:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpiu4f1qnl.swift:19:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   if opening {\n                opening = false\n            }\n           \
    \ if closing {\n                closing = false\n            }\n        }\n  \
    \  }\n    return !opening && !closing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp5kli8ifo/tmp5kli8ifo.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad85e817c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad85e50eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad85e50e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad85e50d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5kli8ifo                        0x000055e92689a6a3 <unavailable> + 5795

    5    libc.so.6                          0x00002ad85ea03460 __libc_start_main +
    245

    6    tmp5kli8ifo                        0x000055e92689a099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    // If brackets is empty, return true\n    if openingBrackets.isEmpty\
    \ {\n        return true\n    }\n\n    // If brackets contains only opening brackets,\
    \ return true\n    if closingBrackets.isEmpty {\n        return true\n    }\n\n\
    \    // If brackets contains only closing brackets, return false\n    if openingBrackets.count\
    \ == closingBrackets.count {\n        return false\n    }\n\n    // If brackets\
    \ contains only opening brackets and closing brackets, return false\n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n\n    // If brackets\
    \ contains only opening brackets, return false\n    if openingBrackets.count ==\
    \ 1 {\n        return false\n    }\n\n    // If brackets contains only closing\
    \ brackets, return false\n    if closingBrackets.count == 1 {\n        return\
    \ false\n    }\n\n    // If brackets contains only opening brackets and closing\
    \ brackets, return false\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n\n    // If brackets contains only opening brackets,\
    \ return false\n    if openingBrackets.count == 1 {\n        return false\n  \
    \  }\n\n    // If brackets contains only closing brackets, return false\n    if\
    \ closingBrackets.count == 1 {\n        return false\n    }\n\n    // If brackets\
    \ contains only opening brackets and closing brackets, return false\n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n\n    // If brackets\
    \ contains only opening brackets, return false\n    if openingBrackets.count ==\
    \ 1 {\n        return false\n    }\n\n    // If brackets contains only closing\
    \ brackets, return false\n    if closingBrackets.count == 1 {\n        return\
    \ false\n    }\n\n    // If brackets contains only opening brackets and closing\
    \ brackets, return false\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n\n    // If brackets contains only opening brackets,\
    \ return false\n    if openingBrackets.count == 1 {\n        return false\n  \
    \  }\n\n    // If brackets contains only closing brackets, return false\n    if\
    \ closingBrackets.count == 1 {\n        return false\n    }\n\n    // If brackets\
    \ contains only opening brackets and closing brackets, return false\n    if openingBrackets.count\
    \ != closingBrackets.count {\n        return false\n    }\n\n    // If brackets\
    \ contains only opening brackets, return false\n    if openingBrackets.count ==\
    \ 1 {\n        return false\n    }\n\n    // If brackets contains only closing\
    \ bracket\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm6nlfi5h.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpm6nlfi5h.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpm6nlfi5h.swift:5:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpm6nlfi5h.swift:6:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n\n       \
    \ if openingBracket == \"(\" && closingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"(\" && closingBracket != \"(\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket != \")\" && closingBracket == \"(\" {\n    \
    \        closingBracketIndex += 1\n        } else {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpd45g_rmh.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd45g_rmh.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd45g_rmh.swift:15:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpd45g_rmh.swift:16:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpd45g_rmh.swift:18:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpd45g_rmh.swift:20:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n\n       \
    \ if openingBracket == \"(\" {\n            openingBracketIndex += 1\n       \
    \ } else if openingBracket == \")\" {\n            closingBracketIndex -= 1\n\
    \        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"[\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"]\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n        } else if openingBracket == \")\" {\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"[\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"]\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        } else if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        }\n\n        openingBrackets[openingBracketIndex] = closingBracket\n\
    \        closingBrackets[closingBracketIndex] = opening\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyn8bi5_i.swift:88:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpyn8bi5_i.swift:4:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpyn8bi5_i.swift:5:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpyn8bi5_i.swift:6:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyn8bi5_i.swift:15:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpyn8bi5_i.swift:17:33: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex -= 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpyn8bi5_i.swift:19:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpyn8bi5_i.swift:20:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpyn8bi5_i.swift:22:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpyn8bi5_i.swift:23:33: error:\
    \ binary operator '-=' cannot be applied"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_index = brackets.startIndex\n\
    \    var closing_brackets_index = brackets.startIndex\n    var opening_brackets_count\
    \ = brackets.characters.count\n    var closing_brackets_count = brackets.characters.count\n\
    \    var opening_bracket = String()\n    var closing_bracket = String()\n\n  \
    \  while opening_brackets_index < opening_brackets_count {\n        opening_bracket\
    \ = brackets[opening_brackets_index]\n        opening_brackets_index++\n     \
    \   if opening_brackets_index == opening_brackets_count {\n            opening_brackets_index\
    \ = 0\n        }\n        if opening_bracket == \"(\" {\n            opening_brackets_count--\n\
    \        }\n        if opening_bracket == \")\" {\n            opening_brackets_count++\n\
    \        }\n    }\n\n    while closing_brackets_index < closing_brackets_count\
    \ {\n        closing_bracket = brackets[closing_brackets_index]\n        closing_brackets_index++\n\
    \        if closing_brackets_index == closing_brackets_count {\n            closing_brackets_index\
    \ = 0\n        }\n        if closing_bracket == \"(\" {\n            closing_brackets_count--\n\
    \        }\n        if closing_bracket == \")\" {\n            closing_brackets_count++\n\
    \        }\n    }\n\n    if opening_brackets_count != closing_brackets_count {\n\
    \        return false\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt840hoa7.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt840hoa7.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt840hoa7.swift:9:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpt840hoa7.swift:10:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpt840hoa7.swift:14:34:\
    \ error: referencing operator function '<' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n    while opening_brackets_index < opening_brackets_count\
    \ {\n                                 ^\nSwift.BinaryInteger:1:11: note: where\
    \ 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n/tmp/tmpt840hoa7.swift:15:35:\
    \ error: cannot assign value of type 'Character' to type 'String'\n        opening_bracket\
    \ = brackets[opening_brackets_index]\n                          ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpt840hoa7.swift:16:31: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n        opening_brackets_index++\n                           \
    \   ^~\n/tmp/tmpt840hoa7.swift:17:35: error: refer"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketsCount = 0\n    var bracketsStack = [String]()\n\
    \    for bracket in brackets {\n        if bracket == \"(\" {\n            bracketsStack.append(bracket)\n\
    \            bracketsCount++\n        } else if bracket == \")\" {\n         \
    \   if bracketsStack.count > 0 {\n                bracketsStack.removeLast()\n\
    \                bracketsCount--\n            } else {\n                return\
    \ false\n            }\n        }\n    }\n    return bracketsCount == 0\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpxw1gnvdg.swift:9:34: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            bracketsStack.append(bracket)\n\
    \                                 ^\n/tmp/tmpxw1gnvdg.swift:10:26: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            bracketsCount++\n\
    \                         ^~\n/tmp/tmpxw1gnvdg.swift:14:30: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n                bracketsCount--\n\
    \                             ^~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n\n    if opening_brackets.count < 1 {\n        return\
    \ false\n    }\n\n    if opening_brackets.count > 1 {\n        let opening_bracket\
    \ = opening_brackets[0]\n        let closing_bracket = closing_brackets[0]\n \
    \       if opening_bracket != closing_bracket {\n            return false\n  \
    \      }\n    }\n\n    for index in 1..<opening_brackets.count {\n        let\
    \ opening_bracket = opening_brackets[index]\n        let closing_bracket = closing_brackets[index]\n\
    \        if opening_bracket != closing_bracket {\n            return false\n \
    \       }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdmyqenze.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdmyqenze.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdmyqenze.swift:13:31: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ opening_bracket = opening_brackets[0]\n                              ^~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpdmyqenze.swift:14:31:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let closing_bracket = closing_brackets[0]\n\
    \                              ^~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpdmyqenze.swift:21:31: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let opening_bracket = opening_brackets[index]\n                     \
    \         ^~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpdmyqenze.swift:22:31: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let closing_bracket = closing_brackets[index]\n                     \
    \         ^~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for bracket in brackets {\n\
    \        if bracket == \"(\" {\n            bracketCount++\n        } else if\
    \ bracket == \")\" {\n            bracketCount--\n        }\n        if bracketCount\
    \ < 0 {\n            return false\n        }\n    }\n    return bracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykuukc0r.swift:8:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            bracketCount++\n                        ^~\n\
    /tmp/tmpykuukc0r.swift:10:25: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            bracketCount--\n                        ^~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var openingBracketCount = 0\n\
    \    var closingBracketCount = 0\n    for b in brackets {\n        switch b {\n\
    \        case \"(\":\n            openingBracketCount++\n        case \"[\":\n\
    \            bracketCount++\n        case \"{\":\n            bracketCount++\n\
    \        case \"}\":\n            bracketCount--\n        default:\n         \
    \   bracketCount = 0\n        }\n        if bracketCount != 0 {\n            return\
    \ false\n        }\n    }\n    return openingBracketCount == closingBracketCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpx5tjxj3e.swift:11:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            openingBracketCount++\n                  \
    \             ^~\n/tmp/tmpx5tjxj3e.swift:13:25: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            bracketCount++\n               \
    \         ^~\n/tmp/tmpx5tjxj3e.swift:15:25: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            bracketCount++\n                  \
    \      ^~\n/tmp/tmpx5tjxj3e.swift:17:25: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n            bracketCount--\n                        ^~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n    var opening_opening_brackets\
    \ = false\n    var opening_closing_brackets = false\n    var opening_opening_brackets_count\
    \ = opening_brackets_count\n    var opening_closing_brackets_count = closing_brackets_count\n\
    \n    for opening_bracket in opening_brackets {\n        if opening_bracket ==\
    \ \"(\" {\n            opening_opening_brackets = true\n            opening_opening_brackets_count\
    \ += 1\n        } else if opening_bracket == \")\" {\n            opening_closing_brackets\
    \ = true\n            opening_closing_brackets_count += 1\n        }\n    }\n\n\
    \    for closing_bracket in closing_brackets {\n        if closing_bracket ==\
    \ \"(\" {\n            opening_closing_brackets = true\n            opening_closing_brackets_count\
    \ += 1\n        } else if closing_bracket == \")\" {\n            opening_opening_brackets\
    \ = true\n            opening_opening_brackets_count += 1\n        }\n    }\n\n\
    \    if opening_opening_brackets == opening_opening_brackets_count && opening_closing_brackets\
    \ == opening_closing_brackets_count {\n        return true\n    }\n\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe7i1z6n9.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe7i1z6n9.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpe7i1z6n9.swift:7:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpe7i1z6n9.swift:8:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpe7i1z6n9.swift:34:33:\
    \ error: binary operator '==' cannot be applied to operands of type 'Bool' and\
    \ 'Int'\n    if opening_opening_brackets == opening_opening_brackets_count &&\
    \ opening_closing_brackets == opening_closing_brackets_count {\n       ~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpe7i1z6n9.swift:34:33: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Bool, Bool),\
    \ (Int, Int)\n    if opening_opening_brackets == opening_opening_brackets_count\
    \ && opening_closing_brackets == opening_closing_brackets_count {\n          \
    \                      ^\n/tmp/tmpe7i1z6n9.swift:34:95: error: binary operator\
    \ '==' cannot be applied to operands of type 'Bool' and 'Int'\n    if opening_opening_brackets\
    \ == op"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ '(' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == ')' else {\n   \
    \         return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == ')' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == ')' else {\n   \
    \         return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == ')' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == ')' else {\n   \
    \         return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == ')' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == ')' else {\n   \
    \         return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == ')' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == ')' else {\n   \
    \         return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == ')' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpt0kgf201.swift:10:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmpt0kgf201.swift:14:55: error:\
    \ single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpt0kgf201.swift:18:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpt0kgf201.swift:22:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n                                                      ^~~\n \
    \                                                     \"(\"\n/tmp/tmpt0kgf201.swift:26:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpt0kgf201.swift:30:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpt0kgf201.swift:34:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == '(' else {\n                                                      ^~~\n \
    \                                                     \"(\"\n/tmp/tmpt0kgf201.swift:38:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \         "
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n\n    // If brackets is empty, return true\n    if opening_brackets.isEmpty\
    \ {\n        return true\n    }\n\n    // If brackets is only one character, return\
    \ true\n    if opening_brackets.count == 1 {\n        return true\n    }\n\n \
    \   // If brackets is only a closing bracket, return true\n    if closing_brackets.count\
    \ == 1 {\n        return true\n    }\n\n    // If brackets is only an opening\
    \ bracket, return true\n    if closing_brackets.count == 0 {\n        return true\n\
    \    }\n\n    // If brackets is only a closing bracket and a opening bracket,\
    \ return true\n    if closing_brackets.count == 1 && opening_brackets.count ==\
    \ 1 {\n        return true\n    }\n\n    // If brackets is only a closing bracket\
    \ and a closing bracket, return true\n    if closing_brackets.count == 1 && opening_brackets.count\
    \ == 0 {\n        return true\n    }\n\n    // If brackets is only an opening\
    \ bracket and a closing bracket, return true\n    if closing_brackets.count ==\
    \ 0 && opening_brackets.count == 1 {\n        return true\n    }\n\n    // If\
    \ brackets is only an opening bracket and a closing bracket, return true\n   \
    \ if closing_brackets.count == 0 && opening_brackets.count == 0 {\n        return\
    \ true\n    }\n\n    // If brackets is only a closing bracket and a closing bracket,\
    \ return true\n    if closing_brackets.count == 1 && opening_brackets.count ==\
    \ 1 {\n        return true\n    }\n\n    // If brackets is only a closing bracket\
    \ and a closing bracket, return true\n    if closing_brackets.count == 1 && opening_brackets.count\
    \ == 0 {\n        return true\n    }\n\n    // If brackets is only an opening\
    \ bracket and a closing bracket, return true\n    if closing_brackets.count ==\
    \ 0 && opening_brackets.count == 1 {\n        return true\n    }\n\n    // If\
    \ brackets is only an opening bracket and a closing bracket, return true\n   \
    \ if closing_brackets.count == 0 && opening_brackets.count == 0 {\n        return\
    \ true\n    }\n\n    // If brackets is only a closing bracket and a closing bracket,\
    \ return true\n    if closing_brackets.count == 1 && opening_brackets.count ==\
    \ 1 {\n        return true\n    }\n\n    // If brackets is only a closing bracket\
    \ and a closing bracket, return true\n    if closing_brackets.count == 1 && opening_brackets.count\
    \ == 0 {\n        return true\n    }\n\n    // If brackets is only an opening\
    \ bracket and a \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpprvebwh_.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpprvebwh_.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpprvebwh_.swift:5:9: warning: variable 'opening_brackets'\
    \ was never mutated; consider changing to 'let' constant\n    var opening_brackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpprvebwh_.swift:6:9: warning:\
    \ variable 'closing_brackets' was never mutated; consider changing to 'let' constant\n\
    \    var closing_brackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        if c == \"(\" {\n            opening = true\n     \
    \   } else if c == \")\" {\n            closing = true\n        } else if opening\
    \ && closing {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpv_b67o3c/tmpv_b67o3c.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d5671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d5368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d5368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d53677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_b67o3c                        0x000055e8c5e6c6a3 <unavailable> + 5795

    5    libc.so.6                          0x00002ad5d585d460 __libc_start_main +
    245

    6    tmpv_b67o3c                        0x000055e8c5e6c099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ opening_bracket = \"\"\n    var closing_bracket = \"\"\n    for b in brackets\
    \ {\n        switch b {\n        case \"(\":\n            opening = true\n   \
    \         opening_bracket = b\n        case \"[\":\n            opening = true\n\
    \            opening_bracket = b\n        case \"{\":\n            opening = true\n\
    \            opening_bracket = b\n        case \"(\":\n            closing = true\n\
    \            closing_bracket = b\n        case \"}\":\n            closing = true\n\
    \            closing_bracket = b\n        default:\n            if opening {\n\
    \                opening = false\n                opening_bracket = \"\"\n   \
    \         }\n            if closing {\n                closing = false\n     \
    \           closing_bracket = \"\"\n            }\n        }\n    }\n    return\
    \ opening && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3twsjhvg.swift:13:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = b\n                        \
    \      ^\n/tmp/tmp3twsjhvg.swift:16:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = b\n                        \
    \      ^\n/tmp/tmp3twsjhvg.swift:19:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = b\n                        \
    \      ^\n/tmp/tmp3twsjhvg.swift:22:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            closing_bracket = b\n                        \
    \      ^\n/tmp/tmp3twsjhvg.swift:25:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            closing_bracket = b\n                        \
    \      ^\n/tmp/tmp3twsjhvg.swift:20:14: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n        case \"(\":\n           \
    \  ^~~\n/tmp/tmp3twsjhvg.swift:11:14: note: first occurrence of identical literal\
    \ pattern is here\n        case \"(\":\n             ^~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpksytyag0.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpksytyag0.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpksytyag0.swift:13:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpksytyag0.swift:13:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for bracket in brackets {\n\
    \        if bracket == \"(\" {\n            bracketCount++\n        } else if\
    \ bracket == \")\" {\n            bracketCount--\n        }\n        if bracketCount\
    \ < 0 {\n            return false\n        }\n    }\n    return bracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykuukc0r.swift:8:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            bracketCount++\n                        ^~\n\
    /tmp/tmpykuukc0r.swift:10:25: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            bracketCount--\n                        ^~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n    var opening_brackets_index\
    \ = 0\n    var closing_brackets_index = 0\n\n    while opening_brackets_index\
    \ < opening_brackets_count {\n        let opening_bracket = opening_brackets[opening_brackets_index]\n\
    \        opening_brackets_index += 1 // increment index\n        if opening_bracket\
    \ == \"(\" {\n            opening_brackets_count += 1\n        } else if opening_bracket\
    \ == \")\" {\n            opening_brackets_count -= 1\n        }\n    }\n\n  \
    \  while closing_brackets_index < closing_brackets_count {\n        let closing_bracket\
    \ = closing_brackets[closing_brackets_index]\n        closing_brackets_index +=\
    \ 1 // increment index\n        if closing_bracket == \"(\" {\n            closing_brackets_count\
    \ += 1\n        } else if closing_bracket == \")\" {\n            closing_brackets_count\
    \ -= 1\n        }\n    }\n\n    return opening_brackets_count == closing_brackets_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp_4rwslsh.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_4rwslsh.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp_4rwslsh.swift:7:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp_4rwslsh.swift:8:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_4rwslsh.swift:13:31:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let opening_bracket = opening_brackets[opening_brackets_index]\n\
    \                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp_4rwslsh.swift:23:31:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let closing_bracket = closing_brackets[closing_brackets_index]\n\
    \                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explic"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n\n    for i in 0..<openingBrackets.count {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzgz3q7j4.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzgz3q7j4.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzgz3q7j4.swift:13:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzgz3q7j4.swift:13:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzgz3q7j4.swift:5:9: warning:\
    \ variable 'openingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var openingBrackets = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpzgz3q7j4.swift:6:9:\
    \ warning: variable 'closingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var closingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsLastIndex = 0\n\
    \    var closingBracketsLastIndex = 0\n    var openingBracketsLastChar = String()\n\
    \    var closingBracketsLastChar = String()\n\n    while openingBracketsIndex\
    \ < openingBracketsCount {\n        openingBracketsLastIndex = openingBracketsIndex\n\
    \        openingBracketsLastChar = openingBrackets[openingBracketsIndex]\n   \
    \     openingBracketsIndex += 1\n\n        while closingBracketsIndex < closingBracketsCount\
    \ {\n            closingBracketsLastIndex = closingBracketsIndex\n           \
    \ closingBracketsLastChar = closingBrackets[closingBracketsIndex]\n          \
    \  closingBracketsIndex += 1\n\n            if openingBracketsLastChar == closingBracketsLastChar\
    \ {\n                openingBracketsCount -= 1\n                closingBracketsCount\
    \ -= 1\n            } else {\n                break\n            }\n        }\n\
    \n        if openingBracketsIndex == openingBracketsCount {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpdd9yf4h5.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdd9yf4h5.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpdd9yf4h5.swift:7:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpdd9yf4h5.swift:8:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpdd9yf4h5.swift:18:50: error: cannot assign\
    \ value of type 'Character' to type 'String'\n        openingBracketsLastChar\
    \ = openingBrackets[openingBracketsIndex]\n                                  ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpdd9yf4h5.swift:23:54: error: cannot assign value of type 'Character' to\
    \ type 'String'\n            closingBracketsLastChar = closingBrackets[closingBracketsIndex]\n\
    \                                      ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpksytyag0.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpksytyag0.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpksytyag0.swift:13:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpksytyag0.swift:13:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp363vyi44.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp363vyi44.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        if c == \"(\" {\n            opening = true\n     \
    \   } else if c == \")\" {\n            closing = true\n        } else if opening\
    \ && closing {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpv_b67o3c/tmpv_b67o3c.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad5d5671c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad5d5368b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad5d5368988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5d53677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv_b67o3c                        0x000055e8c5e6c6a3 <unavailable> + 5795

    5    libc.so.6                          0x00002ad5d585d460 __libc_start_main +
    245

    6    tmpv_b67o3c                        0x000055e8c5e6c099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracket = openingBrackets.startIndex\n\
    \    var closingBracket = closingBrackets.startIndex\n\n    while openingBracket\
    \ < openingBrackets.endIndex {\n        if openingBrackets[openingBracket] ==\
    \ \"(\" {\n            openingBracket++\n        } else {\n            openingBracket\
    \ = openingBrackets.startIndex\n        }\n    }\n\n    while closingBracket <\
    \ closingBrackets.endIndex {\n        if closingBrackets[closingBracket] == \"\
    )\" {\n            closingBracket++\n        } else {\n            closingBracket\
    \ = closingBrackets.startIndex\n        }\n    }\n\n    return openingBrackets.startIndex\
    \ == closingBrackets.startIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnvwulle6.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnvwulle6.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnvwulle6.swift:13:27: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracket++\n             \
    \             ^~\n/tmp/tmpnvwulle6.swift:21:27: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            closingBracket++\n             \
    \             ^~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        switch openingBrackets[openingBracketIndex] {\n\
    \        case \"(\":\n            openingBracketIndex += 1\n        case \"[\"\
    :\n            openingBracketIndex += 1\n        case \"{\":\n            openingBracketIndex\
    \ += 1\n        case \"\\\"\":\n            openingBracketIndex += 1\n       \
    \ case \"'\":\n            openingBracketIndex += 1\n        case \"`\":\n   \
    \         openingBracketIndex += 1\n        default:\n            openingBracketIndex\
    \ += 1\n            continue\n        }\n\n        if openingBracketIndex < brackets.endIndex\
    \ {\n            switch closingBrackets[closingBracketIndex] {\n            case\
    \ \")\":\n                closingBracketIndex += 1\n            case \"}\":\n\
    \                closingBracketIndex += 1\n            case \"]\":\n         \
    \       closingBracketIndex += 1\n            case \"\\\"\":\n               \
    \ closingBracketIndex += 1\n            case \"'\":\n                closingBracketIndex\
    \ += 1\n            case \"`\":\n                closingBracketIndex += 1\n  \
    \          default:\n                closingBracketIndex += 1\n              \
    \  continue\n            }\n        }\n\n        if openingBracketIndex < brackets.endIndex\
    \ && closingBracketIndex < brackets.endIndex {\n            if openingBrackets[openingBracketIndex]\
    \ != closingBrackets[closingBracketIndex] {\n                return false\n  \
    \          }\n        }\n\n        openingBracketIndex += 1\n        closingBracketIndex\
    \ += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl82snsw9.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpl82snsw9.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpl82snsw9.swift:13:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpl82snsw9.swift:15:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpl82snsw9.swift:17:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpl82snsw9.swift:19:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpl82snsw9.swift:21:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpl82snsw9.swift:23:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpl82snsw9.swift:25:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpl82snsw9.swift:32:37: error:\
    \ binary operator '+=' c"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ openBracket = \"\"\n    var closeBracket = \"\"\n\n    for char in brackets\
    \ {\n        switch char {\n        case \"(\":\n            opening = true\n\
    \            openBracket = char\n        case \"[\":\n            opening = true\n\
    \            openBracket = char\n        case \"{\":\n            opening = true\n\
    \            openBracket = char\n        case \"(\":\n            closing = true\n\
    \            closeBracket = char\n        default:\n            closing = true\n\
    \            closeBracket = char\n        }\n    }\n\n    return opening && closing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfe2s6j_z.swift:14:27: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            openBracket = char\n                         \
    \ ^~~~\n/tmp/tmpfe2s6j_z.swift:17:27: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            openBracket = char\n                         \
    \ ^~~~\n/tmp/tmpfe2s6j_z.swift:20:27: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            openBracket = char\n                         \
    \ ^~~~\n/tmp/tmpfe2s6j_z.swift:23:28: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            closeBracket = char\n                        \
    \   ^~~~\n/tmp/tmpfe2s6j_z.swift:26:28: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            closeBracket = char\n                        \
    \   ^~~~\n/tmp/tmpfe2s6j_z.swift:21:14: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n        case \"(\":\n           \
    \  ^~~\n/tmp/tmpfe2s6j_z.swift:12:14: note: first occurrence of identical literal\
    \ pattern is here\n        case \"(\":\n             ^~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    for openingBracket in openingBrackets {\n     \
    \   if openingBracket == \"(\" {\n            openingBrackets.removeLast()\n \
    \           closingBrackets.removeLast()\n        } else if openingBracket ==\
    \ \")\" {\n            openingBrackets.removeLast()\n            closingBrackets.removeLast()\n\
    \        } else {\n            return false\n        }\n    }\n\n    return openingBrackets.isEmpty\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpps8yjb5b.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpps8yjb5b.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n\n    while openingBracketIndex < openingBrackets.count {\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n\n        while closingBracketIndex\
    \ < closingBrackets.count {\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                return false\n            }\n            closingBracketIndex\
    \ += 1\n        }\n\n        openingBracketIndex += 1\n        closingBracketIndex\
    \ = 0\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0w30jqao.swift:11:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmp0w30jqao.swift:17:59: error:\
    \ single-quoted string literal found, use '\"'\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                                                          ^~~\n\
    \                                                          \")\"\n/tmp/tmp0w30jqao.swift:5:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp0w30jqao.swift:6:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0w30jqao.swift:11:15: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        guard\
    \ openingBrackets[openingBracketIndex] == '(' else {\n              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0w30jqao.swift:17:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            guard closingBrackets[closingBracketIndex]\
    \ == ')' else {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp0w30jqao.swift:5:9:\
    \ warning: variable 'openingBrackets' was never mutated; c"
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        if c == \"(\" {\n            opening = true\n     \
    \   } else if c == \")\" {\n            closing = true\n        } else {\n   \
    \         return false\n        }\n    }\n    return opening && closing\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp_2k8z29b/tmp_2k8z29b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e2f7fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e2f4f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e2f4f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e2f4f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2k8z29b                        0x0000559f0a8716a3 <unavailable> + 5795

    5    libc.so.6                          0x00002b0e2f9e7460 __libc_start_main +
    245

    6    tmp_2k8z29b                        0x0000559f0a871099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = false\n        case \"{\"\
    :\n            opening = false\n        case \"}\":\n            closing = true\n\
    \        default:\n            assert(false, \"unexpected bracket\")\n       \
    \ }\n    }\n    return opening && closing\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpw20haq5c/tmpw20haq5c.swift:18: Assertion failed: unexpected bracket

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d41d58c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d41a4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d41a4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d41a4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 365

    4    tmpw20haq5c                        0x000055713e0c1025 <unavailable> + 8229

    5    tmpw20haq5c                        0x000055713e0c0396 <unavailable> + 5014

    6    libc.so.6                          0x00002b7d41f44460 __libc_start_main +
    245

    7    tmpw20haq5c                        0x000055713e0c0099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ opening_bracket = \"\"\n    var closing_bracket = \"\"\n\n    for char in brackets\
    \ {\n        switch char {\n        case \"(\":\n            opening = true\n\
    \            opening_bracket = char\n        case \"[\":\n            opening\
    \ = true\n            opening_bracket = char\n        case \"{\":\n          \
    \  opening = true\n            opening_bracket = char\n        case \"(\":\n \
    \           closing = true\n            closing_bracket = char\n        case \"\
    )\":\n            closing = true\n            closing_bracket = char\n       \
    \ case \"}\":\n            closing = true\n            closing_bracket = char\n\
    \        default:\n            if opening {\n                opening = false\n\
    \                opening_bracket = \"\"\n            }\n            if closing\
    \ {\n                closing = false\n                closing_bracket = \"\"\n\
    \            }\n        }\n    }\n\n    return opening && closing\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptaw_lhi2.swift:14:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = char\n                     \
    \         ^~~~\n/tmp/tmptaw_lhi2.swift:17:31: error: cannot assign value of type\
    \ 'Character' to type 'String'\n            opening_bracket = char\n         \
    \                     ^~~~\n/tmp/tmptaw_lhi2.swift:20:31: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            opening_bracket = char\n\
    \                              ^~~~\n/tmp/tmptaw_lhi2.swift:23:31: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            closing_bracket\
    \ = char\n                              ^~~~\n/tmp/tmptaw_lhi2.swift:26:31: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            closing_bracket\
    \ = char\n                              ^~~~\n/tmp/tmptaw_lhi2.swift:29:31: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            closing_bracket\
    \ = char\n                              ^~~~\n/tmp/tmptaw_lhi2.swift:21:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case \"(\":\n             ^~~\n/tmp/tmptaw_lhi2.swift:12:14: note: first\
    \ occurrence of identical literal pattern is here\n        case \"(\":\n     \
    \        ^~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"(\" {\n            openingBracketsCount += 1\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketsCount -= 1\n        }\n    }\n\n    for\
    \ closingBracket in closingBrackets {\n        if closingBracket == \"(\" {\n\
    \            closingBracketsCount += 1\n        } else if closingBracket == \"\
    )\" {\n            closingBracketsCount -= 1\n        }\n    }\n\n    return openingBracketsCount\
    \ == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy6hb1wuy.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy6hb1wuy.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy6hb1wuy.swift:5:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpy6hb1wuy.swift:6:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        if c == \"(\" {\n            opening = true\n     \
    \   } else if c == \")\" {\n            closing = true\n        } else {\n   \
    \         return false\n        }\n    }\n    return opening && closing\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp_2k8z29b/tmp_2k8z29b.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e2f7fbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e2f4f2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0e2f4f2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0e2f4f17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_2k8z29b                        0x0000559f0a8716a3 <unavailable> + 5795

    5    libc.so.6                          0x00002b0e2f9e7460 __libc_start_main +
    245

    6    tmp_2k8z29b                        0x0000559f0a871099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = -1\n    var closingBracketIndex\
    \ = -1\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n   \
    \ for index in 0..<brackets.characters.count {\n        let character = brackets.characters[index]\n\
    \        if character == \"(\" {\n            openingBracketCount += 1\n     \
    \       openingBracketIndex = index\n        } else if character == \")\" {\n\
    \            closingBracketCount += 1\n            closingBracketIndex = index\n\
    \        }\n    }\n    if openingBracketCount != closingBracketCount {\n     \
    \   return false\n    }\n    if openingBracketIndex == -1 || closingBracketIndex\
    \ == -1 {\n        return false\n    }\n    if openingBracketIndex < closingBracketIndex\
    \ {\n        return true\n    }\n    if openingBracketIndex > closingBracketIndex\
    \ {\n        return false\n    }\n    if openingBracketCount > 1 {\n        let\
    \ openingBracket = brackets.characters[openingBracketIndex]\n        let closingBracket\
    \ = brackets.characters[closingBracketIndex]\n        if openingBracket == \"\
    (\" && closingBracket != \")\" {\n            return false\n        }\n      \
    \  if openingBracket != \")\" && closingBracket == \"(\" {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcxgrvuza.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcxgrvuza.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcxgrvuza.swift:11:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in 0..<brackets.characters.count {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcxgrvuza.swift:12:25: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ character = brackets.characters[index]\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcxgrvuza.swift:12:34:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ character = brackets.characters[index]\n                                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpcxgrvuza.swift:34:30:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let openingBracket = brackets.characters[openingBracketIndex]\n\
    \                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n    "
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            if opening\
    \ {\n                return false\n            }\n            opening = true\n\
    \        case \"[\":\n            if closing {\n                return false\n\
    \            }\n            closing = true\n        case \")\":\n            if\
    \ !opening {\n                return false\n            }\n            opening\
    \ = false\n        case \"]\":\n            if !closing {\n                return\
    \ false\n            }\n            closing = false\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpq5__pytj.swift:8:9: error: switch must be exhaustive\n        switch\
    \ c {\n        ^\n/tmp/tmpq5__pytj.swift:8:9: note: do you want to add a default\
    \ clause?\n        switch c {\n        ^\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.first(where: { $0 == openingBracket })\n  \
    \      \n        if closingBracket == nil {\n            return false\n      \
    \  }\n        \n        if openingBracket != closingBracket! {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5de0iz1g.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5de0iz1g.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketsCorrect = false\n    var openingBrackets\
    \ = brackets.characters\n    var closingBrackets = brackets.characters\n    var\
    \ openingBracket = openingBrackets.startIndex\n    var closingBracket = closingBrackets.startIndex\n\
    \    while openingBracket != closingBracket {\n        if openingBrackets[openingBracket]\
    \ != \"(\" {\n            bracketsCorrect = false\n            break\n       \
    \ }\n        openingBracket++\n        if openingBracket == closingBrackets.endIndex\
    \ {\n            bracketsCorrect = false\n            break\n        }\n     \
    \   if openingBrackets[openingBracket] != \")\" {\n            bracketsCorrect\
    \ = false\n            break\n        }\n        closingBracket--\n        if\
    \ closingBracket == openingBrackets.startIndex {\n            bracketsCorrect\
    \ = false\n            break\n        }\n    }\n    return bracketsCorrect\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqxvlilf8.swift:6:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqxvlilf8.swift:7:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqxvlilf8.swift:15:23: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        openingBracket++\n                 \
    \     ^~\n/tmp/tmpqxvlilf8.swift:24:23: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n        closingBracket--\n                      ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n\n       \
    \ if openingBracket == \"(\" {\n            openingBracketIndex += 1\n       \
    \ } else if openingBracket == \")\" {\n            closingBracketIndex -= 1\n\
    \        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ -= 1\n        }\n\n        if openingBracketIndex < brackets.endIndex && closingBracketIndex\
    \ < brackets.endIndex {\n            let openingBracket = openingBrackets[openingBracketIndex]\n\
    \            let closingBracket = closingBrackets[closingBracketIndex]\n\n   \
    \         if openingBracket == \"(\" {\n                openingBracketIndex +=\
    \ 1\n            } else if openingBracket == \")\" {\n                closingBracketIndex\
    \ -= 1\n            } else if openingBracket == \"{\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            } else if openingBracket\
    \ == \"}\" {\n                openingBracketIndex += 1\n                closingBracketIndex\
    \ -= 1\n            }\n        }\n\n        if openingBracketIndex < brackets.endIndex\
    \ && closingBracketIndex < brackets.endIndex {\n            let openingBracket\
    \ = openingBrackets[openingBracketIndex]\n            let closingBracket = closingBrackets[closingBracketIndex]\n\
    \n            if openingBracket == \"(\" {\n                openingBracketIndex\
    \ += 1\n            } else if openingBracket == \")\" {\n                closingBracketIndex\
    \ -= 1\n            } else if openingBracket == \"{\" {\n                openingBracketIndex\
    \ += 1\n                closingBracketIndex += 1\n            } else if openingBracket\
    \ == \"}\" {\n                openingBracketIndex += 1\n                closingBracketIndex\
    \ -= 1\n            }\n        }\n    }\n\n    return openingBracketIndex == brackets.endIndex\
    \ && closingBracketIndex == brackets.endIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpnnnjqsz4.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnnnjqsz4.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpnnnjqsz4.swift:15:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpnnnjqsz4.swift:17:33: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex -= 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpnnnjqsz4.swift:19:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpnnnjqsz4.swift:20:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpnnnjqsz4.swift:22:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpnnnjqsz4.swift:23:33: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex -= 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpnnnjqsz4.swift:31:37: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n                openingBracketIndex\
    \ += 1\n                ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpnnnjqsz4.swift:33:37:\
    \ error: binary operato"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBrackets.count {\n        let\
    \ openingBracket = openingBrackets[openingBracketsIndex]\n        let closingBracket\
    \ = closingBrackets[closingBracketsIndex]\n\n        if openingBracket == \"(\"\
    \ {\n            openingBracketsIndex += 1\n        } else if openingBracket ==\
    \ \")\" {\n            closingBracketsIndex += 1\n        } else if openingBracket\
    \ == \"{\" {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else if openingBracket == \"}\" {\n            openingBracketsIndex\
    \ += 1\n        } else if openingBracket == \"[\" {\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n        } else if openingBracket\
    \ == \"]\" {\n            openingBracketsIndex += 1\n        } else if openingBracket\
    \ == \"<\" {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else if openingBracket == \">\" {\n            openingBracketsIndex\
    \ += 1\n        } else if openingBracket == \"/\" {\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n        } else if openingBracket\
    \ == \"*\" {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else if openingBracket == \"%\" {\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n        } else if openingBracket\
    \ == \"+\" {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else if openingBracket == \"-\" {\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n        } else if openingBracket\
    \ == \".\" {\n            openingBracketsIndex += 1\n            closingBracketsIndex\
    \ += 1\n        } else if openingBracket == \"=\" { // Equals sign\n         \
    \   openingBracketsIndex += 1\n            closingBracketsIndex += 1\n       \
    \ } else if openingBracket == \"!\" { // Exclamation mark\n            openingBracketsIndex\
    \ += 1\n            closingBracketsIndex += 1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvcj4vllf.swift:83:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpvcj4vllf.swift:10:56:\
    \ note: to match this opening '{'\n    while openingBracketsIndex < openingBrackets.count\
    \ {\n                                                       ^\n/tmp/tmpvcj4vllf.swift:83:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpvcj4vllf.swift:4:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpvcj4vllf.swift:5:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvcj4vllf.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvcj4vllf.swift:11:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingBracket = openingBrackets[openingBracketsIndex]\n                   \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpvcj4vllf.swift:12:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let closingBracket = closingBrackets[closingBracketsIndex]\n        \
    \                     ^~~~~~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketsCount = 0\n    var openingBracketCount =\
    \ 0\n    var closingBracketCount = 0\n    for symbol in brackets {\n        switch\
    \ symbol {\n        case \"(\":\n            openingBracketCount++\n        case\
    \ \"[\":\n            bracketsCount++\n        case \"{\":\n            bracketsCount++\n\
    \        case \"}\":\n            bracketsCount--\n        default:\n        \
    \    bracketsCount = 0\n        }\n        if bracketsCount < 0 {\n          \
    \  return false\n        }\n    }\n    return openingBracketCount == closingBracketCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyshhtwz9.swift:11:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            openingBracketCount++\n                  \
    \             ^~\n/tmp/tmpyshhtwz9.swift:13:26: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            bracketsCount++\n              \
    \           ^~\n/tmp/tmpyshhtwz9.swift:15:26: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            bracketsCount++\n              \
    \           ^~\n/tmp/tmpyshhtwz9.swift:17:26: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n            bracketsCount--\n              \
    \           ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeFirst()\n    closing_brackets.removeLast()\n\
    \    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n    if\
    \ opening_brackets.isEmpty() {\n        return true\n    }\n    if closing_brackets.isEmpty()\
    \ {\n        return false\n    }\n    if opening_brackets.first != closing_brackets.first\
    \ {\n        return false\n    }\n    return correct_bracketing(String(opening_brackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp49t7c0k5.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp49t7c0k5.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp49t7c0k5.swift:11:25: error: cannot call value of non-function\
    \ type 'Bool'\n    if opening_brackets.isEmpty() {\n                        ^\
    \      ~~\n                               \n/tmp/tmp49t7c0k5.swift:14:25: error:\
    \ cannot call value of non-function type 'Bool'\n    if closing_brackets.isEmpty()\
    \ {\n                        ^      ~~\n                               \n/tmp/tmp49t7c0k5.swift:20:31:\
    \ error: missing argument label 'brackets:' in call\n    return correct_bracketing(String(opening_brackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = -1\n    var closingBracketIndex\
    \ = -1\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n   \
    \ var openingBracketFound = false\n    var closingBracketFound = false\n\n   \
    \ for openingBracketIndex < openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[openingBracketIndex]\n        openingBracketCount += 1\n\n\
    \        if openingBracketCount > 1 {\n            if openingBracketFound, closingBracketFound,\
    \ openingBracketCount > closingBracketCount {\n                openingBracketFound\
    \ = false\n                closingBracketFound = false\n                openingBracketCount\
    \ = 1\n                closingBracketCount = 1\n            } else {\n       \
    \         openingBracketFound = false\n                closingBracketFound = false\n\
    \                openingBracketCount = 1\n                closingBracketCount\
    \ = 1\n            }\n        } else {\n            if openingBracketFound, closingBracketFound,\
    \ openingBracketCount > closingBracketCount {\n                openingBracketFound\
    \ = false\n                closingBracketFound = false\n                openingBracketCount\
    \ = 1\n                closingBracketCount = 1\n            } else {\n       \
    \         openingBracketFound = false\n                closingBracketFound = false\n\
    \                openingBracketCount = 1\n                closingBracketCount\
    \ = 1\n            }\n        }\n\n        if openingBracketCount > 1 {\n    \
    \        if openingBracketFound, closingBracketFound, openingBracketCount > closingBracketCount\
    \ {\n                openingBracketFound = false\n                closingBracketFound\
    \ = false\n                openingBracketCount = 1\n                closingBracketCount\
    \ = 1\n            } else {\n                openingBracketFound = false\n   \
    \             closingBracketFound = false\n                openingBracketCount\
    \ = 1\n                closingBracketCount = 1\n            }\n        } else\
    \ {\n            if openingBracketFound, closingBracketFound, openingBracketCount\
    \ > closingBracketCount {\n                openingBracketFound = false\n     \
    \           closingBracketFound = false\n                openingBracketCount =\
    \ 1\n                closingBracketCount = 1\n            } else {\n         \
    \       openingBracketFound = false\n                closingBracketFound = false\n\
    \                openingBracketCount = 1\n                closingBracketCount\
    \ = 1\n            }\n        }\n\n        if openingBracketCount > 1 {\n    \
    \        if openingBracketFound, closingBracketFound, openingBracketCount > closingBracket\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp5olr_gr.swift:14:29: error: expected 'in' after for-each pattern\n\
    \    for openingBracketIndex < openingBrackets.count {\n                     \
    \       ^\n/tmp/tmpp5olr_gr.swift:14:29: error: unary operator cannot be separated\
    \ from its operand\n    for openingBracketIndex < openingBrackets.count {\n  \
    \                          ^~\n                             \n/tmp/tmpp5olr_gr.swift:71:94:\
    \ error: expected '{' after 'if' condition\n            if openingBracketFound,\
    \ closingBracketFound, openingBracketCount > closingBracket\n                \
    \                                                                            \
    \ ^\n/tmp/tmpp5olr_gr.swift:98:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpp5olr_gr.swift:14:53:\
    \ note: to match this opening '{'\n    for openingBracketIndex < openingBrackets.count\
    \ {\n                                                    ^\n/tmp/tmpp5olr_gr.swift:98:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpp5olr_gr.swift:4:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpp5olr_gr.swift:5:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp5olr_gr.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp5olr_gr.swift:14:29: error: '<' is not a"
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \")\":\n            closing = true\n        case \"}\":\n      \
    \      closing = true\n        default:\n            if opening {\n          \
    \      opening = false\n            }\n            if closing {\n            \
    \    closing = false\n            }\n        }\n    }\n    return opening && closing\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpo6xiaw1p/tmpo6xiaw1p.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fa25a1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fa2298b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1fa2298988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1fa22977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo6xiaw1p                        0x0000560cd8c9c6a3 <unavailable> + 5795

    5    libc.so.6                          0x00002b1fa278d460 __libc_start_main +
    245

    6    tmpo6xiaw1p                        0x0000560cd8c9c099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n\n       \
    \ if openingBracket == \"(\" && closingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"(\" && closingBracket != \")\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket != \")\" && closingBracket == \"(\" {\n    \
    \        closingBracketIndex += 1\n        } else {\n            return false\n\
    \        }\n    }\n\n    return openingBracketIndex == brackets.endIndex\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwdz5rdll.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwdz5rdll.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwdz5rdll.swift:15:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpwdz5rdll.swift:16:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpwdz5rdll.swift:18:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpwdz5rdll.swift:20:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    while openingBrackets.count > 0 {\n        if openingBrackets.first\
    \ == \"(\" {\n            openingBrackets.remove(at: openingBrackets.startIndex)\n\
    \            closingBrackets.remove(at: closingBrackets.startIndex)\n        }\
    \ else {\n            openingBrackets.remove(at: openingBrackets.startIndex)\n\
    \        }\n    }\n\n    return openingBrackets.count == 0 && closingBrackets.count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpp3yp56br.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpp3yp56br.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ lastChar = String()\n    for char in brackets {\n        switch char {\n   \
    \     case \"(\":\n            if opening {\n                return false\n  \
    \          }\n            opening = true\n            lastChar = char\n      \
    \  case \"[\":\n            if closing {\n                return false\n     \
    \       }\n            closing = true\n            lastChar = char\n        case\
    \ \")\":\n            if !opening {\n                return false\n          \
    \  }\n            opening = false\n            lastChar = char\n        default:\n\
    \            if !opening && !closing {\n                return false\n       \
    \     }\n            lastChar = char\n        }\n    }\n    if opening {\n   \
    \     return false\n    }\n    if closing {\n        return false\n    }\n   \
    \ if lastChar != \"\" {\n        return false\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0oy56k5b.swift:15:24: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            lastChar = char\n                       ^~~~\n\
    /tmp/tmp0oy56k5b.swift:21:24: error: cannot assign value of type 'Character' to\
    \ type 'String'\n            lastChar = char\n                       ^~~~\n/tmp/tmp0oy56k5b.swift:27:24:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  lastChar = char\n                       ^~~~\n/tmp/tmp0oy56k5b.swift:32:24:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  lastChar = char\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ '(' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBracketIndex < brackets.endIndex else {\n       \
    \     return false\n        }\n        guard closingBrackets[openingBracketIndex]\
    \ == ')' else {\n            return false\n        }\n        closingBracketIndex\
    \ += 1\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpwb7_88ou.swift:11:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmpwb7_88ou.swift:18:55: error:\
    \ single-quoted string literal found, use '\"'\n        guard closingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpwb7_88ou.swift:5:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpwb7_88ou.swift:6:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpwb7_88ou.swift:14:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpwb7_88ou.swift:21:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    openingBrackets.reverse()\n    closingBrackets.reverse()\n    for openingBracket\
    \ in openingBrackets {\n        if closingBrackets.contains(openingBracket) {\n\
    \            return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph3md7pcm.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph3md7pcm.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph3md7pcm.swift:9:21: error: value of type 'String'\
    \ has no member 'reverse'\n    openingBrackets.reverse()\n    ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n/tmp/tmph3md7pcm.swift:10:21: error: value of type 'String' has no\
    \ member 'reverse'\n    closingBrackets.reverse()\n    ~~~~~~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ opening_bracket: String = \"\"\n    var closing_bracket: String = \"\"\n\n \
    \   for character in brackets {\n        switch character {\n        case \"(\"\
    :\n            opening = true\n            opening_bracket = character\n     \
    \   case \"[\":\n            opening = true\n            opening_bracket = character\n\
    \        case \"{\":\n            opening = true\n            opening_bracket\
    \ = character\n        case \"(\":\n            closing = true\n            closing_bracket\
    \ = character\n        default:\n            if opening {\n                opening\
    \ = false\n                opening_bracket = \"\"\n            }\n           \
    \ if closing {\n                closing = false\n                closing_bracket\
    \ = \"\"\n            }\n        }\n    }\n\n    return opening_bracket == closing_bracket\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkavrmwhv.swift:14:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = character\n                \
    \              ^~~~~~~~~\n/tmp/tmpkavrmwhv.swift:17:31: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            opening_bracket = character\n\
    \                              ^~~~~~~~~\n/tmp/tmpkavrmwhv.swift:20:31: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            opening_bracket\
    \ = character\n                              ^~~~~~~~~\n/tmp/tmpkavrmwhv.swift:23:31:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  closing_bracket = character\n                              ^~~~~~~~~\n/tmp/tmpkavrmwhv.swift:21:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"(\":\n             ^~~\n/tmp/tmpkavrmwhv.swift:12:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"(\":\n\
    \             ^~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n    var opening_parenthesis\
    \ = false\n    var opening_curly_bracket = false\n    var opening_square_bracket\
    \ = false\n    var opening_curly_brackets = false\n    var opening_square_brackets\
    \ = false\n    var opening_curly_brackets_count = brackets.characters.count\n\
    \    var opening_square_brackets_count = brackets.characters.count\n    var opening_square_brackets_count_minus_one\
    \ = false\n    var opening_curly_brackets_count_minus_one = false\n    var opening_curly_brackets_count_minus_two\
    \ = false\n    var opening_square_brackets_count_minus_one = false\n    var opening_square_brackets_count_minus_two\
    \ = false\n    var opening_square_brackets_count_minus_three = false\n    var\
    \ opening_square_brackets_count_minus_four = false\n    var opening_square_brackets_count_minus_five\
    \ = false\n    var opening_square_brackets_count_minus_six = false\n    var opening_square_brackets_count_minus_seven\
    \ = false\n    var opening_square_brackets_count_minus_eight = false\n    var\
    \ opening_square_brackets_count_minus_nine = false\n    var opening_square_brackets_count_minus_ten\
    \ = false\n    var opening_square_brackets_count_minus_eleven = false\n    var\
    \ opening_square_brackets_count_minus_twelve = false\n    var opening_square_brackets_count_minus_thirteen\
    \ = false\n    var opening_square_brackets_count_minus_fourteen = false\n    var\
    \ opening_square_brackets_count_minus_fifteen = false\n    var opening_square_brackets_count_minus_sixteen\
    \ = false\n    var opening_square_brackets_count_minus_seventeen = false\n   \
    \ var opening_square_brackets_count_minus_eighteen = false\n    var opening_square_brackets_count_minus_nineteen\
    \ = false\n    var opening_square_brackets_count_minus_twenty = false\n    var\
    \ opening_square_brackets_count_minus_twenty_one = false\n    var opening_square_brackets_count_minus_twenty_two\
    \ = false\n    var opening_square_brackets_count_minus_twenty_three = false\n\
    \    var opening_square\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfsl9m266.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfsl9m266.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfsl9m266.swift:7:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpfsl9m266.swift:8:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpfsl9m266.swift:14:49:\
    \ error: 'characters' is unavailable: Please use String directly\n    var opening_curly_brackets_count\
    \ = brackets.characters.count\n                                              \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpfsl9m266.swift:15:50:\
    \ error: 'characters' is unavailable: Please use String directly\n    var opening_square_brackets_count\
    \ = brackets.characters.count\n                                              \
    \   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpfsl9m266.swift:19:9:\
    \ error: invalid redeclaration of 'op"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for bracket in brackets {\n\
    \        switch bracket {\n        case \"(\":\n            bracketCount++\n \
    \       case \"[\":\n            bracketCount++\n        case \"{\":\n       \
    \     bracketCount++\n        case \"}\":\n            bracketCount--\n      \
    \  default:\n            return false\n        }\n    }\n    return bracketCount\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn2vidved.swift:9:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            bracketCount++\n                        ^~\n\
    /tmp/tmpn2vidved.swift:11:25: error: cannot find operator '++' in scope; did you\
    \ mean '+= 1'?\n            bracketCount++\n                        ^~\n/tmp/tmpn2vidved.swift:13:25:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  bracketCount++\n                        ^~\n/tmp/tmpn2vidved.swift:15:25: error:\
    \ cannot find operator '--' in scope; did you mean '-= 1'?\n            bracketCount--\n\
    \                        ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ opening_bracket = \"\"\n    var closing_bracket = \"\"\n    for c in brackets\
    \ {\n        switch c {\n        case \"(\":\n            opening = true\n   \
    \         opening_bracket = c\n        case \"[\":\n            opening = true\n\
    \            opening_bracket = c\n        case \"{\":\n            opening = true\n\
    \            opening_bracket = c\n        case \"(\":\n            closing = true\n\
    \            closing_bracket = c\n        case \"}\":\n            closing = true\n\
    \            closing_bracket = c\n        default:\n            if opening {\n\
    \                opening = false\n                opening_bracket = \"\"\n   \
    \         }\n            if closing {\n                closing = false\n     \
    \           closing_bracket = \"\"\n            }\n        }\n    }\n    return\
    \ opening && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp56x9uz52.swift:13:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = c\n                        \
    \      ^\n/tmp/tmp56x9uz52.swift:16:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = c\n                        \
    \      ^\n/tmp/tmp56x9uz52.swift:19:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = c\n                        \
    \      ^\n/tmp/tmp56x9uz52.swift:22:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            closing_bracket = c\n                        \
    \      ^\n/tmp/tmp56x9uz52.swift:25:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            closing_bracket = c\n                        \
    \      ^\n/tmp/tmp56x9uz52.swift:20:14: warning: literal value is already handled\
    \ by previous pattern; consider removing it\n        case \"(\":\n           \
    \  ^~~\n/tmp/tmp56x9uz52.swift:11:14: note: first occurrence of identical literal\
    \ pattern is here\n        case \"(\":\n             ^~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n\
    \    if opening_brackets.isEmpty {\n        return false\n    }\n    if closing_brackets.isEmpty\
    \ {\n        return true\n    }\n    if opening_brackets.first != closing_brackets.last\
    \ {\n        return false\n    }\n    return correct_bracketing(String(opening_brackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqzed67im.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqzed67im.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqzed67im.swift:18:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(opening_brackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = -1\n    var closingBracketIndex\
    \ = -1\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n   \
    \ for index in 0..<brackets.characters.count {\n        let character = brackets.characters[index]\n\
    \        if character == \"(\" {\n            openingBracketCount += 1\n     \
    \       openingBracketIndex = index\n        } else if character == \")\" {\n\
    \            closingBracketCount += 1\n            closingBracketIndex = index\n\
    \        }\n    }\n    if openingBracketCount != closingBracketCount {\n     \
    \   return false\n    }\n    if openingBracketIndex == -1 || closingBracketIndex\
    \ == -1 {\n        return false\n    }\n    if openingBracketIndex < closingBracketIndex\
    \ {\n        for index in openingBracketIndex..<closingBracketIndex {\n      \
    \      let character = brackets.characters[index]\n            if character ==\
    \ \"(\" {\n                openingBracketCount -= 1\n            } else if character\
    \ == \")\" {\n                closingBracketCount -= 1\n            }\n      \
    \  }\n    }\n    if openingBracketCount != 0 {\n        return false\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpvv8hujve.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvv8hujve.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvv8hujve.swift:11:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in 0..<brackets.characters.count {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvv8hujve.swift:12:25: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ character = brackets.characters[index]\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvv8hujve.swift:12:34:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ character = brackets.characters[index]\n                                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvv8hujve.swift:29:29:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            let character = brackets.characters[index]\n\
    \                            ^~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpvv8hujve.swif"
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ char in brackets {\n        switch char {\n        case \"(\":\n           \
    \ opening = true\n        case \"[\":\n            opening = true\n        case\
    \ \"{\":\n            opening = true\n        case \"(\":\n            closing\
    \ = true\n        case \"[\":\n            closing = true\n        case \"{\"\
    :\n            closing = true\n        default:\n            continue\n      \
    \  }\n        if opening && !closing {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp3_tmtgrt/tmp3_tmtgrt.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0879c85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b087997cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b087997c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b087997b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_tmtgrt                        0x000056382de0240b <unavailable> + 5131

    5    libc.so.6                          0x00002b0879e71460 __libc_start_main +
    245

    6    tmp3_tmtgrt                        0x000056382de02099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_index = brackets.startIndex\n\
    \    var closing_brackets_index = brackets.startIndex\n\n    while opening_brackets_index\
    \ < brackets.endIndex {\n        let opening_bracket = opening_brackets[opening_brackets_index]\n\
    \        let closing_bracket = closing_brackets[closing_brackets_index]\n\n  \
    \      if opening_bracket == \"(\" && closing_bracket == \")\" {\n           \
    \ opening_brackets_index += 1 // skip the opening bracket\n            closing_brackets_index\
    \ += 1 // skip the closing bracket\n        } else if opening_bracket == \"(\"\
    \ && closing_bracket == \"}\" {\n            opening_brackets_index += 1 // skip\
    \ the opening bracket\n            closing_brackets_index += 1 // skip the closing\
    \ bracket\n        } else if opening_bracket == \"{\" && closing_bracket == \"\
    }\" {\n            opening_brackets_index += 1 // skip the opening bracket\n \
    \           closing_brackets_index += 1 // skip the closing bracket\n        }\
    \ else if opening_bracket == \"[\" && closing_bracket == \"]\" {\n           \
    \ opening_brackets_index += 1 // skip the opening bracket\n            closing_brackets_index\
    \ += 1 // skip the closing bracket\n        } else if opening_bracket == \"[\"\
    \ && closing_bracket == \"}\" {\n            opening_brackets_index += 1 // skip\
    \ the opening bracket\n            closing_brackets_index += 1 // skip the closing\
    \ bracket\n        } else if opening_bracket == \"<\" && closing_bracket == \"\
    >\" {\n            opening_brackets_index += 1 // skip the opening bracket\n \
    \           closing_brackets_index += 1 // skip the closing bracket\n        }\
    \ else if opening_bracket == \"<\" && closing_bracket == \"/>\" {\n          \
    \  opening_brackets_index += 1 // skip the opening bracket\n            closing_brackets_index\
    \ += 1 // skip the closing bracket\n        } else if opening_bracket == \"<\"\
    \ && closing_bracket == \"/>\" {\n            opening_brackets_index += 1 // skip\
    \ the opening bracket\n            closing_brackets_index += 1 // skip the closing\
    \ bracket\n        } else if opening_bracket == \"<\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpg_iyn4_x.swift:38:38: error: unterminated string literal\n    \
    \    } else if opening_bracket == \"<\n                                     ^\n\
    /tmp/tmpg_iyn4_x.swift:65:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmpg_iyn4_x.swift:4:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmpg_iyn4_x.swift:5:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    var opening_brackets\
    \ = brackets.characters\n                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpg_iyn4_x.swift:6:37: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpg_iyn4_x.swift:15:36: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            opening_brackets_index\
    \ += 1 // skip the opening bracket\n            ~~~~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpg_iyn4_x.swift:16:36: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n            closing_brackets_index\
    \ += 1 // skip the closing bracket\n            ~~~~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpg_iyn4_x.swift:18:36: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n            opening_brackets_index\
    \ += 1 // skip the opening bracket\n            ~~~~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmpg_iyn4_x.swift:19:36: error: binary operator '+=' cannot be applied to\
    \ operands of type 'String.Index' and 'Int'\n            closing_brackets_index\
    \ += 1 // skip the closing bracket\n            ~~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for char in brackets {\n  \
    \      switch char {\n        case \"(\":\n            bracketCount += 1\n   \
    \     case \"[\":\n            bracketCount += 2\n        case \"]\":\n      \
    \      bracketCount -= 2\n        default:\n            return false\n       \
    \ }\n    }\n    return bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpd6t7qs1s/tmpd6t7qs1s.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acaa280cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acaa2503b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acaa2503988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acaa25027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd6t7qs1s                        0x000055df24f3640b <unavailable> + 5131

    5    libc.so.6                          0x00002acaa29f8460 __libc_start_main +
    245

    6    tmpd6t7qs1s                        0x000055df24f36099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = 1\n    var closingCount = 1\n  \
    \  for _ in brackets.characters {\n        openingCount++\n        closingCount++\n\
    \        if openingCount == closing {\n            return false\n        }\n \
    \       if openingCount > closing {\n            opening = String(opening.suffix(openingCount\
    \ - closing))\n            closing = String(closing.prefix(closingCount - openingCount))\n\
    \            openingCount = 1\n            closingCount = 1\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4itxi870.swift:5:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp4itxi870.swift:6:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp4itxi870.swift:9:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    for _ in\
    \ brackets.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp4itxi870.swift:10:21: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingCount++\n     \
    \               ^~\n/tmp/tmp4itxi870.swift:11:21: error: cannot find operator\
    \ '++' in scope; did you mean '+= 1'?\n        closingCount++\n              \
    \      ^~\n/tmp/tmp4itxi870.swift:12:25: error: binary operator '==' cannot be\
    \ applied to operands of type 'Int' and 'String'\n        if openingCount == closing\
    \ {\n           ~~~~~~~~~~~~ ^  ~~~~~~~\n/tmp/tmp4itxi870.swift:12:25: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Int, Int), (String,\
    \ String)\n        if openingCount == closing {\n                        ^\n/tmp/tmp4itxi870.swift:15:25:\
    \ error: binary operator '>' cannot be applied to operands of type 'Int' and 'String'\n\
    \        if openingCount > closing {\n           ~~~~~~~~~~~~ ^ ~~~~~~~\n/tmp/tmp4itxi870.swift:15:25:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n        if openingCount > closing {\n                        ^\n\
    /tmp/tmp4itxi870.swift:16:60: error: cannot convert value of type 'String' to\
    \ expected argument type 'Int'\n            opening = String(o"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n\n\
    \    while openingBracketsIndex < openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[openingBracketsIndex]\n        let closingBracket = closingBrackets[closingBracketsIndex]\n\
    \n        if openingBracket == \"(\" {\n            openingBracketsCount += 1\n\
    \            openingBracketsIndex += 1\n        } else if openingBracket == \"\
    )\" {\n            openingBracketsCount -= 1\n            if openingBracketsCount\
    \ == 0 {\n                openingBracketsIndex += 1\n            }\n        }\
    \ else if closingBracket == \"(\" {\n            closingBracketsCount += 1\n \
    \           closingBracketsIndex += 1\n        } else if closingBracket == \"\
    )\" {\n            closingBracketsCount -= 1\n            if closingBracketsCount\
    \ == 0 {\n                closingBracketsIndex += 1\n            }\n        }\
    \ else {\n            return false\n        }\n    }\n\n    return openingBracketsIndex\
    \ == closingBracketsIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplhru6qxu.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplhru6qxu.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplhru6qxu.swift:13:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingBracket = openingBrackets[openingBracketsIndex]\n                   \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmplhru6qxu.swift:14:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let closingBracket = closingBrackets[closingBracketsIndex]\n        \
    \                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmplhru6qxu.swift:5:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmplhru6qxu.swift:6:9: warning: variable 'closingBrackets' was never\
    \ mutated; consider changing to 'let' constant\n    var closingBrackets = brackets.characters\n\
    \    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n    if openingBrackets.count > 0 {\n       \
    \ var openingBracket = openingBrackets.first!\n        var closingBracket = closingBrackets.first!\n\
    \        var openingBracketIndex = openingBrackets.startIndex\n        var closingBracketIndex\
    \ = closingBrackets.startIndex\n        while openingBracketIndex < openingBrackets.endIndex\
    \ {\n            if openingBrackets[openingBracketIndex] != closingBrackets[closingBracketIndex]\
    \ {\n                return false\n            }\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3ojc1nl_.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3ojc1nl_.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3ojc1nl_.swift:23:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp3ojc1nl_.swift:24:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n    var openingBracketsIndex = 0\n    var closingBracketsIndex = 0\n  \
    \  var openingBracketsString = \"\"\n    var closingBracketsString = \"\"\n  \
    \  while openingBracketsIndex < openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[openingBracketsIndex]\n        openingBracketsString += openingBracket\n\
    \        openingBracketsIndex += 1\n        if openingBracketsIndex < openingBrackets.count\
    \ {\n            let closingBracket = openingBrackets[openingBracketsIndex]\n\
    \            openingBracketsString += closingBracket\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += closingBracket\n            closingBracketsIndex\
    \ += 1\n        }\n        if openingBracketsIndex < openingBrackets.count {\n\
    \            let openingBracket = openingBrackets[openingBracketsIndex]\n    \
    \        openingBracketsString += openingBracket\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += openingBracket\n            closingBracketsIndex\
    \ += 1\n        }\n        if openingBracketsIndex < openingBrackets.count {\n\
    \            let closingBracket = openingBrackets[openingBracketsIndex]\n    \
    \        openingBracketsString += closingBracket\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += closingBracket\n            closingBracketsIndex\
    \ += 1\n        }\n        if openingBracketsIndex < openingBrackets.count {\n\
    \            let openingBracket = openingBrackets[openingBracketsIndex]\n    \
    \        openingBracketsString += openingBracket\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += openingBracket\n            closingBracketsIndex\
    \ += 1\n        }\n        if openingBracketsIndex < openingBrackets.count {\n\
    \            let closingBracket = openingBrackets[openingBracketsIndex]\n    \
    \        openingBracketsString += closingBracket\n            openingBracketsIndex\
    \ += 1\n            closingBracketsString += closingBracket\n            closingBracketsIndex\
    \ += 1\n        }\n        if openingBracket\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpjsk25lj1.swift:52:26: error: expected '{' after 'if' condition\n\
    \        if openingBracket\n                         ^\n/tmp/tmpjsk25lj1.swift:79:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpjsk25lj1.swift:4:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpjsk25lj1.swift:5:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjsk25lj1.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjsk25lj1.swift:14:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingBracket = openingBrackets[openingBracketsIndex]\n                   \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjsk25lj1.swift:15:34: error: cannot\
    \ convert value of type 'Character' to expected argument type 'String'\n     \
    \   openingBracketsString += openingBracket\n                                \
    \ ^\n/tmp/tmpjsk25lj1.swift:18:34: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n            let closingBracket\
    \ = openingBrackets[openingBracketsIndex]\n                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ opening_bracket = \"\"\n    var closing_bracket = \"\"\n\n    for char in brackets\
    \ {\n        switch char {\n        case \"(\":\n            if opening {\n  \
    \              return false\n            }\n            opening = true\n     \
    \       opening_bracket = char\n        case \"[\":\n            if opening {\n\
    \                return false\n            }\n            opening = true\n   \
    \         opening_bracket = char\n        case \")\":\n            if closing\
    \ {\n                return false\n            }\n            closing = true\n\
    \            closing_bracket = char\n        case \"]\":\n            if closing\
    \ {\n                return false\n            }\n            closing = true\n\
    \            closing_bracket = char\n        default:\n            return false\n\
    \        }\n    }\n\n    if opening {\n        return false\n    }\n    if closing\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpi2419yfz.swift:17:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = char\n                     \
    \         ^~~~\n/tmp/tmpi2419yfz.swift:23:31: error: cannot assign value of type\
    \ 'Character' to type 'String'\n            opening_bracket = char\n         \
    \                     ^~~~\n/tmp/tmpi2419yfz.swift:29:31: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            closing_bracket = char\n\
    \                              ^~~~\n/tmp/tmpi2419yfz.swift:35:31: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            closing_bracket\
    \ = char\n                              ^~~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n\n       \
    \ if openingBracket == \"(\" {\n            openingBracketIndex += 1\n       \
    \ } else if openingBracket == \")\" {\n            closingBracketIndex += 1\n\
    \        } else {\n            return false\n        }\n    }\n\n    return openingBracketIndex\
    \ == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4ccoctl6.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4ccoctl6.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp4ccoctl6.swift:15:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp4ccoctl6.swift:17:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for bracket in brackets {\n\
    \        if bracket == \"(\" {\n            bracketCount++\n        } else if\
    \ bracket == \")\" {\n            bracketCount--\n        }\n        if bracketCount\
    \ < 0 {\n            return false\n        }\n    }\n    return bracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykuukc0r.swift:8:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            bracketCount++\n                        ^~\n\
    /tmp/tmpykuukc0r.swift:10:25: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            bracketCount--\n                        ^~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketCount = 0\n    var closingBracketCount = 0\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n            openingBracketCount++\n\
    \        } else if openingBracket == \")\" {\n            openingBracketCount--\n\
    \        }\n    }\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \"(\" {\n            closingBracketCount++\n        } else if closingBracket\
    \ == \")\" {\n            closingBracketCount--\n        }\n    }\n    return\
    \ openingBracketCount == 0 && closingBracketCount == 0\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0ng04y3j.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0ng04y3j.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0ng04y3j.swift:13:32: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            openingBracketCount++\n        \
    \                       ^~\n/tmp/tmp0ng04y3j.swift:15:32: error: cannot find operator\
    \ '--' in scope; did you mean '-= 1'?\n            openingBracketCount--\n   \
    \                            ^~\n/tmp/tmp0ng04y3j.swift:20:32: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            closingBracketCount++\n\
    \                               ^~\n/tmp/tmp0ng04y3j.swift:22:32: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketCount--\n\
    \                               ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.count != closingBrackets.count {\n        return false\n\
    \    }\n    for openingBracket in openingBrackets {\n        if closingBrackets.contains(openingBracket)\
    \ {\n            closingBrackets.remove(openingBracket)\n        }\n    }\n  \
    \  return brackets == String(openingBrackets)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl9lkze6o.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpl9lkze6o.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpl9lkze6o.swift:14:29: error: no exact matches in call\
    \ to instance method 'remove'\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n/tmp/tmpl9lkze6o.swift:14:29: note: candidate\
    \ expects value of type 'String.Index' for parameter #1 (got 'Character')\n  \
    \          closingBrackets.remove(openingBracket)\n                          \
    \  ^\n/tmp/tmpl9lkze6o.swift:14:29: note: candidate expects value of type 'String.Index'\
    \ for parameter #1 (got 'Character')\n            closingBrackets.remove(openingBracket)\n\
    \                            ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var openingBracketCount = 0\n\
    \    var closingBracketCount = 0\n    for bracket in brackets {\n        switch\
    \ bracket {\n        case \"(\":\n            openingBracketCount += 1\n     \
    \   case \"[\":\n            bracketCount += 1\n        case \"{\":\n        \
    \    bracketCount += 1\n        case \"}\":\n            bracketCount += 1\n \
    \       case \"(\":\n            closingBracketCount += 1\n        default:\n\
    \            return false\n        }\n    }\n    if bracketCount != openingBracketCount\
    \ {\n        return false\n    }\n    if bracketCount != closingBracketCount {\n\
    \        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpnky08nr3/tmpnky08nr3.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46de5a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46de29eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b46de29e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b46de29d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnky08nr3                        0x0000563d44f4a40b <unavailable> + 5131

    5    libc.so.6                          0x00002b46de793460 __libc_start_main +
    245

    6    tmpnky08nr3                        0x0000563d44f4a099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   if opening {\n                opening = false\n            } else {\n    \
    \            closing = false\n            }\n        }\n    }\n    return !opening\
    \ && !closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpe3fqhh8e/tmpe3fqhh8e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76e297dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76e2674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76e2674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76e26737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3fqhh8e                        0x000055a520cd56a3 <unavailable> + 5795

    5    libc.so.6                          0x00002b76e2b69460 __libc_start_main +
    245

    6    tmpe3fqhh8e                        0x000055a520cd5099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = brackets.characters.count\n    var\
    \ closingCount = brackets.characters.count\n    var openingIndex = 0\n    var\
    \ closingIndex = 0\n    while openingIndex < openingCount {\n        opening =\
    \ brackets[openingIndex..<openingIndex+2]\n        closing = brackets[closingIndex..<closingIndex+2]\n\
    \        openingIndex += 2\n        closingIndex += 2\n        if opening == \"\
    (\" && closing == \")\" {\n            openingCount -= 1\n            closingCount\
    \ -= 1\n        } else if opening == \"[\" && closing == \"]\" {\n           \
    \ openingCount -= 1\n            closingCount -= 1\n        } else if opening\
    \ == \"{\" && closing == \"}\" {\n            openingCount -= 1\n            closingCount\
    \ -= 1\n        } else if opening == \"<\" && closing == \">\" {\n           \
    \ openingCount -= 1\n            closingCount -= 1\n        } else if opening\
    \ == \"(\" && closing == \"}\" {\n            openingCount -= 1\n        } else\
    \ if opening == \"(\" && closing == \")\" {\n            openingCount -= 1\n \
    \       } else if opening == \"[\" && closing == \"]\" {\n            openingCount\
    \ -= 1\n        } else if opening == \"{\" && closing == \"}\" {\n           \
    \ openingCount -= 1\n        } else if opening == \"<\" && closing == \">\" {\n\
    \            openingCount -= 1\n        }\n    }\n    return openingCount == closingCount\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5o8cgrfw.swift:5:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp5o8cgrfw.swift:6:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp5o8cgrfw.swift:7:33:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingCount\
    \ = brackets.characters.count\n                                ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5o8cgrfw.swift:8:33: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingCount = brackets.characters.count\n\
    \                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5o8cgrfw.swift:12:19: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an integer range, use a String.Index range instead.\n\
    \        opening = brackets[openingIndex..<openingIndex+2]\n                 \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmp5o8cgrfw.swift:13:19: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an integer range, use a String.Index range instead.\n        closing\
    \ = brackets[closingIndex..<closingIndex+2]\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n\n    for i in 0..<openingBrackets.count {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzgz3q7j4.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzgz3q7j4.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzgz3q7j4.swift:13:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzgz3q7j4.swift:13:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzgz3q7j4.swift:5:9: warning:\
    \ variable 'openingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var openingBrackets = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpzgz3q7j4.swift:6:9:\
    \ warning: variable 'closingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var closingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    var opening_brackets_count = brackets.characters.count\n\
    \    var closing_brackets_count = brackets.characters.count\n    var opening_brackets_index\
    \ = opening_brackets.startIndex\n    var closing_brackets_index = closing_brackets.startIndex\n\
    \n    while opening_brackets_index < opening_brackets_count {\n        if opening_brackets[opening_brackets_index]\
    \ != '(' {\n            opening_brackets_index += 1 // skip the opening bracket\n\
    \            continue\n        }\n        opening_brackets_index += 1 // skip\
    \ the opening bracket\n\n        if closing_brackets_index >= closing_brackets_count\
    \ {\n            return false // no closing bracket\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == ')' {\n            closing_brackets_index -= 1 // skip the closing bracket\n\
    \            continue\n        }\n\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n            opening_brackets_index += 1 // skip the opening bracket\n\
    \            closing_brackets_index += 1 // skip the closing bracket\n       \
    \     continue\n        }\n\n        return false // invalid bracket\n    }\n\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpauxkq25x.swift:13:56: error: single-quoted string literal found,\
    \ use '\"'\n        if opening_brackets[opening_brackets_index] != '(' {\n   \
    \                                                    ^~~\n                   \
    \                                    \"(\"\n/tmp/tmpauxkq25x.swift:23:56: error:\
    \ single-quoted string literal found, use '\"'\n        if opening_brackets[opening_brackets_index]\
    \ == ')' {\n                                                       ^~~\n     \
    \                                                  \")\"\n/tmp/tmpauxkq25x.swift:28:56:\
    \ error: single-quoted string literal found, use '\"'\n        if opening_brackets[opening_brackets_index]\
    \ == '(' {\n                                                       ^~~\n     \
    \                                                  \"(\"\n/tmp/tmpauxkq25x.swift:5:37:\
    \ error: 'characters' is unavailable: Please use String directly\n    var opening_brackets\
    \ = brackets.characters\n                                    ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpauxkq25x.swift:6:37: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpauxkq25x.swift:7:43: error: 'characters' is unavailable:\
    \ Please use String directly\n    var opening_brackets_count = brackets.characters.count\n\
    \                                          ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpauxkq25x.swift:8:43: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing_brackets_count =\
    \ brackets.characters.count\n                                          ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for bracket in brackets {\n\
    \        if bracket == \"(\" {\n            bracketCount++\n        } else if\
    \ bracket == \")\" {\n            bracketCount--\n        }\n        if bracketCount\
    \ < 0 {\n            return false\n        }\n    }\n    return bracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykuukc0r.swift:8:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            bracketCount++\n                        ^~\n\
    /tmp/tmpykuukc0r.swift:10:25: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            bracketCount--\n                        ^~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ \")\" else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == openingBrackets[openingBracketIndex\
    \ - 1] else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == openingBrackets[openingBracketIndex\
    \ - 1] else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == openingBrackets[openingBracketIndex\
    \ - 1] else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == openingBrackets[openingBracketIndex\
    \ - 1] else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == openingBrackets[openingBracketIndex\
    \ - 1] else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBracketIndex += 1\n      \
    \  guard openingBrackets[openingBracketIndex] == openingBrackets[openingBracketIndex\
    \ - 1] else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == \")\" else {\n \
    \           return false\n        }\n        openingBra\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8lecwi94.swift:89:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmp8lecwi94.swift:4:51:\
    \ note: to match this opening '{'\nfunc correct_bracketing(brackets: String) ->\
    \ Bool {\n                                                  ^\n/tmp/tmp8lecwi94.swift:5:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp8lecwi94.swift:6:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8lecwi94.swift:14:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp8lecwi94.swift:15:71: error:\
    \ cannot convert value of type 'String.Index' to expected argument type 'Int'\n\
    \        guard openingBrackets[openingBracketIndex] == openingBrackets[openingBracketIndex\
    \ - 1] else {\n                                                              \
    \        ^\n/tmp/tmp8lecwi94.swift:18:29: error: binary operator '+=' cannot be\
    \ applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp8lecwi94.swift:22:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        openingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n\
    /tmp/tmp8lecwi94.swift:23:71: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n        guard openingBrackets[openingBracketIndex]\
    \ == openingBrackets[openingBracketIndex"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return false\n    }\n    if openingBrackets.first == \"(\" {\n  \
    \      openingBrackets.removeFirst()\n    }\n    if closingBrackets.last == \"\
    )\" {\n        closingBrackets.removeLast()\n    }\n    return openingBrackets.isEmpty\
    \ && closingBrackets.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbhb1i1ss.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpbhb1i1ss.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    while openingBracketsCount\
    \ > 0 && closingBracketsCount > 0 {\n        if openingBrackets[openingBracketsCount\
    \ - 1] == \")\" {\n            openingBracketsCount -= 1\n            closingBracketsCount\
    \ -= 1\n        } else if openingBrackets[openingBracketsCount - 1] == \"(\" {\n\
    \            openingBracketsCount -= 1\n            closingBracketsCount -= 1\n\
    \        } else {\n            return false\n        }\n    }\n\n    return openingBracketsCount\
    \ == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7bse_ah9.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7bse_ah9.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7bse_ah9.swift:7:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp7bse_ah9.swift:8:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp7bse_ah9.swift:11:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if openingBrackets[openingBracketsCount - 1] == \")\" {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7bse_ah9.swift:14:19:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        } else if openingBrackets[openingBracketsCount\
    \ - 1] == \"(\" {\n                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i:"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph1y08gka.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmph1y08gka.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    for openingBracket in openingBrackets {\n        if openingBracket\
    \ == \"(\" {\n            openingBracketsCount += 1\n        } else if openingBracket\
    \ == \")\" {\n            openingBracketsCount -= 1\n        }\n    }\n\n    for\
    \ closingBracket in closingBrackets {\n        if closingBracket == \"(\" {\n\
    \            closingBracketsCount += 1\n        } else if closingBracket == \"\
    )\" {\n            closingBracketsCount -= 1\n        }\n    }\n\n    return openingBracketsCount\
    \ == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpy6hb1wuy.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy6hb1wuy.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy6hb1wuy.swift:5:9: warning: variable 'openingBrackets'\
    \ was never mutated; consider changing to 'let' constant\n    var openingBrackets\
    \ = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpy6hb1wuy.swift:6:9: warning:\
    \ variable 'closingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var closingBrackets = brackets.characters\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph1y08gka.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmph1y08gka.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketsCorrect = false\n    for bracket in brackets\
    \ {\n        if bracket == \"(\" {\n            bracketsCorrect = true\n     \
    \   } else if bracket == \")\" {\n            bracketsCorrect = false\n      \
    \  } else {\n            return false\n        }\n    }\n    return bracketsCorrect\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmppv1qvr1e/tmppv1qvr1e.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b09d3dc8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09d3abfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09d3abf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09d3abe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppv1qvr1e                        0x000055efa9cfa40b <unavailable> + 5131

    5    libc.so.6                          0x00002b09d3fb4460 __libc_start_main +
    245

    6    tmppv1qvr1e                        0x000055efa9cfa099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBrackets.count {\n        let\
    \ openingBracket = openingBrackets[openingBracketsIndex]\n        let closingBracket\
    \ = closingBrackets[closingBracketsIndex]\n\n        if openingBracket == \"(\"\
    \ {\n            openingBracketsIndex += 1\n        } else if openingBracket ==\
    \ \")\" {\n            closingBracketsIndex += 1\n        } else {\n         \
    \   return false\n        }\n    }\n\n    return openingBracketsIndex == closingBracketsIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpve1zoeho.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpve1zoeho.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpve1zoeho.swift:11:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingBracket = openingBrackets[openingBracketsIndex]\n                   \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpve1zoeho.swift:12:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let closingBracket = closingBrackets[closingBracketsIndex]\n        \
    \                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpve1zoeho.swift:5:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmpve1zoeho.swift:6:9: warning: variable 'closingBrackets' was never\
    \ mutated; consider changing to 'let' constant\n    var closingBrackets = brackets.characters\n\
    \    ~~~ ^\n    let\n/tmp/tmpve1zoeho.swift:12:13: warning: initialization of\
    \ immutable value 'closingBracket' was never used; consider replacing with assignment\
    \ to '_' or removing it\n        let closingBracket = closingBrackets[closingBracketsInd"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters.split{$0 == \" \"}.map(String.init)\n\
    \    var closing = brackets.characters.split{$0 == \"(\"}.map(String.init)\n \
    \   var openingCount = opening.count\n    var closingCount = closing.count\n \
    \   if openingCount != closingCount {\n        return false\n    }\n    for i\
    \ in 0..<openingCount {\n        if opening[i] != closing[i] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5w1eoxsx.swift:5:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters.split{$0 == \" \"\
    }.map(String.init)\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5w1eoxsx.swift:6:28: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closing = brackets.characters.split{$0\
    \ == \"(\"}.map(String.init)\n                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp5w1eoxsx.swift:5:9: warning: variable\
    \ 'opening' was never mutated; consider changing to 'let' constant\n    var opening\
    \ = brackets.characters.split{$0 == \" \"}.map(String.init)\n    ~~~ ^\n    let\n\
    /tmp/tmp5w1eoxsx.swift:6:9: warning: variable 'closing' was never mutated; consider\
    \ changing to 'let' constant\n    var closing = brackets.characters.split{$0 ==\
    \ \"(\"}.map(String.init)\n    ~~~ ^\n    let\n/tmp/tmp5w1eoxsx.swift:7:9: warning:\
    \ variable 'openingCount' was never mutated; consider changing to 'let' constant\n\
    \    var openingCount = opening.count\n    ~~~ ^\n    let\n/tmp/tmp5w1eoxsx.swift:8:9:\
    \ warning: variable 'closingCount' was never mutated; consider changing to 'let'\
    \ constant\n    var closingCount = closing.count\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketsCount = openingBrackets.count\n    var closingBracketsCount\
    \ = closingBrackets.count\n    if openingBracketsCount != closingBracketsCount\
    \ {\n        return false\n    }\n    if openingBrackets.count > 0 {\n       \
    \ var lastOpeningBracket = openingBrackets.last\n        var lastClosingBracket\
    \ = closingBrackets.first\n        if lastOpeningBracket == lastClosingBracket\
    \ {\n            openingBrackets.removeLast()\n            closingBrackets.removeFirst()\n\
    \            openingBracketsCount = openingBrackets.count\n            closingBracketsCount\
    \ = closingBrackets.count\n            if openingBracketsCount != closingBracketsCount\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2npewhq6.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2npewhq6.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2npewhq6.swift:15:13: warning: variable 'lastOpeningBracket'\
    \ was never mutated; consider changing to 'let' constant\n        var lastOpeningBracket\
    \ = openingBrackets.last\n        ~~~ ^\n        let\n/tmp/tmp2npewhq6.swift:16:13:\
    \ warning: variable 'lastClosingBracket' was never mutated; consider changing\
    \ to 'let' constant\n        var lastClosingBracket = closingBrackets.first\n\
    \        ~~~ ^\n        let\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for bracket in brackets {\n\
    \        if bracket == \"(\" {\n            bracketCount++\n        } else if\
    \ bracket == \")\" {\n            bracketCount--\n        }\n        if bracketCount\
    \ < 0 {\n            return false\n        }\n    }\n    return bracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpykuukc0r.swift:8:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            bracketCount++\n                        ^~\n\
    /tmp/tmpykuukc0r.swift:10:25: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            bracketCount--\n                        ^~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = -1\n    var closingBracketIndex\
    \ = -1\n    var openingBracketCount = 0\n    var closingBracketCount = 0\n   \
    \ for index in 0..<brackets.characters.count {\n        let character = brackets.characters[index]\n\
    \        if character == \"(\" {\n            openingBracketCount++\n        \
    \    openingBracketIndex = index\n        } else if character == \")\" {\n   \
    \         closingBracketCount++\n            closingBracketIndex = index\n   \
    \     }\n    }\n    if openingBracketCount != closingBracketCount {\n        return\
    \ false\n    }\n    if openingBracketIndex == -1 || closingBracketIndex == -1\
    \ {\n        return false\n    }\n    if openingBracketIndex < closingBracketIndex\
    \ {\n        for index in openingBracketIndex..<closingBracketIndex {\n      \
    \      let character = brackets.characters[index]\n            if character ==\
    \ \"(\" {\n                openingBracketCount--\n            } else if character\
    \ == \")\" {\n                closingBracketCount--\n            }\n        }\n\
    \    }\n    if openingBracketCount != 0 {\n        return false\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7ywnu6lx.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7ywnu6lx.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7ywnu6lx.swift:11:31: error: 'characters' is unavailable:\
    \ Please use String directly\n    for index in 0..<brackets.characters.count {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7ywnu6lx.swift:12:25: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ character = brackets.characters[index]\n                        ^~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7ywnu6lx.swift:12:34:\
    \ error: 'characters' is unavailable: Please use String directly\n        let\
    \ character = brackets.characters[index]\n                                 ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7ywnu6lx.swift:14:32:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  openingBracketCount++\n                               ^~\n/tmp/tmp7ywnu6lx.swift:17:32:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  closingBracketCount++\n                               ^~\n/tmp/tmp7ywnu6lx.swift:29:29:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript Str"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[i]\n        let closingBracket = closingBrackets[i]\n    \
    \    \n        if openingBracket != closingBracket {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbo6kuder.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbo6kuder.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    var openingCount = 1\n    var closingCount = 1\n  \
    \  for _ in brackets.characters {\n        openingCount++\n        if openingCount\
    \ > 1 {\n            opening = opening.replacingOccurrences(of: \"(\", with: String(repeating:\
    \ \")\", count: openingCount - 1))\n        }\n        closingCount++\n      \
    \  if closingCount > 1 {\n            closing = closing.replacingOccurrences(of:\
    \ \"(\", with: String(repeating: \")\", count: closingCount - 1))\n        }\n\
    \    }\n    return opening == closing\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8de59ivc.swift:5:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp8de59ivc.swift:6:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp8de59ivc.swift:9:23:\
    \ error: 'characters' is unavailable: Please use String directly\n    for _ in\
    \ brackets.characters {\n                      ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp8de59ivc.swift:10:21: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n        openingCount++\n     \
    \               ^~\n/tmp/tmp8de59ivc.swift:12:31: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n            opening = opening.replacingOccurrences(of:\
    \ \"(\", with: String(repeating: \")\", count: openingCount - 1))\n          \
    \            ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8de59ivc.swift:14:21: error:\
    \ cannot find operator '++' in scope; did you mean '+= 1'?\n        closingCount++\n\
    \                    ^~\n/tmp/tmp8de59ivc.swift:16:31: error: value of type 'String'\
    \ has no member 'replacingOccurrences'\n            closing = closing.replacingOccurrences(of:\
    \ \"(\", with: String(repeating: \")\", count: closingCount - 1))\n          \
    \            ~~~~~~~ ^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketCount = brackets.characters.count\n\
    \    var closingBracketCount = brackets.characters.count\n\n    if openingBracketCount\
    \ > 0 && openingBracketCount < closingBracketCount {\n        openingBracketCount\
    \ = openingBracketCount - 1\n        closingBracketCount = closingBracketCount\
    \ - 1\n    }\n\n    for openingBracket in 0..<openingBracketCount {\n        if\
    \ openingBrackets[openingBracket] == '(' {\n            openingBrackets[openingBracket]\
    \ = '['\n            closingBrackets[closingBrackets] = ']'\n            openingBracketCount\
    \ = openingBracketCount - 1\n            closingBracketCount = closingBracketCount\
    \ - 1\n        }\n    }\n\n    return openingBracketCount == 0 && closingBracketCount\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph_3k8gag.swift:16:47: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracket] == '(' {\n            \
    \                                  ^~~\n                                     \
    \         \"(\"\n/tmp/tmph_3k8gag.swift:17:47: error: single-quoted string literal\
    \ found, use '\"'\n            openingBrackets[openingBracket] = '['\n       \
    \                                       ^~~\n                                \
    \              \"[\"\n/tmp/tmph_3k8gag.swift:18:48: error: single-quoted string\
    \ literal found, use '\"'\n            closingBrackets[closingBrackets] = ']'\n\
    \                                               ^~~\n                        \
    \                       \"]\"\n/tmp/tmph_3k8gag.swift:5:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph_3k8gag.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph_3k8gag.swift:7:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph_3k8gag.swift:8:40: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBracketCount = brackets.characters.count\n\
    \                                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmph_3k8gag.swift:16:12: error: 'subscript(_:)' is unavailable:\
    \ canno"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    for openingBracket in openingBrackets {\n     \
    \   if openingBracket == \"(\" {\n            openingBrackets.removeLast()\n \
    \           closingBrackets.removeLast()\n        } else if openingBracket ==\
    \ \")\" {\n            openingBrackets.removeLast()\n            closingBrackets.removeLast()\n\
    \        } else {\n            return false\n        }\n    }\n\n    return openingBrackets.count\
    \ == 0 && closingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpo31x9a14.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpo31x9a14.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n\n    for openingBracket\
    \ in openingBrackets {\n        if openingBracket == \"(\" {\n            openingBracketsCount--\n\
    \        } else if openingBracket == \")\" {\n            openingBracketsCount++\n\
    \        }\n    }\n\n    for closingBracket in closingBrackets {\n        if closingBracket\
    \ == \"(\" {\n            closingBracketsCount++\n        } else if closingBracket\
    \ == \")\" {\n            closingBracketsCount--\n        }\n    }\n\n    return\
    \ openingBracketsCount == closingBracketsCount\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7y7trjom.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7y7trjom.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7y7trjom.swift:7:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp7y7trjom.swift:8:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp7y7trjom.swift:12:33: error: cannot find\
    \ operator '--' in scope; did you mean '-= 1'?\n            openingBracketsCount--\n\
    \                                ^~\n/tmp/tmp7y7trjom.swift:14:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            openingBracketsCount++\n\
    \                                ^~\n/tmp/tmp7y7trjom.swift:20:33: error: cannot\
    \ find operator '++' in scope; did you mean '+= 1'?\n            closingBracketsCount++\n\
    \                                ^~\n/tmp/tmp7y7trjom.swift:22:33: error: cannot\
    \ find operator '--' in scope; did you mean '-= 1'?\n            closingBracketsCount--\n\
    \                                ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeFirst()\n    closing_brackets.removeLast()\n\
    \    if opening_brackets.count != closing_brackets.count {\n        return false\n\
    \    }\n    for opening_bracket in opening_brackets {\n        if closing_brackets.contains(opening_bracket)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp0a7o2zkj.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp0a7o2zkj.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        if c == \"(\" {\n            opening = true\n     \
    \   } else if c == \")\" {\n            closing = true\n        } else if opening\
    \ {\n            opening = false\n        } else if closing {\n            closing\
    \ = false\n        }\n    }\n    return opening && closing\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpv5hdxge7/tmpv5hdxge7.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2da370bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2da3402b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2da3402988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2da34017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv5hdxge7                        0x0000559b043556a3 <unavailable> + 5795

    5    libc.so.6                          0x00002b2da38f7460 __libc_start_main +
    245

    6    tmpv5hdxge7                        0x0000559b04355099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n\n    while openingBracketsIndex < openingBrackets.count {\n        let\
    \ openingBracket = openingBrackets[openingBracketsIndex]\n        openingBracketsIndex\
    \ += 1\n\n        while closingBracketsIndex < closingBrackets.count {\n     \
    \       let closingBracket = closingBrackets[closingBracketsIndex]\n         \
    \   closingBracketsIndex += 1\n\n            if openingBracket == closingBracket\
    \ {\n                openingBrackets.remove(at: openingBracketsIndex)\n      \
    \          closingBrackets.remove(at: closingBracketsIndex)\n            } else\
    \ {\n                break\n            }\n        }\n    }\n\n    return openingBrackets.count\
    \ == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3bmc44c1.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3bmc44c1.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3bmc44c1.swift:11:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingBracket = openingBrackets[openingBracketsIndex]\n                   \
    \          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp3bmc44c1.swift:15:34: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            let closingBracket = closingBrackets[closingBracketsIndex]\n    \
    \                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3bmc44c1.swift:19:44:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \                openingBrackets.remove(at: openingBracketsIndex)\n          \
    \                                 ^\n/tmp/tmp3bmc44c1.swift:20:44: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String.Index'\n     \
    \           closingBrackets.remove(at: closingBracketsIndex)\n               \
    \                            ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ opening_bracket = \"\"\n    var closing_bracket = \"\"\n    for c in brackets\
    \ {\n        if c == \"(\" {\n            opening = true\n            opening_bracket\
    \ = c\n        } else if c == \")\" {\n            closing = true\n          \
    \  closing_bracket = c\n        } else if opening {\n            if c != opening_bracket\
    \ {\n                return false\n            }\n            opening = false\n\
    \            opening_bracket = \"\"\n        } else if closing {\n           \
    \ if c != closing_bracket {\n                return false\n            }\n   \
    \         closing = false\n            closing_bracket = \"\"\n        }\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpl026nvhr.swift:12:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = c\n                        \
    \      ^\n/tmp/tmpl026nvhr.swift:15:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            closing_bracket = c\n                        \
    \      ^\n/tmp/tmpl026nvhr.swift:17:21: error: cannot convert value of type 'String'\
    \ to expected argument type 'Character'\n            if c != opening_bracket {\n\
    \                    ^\n/tmp/tmpl026nvhr.swift:23:21: error: cannot convert value\
    \ of type 'String' to expected argument type 'Character'\n            if c !=\
    \ closing_bracket {\n                    ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    return openingBrackets.count == closingBrackets.count\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph1y08gka.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmph1y08gka.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        switch openingBrackets[openingBracketIndex] {\n        case \"(\"\
    :\n            openingBracketCount += 1\n        case \"[\":\n            openingBracketCount\
    \ += 1\n        case \"{\":\n            openingBracketCount += 1\n        case\
    \ \"<\":\n            openingBracketCount += 1\n        case \"\\\"\":\n     \
    \       openingBracketCount += 1\n        case \"'\":\n            openingBracketCount\
    \ += 1\n        case \"`\":\n            openingBracketCount += 1\n        case\
    \ \"\\\\\":\n            openingBracketCount += 1\n        default:\n        \
    \    break\n        }\n        openingBracketIndex += 1\n    }\n    while closingBracketIndex\
    \ < brackets.endIndex {\n        switch closingBrackets[closingBracketIndex] {\n\
    \        case \")\":\n            closingBracketCount += 1\n        case \"]\"\
    :\n            closingBracketCount += 1\n        case \"}\":\n            closingBracketCount\
    \ += 1\n        case \">\":\n            closingBracketCount += 1\n        case\
    \ \"\\\"\":\n            closingBracketCount += 1\n        case \"'\":\n     \
    \       closingBracketCount += 1\n        case \"`\":\n            closingBracketCount\
    \ += 1\n        case \"\\\\\":\n            closingBracketCount += 1\n       \
    \ default:\n            break\n        }\n        closingBracketIndex += 1\n \
    \   }\n    if openingBracketCount != closingBracketCount {\n        return false\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp1dw3iiz0.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1dw3iiz0.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp1dw3iiz0.swift:32:29: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp1dw3iiz0.swift:55:29: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n        closingBracketIndex += 1\n        ~~~~~~~~~~~~~~~~~~~ ^  ~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \n    if openingBrackets.isEmpty {\n        return false\n    }\n\n    if openingBrackets.first\
    \ == \"(\" {\n        openingBrackets.removeFirst()\n    }\n\n    if closingBrackets.last\
    \ == \")\" {\n        closingBrackets.removeLast()\n    }\n\n    if openingBrackets.isEmpty\
    \ {\n        return false\n    }\n\n    if closingBrackets.isEmpty {\n       \
    \ return false\n    }\n\n    if openingBrackets.first != closingBrackets.last\
    \ {\n        return false\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpcw43sffm.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpcw43sffm.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = 1\n    var closingBracketsCount\
    \ = 1\n\n    while openingBracketsCount > 0 || closingBracketsCount > 0 {\n  \
    \      if openingBracketsCount > 0 && closingBracketsCount > 0 {\n           \
    \ if openingBrackets[openingBracketsCount - 1] == closingBrackets[closingBracketsCount\
    \ - 1] {\n                openingBracketsCount -= 1\n                closingBracketsCount\
    \ -= 1\n            } else {\n                return false\n            }\n  \
    \      } else if openingBracketsCount > 0 {\n            if openingBrackets[openingBracketsCount\
    \ - 1] == \")\" {\n                openingBracketsCount -= 1\n            } else\
    \ {\n                return false\n            }\n        } else if closingBracketsCount\
    \ > 0 {\n            if closingBrackets[closingBracketsCount - 1] == \"(\" {\n\
    \                closingBracketsCount -= 1\n            } else {\n           \
    \     return false\n            }\n        }\n    }\n\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpan0nj1a4.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpan0nj1a4.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpan0nj1a4.swift:12:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n         \
    \   if openingBrackets[openingBracketsCount - 1] == closingBrackets[closingBracketsCount\
    \ - 1] {\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpan0nj1a4.swift:12:61:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if openingBrackets[openingBracketsCount\
    \ - 1] == closingBrackets[closingBracketsCount - 1] {\n                      \
    \                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpan0nj1a4.swift:19:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            if openingBrackets[openingBracketsCount\
    \ - 1] == \")\" {\n               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpan0nj1a4.swift:25:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript St"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n\n    for i in 0..<openingBrackets.count {\n\
    \        if openingBrackets[i] == '(' && closingBrackets[i] == ')' {\n       \
    \     openingBrackets.removeAtIndex(i)\n            closingBrackets.removeAtIndex(i)\n\
    \        }\n    }\n\n    if openingBrackets.count != 0 {\n        return false\n\
    \    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkx66lecc.swift:13:34: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[i] == '(' && closingBrackets[i] == ')'\
    \ {\n                                 ^~~\n                                 \"\
    (\"\n/tmp/tmpkx66lecc.swift:13:63: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[i] == '(' && closingBrackets[i] == ')'\
    \ {\n                                                              ^~~\n     \
    \                                                         \")\"\n/tmp/tmpkx66lecc.swift:5:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpkx66lecc.swift:6:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkx66lecc.swift:13:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] == '(' && closingBrackets[i] == ')' {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpkx66lecc.swift:13:41:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] == '(' && closingBrackets[i]\
    \ == ')' {\n                                        ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpkx66lecc.swift:14:29:\
    \ error: value of type 'String' has no member 'removeAtIndex'\n            openingBrackets.removeAtIndex"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n\n    for i in 0..<openingBrackets.count {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzgz3q7j4.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzgz3q7j4.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzgz3q7j4.swift:13:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzgz3q7j4.swift:13:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzgz3q7j4.swift:5:9: warning:\
    \ variable 'openingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var openingBrackets = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpzgz3q7j4.swift:6:9:\
    \ warning: variable 'closingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var closingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsFound = false\n\
    \    var closingBracketsFound = false\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        if openingBrackets[openingBracketsIndex] == '(' {\n            openingBracketsFound\
    \ = true\n            openingBracketsIndex += 1\n        } else if openingBrackets[openingBracketsIndex]\
    \ == ')' {\n            openingBracketsFound = false\n            openingBracketsIndex\
    \ += 1\n        } else {\n            openingBracketsIndex += 1\n        }\n \
    \   }\n\n    while closingBracketsIndex < closingBracketsCount {\n        if closingBrackets[closingBracketsIndex]\
    \ == '(' {\n            closingBracketsFound = true\n            closingBracketsIndex\
    \ += 1\n        } else if closingBrackets[closingBracketsIndex] == ')' {\n   \
    \         closingBracketsFound = false\n            closingBracketsIndex += 1\n\
    \        } else {\n            closingBracketsIndex += 1\n        }\n    }\n\n\
    \    if openingBracketsFound {\n        if closingBracketsFound {\n          \
    \  return false\n        } else {\n            closingBracketsCount -= 1\n   \
    \     }\n    }\n\n    if closingBracketsFound {\n        return false\n    } else\
    \ {\n        openingBracketsCount -= 1\n    }\n\n    return openingBracketsCount\
    \ == 0 && closingBracketsCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpoqwk87x8.swift:15:53: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[openingBracketsIndex] == '(' {\n      \
    \                                              ^~~\n                         \
    \                           \"(\"\n/tmp/tmpoqwk87x8.swift:18:60: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[openingBracketsIndex]\
    \ == ')' {\n                                                           ^~~\n \
    \                                                          \")\"\n/tmp/tmpoqwk87x8.swift:27:53:\
    \ error: single-quoted string literal found, use '\"'\n        if closingBrackets[closingBracketsIndex]\
    \ == '(' {\n                                                    ^~~\n        \
    \                                            \"(\"\n/tmp/tmpoqwk87x8.swift:30:60:\
    \ error: single-quoted string literal found, use '\"'\n        } else if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n                                                           ^~~\n \
    \                                                          \")\"\n/tmp/tmpoqwk87x8.swift:5:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpoqwk87x8.swift:6:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpoqwk87x8.swift:7:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpoqwk87x8.swift:8:41: error: 'characters'\
    \ i"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return true\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if openingBrackets.first == closingBrackets.first\
    \ {\n        return true\n    }\n    if openingBrackets.last == closingBrackets.last\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8iyrzr0o.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8iyrzr0o.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n\
    \    if opening_brackets.isEmpty {\n        return false\n    }\n    if closing_brackets.isEmpty\
    \ {\n        return true\n    }\n    if opening_brackets.first != closing_brackets.last\
    \ {\n        return false\n    }\n    return correct_bracketing(String(opening_brackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpqzed67im.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqzed67im.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpqzed67im.swift:18:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(opening_brackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    var openingBracketsCount = brackets.characters.count\n    var closingBracketsCount\
    \ = brackets.characters.count\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        openingBracketsIndex += 1\n        openingBracketsCount -= 1\n  \
    \      if openingBracketsIndex < openingBracketsCount {\n            if openingBrackets[openingBracketsIndex]\
    \ == '(' {\n                openingBrackets[openingBracketsIndex] = '['\n    \
    \            openingBracketsCount += 1\n            }\n        }\n    }\n\n  \
    \  while closingBracketsIndex < closingBracketsCount {\n        closingBracketsIndex\
    \ += 1\n        closingBracketsCount -= 1\n        if closingBracketsIndex < closingBracketsCount\
    \ {\n            if closingBrackets[closingBracketsIndex] == ')' {\n         \
    \       closingBrackets[closingBracketsIndex] = ']'\n                closingBracketsCount\
    \ += 1\n            }\n        }\n    }\n\n    return openingBracketsCount ==\
    \ closingBracketsCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpahi21s2q.swift:16:57: error: single-quoted string literal found,\
    \ use '\"'\n            if openingBrackets[openingBracketsIndex] == '(' {\n  \
    \                                                      ^~~\n                 \
    \                                       \"(\"\n/tmp/tmpahi21s2q.swift:17:57: error:\
    \ single-quoted string literal found, use '\"'\n                openingBrackets[openingBracketsIndex]\
    \ = '['\n                                                        ^~~\n       \
    \                                                 \"[\"\n/tmp/tmpahi21s2q.swift:27:57:\
    \ error: single-quoted string literal found, use '\"'\n            if closingBrackets[closingBracketsIndex]\
    \ == ')' {\n                                                        ^~~\n    \
    \                                                    \")\"\n/tmp/tmpahi21s2q.swift:28:57:\
    \ error: single-quoted string literal found, use '\"'\n                closingBrackets[closingBracketsIndex]\
    \ = ']'\n                                                        ^~~\n       \
    \                                                 \"]\"\n/tmp/tmpahi21s2q.swift:5:36:\
    \ error: 'characters' is unavailable: Please use String directly\n    var openingBrackets\
    \ = brackets.characters\n                                   ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpahi21s2q.swift:6:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpahi21s2q.swift:9:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpahi21s2q.swift:10:41: error: 'characters"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for bracket in brackets {\n\
    \        switch bracket {\n        case \"(\": bracketCount++\n        case \"\
    )\": bracketCount--\n        default: break\n        }\n        if bracketCount\
    \ < 0 {\n            return false\n        }\n    }\n    return bracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkqvemk1h.swift:8:31: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        case \"(\": bracketCount++\n                 \
    \             ^~\n/tmp/tmpkqvemk1h.swift:9:31: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n        case \")\": bracketCount--\n       \
    \                       ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    // Remove opening brackets\n    while openingBrackets.count\
    \ > 0 && openingBrackets[0] == \")\" {\n        openingBrackets.remove(at: 0)\n\
    \    }\n\n    // Remove closing brackets\n    while closingBrackets.count > 0\
    \ && closingBrackets[closingBrackets.count - 1] == \")\" {\n        closingBrackets.remove(at:\
    \ closingBrackets.count - 1)\n    }\n\n    // If there are any remaining brackets,\
    \ return false\n    if openingBrackets.count > 0 || closingBrackets.count > 0\
    \ {\n        return false\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpfwdw2b29.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfwdw2b29.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpfwdw2b29.swift:9:40: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    while\
    \ openingBrackets.count > 0 && openingBrackets[0] == \")\" {\n               \
    \                        ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpfwdw2b29.swift:10:36: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String.Index'\n     \
    \   openingBrackets.remove(at: 0)\n                                   ^\n/tmp/tmpfwdw2b29.swift:14:40:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    while closingBrackets.count > 0 && closingBrackets[closingBrackets.count\
    \ - 1] == \")\" {\n                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfwdw2b29.swift:15:58:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \        closingBrackets.remove(at: closingBrackets.count - 1)\n             \
    \                                            ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    while openingBrackets.count > 0 {\n        if openingBrackets[0]\
    \ == '(' {\n            openingBrackets.remove(at: 0)\n            closingBrackets.remove(at:\
    \ 0)\n        } else if openingBrackets[0] == ')' {\n            openingBrackets.remove(at:\
    \ 0)\n            closingBrackets.remove(at: 0)\n        } else if openingBrackets[0]\
    \ == '{' {\n            openingBrackets.remove(at: 0)\n            closingBrackets.remove(at:\
    \ 0)\n        } else if openingBrackets[0] == '}' {\n            openingBrackets.remove(at:\
    \ 0)\n            closingBrackets.remove(at: 0)\n        } else {\n          \
    \  return false\n        }\n    }\n\n    return openingBrackets.count == 0 &&\
    \ closingBrackets.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpyzoj0e2y.swift:9:34: error: single-quoted string literal found,\
    \ use '\"'\n        if openingBrackets[0] == '(' {\n                         \
    \        ^~~\n                                 \"(\"\n/tmp/tmpyzoj0e2y.swift:12:41:\
    \ error: single-quoted string literal found, use '\"'\n        } else if openingBrackets[0]\
    \ == ')' {\n                                        ^~~\n                    \
    \                    \")\"\n/tmp/tmpyzoj0e2y.swift:15:41: error: single-quoted\
    \ string literal found, use '\"'\n        } else if openingBrackets[0] == '{'\
    \ {\n                                        ^~~\n                           \
    \             \"{\"\n/tmp/tmpyzoj0e2y.swift:18:41: error: single-quoted string\
    \ literal found, use '\"'\n        } else if openingBrackets[0] == '}' {\n   \
    \                                     ^~~\n                                  \
    \      \"}\"\n/tmp/tmpyzoj0e2y.swift:5:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyzoj0e2y.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpyzoj0e2y.swift:9:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[0] == '(' {\n           ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpyzoj0e2y.swift:10:40:\
    \ error: cannot convert value of type 'Int' to expected argument type 'String.Index'\n\
    \            openingBrackets.remove(at: 0)\n                                 \
    \      ^\n/tmp/tmpyzoj0e2y.swift:11:40: error: can"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return true\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if openingBrackets.first != closingBrackets.last\
    \ {\n        return false\n    }\n    if openingBrackets.first == closingBrackets.first\
    \ {\n        return false\n    }\n    if openingBrackets.first == closingBrackets.last\
    \ {\n        return true\n    }\n    return correct_bracketing(String(openingBrackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpse34nmyd.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpse34nmyd.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpse34nmyd.swift:24:31: error: missing argument label\
    \ 'brackets:' in call\n    return correct_bracketing(String(openingBrackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n\n    if opening_brackets.count != closing_brackets.count\
    \ {\n        return false\n    }\n\n    var opening_bracket = opening_brackets.startIndex\n\
    \    var closing_bracket = closing_brackets.startIndex\n\n    while opening_bracket\
    \ != closing_bracket {\n        if opening_brackets[opening_bracket] != closing_brackets[closing_bracket]\
    \ {\n            return false\n        }\n\n        opening_bracket++\n      \
    \  closing_bracket++\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpeil5jbn7.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeil5jbn7.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpeil5jbn7.swift:20:24: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        opening_bracket++\n                \
    \       ^~\n/tmp/tmpeil5jbn7.swift:21:24: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n        closing_bracket++\n                   \
    \    ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for bracket in brackets {\n\
    \        if bracket == \"(\" {\n            bracketCount++\n        } else if\
    \ bracket == \")\" {\n            bracketCount--\n            if bracketCount\
    \ == 0 {\n                return false\n            }\n        }\n    }\n    return\
    \ bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpgftzg0fd.swift:8:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            bracketCount++\n                        ^~\n\
    /tmp/tmpgftzg0fd.swift:10:25: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            bracketCount--\n                        ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        if c == '(' {\n            opening = true\n       \
    \ } else if c == ')' {\n            closing = true\n        } else if opening\
    \ && closing {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp15j5x57b.swift:8:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '(' {\n                ^~~\n                \"(\"\n\
    /tmp/tmp15j5x57b.swift:10:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == ')' {\n                       ^~~\n                \
    \       \")\"\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    var openingBracketsCount = 1\n    var closingBracketsCount = 1\n    for index\
    \ in 0..<openingBrackets.count {\n        if openingBrackets[index] == closingBrackets[index]\
    \ {\n            openingBracketsCount += 1\n        } else {\n            openingBracketsCount\
    \ = 0\n            closingBracketsCount = 0\n        }\n    }\n    return openingBracketsCount\
    \ == closingBracketsCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpw1axxkow.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw1axxkow.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw1axxkow.swift:12:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[index] == closingBrackets[index] {\n           ^~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpw1axxkow.swift:12:38:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[index] == closingBrackets[index]\
    \ {\n                                     ^~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n\n    while openingBracketsIndex < openingBracketsCount\
    \ {\n        let openingBracket = openingBrackets[openingBracketsIndex]\n    \
    \    if openingBracket == \"(\" {\n            openingBracketsIndex += 1\n   \
    \         openingBracketsCount -= 1\n        } else if openingBracket == \")\"\
    \ {\n            openingBracketsCount += 1\n            openingBracketsIndex +=\
    \ 1\n        } else {\n            return false\n        }\n    }\n\n    while\
    \ closingBracketsIndex < closingBracketsCount {\n        let closingBracket =\
    \ closingBrackets[closingBracketsIndex]\n        if closingBracket == \"(\" {\n\
    \            closingBracketsIndex += 1\n            closingBracketsCount -= 1\n\
    \        } else if closingBracket == \")\" {\n            closingBracketsCount\
    \ += 1\n            closingBracketsIndex += 1\n        } else {\n            return\
    \ false\n        }\n    }\n\n    return openingBracketsIndex == closingBracketsIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptkk_wecs.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptkk_wecs.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptkk_wecs.swift:7:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmptkk_wecs.swift:8:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmptkk_wecs.swift:13:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let openingBracket = openingBrackets[openingBracketsIndex]\n        \
    \                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptkk_wecs.swift:26:30:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        let closingBracket = closingBrackets[closingBracketsIndex]\n\
    \                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    opening.removeLast()\n    closing.removeFirst()\n \
    \   if opening.isEmpty {\n        return false\n    }\n    if opening.first ==\
    \ \"(\" {\n        opening.removeFirst()\n    }\n    if closing.last == \")\"\
    \ {\n        closing.removeLast()\n    }\n    if opening.last == \")\" {\n   \
    \     opening.removeLast()\n    }\n    if closing.first == \"(\" {\n        closing.removeFirst()\n\
    \    }\n    return opening.isEmpty && closing.isEmpty && brackets.isEmpty == false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmph6oc1w6l.swift:5:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmph6oc1w6l.swift:6:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    if openingBrackets.count != closingBrackets.count\
    \ {\n        return false\n    }\n\n    for i in 0..<openingBrackets.count {\n\
    \        if openingBrackets[i] != closingBrackets[i] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpzgz3q7j4.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzgz3q7j4.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpzgz3q7j4.swift:13:12: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        if\
    \ openingBrackets[i] != closingBrackets[i] {\n           ^~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzgz3q7j4.swift:13:34:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if openingBrackets[i] != closingBrackets[i]\
    \ {\n                                 ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpzgz3q7j4.swift:5:9: warning:\
    \ variable 'openingBrackets' was never mutated; consider changing to 'let' constant\n\
    \    var openingBrackets = brackets.characters\n    ~~~ ^\n    let\n/tmp/tmpzgz3q7j4.swift:6:9:\
    \ warning: variable 'closingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var closingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   if opening {\n                opening = false\n            } else {\n    \
    \            closing = false\n            }\n        }\n    }\n    return !opening\
    \ && !closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpe3fqhh8e/tmpe3fqhh8e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76e297dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76e2674b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76e2674988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76e26737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe3fqhh8e                        0x000055a520cd56a3 <unavailable> + 5795

    5    libc.so.6                          0x00002b76e2b69460 __libc_start_main +
    245

    6    tmpe3fqhh8e                        0x000055a520cd5099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var lastChar = String()\n \
    \   for char in brackets {\n        if char == \"(\" {\n            bracketCount\
    \ += 1\n            lastChar = char\n        } else if char == \")\" {\n     \
    \       bracketCount -= 1\n            if bracketCount == 0 {\n              \
    \  return false\n            }\n            lastChar = char\n        }\n    }\n\
    \    return bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6ika5w_f.swift:10:24: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            lastChar = char\n                       ^~~~\n\
    /tmp/tmp6ika5w_f.swift:16:24: error: cannot assign value of type 'Character' to\
    \ type 'String'\n            lastChar = char\n                       ^~~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n\n       \
    \ if openingBracket == \"(\" {\n            openingBracketIndex += 1\n       \
    \ } else if openingBracket == \")\" {\n            closingBracketIndex -= 1\n\
    \        } else if openingBracket == \"{\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"[\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"]\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"<\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \">\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"/\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"%\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"*\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"?\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"=\" { // Handle the '=' case separately\
    \ since it can have different meanings in different contexts.\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"!\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"|\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"&\" {\n            openingBracketIndex += 1\n            closingBra\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptfwexzwh.swift:86:66: error: expected '}' at end of brace statement\n\
    assert(correct_bracketing(brackets: \"()()(()())()))()\") == false)\n        \
    \                                                         ^\n/tmp/tmptfwexzwh.swift:10:51:\
    \ note: to match this opening '{'\n    while openingBracketIndex < brackets.endIndex\
    \ {\n                                                  ^\n/tmp/tmptfwexzwh.swift:86:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmptfwexzwh.swift:4:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmptfwexzwh.swift:5:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptfwexzwh.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptfwexzwh.swift:15:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmptfwexzwh.swift:17:33: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex -= 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmptfwexzwh.swift:19:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmptfwexzwh.swift:20:33: error:\
    \ binary operator '+=' cannot be applied to operands of"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        if\
    \ closingBrackets.contains(where: { $0 == openingBracket }) {\n            return\
    \ false\n        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmprnw2c_s0.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmprnw2c_s0.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for openingBracket in openingBrackets {\n        let\
    \ closingBracket = closingBrackets.first(where: { $0 == openingBracket })\n  \
    \      \n        if closingBracket == nil {\n            return false\n      \
    \  }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp4wai_ump.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4wai_ump.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for bracket in brackets {\n\
    \        if bracket == \"(\" {\n            bracketCount++\n        } else if\
    \ bracket == \")\" {\n            bracketCount--\n        }\n    }\n    return\
    \ bracketCount == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp8iovjrh_.swift:8:25: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            bracketCount++\n                        ^~\n\
    /tmp/tmp8iovjrh_.swift:10:25: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n            bracketCount--\n                        ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty() {\n        return true\n    }\n    if closingBrackets.isEmpty()\
    \ {\n        return false\n    }\n    if openingBrackets.first == \"(\" && closingBrackets.last\
    \ == \")\" {\n        return true\n    }\n    if openingBrackets.first == \"[\"\
    \ && closingBrackets.last == \"]\" {\n        return true\n    }\n    if openingBrackets.first\
    \ == \"{\" && closingBrackets.last == \"}\" {\n        return true\n    }\n  \
    \  return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmplmogaety.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplmogaety.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmplmogaety.swift:9:24: error: cannot call value of non-function\
    \ type 'Bool'\n    if openingBrackets.isEmpty() {\n                       ^  \
    \    ~~\n                              \n/tmp/tmplmogaety.swift:12:24: error:\
    \ cannot call value of non-function type 'Bool'\n    if closingBrackets.isEmpty()\
    \ {\n                       ^      ~~\n                              \n"
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ b in brackets {\n        switch b {\n        case \"(\": opening = true\n  \
    \      case \"[\": opening = true\n        case \"{\": opening = true\n      \
    \  case \"<\": opening = true\n        case \")\": closing = true\n        case\
    \ \"]\": closing = true\n        case \"}\": closing = true\n        case \"\\\
    \\\": closing = true\n        default: break\n        }\n    }\n    return opening\
    \ && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpejzbnm89/tmpejzbnm89.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0307c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0304bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0304bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0304ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpejzbnm89                        0x0000557e3c49c6a3 <unavailable> + 5795

    5    libc.so.6                          0x00002ac0309b0460 __libc_start_main +
    245

    6    tmpejzbnm89                        0x0000557e3c49c099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = brackets.characters\n    var closing =\
    \ brackets.characters\n    opening.removeFirst()\n    opening.removeLast()\n \
    \   closing.removeFirst()\n    closing.removeLast()\n    if opening.isEmpty {\n\
    \        return closing.isEmpty // empty brackets means no brackets\n    }\n \
    \   if closing.isEmpty {\n        return false // no brackets\n    }\n    if opening.first\
    \ != closing.last {\n        return false // brackets aren't balanced\n    }\n\
    \    if opening.last == closing.first {\n        return false // brackets aren't\
    \ balanced\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmppgbz0j6_.swift:5:28: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening = brackets.characters\n               \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmppgbz0j6_.swift:6:28: error: 'characters' is unavailable: Please use String\
    \ directly\n    var closing = brackets.characters\n                          \
    \ ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ char in brackets {\n        switch char {\n        case \"(\":\n           \
    \ opening = true\n        case \"[\":\n            opening = true\n        case\
    \ \"{\":\n            opening = true\n        case \"(\":\n            closing\
    \ = true\n        case \"[\":\n            closing = true\n        case \"{\"\
    :\n            closing = true\n        default:\n            continue\n      \
    \  }\n        if opening && !closing {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp3_tmtgrt/tmp3_tmtgrt.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0879c85c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b087997cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b087997c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b087997b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3_tmtgrt                        0x000056382de0240b <unavailable> + 5131

    5    libc.so.6                          0x00002b0879e71460 __libc_start_main +
    245

    6    tmp3_tmtgrt                        0x000056382de02099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var openingBracketCount = 0\n\
    \    var closingBracketCount = 0\n    for char in brackets {\n        if char\
    \ == \"(\" {\n            openingBracketCount += 1\n        } else if char ==\
    \ \")\" {\n            closingBracketCount += 1\n        } else if char == \"\
    ,\" {\n            if openingBracketCount > closingBracketCount {\n          \
    \      return false\n            }\n            openingBracketCount = 0\n    \
    \        closingBracketCount = 0\n        } else {\n            if openingBracketCount\
    \ != closingBracketCount {\n                return false\n            }\n    \
    \        openingBracketCount = 0\n            closingBracketCount = 0\n      \
    \  }\n    }\n    return openingBracketCount == closingBracketCount\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmp7_swb0d0/tmp7_swb0d0.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b15824b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b15821abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b15821ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15821aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_swb0d0                        0x000055cc2ac6975b <unavailable> + 5979

    5    libc.so.6                          0x00002b15826a0460 __libc_start_main +
    245

    6    tmp7_swb0d0                        0x000055cc2ac69099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   opening = false\n            closing = false\n        }\n    }\n    return\
    \ opening && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpl64_kcxp/tmpl64_kcxp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1de00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1daf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1daf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1daf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl64_kcxp                        0x000056233984240b <unavailable> + 5131

    5    libc.so.6                          0x00002b2b1dfec460 __libc_start_main +
    245

    6    tmpl64_kcxp                        0x0000562339842099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[i]\n        let closingBracket = closingBrackets[i]\n    \
    \    \n        if openingBracket != closingBracket {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbo6kuder.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbo6kuder.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ opening_bracket = \"\"\n    var closing_bracket = \"\"\n\n    for char in brackets\
    \ {\n        switch char {\n        case \"(\":\n            opening = true\n\
    \            opening_bracket = char\n        case \"[\":\n            opening\
    \ = true\n            opening_bracket = char\n        case \"{\":\n          \
    \  opening = true\n            opening_bracket = char\n        case \"(\":\n \
    \           closing = true\n            closing_bracket = char\n        case \"\
    )\":\n            closing = true\n            closing_bracket = char\n       \
    \ default:\n            if opening {\n                opening = false\n      \
    \          opening_bracket = \"\"\n            }\n            if closing {\n \
    \               closing = false\n                closing_bracket = \"\"\n    \
    \        }\n        }\n    }\n\n    return opening_bracket == closing_bracket\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpb5r8exws.swift:14:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = char\n                     \
    \         ^~~~\n/tmp/tmpb5r8exws.swift:17:31: error: cannot assign value of type\
    \ 'Character' to type 'String'\n            opening_bracket = char\n         \
    \                     ^~~~\n/tmp/tmpb5r8exws.swift:20:31: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            opening_bracket = char\n\
    \                              ^~~~\n/tmp/tmpb5r8exws.swift:23:31: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            closing_bracket\
    \ = char\n                              ^~~~\n/tmp/tmpb5r8exws.swift:26:31: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            closing_bracket\
    \ = char\n                              ^~~~\n/tmp/tmpb5r8exws.swift:21:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case \"(\":\n             ^~~\n/tmp/tmpb5r8exws.swift:12:14: note: first\
    \ occurrence of identical literal pattern is here\n        case \"(\":\n     \
    \        ^~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsString = \"\"\n\
    \    var closingBracketsString = \"\"\n    var openingBracketsStringIndex = 0\n\
    \    var closingBracketsStringIndex = 0\n    var openingBracketsStringLength =\
    \ 0\n    var closingBracketsStringLength = 0\n    var openingBracketsStringLastChar\
    \ = 0\n    var closingBracketsStringLastChar = 0\n    var openingBracketsStringLastCharIndex\
    \ = 0\n    var closingBracketsStringLastCharIndex = 0\n    var openingBracketsStringLastCharLength\
    \ = 0\n    var closingBracketsStringLastCharLength = 0\n    var openingBracketsStringLastCharIndex2\
    \ = 0\n    var closingBracketsStringLastCharIndex2 = 0\n    var openingBracketsStringLastCharLength2\
    \ = 0\n    var closingBracketsStringLastCharLength2 = 0\n    var openingBracketsStringLastCharIndex3\
    \ = 0\n    var closingBracketsStringLastCharIndex3 = 0\n    var openingBracketsStringLastCharLength3\
    \ = 0\n    var closingBracketsStringLastCharLength3 = 0\n    var openingBracketsStringLastCharIndex4\
    \ = 0\n    var closingBracketsStringLastCharIndex4 = 0\n    var openingBracketsStringLastCharLength4\
    \ = 0\n    var closingBracketsStringLastCharLength4 = 0\n    var openingBracketsStringLastCharIndex5\
    \ = 0\n    var closingBracketsStringLastCharIndex5 = 0\n    var openingBracketsStringLastCharLength5\
    \ = 0\n    var closingBracketsStringLastCharLength5 = 0\n    var openingBracketsStringLastCharIndex6\
    \ = 0\n    var closingBracketsStringLastCharIndex6 = 0\n    var openingBracketsStringLastCharLength6\
    \ = 0\n    var closingBracketsStringLastCharLength6 = 0\n    var openingBracketsStringLastCharIndex7\
    \ = 0\n    var closingBracketsStringLastCharIndex7 = 0\n    var openingBracketsStringLastCharLength7\
    \ = 0\n    var closingBracketsStringLastCharLength7 = 0\n    var openingBracketsStringLastCharIndex8\
    \ = 0\n    var closingBracketsStringLastCharIndex8 = 0\n    var openingBrackets\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpafp5_ou0.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpafp5_ou0.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpafp5_ou0.swift:7:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpafp5_ou0.swift:8:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpafp5_ou0.swift:49:9: error: type annotation\
    \ missing in pattern\n    var openingBrackets\n        ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        guard openingBrackets[openingBracketIndex] ==\
    \ '(' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == ')' else {\n   \
    \         return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == ',' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == ',' else {\n   \
    \         return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == ')' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == ',' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == ')' else {\n   \
    \         return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == ',' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == ',' else {\n   \
    \         return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == ')' else {\n            return false\n\
    \        }\n        openingBracketIndex += 1\n        guard openingBrackets[openingBracketIndex]\
    \ == ',' else {\n            return false\n        }\n        openingBracketIndex\
    \ += 1\n        guard openingBrackets[openingBracketIndex] == ')' else {\n   \
    \         return false\n        }\n        openingBracketIndex += 1\n        guard\
    \ openingBrackets[openingBracketIndex] == ',' else {\n            return false\n\
    \        }\n        opening\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpm3ondhgj.swift:11:55: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketIndex] == '(' else {\n\
    \                                                      ^~~\n                 \
    \                                     \"(\"\n/tmp/tmpm3ondhgj.swift:15:55: error:\
    \ single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpm3ondhgj.swift:19:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ',' else {\n                                                      ^~~\n \
    \                                                     \",\"\n/tmp/tmpm3ondhgj.swift:23:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpm3ondhgj.swift:27:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ',' else {\n                                                      ^~~\n \
    \                                                     \",\"\n/tmp/tmpm3ondhgj.swift:31:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \                                                     \")\"\n/tmp/tmpm3ondhgj.swift:35:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ',' else {\n                                                      ^~~\n \
    \                                                     \",\"\n/tmp/tmpm3ondhgj.swift:39:55:\
    \ error: single-quoted string literal found, use '\"'\n        guard openingBrackets[openingBracketIndex]\
    \ == ')' else {\n                                                      ^~~\n \
    \         "
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    var openingBracketCount = 0\n\
    \    var closingBracketCount = 0\n    for character in brackets {\n        switch\
    \ character {\n        case \"(\":\n            openingBracketCount++\n      \
    \  case \"[\":\n            bracketCount++\n        case \"{\":\n            bracketCount++\n\
    \        case \"}\":\n            bracketCount--\n        default:\n         \
    \   if openingBracketCount != 0 {\n                openingBracketCount--\n   \
    \         }\n            if closingBracketCount != 0 {\n                closingBracketCount--\n\
    \            }\n        }\n    }\n    return bracketCount == 0\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkv208xmy.swift:11:32: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            openingBracketCount++\n                  \
    \             ^~\n/tmp/tmpkv208xmy.swift:13:25: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n            bracketCount++\n               \
    \         ^~\n/tmp/tmpkv208xmy.swift:15:25: error: cannot find operator '++' in\
    \ scope; did you mean '+= 1'?\n            bracketCount++\n                  \
    \      ^~\n/tmp/tmpkv208xmy.swift:17:25: error: cannot find operator '--' in scope;\
    \ did you mean '-= 1'?\n            bracketCount--\n                        ^~\n\
    /tmp/tmpkv208xmy.swift:20:36: error: cannot find operator '--' in scope; did you\
    \ mean '-= 1'?\n                openingBracketCount--\n                      \
    \             ^~\n/tmp/tmpkv208xmy.swift:23:36: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n                closingBracketCount--\n    \
    \                               ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   opening = false\n            closing = false\n        }\n    }\n    return\
    \ opening && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpl64_kcxp/tmpl64_kcxp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1de00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1daf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1daf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1daf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl64_kcxp                        0x000056233984240b <unavailable> + 5131

    5    libc.so.6                          0x00002b2b1dfec460 __libc_start_main +
    245

    6    tmpl64_kcxp                        0x0000562339842099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = 0\n    var closingBracketIndex\
    \ = 0\n    while openingBracketIndex < openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[openingBracketIndex]\n        let closingBracket = closingBrackets[closingBracketIndex]\n\
    \        if openingBracket == \"(\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \")\" {\n            closingBracketIndex\
    \ += 1\n        } else {\n            return false\n        }\n    }\n    return\
    \ openingBracketIndex == closingBracketIndex\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp7kc6_cyu.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7kc6_cyu.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp7kc6_cyu.swift:10:30: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n        let\
    \ openingBracket = openingBrackets[openingBracketIndex]\n                    \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp7kc6_cyu.swift:11:30: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n         \
    \                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7kc6_cyu.swift:5:9:\
    \ warning: variable 'openingBrackets' was never mutated; consider changing to\
    \ 'let' constant\n    var openingBrackets = brackets.characters\n    ~~~ ^\n \
    \   let\n/tmp/tmp7kc6_cyu.swift:6:9: warning: variable 'closingBrackets' was never\
    \ mutated; consider changing to 'let' constant\n    var closingBrackets = brackets.characters\n\
    \    ~~~ ^\n    let\n/tmp/tmp7kc6_cyu.swift:11:13: warning: initialization of\
    \ immutable value 'closingBracket' was never used; consider replacing with assignment\
    \ to '_' or removing it\n        let closingBracket = closingBrackets[closingBracketIndex]\n\
    \ "
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = false\n        case \"{\"\
    :\n            opening = false\n        case \"}\":\n            closing = true\n\
    \        default:\n            return false\n        }\n    }\n    return opening\
    \ && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpqb6y9pxk/tmpqb6y9pxk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae7db2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae7d822b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae7d822988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae7d8217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqb6y9pxk                        0x000055a2f4f0140b <unavailable> + 5131

    5    libc.so.6                          0x00002aae7dd17460 __libc_start_main +
    245

    6    tmpqb6y9pxk                        0x000055a2f4f01099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeFirst()\n    closing_brackets.removeLast()\n\
    \    if opening_brackets.isEmpty() {\n        return true\n    }\n    if closing_brackets.isEmpty()\
    \ {\n        return false\n    }\n    if opening_brackets.first != closing_brackets.first\
    \ {\n        return false\n    }\n    return correct_bracketing(String(brackets))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp5vfmxcwo.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5vfmxcwo.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5vfmxcwo.swift:9:25: error: cannot call value of non-function\
    \ type 'Bool'\n    if opening_brackets.isEmpty() {\n                        ^\
    \      ~~\n                               \n/tmp/tmp5vfmxcwo.swift:12:25: error:\
    \ cannot call value of non-function type 'Bool'\n    if closing_brackets.isEmpty()\
    \ {\n                        ^      ~~\n                               \n/tmp/tmp5vfmxcwo.swift:18:31:\
    \ error: missing argument label 'brackets:' in call\n    return correct_bracketing(String(brackets))\n\
    \                              ^\n                              brackets: \n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n\n    var openingBracketIndex = openingBrackets.startIndex\n\
    \    var closingBracketIndex = closingBrackets.startIndex\n\n    while openingBracketIndex\
    \ < openingBrackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \n        if openingBracket == \"(\" {\n            openingBracketIndex += 1\n\
    \        } else if openingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex -= 1\n        } else {\n            return\
    \ false\n        }\n    }\n\n    while closingBracketIndex < closingBrackets.endIndex\
    \ {\n        let closingBracket = closingBrackets[closingBracketIndex]\n\n   \
    \     if closingBracket == \"(\" {\n            closingBracketIndex += 1\n   \
    \     } else if closingBracket == \")\" {\n            closingBracketIndex +=\
    \ 1\n            openingBracketIndex -= 1\n        } else {\n            return\
    \ false\n        }\n    }\n\n    return openingBracketIndex == closingBracketIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp2l6u70_n.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2l6u70_n.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2l6u70_n.swift:15:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2l6u70_n.swift:17:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp2l6u70_n.swift:18:33: error: binary operator '-=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ -= 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2l6u70_n.swift:28:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmp2l6u70_n.swift:30:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            closingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmp2l6u70_n.swift:31:33: error:\
    \ binary operator '-=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            openingBracketIndex -= 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    var openingBracketCount\
    \ = 0\n    var closingBracketCount = 0\n\n    while openingBracketIndex < brackets.endIndex\
    \ {\n        let openingBracket = openingBrackets[openingBracketIndex]\n     \
    \   openingBracketCount += 1\n        openingBracketIndex = openingBracketIndex\
    \ + 1\n\n        if openingBracket == \"(\" {\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n        } else if openingBracket == \")\" {\n   \
    \         openingBracketIndex = openingBracketIndex + 1\n            closingBracketCount\
    \ += 1\n        }\n    }\n\n    while closingBracketIndex < brackets.endIndex\
    \ {\n        let closingBracket = closingBrackets[closingBracketIndex]\n     \
    \   closingBracketCount += 1\n        closingBracketIndex = closingBracketIndex\
    \ + 1\n\n        if closingBracket == \"(\" {\n            closingBracketIndex\
    \ = closingBracketIndex + 1\n            openingBracketCount -= 1\n        } else\
    \ if closingBracket == \")\" {\n            closingBracketIndex = closingBracketIndex\
    \ + 1\n            openingBracketCount -= 1\n        }\n    }\n\n    return openingBracketCount\
    \ == closingBracketCount\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpn95hefxc.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpn95hefxc.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpn95hefxc.swift:15:51: error: binary operator '+' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                              ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpn95hefxc.swift:15:51: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n        openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \  ^\n/tmp/tmpn95hefxc.swift:18:55: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpn95hefxc.swift:18:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmpn95hefxc.swift:20:55: error: binary operator '+' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                  ~~~~~~~~~~~~~~~~~~~\
    \ ^ ~\n/tmp/tmpn95hefxc.swift:20:55: note: overloads for '+' exist with these\
    \ partially matching parameter lists: (Int, Int)\n            openingBracketIndex\
    \ = openingBracketIndex + 1\n                                                \
    \      ^\n/tmp/tmpn95hefxc.swift:28:51: error:"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return true\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if openingBrackets.first == closingBrackets.first\
    \ {\n        return correct_bracketing(String(openingBrackets.dropFirst()))\n\
    \    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmphj83kpa5.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphj83kpa5.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmphj83kpa5.swift:16:35: error: missing argument label\
    \ 'brackets:' in call\n        return correct_bracketing(String(openingBrackets.dropFirst()))\n\
    \                                  ^\n                                  brackets:\
    \ \n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketIndex = brackets.startIndex\n \
    \   var closingBracketIndex = brackets.startIndex\n    while openingBracketIndex\
    \ < brackets.endIndex {\n        let openingBracket = openingBrackets[openingBracketIndex]\n\
    \        let closingBracket = closingBrackets[closingBracketIndex]\n        if\
    \ openingBracket == \"(\" && closingBracket == \")\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"[\" && closingBracket == \"]\" {\n            openingBracketIndex += 1\n\
    \            closingBracketIndex += 1\n        } else if openingBracket == \"\
    {\" && closingBracket == \"}\" {\n            openingBracketIndex += 1\n     \
    \       closingBracketIndex += 1\n        } else if openingBracket == \"<\" &&\
    \ closingBracket == \">\" {\n            openingBracketIndex += 1\n          \
    \  closingBracketIndex += 1\n        } else if openingBracket == \"(\" && closingBracket\
    \ == \"}\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if openingBracket == \"(\" && closingBracket == \">\" {\n\
    \            openingBracketIndex += 1\n            closingBracketIndex += 1\n\
    \        } else if openingBracket == \"<\" && closingBracket == \"(\" {\n    \
    \        openingBracketIndex += 1\n            closingBracketIndex += 1\n    \
    \    } else if openingBracket == \"[\" && closingBracket == \"(\" {\n        \
    \    openingBracketIndex += 1\n            closingBracketIndex += 1\n        }\
    \ else if openingBracket == \"{\" && closingBracket == \"(\" {\n            openingBracketIndex\
    \ += 1\n            closingBracketIndex += 1\n        } else if openingBracket\
    \ == \"<\" && closingBracket == \"[\" {\n            openingBracketIndex += 1\n\
    \            closingBracketIndex += 1\n        } else if openingBracket == \"\
    <\" && closingBracket == \"{\" {\n            openingBracketIndex += 1\n     \
    \       closingBracketIndex += 1\n        } else if openingBracket == \"<\" &&\
    \ closingBracket == \"<\" {\n            openingBracketIndex += 1\n          \
    \  closingBracketIndex += 1\n        } else if openingBracket == \"<\" && closingBracket\
    \ == \"[\" {\n            openingBracketIndex += 1\n            closingBracketIndex\
    \ += 1\n        } else if \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpowora3u1.swift:51:18: error: expected expression, var, or let in\
    \ 'if' condition\n        } else if \n                 ^\n/tmp/tmpowora3u1.swift:78:66:\
    \ error: expected '}' at end of brace statement\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()))()\") == false)\n                                          \
    \                       ^\n/tmp/tmpowora3u1.swift:4:51: note: to match this opening\
    \ '{'\nfunc correct_bracketing(brackets: String) -> Bool {\n                 \
    \                                 ^\n/tmp/tmpowora3u1.swift:5:36: error: 'characters'\
    \ is unavailable: Please use String directly\n    var openingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpowora3u1.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpowora3u1.swift:13:33: error: binary operator '+=' cannot\
    \ be applied to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpowora3u1.swift:14:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpowora3u1.swift:16:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBracketIndex\
    \ += 1\n            ~~~~~~~~~~~~~~~~~~~ ^  ~\n/tmp/tmpowora3u1.swift:17:33: error:\
    \ binary operator '+=' cannot be applied to operands of type 'String.Index' and\
    \ 'Int'\n            closingBracketIndex += 1\n            ~~~~~~~~~~~~~~~~~~~\
    \ ^  ~\n/tmp/tmpowora3u1.swift:19:33: error: binary operator '+=' cannot be applied\
    \ to operands of type 'String.Index' and 'Int'\n            openingBrac"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsCount = brackets.characters.count\n\
    \    var closingBracketsCount = brackets.characters.count\n    var openingBracketsIndex\
    \ = 0\n    var closingBracketsIndex = 0\n    var openingBracketsLastIndex = 0\n\
    \    var closingBracketsLastIndex = 0\n    var openingBracketsLastChar = openingBrackets[openingBracketsLastIndex]\n\
    \    var closingBracketsLastChar = closingBrackets[closingBracketsLastIndex]\n\
    \    var openingBracketsLastCharIsWhitespace = openingBracketsLastChar == CharacterSet.whitespaces\n\
    \    var closingBracketsLastCharIsWhitespace = closingBracketsLastChar == CharacterSet.whitespaces\n\
    \    var openingBracketsLastCharIsNewline = openingBracketsLastChar == CharacterSet.newline\n\
    \    var closingBracketsLastCharIsNewline = closingBracketsLastChar == CharacterSet.newline\n\
    \    var openingBracketsLastCharIsNewlineOrWhitespace = openingBracketsLastChar\
    \ == CharacterSet.newlineOrWhitespaces\n    var closingBracketsLastCharIsNewlineOrWhitespace\
    \ = closingBracketsLastChar == CharacterSet.newlineOrWhitespaces\n    var openingBracketsLastCharIsWhitespaceOrNewline\
    \ = openingBracketsLastChar == CharacterSet.whitespaceOrNewline\n    var closingBracketsLastCharIsWhitespaceOrNewline\
    \ = closingBracketsLastChar == CharacterSet.whitespaceOrNewline\n    var openingBracketsLastCharIsWhitespaceOrNewlineOrNewline\
    \ = openingBracketsLastChar == CharacterSet.whitespaceOrNewlineOrNewline\n   \
    \ var closingBracketsLastCharIsWhitespaceOrNewlineOrNewline = closingBracketsLastChar\
    \ == CharacterSet.whitespaceOrNewlineOrNewline\n    var openingBracketsLastCharIsWhitespaceOrNewlineOrNewlineOrNewline\
    \ = openingBracketsLastChar == CharacterSet.whitespaceOrNewlineOrNewlineOrNewline\n\
    \    var closingBracketsLastCharIsWhitespaceOrNewlineOrNewlineOrNewline = closingBracketsLastChar\
    \ == CharacterSet.whitespaceOrNewlineOrNewlineOrNewlineOrNewline\n    var openingBracketsLastCharIsWhitespaceOrNewlineOrNewlineOrNewlineOrNewline\
    \ = openingBracketsLastChar == CharacterSet.whitespaceOrNewlineOrNewlineOrNewlineOrNewlineOr\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmptnzf7qwa.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptnzf7qwa.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmptnzf7qwa.swift:7:41: error: 'characters' is unavailable:\
    \ Please use String directly\n    var openingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmptnzf7qwa.swift:8:41: error: 'characters'\
    \ is unavailable: Please use String directly\n    var closingBracketsCount = brackets.characters.count\n\
    \                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmptnzf7qwa.swift:13:35: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var openingBracketsLastChar = openingBrackets[openingBracketsLastIndex]\n\
    \                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmptnzf7qwa.swift:14:35:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var closingBracketsLastChar = closingBrackets[closingBracketsLastIndex]\n\
    \                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has bee"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[i]\n        let closingBracket = closingBrackets[i]\n    \
    \    \n        if openingBracket != closingBracket {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbo6kuder.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbo6kuder.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    var\
    \ opening_bracket = \"\"\n    var closing_bracket = \"\"\n\n    for char in brackets\
    \ {\n        switch char {\n        case \"(\":\n            opening = true\n\
    \            opening_bracket = char\n        case \"[\":\n            opening\
    \ = true\n            opening_bracket = char\n        case \"{\":\n          \
    \  opening = true\n            opening_bracket = char\n        case \"(\":\n \
    \           closing = true\n            closing_bracket = char\n        case \"\
    [\":\n            closing = true\n            closing_bracket = char\n       \
    \ case \"{\":\n            closing = true\n            closing_bracket = char\n\
    \        default:\n            if opening {\n                opening = false\n\
    \                opening_bracket = \"\"\n            }\n            if closing\
    \ {\n                closing = false\n                closing_bracket = \"\"\n\
    \            }\n        }\n    }\n    return opening_bracket == closing_bracket\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpuxz9s6ar.swift:14:31: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            opening_bracket = char\n                     \
    \         ^~~~\n/tmp/tmpuxz9s6ar.swift:17:31: error: cannot assign value of type\
    \ 'Character' to type 'String'\n            opening_bracket = char\n         \
    \                     ^~~~\n/tmp/tmpuxz9s6ar.swift:20:31: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            opening_bracket = char\n\
    \                              ^~~~\n/tmp/tmpuxz9s6ar.swift:23:31: error: cannot\
    \ assign value of type 'Character' to type 'String'\n            closing_bracket\
    \ = char\n                              ^~~~\n/tmp/tmpuxz9s6ar.swift:26:31: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            closing_bracket\
    \ = char\n                              ^~~~\n/tmp/tmpuxz9s6ar.swift:29:31: error:\
    \ cannot assign value of type 'Character' to type 'String'\n            closing_bracket\
    \ = char\n                              ^~~~\n/tmp/tmpuxz9s6ar.swift:21:14: warning:\
    \ literal value is already handled by previous pattern; consider removing it\n\
    \        case \"(\":\n             ^~~\n/tmp/tmpuxz9s6ar.swift:12:14: note: first\
    \ occurrence of identical literal pattern is here\n        case \"(\":\n     \
    \        ^~~\n/tmp/tmpuxz9s6ar.swift:24:14: warning: literal value is already\
    \ handled by previous pattern; consider removing it\n        case \"[\":\n   \
    \          ^~~\n/tmp/tmpuxz9s6ar.swift:15:14: note: first occurrence of identical\
    \ literal pattern is here\n        case \"[\":\n             ^~~\n/tmp/tmpuxz9s6ar.swift:27:14:\
    \ warning: literal value is already handled by previous pattern; consider removing\
    \ it\n        case \"{\":\n             ^~~\n/tmp/tmpuxz9s6ar.swift:18:14: note:\
    \ first occurrence of identical literal pattern is here\n        case \"{\":\n\
    \             ^~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var bracketCount = 0\n    for bracket in brackets {\n\
    \        switch bracket {\n        case \"(\": bracketCount++\n        case \"\
    )\": bracketCount--\n        default: break\n        }\n        if bracketCount\
    \ < 0 {\n            return false\n        }\n    }\n    return bracketCount ==\
    \ 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkqvemk1h.swift:8:31: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        case \"(\": bracketCount++\n                 \
    \             ^~\n/tmp/tmpkqvemk1h.swift:9:31: error: cannot find operator '--'\
    \ in scope; did you mean '-= 1'?\n        case \")\": bracketCount--\n       \
    \                       ^~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeFirst()\n    closing_brackets.removeLast()\n\
    \    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n    if\
    \ opening_brackets.isEmpty {\n        return true\n    }\n    if closing_brackets.isEmpty\
    \ {\n        return false\n    }\n    if opening_brackets.first == closing_brackets.last\
    \ {\n        return false\n    }\n    if opening_brackets.first == closing_brackets.first\
    \ {\n        return true\n    }\n    if opening_brackets.last == closing_brackets.last\
    \ {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkxrv6oi9.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkxrv6oi9.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: -4
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening = false\n    var closing = false\n    for\
    \ c in brackets {\n        switch c {\n        case \"(\":\n            opening\
    \ = true\n        case \"[\":\n            opening = true\n        case \"{\"\
    :\n            opening = true\n        case \"(\":\n            closing = true\n\
    \        case \"}\":\n            closing = true\n        default:\n         \
    \   opening = false\n            closing = false\n        }\n    }\n    return\
    \ opening && closing\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: Exception
  stderr: 'tmpl64_kcxp/tmpl64_kcxp.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b1de00c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b1daf7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b1daf7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b1daf67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl64_kcxp                        0x000056233984240b <unavailable> + 5131

    5    libc.so.6                          0x00002b2b1dfec460 __libc_start_main +
    245

    6    tmpl64_kcxp                        0x0000562339842099 <unavailable> + 4249

    '
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var opening_brackets = brackets.characters\n    var closing_brackets\
    \ = brackets.characters\n    opening_brackets.removeLast()\n    closing_brackets.removeFirst()\n\
    \    if opening_brackets.isEmpty() {\n        return true\n    }\n    if closing_brackets.isEmpty()\
    \ {\n        return false\n    }\n    if opening_brackets.first == closing_brackets.last\
    \ {\n        return false\n    }\n    if opening_brackets.first == \")\" {\n \
    \       opening_brackets.removeFirst()\n        closing_brackets.removeLast()\n\
    \    }\n    if closing_brackets.first == \"(\" {\n        opening_brackets.removeLast()\n\
    \        closing_brackets.removeFirst()\n    }\n    return opening_brackets.count\
    \ == closing_brackets.count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp3p2xjg46.swift:5:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var opening_brackets = brackets.characters\n      \
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3p2xjg46.swift:6:37: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closing_brackets = brackets.characters\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3p2xjg46.swift:9:25: error: cannot call value of non-function\
    \ type 'Bool'\n    if opening_brackets.isEmpty() {\n                        ^\
    \      ~~\n                               \n/tmp/tmp3p2xjg46.swift:12:25: error:\
    \ cannot call value of non-function type 'Bool'\n    if closing_brackets.isEmpty()\
    \ {\n                        ^      ~~\n                               \n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    var openingBracketsIndex = 0\n    var closingBracketsIndex\
    \ = 0\n    while openingBracketsIndex < openingBrackets.count {\n        guard\
    \ openingBrackets[openingBracketsIndex] == '(' || openingBrackets[openingBracketsIndex]\
    \ == '[' || openingBrackets[openingBracketsIndex] == '{' else {\n            return\
    \ false\n        }\n        openingBracketsIndex += 1\n    }\n    while closingBracketsIndex\
    \ < closingBrackets.count {\n        guard closingBrackets[closingBracketsIndex]\
    \ == ')' || closingBrackets[closingBracketsIndex] == ']' || closingBrackets[closingBracketsIndex]\
    \ == '}' else {\n            return false\n        }\n        closingBracketsIndex\
    \ += 1\n    }\n    if openingBracketsIndex == openingBrackets.count {\n      \
    \  return true\n    }\n    if closingBracketsIndex == closingBrackets.count {\n\
    \        return true\n    }\n    return openingBracketsIndex < closingBracketsIndex\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(correct_bracketing(brackets: \"()\") == true)\n\
    assert(correct_bracketing(brackets: \"(()())\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())()\") == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpkbmdaepz.swift:10:56: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketsIndex] == '(' || openingBrackets[openingBracketsIndex]\
    \ == '[' || openingBrackets[openingBracketsIndex] == '{' else {\n            \
    \                                           ^~~\n                            \
    \                           \"(\"\n/tmp/tmpkbmdaepz.swift:10:104: error: single-quoted\
    \ string literal found, use '\"'\n        guard openingBrackets[openingBracketsIndex]\
    \ == '(' || openingBrackets[openingBracketsIndex] == '[' || openingBrackets[openingBracketsIndex]\
    \ == '{' else {\n                                                            \
    \                                           ^~~\n                            \
    \                                                                           \"\
    [\"\n/tmp/tmpkbmdaepz.swift:10:152: error: single-quoted string literal found,\
    \ use '\"'\n        guard openingBrackets[openingBracketsIndex] == '(' || openingBrackets[openingBracketsIndex]\
    \ == '[' || openingBrackets[openingBracketsIndex] == '{' else {\n            \
    \                                                                            \
    \                                                               ^~~\n        \
    \                                                                            \
    \                                                                   \"{\"\n/tmp/tmpkbmdaepz.swift:16:56:\
    \ error: single-quoted string literal found, use '\"'\n        guard closingBrackets[closingBracketsIndex]\
    \ == ')' || closingBrackets[closingBracketsIndex] == ']' || closingBrackets[closingBracketsIndex]\
    \ == '}' else {\n                                                       ^~~\n\
    \                                                       \")\"\n/tmp/tmpkbmdaepz.swift:16:104:\
    \ error: single-quoted string literal found, use '\"'\n        guard closingBrackets[closingBracketsIndex]\
    \ == ')' || closingBrackets[closingBracketsIndex] == ']' || closingBrackets[closingBracketsIndex]\
    \ == '}' else {\n                                                            \
    \          "
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        let openingBracket\
    \ = openingBrackets[i]\n        let closingBracket = closingBrackets[i]\n    \
    \    \n        if openingBracket != closingBracket {\n            return false\n\
    \        }\n    }\n    \n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmpbo6kuder.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpbo6kuder.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979895
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    let openingBrackets = brackets.components(separatedBy:\
    \ \"(\")\n    let closingBrackets = brackets.components(separatedBy: \")\")\n\
    \    \n    if openingBrackets.count != closingBrackets.count {\n        return\
    \ false\n    }\n    \n    for i in 0..<openingBrackets.count {\n        if openingBrackets[i]\
    \ != closingBrackets[i] {\n            return false\n        }\n    }\n    \n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(correct_bracketing(brackets:\
    \ \"()\") == true)\nassert(correct_bracketing(brackets: \"(()())\") == true)\n\
    assert(correct_bracketing(brackets: \"()()(()())()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"()()((()()())())(()()(()))\") == true)\nassert(correct_bracketing(brackets:\
    \ \"((()())))\") == false)\nassert(correct_bracketing(brackets: \")(()\") == false)\n\
    assert(correct_bracketing(brackets: \"(\") == false)\nassert(correct_bracketing(brackets:\
    \ \"((((\") == false)\nassert(correct_bracketing(brackets: \")\") == false)\n\
    assert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp363vyi44.swift:5:36: error: value of type 'String' has no member\
    \ 'components'\n    let openingBrackets = brackets.components(separatedBy: \"\
    (\")\n                          ~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp363vyi44.swift:6:36:\
    \ error: value of type 'String' has no member 'components'\n    let closingBrackets\
    \ = brackets.components(separatedBy: \")\")\n                          ~~~~~~~~\
    \ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659979894
- exit_code: 1
  program: "\n/// brackets is a string of \"(\" and \")\".\n/// return True if every\
    \ opening bracket has a corresponding closing bracket.\nfunc correct_bracketing(brackets:\
    \ String) -> Bool {\n    var openingBrackets = brackets.characters\n    var closingBrackets\
    \ = brackets.characters\n    openingBrackets.removeLast()\n    closingBrackets.removeFirst()\n\
    \    if openingBrackets.isEmpty {\n        return false\n    }\n    if closingBrackets.isEmpty\
    \ {\n        return false\n    }\n    if openingBrackets.first != closingBrackets.first\
    \ {\n        return false\n    }\n    if openingBrackets.last != closingBrackets.last\
    \ {\n        return false\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(correct_bracketing(brackets: \"()\") == true)\nassert(correct_bracketing(brackets:\
    \ \"(()())\") == true)\nassert(correct_bracketing(brackets: \"()()(()())()\")\
    \ == true)\nassert(correct_bracketing(brackets: \"()()((()()())())(()()(()))\"\
    ) == true)\nassert(correct_bracketing(brackets: \"((()())))\") == false)\nassert(correct_bracketing(brackets:\
    \ \")(()\") == false)\nassert(correct_bracketing(brackets: \"(\") == false)\n\
    assert(correct_bracketing(brackets: \"((((\") == false)\nassert(correct_bracketing(brackets:\
    \ \")\") == false)\nassert(correct_bracketing(brackets: \"(()\") == false)\nassert(correct_bracketing(brackets:\
    \ \"()()(()())())(()\") == false)\nassert(correct_bracketing(brackets: \"()()(()())()))()\"\
    ) == false)"
  status: SyntaxError
  stderr: "/tmp/tmp6nng5qs5.swift:5:36: error: 'characters' is unavailable: Please\
    \ use String directly\n    var openingBrackets = brackets.characters\n       \
    \                            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6nng5qs5.swift:6:36: error: 'characters' is unavailable:\
    \ Please use String directly\n    var closingBrackets = brackets.characters\n\
    \                                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1659979895
