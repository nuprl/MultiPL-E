language: swift
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_beats = [String]()\n    var notes_beats_notes = [String]()\n    var\
    \ notes_beats_notes_beats = [String]()\n    var notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats = [String]()\n   \
    \ var notes_beats_notes_beats_notes_beats_notes = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpflyjlen7.swift:26:9: error: invalid redeclaration of 'notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmpflyjlen7.swift:25:9: note: 'notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmpflyjlen7.swift:29:9: error: invalid redeclaration\
    \ of 'notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmpflyjlen7.swift:28:9: note: 'notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var current_beat = 0\n  \
    \  var current_note = \"\"\n    var current_octave = 0\n    var current_note_index\
    \ = 0\n    var current_note_octave = 0\n    var current_note_note = \"\"\n   \
    \ var current_note_duration = 0\n    var current_note_duration_index = 0\n   \
    \ var current_note_duration_index2 = 0\n    var current_note_duration_index3 =\
    \ 0\n    var current_note_duration_index4 = 0\n    var current_note_duration_index5\
    \ = 0\n    var current_note_duration_index6 = 0\n    var current_note_duration_index7\
    \ = 0\n    var current_note_duration_index8 = 0\n    var current_note_duration_index9\
    \ = 0\n    var current_note_duration_index10 = 0\n    var current_note_duration_index11\
    \ = 0\n    var current_note_duration_index12 = 0\n    var current_note_duration_index13\
    \ = 0\n    var current_note_duration_index14 = 0\n    var current_note_duration_index15\
    \ = 0\n    var current_note_duration_index16 = 0\n    var current_note_duration_index17\
    \ = 0\n    var current_note_duration_index18 = 0\n    var current_note_duration_index19\
    \ = 0\n    var current_note_duration_index20 = 0\n    var current_note_duration_index21\
    \ = 0\n    var current_note_duration_index22 = 0\n    var current_note_duration_index23\
    \ = 0\n    var current_note_duration_index24 = 0\n    var current_note_duration_index25\
    \ = 0\n    var current_note_duration_index26 = 0\n    var current_note_duration_index27\
    \ = 0\n    var current_note_duration_index28 = 0\n    var current_note_duration_index29\
    \ = 0\n    var current_note_duration_index30 = 0\n    var current_note_duration_index31\
    \ = 0\n    var current_note_duration_index32 = 0\n    var current_note_duration_index33\
    \ = 0\n    var current_note_duration_index34 = 0\n    var current_note_duration_index35\
    \ = 0\n    var current_note_duration_index36 = 0\n    var current_note_duration_index37\
    \ = 0\n    var current_note_duration_index38 = 0\n    var current_note_duration_index39\
    \ = 0\n    var current_note_duration_index40 = 0\n    var current_note_duration_index41\
    \ = 0\n    var current_note_duration_index42 = 0\n    var current_note_duration_index43\
    \ = 0\n    var current_note_duration_index44 = 0\n    var current_note_duration_index45\
    \ = 0\n    var current_note_duration_index46 = 0\n    var current_note_duration_index47\
    \ = 0\n    var current_note_duration_index48 = 0\n    var current_note_duration_index49\
    \ = 0\n    var current_note_duration_index50 = 0\n    var current_note_duration_index51\
    \ = 0\n    var current_note_duration_index52 = 0\n    var current_note_duration_index53\
    \ = 0\n    var current_note_duration_index54 = 0\n    var current_note_duration_index55\
    \ = 0\n    var current_note_duration_index56 = 0\n    var current_note_duration_index57\
    \ = 0\n    var current_note_duration_index58 = 0\n    var current_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpvk4qdbiq.swift:76:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppy_bwuyg.swift:64:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmppy_bwuyg.swift:22:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_length = 0\n    for c in music_string\
    \ {\n        if c == \"o\" {\n            beats.append(current_beat)\n       \
    \     current_beat = 0\n            current_note = \"\"\n            current_note_length\
    \ = 0\n        } else if c == \"|\" {\n            beats.append(current_beat)\n\
    \            current_beat = 0\n            current_note = \"\"\n            current_note_length\
    \ = 1\n        } else if c == \".\" {\n            beats.append(current_beat)\n\
    \            current_beat = 0\n            current_note = \"\"\n            current_note_length\
    \ = 1\n        } else {\n            current_note += c\n            current_note_length\
    \ += 1\n        }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxeu27ydz.swift:31:29: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            current_note += c\n        \
    \                    ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2dmb5ng_.swift:75:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note.characters.count == 1\
    \ {\n            beats.append(4)\n        } else if note.characters.count == 2\
    \ {\n            beats.append(2)\n        } else if note.characters.count == 3\
    \ {\n            beats.append(1)\n        } else {\n            fatalError(\"\
    Invalid note format: \\(note)\")\n        }\n    }\n    return beats\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2no5nxph.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp2no5nxph.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ current_beat = 0\n    var current_note = music_string[0]\n    for c in music_string\
    \ {\n        if c == '|' {\n            beats_count += 1\n            current_beat\
    \ = 0\n            current_note = music_string[current_beat + 1]\n        } else\
    \ if c == 'o' {\n            beats.append(current_beat)\n            current_beat\
    \ = 0\n            current_note = music_string[current_beat + 1]\n        } else\
    \ {\n            current_beat += 1\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8gnejnez.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '|' {\n                ^~~\n                \"|\"\n\
    /tmp/tmp8gnejnez.swift:19:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmp8gnejnez.swift:13:24: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8gnejnez.swift:18:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            current_note = music_string[current_beat\
    \ + 1]\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8gnejnez.swift:22:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            current_note = music_string[current_beat\
    \ + 1]\n                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp8gnejnez.swift:13:9:\
    \ warning: variable 'current_note' was written to, but never read\n    var current_note\
    \ = music_string[0]\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note_length = note.components(separatedBy:\
    \ \" \")\n        let note_type = note_length[0]\n        let note_length = note_length[1]\n\
    \        let note_value = note.components(separatedBy: \" \")[1]\n        let\
    \ note_value = note_value.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.alphanumerics)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.symbols)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note_value = note_value.\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmbm9oef0.swift:41:36: error: expected member name following '.'\n\
    \        let note_value = note_value.\n                                   ^\n\
    /tmp/tmpmbm9oef0.swift:61:87: error: expected '}' at end of brace statement\n\
    assert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\n                                                                \
    \                      ^\n/tmp/tmpmbm9oef0.swift:9:49: note: to match this opening\
    \ '{'\nfunc parse_music(music_string: String) -> [Int] {\n                   \
    \                             ^\n/tmp/tmpmbm9oef0.swift:11:30: error: value of\
    \ type 'String' has no member 'components'\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpmbm9oef0.swift:45:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpmbm9oef0.swift:17:60:\
    \ error: cannot find 'CharacterSet' in scope\n        let note_value = note_value.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \                      ^~~~~~~~~~~~\n/tmp/tmpmbm9oef0.swift:18:60: error: cannot\
    \ find 'CharacterSet' in scope\n        let note_value = note_value.trimmingCharacters(in:\
    \ CharacterSet.alphanumerics)\n                                              \
    \             ^~~~~~~~~~~~\n/tmp/tmpmbm9oef0.swift:19:60: error: cannot find 'CharacterSet'\
    \ in scope\n        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \                                                           ^~~~~~~~~~~~\n/tmp/tmpmbm9oef0.swift:20:60:\
    \ error: cannot find 'CharacterSet' in scope\n        let note_value = note_value.trimmingCharacters(in:\
    \ CharacterSet.symbols)\n                                                    \
    \       ^~~~~~~~~~~~\n/tmp/tmpmbm9oef0.swift:21:60: error: cannot find 'CharacterSet'\
    \ in scope\n        let note_value = note_value.trimmingCharacters(in: CharacterSet.newlines)\n\
    \                                                       "
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = String()\n    var current_note_index = 0\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n    var current_note_length = -1\n    var current_note_length = -1\n \
    \   var current_note_length = -1\n    var current_note_length = -1\n    var current_note_length\
    \ = -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpi9_7z283.swift:15:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = -1\n        ^\n/tmp/tmpi9_7z283.swift:14:9: note:\
    \ 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpi9_7z283.swift:16:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpi9_7z283.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpi9_7z283.swift:17:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpi9_7z283.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpi9_7z283.swift:18:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpi9_7z283.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpi9_7z283.swift:19:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpi9_7z283.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpi9_7z283.swift:20:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpi9_7z283.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpi9_7z283.swift:21:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpi9_7z283.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpi9_7z283.swift:22:9: error: invalid redeclaration of\
    \ 'current_note_length'\n    var current_note_length = -1\n        ^\n/tmp/tmpi9_7z283.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = -1\n        ^\n/tmp/tmpi9_7z283.swift:23:9: error: inva"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note.count > 0 {\n        \
    \    let note = note.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n\
    \            if note.count > 0 {\n                beats.append(note.count)\n \
    \           }\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcf90_nda.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpcf90_nda.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n/tmp/tmpcf90_nda.swift:15:52: error: cannot find 'CharacterSet'\
    \ in scope\n            let note = note.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)\n\
    \                                                   ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var beats_counter: Int =\
    \ 0\n    var note_count = 0\n    var note = String()\n    var last_note = String()\n\
    \    var last_note_counter: Int = 0\n    var last_note_beat: Int = 0\n    var\
    \ last_note_beats: Int = 0\n    var last_note_note = String()\n    var last_note_note_counter:\
    \ Int = 0\n    var last_note_note_beat: Int = 0\n    var last_note_note_beats:\
    \ Int = 0\n    var last_note_note_note = String()\n    var last_note_note_note_counter:\
    \ Int = 0\n    var last_note_note_note_beat: Int = 0\n    var last_note_note_note_beats:\
    \ Int = 0\n    var last_note_note_note_note = String()\n    var last_note_note_note_note_counter:\
    \ Int = 0\n    var last_note_note_note_note_beat: Int = 0\n    var last_note_note_note_beats:\
    \ Int = 0\n    var last_note_note_note_note = String()\n    var last_note_note_note_note_counter:\
    \ Int = 0\n    var last_note_note_note_note_beat: Int = 0\n    var last_note_note_note_beats:\
    \ Int = 0\n    var last_note_note_note_note = String()\n    var last_note_note_note_note_counter:\
    \ Int = 0\n    var last_note_note_note_note_beat: Int = 0\n    var last_note_note_note_beats:\
    \ Int = 0\n    var last_note_note_note_note = String()\n    var last_note_note_note_note_counter:\
    \ Int = 0\n    var last_note_note_note_note_beat: Int = 0\n    var last_note_note_note_beats:\
    \ Int = 0\n    var last_note_note_note_note = String()\n    var last_note_note_note_note_counter:\
    \ Int = 0\n    var last_note_note_note_note_beat: Int = 0\n    var last_note_note_note_beats:\
    \ Int = 0\n    var last_note_note_note_note = String()\n    var last_note_note_note_note_counter:\
    \ Int = 0\n    var last_note_note_note_note_beat: Int = 0\n    var last_note_note_note_beats:\
    \ Int = 0\n    var last_note_note_note_note = String()\n    var last_note_note_note_note_counter:\
    \ Int = 0\n    var last_note_note_note_note_beat: Int = 0\n    var last_note_note_note_beats:\
    \ Int = 0\n    var last_note_note_note_note = String()\n    var last_note_note_note_note_counter:\
    \ Int = 0\n    var last_note_note_note_note_beat: Int = 0\n    var last_note_note_note_beats:\
    \ Int = 0\n    var last_note_note_note_note = String()\n    var last_note_note_note_note_counter:\
    \ Int = 0\n    var last_note_note_note_note_beat: Int = 0\n    var last_note_note_note_beats:\
    \ Int = 0\n    var last_note_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp26515wr_.swift:29:9: error: invalid redeclaration of 'last_note_note_note_beats'\n\
    \    var last_note_note_note_beats: Int = 0\n        ^\n/tmp/tmp26515wr_.swift:25:9:\
    \ note: 'last_note_note_note_beats' previously declared here\n    var last_note_note_note_beats:\
    \ Int = 0\n        ^\n/tmp/tmp26515wr_.swift:30:9: error: invalid redeclaration\
    \ of 'last_note_note_note_note'\n    var last_note_note_note_note = String()\n\
    \        ^\n/tmp/tmp26515wr_.swift:26:9: note: 'last_note_note_note_note' previously\
    \ declared here\n    var last_note_note_note_note = String()\n        ^\n/tmp/tmp26515wr_.swift:31:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_counter'\n    var\
    \ last_note_note_note_note_counter: Int = 0\n        ^\n/tmp/tmp26515wr_.swift:27:9:\
    \ note: 'last_note_note_note_note_counter' previously declared here\n    var last_note_note_note_note_counter:\
    \ Int = 0\n        ^\n/tmp/tmp26515wr_.swift:32:9: error: invalid redeclaration\
    \ of 'last_note_note_note_note_beat'\n    var last_note_note_note_note_beat: Int\
    \ = 0\n        ^\n/tmp/tmp26515wr_.swift:28:9: note: 'last_note_note_note_note_beat'\
    \ previously declared here\n    var last_note_note_note_note_beat: Int = 0\n \
    \       ^\n/tmp/tmp26515wr_.swift:33:9: error: invalid redeclaration of 'last_note_note_note_beats'\n\
    \    var last_note_note_note_beats: Int = 0\n        ^\n/tmp/tmp26515wr_.swift:25:9:\
    \ note: 'last_note_note_note_beats' previously declared here\n    var last_note_note_note_beats:\
    \ Int = 0\n        ^\n/tmp/tmp26515wr_.swift:34:9: error: invalid redeclaration\
    \ of 'last_note_note_note_note'\n    var last_note_note_note_note = String()\n\
    \        ^\n/tmp/tmp26515wr_.swift:26:9: note: 'last_note_note_note_note' previously\
    \ declared here\n    var last_note_note_note_note = String()\n        ^\n/tmp/tmp26515wr_.swift:35:9:\
    \ error: invalid redeclaration of 'last_note_note_note_note_counter'\n    var\
    \ last_note_note_note_note_counter: Int = 0\n        ^\n/tmp/tmp26515wr_.swift:27:9:\
    \ note: 'last_note_note_note_note_counter' previously declared here\n    var last_note_note_note_note_counter:\
    \ Int = 0\n     "
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_beats = [String]()\n    var beats_notes = [String]()\n    var beats_notes_beats\
    \ = [String]()\n    var beats_notes_beats_notes = [String]()\n\n    for c in music_string\
    \ {\n        if c == 'o' {\n            notes.append(c)\n            notes_beats.append(\"\
    \")\n            beats_notes.append(\"\")\n            beats_notes_beats.append(\"\
    \")\n            beats_notes_beats_notes.append(\"\")\n        } else if c ==\
    \ 'o|' {\n            notes.append(c)\n            notes_beats.append(\"\")\n\
    \            beats_notes.append(\"\")\n            beats_notes_beats.append(\"\
    \")\n            beats_notes_beats_notes.append(\"\")\n        } else if c ==\
    \ '.|' {\n            notes.append(c)\n            notes_beats.append(\"\")\n\
    \            beats_notes.append(\"\")\n            beats_notes_beats.append(\"\
    \")\n            beats_notes_beats_notes.append(\"\")\n        } else if c ==\
    \ '|' {\n            notes_beats.append(c)\n            beats_notes.append(\"\"\
    )\n            beats_notes_beats.append(\"\")\n            beats_notes_beats_notes.append(\"\
    \")\n        } else if c == '|' {\n            notes_beats.append(c)\n       \
    \     beats_notes.append(\"\")\n            beats_notes_beats.append(\"\")\n \
    \           beats_notes_beats_notes.append(\"\")\n        } else if c == '|' {\n\
    \            notes_beats.append(c)\n            beats_notes.append(\"\")\n   \
    \         beats_notes_beats.append(\"\")\n            beats_notes_beats_notes.append(\"\
    \")\n        } else if c == '|' {\n            notes_beats.append(c)\n       \
    \     beats_notes.append(\"\")\n            beats_notes_beats.append(\"\")\n \
    \           beats_notes_beats_notes.append(\"\")\n        } else if c == '|' {\n\
    \            notes_beats.append(c)\n            beats_notes.append(\"\")\n   \
    \         beats_notes_beats.append(\"\")\n            beats_notes_beats_notes.append(\"\
    \")\n        } else if c == '|' {\n            notes_beats.append(c)\n       \
    \     beats_notes.append(\"\")\n            beats_notes_beats.append(\"\")\n \
    \           beats_notes_beats_notes.append(\"\")\n        } else if c == '|' {\n\
    \            notes_beats.append(c)\n            beats_notes.append(\"\")\n   \
    \         beats_notes_beats.append(\"\")\n            beats_notes_beats_notes.append(\"\
    \")\n        } else if c == '\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphpfig75c.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmphpfig75c.swift:24:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o|' {\n                       ^~~~\n              \
    \         \"o|\"\n/tmp/tmphpfig75c.swift:30:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.|' {\n                       ^~~~\n\
    \                       \".|\"\n/tmp/tmphpfig75c.swift:36:24: error: single-quoted\
    \ string literal found, use '\"'\n        } else if c == '|' {\n             \
    \          ^~~\n                       \"|\"\n/tmp/tmphpfig75c.swift:41:24: error:\
    \ single-quoted string literal found, use '\"'\n        } else if c == '|' {\n\
    \                       ^~~\n                       \"|\"\n/tmp/tmphpfig75c.swift:46:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '|' {\n                       ^~~\n                       \"|\"\n/tmp/tmphpfig75c.swift:51:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '|' {\n                       ^~~\n                       \"|\"\n/tmp/tmphpfig75c.swift:56:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '|' {\n                       ^~~\n                       \"|\"\n/tmp/tmphpfig75c.swift:61:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '|' {\n                       ^~~\n                       \"|\"\n/tmp/tmphpfig75c.swift:66:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '|' {\n                       ^~~\n                       \"|\"\n/tmp/tmphpfig75c.swift:71:24:\
    \ error: unterminated string literal\n        } else if c == '\n             \
    \          ^\n/tmp/tmphpfig75c.swift:91:87: error: expected '}' at end of brace\
    \ statement\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\n                                                    \
    \                                  ^\n/tmp/tmphpfig75c.swift:9:49: note: to match\
    \ this opening "
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var current_beat = 0\n  \
    \  var current_note = \"\"\n    for c in music_string {\n        if c == 'o' {\n\
    \            if current_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \       }\n        } else if c == '|' {\n            if current_note != \"\" {\n\
    \                current_beat = current_beat + 1\n            }\n        } else\
    \ if c == '.' {\n            if current_note != \"\" {\n                current_beat\
    \ = current_beat + 1\n            }\n        } else {\n            current_note\
    \ = c\n        }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp8m7atxc3.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmp8m7atxc3.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmp8m7atxc3.swift:24:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmp8m7atxc3.swift:29:28: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            current_note = c\n \
    \                          ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for c in music_string {\n        if\
    \ c == \"o\" {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n        } else if c == \"o|\"\
    \ {\n            beats.append(beat)\n            notes.append(note)\n        \
    \    beat = 0\n            note = \"\"\n        } else if c == \".|\" {\n    \
    \        beats.append(beat)\n            notes.append(note)\n            beat\
    \ = 0\n            note = \"\"\n        } else {\n            note += String(c)\n\
    \        }\n    }\n    beats.append(beat)\n    notes.append(note)\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp029wl6oi.swift:20:21: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if c == \"o|\"\
    \ {\n                  ~ ^  ~~~~\n/tmp/tmp029wl6oi.swift:20:21: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if c == \"o|\" {\n                    ^\n/tmp/tmp029wl6oi.swift:25:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \".|\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmp029wl6oi.swift:25:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \".|\" {\n                    ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beats = 0\n    var last_beats_count = 0\n    var last_beats_count_2\
    \ = 0\n    var last_beats_count_3 = 0\n    var last_beats_count_4 = 0\n    var\
    \ last_beats_count_5 = 0\n    var last_beats_count_6 = 0\n    var last_beats_count_7\
    \ = 0\n    var last_beats_count_8 = 0\n    var last_beats_count_9 = 0\n    var\
    \ last_beats_count_10 = 0\n    var last_beats_count_11 = 0\n    var last_beats_count_12\
    \ = 0\n    var last_beats_count_13 = 0\n    var last_beats_count_14 = 0\n    var\
    \ last_beats_count_15 = 0\n    var last_beats_count_16 = 0\n    var last_beats_count_17\
    \ = 0\n    var last_beats_count_18 = 0\n    var last_beats_count_19 = 0\n    var\
    \ last_beats_count_20 = 0\n    var last_beats_count_21 = 0\n    var last_beats_count_22\
    \ = 0\n    var last_beats_count_23 = 0\n    var last_beats_count_24 = 0\n    var\
    \ last_beats_count_25 = 0\n    var last_beats_count_26 = 0\n    var last_beats_count_27\
    \ = 0\n    var last_beats_count_28 = 0\n    var last_beats_count_29 = 0\n    var\
    \ last_beats_count_30 = 0\n    var last_beats_count_31 = 0\n    var last_beats_count_32\
    \ = 0\n    var last_beats_count_33 = 0\n    var last_beats_count_34 = 0\n    var\
    \ last_beats_count_35 = 0\n    var last_beats_count_36 = 0\n    var last_beats_count_37\
    \ = 0\n    var last_beats_count_38 = 0\n    var last_beats_count_39 = 0\n    var\
    \ last_beats_count_40 = 0\n    var last_beats_count_41 = 0\n    var last_beats_count_42\
    \ = 0\n    var last_beats_count_43 = 0\n    var last_beats_count_44 = 0\n    var\
    \ last_beats_count_45 = 0\n    var last_beats_count_46 = 0\n    var last_beats_count_47\
    \ = 0\n    var last_beats_count_48 = 0\n    var last_beats_count_49 = 0\n    var\
    \ last_beats_count_50 = 0\n    var last_beats_count_51 = 0\n    var last_beats_count_52\
    \ = 0\n    var last_beats_count_53 = 0\n    var last_beats_count_54 = 0\n    var\
    \ last_beats_count_55 = 0\n    var last_beats_count_56 = 0\n    var last_beats_count_57\
    \ = 0\n    var last_beats_count_58 = 0\n    var last_beats_count_59 = 0\n    var\
    \ last_beats_count_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdblf6cmg.swift:76:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note_length = note.components(separatedBy:\
    \ \" \")\n        let note_length = note_length!.count\n        let note = note.components(separatedBy:\
    \ \"\")\n        let note = note![0]\n        let note = note.unicodeScalars\n\
    \        let note = note![0]\n        let note = note.intValue\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note!\n        let note = note!\n        let note = note!\n        let note\
    \ = note\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnv903od9.swift:109:87: error: expected '}' at end of brace statement\n\
    assert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\n                                                                \
    \                      ^\n/tmp/tmpnv903od9.swift:9:49: note: to match this opening\
    \ '{'\nfunc parse_music(music_string: String) -> [Int] {\n                   \
    \                             ^\n/tmp/tmpnv903od9.swift:11:30: error: value of\
    \ type 'String' has no member 'components'\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpnv903od9.swift:93:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for char in music_string {\n       \
    \ switch char {\n        case \"o\":\n            note = \"o\"\n            beat\
    \ = 0\n        case \"o|\":\n            note = \"o|\"\n            beat = 0\n\
    \        case \".|\":\n            note = \".|\"\n            beat = 0\n     \
    \   default:\n            notes.append(note)\n            beats.append(beat)\n\
    \            note = \"\"\n            beat = 0\n        }\n    }\n    notes.append(note)\n\
    \    beats.append(beat)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppd6w21ff.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmppd6w21ff.swift:22:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var last_note = 0\n    var last_beat = 0\n    var last_beats = 0\n\
    \    var last_beats_count = 0\n    var last_beats_count_count = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbrtzd1t5.swift:30:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var note = music_string[0]\n\
    \    var beat = 0\n    var last_beat = 0\n    var last_note = 0\n    var last_note_beat\
    \ = 0\n    var last_note_beats = 0\n    var last_note_beats_count = 0\n    var\
    \ last_note_beats_count_max = 0\n    var last_note_beats_count_min = 0\n    var\
    \ last_note_beats_count_sum = 0\n    var last_note_beats_count_sum_max = 0\n \
    \   var last_note_beats_count_sum_min = 0\n    var last_note_beats_count_sum_sum\
    \ = 0\n    var last_note_beats_count_sum_sum_max = 0\n    var last_note_beats_count_sum_sum_min\
    \ = 0\n    var last_note_beats_count_sum_sum_sum = 0\n    var last_note_beats_count_sum_sum_sum_max\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_min = 0\n    var last_note_beats_count_sum_sum_sum_sum\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_max = 0\n    var last_note_beats_count_sum_sum_sum_sum_min\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum = 0\n    var last_note_beats_count_sum_sum_sum_sum_max\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_min = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_max = 0\n    var last_note_beats_count_sum_sum_sum_sum_min\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum = 0\n    var last_note_beats_count_sum_sum_sum_sum_max\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_min = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_max = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_min\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_sum = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_max\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_min = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_sum\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_max = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_min\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_sum = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_max\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_min = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n    var last_note_beats_count_sum_sum_sum_sum_sum_sum_max\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp54iipw1d.swift:11:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var note = music_string[0]\n\
    \               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp54iipw1d.swift:33:9: error: invalid redeclaration\
    \ of 'last_note_beats_count_sum_sum_sum_sum_max'\n    var last_note_beats_count_sum_sum_sum_sum_max\
    \ = 0\n        ^\n/tmp/tmp54iipw1d.swift:30:9: note: 'last_note_beats_count_sum_sum_sum_sum_max'\
    \ previously declared here\n    var last_note_beats_count_sum_sum_sum_sum_max\
    \ = 0\n        ^\n/tmp/tmp54iipw1d.swift:34:9: error: invalid redeclaration of\
    \ 'last_note_beats_count_sum_sum_sum_sum_min'\n    var last_note_beats_count_sum_sum_sum_sum_min\
    \ = 0\n        ^\n/tmp/tmp54iipw1d.swift:31:9: note: 'last_note_beats_count_sum_sum_sum_sum_min'\
    \ previously declared here\n    var last_note_beats_count_sum_sum_sum_sum_min\
    \ = 0\n        ^\n/tmp/tmp54iipw1d.swift:35:9: error: invalid redeclaration of\
    \ 'last_note_beats_count_sum_sum_sum_sum_sum'\n    var last_note_beats_count_sum_sum_sum_sum_sum\
    \ = 0\n        ^\n/tmp/tmp54iipw1d.swift:32:9: note: 'last_note_beats_count_sum_sum_sum_sum_sum'\
    \ previously declared here\n    var last_note_beats_count_sum_sum_sum_sum_sum\
    \ = 0\n        ^\n/tmp/tmp54iipw1d.swift:36:9: error: invalid redeclaration of\
    \ 'last_note_beats_count_sum_sum_sum_sum_max'\n    var last_note_beats_count_sum_sum_sum_sum_max\
    \ = 0\n        ^\n/tmp/tmp54iipw1d.swift:30:9: note: 'last_note_beats_count_sum_sum_sum_sum_max'\
    \ previously declared here\n    var last_note_beats_count_sum_sum_sum_sum_max\
    \ = 0\n        ^\n/tmp/tmp54iipw1d.swift:37:9: error: invalid redeclaration of\
    \ 'last_note_beats_count_sum_sum_sum_sum_min'\n    var last_note_beats_count_sum_sum_sum_sum_min\
    \ = 0\n        ^\n/tmp/tmp54iipw1d.swift:31:9: note: 'last_note_beats_count_sum_sum_sum_sum_min'\
    \ previously declared here\n    var last_note_beats_count_sum_sum_sum_sum_min\
    \ = 0\n        ^\n/tmp/tmp54iipw1d.sw"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppy_bwuyg.swift:64:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmppy_bwuyg.swift:22:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_count = 0\n    var last_note =\
    \ 0\n    var last_beat = 0\n    var last_beat_count = 0\n    var last_note_beat\
    \ = 0\n    var last_note_beat_count = 0\n    var last_note_beat_type = 0\n   \
    \ var last_note_beat_type_count = 0\n    var last_note_beat_type_index = 0\n \
    \   var last_note_beat_type_index2 = 0\n    var last_note_beat_type_index3 = 0\n\
    \    var last_note_beat_type_index4 = 0\n    var last_note_beat_type_index5 =\
    \ 0\n    var last_note_beat_type_index6 = 0\n    var last_note_beat_type_index7\
    \ = 0\n    var last_note_beat_type_index8 = 0\n    var last_note_beat_type_index9\
    \ = 0\n    var last_note_beat_type_index10 = 0\n    var last_note_beat_type_index11\
    \ = 0\n    var last_note_beat_type_index12 = 0\n    var last_note_beat_type_index13\
    \ = 0\n    var last_note_beat_type_index14 = 0\n    var last_note_beat_type_index15\
    \ = 0\n    var last_note_beat_type_index16 = 0\n    var last_note_beat_type_index17\
    \ = 0\n    var last_note_beat_type_index18 = 0\n    var last_note_beat_type_index19\
    \ = 0\n    var last_note_beat_type_index20 = 0\n    var last_note_beat_type_index21\
    \ = 0\n    var last_note_beat_type_index22 = 0\n    var last_note_beat_type_index23\
    \ = 0\n    var last_note_beat_type_index24 = 0\n    var last_note_beat_type_index25\
    \ = 0\n    var last_note_beat_type_index26 = 0\n    var last_note_beat_type_index27\
    \ = 0\n    var last_note_beat_type_index28 = 0\n    var last_note_beat_type_index29\
    \ = 0\n    var last_note_beat_type_index30 = 0\n    var last_note_beat_type_index31\
    \ = 0\n    var last_note_beat_type_index32 = 0\n    var last_note_beat_type_index33\
    \ = 0\n    var last_note_beat_type_index34 = 0\n    var last_note_beat_type_index35\
    \ = 0\n    var last_note_beat_type_index36 = 0\n    var last_note_beat_type_index37\
    \ = 0\n    var last_note_beat_type_index38 = 0\n    var last_note_beat_type_index39\
    \ = 0\n    var last_note_beat_type_index40 = 0\n    var last_note_beat_type_index41\
    \ = 0\n    var last_note_beat_type_index42 = 0\n    var last_note_beat_type_index43\
    \ = 0\n    var last_note_beat_type_index44 = 0\n    var last_note_beat_type_index45\
    \ = 0\n    var last_note_beat_type_index46 = 0\n    var last_note_beat_type_index47\
    \ = 0\n    var last_note_beat_type_index48 = 0\n    var last_note_beat_type_index49\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbromwje3.swift:71:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpbromwje3.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbromwje3.swift:11:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpbromwje3.swift:12:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpbromwje3.swift:13:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmpbromwje3.swift:14:9: warning: initialization\
    \ of variable 'note_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpbromwje3.swift:15:9:\
    \ warning: initialization of variable 'last_note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_note = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpbromwje3.swift:16:9: warning: initialization of variable 'last_beat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpbromwje3.swift:17:9:\
    \ warning: initialization of variable 'last_beat_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_count = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpbromwje3.swift:18:9: warning: initialization\
    \ of variable 'last_note_beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_note_beat = 0\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpbromwje3.swift:19:9: warning: initialization of variable 'last_note_beat_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_beat_count = 0\n    ~~~~^~~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes: [Int] = []\n    var beats = 0\n    var note\
    \ = \"\"\n    var last = \"\"\n    var last_beats = 0\n    var last_note = \"\"\
    \n    for c in music_string {\n        if c == \"o\" {\n            notes.append(beats)\n\
    \            beats = 0\n            note = \"\"\n            last = \"\"\n   \
    \         last_beats = 0\n            last_note = \"\"\n        } else if c ==\
    \ \"o|\" {\n            notes.append(beats)\n            beats = 0\n         \
    \   note = \"\"\n            last = \"o\"\n            last_beats = 0\n      \
    \      last_note = \"\"\n        } else if c == \".|\" {\n            notes.append(beats)\n\
    \            beats = 0\n            note = \"\"\n            last = \"o|\"\n \
    \           last_beats = 0\n            last_note = \"\"\n        } else {\n \
    \           note += c\n        }\n        if note != last {\n            beats\
    \ += 1\n        }\n        if note == last {\n            last_beats += 1\n  \
    \      }\n    }\n    notes.append(beats)\n    return notes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphy3uoz_s.swift:24:21: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if c == \"o|\"\
    \ {\n                  ~ ^  ~~~~\n/tmp/tmphy3uoz_s.swift:24:21: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if c == \"o|\" {\n                    ^\n/tmp/tmphy3uoz_s.swift:31:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \".|\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmphy3uoz_s.swift:31:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \".|\" {\n                    ^\n/tmp/tmphy3uoz_s.swift:39:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            note += c\n                    ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = String()\n    var note_index = 0\n    var last_note = String()\n    var last_note_index\
    \ = 0\n    var last_beat = 0\n    var last_beat_index = 0\n    var last_note_count\
    \ = 0\n    var last_note_count2 = 0\n    var last_note_count3 = 0\n    var last_note_count4\
    \ = 0\n    var last_note_count5 = 0\n    var last_note_count6 = 0\n    var last_note_count7\
    \ = 0\n    var last_note_count8 = 0\n    var last_note_count9 = 0\n    var last_note_count10\
    \ = 0\n    var last_note_count11 = 0\n    var last_note_count12 = 0\n    var last_note_count13\
    \ = 0\n    var last_note_count14 = 0\n    var last_note_count15 = 0\n    var last_note_count16\
    \ = 0\n    var last_note_count17 = 0\n    var last_note_count18 = 0\n    var last_note_count19\
    \ = 0\n    var last_note_count20 = 0\n    var last_note_count21 = 0\n    var last_note_count22\
    \ = 0\n    var last_note_count23 = 0\n    var last_note_count24 = 0\n    var last_note_count25\
    \ = 0\n    var last_note_count26 = 0\n    var last_note_count27 = 0\n    var last_note_count28\
    \ = 0\n    var last_note_count29 = 0\n    var last_note_count30 = 0\n    var last_note_count31\
    \ = 0\n    var last_note_count32 = 0\n    var last_note_count33 = 0\n    var last_note_count34\
    \ = 0\n    var last_note_count35 = 0\n    var last_note_count36 = 0\n    var last_note_count37\
    \ = 0\n    var last_note_count38 = 0\n    var last_note_count39 = 0\n    var last_note_count40\
    \ = 0\n    var last_note_count41 = 0\n    var last_note_count42 = 0\n    var last_note_count43\
    \ = 0\n    var last_note_count44 = 0\n    var last_note_count45 = 0\n    var last_note_count46\
    \ = 0\n    var last_note_count47 = 0\n    var last_note_count48 = 0\n    var last_note_count49\
    \ = 0\n    var last_note_count50 = 0\n    var last_note_count51 = 0\n    var last_note_count52\
    \ = 0\n    var last_note_count53 = 0\n    var last_note_count54 = 0\n    var last_note_count55\
    \ = 0\n    var last_note_count56 = 0\n    var last_note_count57 = 0\n    var last_note_count58\
    \ = 0\n    var last_note_count59 = 0\n    var last_note_count60 = 0\n    var last_note_count61\
    \ = 0\n    var last_note_count62 = 0\n    var last_note_count63 = 0\n    var last_note_count64\
    \ = 0\n    var last_note_count65 = 0\n    var last_note_count66 = 0\n    var last_note_count67\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp43k0h5y6.swift:84:9: error: type annotation missing in pattern\n\
    \    var last_note_count67\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var notes_count = 0\n    var note = \"\"\n    var\
    \ beat = \"\"\n    for c in music_string {\n        if c == 'o' {\n          \
    \  if notes_count == 0 {\n                notes_count += 1\n                notes.append(note)\n\
    \                beats_count = 0\n                note = \"\"\n            } else\
    \ {\n                notes_count += 1\n                notes.append(note)\n  \
    \              beats_count = 0\n                note = \"\"\n            }\n \
    \       } else if c == '|' {\n            if notes_count == 0 {\n            \
    \    notes_count += 1\n                notes.append(note)\n                beats_count\
    \ = 0\n                note = \"\"\n            } else {\n                notes_count\
    \ += 1\n                notes.append(note)\n                beats_count = 0\n\
    \                note = \"\"\n            }\n        } else if c == '.' {\n  \
    \          if notes_count == 0 {\n                notes_count += 1\n         \
    \       notes.append(note)\n                beats_count = 0\n                note\
    \ = \"\"\n            } else {\n                notes_count += 1\n           \
    \     notes.append(note)\n                beats_count = 0\n                note\
    \ = \"\"\n            }\n        } else {\n            if notes_count == 0 {\n\
    \                notes_count += 1\n                notes.append(note)\n      \
    \          beats_count = 0\n                note = \"\"\n            } else {\n\
    \                note += c\n            }\n        }\n        if notes_count ==\
    \ 4 {\n            beats_count += 1\n            notes.append(note)\n        \
    \    note = \"\"\n            notes_count = 0\n        }\n        if notes_count\
    \ == 2 {\n            beats_count += 1\n            notes.append(note)\n     \
    \       note = \"\"\n            notes_count = 0\n        }\n        if notes_count\
    \ == 1 {\n            beats_count += 1\n            notes.append(note)\n     \
    \       note = \"\"\n            notes_count = 0\n        }\n        if notes_count\
    \ == 0 {\n            beats_count += 1\n            notes.append(note)\n     \
    \       note = \"\"\n            notes_count = 0\n        }\n    }\n    for note\
    \ in notes {\n        beats.append(beats_count)\n    }\n    return beats\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkp3towde.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpkp3towde.swift:29:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpkp3towde.swift:41:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpkp3towde.swift:60:25: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n             \
    \   note += c\n                        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = String()\n    var note_count = 0\n    var last_note = String()\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_beat_count = 0\n    var last_note_count\
    \ = 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n    var last_beat_count = 0\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_beat = 0\n    var last_beat_count\
    \ = 0\n    var last_note_count = 0\n    var last_note = String()\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_beat_count = 0\n    var last_note_count\
    \ = 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n    var last_beat_count = 0\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_beat = 0\n    var last_beat_count\
    \ = 0\n    var last_note_count = 0\n    var last_note = String()\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_beat_count = 0\n    var last_note_count\
    \ = 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n    var last_beat_count = 0\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_beat = 0\n    var last_beat_count\
    \ = 0\n    var last_note_count = 0\n    var last_note = String()\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_beat_count = 0\n    var last_note_count\
    \ = 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n    var last_beat_count = 0\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_beat = 0\n    var last_beat_count\
    \ = 0\n    var last_note_count = 0\n    var last_note = String()\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_beat_count = 0\n    var last_note_count\
    \ = 0\n    var last_note = String()\n    var last_note_count = 0\n    var last_beat\
    \ = 0\n    var last_beat_count = 0\n    var last_note_count = 0\n    var last_note\
    \ = String()\n    var last_note_count = 0\n    var last_beat = 0\n    var last_beat_count\
    \ = 0\n    var last_note_count = 0\n    var last_note = String()\n    var last_note_count\
    \ = 0\n    var last_beat = 0\n    var last_beat_count = 0\n    var last_note_count\
    \ = 0\n    var last_note = String()\n    var last_note\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcn3p5l1g.swift:18:9: error: invalid redeclaration of 'last_note_count'\n\
    \    var last_note_count = 0\n        ^\n/tmp/tmpcn3p5l1g.swift:15:9: note: 'last_note_count'\
    \ previously declared here\n    var last_note_count = 0\n        ^\n/tmp/tmpcn3p5l1g.swift:19:9:\
    \ error: invalid redeclaration of 'last_note'\n    var last_note = String()\n\
    \        ^\n/tmp/tmpcn3p5l1g.swift:14:9: note: 'last_note' previously declared\
    \ here\n    var last_note = String()\n        ^\n/tmp/tmpcn3p5l1g.swift:20:9:\
    \ error: invalid redeclaration of 'last_note_count'\n    var last_note_count =\
    \ 0\n        ^\n/tmp/tmpcn3p5l1g.swift:15:9: note: 'last_note_count' previously\
    \ declared here\n    var last_note_count = 0\n        ^\n/tmp/tmpcn3p5l1g.swift:21:9:\
    \ error: invalid redeclaration of 'last_beat'\n    var last_beat = 0\n       \
    \ ^\n/tmp/tmpcn3p5l1g.swift:16:9: note: 'last_beat' previously declared here\n\
    \    var last_beat = 0\n        ^\n/tmp/tmpcn3p5l1g.swift:22:9: error: invalid\
    \ redeclaration of 'last_beat_count'\n    var last_beat_count = 0\n        ^\n\
    /tmp/tmpcn3p5l1g.swift:17:9: note: 'last_beat_count' previously declared here\n\
    \    var last_beat_count = 0\n        ^\n/tmp/tmpcn3p5l1g.swift:23:9: error: invalid\
    \ redeclaration of 'last_note_count'\n    var last_note_count = 0\n        ^\n\
    /tmp/tmpcn3p5l1g.swift:15:9: note: 'last_note_count' previously declared here\n\
    \    var last_note_count = 0\n        ^\n/tmp/tmpcn3p5l1g.swift:24:9: error: invalid\
    \ redeclaration of 'last_note'\n    var last_note = String()\n        ^\n/tmp/tmpcn3p5l1g.swift:14:9:\
    \ note: 'last_note' previously declared here\n    var last_note = String()\n \
    \       ^\n/tmp/tmpcn3p5l1g.swift:25:9: error: invalid redeclaration of 'last_note_count'\n\
    \    var last_note_count = 0\n        ^\n/tmp/tmpcn3p5l1g.swift:15:9: note: 'last_note_count'\
    \ previously declared here\n    var last_note_count = 0\n        ^\n/tmp/tmpcn3p5l1g.swift:26:9:\
    \ error: invalid redeclaration of 'last_beat'\n    var last_beat = 0\n       \
    \ ^\n/tmp/tmpcn3p5l1g.swift:16:9: note: 'last_beat' previously declared here\n\
    \    var last_beat = 0\n        ^\n/tmp/tmpcn3p5l1g.sw"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_beats_count\
    \ = 0\n    var current_note_length = 0\n    var current_note_length_count = 0\n\
    \    var current_note_length_index = 0\n    var current_note_index = 0\n    var\
    \ current_note_length_index = 0\n    var current_note_index = 0\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note = \"\"\n    var current_note = \"\"\n    var current_note\
    \ = \"\"\n    var current_note\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1q7m5st9.swift:19:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmp1q7m5st9.swift:17:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmp1q7m5st9.swift:20:9: error: invalid redeclaration of\
    \ 'current_note_index'\n    var current_note_index = 0\n        ^\n/tmp/tmp1q7m5st9.swift:18:9:\
    \ note: 'current_note_index' previously declared here\n    var current_note_index\
    \ = 0\n        ^\n/tmp/tmp1q7m5st9.swift:21:9: error: invalid redeclaration of\
    \ 'current_note'\n    var current_note = \"\"\n        ^\n/tmp/tmp1q7m5st9.swift:12:9:\
    \ note: 'current_note' previously declared here\n    var current_note = \"\"\n\
    \        ^\n/tmp/tmp1q7m5st9.swift:22:9: error: invalid redeclaration of 'current_note'\n\
    \    var current_note = \"\"\n        ^\n/tmp/tmp1q7m5st9.swift:12:9: note: 'current_note'\
    \ previously declared here\n    var current_note = \"\"\n        ^\n/tmp/tmp1q7m5st9.swift:23:9:\
    \ error: invalid redeclaration of 'current_note'\n    var current_note = \"\"\n\
    \        ^\n/tmp/tmp1q7m5st9.swift:12:9: note: 'current_note' previously declared\
    \ here\n    var current_note = \"\"\n        ^\n/tmp/tmp1q7m5st9.swift:24:9: error:\
    \ invalid redeclaration of 'current_note'\n    var current_note = \"\"\n     \
    \   ^\n/tmp/tmp1q7m5st9.swift:12:9: note: 'current_note' previously declared here\n\
    \    var current_note = \"\"\n        ^\n/tmp/tmp1q7m5st9.swift:25:9: error: invalid\
    \ redeclaration of 'current_note'\n    var current_note = \"\"\n        ^\n/tmp/tmp1q7m5st9.swift:12:9:\
    \ note: 'current_note' previously declared here\n    var current_note = \"\"\n\
    \        ^\n/tmp/tmp1q7m5st9.swift:26:9: error: invalid redeclaration of 'current_note'\n\
    \    var current_note = \"\"\n        ^\n/tmp/tmp1q7m5st9.swift:12:9: note: 'current_note'\
    \ previously declared here\n    var current_note = \"\"\n        ^\n/tmp/tmp1q7m5st9.swift:27:9:\
    \ error: invalid redeclaration of 'current_note'\n    var current_note = \"\"\n\
    \        ^\n/tmp/tmp1q7m5st9.swift:12:9: note: 'current_note' previously declared\
    \ here\n    v"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var notes_length_to_beat = 0\n    var notes_length_to_beat_next\
    \ = 0\n    var notes_length_to_beat_next_next = 0\n    var notes_length_to_beat_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next = 0\n    var notes_length_to_beat_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next = 0\n    var\
    \ notes_length_to_beat_next_next_next_next_next_next_next = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsn2cdzog.swift:24:9: error: invalid redeclaration of 'notes_length_to_beat_next_next_next_next_next_next_next_next_next_next'\n\
    \    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpsn2cdzog.swift:23:9: note: 'notes_length_to_beat_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpsn2cdzog.swift:26:9: error: invalid redeclaration of\
    \ 'notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpsn2cdzog.swift:25:9: note: 'notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpsn2cdzog.swift:28:9: error: invalid redeclaration of\
    \ 'notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpsn2cdzog.swift:27:9: note: 'notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpsn2cdzog.swift:29:9: error: invalid redeclaration of\
    \ 'notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next'\n\
    \    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpsn2cdzog.swift:27:9: note: 'notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next'\
    \ previously declared here\n    var notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 0\n        ^\n/tmp/tmpsn2cdzog.swift:30:9: error: invalid redeclaration of\
    \ 'notes_length_to_beat_next_next_next_next_next_next_next_next_next_next_nex"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beats = 0\n    var last_beats_count = 0\n    var last_beats_count_count\
    \ = 0\n    var last_beats_count_count_count = 0\n    var last_beats_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpaamb4six.swift:35:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var beats_count = 0\n   \
    \ var note_count = 0\n    var note_char = \"\"\n    var note_char_count = 0\n\
    \    var note_char_index = 0\n    var note_char_index2 = 0\n    var note_char_index3\
    \ = 0\n    var note_char_index4 = 0\n    var note_char_index5 = 0\n    var note_char_index6\
    \ = 0\n    var note_char_index7 = 0\n    var note_char_index8 = 0\n    var note_char_index9\
    \ = 0\n    var note_char_index10 = 0\n    var note_char_index11 = 0\n    var note_char_index12\
    \ = 0\n    var note_char_index13 = 0\n    var note_char_index14 = 0\n    var note_char_index15\
    \ = 0\n    var note_char_index16 = 0\n    var note_char_index17 = 0\n    var note_char_index18\
    \ = 0\n    var note_char_index19 = 0\n    var note_char_index20 = 0\n    var note_char_index21\
    \ = 0\n    var note_char_index22 = 0\n    var note_char_index23 = 0\n    var note_char_index24\
    \ = 0\n    var note_char_index25 = 0\n    var note_char_index26 = 0\n    var note_char_index27\
    \ = 0\n    var note_char_index28 = 0\n    var note_char_index29 = 0\n    var note_char_index30\
    \ = 0\n    var note_char_index31 = 0\n    var note_char_index32 = 0\n    var note_char_index33\
    \ = 0\n    var note_char_index34 = 0\n    var note_char_index35 = 0\n    var note_char_index36\
    \ = 0\n    var note_char_index37 = 0\n    var note_char_index38 = 0\n    var note_char_index39\
    \ = 0\n    var note_char_index40 = 0\n    var note_char_index41 = 0\n    var note_char_index42\
    \ = 0\n    var note_char_index43 = 0\n    var note_char_index44 = 0\n    var note_char_index45\
    \ = 0\n    var note_char_index46 = 0\n    var note_char_index47 = 0\n    var note_char_index48\
    \ = 0\n    var note_char_index49 = 0\n    var note_char_index50 = 0\n    var note_char_index51\
    \ = 0\n    var note_char_index52 = 0\n    var note_char_index53 = 0\n    var note_char_index54\
    \ = 0\n    var note_char_index55 = 0\n    var note_char_index56 = 0\n    var note_char_index57\
    \ = 0\n    var note_char_index58 = 0\n    var note_char_index59 = 0\n    var note_char_index60\
    \ = 0\n    var note_char_index61 = 0\n    var note_char_index62 = 0\n    var note_char_index63\
    \ = 0\n    var note_char_index64 = 0\n    var note_char_index65 = 0\n    var note_char_index66\
    \ = 0\n    var note_char_index67 = 0\n    var note_char_index68 = 0\n    var note_char_index69\
    \ = 0\n    var note_char\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4dcuhrqu.swift:84:9: error: type annotation missing in pattern\n\
    \    var note_char\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes = [Int]()\n    var beat = 0\n    var last_beat\
    \ = 0\n    var last_note = 0\n    var last_note_beat = 0\n    var last_note_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat = 0\n    var last_note_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat_beat_beat = 0\n    var last_note_beat_beat_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat_beat_beat_beat_beat = 0\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat = 0\n  \
    \  var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat = 0\n    var\
    \ last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat = 0\n    var\
    \ last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat = 0\n\
    \    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n    var last_note_beat_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3b_6j437.swift:29:9: error: invalid redeclaration of 'last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat'\n\
    \    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n        ^\n/tmp/tmp3b_6j437.swift:28:9: note: 'last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat'\
    \ previously declared here\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n        ^\n/tmp/tmp3b_6j437.swift:32:9: error: invalid redeclaration of\
    \ 'last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat'\n\
    \    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n        ^\n/tmp/tmp3b_6j437.swift:31:9: note: 'last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat'\
    \ previously declared here\n    var last_note_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat_beat\
    \ = 0\n        ^\n/tmp/tmp3b_6j437.swift:34:9: error: type annotation missing\
    \ in pattern\n    var last_note_beat_\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = \"\"\n    var current_note_index = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpuz_op0xn.swift:69:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpuz_op0xn.swift:21:9: error: invalid redeclaration of 'current_note_length_value_value_index'\n\
    \    var current_note_length_value_value_index = 0\n        ^\n/tmp/tmpuz_op0xn.swift:19:9:\
    \ note: 'current_note_length_value_value_index' previously declared here\n   \
    \ var current_note_length_value_value_index = 0\n        ^\n/tmp/tmpuz_op0xn.swift:22:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value'\n  \
    \  var current_note_length_value_value_value = 0\n        ^\n/tmp/tmpuz_op0xn.swift:20:9:\
    \ note: 'current_note_length_value_value_value' previously declared here\n   \
    \ var current_note_length_value_value_value = 0\n        ^\n/tmp/tmpuz_op0xn.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_index'\n  \
    \  var current_note_length_value_value_index = 0\n        ^\n/tmp/tmpuz_op0xn.swift:19:9:\
    \ note: 'current_note_length_value_value_index' previously declared here\n   \
    \ var current_note_length_value_value_index = 0\n        ^\n/tmp/tmpuz_op0xn.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value'\n  \
    \  var current_note_length_value_value_value = 0\n        ^\n/tmp/tmpuz_op0xn.swift:20:9:\
    \ note: 'current_note_length_value_value_value' previously declared here\n   \
    \ var current_note_length_value_value_value = 0\n        ^\n/tmp/tmpuz_op0xn.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_index'\n  \
    \  var current_note_length_value_value_index = 0\n        ^\n/tmp/tmpuz_op0xn.swift:19:9:\
    \ note: 'current_note_length_value_value_index' previously declared here\n   \
    \ var current_note_length_value_value_index = 0\n        ^\n/tmp/tmpuz_op0xn.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value'\n  \
    \  var current_note_length_value_value_value = 0\n        ^\n/tmp/tmpuz_op0xn.swift:20:9:\
    \ note: 'current_note_length_value_value_value' previously declared here\n   \
    \ var current_note_length_value_value_value = 0\n        ^\n/tmp/tmpuz_op0xn.swift:27:9:\
    \ error: invalid redecla"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var last_note = \"\"\n    var last_beat = 0\n    var last_beats = 0\n    var\
    \ last_beats_count = 0\n    var last_beats_count_count = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpptxskryz.swift:27:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    for c in music_string {\n        if c == 'o' {\n \
    \           current_beat = 0\n            current_note = Int()\n        } else\
    \ if c == 'o|' {\n            current_beat = 1\n            current_note = Int()\n\
    \        } else if c == '.|' {\n            current_beat = 2\n            current_note\
    \ = Int()\n        } else {\n            current_beat = Int(c) - 48\n        \
    \    current_note = current_note + Int(c) - 48\n        }\n        beats.append(current_beat)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9m50hjfa.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmp9m50hjfa.swift:17:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o|' {\n                       ^~~~\n              \
    \         \"o|\"\n/tmp/tmp9m50hjfa.swift:20:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.|' {\n                       ^~~~\n\
    \                       \".|\"\n/tmp/tmp9m50hjfa.swift:17:21: error: binary operator\
    \ '==' cannot be applied to operands of type 'Character' and 'String'\n      \
    \  } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmp9m50hjfa.swift:17:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n/tmp/tmp9m50hjfa.swift:20:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n        } else\
    \ if c == '.|' {\n                  ~ ^  ~~~~\n/tmp/tmp9m50hjfa.swift:20:21: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        } else if c == '.|' {\n              \
    \      ^\n/tmp/tmp9m50hjfa.swift:24:28: error: no exact matches in call to initializer\
    \ \n            current_beat = Int(c) - 48\n                           ^\nSwift.Int:7:12:\
    \ note: candidate expects value of type 'Float16' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float16)\n           ^\nSwift.Int:10:12: note: candidate\
    \ expects value of type 'Float' for parameter #1 (got 'Character')\n    public\
    \ init(_ source: Float)\n           ^\nSwift.Int:12:12: note: candidate expects\
    \ value of type 'Double' for parameter #1 (got 'Character')\n    public init(_\
    \ source: Double)\n           ^\nSwift.Int:14:12: note: candidate expects value\
    \ of type 'Float80' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float80)\n           ^\nSwift.Int:28:12: note: candidate expects value of type\
    \ 'Builtin.Int64' for param"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last_note = \"\"\n    var last_beat\
    \ = 0\n    var last_beat_type = \"\"\n    var last_beat_type_index = 0\n    var\
    \ last_beat_type_index2 = 0\n    var last_beat_type_index3 = 0\n    var last_beat_type_index4\
    \ = 0\n    var last_beat_type_index5 = 0\n    var last_beat_type_index6 = 0\n\
    \    var last_beat_type_index7 = 0\n    var last_beat_type_index8 = 0\n    var\
    \ last_beat_type_index9 = 0\n    var last_beat_type_index10 = 0\n    var last_beat_type_index11\
    \ = 0\n    var last_beat_type_index12 = 0\n    var last_beat_type_index13 = 0\n\
    \    var last_beat_type_index14 = 0\n    var last_beat_type_index15 = 0\n    var\
    \ last_beat_type_index16 = 0\n    var last_beat_type_index17 = 0\n    var last_beat_type_index18\
    \ = 0\n    var last_beat_type_index19 = 0\n    var last_beat_type_index20 = 0\n\
    \    var last_beat_type_index21 = 0\n    var last_beat_type_index22 = 0\n    var\
    \ last_beat_type_index23 = 0\n    var last_beat_type_index24 = 0\n    var last_beat_type_index25\
    \ = 0\n    var last_beat_type_index26 = 0\n    var last_beat_type_index27 = 0\n\
    \    var last_beat_type_index28 = 0\n    var last_beat_type_index29 = 0\n    var\
    \ last_beat_type_index30 = 0\n    var last_beat_type_index31 = 0\n    var last_beat_type_index32\
    \ = 0\n    var last_beat_type_index33 = 0\n    var last_beat_type_index34 = 0\n\
    \    var last_beat_type_index35 = 0\n    var last_beat_type_index36 = 0\n    var\
    \ last_beat_type_index37 = 0\n    var last_beat_type_index38 = 0\n    var last_beat_type_index39\
    \ = 0\n    var last_beat_type_index40 = 0\n    var last_beat_type_index41 = 0\n\
    \    var last_beat_type_index42 = 0\n    var last_beat_type_index43 = 0\n    var\
    \ last_beat_type_index44 = 0\n    var last_beat_type_index45 = 0\n    var last_beat_type_index46\
    \ = 0\n    var last_beat_type_index47 = 0\n    var last_beat_type_index48 = 0\n\
    \    var last_beat_type_index49 = 0\n    var last_beat_type_index50 = 0\n    var\
    \ last_beat_type_index51 = 0\n    var last_beat_type_index52 = 0\n    var last_beat_type_index53\
    \ = 0\n    var last_beat_type_index54 = 0\n    var last_beat_type_index55 = 0\n\
    \    var last_beat_type_index56 = 0\n    var last_beat_type_index57 = 0\n    var\
    \ last_beat_type_index58 = 0\n    var last_beat_type_index59 = 0\n    var last_beat\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpto_vyr8b.swift:76:9: error: type annotation missing in pattern\n\
    \    var last_beat\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var last_note = \"\"\n    var last_beat = 0\n    var last_beats_count = 0\n\
    \    var last_beats_count_index = 0\n    var last_beats_count_index2 = 0\n   \
    \ var last_beats_count_index3 = 0\n    var last_beats_count_index4 = 0\n    var\
    \ last_beats_count_index5 = 0\n    var last_beats_count_index6 = 0\n    var last_beats_count_index7\
    \ = 0\n    var last_beats_count_index8 = 0\n    var last_beats_count_index9 =\
    \ 0\n    var last_beats_count_index10 = 0\n    var last_beats_count_index11 =\
    \ 0\n    var last_beats_count_index12 = 0\n    var last_beats_count_index13 =\
    \ 0\n    var last_beats_count_index14 = 0\n    var last_beats_count_index15 =\
    \ 0\n    var last_beats_count_index16 = 0\n    var last_beats_count_index17 =\
    \ 0\n    var last_beats_count_index18 = 0\n    var last_beats_count_index19 =\
    \ 0\n    var last_beats_count_index20 = 0\n    var last_beats_count_index21 =\
    \ 0\n    var last_beats_count_index22 = 0\n    var last_beats_count_index23 =\
    \ 0\n    var last_beats_count_index24 = 0\n    var last_beats_count_index25 =\
    \ 0\n    var last_beats_count_index26 = 0\n    var last_beats_count_index27 =\
    \ 0\n    var last_beats_count_index28 = 0\n    var last_beats_count_index29 =\
    \ 0\n    var last_beats_count_index30 = 0\n    var last_beats_count_index31 =\
    \ 0\n    var last_beats_count_index32 = 0\n    var last_beats_count_index33 =\
    \ 0\n    var last_beats_count_index34 = 0\n    var last_beats_count_index35 =\
    \ 0\n    var last_beats_count_index36 = 0\n    var last_beats_count_index37 =\
    \ 0\n    var last_beats_count_index38 = 0\n    var last_beats_count_index39 =\
    \ 0\n    var last_beats_count_index40 = 0\n    var last_beats_count_index41 =\
    \ 0\n    var last_beats_count_index42 = 0\n    var last_beats_count_index43 =\
    \ 0\n    var last_beats_count_index44 = 0\n    var last_beats_count_index45 =\
    \ 0\n    var last_beats_count_index46 = 0\n    var last_beats_count_index47 =\
    \ 0\n    var last_beats_count_index48 = 0\n    var last_beats_count_index49 =\
    \ 0\n    var last_beats_count_index50 = 0\n    var last_beats_count_index51 =\
    \ 0\n    var last_beats_count_index52 = 0\n    var last_beats_count_index53 =\
    \ 0\n    var last_beats_count_index\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpir3ex6xj.swift:68:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_index\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_beats =\
    \ 0\n    var current_note_index = 0\n    var current_note_length = 0\n    for\
    \ c in music_string {\n        if c == 'o' {\n            if current_note != \"\
    \" {\n                notes.append(current_note)\n                current_note\
    \ = \"\"\n                current_beat = 0\n                current_beats = 0\n\
    \                current_note_index = 0\n                current_note_length =\
    \ 0\n            }\n        } else if c == '|' {\n            if current_note\
    \ != \"\" {\n                notes.append(current_note)\n                current_note\
    \ = \"\"\n                current_beat = 0\n                current_beats = 0\n\
    \                current_note_index = 0\n                current_note_length =\
    \ 0\n            }\n        } else if c == \".\" {\n            if current_note\
    \ != \"\" {\n                notes.append(current_note)\n                current_note\
    \ = \"\"\n                current_beat = 0\n                current_beats = 0\n\
    \                current_note_index = 0\n                current_note_length =\
    \ 0\n            }\n        } else if c == 'o|' {\n            if current_note\
    \ != \"\" {\n                notes.append(current_note)\n                current_note\
    \ = \"\"\n                current_beat = 0\n                current_beats = 0\n\
    \                current_note_index = 0\n                current_note_length =\
    \ 0\n            }\n        } else if c == '.|' {\n            if current_note\
    \ != \"\" {\n                notes.append(current_note)\n                current_note\
    \ = \"\"\n                current_beat = 0\n                current_beats = 0\n\
    \                current_note_index = 0\n                current_note_length =\
    \ 0\n            }\n        } else {\n            if current_note != \"\" {\n\
    \                current_note += String(c)\n            } else {\n           \
    \     current_beats += 1\n                current_beat = 0\n                current_note_index\
    \ += 1\n                current_note_length += 1\n            }\n        }\n \
    \   }\n    if current_note != \"\" {\n        notes.append(current_note)\n   \
    \ }\n    for note in notes {\n        beats.append(current_beats)\n    }\n   \
    \ return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptlikapge.swift:18:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmptlikapge.swift:27:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmptlikapge.swift:45:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == 'o|' {\n                       ^~~~\n\
    \                       \"o|\"\n/tmp/tmptlikapge.swift:54:24: error: single-quoted\
    \ string literal found, use '\"'\n        } else if c == '.|' {\n            \
    \           ^~~~\n                       \".|\"\n/tmp/tmptlikapge.swift:45:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmptlikapge.swift:45:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n/tmp/tmptlikapge.swift:54:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n        } else\
    \ if c == '.|' {\n                  ~ ^  ~~~~\n/tmp/tmptlikapge.swift:54:21: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        } else if c == '.|' {\n              \
    \      ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        var beat = 0\n        if note.contains(\"\
    o\") {\n            beat = 4\n        } else if note.contains(\"o|\") {\n    \
    \        beat = 2\n        } else if note.contains(\".|\") {\n            beat\
    \ = 1\n        } else {\n            beat = 0\n        }\n        beats.append(beat)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkyqljt54.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last = 0\n    var lastbeat = 0\n\
    \    var lastnote = \"\"\n    var lastlast = 0\n    var lastlastbeat = 0\n   \
    \ var lastlastnote = \"\"\n    for c in music_string {\n        if c == 'o' {\n\
    \            beats.append(beat)\n            notes.append(note)\n            beat\
    \ = 0\n            note = \"\"\n            last = 0\n            lastbeat = 0\n\
    \            lastnote = \"\"\n            lastlast = 0\n            lastlastbeat\
    \ = 0\n            lastlastnote = \"\"\n        } else if c == 'o|' {\n      \
    \      beats.append(beat)\n            notes.append(note)\n            beat =\
    \ 0\n            note = \"\"\n            last = 0\n            lastbeat = 0\n\
    \            lastnote = \"\"\n            lastlast = 0\n            lastlastbeat\
    \ = 0\n            lastlastnote = \"\"\n            lastbeat = 0\n           \
    \ lastnote = \"\"\n            lastlast = 0\n            lastlastbeat = 0\n  \
    \          lastlastnote = \"\"\n            lastbeat = 0\n            lastnote\
    \ = \"\"\n            lastlast = 0\n            lastlastbeat = 0\n           \
    \ lastlastnote = \"\"\n            lastbeat = 0\n            lastnote = \"\"\n\
    \            lastlast = 0\n            lastlastbeat = 0\n            lastlastnote\
    \ = \"\"\n            lastbeat = 0\n            lastnote = \"\"\n            lastlast\
    \ = 0\n            lastlastbeat = 0\n            lastlastnote = \"\"\n       \
    \     lastbeat = 0\n            lastnote = \"\"\n            lastlast = 0\n  \
    \          lastlastbeat = 0\n            lastlastnote = \"\"\n            lastbeat\
    \ = 0\n            lastnote = \"\"\n            lastlast = 0\n            lastlastbeat\
    \ = 0\n            lastlastnote = \"\"\n            lastbeat = 0\n           \
    \ lastnote = \"\"\n            lastlast = 0\n            lastlastbeat = 0\n  \
    \          lastlastnote = \"\"\n            lastbeat = 0\n            lastnote\
    \ = \"\"\n            lastlast = 0\n            lastlastbeat = 0\n           \
    \ lastlastnote = \"\"\n            lastbeat = 0\n            lastnote = \"\"\n\
    \            lastlast = 0\n            lastlastbeat = 0\n            lastlastnote\
    \ = \"\"\n            lastbeat = 0\n            lastnote = \"\"\n            lastlast\
    \ = 0\n            lastlastbeat = 0\n            lastlastnote = \"\"\n       \
    \     lastbeat = 0\n            lastnote = \"\"\n            lastlast = 0\n  \
    \          lastlastbeat = 0\n            lastlastnote = \"\"\n            lastbeat\
    \ = 0\n            lastnote = \"\"\n            lastlast = 0\n            lastlastbeat\
    \ = 0\n            lastlastnote = \"\"\n            lastbeat = 0\n           \
    \ lastnote = \"\"\n            lastlast = 0\n            lastlastbeat = 0\n  \
    \          lastlastnote = \"\"\n            lastbeat = 0\n            lastnote\
    \ = \"\"\n            lastlast = 0\n            lastlastbeat = 0\n           \
    \ lastlastnote = \"\"\n            lastbeat = 0\n            lastnote = \"\"\n\
    \            lastlast = 0\n            lastlastbeat = 0\n            lastlastnote\
    \ = \"\"\n            lastbeat = 0\n            lastnote = \"\"\n            lastlast\
    \ = 0\n            lastlastbeat\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpprp11xtw.swift:21:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpprp11xtw.swift:32:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o|' {\n                       ^~~~\n              \
    \         \"o|\"\n/tmp/tmpprp11xtw.swift:141:87: error: expected '}' at end of\
    \ brace statement\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\"\
    ) == [2, 1, 2, 1, 4, 2, 4, 2])\n                                             \
    \                                         ^\n/tmp/tmpprp11xtw.swift:20:27: note:\
    \ to match this opening '{'\n    for c in music_string {\n                   \
    \       ^\n/tmp/tmpprp11xtw.swift:141:87: error: expected '}' at end of brace\
    \ statement\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\n                                                    \
    \                                  ^\n/tmp/tmpprp11xtw.swift:9:49: note: to match\
    \ this opening '{'\nfunc parse_music(music_string: String) -> [Int] {\n      \
    \                                          ^\n/tmp/tmpprp11xtw.swift:32:21: error:\
    \ binary operator '==' cannot be applied to operands of type 'Character' and 'String'\n\
    \        } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmpprp11xtw.swift:32:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n/tmp/tmpprp11xtw.swift:121:13: warning: variable is unused\n\
    \            lastlastbeat\n            ^~~~~~~~~~~~\n/tmp/tmpprp11xtw.swift:125:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note.count > 1 {\n        \
    \    beats.append(Int(note.prefix(1)))\n            beats.append(Int(note.suffix(1)))\n\
    \        } else {\n            beats.append(Int(note))\n        }\n    }\n   \
    \ return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpipx5su0r.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpipx5su0r.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var lastbeat = 0\n  \
    \  var lastnote = 0\n    var lastlast = 0\n    var lastlastbeat = 0\n    var lastlastnote\
    \ = 0\n    var lastlastlast = 0\n    var lastlastlastbeat = 0\n    var lastlastlastnote\
    \ = 0\n    var lastlastlastlast = 0\n    var lastlastlastlastbeat = 0\n    var\
    \ lastlastlastlastnote = 0\n    var lastlastlastlastlast = 0\n    var lastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastnote = 0\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = 0\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = 0\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = 0\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = 0\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = 0\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = 0\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = 0\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = 0\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = 0\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = 0\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = 0\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = 0\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = 0\n    var lastlastlastlastlastlast = 0\n    var lastlastlast\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpd1y6nx39.swift:32:9: error: invalid redeclaration of 'lastlastlastlastlastlast'\n\
    \    var lastlastlastlastlastlast = 0\n        ^\n/tmp/tmpd1y6nx39.swift:29:9:\
    \ note: 'lastlastlastlastlastlast' previously declared here\n    var lastlastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmpd1y6nx39.swift:33:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlastlastbeat'\n    var lastlastlastlastlastlastbeat = 0\n \
    \       ^\n/tmp/tmpd1y6nx39.swift:30:9: note: 'lastlastlastlastlastlastbeat' previously\
    \ declared here\n    var lastlastlastlastlastlastbeat = 0\n        ^\n/tmp/tmpd1y6nx39.swift:34:9:\
    \ error: invalid redeclaration of 'lastlastlastlastlastlastnote'\n    var lastlastlastlastlastlastnote\
    \ = 0\n        ^\n/tmp/tmpd1y6nx39.swift:31:9: note: 'lastlastlastlastlastlastnote'\
    \ previously declared here\n    var lastlastlastlastlastlastnote = 0\n       \
    \ ^\n/tmp/tmpd1y6nx39.swift:35:9: error: invalid redeclaration of 'lastlastlastlastlastlast'\n\
    \    var lastlastlastlastlastlast = 0\n        ^\n/tmp/tmpd1y6nx39.swift:29:9:\
    \ note: 'lastlastlastlastlastlast' previously declared here\n    var lastlastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmpd1y6nx39.swift:36:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlastlastbeat'\n    var lastlastlastlastlastlastbeat = 0\n \
    \       ^\n/tmp/tmpd1y6nx39.swift:30:9: note: 'lastlastlastlastlastlastbeat' previously\
    \ declared here\n    var lastlastlastlastlastlastbeat = 0\n        ^\n/tmp/tmpd1y6nx39.swift:37:9:\
    \ error: invalid redeclaration of 'lastlastlastlastlastlastnote'\n    var lastlastlastlastlastlastnote\
    \ = 0\n        ^\n/tmp/tmpd1y6nx39.swift:31:9: note: 'lastlastlastlastlastlastnote'\
    \ previously declared here\n    var lastlastlastlastlastlastnote = 0\n       \
    \ ^\n/tmp/tmpd1y6nx39.swift:38:9: error: invalid redeclaration of 'lastlastlastlastlastlast'\n\
    \    var lastlastlastlastlastlast = 0\n        ^\n/tmp/tmpd1y6nx39.swift:29:9:\
    \ note: 'lastlastlastlastlastlast' previously declared here\n    var lastlastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmpd1y6nx39.swift:39:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlastlastbeat'\n    var l"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_octave = 0\n    var current_note_is_octave\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var current_note_is_rest = false\n    var current_note_is_rest\
    \ = false\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmivbz0qq.swift:83:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpmivbz0qq.swift:12:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpmivbz0qq.swift:16:9:\
    \ error: invalid redeclaration of 'current_note_is_rest'\n    var current_note_is_rest\
    \ = false\n        ^\n/tmp/tmpmivbz0qq.swift:15:9: note: 'current_note_is_rest'\
    \ previously declared here\n    var current_note_is_rest = false\n        ^\n\
    /tmp/tmpmivbz0qq.swift:17:9: error: invalid redeclaration of 'current_note_is_rest'\n\
    \    var current_note_is_rest = false\n        ^\n/tmp/tmpmivbz0qq.swift:15:9:\
    \ note: 'current_note_is_rest' previously declared here\n    var current_note_is_rest\
    \ = false\n        ^\n/tmp/tmpmivbz0qq.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_is_rest'\n    var current_note_is_rest = false\n        ^\n\
    /tmp/tmpmivbz0qq.swift:15:9: note: 'current_note_is_rest' previously declared\
    \ here\n    var current_note_is_rest = false\n        ^\n/tmp/tmpmivbz0qq.swift:19:9:\
    \ error: invalid redeclaration of 'current_note_is_rest'\n    var current_note_is_rest\
    \ = false\n        ^\n/tmp/tmpmivbz0qq.swift:15:9: note: 'current_note_is_rest'\
    \ previously declared here\n    var current_note_is_rest = false\n        ^\n\
    /tmp/tmpmivbz0qq.swift:20:9: error: invalid redeclaration of 'current_note_is_rest'\n\
    \    var current_note_is_rest = false\n        ^\n/tmp/tmpmivbz0qq.swift:15:9:\
    \ note: 'current_note_is_rest' previously declared here\n    var current_note_is_rest\
    \ = false\n        ^\n/tmp/tmpmivbz0qq.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_is_rest'\n    var current_note_is_rest = false\n        ^\n\
    /tmp/tmpmivbz0qq.swift:15:9: note: 'current_note_is_rest' previously declared\
    \ here\n    var current_note_is_rest = false\n        ^\n/tmp/tmpmivbz0qq.swift:22:9:\
    \ error: invalid redecla"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_length\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_string\
    \ = \"\"\n    var current_note_length_string_string_index = 0\n    var current_note_length_string_string_string\
    \ = \"\"\n    var current_note_length_string_string_string_index = 0\n    var\
    \ current_note_length_string_string_string_string = \"\"\n    var current_note_length_string_string_string_string_index\
    \ = 0\n    var current_note_length_string_string_string_string_string = \"\"\n\
    \    var current_note_length_string_string_string_string_index = 0\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n    var current_note_length_string_string_string_string_index = 0\n\
    \    var current_note_length_string_string_string_string_string = \"\"\n    var\
    \ current_note_length_string_string_string_string_index = 0\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n    var current_note_length_string_string_string_string_index = 0\n\
    \    var current_note_length_string_string_string_string_string = \"\"\n    var\
    \ current_note_length_string_string_string_string_index = 0\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n    var current_note_length_string_string_string_string_index = 0\n\
    \    var current_note_length_string_string_string_string_string = \"\"\n    var\
    \ current_note_length_string_string_string_string_index = 0\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n    var current_note_length_string_string_string_string_index = 0\n\
    \    var current_note_length_string_string_string_string_string = \"\"\n    var\
    \ current_note_length_string_string_string_string_index = 0\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n    var current_note_length_string_string_string_string_index = 0\n\
    \    var current_note_length_string_string_string_string_string = \"\"\n    var\
    \ current_note_length_string_string_string_string_index = 0\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n    var current_note_length_string_string_string_string_index = 0\n\
    \    var current_note_length_string_string_string_string_string = \"\"\n    var\
    \ current_note_length_string_string_string_string_index = 0\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n    var current_note_length_string_string_string_string_index = 0\n\
    \    var current_note_length_string_string_string_string_string = \"\"\n    var\
    \ current_note_length_string_string_string_string_index = 0\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n    var current_note_length_string_string_string_string_index = 0\n\
    \    var current_note_length_string_string_string_string_string = \"\"\n    var\
    \ current_note_length_string_string_string_string_index = 0\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n    var current_note_length_string_string_string_string_index = 0\n\
    \    var current_note_length_string_string\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4loa8prg.swift:25:9: error: invalid redeclaration of 'current_note_length_string_string_string_string_index'\n\
    \    var current_note_length_string_string_string_string_index = 0\n        ^\n\
    /tmp/tmp4loa8prg.swift:23:9: note: 'current_note_length_string_string_string_string_index'\
    \ previously declared here\n    var current_note_length_string_string_string_string_index\
    \ = 0\n        ^\n/tmp/tmp4loa8prg.swift:26:9: error: invalid redeclaration of\
    \ 'current_note_length_string_string_string_string_string'\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n        ^\n/tmp/tmp4loa8prg.swift:24:9: note: 'current_note_length_string_string_string_string_string'\
    \ previously declared here\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n        ^\n/tmp/tmp4loa8prg.swift:27:9: error: invalid redeclaration\
    \ of 'current_note_length_string_string_string_string_index'\n    var current_note_length_string_string_string_string_index\
    \ = 0\n        ^\n/tmp/tmp4loa8prg.swift:23:9: note: 'current_note_length_string_string_string_string_index'\
    \ previously declared here\n    var current_note_length_string_string_string_string_index\
    \ = 0\n        ^\n/tmp/tmp4loa8prg.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_string_string_string_string'\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n        ^\n/tmp/tmp4loa8prg.swift:24:9: note: 'current_note_length_string_string_string_string_string'\
    \ previously declared here\n    var current_note_length_string_string_string_string_string\
    \ = \"\"\n        ^\n/tmp/tmp4loa8prg.swift:29:9: error: invalid redeclaration\
    \ of 'current_note_length_string_string_string_string_index'\n    var current_note_length_string_string_string_string_index\
    \ = 0\n        ^\n/tmp/tmp4loa8prg.swift:23:9: note: 'current_note_length_string_string_string_string_index'\
    \ previously declared here\n    var current_note_length_string_string_string_string_index\
    \ = 0\n        ^\n/tmp/tmp4loa8prg.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_string_string_string_s"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last = 0\n    var lastbeat = 0\n\
    \    var lastnote = \"\"\n    var lastlast = 0\n    var lastlastbeat = 0\n   \
    \ var lastlastnote = \"\"\n    var lastlastlast = 0\n    var lastlastlastbeat\
    \ = 0\n    var lastlastlastnote = \"\"\n    var lastlastlastlast = 0\n    var\
    \ lastlastlastlastbeat = 0\n    var lastlastlastlastnote = \"\"\n    var lastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastbeat = 0\n    var lastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastbeat = 0\n    var lastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlastlast\
    \ = 0\n    var lastlastlastlastlastlastbeat = 0\n    var lastlastlastlastlastlastnote\
    \ = \"\"\n    var lastlastlastlastlastlastlast = 0\n    var lastlastlastlastlastlastbeat\
    \ = 0\n    var lastlastlastlastlastlastnote = \"\"\n    var lastlastlastlastlastlastlast\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9b7k7pqw.swift:30:9: error: invalid redeclaration of 'lastlastlastlastlastbeat'\n\
    \    var lastlastlastlastlastbeat = 0\n        ^\n/tmp/tmp9b7k7pqw.swift:27:9:\
    \ note: 'lastlastlastlastlastbeat' previously declared here\n    var lastlastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmp9b7k7pqw.swift:31:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlastnote'\n    var lastlastlastlastlastnote = \"\"\n      \
    \  ^\n/tmp/tmp9b7k7pqw.swift:28:9: note: 'lastlastlastlastlastnote' previously\
    \ declared here\n    var lastlastlastlastlastnote = \"\"\n        ^\n/tmp/tmp9b7k7pqw.swift:32:9:\
    \ error: invalid redeclaration of 'lastlastlastlastlastlast'\n    var lastlastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmp9b7k7pqw.swift:29:9: note: 'lastlastlastlastlastlast'\
    \ previously declared here\n    var lastlastlastlastlastlast = 0\n        ^\n\
    /tmp/tmp9b7k7pqw.swift:33:9: error: invalid redeclaration of 'lastlastlastlastlastbeat'\n\
    \    var lastlastlastlastlastbeat = 0\n        ^\n/tmp/tmp9b7k7pqw.swift:27:9:\
    \ note: 'lastlastlastlastlastbeat' previously declared here\n    var lastlastlastlastlastbeat\
    \ = 0\n        ^\n/tmp/tmp9b7k7pqw.swift:34:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlastnote'\n    var lastlastlastlastlastnote = \"\"\n      \
    \  ^\n/tmp/tmp9b7k7pqw.swift:28:9: note: 'lastlastlastlastlastnote' previously\
    \ declared here\n    var lastlastlastlastlastnote = \"\"\n        ^\n/tmp/tmp9b7k7pqw.swift:35:9:\
    \ error: invalid redeclaration of 'lastlastlastlastlastlast'\n    var lastlastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmp9b7k7pqw.swift:29:9: note: 'lastlastlastlastlastlast'\
    \ previously declared here\n    var lastlastlastlastlastlast = 0\n        ^\n\
    /tmp/tmp9b7k7pqw.swift:38:9: error: invalid redeclaration of 'lastlastlastlastlastlast'\n\
    \    var lastlastlastlastlastlast = 0\n        ^\n/tmp/tmp9b7k7pqw.swift:29:9:\
    \ note: 'lastlastlastlastlastlast' previously declared here\n    var lastlastlastlastlastlast\
    \ = 0\n        ^\n/tmp/tmp9b7k7pqw.swift:39:9: error: invalid redeclaration of\
    \ 'lastlastlastlastlastlastbeat'\n    var lastlastlastlastlastlastbeat = 0\n \
    \       ^\n/tmp/tmp9b7k7pqw.s"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note.count > 0 {\n        \
    \    let beat = note.components(separatedBy: \" \")\n            let beat = beat[0].trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n            beats.append(Int(beat))\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3dpx_rtz.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp3dpx_rtz.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n/tmp/tmp3dpx_rtz.swift:16:55: error: cannot find 'CharacterSet'\
    \ in scope\n            let beat = beat[0].trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)\n\
    \                                                      ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var current_beat = 0\n  \
    \  var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_string_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppwonuh_y.swift:28:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_string_value_index = 0\n\
    \        ^\n/tmp/tmppwonuh_y.swift:26:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppwonuh_y.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string'\n    var\
    \ current_note_length_string_value_string_value_string_value_string = 0\n    \
    \    ^\n/tmp/tmppwonuh_y.swift:27:9: note: 'current_note_length_string_value_string_value_string_value_string'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n        ^\n/tmp/tmppwonuh_y.swift:30:9: error: invalid redeclaration\
    \ of 'current_note_length_string_value_string_value_string_value_index'\n    var\
    \ current_note_length_string_value_string_value_string_value_index = 0\n     \
    \   ^\n/tmp/tmppwonuh_y.swift:26:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmppwonuh_y.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppwonuh_y.swift:31:9: note: 'current_note_length_string_value_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmppwonuh_y.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_index'\n\
    \    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n        ^\n/tmp/tmppwonuh_y.swift:32:9: note: 'current_note_length_string_value_s"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        var beat = 0\n        var note = note.components(separatedBy:\
    \ \"o\")\n        if note.count > 0 {\n            beat = note[0].count\n    \
    \    }\n        note = note.components(separatedBy: \"o|\")\n        if note.count\
    \ > 0 {\n            beat = beat + note[0].count\n        }\n        note = note.components(separatedBy:\
    \ \".|\")\n        if note.count > 0 {\n            beat = beat + note[0].count\n\
    \        }\n        beats.append(beat)\n    }\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmptwqrk1rb.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var beats_count = 0\n   \
    \ var note_count = 0\n    var note_char = \"\"\n    var note_char_count = 0\n\
    \    var note_char_index = 0\n    var note_char_index2 = 0\n    var note_char_index3\
    \ = 0\n    var note_char_index4 = 0\n    var note_char_index5 = 0\n    var note_char_index6\
    \ = 0\n    var note_char_index7 = 0\n    var note_char_index8 = 0\n    var note_char_index9\
    \ = 0\n    var note_char_index10 = 0\n    var note_char_index11 = 0\n    var note_char_index12\
    \ = 0\n    var note_char_index13 = 0\n    var note_char_index14 = 0\n    var note_char_index15\
    \ = 0\n    var note_char_index16 = 0\n    var note_char_index17 = 0\n    var note_char_index18\
    \ = 0\n    var note_char_index19 = 0\n    var note_char_index20 = 0\n    var note_char_index21\
    \ = 0\n    var note_char_index22 = 0\n    var note_char_index23 = 0\n    var note_char_index24\
    \ = 0\n    var note_char_index25 = 0\n    var note_char_index26 = 0\n    var note_char_index27\
    \ = 0\n    var note_char_index28 = 0\n    var note_char_index29 = 0\n    var note_char_index30\
    \ = 0\n    var note_char_index31 = 0\n    var note_char_index32 = 0\n    var note_char_index33\
    \ = 0\n    var note_char_index34 = 0\n    var note_char_index35 = 0\n    var note_char_index36\
    \ = 0\n    var note_char_index37 = 0\n    var note_char_index38 = 0\n    var note_char_index39\
    \ = 0\n    var note_char_index40 = 0\n    var note_char_index41 = 0\n    var note_char_index42\
    \ = 0\n    var note_char_index43 = 0\n    var note_char_index44 = 0\n    var note_char_index45\
    \ = 0\n    var note_char_index46 = 0\n    var note_char_index47 = 0\n    var note_char_index48\
    \ = 0\n    var note_char_index49 = 0\n    var note_char_index50 = 0\n    var note_char_index51\
    \ = 0\n    var note_char_index52 = 0\n    var note_char_index53 = 0\n    var note_char_index54\
    \ = 0\n    var note_char_index55 = 0\n    var note_char_index56 = 0\n    var note_char_index57\
    \ = 0\n    var note_char_index58 = 0\n    var note_char_index59 = 0\n    var note_char_index60\
    \ = 0\n    var note_char_index61 = 0\n    var note_char_index62 = 0\n    var note_char_index63\
    \ = 0\n    var note_char_index64 = 0\n    var note_char_index65 = 0\n    var note_char_index66\
    \ = 0\n    var note_char_index67 = 0\n    var note_char_index68 = 0\n    var note_char_index69\
    \ = 0\n    var note_char\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4dcuhrqu.swift:84:9: error: type annotation missing in pattern\n\
    \    var note_char\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beat_type = 0\n    var last_beat_type_name = \"\"\n    var last_beat_type_name_index\
    \ = 0\n    var last_beat_type_name_length = 0\n    var last_beat_type_name_length_index\
    \ = 0\n    var last_beat_type_name_length_name = 0\n    var last_beat_type_name_length_name_index\
    \ = 0\n    var last_beat_type_name_length_name_length = 0\n    var last_beat_type_name_length_name_length_index\
    \ = 0\n    var last_beat_type_name_length_name_length_name = 0\n    var last_beat_type_name_length_name_length_name_index\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length = 0\n    var\
    \ last_beat_type_name_length_name_length_name_length_index = 0\n    var last_beat_type_name_length_name_length_name_length_name\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_index =\
    \ 0\n    var last_beat_type_name_length_name_length_name_length_name_length =\
    \ 0\n    var last_beat_type_name_length_name_length_name_length_name_length_index\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_index\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_index\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_index\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_index\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_index\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_length\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_index\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_length\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_index\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name_length\
    \ = 0\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp0qusd2a.swift:44:9: error: invalid redeclaration of 'last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_index'\n\
    \    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_index\
    \ = 0\n        ^\n/tmp/tmpp0qusd2a.swift:42:9: note: 'last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_index'\
    \ previously declared here\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_index\
    \ = 0\n        ^\n/tmp/tmpp0qusd2a.swift:45:9: error: invalid redeclaration of\
    \ 'last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_length'\n\
    \    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_length\
    \ = 0\n        ^\n/tmp/tmpp0qusd2a.swift:43:9: note: 'last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_length'\
    \ previously declared here\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_length\
    \ = 0\n        ^\n/tmp/tmpp0qusd2a.swift:48:9: error: type annotation missing\
    \ in pattern\n    var last_beat_type_name_length_name_length_name_length_name_length_name_length_name_length_name_length_name\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_note_beats = 0\n    var current_note_note\
    \ = music_string[1]\n\n    for c in music_string {\n        if c == 'o' {\n  \
    \          beats.append(current_beat)\n            current_beat = 0\n        \
    \    current_note = music_string[0]\n            current_note_beats = 0\n    \
    \        current_note_note = music_string[1]\n        } else if c == 'o|' {\n\
    \            beats.append(current_beat)\n            current_beat = 0\n      \
    \      current_note = music_string[0]\n            current_note_beats = 0\n  \
    \          current_note_note = music_string[1]\n        } else if c == '.|' {\n\
    \            beats.append(current_beat)\n            current_beat = 0\n      \
    \      current_note = music_string[0]\n            current_note_beats = 0\n  \
    \          current_note_note = music_string[1]\n        } else if c == '|' {\n\
    \            current_note_beats += 1\n            current_beat += current_note_beats\n\
    \            current_note_beats = 0\n            current_note = music_string[0]\n\
    \            current_note_note = music_string[1]\n        } else if c == '+' {\n\
    \            current_note_beats = 0\n            current_note = music_string[0]\n\
    \            current_note_note = music_string[1]\n        } else if c == '-' {\n\
    \            current_note_beats = 0\n            current_note = music_string[0]\n\
    \            current_note_note = music_string[1]\n        } else if c == '.' {\n\
    \            current_note_beats = 0\n            current_note = music_string[0]\n\
    \            current_note_note = music_string[1]\n        } else {\n         \
    \   current_note_beats = 0\n            current_note = music_string[0]\n     \
    \       current_note_note = music_string[1]\n            current_beat += current_note_beats\n\
    \        }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpqco3o2de.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpqco3o2de.swift:23:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o|' {\n                       ^~~~\n              \
    \         \"o|\"\n/tmp/tmpqco3o2de.swift:29:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.|' {\n                       ^~~~\n\
    \                       \".|\"\n/tmp/tmpqco3o2de.swift:35:24: error: single-quoted\
    \ string literal found, use '\"'\n        } else if c == '|' {\n             \
    \          ^~~\n                       \"|\"\n/tmp/tmpqco3o2de.swift:41:24: error:\
    \ single-quoted string literal found, use '\"'\n        } else if c == '+' {\n\
    \                       ^~~\n                       \"+\"\n/tmp/tmpqco3o2de.swift:45:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '-' {\n                       ^~~\n                       \"-\"\n/tmp/tmpqco3o2de.swift:49:24:\
    \ error: single-quoted string literal found, use '\"'\n        } else if c ==\
    \ '.' {\n                       ^~~\n                       \".\"\n/tmp/tmpqco3o2de.swift:12:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var current_note = music_string[0]\n      \
    \                 ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpqco3o2de.swift:14:29: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var current_note_note = music_string[1]\n                            ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqco3o2de.swift:20:28:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            current_note = music_string[0]\n  \
    \      "
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_length = -1\n    for c in music_string\
    \ {\n        if c == 'o' {\n            if current_note != \"\" {\n          \
    \      beats.append(current_beat)\n                current_beat = 0\n        \
    \        current_note = \"\"\n                current_note_length = -1\n     \
    \       }\n        } else if c == '|' {\n            if current_note != \"\" {\n\
    \                beats.append(current_beat)\n                current_beat = 0\n\
    \                current_note = \"\"\n                current_note_length = -1\n\
    \            }\n        } else if c == '.' {\n            if current_note != \"\
    \" {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_length\
    \ = -1\n            }\n        } else {\n            current_note += String(c)\n\
    \            current_note_length += 1\n        }\n    }\n    if current_note !=\
    \ \"\" {\n        beats.append(current_beat)\n    }\n    return beats\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp844khabr.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmp844khabr.swift:22:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmp844khabr.swift:29:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_note_beats = 0\n    var current_note_octave\
    \ = 0\n    var current_note_duration = 0\n    var current_note_durations = [Int]()\n\
    \    var current_note_durations_octave = [Int]()\n    var current_note_durations_beats\
    \ = [Int]()\n    var current_note_durations_beats_octave = [Int]()\n    var current_note_durations_beats_note\
    \ = [Int]()\n    var current_note_durations_beats_note_octave = [Int]()\n    var\
    \ current_note_durations_beats_note_duration = [Int]()\n    var current_note_durations_beats_note_duration_octave\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats = [Int]()\n\
    \    var current_note_durations_beats_note_duration_beats_octave = [Int]()\n \
    \   var current_note_durations_beats_note_duration_beats_note = [Int]()\n    var\
    \ current_note_durations_beats_note_duration_beats_note_octave = [Int]()\n   \
    \ var current_note_durations_beats_note_duration_beats_note_duration = [Int]()\n\
    \    var current_note_durations_beats_note_duration_beats_note_duration_octave\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats_octave\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats_note\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats_note_octave\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats_note_duration\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats_note_duration_octave\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats_note_duration_beats\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats_note_duration_beats_octave\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats_note_duration_beats_note\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats_note_duration_beats_note_octave\
    \ = [Int]()\n    var current_note_durations_beats_note_duration_beats_note_duration_beats_note_duration_beats_note_duration\
    \ = [Int]()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkxvcmfoe.swift:12:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpkxvcmfoe.swift:41:9:\
    \ error: type annotation missing in pattern\n    var current_note_\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last_note = \"\"\n    var last_beat\
    \ = 0\n    var last_note_index = 0\n    for c in music_string {\n        if c\
    \ == \"o\" {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n            last_note = \"\"\n\
    \            last_beat = 0\n            last_note_index = 0\n        } else if\
    \ c == \"o|\" {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n            last_note = \"\"\n\
    \            last_beat = 0\n            last_note_index = 0\n        } else if\
    \ c == \".|\" {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n            last_note = \"\"\n\
    \            last_beat = 0\n            last_note_index = 0\n        } else {\n\
    \            if note != \"\" {\n                beats.append(beat)\n         \
    \       notes.append(note)\n                beat = 0\n                note = \"\
    \"\n            }\n            note += String(c)\n        }\n    }\n    beats.append(beat)\n\
    \    notes.append(note)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphponz_zr.swift:26:21: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if c == \"o|\"\
    \ {\n                  ~ ^  ~~~~\n/tmp/tmphponz_zr.swift:26:21: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if c == \"o|\" {\n                    ^\n/tmp/tmphponz_zr.swift:34:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \".|\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmphponz_zr.swift:34:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \".|\" {\n                    ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var last_note = \"\"\n    var last_beat = 0\n    var last_beats_count = 0\n\
    \    var last_beats_count_in_note = 0\n    var last_beats_count_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note = 0\n    var last_beats_count_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpoa40oqrp.swift:18:9: error: invalid redeclaration of 'last_beats_count_in_note_in_note_in_note'\n\
    \    var last_beats_count_in_note_in_note_in_note = 0\n        ^\n/tmp/tmpoa40oqrp.swift:17:9:\
    \ note: 'last_beats_count_in_note_in_note_in_note' previously declared here\n\
    \    var last_beats_count_in_note_in_note_in_note = 0\n        ^\n/tmp/tmpoa40oqrp.swift:24:9:\
    \ error: invalid redeclaration of 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\n\
    \    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n        ^\n/tmp/tmpoa40oqrp.swift:23:9: note: 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\
    \ previously declared here\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n        ^\n/tmp/tmpoa40oqrp.swift:25:9: error: invalid redeclaration of\
    \ 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\n\
    \    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n        ^\n/tmp/tmpoa40oqrp.swift:23:9: note: 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\
    \ previously declared here\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n        ^\n/tmp/tmpoa40oqrp.swift:28:9: error: invalid redeclaration of\
    \ 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\n\
    \    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n        ^\n/tmp/tmpoa40oqrp.swift:27:9: note: 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\
    \ previously declared here\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n        ^\n/tmp/tmpoa40oqrp.swift:29:9: error: invalid redeclaration of\
    \ 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_'\n\
    \    var last_beats_count_in_note_in_note_in_note_in_note"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes = [Int]()\n    var beats = 0\n    var note\
    \ = Int()\n    var rest = music_string.characters.count\n    var last_note = Int()\n\
    \    var last_beats = Int()\n    var last_rest = Int()\n    var last_rest2 = Int()\n\
    \    var last_rest3 = Int()\n    var last_rest4 = Int()\n    var last_rest5 =\
    \ Int()\n    var last_rest6 = Int()\n    var last_rest7 = Int()\n    var last_rest8\
    \ = Int()\n    var last_rest9 = Int()\n    var last_rest10 = Int()\n    var last_rest11\
    \ = Int()\n    var last_rest12 = Int()\n    var last_rest13 = Int()\n    var last_rest14\
    \ = Int()\n    var last_rest15 = Int()\n    var last_rest16 = Int()\n    var last_rest17\
    \ = Int()\n    var last_rest18 = Int()\n    var last_rest19 = Int()\n    var last_rest20\
    \ = Int()\n    var last_rest21 = Int()\n    var last_rest22 = Int()\n    var last_rest23\
    \ = Int()\n    var last_rest24 = Int()\n    var last_rest25 = Int()\n    var last_rest26\
    \ = Int()\n    var last_rest27 = Int()\n    var last_rest28 = Int()\n    var last_rest29\
    \ = Int()\n    var last_rest30 = Int()\n    var last_rest31 = Int()\n    var last_rest32\
    \ = Int()\n    var last_rest33 = Int()\n    var last_rest34 = Int()\n    var last_rest35\
    \ = Int()\n    var last_rest36 = Int()\n    var last_rest37 = Int()\n    var last_rest38\
    \ = Int()\n    var last_rest39 = Int()\n    var last_rest40 = Int()\n    var last_rest41\
    \ = Int()\n    var last_rest42 = Int()\n    var last_rest43 = Int()\n    var last_rest44\
    \ = Int()\n    var last_rest45 = Int()\n    var last_rest46 = Int()\n    var last_rest47\
    \ = Int()\n    var last_rest48 = Int()\n    var last_rest49 = Int()\n    var last_rest50\
    \ = Int()\n    var last_rest51 = Int()\n    var last_rest52 = Int()\n    var last_rest53\
    \ = Int()\n    var last_rest54 = Int()\n    var last_rest55 = Int()\n    var last_rest56\
    \ = Int()\n    var last_rest57 = Int()\n    var last_rest58 = Int()\n    var last_rest59\
    \ = Int()\n    var last_rest60 = Int()\n    var last_rest6\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6uztelm_.swift:13:29: error: 'characters' is unavailable: Please\
    \ use String directly\n    var rest = music_string.characters.count\n        \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6uztelm_.swift:76:9: error: type annotation missing in pattern\n\
    \    var last_rest6\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var last_note = \"\"\n    var last_beat = 0\n    var last_beat_index = 0\n\
    \    var last_beat_index2 = 0\n    var last_beat_index3 = 0\n    var last_beat_index4\
    \ = 0\n    var last_beat_index5 = 0\n    var last_beat_index6 = 0\n    var last_beat_index7\
    \ = 0\n    var last_beat_index8 = 0\n    var last_beat_index9 = 0\n    var last_beat_index10\
    \ = 0\n    var last_beat_index11 = 0\n    var last_beat_index12 = 0\n    var last_beat_index13\
    \ = 0\n    var last_beat_index14 = 0\n    var last_beat_index15 = 0\n    var last_beat_index16\
    \ = 0\n    var last_beat_index17 = 0\n    var last_beat_index18 = 0\n    var last_beat_index19\
    \ = 0\n    var last_beat_index20 = 0\n    var last_beat_index21 = 0\n    var last_beat_index22\
    \ = 0\n    var last_beat_index23 = 0\n    var last_beat_index24 = 0\n    var last_beat_index25\
    \ = 0\n    var last_beat_index26 = 0\n    var last_beat_index27 = 0\n    var last_beat_index28\
    \ = 0\n    var last_beat_index29 = 0\n    var last_beat_index30 = 0\n    var last_beat_index31\
    \ = 0\n    var last_beat_index32 = 0\n    var last_beat_index33 = 0\n    var last_beat_index34\
    \ = 0\n    var last_beat_index35 = 0\n    var last_beat_index36 = 0\n    var last_beat_index37\
    \ = 0\n    var last_beat_index38 = 0\n    var last_beat_index39 = 0\n    var last_beat_index40\
    \ = 0\n    var last_beat_index41 = 0\n    var last_beat_index42 = 0\n    var last_beat_index43\
    \ = 0\n    var last_beat_index44 = 0\n    var last_beat_index45 = 0\n    var last_beat_index46\
    \ = 0\n    var last_beat_index47 = 0\n    var last_beat_index48 = 0\n    var last_beat_index49\
    \ = 0\n    var last_beat_index50 = 0\n    var last_beat_index51 = 0\n    var last_beat_index52\
    \ = 0\n    var last_beat_index53 = 0\n    var last_beat_index54 = 0\n    var last_beat_index55\
    \ = 0\n    var last_beat_index56 = 0\n    var last_beat_index57 = 0\n    var last_beat_index58\
    \ = 0\n    var last_beat_index59 = 0\n    var last_beat_index60 = 0\n    var last_beat_index61\
    \ = 0\n    var last_beat_index62 = 0\n    var last_beat_index63 = 0\n    var last_beat_index64\
    \ = 0\n    var last_beat_index65 = 0\n    var last_beat_index66 = 0\n    var last_beat_index67\
    \ = 0\n    var last_beat_index68 = 0\n    var last_beat_index69 = 0\n    var last_beat_index70\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp15fpnpg1.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp15fpnpg1.swift:11:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp15fpnpg1.swift:12:9:\
    \ warning: initialization of variable 'last_note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_note = \"\"\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp15fpnpg1.swift:13:9: warning: initialization of variable 'last_beat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:14:9:\
    \ warning: initialization of variable 'last_beat_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:15:9: warning: initialization\
    \ of variable 'last_beat_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_beat_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp15fpnpg1.swift:16:9: warning: initialization of variable 'last_beat_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:17:9:\
    \ warning: initialization of variable 'last_beat_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_index4 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:18:9: warning: initialization\
    \ of variable 'last_beat_index5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_beat_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp15fpnpg1.swift:19:9: warning: initialization of variable 'last_beat_index6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_index6 = 0\n    "
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var beats_count = 0\n   \
    \ var last_beat = 0\n    var last_note = \"\"\n    var last_note_beat = 0\n  \
    \  var last_note_octave = 0\n    var last_note_duration = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_type = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name = \"\"\n    var last_note_duration_type_name_index\
    \ = 0\n    var last_note_octave_index = 0\n    var last_note_octave_name = \"\"\
    \n    var last_note_octave_name_index = 0\n    var last_note_duration_index =\
    \ 0\n    var last_note_duration_name = \"\"\n    var last_note_duration_name_index\
    \ = 0\n    var last_note_duration_type_index = 0\n    var last_note_duration_type_name_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var last_note_duration_name_index = 0\n    var last_note_duration_type_index\
    \ = 0\n    var last_note_duration_type_name_index = 0\n    var last_note_duration_index\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxdglnjhs.swift:76:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpxdglnjhs.swift:25:9: error: invalid redeclaration of 'last_note_duration_index'\n\
    \    var last_note_duration_index = 0\n        ^\n/tmp/tmpxdglnjhs.swift:17:9:\
    \ note: 'last_note_duration_index' previously declared here\n    var last_note_duration_index\
    \ = 0\n        ^\n/tmp/tmpxdglnjhs.swift:28:9: error: invalid redeclaration of\
    \ 'last_note_duration_type_index'\n    var last_note_duration_type_index = 0\n\
    \        ^\n/tmp/tmpxdglnjhs.swift:19:9: note: 'last_note_duration_type_index'\
    \ previously declared here\n    var last_note_duration_type_index = 0\n      \
    \  ^\n/tmp/tmpxdglnjhs.swift:29:9: error: invalid redeclaration of 'last_note_duration_type_name_index'\n\
    \    var last_note_duration_type_name_index = 0\n        ^\n/tmp/tmpxdglnjhs.swift:21:9:\
    \ note: 'last_note_duration_type_name_index' previously declared here\n    var\
    \ last_note_duration_type_name_index = 0\n        ^\n/tmp/tmpxdglnjhs.swift:30:9:\
    \ error: invalid redeclaration of 'last_note_duration_type_name_index'\n    var\
    \ last_note_duration_type_name_index = 0\n        ^\n/tmp/tmpxdglnjhs.swift:21:9:\
    \ note: 'last_note_duration_type_name_index' previously declared here\n    var\
    \ last_note_duration_type_name_index = 0\n        ^\n/tmp/tmpxdglnjhs.swift:31:9:\
    \ error: invalid redeclaration of 'last_note_duration_index'\n    var last_note_duration_index\
    \ = 0\n        ^\n/tmp/tmpxdglnjhs.swift:17:9: note: 'last_note_duration_index'\
    \ previously declared here\n    var last_note_duration_index = 0\n        ^\n\
    /tmp/tmpxdglnjhs.swift:32:9: error: invalid redeclaration of 'last_note_duration_name_index'\n\
    \    var last_note_duration_name_index = 0\n        ^\n/tmp/tmpxdglnjhs.swift:27:9:\
    \ note: 'last_note_duration_name_index' previously declared here\n    var last_note_duration_name_index\
    \ = 0\n        ^\n/tmp/tmpxdglnjhs.swift:33:9: error: invalid redeclaration of\
    \ 'last_note_duration_type_index'\n    var last_note_duration_type_index = 0\n\
    \        ^\n/tmp/tmpxdglnjhs.swift:19:9: note: 'last_note_duration_type_index'\
    \ previously declared here\n    va"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last = 0\n    for c in music_string\
    \ {\n        if c == 'o' {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n            last = 0\n       \
    \ } else if c == 'o|' {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n            last = 1\n       \
    \ } else if c == '.|' {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n            last = 2\n       \
    \ } else {\n            note += String(c)\n        }\n    }\n    beats.append(beat)\n\
    \    notes.append(note)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpej12k1ct.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpej12k1ct.swift:22:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o|' {\n                       ^~~~\n              \
    \         \"o|\"\n/tmp/tmpej12k1ct.swift:28:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.|' {\n                       ^~~~\n\
    \                       \".|\"\n/tmp/tmpej12k1ct.swift:22:21: error: binary operator\
    \ '==' cannot be applied to operands of type 'Character' and 'String'\n      \
    \  } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmpej12k1ct.swift:22:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n/tmp/tmpej12k1ct.swift:28:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n        } else\
    \ if c == '.|' {\n                  ~ ^  ~~~~\n/tmp/tmpej12k1ct.swift:28:21: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        } else if c == '.|' {\n              \
    \      ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var notes: [String] = []\n\
    \    var beats_counter: Int = 0\n    var note_counter: Int = 0\n    var note_string:\
    \ String = \"\"\n    var last_note_string: String = \"\"\n    var last_beat: Int\
    \ = 0\n    var last_beat_string: String = \"\"\n    var last_beat_string_count:\
    \ Int = 0\n    var last_beat_string_count2: Int = 0\n    var last_beat_string_count3:\
    \ Int = 0\n    var last_beat_string_count4: Int = 0\n    var last_beat_string_count5:\
    \ Int = 0\n    var last_beat_string_count6: Int = 0\n    var last_beat_string_count7:\
    \ Int = 0\n    var last_beat_string_count8: Int = 0\n    var last_beat_string_count9:\
    \ Int = 0\n    var last_beat_string_count10: Int = 0\n    var last_beat_string_count11:\
    \ Int = 0\n    var last_beat_string_count12: Int = 0\n    var last_beat_string_count13:\
    \ Int = 0\n    var last_beat_string_count14: Int = 0\n    var last_beat_string_count15:\
    \ Int = 0\n    var last_beat_string_count16: Int = 0\n    var last_beat_string_count17:\
    \ Int = 0\n    var last_beat_string_count18: Int = 0\n    var last_beat_string_count19:\
    \ Int = 0\n    var last_beat_string_count20: Int = 0\n    var last_beat_string_count21:\
    \ Int = 0\n    var last_beat_string_count22: Int = 0\n    var last_beat_string_count23:\
    \ Int = 0\n    var last_beat_string_count24: Int = 0\n    var last_beat_string_count25:\
    \ Int = 0\n    var last_beat_string_count26: Int = 0\n    var last_beat_string_count27:\
    \ Int = 0\n    var last_beat_string_count28: Int = 0\n    var last_beat_string_count29:\
    \ Int = 0\n    var last_beat_string_count30: Int = 0\n    var last_beat_string_count31:\
    \ Int = 0\n    var last_beat_string_count32: Int = 0\n    var last_beat_string_count33:\
    \ Int = 0\n    var last_beat_string_count34: Int = 0\n    var last_beat_string_count35:\
    \ Int = 0\n    var last_beat_string_count36: Int = 0\n    var last_beat_string_count37:\
    \ Int = 0\n    var last_beat_string_count38: Int = 0\n    var last_beat_string_count39:\
    \ Int = 0\n    var last_beat_string_count40: Int = 0\n    var last_beat_string_count41:\
    \ Int = 0\n    var last_beat_string_count42: Int = 0\n    var last_beat_string_count43:\
    \ Int = 0\n    var last_beat_string_count44: Int = 0\n    var last_beat_string_count45:\
    \ Int = 0\n    var last_beat_string_count46: Int = 0\n    var last_beat\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe84xpc3f.swift:64:9: error: type annotation missing in pattern\n\
    \    var last_beat\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var beats_count = 0\n   \
    \ var note_count = 0\n    var note_char = \"\"\n    var note_char_count = 0\n\
    \    var note_char_index = 0\n    var note_char_index2 = 0\n    var note_char_index3\
    \ = 0\n    var note_char_index4 = 0\n    var note_char_index5 = 0\n    var note_char_index6\
    \ = 0\n    var note_char_index7 = 0\n    var note_char_index8 = 0\n    var note_char_index9\
    \ = 0\n    var note_char_index10 = 0\n    var note_char_index11 = 0\n    var note_char_index12\
    \ = 0\n    var note_char_index13 = 0\n    var note_char_index14 = 0\n    var note_char_index15\
    \ = 0\n    var note_char_index16 = 0\n    var note_char_index17 = 0\n    var note_char_index18\
    \ = 0\n    var note_char_index19 = 0\n    var note_char_index20 = 0\n    var note_char_index21\
    \ = 0\n    var note_char_index22 = 0\n    var note_char_index23 = 0\n    var note_char_index24\
    \ = 0\n    var note_char_index25 = 0\n    var note_char_index26 = 0\n    var note_char_index27\
    \ = 0\n    var note_char_index28 = 0\n    var note_char_index29 = 0\n    var note_char_index30\
    \ = 0\n    var note_char_index31 = 0\n    var note_char_index32 = 0\n    var note_char_index33\
    \ = 0\n    var note_char_index34 = 0\n    var note_char_index35 = 0\n    var note_char_index36\
    \ = 0\n    var note_char_index37 = 0\n    var note_char_index38 = 0\n    var note_char_index39\
    \ = 0\n    var note_char_index40 = 0\n    var note_char_index41 = 0\n    var note_char_index42\
    \ = 0\n    var note_char_index43 = 0\n    var note_char_index44 = 0\n    var note_char_index45\
    \ = 0\n    var note_char_index46 = 0\n    var note_char_index47 = 0\n    var note_char_index48\
    \ = 0\n    var note_char_index49 = 0\n    var note_char_index50 = 0\n    var note_char_index51\
    \ = 0\n    var note_char_index52 = 0\n    var note_char_index53 = 0\n    var note_char_index54\
    \ = 0\n    var note_char_index55 = 0\n    var note_char_index56 = 0\n    var note_char_index57\
    \ = 0\n    var note_char_index58 = 0\n    var note_char_index59 = 0\n    var note_char_index60\
    \ = 0\n    var note_char_index61 = 0\n    var note_char_index62 = 0\n    var note_char_index63\
    \ = 0\n    var note_char_index64 = 0\n    var note_char_index65 = 0\n    var note_char_index66\
    \ = 0\n    var note_char_index67 = 0\n    var note_char_index68 = 0\n    var note_char_index69\
    \ = 0\n    var note_char\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4dcuhrqu.swift:84:9: error: type annotation missing in pattern\n\
    \    var note_char\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var notes_count = 0\n    var note = \"\"\n    var\
    \ note_index = 0\n    var note_length = 0\n    var note_length_index = 0\n   \
    \ var note_length_string = \"\"\n    var note_length_string_length = 0\n    var\
    \ note_length_string_index = 0\n    var note_length_string_length = 0\n    var\
    \ note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var note_length_string_length_index\
    \ = 0\n    var note_length_string_length_index = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3926ianl.swift:77:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp3926ianl.swift:21:9: error: invalid redeclaration of 'note_length_string_length'\n\
    \    var note_length_string_length = 0\n        ^\n/tmp/tmp3926ianl.swift:19:9:\
    \ note: 'note_length_string_length' previously declared here\n    var note_length_string_length\
    \ = 0\n        ^\n/tmp/tmp3926ianl.swift:23:9: error: invalid redeclaration of\
    \ 'note_length_string_length_index'\n    var note_length_string_length_index =\
    \ 0\n        ^\n/tmp/tmp3926ianl.swift:22:9: note: 'note_length_string_length_index'\
    \ previously declared here\n    var note_length_string_length_index = 0\n    \
    \    ^\n/tmp/tmp3926ianl.swift:24:9: error: invalid redeclaration of 'note_length_string_length_index'\n\
    \    var note_length_string_length_index = 0\n        ^\n/tmp/tmp3926ianl.swift:22:9:\
    \ note: 'note_length_string_length_index' previously declared here\n    var note_length_string_length_index\
    \ = 0\n        ^\n/tmp/tmp3926ianl.swift:25:9: error: invalid redeclaration of\
    \ 'note_length_string_length_index'\n    var note_length_string_length_index =\
    \ 0\n        ^\n/tmp/tmp3926ianl.swift:22:9: note: 'note_length_string_length_index'\
    \ previously declared here\n    var note_length_string_length_index = 0\n    \
    \    ^\n/tmp/tmp3926ianl.swift:26:9: error: invalid redeclaration of 'note_length_string_length_index'\n\
    \    var note_length_string_length_index = 0\n        ^\n/tmp/tmp3926ianl.swift:22:9:\
    \ note: 'note_length_string_length_index' previously declared here\n    var note_length_string_length_index\
    \ = 0\n        ^\n/tmp/tmp3926ianl.swift:27:9: error: invalid redeclaration of\
    \ 'note_length_string_length_index'\n    var note_length_string_length_index =\
    \ 0\n        ^\n/tmp/tmp3926ianl.swift:22:9: note: 'note_length_string_length_index'\
    \ previously declared here\n    var note_length_string_length_index = 0\n    \
    \    ^\n/tmp/tmp3926ianl.swift:28:9: error: invalid redeclaration of 'note_length_string_length_index'\n\
    \    var note_length_string_length_index = 0\n        ^\n/tmp/tmp3926ianl.swift:22:9:\
    \ note: 'note_length_string_length_index' p"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var beats_count = 0\n   \
    \ var last_beat = 0\n    var last_note = 0\n    var last_note_beat = 0\n    var\
    \ last_note_beat_count = 0\n    var last_note_note_beat = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n    var last_note_note_beat_count = 0\n    var last_note_note_beat_count\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_zp9bern.swift:18:9: error: invalid redeclaration of 'last_note_note_beat_count'\n\
    \    var last_note_note_beat_count = 0\n        ^\n/tmp/tmp_zp9bern.swift:17:9:\
    \ note: 'last_note_note_beat_count' previously declared here\n    var last_note_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp_zp9bern.swift:19:9: error: invalid redeclaration of\
    \ 'last_note_note_beat_count'\n    var last_note_note_beat_count = 0\n       \
    \ ^\n/tmp/tmp_zp9bern.swift:17:9: note: 'last_note_note_beat_count' previously\
    \ declared here\n    var last_note_note_beat_count = 0\n        ^\n/tmp/tmp_zp9bern.swift:20:9:\
    \ error: invalid redeclaration of 'last_note_note_beat_count'\n    var last_note_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp_zp9bern.swift:17:9: note: 'last_note_note_beat_count'\
    \ previously declared here\n    var last_note_note_beat_count = 0\n        ^\n\
    /tmp/tmp_zp9bern.swift:21:9: error: invalid redeclaration of 'last_note_note_beat_count'\n\
    \    var last_note_note_beat_count = 0\n        ^\n/tmp/tmp_zp9bern.swift:17:9:\
    \ note: 'last_note_note_beat_count' previously declared here\n    var last_note_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp_zp9bern.swift:22:9: error: invalid redeclaration of\
    \ 'last_note_note_beat_count'\n    var last_note_note_beat_count = 0\n       \
    \ ^\n/tmp/tmp_zp9bern.swift:17:9: note: 'last_note_note_beat_count' previously\
    \ declared here\n    var last_note_note_beat_count = 0\n        ^\n/tmp/tmp_zp9bern.swift:23:9:\
    \ error: invalid redeclaration of 'last_note_note_beat_count'\n    var last_note_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp_zp9bern.swift:17:9: note: 'last_note_note_beat_count'\
    \ previously declared here\n    var last_note_note_beat_count = 0\n        ^\n\
    /tmp/tmp_zp9bern.swift:24:9: error: invalid redeclaration of 'last_note_note_beat_count'\n\
    \    var last_note_note_beat_count = 0\n        ^\n/tmp/tmp_zp9bern.swift:17:9:\
    \ note: 'last_note_note_beat_count' previously declared here\n    var last_note_note_beat_count\
    \ = 0\n        ^\n/tmp/tmp_zp9bern.swift:25:9: error: invalid redeclaration of\
    \ 'last_note_note_beat_count'\n    var last_note_note_beat_count = 0\n       \
    \ ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var notes: [String] = []\n\
    \    var current_note = \"\"\n    var current_beat = 0\n    var current_octave\
    \ = 0\n    var current_duration = 0\n    var current_duration_in_beats = 0\n \
    \   var current_duration_in_octave = 0\n    var current_duration_in_notes = 0\n\
    \    var current_duration_in_notes_in_beats = 0\n    var current_duration_in_notes_in_octave\
    \ = 0\n    var current_duration_in_notes_in_notes = 0\n    var current_duration_in_notes_in_notes_in_beats\
    \ = 0\n    var current_duration_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_notes\
    \ = 0\n    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n    var\
    \ current_duration_in_notes_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n    var\
    \ current_duration_in_notes_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n    var\
    \ current_duration_in_notes_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n    var\
    \ current_duration_in_notes_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n    var\
    \ current_duration_in_notes_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n    var\
    \ current_duration_in_notes_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n    var\
    \ current_duration_in_notes_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n    var\
    \ current_duration_in_notes_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n    var\
    \ current_duration_in_notes_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n    var\
    \ current_duration_in_notes_in_notes_in_notes_in_octave = 0\n    var current_duration_in_notes_in_notes_in_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpu3c7i939.swift:28:9: error: invalid redeclaration of 'current_duration_in_notes_in_notes_in_notes_in_beats'\n\
    \    var current_duration_in_notes_in_notes_in_notes_in_beats = 0\n        ^\n\
    /tmp/tmpu3c7i939.swift:25:9: note: 'current_duration_in_notes_in_notes_in_notes_in_beats'\
    \ previously declared here\n    var current_duration_in_notes_in_notes_in_notes_in_beats\
    \ = 0\n        ^\n/tmp/tmpu3c7i939.swift:29:9: error: invalid redeclaration of\
    \ 'current_duration_in_notes_in_notes_in_notes_in_octave'\n    var current_duration_in_notes_in_notes_in_notes_in_octave\
    \ = 0\n        ^\n/tmp/tmpu3c7i939.swift:26:9: note: 'current_duration_in_notes_in_notes_in_notes_in_octave'\
    \ previously declared here\n    var current_duration_in_notes_in_notes_in_notes_in_octave\
    \ = 0\n        ^\n/tmp/tmpu3c7i939.swift:30:9: error: invalid redeclaration of\
    \ 'current_duration_in_notes_in_notes_in_notes_in_notes'\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n        ^\n/tmp/tmpu3c7i939.swift:27:9: note: 'current_duration_in_notes_in_notes_in_notes_in_notes'\
    \ previously declared here\n    var current_duration_in_notes_in_notes_in_notes_in_notes\
    \ = 0\n        ^\n/tmp/tmpu3c7i939.swift:31:9: error: invalid redeclaration of\
    \ 'current_duration_in_notes_in_notes_in_notes_in_beats'\n    var current_duration_in_notes_in_notes_in_notes_in_beats\
    \ = 0\n        ^\n/tmp/tmpu3c7i939.swift:25:9: note: 'current_duration_in_notes_in_notes_in_notes_in_beats'\
    \ previously declared here\n    var current_duration_in_notes_in_notes_in_notes_in_beats\
    \ = 0\n        ^\n/tmp/tmpu3c7i939.swift:32:9: error: invalid redeclaration of\
    \ 'current_duration_in_notes_in_notes_in_notes_in_octave'\n    var current_duration_in_notes_in_notes_in_notes_in_octave\
    \ = 0\n        ^\n/tmp/tmpu3c7i939.swift:26:9: note: 'current_duration_in_notes_in_notes_in_notes_in_octave'\
    \ previously declared here\n    var current_duration_in_notes_in_notes_in_notes_in_octave\
    \ = 0\n        ^\n/tmp/tmpu3c7i939.swift:33:9: error: invalid redeclaration of\
    \ 'current_duration_in_notes_in_notes_in_notes_in_notes'\n    var current_dur"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppy_bwuyg.swift:64:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmppy_bwuyg.swift:22:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note == \"o\" {\n         \
    \   beats.append(4)\n        } else if note == \"o|\" {\n            beats.append(2)\n\
    \        } else if note == \".|\" {\n            beats.append(1)\n        } else\
    \ {\n            fatalError(\"Unexpected note format\")\n        }\n    }\n  \
    \  return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpekkct7gh.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpekkct7gh.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var note_index = 0\n    var note_length\
    \ = 0\n    var note_length_index = 0\n    var note_length_index2 = 0\n    var\
    \ note_length_index3 = 0\n    var note_length_index4 = 0\n    var note_length_index5\
    \ = 0\n    var note_length_index6 = 0\n    var note_length_index7 = 0\n    var\
    \ note_length_index8 = 0\n    var note_length_index9 = 0\n    var note_length_index10\
    \ = 0\n    var note_length_index11 = 0\n    var note_length_index12 = 0\n    var\
    \ note_length_index13 = 0\n    var note_length_index14 = 0\n    var note_length_index15\
    \ = 0\n    var note_length_index16 = 0\n    var note_length_index17 = 0\n    var\
    \ note_length_index18 = 0\n    var note_length_index19 = 0\n    var note_length_index20\
    \ = 0\n    var note_length_index21 = 0\n    var note_length_index22 = 0\n    var\
    \ note_length_index23 = 0\n    var note_length_index24 = 0\n    var note_length_index25\
    \ = 0\n    var note_length_index26 = 0\n    var note_length_index27 = 0\n    var\
    \ note_length_index28 = 0\n    var note_length_index29 = 0\n    var note_length_index30\
    \ = 0\n    var note_length_index31 = 0\n    var note_length_index32 = 0\n    var\
    \ note_length_index33 = 0\n    var note_length_index34 = 0\n    var note_length_index35\
    \ = 0\n    var note_length_index36 = 0\n    var note_length_index37 = 0\n    var\
    \ note_length_index38 = 0\n    var note_length_index39 = 0\n    var note_length_index40\
    \ = 0\n    var note_length_index41 = 0\n    var note_length_index42 = 0\n    var\
    \ note_length_index43 = 0\n    var note_length_index44 = 0\n    var note_length_index45\
    \ = 0\n    var note_length_index46 = 0\n    var note_length_index47 = 0\n    var\
    \ note_length_index48 = 0\n    var note_length_index49 = 0\n    var note_length_index50\
    \ = 0\n    var note_length_index51 = 0\n    var note_length_index52 = 0\n    var\
    \ note_length_index53 = 0\n    var note_length_index54 = 0\n    var note_length_index55\
    \ = 0\n    var note_length_index56 = 0\n    var note_length_index57 = 0\n    var\
    \ note_length_index58 = 0\n    var note_length_index59 = 0\n    var note_length_index60\
    \ = 0\n    var note_length_index61 = 0\n    var note_length_index62 = 0\n    var\
    \ note_length_index63 = 0\n    var note_length_index64 = 0\n    var note_length_index65\
    \ = 0\n    var note_length_index66 = 0\n    var note_length_index67 = 0\n    var\
    \ note_length_index68 = 0\n    var note_length_index69\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3frfsovi.swift:84:9: error: type annotation missing in pattern\n\
    \    var note_length_index69\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_octave = 0\n    var current_duration\
    \ = 0\n    var current_duration_index = 0\n    var current_duration_octave = 0\n\
    \    var current_duration_note = String()\n    var current_duration_duration =\
    \ 0\n    var current_duration_duration_index = 0\n    var current_duration_duration_octave\
    \ = 0\n    var current_duration_duration_note = String()\n    var current_duration_duration_duration\
    \ = 0\n    var current_duration_duration_duration_index = 0\n    var current_duration_duration_duration_octave\
    \ = 0\n    var current_duration_duration_duration_note = String()\n    var current_duration_duration_duration_duration\
    \ = 0\n    var current_duration_duration_duration_duration_index = 0\n    var\
    \ current_duration_duration_duration_duration_octave = 0\n    var current_duration_duration_duration_duration_note\
    \ = String()\n    var current_duration_duration_duration_duration_duration = 0\n\
    \    var current_duration_duration_duration_duration_duration_index = 0\n    var\
    \ current_duration_duration_duration_duration_duration_octave = 0\n    var current_duration_duration_duration_duration_duration_note\
    \ = String()\n    var current_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_note\
    \ = String()\n    var current_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_note\
    \ = String()\n    var current_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_note\
    \ = String()\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_note\
    \ = String()\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_duration_note\
    \ = String()\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_duration_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpddkpaxsw.swift:39:9: error: invalid redeclaration of 'current_duration_duration_duration_duration_duration_duration_index'\n\
    \    var current_duration_duration_duration_duration_duration_duration_index =\
    \ 0\n        ^\n/tmp/tmpddkpaxsw.swift:35:9: note: 'current_duration_duration_duration_duration_duration_duration_index'\
    \ previously declared here\n    var current_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmpddkpaxsw.swift:47:9: error: invalid redeclaration of\
    \ 'current_duration_duration_duration_duration_duration_duration_duration_duration_index'\n\
    \    var current_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmpddkpaxsw.swift:43:9: note: 'current_duration_duration_duration_duration_duration_duration_duration_duration_index'\
    \ previously declared here\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmpddkpaxsw.swift:48:9: error: invalid redeclaration of\
    \ 'current_duration_duration_duration_duration_duration_duration_duration_duration_octave'\n\
    \    var current_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n        ^\n/tmp/tmpddkpaxsw.swift:44:9: note: 'current_duration_duration_duration_duration_duration_duration_duration_duration_octave'\
    \ previously declared here\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n        ^\n/tmp/tmpddkpaxsw.swift:49:9: error: invalid redeclaration of\
    \ 'current_duration_duration_duration_duration_duration_duration_duration_duration_note'\n\
    \    var current_duration_duration_duration_duration_duration_duration_duration_duration_note\
    \ = String()\n        ^\n/tmp/tmpddkpaxsw.swift:45:9: note: 'current_duration_duration_duration_duration_duration_duration_duration_duration_note'\
    \ previously declared here\n    var current_duration_duration_duration_duration_duration_duration_duration_duration_note\
    \ = String()\n        ^\n/tmp/tmpddkpaxsw.swift:50:9: error: invalid redeclarat"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last = 0\n    var last_beat = 0\n \
    \   var last_note = 0\n    var last_last_beat = 0\n    var last_last_note = 0\n\
    \    var last_last_last_beat = 0\n    var last_last_last_note = 0\n    var last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_note = 0\n    var last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_beat = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_beat = 0\n  \
    \  var last_last_last_last_last_last_last_last_last_last_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpq1wymixf.swift:29:9: error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpq1wymixf.swift:27:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpq1wymixf.swift:30:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpq1wymixf.swift:28:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpq1wymixf.swift:31:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpq1wymixf.swift:27:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpq1wymixf.swift:32:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpq1wymixf.swift:28:9:\
    \ note: 'last_last_last_last_last_last_last_note' previously declared here\n \
    \   var last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpq1wymixf.swift:35:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpq1wymixf.swift:33:9:\
    \ note: 'last_last_last_last_last_last_last_last_beat' previously declared here\n\
    \    var last_last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpq1wymixf.swift:36:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpq1wymixf.swift:34:9:\
    \ note: 'last_last_last_last_last_last_last_last_note' previously declared here\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpq1wymixf.swift:37:9:\
    \ error"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_value = 0\n    var current_note_octave\
    \ = 0\n    var current_note_duration = 0\n    var current_note_duration_value\
    \ = 0\n    var current_note_duration_type = 0\n    var current_note_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration = 0\n    var current_note_duration_type_duration_value\
    \ = 0\n    var current_note_duration_type_duration_type = 0\n    var current_note_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration = 0\n    var\
    \ current_note_duration_type_duration_type_duration_value = 0\n    var current_note_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_octave =\
    \ 0\n    var current_note_duration_type_duration_type_duration_type_duration =\
    \ 0\n    var current_note_duration_type_duration_type_duration_type_duration =\
    \ 0\n    var current_note_duration_type_duration_type_duration_type_duration =\
    \ 0\n    var current_note_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_octave\
    \ = 0\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgn406zbp.swift:49:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpgn406zbp.swift:28:9: error: invalid redeclaration of 'current_note_duration_type_duration_type_duration_type_duration'\n\
    \    var current_note_duration_type_duration_type_duration_type_duration = 0\n\
    \        ^\n/tmp/tmpgn406zbp.swift:27:9: note: 'current_note_duration_type_duration_type_duration_type_duration'\
    \ previously declared here\n    var current_note_duration_type_duration_type_duration_type_duration\
    \ = 0\n        ^\n/tmp/tmpgn406zbp.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_duration_type_duration_type_duration_type_duration'\n    var current_note_duration_type_duration_type_duration_type_duration\
    \ = 0\n        ^\n/tmp/tmpgn406zbp.swift:27:9: note: 'current_note_duration_type_duration_type_duration_type_duration'\
    \ previously declared here\n    var current_note_duration_type_duration_type_duration_type_duration\
    \ = 0\n        ^\n/tmp/tmpgn406zbp.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_duration_type_duration_type_duration_type_duration_type_duration'\n\
    \    var current_note_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n        ^\n/tmp/tmpgn406zbp.swift:32:9: note: 'current_note_duration_type_duration_type_duration_type_duration_type_duration'\
    \ previously declared here\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n        ^\n/tmp/tmpgn406zbp.swift:37:9: error: invalid redeclaration of\
    \ 'current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration'\n\
    \    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n        ^\n/tmp/tmpgn406zbp.swift:36:9: note: 'current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration'\
    \ previously declared here\n    var current_note_duration_type_duration_type_duration_type_duration_type_duration_type_duration\
    \ = 0\n        ^\n/tmp/tmpgn406zbp.swift:41:9: error: invalid redeclaration of\
    \ 'current_note_duration_type_duration_type_durati"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpq8m04hc3.swift:12:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq8m04hc3.swift:74:9:\
    \ error: type annotation missing in pattern\n    var current_note_length_index61\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = music_string[0]\n    var current_note_length = 0\n   \
    \ var current_note_length_index = 0\n    var current_note_length_index2 = 0\n\
    \    var current_note_length_index3 = 0\n    var current_note_length_index4 =\
    \ 0\n    var current_note_length_index5 = 0\n    var current_note_length_index6\
    \ = 0\n    var current_note_length_index7 = 0\n    var current_note_length_index8\
    \ = 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n    var current_note_length_index60\
    \ = 0\n    var current_note_length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3j4d6gu7.swift:12:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp3j4d6gu7.swift:74:9:\
    \ error: type annotation missing in pattern\n    var current_note_length\n   \
    \     ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ note = String()\n    var last_note = String()\n    var last_beat = 0\n    var\
    \ last_beat_count = 0\n    var last_beat_note = String()\n    var last_beat_note_count\
    \ = 0\n    var last_beat_note_index = -1\n    var last_beat_note_index2 = -1\n\
    \    var last_beat_note_index3 = -1\n    var last_beat_note_index4 = -1\n    var\
    \ last_beat_note_index5 = -1\n    var last_beat_note_index6 = -1\n    var last_beat_note_index7\
    \ = -1\n    var last_beat_note_index8 = -1\n    var last_beat_note_index9 = -1\n\
    \    var last_beat_note_index10 = -1\n    var last_beat_note_index11 = -1\n  \
    \  var last_beat_note_index12 = -1\n    var last_beat_note_index13 = -1\n    var\
    \ last_beat_note_index14 = -1\n    var last_beat_note_index15 = -1\n    var last_beat_note_index16\
    \ = -1\n    var last_beat_note_index17 = -1\n    var last_beat_note_index18 =\
    \ -1\n    var last_beat_note_index19 = -1\n    var last_beat_note_index20 = -1\n\
    \    var last_beat_note_index21 = -1\n    var last_beat_note_index22 = -1\n  \
    \  var last_beat_note_index23 = -1\n    var last_beat_note_index24 = -1\n    var\
    \ last_beat_note_index25 = -1\n    var last_beat_note_index26 = -1\n    var last_beat_note_index27\
    \ = -1\n    var last_beat_note_index28 = -1\n    var last_beat_note_index29 =\
    \ -1\n    var last_beat_note_index30 = -1\n    var last_beat_note_index31 = -1\n\
    \    var last_beat_note_index32 = -1\n    var last_beat_note_index33 = -1\n  \
    \  var last_beat_note_index34 = -1\n    var last_beat_note_index35 = -1\n    var\
    \ last_beat_note_index36 = -1\n    var last_beat_note_index37 = -1\n    var last_beat_note_index38\
    \ = -1\n    var last_beat_note_index39 = -1\n    var last_beat_note_index40 =\
    \ -1\n    var last_beat_note_index41 = -1\n    var last_beat_note_index42 = -1\n\
    \    var last_beat_note_index43 = -1\n    var last_beat_note_index44 = -1\n  \
    \  var last_beat_note_index45 = -1\n    var last_beat_note_index46 = -1\n    var\
    \ last_beat_note_index47 = -1\n    var last_beat_note_index48 = -1\n    var last_beat_note_index49\
    \ = -1\n    var last_beat_note_index50 = -1\n    var last_beat_\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9koym5_v.swift:68:9: error: type annotation missing in pattern\n\
    \    var last_beat_\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var note = music_string[0]\n\
    \    var beat = 0\n    var last_beat = 0\n    var last_note = note\n    for c\
    \ in music_string {\n        if c == '|' {\n            beats.append(beat)\n \
    \           beat = 0\n            last_beat = beat\n            last_note = note\n\
    \        } else if c == 'o' {\n            beats.append(beat)\n            beat\
    \ = 0\n            last_beat = beat\n            last_note = note\n        } else\
    \ {\n            beat += Int(c)\n        }\n    }\n    beats.append(beat)\n  \
    \  return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp966_0ppj.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '|' {\n                ^~~\n                \"|\"\n\
    /tmp/tmp966_0ppj.swift:21:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmp966_0ppj.swift:11:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    var note\
    \ = music_string[0]\n               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmp966_0ppj.swift:27:21: error:\
    \ no exact matches in call to initializer \n            beat += Int(c)\n     \
    \               ^\nSwift.Int:7:12: note: candidate expects value of type 'Float16'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Float16)\n   \
    \        ^\nSwift.Int:10:12: note: candidate expects value of type 'Float' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float)\n         \
    \  ^\nSwift.Int:12:12: note: candidate expects value of type 'Double' for parameter\
    \ #1 (got 'Character')\n    public init(_ source: Double)\n           ^\nSwift.Int:14:12:\
    \ note: candidate expects value of type 'Float80' for parameter #1 (got 'Character')\n\
    \    public init(_ source: Float80)\n           ^\nSwift.Int:28:12: note: candidate\
    \ expects value of type 'Builtin.Int64' for parameter #1 (got 'Character')\n \
    \   public init(_ _value: Builtin.Int64)\n           ^\nSwift.Int:61:12: note:\
    \ candidate expects value of type 'Builtin.Word' for parameter #1 (got 'Character')\n\
    \    public init(_ _v: Builtin.Word)\n           ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var notes: [String] = []\n\
    \    var current_note = \"\"\n    var current_beat = 0\n    var current_beats_count\
    \ = 0\n    var current_note_count = 0\n    var current_note_length = 0\n    var\
    \ current_note_length_count = 0\n    var current_note_length_index = 0\n    var\
    \ current_note_length_index2 = 0\n    var current_note_length_index3 = 0\n   \
    \ var current_note_length_index4 = 0\n    var current_note_length_index5 = 0\n\
    \    var current_note_length_index6 = 0\n    var current_note_length_index7 =\
    \ 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzw7uyayn.swift:76:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last_note = \"\"\n    var last_beat\
    \ = 0\n    var last_beat_note = \"\"\n    var last_beat_note_index = 0\n    var\
    \ last_beat_note_index2 = 0\n    var last_beat_note_index3 = 0\n    var last_beat_note_index4\
    \ = 0\n    var last_beat_note_index5 = 0\n    var last_beat_note_index6 = 0\n\
    \    var last_beat_note_index7 = 0\n    var last_beat_note_index8 = 0\n    var\
    \ last_beat_note_index9 = 0\n    var last_beat_note_index10 = 0\n    var last_beat_note_index11\
    \ = 0\n    var last_beat_note_index12 = 0\n    var last_beat_note_index13 = 0\n\
    \    var last_beat_note_index14 = 0\n    var last_beat_note_index15 = 0\n    var\
    \ last_beat_note_index16 = 0\n    var last_beat_note_index17 = 0\n    var last_beat_note_index18\
    \ = 0\n    var last_beat_note_index19 = 0\n    var last_beat_note_index20 = 0\n\
    \    var last_beat_note_index21 = 0\n    var last_beat_note_index22 = 0\n    var\
    \ last_beat_note_index23 = 0\n    var last_beat_note_index24 = 0\n    var last_beat_note_index25\
    \ = 0\n    var last_beat_note_index26 = 0\n    var last_beat_note_index27 = 0\n\
    \    var last_beat_note_index28 = 0\n    var last_beat_note_index29 = 0\n    var\
    \ last_beat_note_index30 = 0\n    var last_beat_note_index31 = 0\n    var last_beat_note_index32\
    \ = 0\n    var last_beat_note_index33 = 0\n    var last_beat_note_index34 = 0\n\
    \    var last_beat_note_index35 = 0\n    var last_beat_note_index36 = 0\n    var\
    \ last_beat_note_index37 = 0\n    var last_beat_note_index38 = 0\n    var last_beat_note_index39\
    \ = 0\n    var last_beat_note_index40 = 0\n    var last_beat_note_index41 = 0\n\
    \    var last_beat_note_index42 = 0\n    var last_beat_note_index43 = 0\n    var\
    \ last_beat_note_index44 = 0\n    var last_beat_note_index45 = 0\n    var last_beat_note_index46\
    \ = 0\n    var last_beat_note_index47 = 0\n    var last_beat_note_index48 = 0\n\
    \    var last_beat_note_index49 = 0\n    var last_beat_note_index50 = 0\n    var\
    \ last_beat_note_index51 = 0\n    var last_beat_note_index52 = 0\n    var last_beat_note_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmps9tff7b0.swift:69:9: error: type annotation missing in pattern\n\
    \    var last_beat_note_index\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note_number = note.components(separatedBy:\
    \ \"\")[0]\n        let beats_number = note.components(separatedBy: \"|\")[1]\n\
    \        let beats = beats_number.components(separatedBy: \"\")\n        beats.append(beats.count)\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9e4_snxc.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes: [Int] = []\n    var beats = 0\n    var note\
    \ = \"\"\n    for c in music_string {\n        if c == \"o\" {\n            notes.append(beats)\n\
    \            beats = 0\n            note = \"\"\n        } else if c == \"|\"\
    \ {\n            notes.append(beats)\n            beats = 0\n            note\
    \ = \"\"\n        } else if c == \".\" {\n            notes.append(beats)\n  \
    \          beats = 0\n            note = \"\"\n        } else {\n            note\
    \ += c\n        }\n    }\n    notes.append(beats)\n    return notes\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpz1bbx6le.swift:27:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += c\n                \
    \    ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array: [Int] = []\n    var current_beat =\
    \ 0\n    var current_note = 0\n    var current_note_value = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value = 0\n    var\
    \ current_note_length_value_value_value_value_value_value = 0\n    var current_note_length_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkpd2n0hn.swift:24:9: error: invalid redeclaration of 'current_note_length_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpkpd2n0hn.swift:23:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpkpd2n0hn.swift:27:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpkpd2n0hn.swift:26:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpkpd2n0hn.swift:32:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpkpd2n0hn.swift:31:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpkpd2n0hn.swift:36:9: error: invalid redeclaration of\
    \ 'current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpkpd2n0hn.swift:35:9: note: 'current_note_length_value_value_value_value_value_value_value_value_value_value_valu"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var notes_length_index = 0\n    var notes_length_index2\
    \ = 0\n    var notes_length_index3 = 0\n    var notes_length_index4 = 0\n    var\
    \ notes_length_index5 = 0\n    var notes_length_index6 = 0\n    var notes_length_index7\
    \ = 0\n    var notes_length_index8 = 0\n    var notes_length_index9 = 0\n    var\
    \ notes_length_index10 = 0\n    var notes_length_index11 = 0\n    var notes_length_index12\
    \ = 0\n    var notes_length_index13 = 0\n    var notes_length_index14 = 0\n  \
    \  var notes_length_index15 = 0\n    var notes_length_index16 = 0\n    var notes_length_index17\
    \ = 0\n    var notes_length_index18 = 0\n    var notes_length_index19 = 0\n  \
    \  var notes_length_index20 = 0\n    var notes_length_index21 = 0\n    var notes_length_index22\
    \ = 0\n    var notes_length_index23 = 0\n    var notes_length_index24 = 0\n  \
    \  var notes_length_index25 = 0\n    var notes_length_index26 = 0\n    var notes_length_index27\
    \ = 0\n    var notes_length_index28 = 0\n    var notes_length_index29 = 0\n  \
    \  var notes_length_index30 = 0\n    var notes_length_index31 = 0\n    var notes_length_index32\
    \ = 0\n    var notes_length_index33 = 0\n    var notes_length_index34 = 0\n  \
    \  var notes_length_index35 = 0\n    var notes_length_index36 = 0\n    var notes_length_index37\
    \ = 0\n    var notes_length_index38 = 0\n    var notes_length_index39 = 0\n  \
    \  var notes_length_index40 = 0\n    var notes_length_index41 = 0\n    var notes_length_index42\
    \ = 0\n    var notes_length_index43 = 0\n    var notes_length_index44 = 0\n  \
    \  var notes_length_index45 = 0\n    var notes_length_index46 = 0\n    var notes_length_index47\
    \ = 0\n    var notes_length_index48 = 0\n    var notes_length_index49 = 0\n  \
    \  var notes_length_index50 = 0\n    var notes_length_index51 = 0\n    var notes_length_index52\
    \ = 0\n    var notes_length_index53 = 0\n    var notes_length_index54 = 0\n  \
    \  var notes_length_index55 = 0\n    var notes_length_index56 = 0\n    var notes_length_index57\
    \ = 0\n    var notes_length_index58 = 0\n    var notes_length_index59 = 0\n  \
    \  var notes_length_index60 = 0\n    var notes_length_index61 = 0\n    var notes_length_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4g2byb47.swift:74:9: error: type annotation missing in pattern\n\
    \    var notes_length_index\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var beats_counter: Int =\
    \ 0\n    var notes_counter: Int = 0\n    var notes_string: String = \"\"\n   \
    \ var notes_length: Int = 0\n    var notes_length_string: String = music_string\n\
    \    var notes_length_string_index: Int = 0\n    var notes_length_string_index2:\
    \ Int = 0\n    var notes_length_string_index3: Int = 0\n    var notes_length_string_index4:\
    \ Int = 0\n    var notes_length_string_index5: Int = 0\n    var notes_length_string_index6:\
    \ Int = 0\n    var notes_length_string_index7: Int = 0\n    var notes_length_string_index8:\
    \ Int = 0\n    var notes_length_string_index9: Int = 0\n    var notes_length_string_index10:\
    \ Int = 0\n    var notes_length_string_index11: Int = 0\n    var notes_length_string_index12:\
    \ Int = 0\n    var notes_length_string_index13: Int = 0\n    var notes_length_string_index14:\
    \ Int = 0\n    var notes_length_string_index15: Int = 0\n    var notes_length_string_index16:\
    \ Int = 0\n    var notes_length_string_index17: Int = 0\n    var notes_length_string_index18:\
    \ Int = 0\n    var notes_length_string_index19: Int = 0\n    var notes_length_string_index20:\
    \ Int = 0\n    var notes_length_string_index21: Int = 0\n    var notes_length_string_index22:\
    \ Int = 0\n    var notes_length_string_index23: Int = 0\n    var notes_length_string_index24:\
    \ Int = 0\n    var notes_length_string_index25: Int = 0\n    var notes_length_string_index26:\
    \ Int = 0\n    var notes_length_string_index27: Int = 0\n    var notes_length_string_index28:\
    \ Int = 0\n    var notes_length_string_index29: Int = 0\n    var notes_length_string_index30:\
    \ Int = 0\n    var notes_length_string_index31: Int = 0\n    var notes_length_string_index32:\
    \ Int = 0\n    var notes_length_string_index33: Int = 0\n    var notes_length_string_index34:\
    \ Int = 0\n    var notes_length_string_index35: Int = 0\n    var notes_length_string_index36:\
    \ Int = 0\n    var notes_length_string_index37: Int = 0\n    var notes_length_string_index38:\
    \ Int = 0\n    var notes_length_string_index39: Int = 0\n    var notes_length_string_index40:\
    \ Int = 0\n    var notes_length_string_index41: Int = 0\n    var notes_length_string_index42:\
    \ Int = 0\n    var notes_length_string_index43\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphofgbv40.swift:58:9: error: type annotation missing in pattern\n\
    \    var notes_length_string_index43\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_index = 0\n    var note_length\
    \ = 0\n    var last_note = String()\n    var last_beat = 0\n    var last_note_length\
    \ = 0\n    var last_note_length_index = 0\n    var last_note_length_index2 = 0\n\
    \    var last_note_length_index3 = 0\n    var last_note_length_index4 = 0\n  \
    \  var last_note_length_index5 = 0\n    var last_note_length_index6 = 0\n    var\
    \ last_note_length_index7 = 0\n    var last_note_length_index8 = 0\n    var last_note_length_index9\
    \ = 0\n    var last_note_length_index10 = 0\n    var last_note_length_index11\
    \ = 0\n    var last_note_length_index12 = 0\n    var last_note_length_index13\
    \ = 0\n    var last_note_length_index14 = 0\n    var last_note_length_index15\
    \ = 0\n    var last_note_length_index16 = 0\n    var last_note_length_index17\
    \ = 0\n    var last_note_length_index18 = 0\n    var last_note_length_index19\
    \ = 0\n    var last_note_length_index20 = 0\n    var last_note_length_index21\
    \ = 0\n    var last_note_length_index22 = 0\n    var last_note_length_index23\
    \ = 0\n    var last_note_length_index24 = 0\n    var last_note_length_index25\
    \ = 0\n    var last_note_length_index26 = 0\n    var last_note_length_index27\
    \ = 0\n    var last_note_length_index28 = 0\n    var last_note_length_index29\
    \ = 0\n    var last_note_length_index30 = 0\n    var last_note_length_index31\
    \ = 0\n    var last_note_length_index32 = 0\n    var last_note_length_index33\
    \ = 0\n    var last_note_length_index34 = 0\n    var last_note_length_index35\
    \ = 0\n    var last_note_length_index36 = 0\n    var last_note_length_index37\
    \ = 0\n    var last_note_length_index38 = 0\n    var last_note_length_index39\
    \ = 0\n    var last_note_length_index40 = 0\n    var last_note_length_index41\
    \ = 0\n    var last_note_length_index42 = 0\n    var last_note_length_index43\
    \ = 0\n    var last_note_length_index44 = 0\n    var last_note_length_index45\
    \ = 0\n    var last_note_length_index46 = 0\n    var last_note_length_index47\
    \ = 0\n    var last_note_length_index48 = 0\n    var last_note_length_index49\
    \ = 0\n    var last_note_length_index50 = 0\n    var last_note_length_index51\
    \ = 0\n    var last_note_length_index52 = 0\n    var last_note_length_index53\
    \ = 0\n    var last_note_length_index54 = 0\n    var last_note_length_index55\
    \ = 0\n    var last_note_length_index56 = 0\n    var last_note_length_index57\
    \ = 0\n    var last_note_length_index58 = 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmtocrcvx.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpmtocrcvx.swift:11:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpmtocrcvx.swift:12:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpmtocrcvx.swift:13:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmpmtocrcvx.swift:14:9: warning: initialization\
    \ of variable 'note_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpmtocrcvx.swift:15:9:\
    \ warning: initialization of variable 'note_length' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_length = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpmtocrcvx.swift:16:9: warning: initialization of variable 'last_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note = String()\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpmtocrcvx.swift:17:9:\
    \ warning: initialization of variable 'last_beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_beat = 0\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpmtocrcvx.swift:18:9: warning: initialization of variable 'last_note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_note_length = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpmtocrcvx.swift:19:9:\
    \ warning: initialization of variable 'last_note_length_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var last_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpmtocrcvx.swift:20:9: warning:\
    \ initializatio"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var notes_length_count = 0\n    var notes_length_count2\
    \ = 0\n    var notes_length_count3 = 0\n    var notes_length_count4 = 0\n    var\
    \ notes_length_count5 = 0\n    var notes_length_count6 = 0\n    var notes_length_count7\
    \ = 0\n    var notes_length_count8 = 0\n    var notes_length_count9 = 0\n    var\
    \ notes_length_count10 = 0\n    var notes_length_count11 = 0\n    var notes_length_count12\
    \ = 0\n    var notes_length_count13 = 0\n    var notes_length_count14 = 0\n  \
    \  var notes_length_count15 = 0\n    var notes_length_count16 = 0\n    var notes_length_count17\
    \ = 0\n    var notes_length_count18 = 0\n    var notes_length_count19 = 0\n  \
    \  var notes_length_count20 = 0\n    var notes_length_count21 = 0\n    var notes_length_count22\
    \ = 0\n    var notes_length_count23 = 0\n    var notes_length_count24 = 0\n  \
    \  var notes_length_count25 = 0\n    var notes_length_count26 = 0\n    var notes_length_count27\
    \ = 0\n    var notes_length_count28 = 0\n    var notes_length_count29 = 0\n  \
    \  var notes_length_count30 = 0\n    var notes_length_count31 = 0\n    var notes_length_count32\
    \ = 0\n    var notes_length_count33 = 0\n    var notes_length_count34 = 0\n  \
    \  var notes_length_count35 = 0\n    var notes_length_count36 = 0\n    var notes_length_count37\
    \ = 0\n    var notes_length_count38 = 0\n    var notes_length_count39 = 0\n  \
    \  var notes_length_count40 = 0\n    var notes_length_count41 = 0\n    var notes_length_count42\
    \ = 0\n    var notes_length_count43 = 0\n    var notes_length_count44 = 0\n  \
    \  var notes_length_count45 = 0\n    var notes_length_count46 = 0\n    var notes_length_count47\
    \ = 0\n    var notes_length_count48 = 0\n    var notes_length_count49 = 0\n  \
    \  var notes_length_count50 = 0\n    var notes_length_count51 = 0\n    var notes_length_count52\
    \ = 0\n    var notes_length_count53 = 0\n    var notes_length_count54 = 0\n  \
    \  var notes_length_count55 = 0\n    var notes_length_count56 = 0\n    var notes_length_count57\
    \ = 0\n    var notes_length_count58 = 0\n    var notes_length_count59 = 0\n  \
    \  var notes_length_count60 = 0\n    var notes_length_count61 = 0\n    var notes_length_count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpugnivm1x.swift:74:9: error: type annotation missing in pattern\n\
    \    var notes_length_count\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array: [Int] = []\n    var current_beat =\
    \ 0\n    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxsdc_nld.swift:22:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpxsdc_nld.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpxsdc_nld.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpxsdc_nld.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpxsdc_nld.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpxsdc_nld.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpxsdc_nld.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpxsdc_nld.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpxsdc_nld.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpxsdc_nld.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpxsdc_nld.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpxsdc_nld.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var notes: [String] = []\n\
    \    var beats_counter: Int = 0\n    var note_counter: Int = 0\n    var current_note\
    \ = \"\"\n    var current_beat: Int = 0\n    var current_beats_counter: Int =\
    \ 0\n    var current_note_counter: Int = 0\n    var current_note_char: String\
    \ = \" \"\n    var current_note_char_length: Int = 0\n    var current_note_char_length2:\
    \ Int = 0\n    var current_note_char_length3: Int = 0\n    var current_note_char_length4:\
    \ Int = 0\n    var current_note_char_length5: Int = 0\n    var current_note_char_length6:\
    \ Int = 0\n    var current_note_char_length7: Int = 0\n    var current_note_char_length8:\
    \ Int = 0\n    var current_note_char_length9: Int = 0\n    var current_note_char_length10:\
    \ Int = 0\n    var current_note_char_length11: Int = 0\n    var current_note_char_length12:\
    \ Int = 0\n    var current_note_char_length13: Int = 0\n    var current_note_char_length14:\
    \ Int = 0\n    var current_note_char_length15: Int = 0\n    var current_note_char_length16:\
    \ Int = 0\n    var current_note_char_length17: Int = 0\n    var current_note_char_length18:\
    \ Int = 0\n    var current_note_char_length19: Int = 0\n    var current_note_char_length20:\
    \ Int = 0\n    var current_note_char_length21: Int = 0\n    var current_note_char_length22:\
    \ Int = 0\n    var current_note_char_length23: Int = 0\n    var current_note_char_length24:\
    \ Int = 0\n    var current_note_char_length25: Int = 0\n    var current_note_char_length26:\
    \ Int = 0\n    var current_note_char_length27: Int = 0\n    var current_note_char_length28:\
    \ Int = 0\n    var current_note_char_length29: Int = 0\n    var current_note_char_length30:\
    \ Int = 0\n    var current_note_char_length31: Int = 0\n    var current_note_char_length32:\
    \ Int = 0\n    var current_note_char_length33: Int = 0\n    var current_note_char_length34:\
    \ Int = 0\n    var current_note_char_length35: Int = 0\n    var current_note_char_length36:\
    \ Int = 0\n    var current_note_char_length37: Int = 0\n    var current_note_char_length38:\
    \ Int = 0\n    var current_note_char_length39: Int = 0\n    var current_note_char_length40:\
    \ Int = 0\n    var current_note_char_length41: Int = 0\n    var current_note_char_length42:\
    \ Int = 0\n    var current_note_char_length43: Int = 0\n    var current_note_char_length44:\
    \ Int = 0\n    var current_note_char_length45: Int = 0\n    var current_note_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpa7jha_9g.swift:64:9: error: type annotation missing in pattern\n\
    \    var current_note_\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var notes: [String] = []\n\
    \    var beats_str: String = \"\"\n    var notes_str: String = \"\"\n    var beats_str_index\
    \ = 0\n    var notes_str_index = 0\n    var notes_str_index2 = 0\n    var notes_str_index3\
    \ = 0\n    var notes_str_index4 = 0\n    var notes_str_index5 = 0\n    var notes_str_index6\
    \ = 0\n    var notes_str_index7 = 0\n    var notes_str_index8 = 0\n    var notes_str_index9\
    \ = 0\n    var notes_str_index10 = 0\n    var notes_str_index11 = 0\n    var notes_str_index12\
    \ = 0\n    var notes_str_index13 = 0\n    var notes_str_index14 = 0\n    var notes_str_index15\
    \ = 0\n    var notes_str_index16 = 0\n    var notes_str_index17 = 0\n    var notes_str_index18\
    \ = 0\n    var notes_str_index19 = 0\n    var notes_str_index20 = 0\n    var notes_str_index21\
    \ = 0\n    var notes_str_index22 = 0\n    var notes_str_index23 = 0\n    var notes_str_index24\
    \ = 0\n    var notes_str_index25 = 0\n    var notes_str_index26 = 0\n    var notes_str_index27\
    \ = 0\n    var notes_str_index28 = 0\n    var notes_str_index29 = 0\n    var notes_str_index30\
    \ = 0\n    var notes_str_index31 = 0\n    var notes_str_index32 = 0\n    var notes_str_index33\
    \ = 0\n    var notes_str_index34 = 0\n    var notes_str_index35 = 0\n    var notes_str_index36\
    \ = 0\n    var notes_str_index37 = 0\n    var notes_str_index38 = 0\n    var notes_str_index39\
    \ = 0\n    var notes_str_index40 = 0\n    var notes_str_index41 = 0\n    var notes_str_index42\
    \ = 0\n    var notes_str_index43 = 0\n    var notes_str_index44 = 0\n    var notes_str_index45\
    \ = 0\n    var notes_str_index46 = 0\n    var notes_str_index47 = 0\n    var notes_str_index48\
    \ = 0\n    var notes_str_index49 = 0\n    var notes_str_index50 = 0\n    var notes_str_index51\
    \ = 0\n    var notes_str_index52 = 0\n    var notes_str_index53 = 0\n    var notes_str_index54\
    \ = 0\n    var notes_str_index55 = 0\n    var notes_str_index56 = 0\n    var notes_str_index57\
    \ = 0\n    var notes_str_index58 = 0\n    var notes_str_index59 = 0\n    var notes_str_index60\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpd5jk7kwe.swift:10:9: warning: variable 'beats' was never used;\
    \ consider replacing with '_' or removing it\n    var beats: [Int] = []\n    \
    \    ^~~~~\n        _\n/tmp/tmpd5jk7kwe.swift:11:9: warning: variable 'notes'\
    \ was never used; consider replacing with '_' or removing it\n    var notes: [String]\
    \ = []\n        ^~~~~\n        _\n/tmp/tmpd5jk7kwe.swift:12:9: warning: variable\
    \ 'beats_str' was never used; consider replacing with '_' or removing it\n   \
    \ var beats_str: String = \"\"\n        ^~~~~~~~~\n        _\n/tmp/tmpd5jk7kwe.swift:13:9:\
    \ warning: variable 'notes_str' was never used; consider replacing with '_' or\
    \ removing it\n    var notes_str: String = \"\"\n        ^~~~~~~~~\n        _\n\
    /tmp/tmpd5jk7kwe.swift:14:9: warning: initialization of variable 'beats_str_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats_str_index = 0\n    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpd5jk7kwe.swift:15:9:\
    \ warning: initialization of variable 'notes_str_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_str_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpd5jk7kwe.swift:16:9: warning: initialization\
    \ of variable 'notes_str_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_str_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpd5jk7kwe.swift:17:9: warning: initialization of variable 'notes_str_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_str_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpd5jk7kwe.swift:18:9:\
    \ warning: initialization of variable 'notes_str_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_str_index4 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmpd5jk7kwe.swift:19:9: warning: initialization\
    \ of variable 'notes_str_index5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_str_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpd5jk7kwe.swift:20:9: warning: initialization of variable 'n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2dmb5ng_.swift:75:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = String()\n    var last_note = String()\n    var last_beat = 0\n    var last_beats\
    \ = 0\n    var last_beats_count = 0\n    var last_beats_count_max = 0\n    var\
    \ last_beats_count_min = 0\n    var last_beats_count_avg = 0\n    var last_beats_count_sum\
    \ = 0\n    var last_beats_count_count = 0\n    var last_beats_count_count_max\
    \ = 0\n    var last_beats_count_count_min = 0\n    var last_beats_count_count_avg\
    \ = 0\n    var last_beats_count_count_sum = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_max = 0\n    var last_beats_count_count_count_min\
    \ = 0\n    var last_beats_count_count_count_avg = 0\n    var last_beats_count_count_count_sum\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_max\
    \ = 0\n    var last_beats_count_count_count_count_min = 0\n    var last_beats_count_count_count_count_avg\
    \ = 0\n    var last_beats_count_count_count_count_sum = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_max = 0\n    var last_beats_count_count_count_count_count_min\
    \ = 0\n    var last_beats_count_count_count_count_count_avg = 0\n    var last_beats_count_count_count_count_count_sum\
    \ = 0\n    var last_beats_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_max\
    \ = 0\n    var last_beats_count_count_count_count_count_min = 0\n    var last_beats_count_count_count_count_count_avg\
    \ = 0\n    var last_beats_count_count_count_count_count_sum = 0\n    var last_beats_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_max = 0\n    var\
    \ last_beats_count_count_count_count_count_min = 0\n    var last_beats_count_count_count_count_count_count_avg\
    \ = 0\n    var last_beats_count_count_count_count_count_count_sum = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count_max\
    \ = 0\n    var last_beats_count_count_count_count_count_count_min = 0\n    var\
    \ last_beats_count_count_count_count_count_count_avg = 0\n    var last_beats_count_count_count_count_count_count_sum\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_max = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_min = 0\n    var last_beats_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpx9p5f9bg.swift:43:9: error: invalid redeclaration of 'last_beats_count_count_count_count_count_min'\n\
    \    var last_beats_count_count_count_count_count_min = 0\n        ^\n/tmp/tmpx9p5f9bg.swift:38:9:\
    \ note: 'last_beats_count_count_count_count_count_min' previously declared here\n\
    \    var last_beats_count_count_count_count_count_min = 0\n        ^\n/tmp/tmpx9p5f9bg.swift:44:9:\
    \ error: invalid redeclaration of 'last_beats_count_count_count_count_count_avg'\n\
    \    var last_beats_count_count_count_count_count_avg = 0\n        ^\n/tmp/tmpx9p5f9bg.swift:39:9:\
    \ note: 'last_beats_count_count_count_count_count_avg' previously declared here\n\
    \    var last_beats_count_count_count_count_count_avg = 0\n        ^\n/tmp/tmpx9p5f9bg.swift:45:9:\
    \ error: invalid redeclaration of 'last_beats_count_count_count_count_count_sum'\n\
    \    var last_beats_count_count_count_count_count_sum = 0\n        ^\n/tmp/tmpx9p5f9bg.swift:40:9:\
    \ note: 'last_beats_count_count_count_count_count_sum' previously declared here\n\
    \    var last_beats_count_count_count_count_count_sum = 0\n        ^\n/tmp/tmpx9p5f9bg.swift:46:9:\
    \ error: invalid redeclaration of 'last_beats_count_count_count_count_count_count'\n\
    \    var last_beats_count_count_count_count_count_count = 0\n        ^\n/tmp/tmpx9p5f9bg.swift:41:9:\
    \ note: 'last_beats_count_count_count_count_count_count' previously declared here\n\
    \    var last_beats_count_count_count_count_count_count = 0\n        ^\n/tmp/tmpx9p5f9bg.swift:47:9:\
    \ error: invalid redeclaration of 'last_beats_count_count_count_count_count_count_max'\n\
    \    var last_beats_count_count_count_count_count_count_max = 0\n        ^\n/tmp/tmpx9p5f9bg.swift:42:9:\
    \ note: 'last_beats_count_count_count_count_count_count_max' previously declared\
    \ here\n    var last_beats_count_count_count_count_count_count_max = 0\n     \
    \   ^\n/tmp/tmpx9p5f9bg.swift:48:9: error: invalid redeclaration of 'last_beats_count_count_count_count_count_min'\n\
    \    var last_beats_count_count_count_count_count_min = 0\n        ^\n/tmp/tmpx9p5f9bg.swift:38:9:\
    \ note: 'last_beats_count_count_count_count_count_min' previously dec"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var notes = [String]()\n    var notes_length = 0\n    var note_length\
    \ = 0\n    var note_lengths = [Int]()\n    var note_lengths_length = 0\n    var\
    \ note_lengths_lengths = [Int]()\n    var note_lengths_lengths_length = 0\n  \
    \  var note_lengths_lengths_lengths = [Int]()\n    var note_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths = [Int]()\n    var note_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths = [Int]()\n    var\
    \ note_lengths_lengths_lengths_lengths_lengths_length = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths\
    \ = [Int]()\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths =\
    \ [Int]()\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths\
    \ = [Int]()\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths\
    \ = [Int]()\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths\
    \ = [Int]()\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths\
    \ = [Int]()\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths\
    \ = [Int]()\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0\n    var note_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths_lengths\
    \ = [Int]()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzj1zc7qs.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpzj1zc7qs.swift:11:9: warning:\
    \ initialization of variable 'beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n/tmp/tmpzj1zc7qs.swift:12:9:\
    \ warning: initialization of variable 'note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpzj1zc7qs.swift:13:9: warning: initialization of variable 'notes' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var notes\
    \ = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpzj1zc7qs.swift:14:9: warning: initialization\
    \ of variable 'notes_length' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpzj1zc7qs.swift:15:9: warning: initialization of variable 'note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_length = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpzj1zc7qs.swift:16:9:\
    \ warning: initialization of variable 'note_lengths' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var note_lengths = [Int]()\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpzj1zc7qs.swift:17:9: warning: initialization\
    \ of variable 'note_lengths_length' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_lengths_length = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpzj1zc7qs.swift:18:9: warning: initialization of variable 'note_lengths_lengths'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_lengths_lengths = [Int]()\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n\
    /tmp/tmpzj1zc7qs.swift:19:9: warning: initialization of variable 'note_lengths_lengths_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_lengths_lengths_length = 0\n    ~~~~^~~~~~~~"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_index = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_value\
    \ = 0\n    var current_note_length_value_index = 0\n    var current_note_length_value_value\
    \ = 0\n    var current_note_length_value_value_index = 0\n    var current_note_length_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value_value_value_value\
    \ = 0\n    var current_note_length_value_value_value_index = 0\n    var current_note_length_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpm_b0j7iz.swift:23:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:21:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:22:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:21:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:22:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:21:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:28:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmpm_b0j7iz.swift:22:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_valu"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var notes_length2 = 0\n    var notes_length3 = 0\n\
    \    var notes_length4 = 0\n    var notes_length5 = 0\n    var notes_length6 =\
    \ 0\n    var notes_length7 = 0\n    var notes_length8 = 0\n    var notes_length9\
    \ = 0\n    var notes_length10 = 0\n    var notes_length11 = 0\n    var notes_length12\
    \ = 0\n    var notes_length13 = 0\n    var notes_length14 = 0\n    var notes_length15\
    \ = 0\n    var notes_length16 = 0\n    var notes_length17 = 0\n    var notes_length18\
    \ = 0\n    var notes_length19 = 0\n    var notes_length20 = 0\n    var notes_length21\
    \ = 0\n    var notes_length22 = 0\n    var notes_length23 = 0\n    var notes_length24\
    \ = 0\n    var notes_length25 = 0\n    var notes_length26 = 0\n    var notes_length27\
    \ = 0\n    var notes_length28 = 0\n    var notes_length29 = 0\n    var notes_length30\
    \ = 0\n    var notes_length31 = 0\n    var notes_length32 = 0\n    var notes_length33\
    \ = 0\n    var notes_length34 = 0\n    var notes_length35 = 0\n    var notes_length36\
    \ = 0\n    var notes_length37 = 0\n    var notes_length38 = 0\n    var notes_length39\
    \ = 0\n    var notes_length40 = 0\n    var notes_length41 = 0\n    var notes_length42\
    \ = 0\n    var notes_length43 = 0\n    var notes_length44 = 0\n    var notes_length45\
    \ = 0\n    var notes_length46 = 0\n    var notes_length47 = 0\n    var notes_length48\
    \ = 0\n    var notes_length49 = 0\n    var notes_length50 = 0\n    var notes_length51\
    \ = 0\n    var notes_length52 = 0\n    var notes_length53 = 0\n    var notes_length54\
    \ = 0\n    var notes_length55 = 0\n    var notes_length56 = 0\n    var notes_length57\
    \ = 0\n    var notes_length58 = 0\n    var notes_length59 = 0\n    var notes_length60\
    \ = 0\n    var notes_length61 = 0\n    var notes_length62 = 0\n    var notes_length63\
    \ = 0\n    var notes_length64 = 0\n    var notes_length65 = 0\n    var notes_length66\
    \ = 0\n    var notes_length67 = 0\n    var notes_length68 = 0\n    var notes_length69\
    \ = 0\n    var notes_length70 = 0\n    var notes_length71 = 0\n    var note\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0mgkt4_b.swift:83:9: error: type annotation missing in pattern\n\
    \    var note\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for c in music_string {\n        if c ==\
    \ 'o' {\n            beats.append(current_beat)\n            current_beat = 0\n\
    \            current_note = c\n        } else if c == 'o|' {\n            beats.append(current_beat)\n\
    \            current_beat = 0\n            current_note = c\n        } else if\
    \ c == '.|' {\n            beats.append(current_beat)\n            current_beat\
    \ = 0\n            current_note = c\n        } else {\n            current_beat\
    \ += 1\n        }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbpzqd0ym.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpbpzqd0ym.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o|' {\n                       ^~~~\n              \
    \         \"o|\"\n/tmp/tmpbpzqd0ym.swift:22:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.|' {\n                       ^~~~\n\
    \                       \".|\"\n/tmp/tmpbpzqd0ym.swift:12:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var current_note = music_string[0]\n                       ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpbpzqd0ym.swift:18:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmpbpzqd0ym.swift:18:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n/tmp/tmpbpzqd0ym.swift:22:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n        } else\
    \ if c == '.|' {\n                  ~ ^  ~~~~\n/tmp/tmpbpzqd0ym.swift:22:21: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        } else if c == '.|' {\n              \
    \      ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note.hasPrefix(\"o\") {\n \
    \           beats.append(4)\n        } else if note.hasPrefix(\"o|\") {\n    \
    \        beats.append(2)\n        } else if note.hasPrefix(\".|\") {\n       \
    \     beats.append(1)\n        } else {\n            beats.append(0)\n       \
    \ }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4l01y3r0.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp4l01y3r0.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array: [Int] = []\n    var current_beat =\
    \ 0\n    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_string\
    \ = \"\"\n    var current_note_string_index = 0\n    var current_note_string_index_index2\
    \ = 0\n    var current_note_string_index3 = 0\n    var current_note_string_index4\
    \ = 0\n    var current_note_string_index5 = 0\n    var current_note_string_index6\
    \ = 0\n    var current_note_string_index7 = 0\n    var current_note_string_index8\
    \ = 0\n    var current_note_string_index9 = 0\n    var current_note_string_index10\
    \ = 0\n    var current_note_string_index11 = 0\n    var current_note_string_index12\
    \ = 0\n    var current_note_string_index13 = 0\n    var current_note_string_index14\
    \ = 0\n    var current_note_string_index15 = 0\n    var current_note_string_index16\
    \ = 0\n    var current_note_string_index17 = 0\n    var current_note_string_index18\
    \ = 0\n    var current_note_string_index19 = 0\n    var current_note_string_index20\
    \ = 0\n    var current_note_string_index21 = 0\n    var current_note_string_index22\
    \ = 0\n    var current_note_string_index23 = 0\n    var current_note_string_index24\
    \ = 0\n    var current_note_string_index25 = 0\n    var current_note_string_index26\
    \ = 0\n    var current_note_string_index27 = 0\n    var current_note_string_index28\
    \ = 0\n    var current_note_string_index29 = 0\n    var current_note_string_index30\
    \ = 0\n    var current_note_string_index31 = 0\n    var current_note_string_index32\
    \ = 0\n    var current_note_string_index33 = 0\n    var current_note_string_index34\
    \ = 0\n    var current_note_string_index35 = 0\n    var current_note_string_index36\
    \ = 0\n    var current_note_string_index37 = 0\n    var current_note_string_index38\
    \ = 0\n    var current_note_string_index39 = 0\n    var current_note_string_index40\
    \ = 0\n    var current_note_string_index41 = 0\n    var current_note_string_index42\
    \ = 0\n    var current_note_string_index43 = 0\n    var current_note_string_index44\
    \ = 0\n    var current_note_string_index45 = 0\n    var current_note_string_index46\
    \ = 0\n    var current_note_string_index47 = 0\n    var current_note_string_index48\
    \ = 0\n    var current_note_string_index49 = 0\n    var current_note_string_index50\
    \ = 0\n    var current_note_string_index51 = 0\n    var current_note_string_index52\
    \ = 0\n    var current_note_string_index53 = 0\n    var current_note_string_index54\
    \ = 0\n    var current_note_string_index55 = 0\n    var current_note_string_index56\
    \ = 0\n    var current_note_string_index57 = 0\n    var current_note_string_index58\
    \ = 0\n    var current_note_string\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpoohlx5b2.swift:75:9: error: type annotation missing in pattern\n\
    \    var current_note_string\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note.characters.count == 1\
    \ {\n            beats.append(4)\n        } else if note.characters.count == 2\
    \ {\n            beats.append(2)\n        } else if note.characters.count == 3\
    \ {\n            beats.append(1)\n        } else {\n            beats.append(0)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzheo8fm8.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzheo8fm8.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var notes_length_index = 0\n    var notes_length_index2\
    \ = 0\n    var notes_length_index3 = 0\n    var notes_length_index4 = 0\n    var\
    \ notes_length_index5 = 0\n    var notes_length_index6 = 0\n    var notes_length_index7\
    \ = 0\n    var notes_length_index8 = 0\n    var notes_length_index9 = 0\n    var\
    \ notes_length_index10 = 0\n    var notes_length_index11 = 0\n    var notes_length_index12\
    \ = 0\n    var notes_length_index13 = 0\n    var notes_length_index14 = 0\n  \
    \  var notes_length_index15 = 0\n    var notes_length_index16 = 0\n    var notes_length_index17\
    \ = 0\n    var notes_length_index18 = 0\n    var notes_length_index19 = 0\n  \
    \  var notes_length_index20 = 0\n    var notes_length_index21 = 0\n    var notes_length_index22\
    \ = 0\n    var notes_length_index23 = 0\n    var notes_length_index24 = 0\n  \
    \  var notes_length_index25 = 0\n    var notes_length_index26 = 0\n    var notes_length_index27\
    \ = 0\n    var notes_length_index28 = 0\n    var notes_length_index29 = 0\n  \
    \  var notes_length_index30 = 0\n    var notes_length_index31 = 0\n    var notes_length_index32\
    \ = 0\n    var notes_length_index33 = 0\n    var notes_length_index34 = 0\n  \
    \  var notes_length_index35 = 0\n    var notes_length_index36 = 0\n    var notes_length_index37\
    \ = 0\n    var notes_length_index38 = 0\n    var notes_length_index39 = 0\n  \
    \  var notes_length_index40 = 0\n    var notes_length_index41 = 0\n    var notes_length_index42\
    \ = 0\n    var notes_length_index43 = 0\n    var notes_length_index44 = 0\n  \
    \  var notes_length_index45 = 0\n    var notes_length_index46 = 0\n    var notes_length_index47\
    \ = 0\n    var notes_length_index48 = 0\n    var notes_length_index49 = 0\n  \
    \  var notes_length_index50 = 0\n    var notes_length_index51 = 0\n    var notes_length_index52\
    \ = 0\n    var notes_length_index53 = 0\n    var notes_length_index54 = 0\n  \
    \  var notes_length_index55 = 0\n    var notes_length_index56 = 0\n    var notes_length_index57\
    \ = 0\n    var notes_length_index58 = 0\n    var notes_length_index59 = 0\n  \
    \  var notes_length_index60 = 0\n    var notes_length_index61 = 0\n    var notes_length_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4g2byb47.swift:74:9: error: type annotation missing in pattern\n\
    \    var notes_length_index\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note == \"o\" {\n         \
    \   beats.append(4)\n        } else if note == \"o|\" {\n            beats.append(2)\n\
    \        } else if note == \".|\" {\n            beats.append(1)\n        } else\
    \ {\n            beats.append(0)\n        }\n    }\n    return beats\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdrw6vm04.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpdrw6vm04.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var last = 0\n    for c in music_string\
    \ {\n        if c == 'o' {\n            if note != \"\" {\n                beats.append(beat)\n\
    \                notes.append(note)\n                beat = 0\n              \
    \  note = \"\"\n            }\n            last = 0\n        } else if c == '|'\
    \ {\n            if note != \"\" {\n                beats.append(beat)\n     \
    \           notes.append(note)\n                beat = 0\n                note\
    \ = \"\"\n            }\n            last = 1\n        } else if c == '.' {\n\
    \            if note != \"\" {\n                beats.append(beat)\n         \
    \       notes.append(note)\n                beat = 0\n                note = \"\
    \"\n            }\n            last = 2\n        } else {\n            beat +=\
    \ last\n            note += String(c)\n        }\n    }\n    beats.append(beat)\n\
    \    notes.append(note)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbprkjlws.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpbprkjlws.swift:24:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpbprkjlws.swift:32:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var notes_length_count = 0\n    var notes_length_index\
    \ = 0\n    var notes_length_index2 = 0\n    var notes_length_index3 = 0\n    var\
    \ notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var notes_length_index6\
    \ = 0\n    var notes_length_index7 = 0\n    var notes_length_index8 = 0\n    var\
    \ notes_length_index9 = 0\n    var notes_length_index10 = 0\n    var notes_length_index11\
    \ = 0\n    var notes_length_index12 = 0\n    var notes_length_index13 = 0\n  \
    \  var notes_length_index14 = 0\n    var notes_length_index15 = 0\n    var notes_length_index16\
    \ = 0\n    var notes_length_index17 = 0\n    var notes_length_index18 = 0\n  \
    \  var notes_length_index19 = 0\n    var notes_length_index20 = 0\n    var notes_length_index21\
    \ = 0\n    var notes_length_index22 = 0\n    var notes_length_index23 = 0\n  \
    \  var notes_length_index24 = 0\n    var notes_length_index25 = 0\n    var notes_length_index26\
    \ = 0\n    var notes_length_index27 = 0\n    var notes_length_index28 = 0\n  \
    \  var notes_length_index29 = 0\n    var notes_length_index30 = 0\n    var notes_length_index31\
    \ = 0\n    var notes_length_index32 = 0\n    var notes_length_index33 = 0\n  \
    \  var notes_length_index34 = 0\n    var notes_length_index35 = 0\n    var notes_length_index36\
    \ = 0\n    var notes_length_index37 = 0\n    var notes_length_index38 = 0\n  \
    \  var notes_length_index39 = 0\n    var notes_length_index40 = 0\n    var notes_length_index41\
    \ = 0\n    var notes_length_index42 = 0\n    var notes_length_index43 = 0\n  \
    \  var notes_length_index44 = 0\n    var notes_length_index45 = 0\n    var notes_length_index46\
    \ = 0\n    var notes_length_index47 = 0\n    var notes_length_index48 = 0\n  \
    \  var notes_length_index49 = 0\n    var notes_length_index50 = 0\n    var notes_length_index51\
    \ = 0\n    var notes_length_index52 = 0\n    var notes_length_index53 = 0\n  \
    \  var notes_length_index54 = 0\n    var notes_length_index55 = 0\n    var notes_length_index56\
    \ = 0\n    var notes_length_index57 = 0\n    var notes_length_index58 = 0\n  \
    \  var notes_length_index59 = 0\n    var notes_length_index60 = 0\n    var notes_length_index61\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpo3t683jd.swift:74:9: error: type annotation missing in pattern\n\
    \    var notes_length_index61\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note.count > 0 {\n        \
    \    let beat = note.components(separatedBy: \"o\").first?.count\n           \
    \ beats.append(beat ?? 0)\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2g8fezib.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp2g8fezib.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n/tmp/tmp2g8fezib.swift:15:65: error: type of expression\
    \ is ambiguous without more context\n            let beat = note.components(separatedBy:\
    \ \"o\").first?.count\n                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var last_note = \"\"\n    var last_beat = 0\n    var last_beat_index = 0\n\
    \    var last_beat_index2 = 0\n    var last_beat_index3 = 0\n    var last_beat_index4\
    \ = 0\n    var last_beat_index5 = 0\n    var last_beat_index6 = 0\n    var last_beat_index7\
    \ = 0\n    var last_beat_index8 = 0\n    var last_beat_index9 = 0\n    var last_beat_index10\
    \ = 0\n    var last_beat_index11 = 0\n    var last_beat_index12 = 0\n    var last_beat_index13\
    \ = 0\n    var last_beat_index14 = 0\n    var last_beat_index15 = 0\n    var last_beat_index16\
    \ = 0\n    var last_beat_index17 = 0\n    var last_beat_index18 = 0\n    var last_beat_index19\
    \ = 0\n    var last_beat_index20 = 0\n    var last_beat_index21 = 0\n    var last_beat_index22\
    \ = 0\n    var last_beat_index23 = 0\n    var last_beat_index24 = 0\n    var last_beat_index25\
    \ = 0\n    var last_beat_index26 = 0\n    var last_beat_index27 = 0\n    var last_beat_index28\
    \ = 0\n    var last_beat_index29 = 0\n    var last_beat_index30 = 0\n    var last_beat_index31\
    \ = 0\n    var last_beat_index32 = 0\n    var last_beat_index33 = 0\n    var last_beat_index34\
    \ = 0\n    var last_beat_index35 = 0\n    var last_beat_index36 = 0\n    var last_beat_index37\
    \ = 0\n    var last_beat_index38 = 0\n    var last_beat_index39 = 0\n    var last_beat_index40\
    \ = 0\n    var last_beat_index41 = 0\n    var last_beat_index42 = 0\n    var last_beat_index43\
    \ = 0\n    var last_beat_index44 = 0\n    var last_beat_index45 = 0\n    var last_beat_index46\
    \ = 0\n    var last_beat_index47 = 0\n    var last_beat_index48 = 0\n    var last_beat_index49\
    \ = 0\n    var last_beat_index50 = 0\n    var last_beat_index51 = 0\n    var last_beat_index52\
    \ = 0\n    var last_beat_index53 = 0\n    var last_beat_index54 = 0\n    var last_beat_index55\
    \ = 0\n    var last_beat_index56 = 0\n    var last_beat_index57 = 0\n    var last_beat_index58\
    \ = 0\n    var last_beat_index59 = 0\n    var last_beat_index60 = 0\n    var last_beat_index61\
    \ = 0\n    var last_beat_index62 = 0\n    var last_beat_index63 = 0\n    var last_beat_index64\
    \ = 0\n    var last_beat_index65 = 0\n    var last_beat_index66 = 0\n    var last_beat_index67\
    \ = 0\n    var last_beat_index68 = 0\n    var last_beat_index69 = 0\n    var last_beat_index70\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp15fpnpg1.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp15fpnpg1.swift:11:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp15fpnpg1.swift:12:9:\
    \ warning: initialization of variable 'last_note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_note = \"\"\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp15fpnpg1.swift:13:9: warning: initialization of variable 'last_beat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:14:9:\
    \ warning: initialization of variable 'last_beat_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:15:9: warning: initialization\
    \ of variable 'last_beat_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_beat_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp15fpnpg1.swift:16:9: warning: initialization of variable 'last_beat_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:17:9:\
    \ warning: initialization of variable 'last_beat_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_index4 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:18:9: warning: initialization\
    \ of variable 'last_beat_index5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_beat_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp15fpnpg1.swift:19:9: warning: initialization of variable 'last_beat_index6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_index6 = 0\n    "
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_beats = [String]()\n    var current_note = \"\"\n    var current_beat\
    \ = 0\n    var current_note_index = 0\n    var current_note_length = 0\n    var\
    \ current_note_length_index = 0\n    var current_note_length_index2 = 0\n    var\
    \ current_note_length_index3 = 0\n    var current_note_length_index4 = 0\n   \
    \ var current_note_length_index5 = 0\n    var current_note_length_index6 = 0\n\
    \    var current_note_length_index7 = 0\n    var current_note_length_index8 =\
    \ 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppijxlzq3.swift:75:9: error: type annotation missing in pattern\n\
    \    var current_note_length\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_beats = [String]()\n    var beats_notes = [String]()\n    var notes_beats_notes\
    \ = [String]()\n    var beats_notes_beats = [String]()\n    var notes_beats_notes_beats\
    \ = [String]()\n    var notes_beats_notes_beats_notes = [String]()\n    var notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \    var notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n    var\
    \ notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n    var\
    \ notes_beats_notes_beats_notes_beats_notes_beats_notes_beats = [String]()\n \
    \   var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beat\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp45c4o3q3.swift:24:9: error: invalid redeclaration of 'notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes = [String]()\n\
    \        ^\n/tmp/tmp45c4o3q3.swift:23:9: note: 'notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp45c4o3q3.swift:27:9: error: invalid redeclaration\
    \ of 'notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\n\
    \    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp45c4o3q3.swift:26:9: note: 'notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes'\
    \ previously declared here\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes\
    \ = [String]()\n        ^\n/tmp/tmp45c4o3q3.swift:32:9: error: type annotation\
    \ missing in pattern\n    var notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beats_notes_beat\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        if note.first == \"o\" {\n        \
    \    beats.append(4)\n        } else if note.first == \"o|\" {\n            beats.append(2)\n\
    \        } else if note.first == \".|\" {\n            beats.append(1)\n     \
    \   } else {\n            fatalError(\"Unexpected note in music string: \\(note)\"\
    )\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpmels1mdv.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var beats_counter: Int =\
    \ 0\n    var notes: [String] = []\n    var notes_counter: Int = 0\n    var current_note\
    \ = \"\"\n    var current_note_length: Int = 0\n    var current_note_length2:\
    \ Int = 0\n    var current_note_length3: Int = 0\n    var current_note_length4:\
    \ Int = 0\n    var current_note_length5: Int = 0\n    var current_note_length6:\
    \ Int = 0\n    var current_note_length7: Int = 0\n    var current_note_length8:\
    \ Int = 0\n    var current_note_length9: Int = 0\n    var current_note_length10:\
    \ Int = 0\n    var current_note_length11: Int = 0\n    var current_note_length12:\
    \ Int = 0\n    var current_note_length13: Int = 0\n    var current_note_length14:\
    \ Int = 0\n    var current_note_length15: Int = 0\n    var current_note_length16:\
    \ Int = 0\n    var current_note_length17: Int = 0\n    var current_note_length18:\
    \ Int = 0\n    var current_note_length19: Int = 0\n    var current_note_length20:\
    \ Int = 0\n    var current_note_length21: Int = 0\n    var current_note_length22:\
    \ Int = 0\n    var current_note_length23: Int = 0\n    var current_note_length24:\
    \ Int = 0\n    var current_note_length25: Int = 0\n    var current_note_length26:\
    \ Int = 0\n    var current_note_length27: Int = 0\n    var current_note_length28:\
    \ Int = 0\n    var current_note_length29: Int = 0\n    var current_note_length30:\
    \ Int = 0\n    var current_note_length31: Int = 0\n    var current_note_length32:\
    \ Int = 0\n    var current_note_length33: Int = 0\n    var current_note_length34:\
    \ Int = 0\n    var current_note_length35: Int = 0\n    var current_note_length36:\
    \ Int = 0\n    var current_note_length37: Int = 0\n    var current_note_length38:\
    \ Int = 0\n    var current_note_length39: Int = 0\n    var current_note_length40:\
    \ Int = 0\n    var current_note_length41: Int = 0\n    var current_note_length42:\
    \ Int = 0\n    var current_note_length43: Int = 0\n    var current_note_length44:\
    \ Int = 0\n    var current_note_length45: Int = 0\n    var current_note_length46:\
    \ Int = 0\n    var current_note_length47: Int = 0\n    var current_note_length48:\
    \ Int = 0\n    var current_note_length49: Int = 0\n    var current_note_length50:\
    \ Int = 0\n    var current_note_length51: Int = 0\n    var current_note_length52:\
    \ Int = 0\n    var current_note_length53: Int = 0\n    var current_note_length54:\
    \ Int\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpq89vhwcw.swift:10:9: warning: variable 'beats' was never used;\
    \ consider replacing with '_' or removing it\n    var beats: [Int] = []\n    \
    \    ^~~~~\n        _\n/tmp/tmpq89vhwcw.swift:11:9: warning: variable 'beats_counter'\
    \ was never used; consider replacing with '_' or removing it\n    var beats_counter:\
    \ Int = 0\n        ^~~~~~~~~~~~~\n        _\n/tmp/tmpq89vhwcw.swift:12:9: warning:\
    \ variable 'notes' was never used; consider replacing with '_' or removing it\n\
    \    var notes: [String] = []\n        ^~~~~\n        _\n/tmp/tmpq89vhwcw.swift:13:9:\
    \ warning: variable 'notes_counter' was never used; consider replacing with '_'\
    \ or removing it\n    var notes_counter: Int = 0\n        ^~~~~~~~~~~~~\n    \
    \    _\n/tmp/tmpq89vhwcw.swift:14:9: warning: initialization of variable 'current_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note = \"\"\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpq89vhwcw.swift:15:9:\
    \ warning: variable 'current_note_length' was never used; consider replacing with\
    \ '_' or removing it\n    var current_note_length: Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpq89vhwcw.swift:16:9: warning: variable 'current_note_length2'\
    \ was never used; consider replacing with '_' or removing it\n    var current_note_length2:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpq89vhwcw.swift:17:9:\
    \ warning: variable 'current_note_length3' was never used; consider replacing\
    \ with '_' or removing it\n    var current_note_length3: Int = 0\n        ^~~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpq89vhwcw.swift:18:9: warning: variable 'current_note_length4'\
    \ was never used; consider replacing with '_' or removing it\n    var current_note_length4:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpq89vhwcw.swift:19:9:\
    \ warning: variable 'current_note_length5' was never used; consider replacing\
    \ with '_' or removing it\n    var current_note_length5: Int = 0\n        ^~~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpq89vhwcw.swift:20:9: warning: variable 'current_note_length6'\
    \ was never used; consider replacing with '_' "
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ note = String()\n    var last_note = String()\n    var last_beat = 0\n    var\
    \ last_beat_count = 0\n    var last_beat_type = \"\"\n    var last_note_type =\
    \ \"\"\n    var last_note_beat = 0\n    var last_note_beat_type = \"\"\n    var\
    \ last_note_beat_count = 0\n    var last_note_beat_type = \"\"\n    var last_note_beat_type\
    \ = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\
    \"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n \
    \   var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var\
    \ last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type\
    \ = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\
    \"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n \
    \   var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var\
    \ last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type\
    \ = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\
    \"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n \
    \   var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var\
    \ last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type\
    \ = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\
    \"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n \
    \   var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var\
    \ last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type\
    \ = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\
    \"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n \
    \   var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var\
    \ last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type\
    \ = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\
    \"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n \
    \   var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var\
    \ last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type\
    \ = \"\"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\
    \"\n    var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n \
    \   var last_note_beat_type = \"\"\n    var last_note_beat_type = \"\"\n    var\
    \ last_note_beat_type = \"\"\n    var last_note_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnzq66h82.swift:21:9: error: invalid redeclaration of 'last_note_beat_type'\n\
    \    var last_note_beat_type = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:19:9: note:\
    \ 'last_note_beat_type' previously declared here\n    var last_note_beat_type\
    \ = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:22:9: error: invalid redeclaration\
    \ of 'last_note_beat_type'\n    var last_note_beat_type = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:19:9:\
    \ note: 'last_note_beat_type' previously declared here\n    var last_note_beat_type\
    \ = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:23:9: error: invalid redeclaration\
    \ of 'last_note_beat_type'\n    var last_note_beat_type = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:19:9:\
    \ note: 'last_note_beat_type' previously declared here\n    var last_note_beat_type\
    \ = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:24:9: error: invalid redeclaration\
    \ of 'last_note_beat_type'\n    var last_note_beat_type = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:19:9:\
    \ note: 'last_note_beat_type' previously declared here\n    var last_note_beat_type\
    \ = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:25:9: error: invalid redeclaration\
    \ of 'last_note_beat_type'\n    var last_note_beat_type = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:19:9:\
    \ note: 'last_note_beat_type' previously declared here\n    var last_note_beat_type\
    \ = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:26:9: error: invalid redeclaration\
    \ of 'last_note_beat_type'\n    var last_note_beat_type = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:19:9:\
    \ note: 'last_note_beat_type' previously declared here\n    var last_note_beat_type\
    \ = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:27:9: error: invalid redeclaration\
    \ of 'last_note_beat_type'\n    var last_note_beat_type = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:19:9:\
    \ note: 'last_note_beat_type' previously declared here\n    var last_note_beat_type\
    \ = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:28:9: error: invalid redeclaration\
    \ of 'last_note_beat_type'\n    var last_note_beat_type = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:19:9:\
    \ note: 'last_note_beat_type' previously declared here\n    var last_note_beat_type\
    \ = \"\"\n        ^\n/tmp/tmpnzq66h82.swift:29:9: error: inva"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note.count > 0 {\n        \
    \    beats.append(note.count)\n        }\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpywlc4o0i.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpywlc4o0i.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_beats =\
    \ 0\n    var current_note_index = 0\n    var current_note_length = 0\n    var\
    \ current_note_length_index = 0\n    var current_note_length_index2 = 0\n    var\
    \ current_note_length_index3 = 0\n    var current_note_length_index4 = 0\n   \
    \ var current_note_length_index5 = 0\n    var current_note_length_index6 = 0\n\
    \    var current_note_length_index7 = 0\n    var current_note_length_index8 =\
    \ 0\n    var current_note_length_index9 = 0\n    var current_note_length_index10\
    \ = 0\n    var current_note_length_index11 = 0\n    var current_note_length_index12\
    \ = 0\n    var current_note_length_index13 = 0\n    var current_note_length_index14\
    \ = 0\n    var current_note_length_index15 = 0\n    var current_note_length_index16\
    \ = 0\n    var current_note_length_index17 = 0\n    var current_note_length_index18\
    \ = 0\n    var current_note_length_index19 = 0\n    var current_note_length_index20\
    \ = 0\n    var current_note_length_index21 = 0\n    var current_note_length_index22\
    \ = 0\n    var current_note_length_index23 = 0\n    var current_note_length_index24\
    \ = 0\n    var current_note_length_index25 = 0\n    var current_note_length_index26\
    \ = 0\n    var current_note_length_index27 = 0\n    var current_note_length_index28\
    \ = 0\n    var current_note_length_index29 = 0\n    var current_note_length_index30\
    \ = 0\n    var current_note_length_index31 = 0\n    var current_note_length_index32\
    \ = 0\n    var current_note_length_index33 = 0\n    var current_note_length_index34\
    \ = 0\n    var current_note_length_index35 = 0\n    var current_note_length_index36\
    \ = 0\n    var current_note_length_index37 = 0\n    var current_note_length_index38\
    \ = 0\n    var current_note_length_index39 = 0\n    var current_note_length_index40\
    \ = 0\n    var current_note_length_index41 = 0\n    var current_note_length_index42\
    \ = 0\n    var current_note_length_index43 = 0\n    var current_note_length_index44\
    \ = 0\n    var current_note_length_index45 = 0\n    var current_note_length_index46\
    \ = 0\n    var current_note_length_index47 = 0\n    var current_note_length_index48\
    \ = 0\n    var current_note_length_index49 = 0\n    var current_note_length_index50\
    \ = 0\n    var current_note_length_index51 = 0\n    var current_note_length_index52\
    \ = 0\n    var current_note_length_index53 = 0\n    var current_note_length_index54\
    \ = 0\n    var current_note_length_index55 = 0\n    var current_note_length_index56\
    \ = 0\n    var current_note_length_index57 = 0\n    var current_note_length_index58\
    \ = 0\n    var current_note_length_index59 = 0\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4nh3_4q1.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp4nh3_4q1.swift:11:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp4nh3_4q1.swift:12:9:\
    \ warning: initialization of variable 'current_note' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note = \"\"\
    \n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp4nh3_4q1.swift:13:9: warning: initialization\
    \ of variable 'current_beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmp4nh3_4q1.swift:14:9: warning: initialization of variable 'current_beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_beats = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp4nh3_4q1.swift:15:9:\
    \ warning: initialization of variable 'current_note_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4nh3_4q1.swift:16:9: warning:\
    \ initialization of variable 'current_note_length' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var current_note_length = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4nh3_4q1.swift:17:9: warning: initialization\
    \ of variable 'current_note_length_index' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var current_note_length_index = 0\n  \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4nh3_4q1.swift:18:9: warning:\
    \ initialization of variable 'current_note_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp4nh3_4q1.swift:19:9:\
    \ warning: initialization of variable 'current_note_length_index3' was never us"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for c in music_string {\n        if\
    \ c == \"o\" {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n        } else if c == \"o|\"\
    \ {\n            beats.append(beat)\n            notes.append(note)\n        \
    \    beat = 0\n            note = \"\"\n        } else if c == \".|\" {\n    \
    \        beats.append(beat)\n            notes.append(note)\n            beat\
    \ = 0\n            note = \"\"\n        } else {\n            note += String(c)\n\
    \        }\n    }\n    beats.append(beat)\n    notes.append(note)\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp029wl6oi.swift:20:21: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if c == \"o|\"\
    \ {\n                  ~ ^  ~~~~\n/tmp/tmp029wl6oi.swift:20:21: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if c == \"o|\" {\n                    ^\n/tmp/tmp029wl6oi.swift:25:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \".|\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmp029wl6oi.swift:25:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \".|\" {\n                    ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var last_note = 0\n    var last_beat = 0\n    var last_beats = 0\n\
    \    var last_beats_count = 0\n    var last_beats_count_count = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0k42bep0.swift:28:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var current_note = \"\"\n    var current_length =\
    \ 0\n    var current_beat = 0\n    var current_note_index = 0\n    var current_note_length\
    \ = 0\n    var current_note_beat = 0\n    var current_note_note = \"\"\n    var\
    \ current_note_note_index = 0\n    var current_note_note_length = 0\n    var current_note_note_beat\
    \ = 0\n    var current_note_note_note = \"\"\n    var current_note_note_note_index\
    \ = 0\n    var current_note_note_note_length = 0\n    var current_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note_note = \"\"\n    var current_note_note_note_note_index\
    \ = 0\n    var current_note_note_note_note_length = 0\n    var current_note_note_note_note_beat\
    \ = 0\n    var current_note_note_note_note_note\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpm4n3dxsn.swift:32:9: error: invalid redeclaration of 'current_note_note_note_note_index'\n\
    \    var current_note_note_note_note_index = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:28:9:\
    \ note: 'current_note_note_note_note_index' previously declared here\n    var\
    \ current_note_note_note_note_index = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:33:9:\
    \ error: invalid redeclaration of 'current_note_note_note_note_length'\n    var\
    \ current_note_note_note_note_length = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:29:9:\
    \ note: 'current_note_note_note_note_length' previously declared here\n    var\
    \ current_note_note_note_note_length = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:34:9:\
    \ error: invalid redeclaration of 'current_note_note_note_note_beat'\n    var\
    \ current_note_note_note_note_beat = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:30:9:\
    \ note: 'current_note_note_note_note_beat' previously declared here\n    var current_note_note_note_note_beat\
    \ = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:35:9: error: invalid redeclaration of\
    \ 'current_note_note_note_note_note'\n    var current_note_note_note_note_note\
    \ = \"\"\n        ^\n/tmp/tmpm4n3dxsn.swift:31:9: note: 'current_note_note_note_note_note'\
    \ previously declared here\n    var current_note_note_note_note_note = \"\"\n\
    \        ^\n/tmp/tmpm4n3dxsn.swift:36:9: error: invalid redeclaration of 'current_note_note_note_note_index'\n\
    \    var current_note_note_note_note_index = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:28:9:\
    \ note: 'current_note_note_note_note_index' previously declared here\n    var\
    \ current_note_note_note_note_index = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:37:9:\
    \ error: invalid redeclaration of 'current_note_note_note_note_length'\n    var\
    \ current_note_note_note_note_length = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:29:9:\
    \ note: 'current_note_note_note_note_length' previously declared here\n    var\
    \ current_note_note_note_note_length = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:38:9:\
    \ error: invalid redeclaration of 'current_note_note_note_note_beat'\n    var\
    \ current_note_note_note_note_beat = 0\n        ^\n/tmp/tmpm4n3dxsn.swift:30:9:\
    \ note: 'current_note_note_note_note_b"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_length = 0\n    for c in music_string\
    \ {\n        if c == 'o' {\n            current_note = current_note + \"o\"\n\
    \            current_note_length = 4\n        } else if c == 'o|' {\n        \
    \    current_note = current_note + \"o|\"\n            current_note_length = 2\n\
    \        } else if c == '.|' {\n            current_note = current_note + \".|\"\
    \n            current_note_length = 1\n        } else {\n            if current_note_length\
    \ == 0 {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_length\
    \ = 0\n            }\n            current_beat = current_beat + 1\n          \
    \  current_note = current_note + c\n            current_note_length = current_note_length\
    \ + 1\n        }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpb0p9riao.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpb0p9riao.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o|' {\n                       ^~~~\n              \
    \         \"o|\"\n/tmp/tmpb0p9riao.swift:21:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.|' {\n                       ^~~~\n\
    \                       \".|\"\n/tmp/tmpb0p9riao.swift:18:21: error: binary operator\
    \ '==' cannot be applied to operands of type 'Character' and 'String'\n      \
    \  } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmpb0p9riao.swift:18:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n/tmp/tmpb0p9riao.swift:21:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n        } else\
    \ if c == '.|' {\n                  ~ ^  ~~~~\n/tmp/tmpb0p9riao.swift:21:21: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        } else if c == '.|' {\n              \
    \      ^\n/tmp/tmpb0p9riao.swift:32:43: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            current_note = current_note\
    \ + c\n                                          ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for c in music_string {\n        switch\
    \ c {\n        case \"o\":\n            notes.append(note)\n            note =\
    \ \"\"\n            beat += 4\n        case \"o|\":\n            notes.append(note)\n\
    \            note = \"\"\n            beat += 2\n        case \".|\":\n      \
    \      notes.append(note)\n            note = \"\"\n            beat = 1\n   \
    \     default:\n            note += String(c)\n        }\n    }\n    for note\
    \ in notes {\n        beats.append(beat)\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppj6lbyxr.swift:20:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmppj6lbyxr.swift:24:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var note = music_string[0]\n\
    \    beats.append(0)\n    for _ in 1...music_string.count {\n        switch note\
    \ {\n        case \"o\":\n            beats.append(4)\n        case \"o|\":\n\
    \            beats.append(2)\n        case \".|\":\n            beats.append(1)\n\
    \        default:\n            beats.append(0)\n        }\n        note = music_string[music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe0x2t19e.swift:25:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpe0x2t19e.swift:24:1937: note: to match this opening '('\n        note\
    \ = music_string[music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startIndex: music_string.index(music_string, startIndex: music_string.index(music_string,\
    \ startI"
  stdout: ''
  timestamp: 1660014083
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var notes: [String] = []\n\
    \    var beats_counter: Int = 0\n    var notes_counter: Int = 0\n    var notes_length:\
    \ Int = 0\n    var notes_string: String = \"\"\n    var notes_last_beat: Int =\
    \ 0\n    var notes_last_beat_string: String = \"\"\n    var notes_last_beat_length:\
    \ Int = 0\n    var notes_last_beat_string: String = \"\"\n    var notes_last_beat_counter:\
    \ Int = 0\n    var notes_last_beat_counter_string: String = \"\"\n    var notes_last_beat_counter_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string: Int = 0\n    var\
    \ notes_last_beat_counter_string_len_string_len: Int = 0\n    var notes_last_beat_counter_string_len_string_len_string:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len: Int\
    \ = 0\n    var notes_last_beat_counter_string_len_string_len_string_len: Int =\
    \ 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n    var notes_last_beat_counter_string_len_string_len\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpfs24u8oq.swift:19:9: error: invalid redeclaration of 'notes_last_beat_string'\n\
    \    var notes_last_beat_string: String = \"\"\n        ^\n/tmp/tmpfs24u8oq.swift:17:9:\
    \ note: 'notes_last_beat_string' previously declared here\n    var notes_last_beat_string:\
    \ String = \"\"\n        ^\n/tmp/tmpfs24u8oq.swift:27:9: error: invalid redeclaration\
    \ of 'notes_last_beat_counter_string_len_string_len_string_len'\n    var notes_last_beat_counter_string_len_string_len_string_len:\
    \ Int = 0\n        ^\n/tmp/tmpfs24u8oq.swift:26:9: note: 'notes_last_beat_counter_string_len_string_len_string_len'\
    \ previously declared here\n    var notes_last_beat_counter_string_len_string_len_string_len:\
    \ Int = 0\n        ^\n/tmp/tmpfs24u8oq.swift:30:9: error: invalid redeclaration\
    \ of 'notes_last_beat_counter_string_len_string_len_string_len_string_len'\n \
    \   var notes_last_beat_counter_string_len_string_len_string_len_string_len: Int\
    \ = 0\n        ^\n/tmp/tmpfs24u8oq.swift:29:9: note: 'notes_last_beat_counter_string_len_string_len_string_len_string_len'\
    \ previously declared here\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len:\
    \ Int = 0\n        ^\n/tmp/tmpfs24u8oq.swift:31:9: error: invalid redeclaration\
    \ of 'notes_last_beat_counter_string_len_string_len_string_len_string_len'\n \
    \   var notes_last_beat_counter_string_len_string_len_string_len_string_len: Int\
    \ = 0\n        ^\n/tmp/tmpfs24u8oq.swift:29:9: note: 'notes_last_beat_counter_string_len_string_len_string_len_string_len'\
    \ previously declared here\n    var notes_last_beat_counter_string_len_string_len_string_len_string_len:\
    \ Int = 0\n        ^\n/tmp/tmpfs24u8oq.swift:34:9: error: invalid redeclaration\
    \ of 'notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len'\n\
    \    var notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len:\
    \ Int = 0\n        ^\n/tmp/tmpfs24u8oq.swift:33:9: note: 'notes_last_beat_counter_string_len_string_len_string_len_string_len_string_len'\
    \ previously declared here\n    var notes_last_beat_counter_string_len_string_len_string_len_string"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var last_note = \"\"\n    var last_beat = 0\n    var last_beats_count = 0\n\
    \    var last_beats_count_by_octave = [Int]()\n    var octave = 0\n    var octave_count\
    \ = 0\n    var octave_count_by_note = [Int]()\n    var note_count = 0\n    var\
    \ note_counts_by_octave = [Int]()\n    var note_counts_by_note = [Int]()\n   \
    \ var note_counts_by_note_name = [String]()\n    var note_counts_by_note_name_by_octave\
    \ = [String]()\n    var note_counts_by_note_name_by_octave_count = [Int]()\n \
    \   var note_counts_by_note_name_by_octave_count_by_note = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n    var note_counts_by_note_name_by_octa\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp6r9zlykg.swift:32:9: error: invalid redeclaration of 'note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note'\n\
    \    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n        ^\n/tmp/tmp6r9zlykg.swift:31:9: note: 'note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note'\
    \ previously declared here\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n        ^\n/tmp/tmp6r9zlykg.swift:34:9: error: invalid redeclaration\
    \ of 'note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note'\n\
    \    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n        ^\n/tmp/tmp6r9zlykg.swift:33:9: note: 'note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note'\
    \ previously declared here\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n        ^\n/tmp/tmp6r9zlykg.swift:35:9: error: invalid redeclaration\
    \ of 'note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note'\n\
    \    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n        ^\n/tmp/tmp6r9zlykg.swift:33:9: note: 'note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note'\
    \ previously declared here\n    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note\
    \ = [Int]()\n        ^\n/tmp/tmp6r9zlykg.swift:36:9: error: invalid redeclaration\
    \ of 'note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_by_note_by_note_by_note_by_note'\n\
    \    var note_counts_by_note_name_by_octave_count_by_note_by_octave_by_note_by_note_"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes = [Int]()\n    var beats = 0\n    var note\
    \ = \"\"\n    for c in music_string {\n        if c == \"o\" {\n            notes.append(beats)\n\
    \            beats = 0\n            note = \"\"\n        } else if c == \"o|\"\
    \ {\n            notes.append(beats)\n            beats = 0\n            note\
    \ = \"\"\n        } else if c == \".|\" {\n            notes.append(beats)\n \
    \           beats = 0\n            note = \"\"\n        } else {\n           \
    \ note += c\n        }\n    }\n    notes.append(beats)\n    return notes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpklt_m2f3.swift:18:21: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if c == \"o|\"\
    \ {\n                  ~ ^  ~~~~\n/tmp/tmpklt_m2f3.swift:18:21: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if c == \"o|\" {\n                    ^\n/tmp/tmpklt_m2f3.swift:22:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \".|\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmpklt_m2f3.swift:22:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \".|\" {\n                    ^\n/tmp/tmpklt_m2f3.swift:27:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            note += c\n                    ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var note = music_string[0]\n\
    \    var rest = music_string\n    for _ in 0..<4 {\n        if rest == \".\" {\n\
    \            beats.append(1)\n            rest = \"\"\n        } else if rest\
    \ == \"o\" {\n            beats.append(4)\n            rest = \"\"\n        }\
    \ else if rest == \"o|\" {\n            beats.append(2)\n            rest = \"\
    \"\n        } else if rest == \"|\" {\n            beats.append(1)\n         \
    \   rest = \"\"\n        } else {\n            rest = rest[1:]\n        }\n  \
    \  }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpp230mgxm.swift:27:26: error: expected ',' separator\n         \
    \   rest = rest[1:]\n                         ^\n                         ,\n\
    /tmp/tmpp230mgxm.swift:27:26: error: expected expression in list of expressions\n\
    \            rest = rest[1:]\n                         ^\n/tmp/tmpp230mgxm.swift:11:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var note = music_string[0]\n              \
    \ ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpp230mgxm.swift:27:24: error: cannot assign value of type\
    \ 'Character' to type 'String'\n            rest = rest[1:]\n                \
    \   ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.characters\n\
    \    var notes_count = notes.count\n    var beats_count = 0\n    var note_index\
    \ = 0\n    var note = notes[note_index]\n    while note != \"|\" {\n        if\
    \ note == \"o\" {\n            beats_count += 1\n            beats.append(beats_count)\n\
    \            beats_count = 0\n            note_index += 1\n            note =\
    \ notes[note_index]\n        } else if note == \"o|\" {\n            beats_count\
    \ += 1\n            beats.append(beats_count)\n            beats_count = 0\n \
    \           note_index += 1\n            note = notes[note_index]\n        } else\
    \ if note == \".|\" {\n            beats_count += 1\n            beats.append(beats_count)\n\
    \            beats_count = 0\n            note_index += 1\n            note =\
    \ notes[note_index]\n        } else {\n            note_index += 1\n         \
    \   note = notes[note_index]\n        }\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpy46t7n1l.swift:11:30: error: 'characters' is unavailable: Please\
    \ use String directly\n    var notes = music_string.characters\n             \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpy46t7n1l.swift:15:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var note = notes[note_index]\n\
    \               ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpy46t7n1l.swift:22:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            note = notes[note_index]\n                   ^~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy46t7n1l.swift:23:24:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if note == \"o|\" {\n                  ~~~~ ^ \
    \ ~~~~\n/tmp/tmpy46t7n1l.swift:23:24: note: overloads for '==' exist with these\
    \ partially matching parameter lists: (Character, Character), (String, String)\n\
    \        } else if note == \"o|\" {\n                       ^\n/tmp/tmpy46t7n1l.swift:28:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            note = notes[note_index]\n        \
    \           ^~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpy46t7n1l.swift:29:24: error: binary operator\
    \ '==' cannot be applied to operands of type 'Character' and 'String'\n      \
    \  } else if note == \".|\" {\n                  ~~~~ ^  ~~~~\n/tmp/tmpy46t7n1l.swift:29:24:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (C"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.alphanumerics)\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.symbols)\n        let note = note.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note = note.trimmingCharacters(in: CharacterSet.newlines)\n     \
    \   let note = note.trimmingCharacters(in: CharacterSet.newlines)\n        let\
    \ note = note.trimmingCharacters(in: CharacterSet.newlines)\n        let note\
    \ = note.trimmingCharacters(in: CharacterSet.newlines)\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n        let note = note.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note = note.trimmingCharacters(in: CharacterSet.newlines)\n     \
    \   let note = note.trimmingCharacters(in: CharacterSet.newlines)\n        let\
    \ note = note.trimmingCharacters(in: CharacterSet.newlines)\n        let note\
    \ = note.trimmingCharacters(in: CharacterSet.newlines)\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n        let note = note.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note = note.trimmingCharacters(in: CharacterSet.newlines)\n     \
    \   let note = note.trimmingCharacters(in: CharacterSet.newlines)\n        let\
    \ note = note.trimmingCharacters(in: CharacterSet.newlines)\n        let note\
    \ = note.trimmingCharacters(in: CharacterSet.newlines)\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n        let note = note.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note = note.trimmingCharacters(in: CharacterSet.newlines)\n     \
    \   let note = note.trimmingCharacters(in: CharacterSet.newlines)\n        let\
    \ note = note.trimmingCharacters(in: CharacterSet.newlines)\n        let note\
    \ = note.trimmingCharacters(in: CharacterSet.newlines)\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n        let note = note.trimmingCharacters(in: CharacterSet.newlines)\n\
    \        let note = \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5arc_l1p.swift:41:19: error: expected initial value after '='\n\
    \        let note = \n                  ^\n/tmp/tmp5arc_l1p.swift:61:87: error:\
    \ expected '}' at end of brace statement\nassert(parse_music(music_string: \"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\n                      \
    \                                                                ^\n/tmp/tmp5arc_l1p.swift:9:49:\
    \ note: to match this opening '{'\nfunc parse_music(music_string: String) -> [Int]\
    \ {\n                                                ^\n/tmp/tmp5arc_l1p.swift:11:30:\
    \ error: value of type 'String' has no member 'components'\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmp5arc_l1p.swift:45:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp5arc_l1p.swift:13:48:\
    \ error: cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n/tmp/tmp5arc_l1p.swift:14:48: error: cannot find 'CharacterSet'\
    \ in scope\n        let note = note.trimmingCharacters(in: CharacterSet.alphanumerics)\n\
    \                                               ^~~~~~~~~~~~\n/tmp/tmp5arc_l1p.swift:15:48:\
    \ error: cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.symbols)\n                                               ^~~~~~~~~~~~\n\
    /tmp/tmp5arc_l1p.swift:16:48: error: cannot find 'CharacterSet' in scope\n   \
    \     let note = note.trimmingCharacters(in: CharacterSet.newlines)\n        \
    \                                       ^~~~~~~~~~~~\n/tmp/tmp5arc_l1p.swift:17:48:\
    \ error: cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.newlines)\n                                               ^~~~~~~~~~~~\n\
    /tmp/tmp5arc_l1p.swift:18:48: error: cannot find 'CharacterSet' in scope\n   \
    \     let note = note.trimmingCharacters(in: CharacterSet.newlin"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var note_count = 0\n    var note_string = \"\"\n    var last_note =\
    \ 0\n    var last_note_string = \"\"\n    var last_note_count = 0\n    var last_note_string_count\
    \ = 0\n    for c in music_string {\n        if c == \".\" {\n            note_string\
    \ = note_string.dropLast()\n            note_count = note_string.count\n     \
    \       note_string = note_string.dropLast()\n            note_count = note_string.count\n\
    \            beats.append(note_count)\n            beat = 0\n            note\
    \ = 0\n            note_count = 0\n            note_string = \"\"\n          \
    \  last_note = 0\n            last_note_string = \"\"\n            last_note_count\
    \ = 0\n            last_note_string_count = 0\n        } else if c == \"|\" {\n\
    \            note_string = note_string.dropLast()\n            note_count = note_string.count\n\
    \            note_string = note_string.dropLast()\n            note_count = note_string.count\n\
    \            beats.append(note_count)\n            beat = 0\n            note\
    \ = 0\n            note_count = 0\n            note_string = \"\"\n          \
    \  last_note = 0\n            last_note_string = \"\"\n            last_note_count\
    \ = 0\n            last_note_string_count = 0\n        } else if c == \"o\" {\n\
    \            note_string = note_string.dropLast()\n            note_count = note_string.count\n\
    \            note_string = note_string.dropLast()\n            note_count = note_string.count\n\
    \            beats.append(note_count)\n            beat = 0\n            note\
    \ = 0\n            note_count = 0\n            note_string = \"\"\n          \
    \  last_note = 0\n            last_note_string = \"\"\n            last_note_count\
    \ = 0\n            last_note_string_count = 0\n        } else if c == \"o|\" {\n\
    \            note_string = note_string.dropLast()\n            note_count = note_string.count\n\
    \            note_string = note_string.dropLast()\n            note_count = note_string.count\n\
    \            beats.append(note_count)\n            beat = 0\n            note\
    \ = 0\n            note_count = 0\n            note_string = \"\"\n          \
    \  last_note = 0\n            last_note_string = \"\"\n            last_note_count\
    \ = 0\n            last_note_string_count = 0\n        } else if c == \"b\" {\n\
    \            note_string = note_string.dropLast()\n            note_count = note_string.count\n\
    \            note_string = note_string.dropLast()\n            note_count = note_string.count\n\
    \            beats.append(note_count)\n            beat = 0\n            note\
    \ = 0\n            note_count = 0\n            note_string = \"\"\n          \
    \  last_note = 0\n            last_note_string = \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp29srddrp.swift:107:87: error: expected '}' at end of brace statement\n\
    assert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\n                                                                \
    \                      ^\n/tmp/tmp29srddrp.swift:19:27: note: to match this opening\
    \ '{'\n    for c in music_string {\n                          ^\n/tmp/tmp29srddrp.swift:107:87:\
    \ error: expected '}' at end of brace statement\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\n                  \
    \                                                                    ^\n/tmp/tmp29srddrp.swift:9:49:\
    \ note: to match this opening '{'\nfunc parse_music(music_string: String) -> [Int]\
    \ {\n                                                ^\n/tmp/tmp29srddrp.swift:21:39:\
    \ error: no 'dropLast' candidates produce the expected contextual result type\
    \ 'String'\n            note_string = note_string.dropLast()\n               \
    \                       ^\nSwift.Sequence:5:40: note: 'dropLast' produces '[String.Element]'\
    \ (aka 'Array<Character>'), not the expected contextual result type 'String'\n\
    \    @inlinable public __consuming func dropLast(_ k: Int = 1) -> [Self.Element]\n\
    \                                       ^\nSwift.Collection:4:40: note: 'dropLast'\
    \ produces 'String.SubSequence' (aka 'Substring'), not the expected contextual\
    \ result type 'String'\n    @inlinable public __consuming func dropLast(_ k: Int\
    \ = 1) -> Self.SubSequence\n                                       ^\n/tmp/tmp29srddrp.swift:23:39:\
    \ error: no 'dropLast' candidates produce the expected contextual result type\
    \ 'String'\n            note_string = note_string.dropLast()\n               \
    \                       ^\nSwift.Sequence:5:40: note: 'dropLast' produces '[String.Element]'\
    \ (aka 'Array<Character>'), not the expected contextual result type 'String'\n\
    \    @inlinable public __consuming func dropLast(_ k: Int = 1) -> [Self.Element]\n\
    \                                       ^\nSwift.Collection:4:40: note: 'dropLast'\
    \ produces 'String.SubSequence' (a"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_count = 0\n    var last_note =\
    \ 0\n    var last_beat = 0\n    var last_note_count = 0\n    var last_last_note\
    \ = 0\n    var last_last_beat = 0\n    var last_last_note_count = 0\n    var last_last_last_note\
    \ = 0\n    var last_last_last_beat = 0\n    var last_last_last_note_count = 0\n\
    \    var last_last_last_last_note = 0\n    var last_last_last_last_beat = 0\n\
    \    var last_last_last_last_note_count = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note_count = 0\n    var last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note_count = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note_count = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_note = 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxg2kbzqf.swift:37:9: error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:34:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:38:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note_count'\n\
    \    var last_last_last_last_last_last_last_note_count = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last_note_count' previously declared here\n\
    \    var last_last_last_last_last_last_last_note_count = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:39:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:36:9:\
    \ note: 'last_last_last_last_last_last_last_last_note' previously declared here\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:40:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:34:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:41:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note_count'\n\
    \    var last_last_last_last_last_last_last_note_count = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last_note_count' previously declared here\n\
    \    var last_last_last_last_last_last_last_note_count = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:42:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:36:9:\
    \ note: 'last_last_last_last_last_last_last_last_note' previously declared here\n\
    \    var last_last_last_last_last_last_last_last_note "
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2dmb5ng_.swift:75:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var notes_count = 0\n    var note_length = \"\"\n\
    \    var note_length_count = 0\n    var note_length_index = 0\n    var note_length_index2\
    \ = -1\n    var note_length_index3 = -1\n    var note_length_index4 = -1\n   \
    \ var note_length_index5 = -1\n    var note_length_index6 = -1\n    var note_length_index7\
    \ = -1\n    var note_length_index8 = -1\n    var note_length_index9 = -1\n   \
    \ var note_length_index10 = -1\n    var note_length_index11 = -1\n    var note_length_index12\
    \ = -1\n    var note_length_index13 = -1\n    var note_length_index14 = -1\n \
    \   var note_length_index15 = -1\n    var note_length_index16 = -1\n    var note_length_index17\
    \ = -1\n    var note_length_index18 = -1\n    var note_length_index19 = -1\n \
    \   var note_length_index20 = -1\n    var note_length_index21 = -1\n    var note_length_index22\
    \ = -1\n    var note_length_index23 = -1\n    var note_length_index24 = -1\n \
    \   var note_length_index25 = -1\n    var note_length_index26 = -1\n    var note_length_index27\
    \ = -1\n    var note_length_index28 = -1\n    var note_length_index29 = -1\n \
    \   var note_length_index30 = -1\n    var note_length_index31 = -1\n    var note_length_index32\
    \ = -1\n    var note_length_index33 = -1\n    var note_length_index34 = -1\n \
    \   var note_length_index35 = -1\n    var note_length_index36 = -1\n    var note_length_index37\
    \ = -1\n    var note_length_index38 = -1\n    var note_length_index39 = -1\n \
    \   var note_length_index40 = -1\n    var note_length_index41 = -1\n    var note_length_index42\
    \ = -1\n    var note_length_index43 = -1\n    var note_length_index44 = -1\n \
    \   var note_length_index45 = -1\n    var note_length_index46 = -1\n    var note_length_index47\
    \ = -1\n    var note_length_index48 = -1\n    var note_length_index49 = -1\n \
    \   var note_length_index50 = -1\n    var note_length_index51 = -1\n    var note_length_index52\
    \ = -1\n    var note_length_index53 = -1\n    var note_length_index54 = -1\n \
    \   var note_length_index55 = -1\n    var note_length_index56 = -1\n    var note_length_index57\
    \ = -1\n    var note_length_index58 = -1\n    var note_length_index59 = -1\n \
    \   var note_length_index60 = -1\n    var note_length_index61 = -1\n    var note_length_index62\
    \ = -1\n    var note_length_index63 = -1\n    var note_length_index64 = -1\n \
    \   var note_length_index65 = -1\n    var note_length_index66 = -1\n    var note_length\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3pkhd4ak.swift:82:9: error: type annotation missing in pattern\n\
    \    var note_length\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes = [Int]()\n    var beats = 0\n    var note\
    \ = \"\"\n    var last_note = \"\"\n    var last_beat = 0\n    var last_beat_type\
    \ = \"\"\n    for c in music_string {\n        if c == 'o' {\n            if note\
    \ != \"\" {\n                notes.append(beats)\n                beats = 0\n\
    \                note = \"\"\n            }\n            last_note = c\n     \
    \       last_beat = 0\n            last_beat_type = \"whole\"\n        } else\
    \ if c == 'o|' {\n            if note != \"\" {\n                notes.append(beats)\n\
    \                beats = 0\n                note = \"\"\n            }\n     \
    \       last_note = c\n            last_beat = 0\n            last_beat_type =\
    \ \"half\"\n        } else if c == '.|' {\n            if note != \"\" {\n   \
    \             notes.append(beats)\n                beats = 0\n               \
    \ note = \"\"\n            }\n            last_note = c\n            last_beat\
    \ = 0\n            last_beat_type = \"quarter\"\n        } else {\n          \
    \  beats += 1\n            note += c\n        }\n    }\n    notes.append(beats)\n\
    \    return notes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphl1zuzg_.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmphl1zuzg_.swift:26:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o|' {\n                       ^~~~\n              \
    \         \"o|\"\n/tmp/tmphl1zuzg_.swift:35:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.|' {\n                       ^~~~\n\
    \                       \".|\"\n/tmp/tmphl1zuzg_.swift:23:25: error: cannot assign\
    \ value of type 'Character' to type 'String'\n            last_note = c\n    \
    \                    ^\n/tmp/tmphl1zuzg_.swift:26:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n        } else\
    \ if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmphl1zuzg_.swift:26:21: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        } else if c == 'o|' {\n              \
    \      ^\n/tmp/tmphl1zuzg_.swift:32:25: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            last_note = c\n                        ^\n/tmp/tmphl1zuzg_.swift:35:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == '.|' {\n                  ~ ^  ~~~~\n/tmp/tmphl1zuzg_.swift:35:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == '.|' {\n  \
    \                  ^\n/tmp/tmphl1zuzg_.swift:41:25: error: cannot assign value\
    \ of type 'Character' to type 'String'\n            last_note = c\n          \
    \              ^\n/tmp/tmphl1zuzg_.swift:46:21: error: cannot convert value of\
    \ type 'Character' to expected argument type 'String'\n            note += c\n\
    \                    ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var note = music_string[0]\n\
    \    var rest = music_string\n    for _ in 0..<music_string.count {\n        if\
    \ rest == \"\" {\n            break\n        }\n        if rest == \"o\" {\n \
    \           beats.append(4)\n            rest = rest[1..<rest.count]\n       \
    \ } else if rest == \"o|\" {\n            beats.append(2)\n            rest =\
    \ rest[1..<rest.count]\n        } else if rest == \".|\" {\n            beats.append(1)\n\
    \            rest = rest[1..<rest.count]\n        } else {\n            beats.append(0)\n\
    \            rest = rest[1..<rest.count]\n        }\n        note = note.next!\n\
    \    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpme50gekw.swift:11:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var note = music_string[0]\n\
    \               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpme50gekw.swift:19:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n            rest = rest[1..<rest.count]\n                  \
    \ ^~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript<R>(bounds: R) -> String where\
    \ R : RangeExpression, R.Bound == Int { get }\n           ^\n/tmp/tmpme50gekw.swift:22:20:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an integer\
    \ range, use a String.Index range instead.\n            rest = rest[1..<rest.count]\n\
    \                   ^~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript<R>(bounds:\
    \ R) -> String where R : RangeExpression, R.Bound == Int { get }\n           ^\n\
    /tmp/tmpme50gekw.swift:25:20: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an integer range, use a String.Index range instead.\n          \
    \  rest = rest[1..<rest.count]\n                   ^~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n/tmp/tmpme50gekw.swift:28:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an integer range, use a String.Index\
    \ range instead.\n            rest = rest[1..<rest.count]\n                  \
    \ ^~~~~~~~~~~~~~~~~~~~\nSwift.String:5:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript<R>(bounds: R) -> String where\
    \ R : RangeExpression, R.Bound == Int { get }\n           ^\n/tmp/tmpme50"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var notes_count = 0\n    var note = \"\"\n    var\
    \ last_note = \"\"\n    var last_beat = 0\n    var last_beats = 0\n    var last_notes\
    \ = 0\n    var last_notes_count = 0\n    var last_notes_beat = 0\n    var last_notes_beats\
    \ = 0\n    var last_notes_note = 0\n    var last_notes_notes = 0\n    var last_notes_notes_count\
    \ = 0\n    var last_notes_notes_beat = 0\n    var last_notes_notes_beats = 0\n\
    \    var last_notes_notes_note = 0\n    var last_notes_notes_notes = 0\n    var\
    \ last_notes_notes_notes_count = 0\n    var last_notes_notes_notes_beat = 0\n\
    \    var last_notes_notes_notes_beats = 0\n    var last_notes_notes_notes_note\
    \ = 0\n    var last_notes_notes_notes_notes = 0\n    var last_notes_notes_notes_notes_count\
    \ = 0\n    var last_notes_notes_notes_notes_beat = 0\n    var last_notes_notes_notes_notes_beats\
    \ = 0\n    var last_notes_notes_notes_notes_note = 0\n    var last_notes_notes_notes_notes_notes\
    \ = 0\n    var last_notes_notes_notes_notes_notes_count = 0\n    var last_notes_notes_notes_notes_notes_beat\
    \ = 0\n    var last_notes_notes_notes_notes_notes_beats = 0\n    var last_notes_notes_notes_notes_notes_note\
    \ = 0\n    var last_notes_notes_notes_notes_notes_notes = 0\n    var last_notes_notes_notes_notes_notes_notes_count\
    \ = 0\n    var last_notes_notes_notes_notes_notes_notes_beat = 0\n    var last_notes_notes_notes_notes_notes_notes_beats\
    \ = 0\n    var last_notes_notes_notes_notes_notes_notes_note = 0\n    var last_notes_notes_notes_notes_notes_notes_notes\
    \ = 0\n    var last_notes_notes_notes_notes_notes_notes_notes_count = 0\n    var\
    \ last_notes_notes_notes_notes_notes_notes_notes_beat = 0\n    var last_notes_notes_notes_notes_notes_notes_notes_beats\
    \ = 0\n    var last_notes_notes_notes_notes_notes_notes_notes_note = 0\n    var\
    \ last_notes_notes_notes_notes_notes_notes_notes_notes = 0\n    var last_notes_notes_notes_notes_notes_notes_notes_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp98eju4sl.swift:54:9: error: type annotation missing in pattern\n\
    \    var last_notes_notes_notes_notes_notes_notes_notes_\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_octave = 0\n    var current_length\
    \ = 0\n    for c in music_string {\n        switch c {\n        case \"o\":\n\
    \            current_length = 4\n        case \"o|\":\n            current_length\
    \ = 2\n        case \".|\":\n            current_length = 1\n        default:\n\
    \            current_length = 0\n        }\n        if current_length > 0 {\n\
    \            beats.append(current_beat)\n            current_beat += current_length\n\
    \        }\n        switch current_note {\n        case \"o\":\n            current_note\
    \ = \"o\"\n        case \"o|\":\n            current_note = \"o|\"\n        case\
    \ \".|\":\n            current_note = \".|\"\n        default:\n            current_note\
    \ = \"\"\n        }\n        switch current_octave {\n        case 0:\n      \
    \      current_octave = 0\n        case \"1\":\n            current_octave = 1\n\
    \        case \"2\":\n            current_octave = 2\n        case \"3\":\n  \
    \          current_octave = 3\n        case \"4\":\n            current_octave\
    \ = 4\n        case \"5\":\n            current_octave = 5\n        case \"6\"\
    :\n            current_octave = 6\n        case \"7\":\n            current_octave\
    \ = 7\n        case \"8\":\n            current_octave = 8\n        case \"9\"\
    :\n            current_octave = 9\n        case \"10\":\n            current_octave\
    \ = 10\n        case \"11\":\n            current_octave = 11\n        case \"\
    12\":\n            current_octave = 12\n        case \"13\":\n            current_octave\
    \ = 13\n        case \"14\":\n            current_octave = 14\n        case \"\
    15\":\n            current_octave = 15\n        case \"16\":\n            current_octave\
    \ = 16\n        case \"17\":\n            current_octave = 17\n        case \"\
    18\":\n            current_octave = 18\n        case \"19\":\n            current_octave\
    \ = 19\n        case \"20\":\n            current_octave = 20\n        case \"\
    21\":\n            current_octave = 21\n        case \"22\":\n            current_octave\
    \ = 22\n        case \"23\":\n            current_octave = 23\n        case \"\
    24\":\n            current_octave = 24\n        case \"25\":\n            current_octave\
    \ = 25\n        case \"26\":\n            current_octave = 26\n        case \"\
    27\":\n            current_octave = 27\n        case \"28\":\n            current_octave\
    \ = 28\n        case \"29\":\n            current_octave = 29\n        case \"\
    30\":\n            current_octave = 30\n        case \"31\":\n            current_octave\
    \ = 31\n        case \"32\":\n            current_octave = 32\n        case \"\
    33\":\n            current_oct\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmphvcm0tv9.swift:128:87: error: expected '}' at end of brace statement\n\
    assert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\n                                                                \
    \                      ^\n/tmp/tmphvcm0tv9.swift:15:27: note: to match this opening\
    \ '{'\n    for c in music_string {\n                          ^\n/tmp/tmphvcm0tv9.swift:128:87:\
    \ error: expected '}' at end of brace statement\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\n                  \
    \                                                                    ^\n/tmp/tmphvcm0tv9.swift:9:49:\
    \ note: to match this opening '{'\nfunc parse_music(music_string: String) -> [Int]\
    \ {\n                                                ^\n/tmp/tmphvcm0tv9.swift:12:24:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var current_note = music_string[0]\n      \
    \                 ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmphvcm0tv9.swift:19:14: error: expression pattern\
    \ of type 'String' cannot match values of type 'Character'\n        case \"o|\"\
    :\n             ^~~~\n/tmp/tmphvcm0tv9.swift:21:14: error: expression pattern\
    \ of type 'String' cannot match values of type 'Character'\n        case \".|\"\
    :\n             ^~~~\n/tmp/tmphvcm0tv9.swift:33:14: error: expression pattern\
    \ of type 'String' cannot match values of type 'Character'\n        case \"o|\"\
    :\n             ^~~~\n/tmp/tmphvcm0tv9.swift:35:14: error: expression pattern\
    \ of type 'String' cannot match values of type 'Character'\n        case \".|\"\
    :\n             ^~~~\n/tmp/tmphvcm0tv9.swift:34:28: error: cannot assign value\
    \ of type 'String' to type 'Character'\n            current_note = \"o|\"\n  \
    \                         ^~~~\n/tmp/tmphvcm0tv9.swift:36:28: error: cannot assign\
    \ value of type 'String' to type 'Character'\n            current_note = \".|\"\
    \n                     "
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_string_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpux06ga6p.swift:28:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_string_value_index = 0\n\
    \        ^\n/tmp/tmpux06ga6p.swift:26:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string'\n    var\
    \ current_note_length_string_value_string_value_string_value_string = 0\n    \
    \    ^\n/tmp/tmpux06ga6p.swift:27:9: note: 'current_note_length_string_value_string_value_string_value_string'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n        ^\n/tmp/tmpux06ga6p.swift:30:9: error: invalid redeclaration\
    \ of 'current_note_length_string_value_string_value_string_value_index'\n    var\
    \ current_note_length_string_value_string_value_string_value_index = 0\n     \
    \   ^\n/tmp/tmpux06ga6p.swift:26:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:31:9: note: 'current_note_length_string_value_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_index'\n\
    \    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:32:9: note: 'current_note_length_string_value_s"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note.characters.count == 1\
    \ {\n            beats.append(4)\n        } else if note.characters.count == 2\
    \ {\n            beats.append(2)\n        } else if note.characters.count == 3\
    \ {\n            beats.append(1)\n        } else {\n            beats.append(0)\n\
    \        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpzheo8fm8.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpzheo8fm8.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_string_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpux06ga6p.swift:28:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_string_value_index = 0\n\
    \        ^\n/tmp/tmpux06ga6p.swift:26:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string'\n    var\
    \ current_note_length_string_value_string_value_string_value_string = 0\n    \
    \    ^\n/tmp/tmpux06ga6p.swift:27:9: note: 'current_note_length_string_value_string_value_string_value_string'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n        ^\n/tmp/tmpux06ga6p.swift:30:9: error: invalid redeclaration\
    \ of 'current_note_length_string_value_string_value_string_value_index'\n    var\
    \ current_note_length_string_value_string_value_string_value_index = 0\n     \
    \   ^\n/tmp/tmpux06ga6p.swift:26:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:31:9: note: 'current_note_length_string_value_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_index'\n\
    \    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:32:9: note: 'current_note_length_string_value_s"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var notes_index = 0\n    var notes_length_index =\
    \ 0\n    var notes_length_index2 = 0\n    var notes_length_index3 = 0\n    var\
    \ notes_length_index4 = 0\n    var notes_length_index5 = 0\n    var notes_length_index6\
    \ = 0\n    var notes_length_index7 = 0\n    var notes_length_index8 = 0\n    var\
    \ notes_length_index9 = 0\n    var notes_length_index10 = 0\n    var notes_length_index11\
    \ = 0\n    var notes_length_index12 = 0\n    var notes_length_index13 = 0\n  \
    \  var notes_length_index14 = 0\n    var notes_length_index15 = 0\n    var notes_length_index16\
    \ = 0\n    var notes_length_index17 = 0\n    var notes_length_index18 = 0\n  \
    \  var notes_length_index19 = 0\n    var notes_length_index20 = 0\n    var notes_length_index21\
    \ = 0\n    var notes_length_index22 = 0\n    var notes_length_index23 = 0\n  \
    \  var notes_length_index24 = 0\n    var notes_length_index25 = 0\n    var notes_length_index26\
    \ = 0\n    var notes_length_index27 = 0\n    var notes_length_index28 = 0\n  \
    \  var notes_length_index29 = 0\n    var notes_length_index30 = 0\n    var notes_length_index31\
    \ = 0\n    var notes_length_index32 = 0\n    var notes_length_index33 = 0\n  \
    \  var notes_length_index34 = 0\n    var notes_length_index35 = 0\n    var notes_length_index36\
    \ = 0\n    var notes_length_index37 = 0\n    var notes_length_index38 = 0\n  \
    \  var notes_length_index39 = 0\n    var notes_length_index40 = 0\n    var notes_length_index41\
    \ = 0\n    var notes_length_index42 = 0\n    var notes_length_index43 = 0\n  \
    \  var notes_length_index44 = 0\n    var notes_length_index45 = 0\n    var notes_length_index46\
    \ = 0\n    var notes_length_index47 = 0\n    var notes_length_index48 = 0\n  \
    \  var notes_length_index49 = 0\n    var notes_length_index50 = 0\n    var notes_length_index51\
    \ = 0\n    var notes_length_index52 = 0\n    var notes_length_index53 = 0\n  \
    \  var notes_length_index54 = 0\n    var notes_length_index55 = 0\n    var notes_length_index56\
    \ = 0\n    var notes_length_index57 = 0\n    var notes_length_index58 = 0\n  \
    \  var notes_length_index59 = 0\n    var notes_length_index60 = 0\n    var notes_length_index61\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpko9abj72.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpko9abj72.swift:11:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpko9abj72.swift:12:9:\
    \ warning: initialization of variable 'notes_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpko9abj72.swift:13:9: warning: initialization\
    \ of variable 'notes_index' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_index = 0\n    ~~~~^~~~~~~~~~~\n    _\n\
    /tmp/tmpko9abj72.swift:14:9: warning: initialization of variable 'notes_length_index'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index = 0\n    ~~~~^~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpko9abj72.swift:15:9:\
    \ warning: initialization of variable 'notes_length_index2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpko9abj72.swift:16:9: warning:\
    \ initialization of variable 'notes_length_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var notes_length_index3 = 0\n   \
    \ ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpko9abj72.swift:17:9: warning: initialization\
    \ of variable 'notes_length_index4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length_index4 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpko9abj72.swift:18:9: warning: initialization of variable 'notes_length_index5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpko9abj72.swift:19:9:\
    \ warning: initialization of variable 'notes_length_index6' was never used; consider\
    \ replacing with assi"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.characters\n\
    \    var beat = 0\n    var note = 0\n    var note_count = 0\n    var last_note\
    \ = 0\n    var last_beat = 0\n    var last_beat_count = 0\n    for note in notes\
    \ {\n        note_count = 0\n        if note == 'o' {\n            beat += 4\n\
    \            last_beat = beat\n            last_beat_count = note_count\n    \
    \    } else if note == 'o|' {\n            beat += 2\n            last_beat =\
    \ beat\n            last_beat_count = note_count\n        } else if note == '.|'\
    \ {\n            beat += 1\n            last_beat = beat\n            last_beat_count\
    \ = note_count\n        } else {\n            note_count += 1\n        }\n   \
    \     beats.append(beat)\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpll0slqge.swift:20:20: error: single-quoted string literal found,\
    \ use '\"'\n        if note == 'o' {\n                   ^~~\n               \
    \    \"o\"\n/tmp/tmpll0slqge.swift:24:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if note == 'o|' {\n                        \
    \  ^~~~\n                          \"o|\"\n/tmp/tmpll0slqge.swift:28:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if note == '.|'\
    \ {\n                          ^~~~\n                          \".|\"\n/tmp/tmpll0slqge.swift:11:30:\
    \ error: 'characters' is unavailable: Please use String directly\n    var notes\
    \ = music_string.characters\n                             ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpll0slqge.swift:24:24: error: binary operator\
    \ '==' cannot be applied to operands of type 'Character' and 'String'\n      \
    \  } else if note == 'o|' {\n                  ~~~~ ^  ~~~~\n/tmp/tmpll0slqge.swift:24:24:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if note == 'o|' {\n\
    \                       ^\n/tmp/tmpll0slqge.swift:28:24: error: binary operator\
    \ '==' cannot be applied to operands of type 'Character' and 'String'\n      \
    \  } else if note == '.|' {\n                  ~~~~ ^  ~~~~\n/tmp/tmpll0slqge.swift:28:24:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if note == '.|' {\n\
    \                       ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_count = 0\n    var last_note =\
    \ 0\n    var last_beat = 0\n    var last_note_count = 0\n    var last_last_note\
    \ = 0\n    var last_last_beat = 0\n    var last_last_note_count = 0\n    var last_last_last_note\
    \ = 0\n    var last_last_last_beat = 0\n    var last_last_last_note_count = 0\n\
    \    var last_last_last_last_note = 0\n    var last_last_last_last_beat = 0\n\
    \    var last_last_last_last_note_count = 0\n    var last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_beat = 0\n    var last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_note_count = 0\n    var last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note_count = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_note = 0\n    var last_last_last_last_last_last_last_beat\
    \ = 0\n    var last_last_last_last_last_last_last_note_count = 0\n    var last_last_last_last_last_last_last_last_note\
    \ = 0\n    var last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_note = 0\n    var\
    \ last_last_last_last_last_last_last_last_last_beat = 0\n    var last_last_last_last_last_last_last_last_last_note_count\
    \ = 0\n    var last_last_last_last_last_last_last_last_last_last_note = 0\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxg2kbzqf.swift:37:9: error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:34:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:38:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note_count'\n\
    \    var last_last_last_last_last_last_last_note_count = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last_note_count' previously declared here\n\
    \    var last_last_last_last_last_last_last_note_count = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:39:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:36:9:\
    \ note: 'last_last_last_last_last_last_last_last_note' previously declared here\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:40:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_beat'\n\
    \    var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:34:9:\
    \ note: 'last_last_last_last_last_last_last_beat' previously declared here\n \
    \   var last_last_last_last_last_last_last_beat = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:41:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_note_count'\n\
    \    var last_last_last_last_last_last_last_note_count = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:35:9:\
    \ note: 'last_last_last_last_last_last_last_note_count' previously declared here\n\
    \    var last_last_last_last_last_last_last_note_count = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:42:9:\
    \ error: invalid redeclaration of 'last_last_last_last_last_last_last_last_note'\n\
    \    var last_last_last_last_last_last_last_last_note = 0\n        ^\n/tmp/tmpxg2kbzqf.swift:36:9:\
    \ note: 'last_last_last_last_last_last_last_last_note' previously declared here\n\
    \    var last_last_last_last_last_last_last_last_note "
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array = [Int]()\n    var current_beat = 0\n\
    \    var current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc5fk9kst.swift:83:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpc5fk9kst.swift:14:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:15:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:16:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpc5fk9kst.swift:13:9:\
    \ note: 'current_note_"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_string = \"\"\n    var current_note_length\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_index = 0\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt1ff5iq0.swift:17:9: error: invalid redeclaration of 'current_note_length_string_index'\n\
    \    var current_note_length_string_index = 0\n        ^\n/tmp/tmpt1ff5iq0.swift:16:9:\
    \ note: 'current_note_length_string_index' previously declared here\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmpt1ff5iq0.swift:18:9: error: invalid redeclaration of\
    \ 'current_note_length_string_index'\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmpt1ff5iq0.swift:16:9: note: 'current_note_length_string_index'\
    \ previously declared here\n    var current_note_length_string_index = 0\n   \
    \     ^\n/tmp/tmpt1ff5iq0.swift:19:9: error: invalid redeclaration of 'current_note_length_string_index'\n\
    \    var current_note_length_string_index = 0\n        ^\n/tmp/tmpt1ff5iq0.swift:16:9:\
    \ note: 'current_note_length_string_index' previously declared here\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmpt1ff5iq0.swift:20:9: error: invalid redeclaration of\
    \ 'current_note_length_string_index'\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmpt1ff5iq0.swift:16:9: note: 'current_note_length_string_index'\
    \ previously declared here\n    var current_note_length_string_index = 0\n   \
    \     ^\n/tmp/tmpt1ff5iq0.swift:21:9: error: invalid redeclaration of 'current_note_length_string_index'\n\
    \    var current_note_length_string_index = 0\n        ^\n/tmp/tmpt1ff5iq0.swift:16:9:\
    \ note: 'current_note_length_string_index' previously declared here\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmpt1ff5iq0.swift:22:9: error: invalid redeclaration of\
    \ 'current_note_length_string_index'\n    var current_note_length_string_index\
    \ = 0\n        ^\n/tmp/tmpt1ff5iq0.swift:16:9: note: 'current_note_length_string_index'\
    \ previously declared here\n    var current_note_length_string_index = 0\n   \
    \     ^\n/tmp/tmpt1ff5iq0.swift:23:9: error: invalid redeclaration of 'current_note_length_string_index'\n\
    \    var current_note_length_string_index = 0\n        ^\n/tmp/tmpt1ff5iq0.swift:16:9:\
    \ note: 'current_note_length_string_index' previously declared h"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes = [Int]()\n    var beat = 0\n    for note\
    \ in music_string {\n        if note == \"o\" {\n            notes.append(beat)\n\
    \            beat = 0\n        } else if note == \"o|\" {\n            notes.append(beat)\n\
    \            beat = 0\n        } else if note == \".|\" {\n            notes.append(beat)\n\
    \            beat = 0\n        } else {\n            beat += 1\n        }\n  \
    \  }\n    return notes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpeg1d2h05.swift:16:24: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if note == \"o|\"\
    \ {\n                  ~~~~ ^  ~~~~\n/tmp/tmpeg1d2h05.swift:16:24: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if note == \"o|\" {\n                     \
    \  ^\n/tmp/tmpeg1d2h05.swift:19:24: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if note == \".|\"\
    \ {\n                  ~~~~ ^  ~~~~\n/tmp/tmpeg1d2h05.swift:19:24: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if note == \".|\" {\n                     \
    \  ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2dmb5ng_.swift:75:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var notes_length = 0\n    var notes_length_index = 0\n    var notes_length_index2\
    \ = 0\n    var notes_length_index3 = 0\n    var notes_length_index4 = 0\n    var\
    \ notes_length_index5 = 0\n    var notes_length_index6 = 0\n    var notes_length_index7\
    \ = 0\n    var notes_length_index8 = 0\n    var notes_length_index9 = 0\n    var\
    \ notes_length_index10 = 0\n    var notes_length_index11 = 0\n    var notes_length_index12\
    \ = 0\n    var notes_length_index13 = 0\n    var notes_length_index14 = 0\n  \
    \  var notes_length_index15 = 0\n    var notes_length_index16 = 0\n    var notes_length_index17\
    \ = 0\n    var notes_length_index18 = 0\n    var notes_length_index19 = 0\n  \
    \  var notes_length_index20 = 0\n    var notes_length_index21 = 0\n    var notes_length_index22\
    \ = 0\n    var notes_length_index23 = 0\n    var notes_length_index24 = 0\n  \
    \  var notes_length_index25 = 0\n    var notes_length_index26 = 0\n    var notes_length_index27\
    \ = 0\n    var notes_length_index28 = 0\n    var notes_length_index29 = 0\n  \
    \  var notes_length_index30 = 0\n    var notes_length_index31 = 0\n    var notes_length_index32\
    \ = 0\n    var notes_length_index33 = 0\n    var notes_length_index34 = 0\n  \
    \  var notes_length_index35 = 0\n    var notes_length_index36 = 0\n    var notes_length_index37\
    \ = 0\n    var notes_length_index38 = 0\n    var notes_length_index39 = 0\n  \
    \  var notes_length_index40 = 0\n    var notes_length_index41 = 0\n    var notes_length_index42\
    \ = 0\n    var notes_length_index43 = 0\n    var notes_length_index44 = 0\n  \
    \  var notes_length_index45 = 0\n    var notes_length_index46 = 0\n    var notes_length_index47\
    \ = 0\n    var notes_length_index48 = 0\n    var notes_length_index49 = 0\n  \
    \  var notes_length_index50 = 0\n    var notes_length_index51 = 0\n    var notes_length_index52\
    \ = 0\n    var notes_length_index53 = 0\n    var notes_length_index54 = 0\n  \
    \  var notes_length_index55 = 0\n    var notes_length_index56 = 0\n    var notes_length_index57\
    \ = 0\n    var notes_length_index58 = 0\n    var notes_length_index59 = 0\n  \
    \  var notes_length_index60 = 0\n    var notes_length_index61 = 0\n    var notes_length_index\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp4g2byb47.swift:74:9: error: type annotation missing in pattern\n\
    \    var notes_length_index\n        ^\n"
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var note_length = 0\n    var note = \"\"\n    for\
    \ c in music_string {\n        if c == '.' {\n            beats_count += 1\n \
    \           beats.append(beats_count)\n            notes.append(note)\n      \
    \      beats_count = 0\n            note = \"\"\n        } else if c == 'o' {\n\
    \            beats_count += 1\n            beats.append(beats_count)\n       \
    \     notes.append(note)\n            beats_count = 0\n            note = \"\"\
    \n        } else if c == '|' {\n            note_length += 1\n            note\
    \ += c\n        } else {\n            note += c\n        }\n    }\n    beats.append(beats_count)\n\
    \    notes.append(note)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp3yuy6hpp.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '.' {\n                ^~~\n                \".\"\n\
    /tmp/tmp3yuy6hpp.swift:22:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmp3yuy6hpp.swift:28:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '|' {\n                       ^~~\n\
    \                       \"|\"\n/tmp/tmp3yuy6hpp.swift:30:21: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            note\
    \ += c\n                    ^\n/tmp/tmp3yuy6hpp.swift:32:21: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            note\
    \ += c\n                    ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var note = music_string[0]\n\
    \    var beat = 0\n    var last_beat = 0\n    var last_note = music_string[0]\n\
    \    for c in music_string {\n        if c == '|' {\n            beat += 1\n \
    \           last_beat = beat\n            last_note = c\n        } else {\n  \
    \          if note == 'o' {\n                beats.append(beat)\n            \
    \    beat = 0\n                note = c\n            } else {\n              \
    \  if note != c {\n                    beats.append(beat)\n                  \
    \  beat = 0\n                    note = c\n                }\n            }\n\
    \        }\n    }\n    beats.append(beat)\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpq1r9s5vo.swift:16:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '|' {\n                ^~~\n                \"|\"\n\
    /tmp/tmpq1r9s5vo.swift:21:24: error: single-quoted string literal found, use '\"\
    '\n            if note == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmpq1r9s5vo.swift:11:16: error: 'subscript(_:)' is unavailable:\
    \ cannot subscript String with an Int, use a String.Index instead.\n    var note\
    \ = music_string[0]\n               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note:\
    \ 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:\
    \ Int) -> Character { get }\n           ^\n/tmp/tmpq1r9s5vo.swift:14:21: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n    var last_note = music_string[0]\n                    ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpq1r9s5vo.swift:13:9:\
    \ warning: variable 'last_beat' was written to, but never read\n    var last_beat\
    \ = 0\n        ^\n/tmp/tmpq1r9s5vo.swift:14:9: warning: variable 'last_note' was\
    \ written to, but never read\n    var last_note = music_string[0]\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        switch note {\n        case \"o\":\n\
    \            beats.append(4)\n        case \"o|\":\n            beats.append(2)\n\
    \        case \".|\":\n            beats.append(1)\n        default:\n       \
    \     fatalError(\"Unexpected note in music string: \\(note)\")\n        }\n \
    \   }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp74jxooef.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_value = 0\n    var current_note_length_value_index\
    \ = 0\n    var current_note_length_value_value = 0\n    var current_note_length_value_value_index\
    \ = 0\n    var current_note_length_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var current_note_length_value_value_value_index\
    \ = 0\n    var current_note_length_value_value_value_value = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmppy_bwuyg.swift:64:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmppy_bwuyg.swift:22:9: error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:23:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:24:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:25:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value' previously declared here\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:26:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_index'\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:20:9:\
    \ note: 'current_note_length_value_value_value_index' previously declared here\n\
    \    var current_note_length_value_value_value_index = 0\n        ^\n/tmp/tmppy_bwuyg.swift:27:9:\
    \ error: invalid redeclaration of 'current_note_length_value_value_value_value'\n\
    \    var current_note_length_value_value_value_value = 0\n        ^\n/tmp/tmppy_bwuyg.swift:21:9:\
    \ note: 'current_note_length_value_value_value_value"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var note = music_string[0]\n\
    \    var beat = 0\n    var beats_count = 0\n    var last_beat = 0\n    var last_beats_count\
    \ = 0\n    var last_note = music_string[0]\n    for char in music_string {\n \
    \       if char == \"o\" {\n            beats_count += 1\n            last_beats_count\
    \ += 1\n            last_beat = beat\n            last_note = note\n        }\
    \ else if char == \"|\" {\n            beats_count += 1\n            last_beats_count\
    \ += 1\n            last_beat = beat\n            last_note = note\n        }\
    \ else if char == \".\" {\n            beats_count += 1\n            last_beats_count\
    \ += 1\n            last_beat = beat\n            last_note = note\n        }\
    \ else {\n            beats_count += 1\n            last_beats_count += 1\n  \
    \          last_beat = beat\n            last_note = note\n            beats.append(beats_count)\n\
    \            beat = 0\n            note = char\n        }\n    }\n    beats.append(beats_count)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1bsed9qf.swift:11:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var note = music_string[0]\n\
    \               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp1bsed9qf.swift:16:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var last_note = music_string[0]\n                    ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp1bsed9qf.swift:14:9:\
    \ warning: variable 'last_beat' was written to, but never read\n    var last_beat\
    \ = 0\n        ^\n/tmp/tmp1bsed9qf.swift:16:9: warning: variable 'last_note' was\
    \ written to, but never read\n    var last_note = music_string[0]\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = music_string.components(separatedBy:\
    \ \"|\")\n    for note in notes {\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n        if note.count > 0 {\n        \
    \    let beat = note.count\n            beats.append(beat)\n        }\n    }\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdkwy9usd.swift:11:30: error: value of type 'String' has no member\
    \ 'components'\n    var notes = music_string.components(separatedBy: \"|\")\n\
    \                ~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpdkwy9usd.swift:13:48: error:\
    \ cannot find 'CharacterSet' in scope\n        let note = note.trimmingCharacters(in:\
    \ CharacterSet.whitespacesAndNewlines)\n                                     \
    \          ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var note_index = 0\n    var note_length\
    \ = -1\n    var note_length_index = 0\n    var note_length_value = -1\n    var\
    \ note_length_value_index = 0\n    var note_length_value_value = -1\n    var note_length_value_value_index\
    \ = 0\n    var note_length_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value_index\
    \ = 0\n    var note_length_value_value_value_value = -1\n    var note_length_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwisi0h2w.swift:24:9: error: invalid redeclaration of 'note_length_value_value_value_index'\n\
    \    var note_length_value_value_value_index = 0\n        ^\n/tmp/tmpwisi0h2w.swift:22:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpwisi0h2w.swift:25:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = -1\n        ^\n/tmp/tmpwisi0h2w.swift:23:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = -1\n        ^\n/tmp/tmpwisi0h2w.swift:26:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpwisi0h2w.swift:22:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpwisi0h2w.swift:27:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = -1\n        ^\n/tmp/tmpwisi0h2w.swift:23:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = -1\n        ^\n/tmp/tmpwisi0h2w.swift:28:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpwisi0h2w.swift:22:9:\
    \ note: 'note_length_value_value_value_index' previously declared here\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tmpwisi0h2w.swift:29:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_value'\n    var\
    \ note_length_value_value_value_value = -1\n        ^\n/tmp/tmpwisi0h2w.swift:23:9:\
    \ note: 'note_length_value_value_value_value' previously declared here\n    var\
    \ note_length_value_value_value_value = -1\n        ^\n/tmp/tmpwisi0h2w.swift:30:9:\
    \ error: invalid redeclaration of 'note_length_value_value_value_index'\n    var\
    \ note_length_value_value_value_index = 0\n        ^\n/tmp/tm"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var note_count = 0\n    var note_index\
    \ = 0\n    var note_index2 = 0\n    var note_index3 = 0\n    var note_index4 =\
    \ 0\n    var note_index5 = 0\n    var note_index6 = 0\n    var note_index7 = 0\n\
    \    var note_index8 = 0\n    var note_index9 = 0\n    var note_index10 = 0\n\
    \    var note_index11 = 0\n    var note_index12 = 0\n    var note_index13 = 0\n\
    \    var note_index14 = 0\n    var note_index15 = 0\n    var note_index16 = 0\n\
    \    var note_index17 = 0\n    var note_index18 = 0\n    var note_index19 = 0\n\
    \    var note_index20 = 0\n    var note_index21 = 0\n    var note_index22 = 0\n\
    \    var note_index23 = 0\n    var note_index24 = 0\n    var note_index25 = 0\n\
    \    var note_index26 = 0\n    var note_index27 = 0\n    var note_index28 = 0\n\
    \    var note_index29 = 0\n    var note_index30 = 0\n    var note_index31 = 0\n\
    \    var note_index32 = 0\n    var note_index33 = 0\n    var note_index34 = 0\n\
    \    var note_index35 = 0\n    var note_index36 = 0\n    var note_index37 = 0\n\
    \    var note_index38 = 0\n    var note_index39 = 0\n    var note_index40 = 0\n\
    \    var note_index41 = 0\n    var note_index42 = 0\n    var note_index43 = 0\n\
    \    var note_index44 = 0\n    var note_index45 = 0\n    var note_index46 = 0\n\
    \    var note_index47 = 0\n    var note_index48 = 0\n    var note_index49 = 0\n\
    \    var note_index50 = 0\n    var note_index51 = 0\n    var note_index52 = 0\n\
    \    var note_index53 = 0\n    var note_index54 = 0\n    var note_index55 = 0\n\
    \    var note_index56 = 0\n    var note_index57 = 0\n    var note_index58 = 0\n\
    \    var note_index59 = 0\n    var note_index60 = 0\n    var note_index61 = 0\n\
    \    var note_index62 = 0\n    var note_index63 = 0\n    var note_index64 = 0\n\
    \    var note_index65 = 0\n    var note_index66 = 0\n    var note_index67 = 0\n\
    \    var note_index68 = 0\n    var note_index69 = 0\n    var note_index70 = 0\n\
    \    var note_index71 = 0\n    var note_index72 = 0\n    var note_index73 = 0\n\
    \    var note_index74 = 0\n    var note_index75 = 0\n    var note_index76 = 0\n\
    \    var note_index77 = 0\n    var note_index78 = 0\n    var note_index79 = 0\n\
    \    var note_index80 = 0\n    var note_index81 = 0\n\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpkg9da5p_.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpkg9da5p_.swift:11:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpkg9da5p_.swift:12:9:\
    \ warning: initialization of variable 'beat' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpkg9da5p_.swift:13:9: warning: initialization of variable 'note' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var note\
    \ = 0\n    ~~~~^~~~\n    _\n/tmp/tmpkg9da5p_.swift:14:9: warning: initialization\
    \ of variable 'note_count' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var note_count = 0\n    ~~~~^~~~~~~~~~\n    _\n/tmp/tmpkg9da5p_.swift:15:9:\
    \ warning: initialization of variable 'note_index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index = 0\n    ~~~~^~~~~~~~~~\n\
    \    _\n/tmp/tmpkg9da5p_.swift:16:9: warning: initialization of variable 'note_index2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index2 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpkg9da5p_.swift:17:9:\
    \ warning: initialization of variable 'note_index3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index3 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpkg9da5p_.swift:18:9: warning: initialization of variable 'note_index4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note_index4 = 0\n    ~~~~^~~~~~~~~~~\n    _\n/tmp/tmpkg9da5p_.swift:19:9:\
    \ warning: initialization of variable 'note_index5' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note_index5 = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpkg9da5p_.swift:20:9: warning: initialization of variable 'note_index6'\
    \ was never used; co"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_length = -1\n    for c in music_string\
    \ {\n        if c == \"o\" {\n            if current_note != \"\" {\n        \
    \        beats.append(current_beat)\n                current_beat = 0\n      \
    \          current_note = \"\"\n                current_note_length = -1\n   \
    \         }\n        } else if c == \"|\" {\n            if current_note != \"\
    \" {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_length\
    \ = -1\n            }\n        } else if c == \".\" {\n            if current_note\
    \ != \"\" {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_length\
    \ = -1\n            }\n        } else if c == \"o|\" {\n            if current_note\
    \ != \"\" {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_length\
    \ = -1\n            }\n        } else if c == \".|\" {\n            if current_note\
    \ != \"\" {\n                beats.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_length\
    \ = -1\n            }\n        } else if c == \"b\" {\n            if current_note\
    \ != \"\" {\n                current_beat = 1\n            }\n        } else if\
    \ c == \"#\" {\n            if current_note != \"\" {\n                current_beat\
    \ = 2\n            }\n        } else if c == \"b#\" {\n            if current_note\
    \ != \"\" {\n                current_beat = 3\n            }\n        } else if\
    \ c == \"#b\" {\n            if current_note != \"\" {\n                current_beat\
    \ = 4\n            }\n        } else if c == \"b##\" {\n            if current_note\
    \ != \"\" {\n                current_beat = 5\n            }\n        } else if\
    \ c == \"##b\" {\n            if current_note != \"\" {\n                current_beat\
    \ = 6\n            }\n        } else if c == \"b##b\" {\n            if current_note\
    \ != \"\" {\n                current_beat = 7\n            }\n        } else if\
    \ c == \"##b#\" {\n            if current_note != \"\" {\n                current_beat\
    \ = 8\n            }\n        } else if c == \"b##b#\" {\n            if current_note\
    \ != \"\" {\n                current_beat = 9\n            }\n        } else if\
    \ c == \"##b##\" {\n            if current_note != \"\" {\n                current_beat\
    \ = 10\n            }\n        } else if c == \"b##b##\" {\n            if current_note\
    \ != \"\" {\n                current_beat = 11\n            }\n        } else\
    \ if c == \"##b##b\" {\n            if current_note != \"\" {\n              \
    \  current_beat = 12\n            }\n        } else if c == \"b##b##\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxij8_fiq.swift:98:24: error: unterminated string literal\n    \
    \    } else if c == \"b##b##\n                       ^\n/tmp/tmpxij8_fiq.swift:118:87:\
    \ error: expected '}' at end of brace statement\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\n                  \
    \                                                                    ^\n/tmp/tmpxij8_fiq.swift:9:49:\
    \ note: to match this opening '{'\nfunc parse_music(music_string: String) -> [Int]\
    \ {\n                                                ^\n/tmp/tmpxij8_fiq.swift:36:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \"o|\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmpxij8_fiq.swift:36:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \"o|\" {\n                    ^\n/tmp/tmpxij8_fiq.swift:43:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \".|\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmpxij8_fiq.swift:43:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \".|\" {\n                    ^\n/tmp/tmpxij8_fiq.swift:58:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \"b#\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmpxij8_fiq.swift:58:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \"b#\" {\n                    ^\n/tmp/tmpxij8_fiq.swift:62:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \"#b\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmpxij8_fiq.swift:62:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \"#b\" {\n                "
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array: [Int] = []\n    var current_beat =\
    \ 0\n    var current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_index = 0\n  \
    \  var current_note_length_string_value_string_value_string_value = 0\n    var\
    \ current_note_length_string_value_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_string_value_index = 0\n\
    \    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpbebh1z_q.swift:24:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmpbebh1z_q.swift:22:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpbebh1z_q.swift:25:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string'\n    var current_note_length_string_value_string_value_string\
    \ = \"\"\n        ^\n/tmp/tmpbebh1z_q.swift:23:9: note: 'current_note_length_string_value_string_value_string'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string\
    \ = \"\"\n        ^\n/tmp/tmpbebh1z_q.swift:26:9: error: invalid redeclaration\
    \ of 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpbebh1z_q.swift:22:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpbebh1z_q.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_index'\n    var\
    \ current_note_length_string_value_string_value_string_value_index = 0\n     \
    \   ^\n/tmp/tmpbebh1z_q.swift:28:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpbebh1z_q.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpbebh1z_q.swift:32:9: note: 'current_note_length_string_value_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = Int()\n    var notes = [Int]()\n    var notes_count = 0\n    var notes_string\
    \ = \"\"\n    var notes_string2 = \"\"\n    var notes_string3 = \"\"\n    var\
    \ notes_string4 = \"\"\n    var notes_string5 = \"\"\n    var notes_string6 =\
    \ \"\"\n    var notes_string7 = \"\"\n    var notes_string8 = \"\"\n    var notes_string9\
    \ = \"\"\n    var notes_string10 = \"\"\n    var notes_string11 = \"\"\n    var\
    \ notes_string12 = \"\"\n    var notes_string13 = \"\"\n    var notes_string14\
    \ = \"\"\n    var notes_string15 = \"\"\n    var notes_string16 = \"\"\n    var\
    \ notes_string17 = \"\"\n    var notes_string18 = \"\"\n    var notes_string19\
    \ = \"\"\n    var notes_string20 = \"\"\n    var notes_string21 = \"\"\n    var\
    \ notes_string22 = \"\"\n    var notes_string23 = \"\"\n    var notes_string24\
    \ = \"\"\n    var notes_string25 = \"\"\n    var notes_string26 = \"\"\n    var\
    \ notes_string27 = \"\"\n    var notes_string28 = \"\"\n    var notes_string29\
    \ = \"\"\n    var notes_string30 = \"\"\n    var notes_string31 = \"\"\n    var\
    \ notes_string32 = \"\"\n    var notes_string33 = \"\"\n    var notes_string34\
    \ = \"\"\n    var notes_string35 = \"\"\n    var notes_string36 = \"\"\n    var\
    \ notes_string37 = \"\"\n    var notes_string38 = \"\"\n    var notes_string39\
    \ = \"\"\n    var notes_string40 = \"\"\n    var notes_string41 = \"\"\n    var\
    \ notes_string42 = \"\"\n    var notes_string43 = \"\"\n    var notes_string44\
    \ = \"\"\n    var notes_string45 = \"\"\n    var notes_string46 = \"\"\n    var\
    \ notes_string47 = \"\"\n    var notes_string48 = \"\"\n    var notes_string49\
    \ = \"\"\n    var notes_string50 = \"\"\n    var notes_string51 = \"\"\n    var\
    \ notes_string52 = \"\"\n    var notes_string53 = \"\"\n    var notes_string54\
    \ = \"\"\n    var notes_string55 = \"\"\n    var notes_string56 = \"\"\n    var\
    \ notes_string57 = \"\"\n    var notes_string58 = \"\"\n    var notes_string59\
    \ = \"\"\n    var notes_string60 = \"\"\n    var notes_string61 = \"\"\n    var\
    \ notes_string62 = \"\"\n    var notes_string63 = \"\"\n    var notes_string64\
    \ = \"\"\n    var notes_string65 = \"\"\n    var notes_string66 = \"\"\n    var\
    \ notes_string67 = \"\"\n    var note\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpqof3sk0r.swift:82:9: error: type annotation missing in pattern\n\
    \    var note\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2dmb5ng_.swift:75:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2dmb5ng_.swift:75:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes = [Int]()\n    var beats = 0\n    var note\
    \ = Int()\n    var last_note = Int()\n    var last_beat = 0\n    var last_beats\
    \ = 0\n    var last_beats_count = 0\n    var last_beats_count_count = 0\n    var\
    \ last_beats_count_count_count = 0\n    var last_beats_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count = 0\n    var last_beats_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count = 0\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpj300wyzq.swift:29:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string.characters.first!\n    var current_beats = 0\n \
    \   var last_note = music_string.characters.last!\n    \n    for character in\
    \ music_string.characters {\n        \n        if character == current_note {\n\
    \            beats.append(current_beats)\n            current_beats = 0\n    \
    \        current_note = last_note\n        } else {\n            current_beats\
    \ += 1\n        }\n        last_note = character\n    }\n    beats.append(current_beats)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt5dhm3hx.swift:12:37: error: 'characters' is unavailable: Please\
    \ use String directly\n    var current_note = music_string.characters.first!\n\
    \                                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt5dhm3hx.swift:14:34: error: 'characters' is unavailable:\
    \ Please use String directly\n    var last_note = music_string.characters.last!\n\
    \                                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt5dhm3hx.swift:16:35: error: 'characters' is unavailable:\
    \ Please use String directly\n    for character in music_string.characters {\n\
    \                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpt5dhm3hx.swift:11:9: warning: initialization of variable\
    \ 'current_beat' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ note = \"\"\n    var last_note = \"\"\n    var last_beat = 0\n    var last_beat_count\
    \ = 0\n    var last_beat_count = 0\n    var last_beat_count_2 = 0\n    var last_beat_count_3\
    \ = 0\n    var last_beat_count_4 = 0\n    var last_beat_count_5 = 0\n    var last_beat_count_6\
    \ = 0\n    var last_beat_count_7 = 0\n    var last_beat_count_8 = 0\n    var last_beat_count_9\
    \ = 0\n    var last_beat_count_10 = 0\n    var last_beat_count_11 = 0\n    var\
    \ last_beat_count_12 = 0\n    var last_beat_count_13 = 0\n    var last_beat_count_14\
    \ = 0\n    var last_beat_count_15 = 0\n    var last_beat_count_16 = 0\n    var\
    \ last_beat_count_17 = 0\n    var last_beat_count_18 = 0\n    var last_beat_count_19\
    \ = 0\n    var last_beat_count_20 = 0\n    var last_beat_count_21 = 0\n    var\
    \ last_beat_count_22 = 0\n    var last_beat_count_23 = 0\n    var last_beat_count_24\
    \ = 0\n    var last_beat_count_25 = 0\n    var last_beat_count_26 = 0\n    var\
    \ last_beat_count_27 = 0\n    var last_beat_count_28 = 0\n    var last_beat_count_29\
    \ = 0\n    var last_beat_count_30 = 0\n    var last_beat_count_31 = 0\n    var\
    \ last_beat_count_32 = 0\n    var last_beat_count_33 = 0\n    var last_beat_count_34\
    \ = 0\n    var last_beat_count_35 = 0\n    var last_beat_count_36 = 0\n    var\
    \ last_beat_count_37 = 0\n    var last_beat_count_38 = 0\n    var last_beat_count_39\
    \ = 0\n    var last_beat_count_40 = 0\n    var last_beat_count_41 = 0\n    var\
    \ last_beat_count_42 = 0\n    var last_beat_count_43 = 0\n    var last_beat_count_44\
    \ = 0\n    var last_beat_count_45 = 0\n    var last_beat_count_46 = 0\n    var\
    \ last_beat_count_47 = 0\n    var last_beat_count_48 = 0\n    var last_beat_count_49\
    \ = 0\n    var last_beat_count_50 = 0\n    var last_beat_count_51 = 0\n    var\
    \ last_beat_count_52 = 0\n    var last_beat_count_53 = 0\n    var last_beat_count_54\
    \ = 0\n    var last_beat_count_55 = 0\n    var last_beat_count_56 = 0\n    var\
    \ last_beat_count_57 = 0\n    var last_beat_count_58 = 0\n    var last_beat_count_59\
    \ = 0\n    var last_beat_count_60 = 0\n    var last_\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp7sl2hrf_.swift:16:9: error: invalid redeclaration of 'last_beat_count'\n\
    \    var last_beat_count = 0\n        ^\n/tmp/tmp7sl2hrf_.swift:15:9: note: 'last_beat_count'\
    \ previously declared here\n    var last_beat_count = 0\n        ^\n/tmp/tmp7sl2hrf_.swift:76:9:\
    \ error: type annotation missing in pattern\n    var last_\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array: [Int] = []\n    var current_beat =\
    \ 0\n    var current_note = \"\"\n    var current_note_index = 0\n    for c in\
    \ music_string {\n        if c == \"o\" {\n            if current_note != \"\"\
    \ {\n                beats_array.append(current_beat)\n                current_beat\
    \ = 0\n                current_note = \"\"\n                current_note_index\
    \ = 0\n            }\n        } else if c == \"o|\" {\n            if current_note\
    \ != \"\" {\n                beats_array.append(current_beat)\n              \
    \  current_beat = 0\n                current_note = \"\"\n                current_note_index\
    \ = 0\n            }\n        } else if c == \".|\" {\n            if current_note\
    \ != \"\" {\n                beats_array.append(current_beat)\n              \
    \  current_beat = 0\n                current_note = \"\"\n                current_note_index\
    \ = 0\n            }\n        } else {\n            if current_note == \"\" {\n\
    \                current_note = c\n                current_note_index = 0\n  \
    \          } else {\n                current_note_index += 1\n               \
    \ current_note += c\n            }\n        }\n        current_beat += 1\n   \
    \ }\n    beats_array.append(current_beat)\n    return beats_array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpxeuvhqae.swift:22:21: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if c == \"o|\"\
    \ {\n                  ~ ^  ~~~~\n/tmp/tmpxeuvhqae.swift:22:21: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if c == \"o|\" {\n                    ^\n/tmp/tmpxeuvhqae.swift:29:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \".|\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmpxeuvhqae.swift:29:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \".|\" {\n                    ^\n/tmp/tmpxeuvhqae.swift:38:32:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \      current_note = c\n                               ^\n/tmp/tmpxeuvhqae.swift:42:33:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \                current_note += c\n                                ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes: [Int] = []\n    var beats = 0\n    var note\
    \ = \"\"\n    for c in music_string {\n        if c == 'o' {\n            notes.append(beats)\n\
    \            beats = 0\n            note = \"\"\n        } else if c == '|' {\n\
    \            notes.append(beats)\n            beats = 0\n            note = \"\
    \"\n        } else if c == '.' {\n            notes.append(beats)\n          \
    \  beats = 0\n            note = \"\"\n        } else {\n            note += c\n\
    \        }\n    }\n    notes.append(beats)\n    return notes\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpo2nc0wdb.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpo2nc0wdb.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpo2nc0wdb.swift:22:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmpo2nc0wdb.swift:27:21: error: cannot convert\
    \ value of type 'Character' to expected argument type 'String'\n            note\
    \ += c\n                    ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var note_length = 0\n    var note_index = 0\n    var\
    \ note_char = \"\"\n    var note_char_index = 0\n    var note_char_index2 = 0\n\
    \    var note_char_index3 = 0\n    var note_char_index4 = 0\n    var note_char_index5\
    \ = 0\n    var note_char_index6 = 0\n    var note_char_index7 = 0\n    var note_char_index8\
    \ = 0\n    var note_char_index9 = 0\n    var note_char_index10 = 0\n    var note_char_index11\
    \ = 0\n    var note_char_index12 = 0\n    var note_char_index13 = 0\n    var note_char_index14\
    \ = 0\n    var note_char_index15 = 0\n    var note_char_index16 = 0\n    var note_char_index17\
    \ = 0\n    var note_char_index18 = 0\n    var note_char_index19 = 0\n    var note_char_index20\
    \ = 0\n    var note_char_index21 = 0\n    var note_char_index22 = 0\n    var note_char_index23\
    \ = 0\n    var note_char_index24 = 0\n    var note_char_index25 = 0\n    var note_char_index26\
    \ = 0\n    var note_char_index27 = 0\n    var note_char_index28 = 0\n    var note_char_index29\
    \ = 0\n    var note_char_index30 = 0\n    var note_char_index31 = 0\n    var note_char_index32\
    \ = 0\n    var note_char_index33 = 0\n    var note_char_index34 = 0\n    var note_char_index35\
    \ = 0\n    var note_char_index36 = 0\n    var note_char_index37 = 0\n    var note_char_index38\
    \ = 0\n    var note_char_index39 = 0\n    var note_char_index40 = 0\n    var note_char_index41\
    \ = 0\n    var note_char_index42 = 0\n    var note_char_index43 = 0\n    var note_char_index44\
    \ = 0\n    var note_char_index45 = 0\n    var note_char_index46 = 0\n    var note_char_index47\
    \ = 0\n    var note_char_index48 = 0\n    var note_char_index49 = 0\n    var note_char_index50\
    \ = 0\n    var note_char_index51 = 0\n    var note_char_index52 = 0\n    var note_char_index53\
    \ = 0\n    var note_char_index54 = 0\n    var note_char_index55 = 0\n    var note_char_index56\
    \ = 0\n    var note_char_index57 = 0\n    var note_char_index58 = 0\n    var note_char_index59\
    \ = 0\n    var note_char_index60 = 0\n    var note_char_index61 = 0\n    var note_char_index62\
    \ = 0\n    var note_char_index63 = 0\n    var note_char_index64 = 0\n    var note_char_index65\
    \ = 0\n    var note_char_index66 = 0\n    var note_char_index67 = 0\n    var note_char_index68\
    \ = 0\n    var note_char\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp_mlkzydp.swift:84:9: error: type annotation missing in pattern\n\
    \    var note_char\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var note = music_string[0]\n\
    \    var rest = music_string\n    for _ in 0..<music_string.count {\n        if\
    \ rest == \".\" {\n            beats.append(4)\n            rest = \"\"\n    \
    \    } else if rest == \"o\" {\n            beats.append(4)\n            rest\
    \ = \"\"\n        } else if rest == \"o|\" {\n            beats.append(2)\n  \
    \          rest = \"\"\n        } else if rest == \".|\" {\n            beats.append(1)\n\
    \            rest = \"\"\n        } else {\n            rest = rest + music_string[music_string.index(music_string.startIndex,\
    \ offsetBy: 1)]\n        }\n    }\n    return beats\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjhl97f9p.swift:11:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var note = music_string[0]\n\
    \               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpjhl97f9p.swift:27:39: error: subscript 'subscript(_:)'\
    \ requires that 'String.Index' conform to 'RangeExpression'\n            rest\
    \ = rest + music_string[music_string.index(music_string.startIndex, offsetBy:\
    \ 1)]\n                                      ^\nSwift.Collection:2:23: note: where\
    \ 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence\
    \ where R : RangeExpression, Self.Index == R.Bound { get }\n                 \
    \     ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = 0\n    var last_note = 0\n    var last_beat =\
    \ 0\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_string\
    \ = \"\"\n    var last_beat_string = \"\"\n    var last_beat_index = 0\n    var\
    \ last_note_index = 0\n    var last_note_string = \"\"\n    var last_beat_string\
    \ = \"\"\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_string\
    \ = \"\"\n    var last_beat_string = \"\"\n    var last_beat_index = 0\n    var\
    \ last_note_index = 0\n    var last_note_string = \"\"\n    var last_beat_string\
    \ = \"\"\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_string\
    \ = \"\"\n    var last_beat_string = \"\"\n    var last_beat_index = 0\n    var\
    \ last_note_index = 0\n    var last_note_string = \"\"\n    var last_beat_string\
    \ = \"\"\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_string\
    \ = \"\"\n    var last_beat_string = \"\"\n    var last_beat_index = 0\n    var\
    \ last_note_index = 0\n    var last_note_string = \"\"\n    var last_beat_string\
    \ = \"\"\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_string\
    \ = \"\"\n    var last_beat_string = \"\"\n    var last_beat_index = 0\n    var\
    \ last_note_index = 0\n    var last_note_string = \"\"\n    var last_beat_string\
    \ = \"\"\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_string\
    \ = \"\"\n    var last_beat_string = \"\"\n    var last_beat_index = 0\n    var\
    \ last_note_index = 0\n    var last_note_string = \"\"\n    var last_beat_string\
    \ = \"\"\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_string\
    \ = \"\"\n    var last_beat_string = \"\"\n    var last_beat_index = 0\n    var\
    \ last_note_index = 0\n    var last_note_string = \"\"\n    var last_beat_string\
    \ = \"\"\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_string\
    \ = \"\"\n    var last_beat_string = \"\"\n    var last_beat_index = 0\n    var\
    \ last_note_index = 0\n    var last_note_string = \"\"\n    var last_beat_string\
    \ = \"\"\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_string\
    \ = \"\"\n    var last_beat_string = \"\"\n    var last_beat_index = 0\n    var\
    \ last_note_index = 0\n    var last_note_string = \"\"\n    var last_beat_string\
    \ = \"\"\n    var last_beat_index = 0\n    var last_note_index = 0\n    var last_note_string\
    \ = \"\"\n    var last_beat_string = \"\"\n    var last_beat_index = 0\n    var\
    \ last_note_index = 0\n    var last_note_string = \"\"\n    var last_beat_string\
    \ = \"\"\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpl1k2wwvh.swift:20:9: error: invalid redeclaration of 'last_beat_index'\n\
    \    var last_beat_index = 0\n        ^\n/tmp/tmpl1k2wwvh.swift:16:9: note: 'last_beat_index'\
    \ previously declared here\n    var last_beat_index = 0\n        ^\n/tmp/tmpl1k2wwvh.swift:21:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmpl1k2wwvh.swift:17:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpl1k2wwvh.swift:22:9:\
    \ error: invalid redeclaration of 'last_note_string'\n    var last_note_string\
    \ = \"\"\n        ^\n/tmp/tmpl1k2wwvh.swift:18:9: note: 'last_note_string' previously\
    \ declared here\n    var last_note_string = \"\"\n        ^\n/tmp/tmpl1k2wwvh.swift:23:9:\
    \ error: invalid redeclaration of 'last_beat_string'\n    var last_beat_string\
    \ = \"\"\n        ^\n/tmp/tmpl1k2wwvh.swift:19:9: note: 'last_beat_string' previously\
    \ declared here\n    var last_beat_string = \"\"\n        ^\n/tmp/tmpl1k2wwvh.swift:24:9:\
    \ error: invalid redeclaration of 'last_beat_index'\n    var last_beat_index =\
    \ 0\n        ^\n/tmp/tmpl1k2wwvh.swift:16:9: note: 'last_beat_index' previously\
    \ declared here\n    var last_beat_index = 0\n        ^\n/tmp/tmpl1k2wwvh.swift:25:9:\
    \ error: invalid redeclaration of 'last_note_index'\n    var last_note_index =\
    \ 0\n        ^\n/tmp/tmpl1k2wwvh.swift:17:9: note: 'last_note_index' previously\
    \ declared here\n    var last_note_index = 0\n        ^\n/tmp/tmpl1k2wwvh.swift:26:9:\
    \ error: invalid redeclaration of 'last_note_string'\n    var last_note_string\
    \ = \"\"\n        ^\n/tmp/tmpl1k2wwvh.swift:18:9: note: 'last_note_string' previously\
    \ declared here\n    var last_note_string = \"\"\n        ^\n/tmp/tmpl1k2wwvh.swift:27:9:\
    \ error: invalid redeclaration of 'last_beat_string'\n    var last_beat_string\
    \ = \"\"\n        ^\n/tmp/tmpl1k2wwvh.swift:19:9: note: 'last_beat_string' previously\
    \ declared here\n    var last_beat_string = \"\"\n        ^\n/tmp/tmpl1k2wwvh.swift:28:9:\
    \ error: invalid redeclaration of 'last_beat_index'\n    var last_beat_index =\
    \ 0\n        ^\n/tmp/tmpl1k2wwvh.swift:16:9: note: 'last_be"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    for c in music_string {\n        switch c {\n    \
    \    case \"o\":\n            current_note = Int(notes.count)\n            beats.append(current_beat)\n\
    \            current_beat = 0\n        case \"o|\":\n            current_note\
    \ = Int(notes.count / 2)\n            beats.append(current_beat)\n           \
    \ current_beat = 0\n        case \".|\":\n            current_note = Int(notes.count\
    \ / 4)\n            beats.append(current_beat)\n            current_beat = 0\n\
    \        default:\n            current_beat = current_beat + 1\n        }\n  \
    \  }\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2q4flr6k.swift:19:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmp2q4flr6k.swift:23:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \".|\":\n            \
    \ ^~~~\n/tmp/tmp2q4flr6k.swift:16:32: error: cannot find 'notes' in scope\n  \
    \          current_note = Int(notes.count)\n                               ^~~~~\n\
    /tmp/tmp2q4flr6k.swift:20:32: error: cannot find 'notes' in scope\n          \
    \  current_note = Int(notes.count / 2)\n                               ^~~~~\n\
    /tmp/tmp2q4flr6k.swift:24:32: error: cannot find 'notes' in scope\n          \
    \  current_note = Int(notes.count / 4)\n                               ^~~~~\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var note_count = 0\n    var note_length = 0\n    var note_char = \"\"\n   \
    \ var note_char_count = 0\n    var note_char_length = 0\n    var note_char_char\
    \ = \"\"\n    var note_char_char_count = 0\n    var note_char_char_length = 0\n\
    \    var note_char_char_char = \"\"\n    var note_char_char_char_count = 0\n \
    \   var note_char_char_char_length = 0\n    var note_char_char_char_char = \"\"\
    \n    var note_char_char_char_char_count = 0\n    var note_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_count = 0\n    var note_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_char_count = 0\n   \
    \ var note_char_char_char_char_char_char_char_char_length = 0\n    var note_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_char_char_count = 0\n\
    \    var note_char_char_char_char_char_char_char_char_char_length = 0\n    var\
    \ note_char_char_char_char_char_char_char_char_char_char = \"\"\n    var note_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_length =\
    \ 0\n    var note_char_char_char_char_char_char_char_char_char_char_char = \"\"\
    \n    var note_char_char_char_char_char_char_char_char_char_char_char_count =\
    \ 0\n    var note_char_char_char_char_char_char_char_char_char_char_length = 0\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_char_char = \"\
    \"\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpivrba602.swift:55:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpivrba602.swift:46:9: error: invalid redeclaration of 'note_char_char_char_char_char_char_char_char_char_char_length'\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_length = 0\n \
    \       ^\n/tmp/tmpivrba602.swift:43:9: note: 'note_char_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmpivrba602.swift:52:9: error: invalid redeclaration of\
    \ 'note_char_char_char_char_char_char_char_char_char_char_char_char_length'\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmpivrba602.swift:49:9: note: 'note_char_char_char_char_char_char_char_char_char_char_char_char_length'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_length\
    \ = 0\n        ^\n/tmp/tmpivrba602.swift:53:9: error: invalid redeclaration of\
    \ 'note_char_char_char_char_char_char_char_char_char_char_char_char_char'\n  \
    \  var note_char_char_char_char_char_char_char_char_char_char_char_char_char =\
    \ \"\"\n        ^\n/tmp/tmpivrba602.swift:50:9: note: 'note_char_char_char_char_char_char_char_char_char_char_char_char_char'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_char\
    \ = \"\"\n        ^\n/tmp/tmpivrba602.swift:54:9: error: invalid redeclaration\
    \ of 'note_char_char_char_char_char_char_char_char_char_char_char_char_count'\n\
    \    var note_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n        ^\n/tmp/tmpivrba602.swift:48:9: note: 'note_char_char_char_char_char_char_char_char_char_char_char_char_count'\
    \ previously declared here\n    var note_char_char_char_char_char_char_char_char_char_char_char_char_count\
    \ = 0\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpuq_3wf_o.swift:16:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmpuq_3wf_o.swift:14:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpuq_3wf_o.swift:17:9: error: invalid redeclaration of\
    \ 'current_note_length_string'\n    var current_note_length_string = \"\"\n  \
    \      ^\n/tmp/tmpuq_3wf_o.swift:15:9: note: 'current_note_length_string' previously\
    \ declared here\n    var current_note_length_string = \"\"\n        ^\n/tmp/tmpuq_3wf_o.swift:18:9:\
    \ error: invalid redeclaration of 'current_note_length_index'\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpuq_3wf_o.swift:14:9: note: 'current_note_length_index'\
    \ previously declared here\n    var current_note_length_index = 0\n        ^\n\
    /tmp/tmpuq_3wf_o.swift:19:9: error: invalid redeclaration of 'current_note_length_string'\n\
    \    var current_note_length_string = \"\"\n        ^\n/tmp/tmpuq_3wf_o.swift:15:9:\
    \ note: 'current_note_length_string' previously declared here\n    var current_note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpuq_3wf_o.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length_index'\n    var current_note_length_index = 0\n    \
    \    ^\n/tmp/tmpuq_3wf_o.swift:14:9: note: 'current_note_length_index' previously\
    \ declared here\n    var current_note_length_index = 0\n        ^\n/tmp/tmpuq_3wf_o.swift:21:9:\
    \ error: invalid redeclaration of 'current_note_length_string'\n    var current_note_length_string\
    \ = \"\"\n        ^\n/tmp/tmpuq_3wf_o.swift:15:9: note: 'current_note_length_string'\
    \ previously declared here\n    var current_note_length_string = \"\"\n      \
    \  ^\n/tmp/tmpuq_3wf_o.swift:22:9: error: invalid redeclaration of 'current_note_length_index'\n\
    \    var current_note_length_index = 0\n        ^\n/tmp/tmpuq_3wf_o.swift:14:9:\
    \ note: 'current_note_length_index' previously declared here\n    var current_note_length_index\
    \ = 0\n        ^\n/tmp/tmpuq_3wf_o.swift:23:9: error: invalid redeclaration of\
    \ 'current_note_length_string'\n    var current_note_length_s"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var last_note = \"\"\n    var last_beat = 0\n    var last_beats = 0\n    var\
    \ last_beats_count = 0\n    var last_beats_count_count = 0\n    var last_beats_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count = 0\n    var last_beats_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_count = 0\n    var\
    \ last_beats_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp0lix7wi9.swift:27:9: error: type annotation missing in pattern\n\
    \    var last_beats_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes = [Int]()\n    var beats = 0\n    var note\
    \ = \"\"\n    var last_note = \"\"\n    for c in music_string {\n        if c\
    \ == \"o\" {\n            if note != last_note {\n                notes.append(beats)\n\
    \                beats = 0\n            }\n            last_note = note\n    \
    \        note = \"\"\n        } else if c == \"o|\" {\n            if note !=\
    \ last_note {\n                notes.append(beats)\n                beats = 0\n\
    \            }\n            last_note = note\n            note = \"\"\n      \
    \  } else if c == \".|\" {\n            if note != last_note {\n             \
    \   notes.append(beats)\n                beats = 0\n            }\n          \
    \  last_note = note\n            note = \"\"\n        } else {\n            note\
    \ += c\n            beats += 1\n        }\n    }\n    notes.append(beats)\n  \
    \  return notes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp72bz5y23.swift:22:21: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if c == \"o|\"\
    \ {\n                  ~ ^  ~~~~\n/tmp/tmp72bz5y23.swift:22:21: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if c == \"o|\" {\n                    ^\n/tmp/tmp72bz5y23.swift:29:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \".|\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmp72bz5y23.swift:29:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \".|\" {\n                    ^\n/tmp/tmp72bz5y23.swift:37:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            note += c\n                    ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2dmb5ng_.swift:75:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660014059
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for _ in 0..<music_string.count {\n    \
    \    let note = music_string[current_note]\n        if note == \"o\" {\n     \
    \       beats.append(current_beat)\n            current_beat += 4\n        } else\
    \ if note == \"o|\" {\n            beats.append(current_beat)\n            current_beat\
    \ += 2\n        } else if note == \".|\" {\n            beats.append(current_beat)\n\
    \            current_beat += 1\n        } else {\n            beats.append(current_beat)\n\
    \            current_beat = 0\n        }\n        current_note = note\n    }\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpngy_y5cn.swift:12:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpngy_y5cn.swift:14:32:\
    \ error: no exact matches in call to subscript \n        let note = music_string[current_note]\n\
    \                               ^\nSwift.String:12:12: note: candidate expects\
    \ value of type 'String.Index' for parameter #1 (got 'Character')\n    public\
    \ subscript(i: String.Index) -> Character { get }\n           ^\nSwift.String:3:12:\
    \ note: candidate expects value of type 'Range<String.Index>' for parameter #1\
    \ (got 'Character')\n    public subscript(r: Range<String.Index>) -> Substring\
    \ { get }\n           ^\nSwift.Collection:3:23: note: candidate expects value\
    \ of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Character')\n    @inlinable\
    \ public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n \
    \                     ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats: [Int] = []\n    var notes: [String] = []\n\
    \    var beats_counter: Int = 0\n    var note_counter: Int = 0\n    var last_note\
    \ = \"\"\n    var last_beat: Int = 0\n    var last_beats_counter: Int = 0\n  \
    \  var last_beats_counter_counter: Int = 0\n    var last_beats_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter: Int = 0\n    var\
    \ last_beats_counter_counter_counter_counter_counter: Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter:\
    \ Int = 0\n    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpd_9cfldq.swift:34:9: error: type annotation missing in pattern\n\
    \    var last_beats_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats_array: [Int] = []\n    var current_beat =\
    \ 0\n    var current_note = \"\"\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp5drzw8x_.swift:75:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp5drzw8x_.swift:10:9: warning: variable 'beats_array' was never used;\
    \ consider replacing with '_' or removing it\n    var beats_array: [Int] = []\n\
    \        ^~~~~~~~~~~\n        _\n/tmp/tmp5drzw8x_.swift:11:9: warning: initialization\
    \ of variable 'current_beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_beat = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmp5drzw8x_.swift:12:9: warning: initialization of variable 'current_note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note = \"\"\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp5drzw8x_.swift:13:9:\
    \ warning: initialization of variable 'current_note_length' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp5drzw8x_.swift:14:9: warning:\
    \ initialization of variable 'current_note_length_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp5drzw8x_.swift:15:9:\
    \ warning: initialization of variable 'current_note_length_index2' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index2\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp5drzw8x_.swift:16:9:\
    \ warning: initialization of variable 'current_note_length_index3' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index3\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp5drzw8x_.swift:17:9:\
    \ warning: initialization of variable 'current_note_length_index4' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index4\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp5drzw8x_.swift:18:9:\
    \ warning: initialization of variable 'current_note_length_index5' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    va"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe37m21i1.swift:14:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:15:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:16:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for c in music_string {\n        if\
    \ c == 'o' {\n            notes.append(note)\n            beats.append(beat)\n\
    \            beat = 0\n            note = \"\"\n        } else if c == '|' {\n\
    \            notes.append(note)\n            beats.append(beat)\n            beat\
    \ = 0\n            note = \"\"\n        } else if c == '.' {\n            notes.append(note)\n\
    \            beats.append(beat)\n            beat = 0\n            note = \"\"\
    \n        } else {\n            note += String(c)\n        }\n    }\n    notes.append(note)\n\
    \    beats.append(beat)\n    return beats\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpczzvemor.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpczzvemor.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmpczzvemor.swift:25:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = music_string[0]\n    var rest = 0\n    var rests = 0\n    var rests_count\
    \ = 0\n    var rests_count_max = 0\n    var rests_count_min = 0\n    var rests_count_max2\
    \ = 0\n    var rests_count_min2 = 0\n    var rests_count_max3 = 0\n    var rests_count_min3\
    \ = 0\n    var rests_count_max4 = 0\n    var rests_count_min4 = 0\n    var rests_count_max5\
    \ = 0\n    var rests_count_min5 = 0\n    var rests_count_max6 = 0\n    var rests_count_min6\
    \ = 0\n    var rests_count_max7 = 0\n    var rests_count_min7 = 0\n    var rests_count_max8\
    \ = 0\n    var rests_count_min8 = 0\n    var rests_count_max9 = 0\n    var rests_count_min9\
    \ = 0\n    var rests_count_max10 = 0\n    var rests_count_min10 = 0\n    var rests_count_max11\
    \ = 0\n    var rests_count_min11 = 0\n    var rests_count_max12 = 0\n    var rests_count_min12\
    \ = 0\n    var rests_count_max13 = 0\n    var rests_count_min13 = 0\n    var rests_count_max14\
    \ = 0\n    var rests_count_min14 = 0\n    var rests_count_max15 = 0\n    var rests_count_min15\
    \ = 0\n    var rests_count_max16 = 0\n    var rests_count_min16 = 0\n    var rests_count_max17\
    \ = 0\n    var rests_count_min17 = 0\n    var rests_count_max18 = 0\n    var rests_count_min18\
    \ = 0\n    var rests_count_max19 = 0\n    var rests_count_min19 = 0\n    var rests_count_max20\
    \ = 0\n    var rests_count_min20 = 0\n    var rests_count_max21 = 0\n    var rests_count_min21\
    \ = 0\n    var rests_count_max22 = 0\n    var rests_count_min22 = 0\n    var rests_count_max23\
    \ = 0\n    var rests_count_min23 = 0\n    var rests_count_max24 = 0\n    var rests_count_min24\
    \ = 0\n    var rests_count_max25 = 0\n    var rests_count_min25 = 0\n    var rests_count_max26\
    \ = 0\n    var rests_count_min26 = 0\n    var rests_count_max27 = 0\n    var rests_count_min27\
    \ = 0\n    var rests_count_max28 = 0\n    var rests_count_min28 = 0\n    var rests_count_max29\
    \ = 0\n    var rests_count_min29 = 0\n    var rests_count_max30 = 0\n    var rests_count_min30\
    \ = 0\n    var rest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpt81t12pt.swift:12:16: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var note = music_string[0]\n\
    \               ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmpt81t12pt.swift:76:9: error: type annotation missing\
    \ in pattern\n    var rest\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var notes_count = 0\n    var note_index = 0\n    var\
    \ note_char = \"\"\n    var note_char_index = 0\n    var note_char_length = 0\n\
    \    var note_char_value = 0\n    var note_char_value_index = 0\n    var note_char_value_index2\
    \ = 0\n    var note_char_value_index3 = 0\n    var note_char_value_index4 = 0\n\
    \    var note_char_value_index5 = 0\n    var note_char_value_index6 = 0\n    var\
    \ note_char_value_index7 = 0\n    var note_char_value_index8 = 0\n    var note_char_value_index9\
    \ = 0\n    var note_char_value_index10 = 0\n    var note_char_value_index11 =\
    \ 0\n    var note_char_value_index12 = 0\n    var note_char_value_index13 = 0\n\
    \    var note_char_value_index14 = 0\n    var note_char_value_index15 = 0\n  \
    \  var note_char_value_index16 = 0\n    var note_char_value_index17 = 0\n    var\
    \ note_char_value_index18 = 0\n    var note_char_value_index19 = 0\n    var note_char_value_index20\
    \ = 0\n    var note_char_value_index21 = 0\n    var note_char_value_index22 =\
    \ 0\n    var note_char_value_index23 = 0\n    var note_char_value_index24 = 0\n\
    \    var note_char_value_index25 = 0\n    var note_char_value_index26 = 0\n  \
    \  var note_char_value_index27 = 0\n    var note_char_value_index28 = 0\n    var\
    \ note_char_value_index29 = 0\n    var note_char_value_index30 = 0\n    var note_char_value_index31\
    \ = 0\n    var note_char_value_index32 = 0\n    var note_char_value_index33 =\
    \ 0\n    var note_char_value_index34 = 0\n    var note_char_value_index35 = 0\n\
    \    var note_char_value_index36 = 0\n    var note_char_value_index37 = 0\n  \
    \  var note_char_value_index38 = 0\n    var note_char_value_index39 = 0\n    var\
    \ note_char_value_index40 = 0\n    var note_char_value_index41 = 0\n    var note_char_value_index42\
    \ = 0\n    var note_char_value_index43 = 0\n    var note_char_value_index44 =\
    \ 0\n    var note_char_value_index45 = 0\n    var note_char_value_index46 = 0\n\
    \    var note_char_value_index47 = 0\n    var note_char_value_index48 = 0\n  \
    \  var note_char_value_index49 = 0\n    var note_char_value_index50 = 0\n    var\
    \ note_char_value_index51 = 0\n    var note_char_value_index52 = 0\n    var note_char_value_index53\
    \ = 0\n    var note_char_value_index54 = 0\n    var note_char_value_index55 =\
    \ 0\n    var note_char_value_index56 = 0\n    var note_char_value_index57 = 0\n\
    \    var note_char_value_index\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp613ryj6n.swift:76:9: error: type annotation missing in pattern\n\
    \    var note_char_value_index\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe37m21i1.swift:14:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:15:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:16:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var current_note_index = 0\n    var current_note_length\
    \ = 4\n\n    for c in music_string {\n        if c == 'o' {\n            current_note\
    \ = String()\n            current_note_index = 0\n            current_note_length\
    \ = 4\n            beats.append(current_beat)\n            current_beat += 1\n\
    \        } else if c == 'o|' {\n            current_note = String()\n        \
    \    current_note_index = 0\n            current_note_length = 2\n           \
    \ beats.append(current_beat)\n            current_beat += 1\n        } else if\
    \ c == '.|' {\n            current_note = String()\n            current_note_index\
    \ = 0\n            current_note_length = 1\n            beats.append(current_beat)\n\
    \            current_beat += 1\n        } else {\n            current_note +=\
    \ String(c)\n            current_note_index += 1\n        }\n        if current_note_index\
    \ == current_note_length {\n            current_beat += 1\n            current_note_index\
    \ = 0\n            current_note_length = 4\n        }\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpjzheyjqy.swift:17:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmpjzheyjqy.swift:23:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o|' {\n                       ^~~~\n              \
    \         \"o|\"\n/tmp/tmpjzheyjqy.swift:29:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.|' {\n                       ^~~~\n\
    \                       \".|\"\n/tmp/tmpjzheyjqy.swift:23:21: error: binary operator\
    \ '==' cannot be applied to operands of type 'Character' and 'String'\n      \
    \  } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmpjzheyjqy.swift:23:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n/tmp/tmpjzheyjqy.swift:29:21: error: binary operator '=='\
    \ cannot be applied to operands of type 'Character' and 'String'\n        } else\
    \ if c == '.|' {\n                  ~ ^  ~~~~\n/tmp/tmpjzheyjqy.swift:29:21: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        } else if c == '.|' {\n              \
    \      ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = String()\n    var last_note = String()\n    var last_beat = 0\n\
    \    var last_beats_count = 0\n    var last_beats_count_in_note = 0\n    var last_beats_count_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note = 0\n    var last_beats_count_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note = 0\n\
    \    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note = 0\n\
    \    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpwrxm6k3v.swift:24:9: error: invalid redeclaration of 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\n\
    \    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n        ^\n/tmp/tmpwrxm6k3v.swift:23:9: note: 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\
    \ previously declared here\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = 0\n        ^\n/tmp/tmpwrxm6k3v.swift:28:9: error: invalid redeclaration of\
    \ 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_'\n\
    \    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n        ^\n/tmp/tmpwrxm6k3v.swift:27:9: note: 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_'\
    \ previously declared here\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n        ^\n/tmp/tmpwrxm6k3v.swift:31:9: error: invalid redeclaration of\
    \ 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_'\n\
    \    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n        ^\n/tmp/tmpwrxm6k3v.swift:30:9: note: 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_'\
    \ previously declared here\n    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n        ^\n/tmp/tmpwrxm6k3v.swift:33:9: error: invalid redeclaration of\
    \ 'last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_'\n\
    \    var last_beats_count_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_\
    \ = 0\n        ^\n/tmp/tmpwr"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    for c in music_string {\n        if c ==\
    \ '|' {\n            beats.append(current_beat)\n            current_beat = 0\n\
    \            current_note = c\n        } else if c == 'o' {\n            beats.append(current_beat)\n\
    \            current_beat = 0\n            current_note = c\n        } else if\
    \ c == 'o|' {\n            beats.append(current_beat)\n            current_beat\
    \ = 0\n            current_note = c\n        } else {\n            current_beat\
    \ += 1\n        }\n    }\n    beats.append(current_beat)\n    return beats\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmplomeh3fk.swift:14:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '|' {\n                ^~~\n                \"|\"\n\
    /tmp/tmplomeh3fk.swift:18:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o' {\n                       ^~~\n                \
    \       \"o\"\n/tmp/tmplomeh3fk.swift:22:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == 'o|' {\n                       ^~~~\n\
    \                       \"o|\"\n/tmp/tmplomeh3fk.swift:12:24: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var current_note = music_string[0]\n                       ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmplomeh3fk.swift:22:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmplomeh3fk.swift:22:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for char in music_string {\n       \
    \ if char == \"o\" {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n        } else if char == \"o|\"\
    \ {\n            beats.append(beat)\n            notes.append(note)\n        \
    \    beat = 0\n            note = \"\"\n        } else if char == \".|\" {\n \
    \           beats.append(beat)\n            notes.append(note)\n            beat\
    \ = 0\n            note = \"\"\n        } else {\n            note += char\n \
    \       }\n    }\n    beats.append(beat)\n    notes.append(note)\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpw8k6bog1.swift:20:24: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if char == \"o|\"\
    \ {\n                  ~~~~ ^  ~~~~\n/tmp/tmpw8k6bog1.swift:20:24: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if char == \"o|\" {\n                     \
    \  ^\n/tmp/tmpw8k6bog1.swift:25:24: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if char == \".|\"\
    \ {\n                  ~~~~ ^  ~~~~\n/tmp/tmpw8k6bog1.swift:25:24: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if char == \".|\" {\n                     \
    \  ^\n/tmp/tmpw8k6bog1.swift:31:21: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n            note += char\n             \
    \       ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var last_note = \"\"\n    for c in music_string {\n\
    \        if c == 'o' {\n            if current_note != last_note {\n         \
    \       beats.append(current_beat)\n                current_beat = 0\n       \
    \         current_note = \"\"\n            }\n            last_note = c\n    \
    \    } else if c == '|' {\n            if current_note != last_note {\n      \
    \          beats.append(current_beat)\n                current_beat = 0\n    \
    \            current_note = \"\"\n            }\n            last_note = c\n \
    \       } else if c == \".\" {\n            if current_note != last_note {\n \
    \               beats.append(current_beat)\n                current_beat = 0\n\
    \                current_note = \"\"\n            }\n            last_note = c\n\
    \        } else {\n            current_note += c\n        }\n        current_beat++\n\
    \    }\n    beats.append(current_beat)\n    return beats\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp9bf4yanj.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmp9bf4yanj.swift:22:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == '|' {\n                       ^~~\n                \
    \       \"|\"\n/tmp/tmp9bf4yanj.swift:21:25: error: cannot assign value of type\
    \ 'Character' to type 'String'\n            last_note = c\n                  \
    \      ^\n/tmp/tmp9bf4yanj.swift:28:25: error: cannot assign value of type 'Character'\
    \ to type 'String'\n            last_note = c\n                        ^\n/tmp/tmp9bf4yanj.swift:35:25:\
    \ error: cannot assign value of type 'Character' to type 'String'\n          \
    \  last_note = c\n                        ^\n/tmp/tmp9bf4yanj.swift:37:29: error:\
    \ cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            current_note += c\n                            ^\n/tmp/tmp9bf4yanj.swift:39:21:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        current_beat++\n\
    \                    ^~\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var current_note_length = 4\n    var current_note_length_index\
    \ = 0\n    var last_note = music_string[0]\n    var last_note_length = 4\n   \
    \ var last_note_length_index = 0\n    var last_note_length_index2 = 0\n    var\
    \ last_note_length_index3 = 0\n    var last_note_length_index4 = 0\n    var last_note_length_index5\
    \ = 0\n    var last_note_length_index6 = 0\n    var last_note_length_index7 =\
    \ 0\n    var last_note_length_index8 = 0\n    var last_note_length_index9 = 0\n\
    \    var last_note_length_index10 = 0\n    var last_note_length_index11 = 0\n\
    \    var last_note_length_index12 = 0\n    var last_note_length_index13 = 0\n\
    \    var last_note_length_index14 = 0\n    var last_note_length_index15 = 0\n\
    \    var last_note_length_index16 = 0\n    var last_note_length_index17 = 0\n\
    \    var last_note_length_index18 = 0\n    var last_note_length_index19 = 0\n\
    \    var last_note_length_index20 = 0\n    var last_note_length_index21 = 0\n\
    \    var last_note_length_index22 = 0\n    var last_note_length_index23 = 0\n\
    \    var last_note_length_index24 = 0\n    var last_note_length_index25 = 0\n\
    \    var last_note_length_index26 = 0\n    var last_note_length_index27 = 0\n\
    \    var last_note_length_index28 = 0\n    var last_note_length_index29 = 0\n\
    \    var last_note_length_index30 = 0\n    var last_note_length_index31 = 0\n\
    \    var last_note_length_index32 = 0\n    var last_note_length_index33 = 0\n\
    \    var last_note_length_index34 = 0\n    var last_note_length_index35 = 0\n\
    \    var last_note_length_index36 = 0\n    var last_note_length_index37 = 0\n\
    \    var last_note_length_index38 = 0\n    var last_note_length_index39 = 0\n\
    \    var last_note_length_index40 = 0\n    var last_note_length_index41 = 0\n\
    \    var last_note_length_index42 = 0\n    var last_note_length_index43 = 0\n\
    \    var last_note_length_index44 = 0\n    var last_note_length_index45 = 0\n\
    \    var last_note_length_index46 = 0\n    var last_note_length_index47 = 0\n\
    \    var last_note_length_index48 = 0\n    var last_note_length_index49 = 0\n\
    \    var last_note_length_index50 = 0\n    var last_note_length_index51 = 0\n\
    \    var last_note_length_index52 = 0\n    var last_note_length_index53 = 0\n\
    \    var last_note_length_index54 = 0\n    var last_note_length_index55 = 0\n\
    \    var last_note_length_index56 = 0\n    var last_note_length_index57 = 0\n\
    \    var last_note_length_index58 = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp625hz182.swift:12:24: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n    var current_note\
    \ = music_string[0]\n                       ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp625hz182.swift:15:21:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var last_note = music_string[0]\n         \
    \           ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been\
    \ explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n/tmp/tmp625hz182.swift:10:9: warning: initialization\
    \ of variable 'beats' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp625hz182.swift:11:9:\
    \ warning: initialization of variable 'current_beat' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var current_beat = 0\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp625hz182.swift:12:9: warning: initialization\
    \ of variable 'current_note' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var current_note = music_string[0]\n    ~~~~^~~~~~~~~~~~\n\
    \    _\n/tmp/tmp625hz182.swift:13:9: warning: initialization of variable 'current_note_length'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var current_note_length = 4\n    ~~~~^~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp625hz182.swift:14:9:\
    \ warning: initialization of variable 'current_note_length_index' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var current_note_length_index\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmp625hz182.swift:15:9:\
    \ warning: initialization of variable 'last_note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_note = music_string[0]\n\
    \    ~~~~^~~~~~~~~\n    _\n/tmp/tmp625hz182.swift:16:9: warning: in"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ note = String()\n    var last_note = String()\n    var last_beat = 0\n    var\
    \ last_beat_count = 0\n    var last_beat_note = String()\n    var last_beat_note_count\
    \ = 0\n    var last_beat_note_octave = 0\n    var last_beat_note_octave_count\
    \ = 0\n    var octave = 0\n    var octave_count = 0\n    var octave_note = String()\n\
    \    var octave_note_count = 0\n    var octave_note_octave = 0\n    var octave_note_octave_count\
    \ = 0\n    var octave_note_octave_octave = 0\n    var octave_note_octave_octave_count\
    \ = 0\n    var octave_note_octave_octave_octave = 0\n    var octave_note_octave_octave_octave_count\
    \ = 0\n    var octave_note_octave_octave_octave_octave = 0\n    var octave_note_octave_octave_octave_octave_count\
    \ = 0\n    var octave_note_octave_octave_octave_octave_octave = 0\n    var octave_note_octave_octave_octave_octave_octave_count\
    \ = 0\n    var octave_note_octave_octave_octave_octave_octave_octave = 0\n   \
    \ var octave_note_octave_octave_octave_octave_octave_octave_count = 0\n    var\
    \ octave_note_octave_octave_octave_octave_octave_octave_octave = 0\n    var octave_note_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var octave_note_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var octave_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var octave_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var octave_note_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave_octave\
    \ = 0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpsjjfzgnf.swift:42:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpsjjfzgnf.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpsjjfzgnf.swift:11:9: warning:\
    \ initialization of variable 'beats_count' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var beats_count = 0\n    ~~~~^~~~~~~~~~~\n\
    \    _\n/tmp/tmpsjjfzgnf.swift:12:9: warning: initialization of variable 'note'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var note = String()\n    ~~~~^~~~\n    _\n/tmp/tmpsjjfzgnf.swift:13:9: warning:\
    \ initialization of variable 'last_note' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var last_note = String()\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmpsjjfzgnf.swift:14:9: warning: initialization of variable 'last_beat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmpsjjfzgnf.swift:15:9:\
    \ warning: initialization of variable 'last_beat_count' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_count = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmpsjjfzgnf.swift:16:9: warning: initialization\
    \ of variable 'last_beat_note' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_beat_note = String()\n    ~~~~^~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpsjjfzgnf.swift:17:9: warning: initialization of variable 'last_beat_note_count'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_note_count = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpsjjfzgnf.swift:18:9:\
    \ warning: initialization of variable 'last_beat_note_octave' was never used;\
    \ consider replacing with assignment to '_' or removing it\n    var last_beat_note_octave\
    \ = 0\n    ~~~~^~~~~~~~~~~~~~~~~~~~~\n    _\n/tmp/tmpsjjfzgnf.swift:19:9: warning:\
    \ initialization of variable 'last_beat_note_octave_count' was never "
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_index2 = 0\n    var current_note_length_index3\
    \ = 0\n    var current_note_length_index4 = 0\n    var current_note_length_index5\
    \ = 0\n    var current_note_length_index6 = 0\n    var current_note_length_index7\
    \ = 0\n    var current_note_length_index8 = 0\n    var current_note_length_index9\
    \ = 0\n    var current_note_length_index10 = 0\n    var current_note_length_index11\
    \ = 0\n    var current_note_length_index12 = 0\n    var current_note_length_index13\
    \ = 0\n    var current_note_length_index14 = 0\n    var current_note_length_index15\
    \ = 0\n    var current_note_length_index16 = 0\n    var current_note_length_index17\
    \ = 0\n    var current_note_length_index18 = 0\n    var current_note_length_index19\
    \ = 0\n    var current_note_length_index20 = 0\n    var current_note_length_index21\
    \ = 0\n    var current_note_length_index22 = 0\n    var current_note_length_index23\
    \ = 0\n    var current_note_length_index24 = 0\n    var current_note_length_index25\
    \ = 0\n    var current_note_length_index26 = 0\n    var current_note_length_index27\
    \ = 0\n    var current_note_length_index28 = 0\n    var current_note_length_index29\
    \ = 0\n    var current_note_length_index30 = 0\n    var current_note_length_index31\
    \ = 0\n    var current_note_length_index32 = 0\n    var current_note_length_index33\
    \ = 0\n    var current_note_length_index34 = 0\n    var current_note_length_index35\
    \ = 0\n    var current_note_length_index36 = 0\n    var current_note_length_index37\
    \ = 0\n    var current_note_length_index38 = 0\n    var current_note_length_index39\
    \ = 0\n    var current_note_length_index40 = 0\n    var current_note_length_index41\
    \ = 0\n    var current_note_length_index42 = 0\n    var current_note_length_index43\
    \ = 0\n    var current_note_length_index44 = 0\n    var current_note_length_index45\
    \ = 0\n    var current_note_length_index46 = 0\n    var current_note_length_index47\
    \ = 0\n    var current_note_length_index48 = 0\n    var current_note_length_index49\
    \ = 0\n    var current_note_length_index50 = 0\n    var current_note_length_index51\
    \ = 0\n    var current_note_length_index52 = 0\n    var current_note_length_index53\
    \ = 0\n    var current_note_length_index54 = 0\n    var current_note_length_index55\
    \ = 0\n    var current_note_length_index56 = 0\n    var current_note_length_index57\
    \ = 0\n    var current_note_length_index58 = 0\n    var current_note_length_index59\
    \ = 0\n    var current_note_length_index60 = 0\n    var current_note_length_index61\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpd46_v22q.swift:75:9: error: type annotation missing in pattern\n\
    \    var current_\n        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes = [Int]()\n    var beats = 0\n    var note\
    \ = \"\"\n    for c in music_string {\n        if c == \"o\" {\n            notes.append(beats)\n\
    \            beats = 0\n            note = \"\"\n        } else if c == \"o|\"\
    \ {\n            notes.append(beats)\n            beats = 0\n            note\
    \ = \"\"\n        } else if c == \".|\" {\n            notes.append(beats)\n \
    \           beats = 0\n            note = \"\"\n        } else {\n           \
    \ note += c\n        }\n    }\n    notes.append(beats)\n    return notes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpklt_m2f3.swift:18:21: error: binary operator '==' cannot be applied\
    \ to operands of type 'Character' and 'String'\n        } else if c == \"o|\"\
    \ {\n                  ~ ^  ~~~~\n/tmp/tmpklt_m2f3.swift:18:21: note: overloads\
    \ for '==' exist with these partially matching parameter lists: (Character, Character),\
    \ (String, String)\n        } else if c == \"o|\" {\n                    ^\n/tmp/tmpklt_m2f3.swift:22:21:\
    \ error: binary operator '==' cannot be applied to operands of type 'Character'\
    \ and 'String'\n        } else if c == \".|\" {\n                  ~ ^  ~~~~\n\
    /tmp/tmpklt_m2f3.swift:22:21: note: overloads for '==' exist with these partially\
    \ matching parameter lists: (Character, Character), (String, String)\n       \
    \ } else if c == \".|\" {\n                    ^\n/tmp/tmpklt_m2f3.swift:27:21:\
    \ error: cannot convert value of type 'Character' to expected argument type 'String'\n\
    \            note += c\n                    ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = music_string[0]\n    var rest = music_string\n    var restLength = rest.length\n\
    \    var restIndex = 0\n    while restIndex < restLength {\n        if rest[restIndex]\
    \ == '|' {\n            beats.append(beat)\n            beat = 0\n           \
    \ restIndex++\n        } else {\n            beat = beat + 1\n        }\n    \
    \    note = note + rest[restIndex]\n        restIndex++\n    }\n    beats.append(beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp2aw8prli.swift:17:31: error: single-quoted string literal found,\
    \ use '\"'\n        if rest[restIndex] == '|' {\n                            \
    \  ^~~\n                              \"|\"\n/tmp/tmp2aw8prli.swift:12:16: error:\
    \ 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index\
    \ instead.\n    var note = music_string[0]\n               ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2aw8prli.swift:14:27:\
    \ error: value of type 'String' has no member 'length'\n    var restLength = rest.length\n\
    \                     ~~~~ ^~~~~~\n/tmp/tmp2aw8prli.swift:17:12: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        if rest[restIndex] == '|' {\n           ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2aw8prli.swift:20:22:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  restIndex++\n                     ^~\n/tmp/tmp2aw8prli.swift:24:21: error:\
    \ binary operator '+' cannot be applied to two 'Character' operands\n        note\
    \ = note + rest[restIndex]\n               ~~~~ ^ ~~~~~~~~~~~~~~~\n/tmp/tmp2aw8prli.swift:25:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n        restIndex++\n\
    \                 ^~\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_string_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpux06ga6p.swift:28:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_string_value_index = 0\n\
    \        ^\n/tmp/tmpux06ga6p.swift:26:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string'\n    var\
    \ current_note_length_string_value_string_value_string_value_string = 0\n    \
    \    ^\n/tmp/tmpux06ga6p.swift:27:9: note: 'current_note_length_string_value_string_value_string_value_string'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n        ^\n/tmp/tmpux06ga6p.swift:30:9: error: invalid redeclaration\
    \ of 'current_note_length_string_value_string_value_string_value_index'\n    var\
    \ current_note_length_string_value_string_value_string_value_index = 0\n     \
    \   ^\n/tmp/tmpux06ga6p.swift:26:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:33:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:31:9: note: 'current_note_length_string_value_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:34:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_index'\n\
    \    var current_note_length_string_value_string_value_string_value_string_index\
    \ = 0\n        ^\n/tmp/tmpux06ga6p.swift:32:9: note: 'current_note_length_string_value_s"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_note_length\
    \ = 0\n    var current_note_length_index = 0\n    var current_note_length_string\
    \ = \"\"\n    var current_note_length_string_index = 0\n    var current_note_length_string_value\
    \ = 0\n    var current_note_length_string_value_index = 0\n    var current_note_length_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_index = 0\n    var current_note_length_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string = \"\"\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = \"\"\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value_string_value_string_value_string_value_string_value\
    \ = 0\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpyazwt_tw.swift:25:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmpyazwt_tw.swift:23:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpyazwt_tw.swift:26:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string'\n    var current_note_length_string_value_string_value_string\
    \ = \"\"\n        ^\n/tmp/tmpyazwt_tw.swift:24:9: note: 'current_note_length_string_value_string_value_string'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string\
    \ = \"\"\n        ^\n/tmp/tmpyazwt_tw.swift:27:9: error: invalid redeclaration\
    \ of 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpyazwt_tw.swift:23:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpyazwt_tw.swift:31:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_index'\n    var\
    \ current_note_length_string_value_string_value_string_value_index = 0\n     \
    \   ^\n/tmp/tmpyazwt_tw.swift:29:9: note: 'current_note_length_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpyazwt_tw.swift:35:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmpyazwt_tw.swift:33:9: note: 'current_note_length_string_value_string_value_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value_string_value_index\
    \ = 0\n        ^\n/"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    for c in music_string {\n        if\
    \ c == 'o' {\n            beats.append(beat)\n            notes.append(note)\n\
    \            beat = 0\n            note = \"\"\n        } else if c == 'o|' {\n\
    \            beats.append(beat)\n            notes.append(note)\n            beat\
    \ = 0\n            note = \"\"\n        } else if c == '.' {\n            beats.append(beat)\n\
    \            notes.append(note)\n            beat = 0\n            note = \"\"\
    \n        } else {\n            beat += 1\n            note += String(c)\n   \
    \     }\n    }\n    beats.append(beat)\n    notes.append(note)\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp11uu354m.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == 'o' {\n                ^~~\n                \"o\"\n\
    /tmp/tmp11uu354m.swift:20:24: error: single-quoted string literal found, use '\"\
    '\n        } else if c == 'o|' {\n                       ^~~~\n              \
    \         \"o|\"\n/tmp/tmp11uu354m.swift:25:24: error: single-quoted string literal\
    \ found, use '\"'\n        } else if c == '.' {\n                       ^~~\n\
    \                       \".\"\n/tmp/tmp11uu354m.swift:20:21: error: binary operator\
    \ '==' cannot be applied to operands of type 'Character' and 'String'\n      \
    \  } else if c == 'o|' {\n                  ~ ^  ~~~~\n/tmp/tmp11uu354m.swift:20:21:\
    \ note: overloads for '==' exist with these partially matching parameter lists:\
    \ (Character, Character), (String, String)\n        } else if c == 'o|' {\n  \
    \                  ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var current_note = \"\"\n    var current_beat = 0\n    var current_note_index\
    \ = 0\n    var current_note_length = 0\n    var current_note_octave = 0\n    var\
    \ current_note_duration = 0\n    var current_note_duration_index = 0\n    var\
    \ current_note_duration_length = 0\n    var current_note_duration_octave = 0\n\
    \    var current_note_duration_duration = 0\n    var current_note_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_length = 0\n    var current_note_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration = 0\n    var current_note_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_length = 0\n    var current_note_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration = 0\n    var current_note_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_length = 0\n \
    \   var current_note_duration_duration_duration_duration_octave = 0\n    var current_note_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_octave\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_index\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_duration_duration_duration_length\
    \ = 0\n    var current_note_duration_duration_duration_duration_duration_\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe5a_5c4p.swift:38:9: error: invalid redeclaration of 'current_note_duration_duration_duration_duration_duration_index'\n\
    \    var current_note_duration_duration_duration_duration_duration_index = 0\n\
    \        ^\n/tmp/tmpe5a_5c4p.swift:34:9: note: 'current_note_duration_duration_duration_duration_duration_index'\
    \ previously declared here\n    var current_note_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmpe5a_5c4p.swift:39:9: error: invalid redeclaration of\
    \ 'current_note_duration_duration_duration_duration_duration_length'\n    var\
    \ current_note_duration_duration_duration_duration_duration_length = 0\n     \
    \   ^\n/tmp/tmpe5a_5c4p.swift:35:9: note: 'current_note_duration_duration_duration_duration_duration_length'\
    \ previously declared here\n    var current_note_duration_duration_duration_duration_duration_length\
    \ = 0\n        ^\n/tmp/tmpe5a_5c4p.swift:40:9: error: invalid redeclaration of\
    \ 'current_note_duration_duration_duration_duration_duration_octave'\n    var\
    \ current_note_duration_duration_duration_duration_duration_octave = 0\n     \
    \   ^\n/tmp/tmpe5a_5c4p.swift:36:9: note: 'current_note_duration_duration_duration_duration_duration_octave'\
    \ previously declared here\n    var current_note_duration_duration_duration_duration_duration_octave\
    \ = 0\n        ^\n/tmp/tmpe5a_5c4p.swift:41:9: error: invalid redeclaration of\
    \ 'current_note_duration_duration_duration_duration_duration_duration'\n    var\
    \ current_note_duration_duration_duration_duration_duration_duration = 0\n   \
    \     ^\n/tmp/tmpe5a_5c4p.swift:37:9: note: 'current_note_duration_duration_duration_duration_duration_duration'\
    \ previously declared here\n    var current_note_duration_duration_duration_duration_duration_duration\
    \ = 0\n        ^\n/tmp/tmpe5a_5c4p.swift:42:9: error: invalid redeclaration of\
    \ 'current_note_duration_duration_duration_duration_duration_index'\n    var current_note_duration_duration_duration_duration_duration_index\
    \ = 0\n        ^\n/tmp/tmpe5a_5c4p.swift:34:9: note: 'current_note_duration_duration_duration_duration_duration_index'\
    \ previously dec"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = music_string[0]\n    var last_note = music_string[0]\n    for\
    \ c in music_string {\n        if c == '|' {\n            current_beat = 0\n \
    \           current_note = last_note\n            last_note = c\n        } else\
    \ {\n            if current_note == last_note {\n                current_beat\
    \ += 1\n            } else {\n                beats.append(current_beat)\n   \
    \             current_beat = 0\n                current_note = last_note\n   \
    \             last_note = c\n            }\n        }\n    }\n    beats.append(current_beat)\n\
    \    return beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp28oamffp.swift:15:17: error: single-quoted string literal found,\
    \ use '\"'\n        if c == '|' {\n                ^~~\n                \"|\"\n\
    /tmp/tmp28oamffp.swift:12:24: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n    var current_note = music_string[0]\n\
    \                       ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmp28oamffp.swift:13:21: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \    var last_note = music_string[0]\n                    ^~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    var current_octave = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpcf1x7sbg.swift:15:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:16:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:22:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpcf1x7sbg.swift:14:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var note = music_string[0]\n\
    \    var beat = 0\n    var beats_count = 0\n    for _ in 0..<music_string.count\
    \ {\n        beats_count = 0\n        if note == 'o' {\n            beats_count\
    \ = 4\n        } else if note == 'o|' {\n            beats_count = 2\n       \
    \ } else if note == '.|' {\n            beats_count = 1 // quater note\n     \
    \   } else {\n            beats_count = 1\n        }\n        beats.append(beats_count)\n\
    \        beat++\n        note = music_string[beat]\n    }\n    return beats\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpc3lp8fiu.swift:16:20: error: single-quoted string literal found,\
    \ use '\"'\n        if note == 'o' {\n                   ^~~\n               \
    \    \"o\"\n/tmp/tmpc3lp8fiu.swift:18:27: error: single-quoted string literal\
    \ found, use '\"'\n        } else if note == 'o|' {\n                        \
    \  ^~~~\n                          \"o|\"\n/tmp/tmpc3lp8fiu.swift:20:27: error:\
    \ single-quoted string literal found, use '\"'\n        } else if note == '.|'\
    \ {\n                          ^~~~\n                          \".|\"\n/tmp/tmpc3lp8fiu.swift:11:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n    var note = music_string[0]\n              \
    \ ^~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    public subscript(i: Int) -> Character { get }\n\
    \           ^\n/tmp/tmpc3lp8fiu.swift:18:24: error: binary operator '==' cannot\
    \ be applied to operands of type 'Character' and 'String'\n        } else if note\
    \ == 'o|' {\n                  ~~~~ ^  ~~~~\n/tmp/tmpc3lp8fiu.swift:18:24: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        } else if note == 'o|' {\n           \
    \            ^\n/tmp/tmpc3lp8fiu.swift:20:24: error: binary operator '==' cannot\
    \ be applied to operands of type 'Character' and 'String'\n        } else if note\
    \ == '.|' {\n                  ~~~~ ^  ~~~~\n/tmp/tmpc3lp8fiu.swift:20:24: note:\
    \ overloads for '==' exist with these partially matching parameter lists: (Character,\
    \ Character), (String, String)\n        } else if note == '.|' {\n           \
    \            ^\n/tmp/tmpc3lp8fiu.swift:26:13: error: cannot find operator '++'\
    \ in scope; did you mean '+= 1'?\n        beat++\n            ^~\n/tmp/tmpc3lp8fiu.swift:27:16:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        note = music_string[beat]\n           \
    \    ^~~~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly\
    \ marked unavailable here\n    p"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var notes: [Int] = []\n    var beats: Int = 0\n    var\
    \ notes_string: String = \"\"\n    var notes_length: Int = 0\n    var notes_string_index:\
    \ Int = 0\n    var notes_string_index2: Int = 0\n    var notes_string_index3:\
    \ Int = 0\n    var notes_string_index4: Int = 0\n    var notes_string_index5:\
    \ Int = 0\n    var notes_string_index6: Int = 0\n    var notes_string_index7:\
    \ Int = 0\n    var notes_string_index8: Int = 0\n    var notes_string_index9:\
    \ Int = 0\n    var notes_string_index10: Int = 0\n    var notes_string_index11:\
    \ Int = 0\n    var notes_string_index12: Int = 0\n    var notes_string_index13:\
    \ Int = 0\n    var notes_string_index14: Int = 0\n    var notes_string_index15:\
    \ Int = 0\n    var notes_string_index16: Int = 0\n    var notes_string_index17:\
    \ Int = 0\n    var notes_string_index18: Int = 0\n    var notes_string_index19:\
    \ Int = 0\n    var notes_string_index20: Int = 0\n    var notes_string_index21:\
    \ Int = 0\n    var notes_string_index22: Int = 0\n    var notes_string_index23:\
    \ Int = 0\n    var notes_string_index24: Int = 0\n    var notes_string_index25:\
    \ Int = 0\n    var notes_string_index26: Int = 0\n    var notes_string_index27:\
    \ Int = 0\n    var notes_string_index28: Int = 0\n    var notes_string_index29:\
    \ Int = 0\n    var notes_string_index30: Int = 0\n    var notes_string_index31:\
    \ Int = 0\n    var notes_string_index32: Int = 0\n    var notes_string_index33:\
    \ Int = 0\n    var notes_string_index34: Int = 0\n    var notes_string_index35:\
    \ Int = 0\n    var notes_string_index36: Int = 0\n    var notes_string_index37:\
    \ Int = 0\n    var notes_string_index38: Int = 0\n    var notes_string_index39:\
    \ Int = 0\n    var notes_string_index40: Int = 0\n    var notes_string_index41:\
    \ Int = 0\n    var notes_string_index42: Int = 0\n    var notes_string_index43:\
    \ Int = 0\n    var notes_string_index44: Int = 0\n    var notes_string_index45:\
    \ Int = 0\n    var notes_string_index46: Int = 0\n    var notes_string_index47:\
    \ Int = 0\n    var notes_string_index48: Int = 0\n    var notes_string_index49:\
    \ Int = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpdeetk15g.swift:10:9: warning: variable 'notes' was never used;\
    \ consider replacing with '_' or removing it\n    var notes: [Int] = []\n    \
    \    ^~~~~\n        _\n/tmp/tmpdeetk15g.swift:11:9: warning: variable 'beats'\
    \ was never used; consider replacing with '_' or removing it\n    var beats: Int\
    \ = 0\n        ^~~~~\n        _\n/tmp/tmpdeetk15g.swift:12:9: warning: variable\
    \ 'notes_string' was never used; consider replacing with '_' or removing it\n\
    \    var notes_string: String = \"\"\n        ^~~~~~~~~~~~\n        _\n/tmp/tmpdeetk15g.swift:13:9:\
    \ warning: variable 'notes_length' was never used; consider replacing with '_'\
    \ or removing it\n    var notes_length: Int = 0\n        ^~~~~~~~~~~~\n      \
    \  _\n/tmp/tmpdeetk15g.swift:14:9: warning: variable 'notes_string_index' was\
    \ never used; consider replacing with '_' or removing it\n    var notes_string_index:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpdeetk15g.swift:15:9:\
    \ warning: variable 'notes_string_index2' was never used; consider replacing with\
    \ '_' or removing it\n    var notes_string_index2: Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpdeetk15g.swift:16:9: warning: variable 'notes_string_index3'\
    \ was never used; consider replacing with '_' or removing it\n    var notes_string_index3:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpdeetk15g.swift:17:9:\
    \ warning: variable 'notes_string_index4' was never used; consider replacing with\
    \ '_' or removing it\n    var notes_string_index4: Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpdeetk15g.swift:18:9: warning: variable 'notes_string_index5'\
    \ was never used; consider replacing with '_' or removing it\n    var notes_string_index5:\
    \ Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n        _\n/tmp/tmpdeetk15g.swift:19:9:\
    \ warning: variable 'notes_string_index6' was never used; consider replacing with\
    \ '_' or removing it\n    var notes_string_index6: Int = 0\n        ^~~~~~~~~~~~~~~~~~~\n\
    \        _\n/tmp/tmpdeetk15g.swift:20:9: warning: variable 'notes_string_index7'\
    \ was never used; consider replacing with '_' or removing it\n    var note"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_value = 0\n    var current_note_length_string_value_value_index\
    \ = 0\n    var current_note_length_string_value_value_value = 0\n    var current_note_length_string_value_value_value_index\
    \ = 0\n    var current_note_length_string_value_value_value_value = 0\n    var\
    \ current_note_length_string_value_value_value_value_index = 0\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n    var current_note_length_string_value_value_value_value_index = 0\n\
    \    var current_note_length_string_value_value_value_value_value = 0\n    var\
    \ current_note_length_string_value_value_value_value_index = 0\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n    var current_note_length_string_value_value_value_value_index = 0\n\
    \    var current_note_length_string_value_value_value_value_value = 0\n    var\
    \ current_note_length_string_value_value_value_value_index = 0\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n    var current_note_length_string_value_value_value_value_index = 0\n\
    \    var current_note_length_string_value_value_value_value_value = 0\n    var\
    \ current_note_length_string_value_value_value_value_index = 0\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n    var current_note_length_string_value_value_value_value_index = 0\n\
    \    var current_note_length_string_value_value_value_value_value = 0\n    var\
    \ current_note_length_string_value_value_value_value_index = 0\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n    var current_note_length_string_value_value_value_value_index = 0\n\
    \    var current_note_length_string_value_value_value_value_value = 0\n    var\
    \ current_note_length_string_value_value_value_value_index = 0\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n    var current_note_length_string_value_value_value_value_index = 0\n\
    \    var current_note_length_string_value_value_value_value_value = 0\n    var\
    \ current_note_length_string_value_value_value_value_index = 0\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n    var current_note_length_string_value_value_value_value_index = 0\n\
    \    var current_note_length_string_value_value_value_value_value = 0\n    var\
    \ current_note_length_string_value_value_value_value_index = 0\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n    var current_note_length_string_value_value_value_value_index = 0\n\
    \    var current_note_length_string_value_value_value_value_value = 0\n    var\
    \ current_note_length_string_value_value_value_value_index = 0\n    var current_note_\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpnm30rxs1.swift:26:9: error: invalid redeclaration of 'current_note_length_string_value_value_value_value_index'\n\
    \    var current_note_length_string_value_value_value_value_index = 0\n      \
    \  ^\n/tmp/tmpnm30rxs1.swift:24:9: note: 'current_note_length_string_value_value_value_value_index'\
    \ previously declared here\n    var current_note_length_string_value_value_value_value_index\
    \ = 0\n        ^\n/tmp/tmpnm30rxs1.swift:27:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_value_value_value_value'\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpnm30rxs1.swift:25:9: note: 'current_note_length_string_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpnm30rxs1.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_value_value_value_index'\n    var current_note_length_string_value_value_value_value_index\
    \ = 0\n        ^\n/tmp/tmpnm30rxs1.swift:24:9: note: 'current_note_length_string_value_value_value_value_index'\
    \ previously declared here\n    var current_note_length_string_value_value_value_value_index\
    \ = 0\n        ^\n/tmp/tmpnm30rxs1.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_value_value_value_value'\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpnm30rxs1.swift:25:9: note: 'current_note_length_string_value_value_value_value_value'\
    \ previously declared here\n    var current_note_length_string_value_value_value_value_value\
    \ = 0\n        ^\n/tmp/tmpnm30rxs1.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_value_value_value_index'\n    var current_note_length_string_value_value_value_value_index\
    \ = 0\n        ^\n/tmp/tmpnm30rxs1.swift:24:9: note: 'current_note_length_string_value_value_value_value_index'\
    \ previously declared here\n    var current_note_length_string_value_value_value_value_index\
    \ = 0\n        ^\n/tmp/tmpnm30rxs1.swift:31:9: error: invalid redeclaration of\
    \ 'c"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var last_note = 0\n    var last_beat = 0\n    var last_beat_type\
    \ = 0\n    var last_beat_type_name = \"\"\n    var last_beat_type_value = 0\n\
    \    var last_beat_type_value_name = \"\"\n    var last_beat_type_value_value\
    \ = 0\n    var last_beat_type_value_value_name = \"\"\n    var last_beat_type_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_name = \"\"\n    var last_beat_type_value_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_value_name = \"\"\n    var last_beat_type_value_value_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_value_value_name = \"\"\n    var\
    \ last_beat_type_value_value_value_value_value_value = 0\n    var last_beat_type_value_value_value_value_value_value_name\
    \ = \"\"\n    var last_beat_type_value_value_value_value_value_value_value = 0\n\
    \    var last_beat_type_value_value_value_value_value_value_value_name = \"\"\n\
    \    var last_beat_type_value_value_value_value_value_value_value_value = 0\n\
    \    var last_beat_type_value_value_value_value_value_value_value_value_name =\
    \ \"\"\n    var last_beat_type_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_value_value_value_value_value_value_name\
    \ = \"\"\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_name\
    \ = \"\"\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value_name\
    \ = \"\"\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value_value_name\
    \ = \"\"\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value_value_value_name\
    \ = \"\"\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value_value_value_value_name\
    \ = \"\"\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_name\
    \ = \"\"\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value_value\
    \ = 0\n    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp1gsgq4a4.swift:48:9: error: type annotation missing in pattern\n\
    \    var last_beat_type_value_value_value_value_value_value_value_value_value_value_value\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beats_count = 0\n    var\
    \ note = String()\n    var last_note = String()\n    var last_beat = 0\n    var\
    \ last_beats = 0\n    var last_beats_count = 0\n    var last_note_count = 0\n\
    \    var last_note_beat = 0\n    var last_note_beats = 0\n    var last_note_beats_count\
    \ = 0\n    var last_note_note = String()\n    var last_note_note_count = 0\n \
    \   var last_note_note_beat = 0\n    var last_note_note_beats = 0\n    var last_note_note_beats_count\
    \ = 0\n    var last_note_note_note = String()\n    var last_note_note_note_count\
    \ = 0\n    var last_note_note_note_beat = 0\n    var last_note_note_note_beats\
    \ = 0\n    var last_note_note_note_beats_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\
    \ = String()\n    var last_note_note_note_note_count = 0\n    var last_note_note_note_note\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpun_0kk30.swift:33:9: error: invalid redeclaration of 'last_note_note_note_note'\n\
    \    var last_note_note_note_note = String()\n        ^\n/tmp/tmpun_0kk30.swift:31:9:\
    \ note: 'last_note_note_note_note' previously declared here\n    var last_note_note_note_note\
    \ = String()\n        ^\n/tmp/tmpun_0kk30.swift:34:9: error: invalid redeclaration\
    \ of 'last_note_note_note_note_count'\n    var last_note_note_note_note_count\
    \ = 0\n        ^\n/tmp/tmpun_0kk30.swift:32:9: note: 'last_note_note_note_note_count'\
    \ previously declared here\n    var last_note_note_note_note_count = 0\n     \
    \   ^\n/tmp/tmpun_0kk30.swift:35:9: error: invalid redeclaration of 'last_note_note_note_note'\n\
    \    var last_note_note_note_note = String()\n        ^\n/tmp/tmpun_0kk30.swift:31:9:\
    \ note: 'last_note_note_note_note' previously declared here\n    var last_note_note_note_note\
    \ = String()\n        ^\n/tmp/tmpun_0kk30.swift:36:9: error: invalid redeclaration\
    \ of 'last_note_note_note_note_count'\n    var last_note_note_note_note_count\
    \ = 0\n        ^\n/tmp/tmpun_0kk30.swift:32:9: note: 'last_note_note_note_note_count'\
    \ previously declared here\n    var last_note_note_note_note_count = 0\n     \
    \   ^\n/tmp/tmpun_0kk30.swift:37:9: error: invalid redeclaration of 'last_note_note_note_note'\n\
    \    var last_note_note_note_note = String()\n        ^\n/tmp/tmpun_0kk30.swift:31:9:\
    \ note: 'last_note_note_note_note' previously declared here\n    var last_note_note_note_note\
    \ = String()\n        ^\n/tmp/tmpun_0kk30.swift:38:9: error: invalid redeclaration\
    \ of 'last_note_note_note_note_count'\n    var last_note_note_note_note_count\
    \ = 0\n        ^\n/tmp/tmpun_0kk30.swift:32:9: note: 'last_note_note_note_note_count'\
    \ previously declared here\n    var last_note_note_note_note_count = 0\n     \
    \   ^\n/tmp/tmpun_0kk30.swift:39:9: error: invalid redeclaration of 'last_note_note_note_note'\n\
    \    var last_note_note_note_note = String()\n        ^\n/tmp/tmpun_0kk30.swift:31:9:\
    \ note: 'last_note_note_note_note' previously declared here\n    var last_note_note_note_note\
    \ = String()\n        ^\n/tmp/tmpun_0kk30.swift:40:9: error: i"
  stdout: ''
  timestamp: 1660014061
- exit_code: -4
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beat = 0\n    var note = \"\"\n    var note_index = 0\n    for c in music_string\
    \ {\n        if c == \"o\" {\n            if note != \"\" {\n                notes.append(note)\n\
    \                note = \"\"\n            }\n            beats.append(beat)\n\
    \            beat = 0\n            note_index += 1\n        } else if c == \"\
    |\" {\n            if note != \"\" {\n                notes.append(note)\n   \
    \             note = \"\"\n            }\n            beats.append(beat)\n   \
    \         beat = 0\n            note_index += 1\n        } else if c == \".\"\
    \ {\n            if note != \"\" {\n                notes.append(note)\n     \
    \           note = \"\"\n            }\n            beats.append(beat)\n     \
    \       beat = 0\n            note_index += 1\n        } else {\n            note\
    \ += String(c)\n        }\n    }\n    if note != \"\" {\n        notes.append(note)\n\
    \    }\n    for note in notes {\n        beats.append(beat)\n    }\n    return\
    \ beats\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: Exception
  stderr: 'tmphmtgi4ib/tmphmtgi4ib.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25bb116c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25bae0db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25bae0d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25bae0c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphmtgi4ib                        0x00005579a2de2a8f <unavailable> + 6799

    5    libc.so.6                          0x00002b25bb302460 __libc_start_main +
    245

    6    tmphmtgi4ib                        0x00005579a2de25c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660014062
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var last_note = \"\"\n    var last_beat = 0\n    var last_beat_index = 0\n\
    \    var last_beat_index2 = 0\n    var last_beat_index3 = 0\n    var last_beat_index4\
    \ = 0\n    var last_beat_index5 = 0\n    var last_beat_index6 = 0\n    var last_beat_index7\
    \ = 0\n    var last_beat_index8 = 0\n    var last_beat_index9 = 0\n    var last_beat_index10\
    \ = 0\n    var last_beat_index11 = 0\n    var last_beat_index12 = 0\n    var last_beat_index13\
    \ = 0\n    var last_beat_index14 = 0\n    var last_beat_index15 = 0\n    var last_beat_index16\
    \ = 0\n    var last_beat_index17 = 0\n    var last_beat_index18 = 0\n    var last_beat_index19\
    \ = 0\n    var last_beat_index20 = 0\n    var last_beat_index21 = 0\n    var last_beat_index22\
    \ = 0\n    var last_beat_index23 = 0\n    var last_beat_index24 = 0\n    var last_beat_index25\
    \ = 0\n    var last_beat_index26 = 0\n    var last_beat_index27 = 0\n    var last_beat_index28\
    \ = 0\n    var last_beat_index29 = 0\n    var last_beat_index30 = 0\n    var last_beat_index31\
    \ = 0\n    var last_beat_index32 = 0\n    var last_beat_index33 = 0\n    var last_beat_index34\
    \ = 0\n    var last_beat_index35 = 0\n    var last_beat_index36 = 0\n    var last_beat_index37\
    \ = 0\n    var last_beat_index38 = 0\n    var last_beat_index39 = 0\n    var last_beat_index40\
    \ = 0\n    var last_beat_index41 = 0\n    var last_beat_index42 = 0\n    var last_beat_index43\
    \ = 0\n    var last_beat_index44 = 0\n    var last_beat_index45 = 0\n    var last_beat_index46\
    \ = 0\n    var last_beat_index47 = 0\n    var last_beat_index48 = 0\n    var last_beat_index49\
    \ = 0\n    var last_beat_index50 = 0\n    var last_beat_index51 = 0\n    var last_beat_index52\
    \ = 0\n    var last_beat_index53 = 0\n    var last_beat_index54 = 0\n    var last_beat_index55\
    \ = 0\n    var last_beat_index56 = 0\n    var last_beat_index57 = 0\n    var last_beat_index58\
    \ = 0\n    var last_beat_index59 = 0\n    var last_beat_index60 = 0\n    var last_beat_index61\
    \ = 0\n    var last_beat_index62 = 0\n    var last_beat_index63 = 0\n    var last_beat_index64\
    \ = 0\n    var last_beat_index65 = 0\n    var last_beat_index66 = 0\n    var last_beat_index67\
    \ = 0\n    var last_beat_index68 = 0\n    var last_beat_index69 = 0\n    var last_beat_index70\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp15fpnpg1.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmp15fpnpg1.swift:11:9: warning:\
    \ initialization of variable 'notes' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmp15fpnpg1.swift:12:9:\
    \ warning: initialization of variable 'last_note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var last_note = \"\"\n    ~~~~^~~~~~~~~\n\
    \    _\n/tmp/tmp15fpnpg1.swift:13:9: warning: initialization of variable 'last_beat'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat = 0\n    ~~~~^~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:14:9:\
    \ warning: initialization of variable 'last_beat_index' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_index = 0\n\
    \    ~~~~^~~~~~~~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:15:9: warning: initialization\
    \ of variable 'last_beat_index2' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_beat_index2 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp15fpnpg1.swift:16:9: warning: initialization of variable 'last_beat_index3'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_index3 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:17:9:\
    \ warning: initialization of variable 'last_beat_index4' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var last_beat_index4 =\
    \ 0\n    ~~~~^~~~~~~~~~~~~~~~\n    _\n/tmp/tmp15fpnpg1.swift:18:9: warning: initialization\
    \ of variable 'last_beat_index5' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var last_beat_index5 = 0\n    ~~~~^~~~~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp15fpnpg1.swift:19:9: warning: initialization of variable 'last_beat_index6'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var last_beat_index6 = 0\n    "
  stdout: ''
  timestamp: 1660014060
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = \"\"\n    var last_note = \"\"\n    var last_beat = 0\n    var\
    \ last_beat_index = 0\n    for c in music_string {\n        switch c {\n     \
    \   case \"o\":\n            if current_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \       }\n        case \"o|\":\n            if current_note != \"\" {\n     \
    \           beats.append(current_beat)\n                current_beat = 0\n   \
    \             current_note = \"\"\n            }\n        case \"|\":\n      \
    \      if current_note != \"\" {\n                beats.append(current_beat)\n\
    \                current_beat = 0\n                current_note = \"\"\n     \
    \       }\n        default:\n            if current_note != \"\" {\n         \
    \       current_note += c\n            } else {\n                current_beat\
    \ = Int(c) - 48\n            }\n        }\n    }\n    if current_note != \"\"\
    \ {\n        beats.append(current_beat)\n    }\n    return beats\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmp71qr73re.swift:24:14: error: expression pattern of type 'String'\
    \ cannot match values of type 'Character'\n        case \"o|\":\n            \
    \ ^~~~\n/tmp/tmp71qr73re.swift:38:33: error: cannot convert value of type 'Character'\
    \ to expected argument type 'String'\n                current_note += c\n    \
    \                            ^\n/tmp/tmp71qr73re.swift:40:32: error: no exact\
    \ matches in call to initializer \n                current_beat = Int(c) - 48\n\
    \                               ^\nSwift.Int:7:12: note: candidate expects value\
    \ of type 'Float16' for parameter #1 (got 'Character')\n    public init(_ source:\
    \ Float16)\n           ^\nSwift.Int:10:12: note: candidate expects value of type\
    \ 'Float' for parameter #1 (got 'Character')\n    public init(_ source: Float)\n\
    \           ^\nSwift.Int:12:12: note: candidate expects value of type 'Double'\
    \ for parameter #1 (got 'Character')\n    public init(_ source: Double)\n    \
    \       ^\nSwift.Int:14:12: note: candidate expects value of type 'Float80' for\
    \ parameter #1 (got 'Character')\n    public init(_ source: Float80)\n       \
    \    ^\nSwift.Int:28:12: note: candidate expects value of type 'Builtin.Int64'\
    \ for parameter #1 (got 'Character')\n    public init(_ _value: Builtin.Int64)\n\
    \           ^\nSwift.Int:61:12: note: candidate expects value of type 'Builtin.Word'\
    \ for parameter #1 (got 'Character')\n    public init(_ _v: Builtin.Word)\n  \
    \         ^\n"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var notes = [String]()\n  \
    \  var beats_count = 0\n    var notes_count = 0\n    var note = \"\"\n    var\
    \ beat = \"\"\n    var last_note = \"\"\n    var last_beat = \"\"\n    var last_beat_count\
    \ = 0\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_note_count = 0\n    var last_note = \"\"\n    var last_note_count\
    \ = 0\n    var last_note = \"\"\n    var last_note_count = 0\n    var last_note\
    \ = \"\"\n    var last_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpivn2s6dy.swift:20:9: error: invalid redeclaration of 'last_note'\n\
    \    var last_note = \"\"\n        ^\n/tmp/tmpivn2s6dy.swift:16:9: note: 'last_note'\
    \ previously declared here\n    var last_note = \"\"\n        ^\n/tmp/tmpivn2s6dy.swift:21:9:\
    \ error: invalid redeclaration of 'last_note_count'\n    var last_note_count =\
    \ 0\n        ^\n/tmp/tmpivn2s6dy.swift:19:9: note: 'last_note_count' previously\
    \ declared here\n    var last_note_count = 0\n        ^\n/tmp/tmpivn2s6dy.swift:22:9:\
    \ error: invalid redeclaration of 'last_note'\n    var last_note = \"\"\n    \
    \    ^\n/tmp/tmpivn2s6dy.swift:16:9: note: 'last_note' previously declared here\n\
    \    var last_note = \"\"\n        ^\n/tmp/tmpivn2s6dy.swift:23:9: error: invalid\
    \ redeclaration of 'last_note_count'\n    var last_note_count = 0\n        ^\n\
    /tmp/tmpivn2s6dy.swift:19:9: note: 'last_note_count' previously declared here\n\
    \    var last_note_count = 0\n        ^\n/tmp/tmpivn2s6dy.swift:24:9: error: invalid\
    \ redeclaration of 'last_note'\n    var last_note = \"\"\n        ^\n/tmp/tmpivn2s6dy.swift:16:9:\
    \ note: 'last_note' previously declared here\n    var last_note = \"\"\n     \
    \   ^\n/tmp/tmpivn2s6dy.swift:25:9: error: invalid redeclaration of 'last_note_count'\n\
    \    var last_note_count = 0\n        ^\n/tmp/tmpivn2s6dy.swift:19:9: note: 'last_note_count'\
    \ previously declared here\n    var last_note_count = 0\n        ^\n/tmp/tmpivn2s6dy.swift:26:9:\
    \ error: invalid redeclaration of 'last_note'\n    var last_note = \"\"\n    \
    \    ^\n/tmp/tmpivn2s6dy.swift:16:9: note: 'last_note' previously declared here\n\
    \    var last_note = \"\"\n        ^\n/tmp/tmpivn2s6dy.swift:27:9: error: invalid\
    \ redeclaration of 'last_note_count'\n    var last_note_count = 0\n        ^\n\
    /tmp/tmpivn2s6dy.swift:19:9: note: 'last_note_count' previously declared here\n\
    \    var last_note_count = 0\n        ^\n/tmp/tmpivn2s6dy.swift:28:9: error: invalid\
    \ redeclaration of 'last_note'\n    var last_note = \"\"\n        ^\n/tmp/tmpivn2s6dy.swift:16:9:\
    \ note: 'last_note' previously declared here\n    var last_note = \"\"\n     \
    \   ^\n/tmp/tmpivn2s6dy.swift:29:9: error: invalid redeclaration of "
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = 0\n    var current_note_length = 0\n    var current_note_length_index\
    \ = 0\n    var current_note_length_string = \"\"\n    var current_note_length_string_index\
    \ = 0\n    var current_note_length_string_value = 0\n    var current_note_length_string_value_index\
    \ = 0\n    var current_note_length_string_value_string = \"\"\n    var current_note_length_string_value_string_index\
    \ = 0\n    var current_note_length_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string = \"\"\n \
    \   var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string\
    \ = \"\"\n    var current_note_length_string_value_string_value_index = 0\n  \
    \  var current_note_length_string_value_string_value_string_value = 0\n    var\
    \ current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index = 0\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n    var current_note_length_string_value_string_value_index = 0\n    var\
    \ current_note_length_string_value_string_value_string_value = 0\n    var current_note_length_string_value_string_value_index\
    \ = 0\n    var current_note_length_string_value_string_value_string_value = 0\n\
    \    var current_note_length_string_value_string_value_index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\nassert(parse_music(music_string:\
    \ \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\"\
    ) == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o| .| .| o o o o\")\
    \ == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string: \"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmprf4q70kg.swift:24:9: error: invalid redeclaration of 'current_note_length_string_value_string_value_index'\n\
    \    var current_note_length_string_value_string_value_index = 0\n        ^\n\
    /tmp/tmprf4q70kg.swift:22:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmprf4q70kg.swift:25:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string'\n    var current_note_length_string_value_string_value_string\
    \ = \"\"\n        ^\n/tmp/tmprf4q70kg.swift:23:9: note: 'current_note_length_string_value_string_value_string'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string\
    \ = \"\"\n        ^\n/tmp/tmprf4q70kg.swift:26:9: error: invalid redeclaration\
    \ of 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmprf4q70kg.swift:22:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmprf4q70kg.swift:28:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmprf4q70kg.swift:22:9: note: 'current_note_length_string_value_string_value_index'\
    \ previously declared here\n    var current_note_length_string_value_string_value_index\
    \ = 0\n        ^\n/tmp/tmprf4q70kg.swift:29:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_string_value'\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmprf4q70kg.swift:27:9: note: 'current_note_length_string_value_string_value_string_value'\
    \ previously declared here\n    var current_note_length_string_value_string_value_string_value\
    \ = 0\n        ^\n/tmp/tmprf4q70kg.swift:30:9: error: invalid redeclaration of\
    \ 'current_note_length_string_value_string_value_index'\n    var curren"
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var current_beat = 0\n    var\
    \ current_note = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_length = Int()\n    var current_note_length = Int()\n\
    \    var current_note_length = Int()\n    var current_note_length = Int()\n  \
    \  var current_note_length = Int()\n    var current_note_length = Int()\n    var\
    \ current_note_length = Int()\n    var current_note_length = Int()\n    var current_note_length\
    \ = Int()\n    var current_note_length = Int()\n    var current_note_length =\
    \ Int()\n    var current_note_\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(parse_music(music_string:\
    \ \"\") == [] as [Int])\nassert(parse_music(music_string: \"o o o o\") == [4,\
    \ 4, 4, 4])\nassert(parse_music(music_string: \".| .| .| .|\") == [1, 1, 1, 1])\n\
    assert(parse_music(music_string: \"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4,\
    \ 4, 4])\nassert(parse_music(music_string: \"o| .| o| .| o o| o o|\") == [2, 1,\
    \ 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpe37m21i1.swift:14:9: error: invalid redeclaration of 'current_note_length'\n\
    \    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:15:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:16:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:17:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:18:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:19:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:20:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n        ^\n/tmp/tmpe37m21i1.swift:21:9: error: invalid redeclaration\
    \ of 'current_note_length'\n    var current_note_length = Int()\n        ^\n/tmp/tmpe37m21i1.swift:13:9:\
    \ note: 'current_note_length' previously declared here\n    var current_note_length\
    \ = Int()\n  "
  stdout: ''
  timestamp: 1660014061
- exit_code: 1
  program: "\n/// Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n/// Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n/// not last.\n/// Here\
    \ is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note,\
    \ lasts two beats\n/// '.|' - quater note, lasts one beat\nfunc parse_music(music_string:\
    \ String) -> [Int] {\n    var beats = [Int]()\n    var beat = 0\n    var note\
    \ = 0\n    var notes = [String]()\n    var notes_length = 0\n    var notes_length2\
    \ = 0\n    var notes_length3 = 0\n    var notes_length4 = 0\n    var notes_length5\
    \ = 0\n    var notes_length6 = 0\n    var notes_length7 = 0\n    var notes_length8\
    \ = 0\n    var notes_length9 = 0\n    var notes_length10 = 0\n    var notes_length11\
    \ = 0\n    var notes_length12 = 0\n    var notes_length13 = 0\n    var notes_length14\
    \ = 0\n    var notes_length15 = 0\n    var notes_length16 = 0\n    var notes_length17\
    \ = 0\n    var notes_length18 = 0\n    var notes_length19 = 0\n    var notes_length20\
    \ = 0\n    var notes_length21 = 0\n    var notes_length22 = 0\n    var notes_length23\
    \ = 0\n    var notes_length24 = 0\n    var notes_length25 = 0\n    var notes_length26\
    \ = 0\n    var notes_length27 = 0\n    var notes_length28 = 0\n    var notes_length29\
    \ = 0\n    var notes_length30 = 0\n    var notes_length31 = 0\n    var notes_length32\
    \ = 0\n    var notes_length33 = 0\n    var notes_length34 = 0\n    var notes_length35\
    \ = 0\n    var notes_length36 = 0\n    var notes_length37 = 0\n    var notes_length38\
    \ = 0\n    var notes_length39 = 0\n    var notes_length40 = 0\n    var notes_length41\
    \ = 0\n    var notes_length42 = 0\n    var notes_length43 = 0\n    var notes_length44\
    \ = 0\n    var notes_length45 = 0\n    var notes_length46 = 0\n    var notes_length47\
    \ = 0\n    var notes_length48 = 0\n    var notes_length49 = 0\n    var notes_length50\
    \ = 0\n    var notes_length51 = 0\n    var notes_length52 = 0\n    var notes_length53\
    \ = 0\n    var notes_length54 = 0\n    var notes_length55 = 0\n    var notes_length56\
    \ = 0\n    var notes_length57 = 0\n    var notes_length58 = 0\n    var notes_length59\
    \ = 0\n    var notes_length60 = 0\n    var notes_length61 = 0\n    var notes_length62\
    \ = 0\n    var notes_length63 = 0\n    var notes_length64 = 0\n    var notes_length65\
    \ = 0\n    var notes_length66 = 0\n    var notes_length67 = 0\n    var notes_length68\
    \ = 0\n    var notes_length69 = 0\n    var notes_length70 = 0\n    var \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(parse_music(music_string: \"\") == [] as [Int])\n\
    assert(parse_music(music_string: \"o o o o\") == [4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \".| .| .| .|\") == [1, 1, 1, 1])\nassert(parse_music(music_string: \"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\nassert(parse_music(music_string:\
    \ \"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])"
  status: SyntaxError
  stderr: "/tmp/tmpgqdlq8hf.swift:84:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpgqdlq8hf.swift:10:9: warning: initialization of variable 'beats'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var beats = [Int]()\n    ~~~~^~~~~\n    _\n/tmp/tmpgqdlq8hf.swift:11:9: warning:\
    \ initialization of variable 'beat' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var beat = 0\n    ~~~~^~~~\n    _\n/tmp/tmpgqdlq8hf.swift:12:9:\
    \ warning: initialization of variable 'note' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var note = 0\n    ~~~~^~~~\n    _\n\
    /tmp/tmpgqdlq8hf.swift:13:9: warning: initialization of variable 'notes' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var notes\
    \ = [String]()\n    ~~~~^~~~~\n    _\n/tmp/tmpgqdlq8hf.swift:14:9: warning: initialization\
    \ of variable 'notes_length' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length = 0\n    ~~~~^~~~~~~~~~~~\n    _\n\
    /tmp/tmpgqdlq8hf.swift:15:9: warning: initialization of variable 'notes_length2'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length2 = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpgqdlq8hf.swift:16:9:\
    \ warning: initialization of variable 'notes_length3' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length3 = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpgqdlq8hf.swift:17:9: warning: initialization\
    \ of variable 'notes_length4' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var notes_length4 = 0\n    ~~~~^~~~~~~~~~~~~\n  \
    \  _\n/tmp/tmpgqdlq8hf.swift:18:9: warning: initialization of variable 'notes_length5'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var notes_length5 = 0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpgqdlq8hf.swift:19:9:\
    \ warning: initialization of variable 'notes_length6' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var notes_length6 = 0\n\
    \    ~~~~^~~~~~~"
  stdout: ''
  timestamp: 1660014061
