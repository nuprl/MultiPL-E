language: swift
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpeg8pay_s.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpeg8pay_s.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpeg8pay_s.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpeg8pay_s.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpeg8pay_s.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpeg8pay_s.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpeg8pay_s.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpeg8pay_s.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpeg8pay_s.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpeg8pay_s.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2))\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpft28oj1t.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpft28oj1t.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpft28oj1t.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpft28oj1t.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpft28oj1t.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpft28oj1t.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpft28oj1t.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpft28oj1t.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpft28oj1t.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpft28oj1t.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var a = a\n    var\
    \ b = b\n    var c = c\n    var area: Double = 0\n    if a + b > c {\n       \
    \ a = b\n        b = c\n        c = a\n    }\n    if a + c > b {\n        a =\
    \ c\n        c = b\n        b = a\n    }\n    if b + c > a {\n        b = c\n\
    \        c = a\n        a = b\n    }\n    area = (a * b * c) / Double(pow(a, 2)\
    \ + pow(b, 2) + pow(c, 2))\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp4ouk0gr1.swift:28:33: error: cannot find 'pow' in scope\n    area\
    \ = (a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c, 2))\n                \
    \                ^~~\n/tmp/tmp4ouk0gr1.swift:28:45: error: cannot find 'pow' in\
    \ scope\n    area = (a * b * c) / Double(pow(a, 2) + pow(b, 2) + pow(c, 2))\n\
    \                                            ^~~\n/tmp/tmp4ouk0gr1.swift:28:57:\
    \ error: cannot find 'pow' in scope\n    area = (a * b * c) / Double(pow(a, 2)\
    \ + pow(b, 2) + pow(c, 2))\n                                                 \
    \       ^~~\n/tmp/tmp4ouk0gr1.swift:28:19: error: cannot convert value of type\
    \ 'Int' to expected argument type 'Double'\n    area = (a * b * c) / Double(pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2))\n                  ^\n           Double(    )\n"
  stdout: ''
  timestamp: 1660015392
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides == 0 {\n        return -1\n    }\n    let area = Double(sides)\
    \ / Double(3.0)\n    if area > 1.0 {\n        return round(area, 2)\n    } else\
    \ {\n        return area\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpo5id66yz.swift:15:16: error: cannot find 'round' in scope\n   \
    \     return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2) / 2) / 2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwpygvp57.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2) / 2) / 2\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum += a\n    sum += b\n    sum += c\n    if sum > c {\n        return\
    \ sum\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp9udotln1.swift:10:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmp9udotln1.swift:11:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmp9udotln1.swift:12:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmp9udotln1.swift:13:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmp9udotln1.swift:13:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n \
    \   let b = abs(b)\n    let c = abs(c)\n    if a + b > c {\n        return Double(a\
    \ * b * 0.5)\n    } else {\n        return Double(-1 * c * b)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpla2bbofj.swift:13:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        return Double(a * b * 0.5)\n\
    \                      ~~~~~ ^ ~~~\n/tmp/tmpla2bbofj.swift:13:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        return Double(a * b * 0.5)\n                           \
    \ ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(-1) / Double(Double.max)\n    }\n    if a + c > b {\n  \
    \      return Double(-1) / Double(Double.max)\n    }\n    if b + c > a {\n   \
    \     return Double(-1) / Double(Double.max)\n    }\n    return Double(a * b *\
    \ c) / Double(Double.pi)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkxhrr9he.swift:10:43: error: type 'Double' has no member 'max'\n\
    \        return Double(-1) / Double(Double.max)\n                            \
    \       ~~~~~~ ^~~\n/tmp/tmpkxhrr9he.swift:13:43: error: type 'Double' has no\
    \ member 'max'\n        return Double(-1) / Double(Double.max)\n             \
    \                      ~~~~~~ ^~~\n/tmp/tmpkxhrr9he.swift:16:43: error: type 'Double'\
    \ has no member 'max'\n        return Double(-1) / Double(Double.max)\n      \
    \                             ~~~~~~ ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sum = a + b +\
    \ c\n    if sum > c {\n        return -1\n    }\n    if sum < c {\n        return\
    \ -1\n    }\n    if sum < b {\n        return -1\n    }\n    if sum < a {\n  \
    \      return -1\n    }\n    return Double(sqrt(Double(sum) * Double(sum - b -\
    \ c)))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqcoxy6f1.swift:22:19: error: cannot find 'sqrt' in scope\n    return\
    \ Double(sqrt(Double(sum) * Double(sum - b - c)))\n                  ^~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    if area > 0 {\n        return area\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfvslccgr.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 * side2 * side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprqslhn6j.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmprqslhn6j.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmprqslhn6j.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmprqslhn6j.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmprqslhn6j.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmprqslhn6j.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmprqslhn6j.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmprqslhn6j.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmprqslhn6j.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmprqslhn6j.swift:12:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmprqslhn6j.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(sqrt(pow((a + b), 2) + pow((c - a), 2)))\n    }\n    if\
    \ a + c > b {\n        return Double(sqrt(pow((a + c), 2) + pow((b - a), 2)))\n\
    \    }\n    if b + c > a {\n        return Double(sqrt(pow((b + c), 2) + pow((a\
    \ - b), 2)))\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprtltj8qa.swift:10:23: error: cannot find 'sqrt' in scope\n    \
    \    return Double(sqrt(pow((a + b), 2) + pow((c - a), 2)))\n                \
    \      ^~~~\n/tmp/tmprtltj8qa.swift:10:28: error: cannot find 'pow' in scope\n\
    \        return Double(sqrt(pow((a + b), 2) + pow((c - a), 2)))\n            \
    \               ^~~\n/tmp/tmprtltj8qa.swift:10:46: error: cannot find 'pow' in\
    \ scope\n        return Double(sqrt(pow((a + b), 2) + pow((c - a), 2)))\n    \
    \                                         ^~~\n/tmp/tmprtltj8qa.swift:13:23: error:\
    \ cannot find 'sqrt' in scope\n        return Double(sqrt(pow((a + c), 2) + pow((b\
    \ - a), 2)))\n                      ^~~~\n/tmp/tmprtltj8qa.swift:13:28: error:\
    \ cannot find 'pow' in scope\n        return Double(sqrt(pow((a + c), 2) + pow((b\
    \ - a), 2)))\n                           ^~~\n/tmp/tmprtltj8qa.swift:13:46: error:\
    \ cannot find 'pow' in scope\n        return Double(sqrt(pow((a + c), 2) + pow((b\
    \ - a), 2)))\n                                             ^~~\n/tmp/tmprtltj8qa.swift:16:23:\
    \ error: cannot find 'sqrt' in scope\n        return Double(sqrt(pow((b + c),\
    \ 2) + pow((a - b), 2)))\n                      ^~~~\n/tmp/tmprtltj8qa.swift:16:28:\
    \ error: cannot find 'pow' in scope\n        return Double(sqrt(pow((b + c), 2)\
    \ + pow((a - b), 2)))\n                           ^~~\n/tmp/tmprtltj8qa.swift:16:46:\
    \ error: cannot find 'pow' in scope\n        return Double(sqrt(pow((b + c), 2)\
    \ + pow((a - b), 2)))\n                                             ^~~\n"
  stdout: ''
  timestamp: 1660015391
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = abs(a)\n\
    \    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 + b1 > c1 {\n        return\
    \ Double(a1 * b1 / c1)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp8x7ltcz7/tmp8x7ltcz7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac47e13bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac47de32b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac47de32988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac47de317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8x7ltcz7                        0x0000556e7ba1f34f <unavailable> + 4943

    5    libc.so.6                          0x00002ac47e327460 __libc_start_main +
    245

    6    tmp8x7ltcz7                        0x0000556e7ba1efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum += a\n    sum += b\n    sum += c\n    if sum > c {\n        return\
    \ Double(sum - c) / 2\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyoet1ugr.swift:10:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmpyoet1ugr.swift:11:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmpyoet1ugr.swift:12:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmpyoet1ugr.swift:13:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpyoet1ugr.swift:13:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n/tmp/tmpyoet1ugr.swift:14:27: error:\
    \ binary operator '-' cannot be applied to operands of type 'Double' and 'Int'\n\
    \        return Double(sum - c) / 2\n                      ~~~ ^ ~\n/tmp/tmpyoet1ugr.swift:14:27:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n        return Double(sum - c) / 2\n         \
    \                 ^\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2) / 2) / 2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwpygvp57.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2) / 2) / 2\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let area: Double =\
    \ Double(a * b * c) / Double(2 * a * b + b * c + c * a + a * b + b * c)\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpg3_8h7_u/tmpg3_8h7_u.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b592aeebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b592abe2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b592abe2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b592abe17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg3_8h7_u                        0x000055b67f08e1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b592b0d7460 __libc_start_main +
    245

    6    tmpg3_8h7_u                        0x000055b67f08de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum += a\n    sum += b\n    sum += c\n    if sum > c {\n        return\
    \ Double(sum)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpo67x99ss.swift:10:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:11:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:12:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:13:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpo67x99ss.swift:13:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 * side2 * side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprqslhn6j.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmprqslhn6j.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmprqslhn6j.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmprqslhn6j.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmprqslhn6j.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmprqslhn6j.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmprqslhn6j.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmprqslhn6j.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmprqslhn6j.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmprqslhn6j.swift:12:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmprqslhn6j.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(sqrt(pow((b * b) - (4 * a * c), 0.5)))\n    } else {\n \
    \       return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5ho3sb1r.swift:10:23: error: cannot find 'sqrt' in scope\n    \
    \    return Double(sqrt(pow((b * b) - (4 * a * c), 0.5)))\n                  \
    \    ^~~~\n/tmp/tmp5ho3sb1r.swift:10:28: error: cannot find 'pow' in scope\n \
    \       return Double(sqrt(pow((b * b) - (4 * a * c), 0.5)))\n               \
    \            ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ Double(sum)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5cfjt77l.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp5cfjt77l.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp5cfjt77l.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = side1 + side2 + side3\n    if\
    \ area > 0 {\n        return Double(area)\n    } else {\n        return -1\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7hv87lsn.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp7hv87lsn.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp7hv87lsn.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp7hv87lsn.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp7hv87lsn.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp7hv87lsn.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp7hv87lsn.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp7hv87lsn.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp7hv87lsn.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 * side2 * side3\n\
    \    if area > 0 {\n        return round(area)\n    } else {\n        return -1\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpo8ppdh8e.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpo8ppdh8e.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpo8ppdh8e.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpo8ppdh8e.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpo8ppdh8e.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpo8ppdh8e.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpo8ppdh8e.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpo8ppdh8e.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpo8ppdh8e.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpo8ppdh8e.swift:12:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpo8ppdh8e.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area)\n          \
    \     ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    if area > 0 {\n        return round(area)\n    } else {\n        return -1\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsolddmzr.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpsolddmzr.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpsolddmzr.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpsolddmzr.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpsolddmzr.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpsolddmzr.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpsolddmzr.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpsolddmzr.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpsolddmzr.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpsolddmzr.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2) / 2) / 2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwpygvp57.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2) / 2) / 2\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides > 0 {\n        let area = Double(a * b * c) / sides\n    \
    \    return round(area, 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpziagdmk8.swift:11:38: error: binary operator '/' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n        let area = Double(a * b * c)\
    \ / sides\n                   ~~~~~~~~~~~~~~~~~ ^ ~~~~~\n/tmp/tmpziagdmk8.swift:11:38:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n        let area = Double(a * b * c) / sides\n\
    \                                     ^\n/tmp/tmpziagdmk8.swift:12:16: error:\
    \ cannot find 'round' in scope\n        return round(area, 2)\n              \
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var area: Double =\
    \ 0\n    if a + b > c {\n        area = (a * b) / c\n    } else {\n        area\
    \ = -1\n    }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnshhx5h_.swift:11:24: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = (a * b) / c\n               ~~~~~~~~^~~\n \
    \              Double(    )\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides % 2 == 0 {\n        return Double(sides / 2)\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmppeyabz7o/tmppeyabz7o.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b667b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b664abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b664ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b664aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeyabz7o                        0x00005637642a7383 <unavailable> + 4995

    5    libc.so.6                          0x00002b4b669a0460 __libc_start_main +
    245

    6    tmppeyabz7o                        0x00005637642a6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let sum = side1 + side2 + side3\n    if sum\
    \ > 0 {\n        return Double(round(sum * 100) / 100)\n    } else {\n       \
    \ return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3jhl775d.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp3jhl775d.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp3jhl775d.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp3jhl775d.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp3jhl775d.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp3jhl775d.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp3jhl775d.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp3jhl775d.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp3jhl775d.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp3jhl775d.swift:14:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(sum * 100) / 100)\n                     \
    \ ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    let area = Double(sides) / 2.0\n    if area > Double(sides / 2.0) {\n\
    \        return area\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkjc1026t.swift:11:28: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if area > Double(sides / 2.0) {\n\
    \                     ~~~~~ ^ ~~~\n/tmp/tmpkjc1026t.swift:11:28: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    if area > Double(sides / 2.0) {\n                          \
    \ ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ -1\n    }\n    return Double(sides.last) * 0.5\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmb3oy6cn.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpmb3oy6cn.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpmb3oy6cn.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpmb3oy6cn.swift:14:25: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * 0.5\n\
    \                        ^\n/tmp/tmpmb3oy6cn.swift:14:25: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    return\
    \ Double(sides.last) * 0.5\n                        ^\n                      \
    \       ?? <#default value#>\n/tmp/tmpmb3oy6cn.swift:14:25: note: force-unwrap\
    \ using '!' to abort execution if the optional value contains 'nil'\n    return\
    \ Double(sides.last) * 0.5\n                        ^\n                      \
    \      !\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum = a + b + c\n    if sum > c {\n        return Double(sum)\n    }\
    \ else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpq9kscwlm.swift:10:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n    sum = a + b + c\n          ~~~~~~^~~\n          Double(\
    \  )\n/tmp/tmpq9kscwlm.swift:11:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpq9kscwlm.swift:11:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n \
    \   let b = abs(b)\n    let c = abs(c)\n    if a + b > c {\n        return Double(a\
    \ * b * 0.5)\n    }\n    if a + c > b {\n        return Double(a * c * 0.5)\n\
    \    }\n    if b + c > a {\n        return Double(b * c * 0.5)\n    }\n    return\
    \ Double(-1) // not a triangle\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpqbqgm33d.swift:13:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        return Double(a * b * 0.5)\n\
    \                      ~~~~~ ^ ~~~\n/tmp/tmpqbqgm33d.swift:13:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        return Double(a * b * 0.5)\n                           \
    \ ^\n/tmp/tmpqbqgm33d.swift:16:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        return Double(a * c * 0.5)\n\
    \                      ~~~~~ ^ ~~~\n/tmp/tmpqbqgm33d.swift:16:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        return Double(a * c * 0.5)\n                           \
    \ ^\n/tmp/tmpqbqgm33d.swift:19:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        return Double(b * c * 0.5)\n\
    \                      ~~~~~ ^ ~~~\n/tmp/tmpqbqgm33d.swift:19:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        return Double(b * c * 0.5)\n                           \
    \ ^\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n \
    \   let b = abs(b)\n    let c = abs(c)\n    if a + b > c {\n        return Double(a\
    \ * b * 0.5)\n    }\n    if a + c > b {\n        return Double(a * c * 0.5)\n\
    \    }\n    if b + c > a {\n        return Double(b * c * 0.5)\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpruk8vf7i.swift:13:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        return Double(a * b * 0.5)\n\
    \                      ~~~~~ ^ ~~~\n/tmp/tmpruk8vf7i.swift:13:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        return Double(a * b * 0.5)\n                           \
    \ ^\n/tmp/tmpruk8vf7i.swift:16:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        return Double(a * c * 0.5)\n\
    \                      ~~~~~ ^ ~~~\n/tmp/tmpruk8vf7i.swift:16:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        return Double(a * c * 0.5)\n                           \
    \ ^\n/tmp/tmpruk8vf7i.swift:19:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        return Double(b * c * 0.5)\n\
    \                      ~~~~~ ^ ~~~\n/tmp/tmpruk8vf7i.swift:19:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        return Double(b * c * 0.5)\n                           \
    \ ^\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    if area > 0 {\n        return area\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfvslccgr.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides % 2 == 0 {\n        return Double(sides / 2)\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmppeyabz7o/tmppeyabz7o.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b667b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b664abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b664ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b664aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeyabz7o                        0x00005637642a7383 <unavailable> + 4995

    5    libc.so.6                          0x00002b4b669a0460 __libc_start_main +
    245

    6    tmppeyabz7o                        0x00005637642a6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let area: Double =\
    \ Double(a * b * c) / Double(2.0 * a + b + c)\n    return area < 0.0 ? -1.0 :\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpix9c8d9w.swift:9:51: error: cannot convert value of type 'Double'\
    \ to expected argument type 'Int'\n    let area: Double = Double(a * b * c) /\
    \ Double(2.0 * a + b + c)\n                                                  ^\n\
    \                                                  Int( )\n"
  stdout: ''
  timestamp: 1660015392
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpaimqecjj.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpaimqecjj.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpaimqecjj.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpaimqecjj.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpaimqecjj.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpaimqecjj.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpaimqecjj.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpaimqecjj.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpaimqecjj.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpaimqecjj.swift:13:12: error: cannot find 'round' in\
    \ scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = side1 + side2 + side3\n    if\
    \ area > 0 {\n        return Double(area)\n    } else {\n        return -1\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7hv87lsn.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp7hv87lsn.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp7hv87lsn.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp7hv87lsn.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp7hv87lsn.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp7hv87lsn.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp7hv87lsn.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp7hv87lsn.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp7hv87lsn.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum += a\n    sum += b\n    sum += c\n    if sum > c {\n        return\
    \ sum\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp22kynhov.swift:10:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmp22kynhov.swift:11:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmp22kynhov.swift:12:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmp22kynhov.swift:13:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmp22kynhov.swift:13:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sum = a + b +\
    \ c\n    if sum > 0 {\n        return Double(sum) / Double(sum)\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpyf997o2q/tmpyf997o2q.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3b2db84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3b2d87bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3b2d87b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3b2d87a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyf997o2q                        0x000055ef064c41cf <unavailable> + 4559

    5    libc.so.6                          0x00002b3b2dd70460 __libc_start_main +
    245

    6    tmpyf997o2q                        0x000055ef064c3e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ Double(sum) / Double(sides.last)\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpoddwp90g.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpoddwp90g.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpoddwp90g.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpoddwp90g.swift:12:43: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return Double(sum) / Double(sides.last)\n\
    \                                          ^\n/tmp/tmpoddwp90g.swift:12:43: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        return Double(sum) / Double(sides.last)\n                           \
    \               ^\n                                               ?? <#default\
    \ value#>\n/tmp/tmpoddwp90g.swift:12:43: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        return Double(sum) /\
    \ Double(sides.last)\n                                          ^\n          \
    \                                    !\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    if area > 0 {\n        return area\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfvslccgr.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var area: Double =\
    \ 0\n    if a + b > c {\n        area = (a * b) / c\n    } else {\n        area\
    \ = (a * c) / b\n    }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpcvnxh_3n.swift:11:24: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = (a * b) / c\n               ~~~~~~~~^~~\n \
    \              Double(    )\n/tmp/tmpcvnxh_3n.swift:13:24: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n        area = (a * c) / b\n         \
    \      ~~~~~~~~^~~\n               Double(    )\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides > 0 {\n        let area = Double(a * b * c) / Double(sides)\n\
    \        return round(area, 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpa2t7q4m_.swift:12:16: error: cannot find 'round' in scope\n   \
    \     return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n\
    \    if area > 0.0 {\n        return round(area * 100) / 100.0\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmfkopqth.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpmfkopqth.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpmfkopqth.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpmfkopqth.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpmfkopqth.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpmfkopqth.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpmfkopqth.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpmfkopqth.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpmfkopqth.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpmfkopqth.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100.0\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    \n    if sides.contains(0) {\n        return -1\n    }\n    \n    let\
    \ sum = sides.reduce(0, +)\n    \n    if sum > sides.last {\n        return -1\n\
    \    }\n    \n    return Double(sum) / Double(sides.last)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkabxko8h.swift:17:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpkabxko8h.swift:17:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpkabxko8h.swift:17:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpkabxko8h.swift:21:39: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sum) / Double(sides.last)\n\
    \                                      ^\n/tmp/tmpkabxko8h.swift:21:39: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    return Double(sum) / Double(sides.last)\n                               \
    \       ^\n                                           ?? <#default value#>\n/tmp/tmpkabxko8h.swift:21:39:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return Double(sum) / Double(sides.last)\n                       \
    \               ^\n                                          !\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides == 0 {\n        return -1\n    }\n    let area = Double(sqrt(Double(a\
    \ * b * c) / sides))\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpflb2vzjn.swift:13:23: error: cannot find 'sqrt' in scope\n    let\
    \ area = Double(sqrt(Double(a * b * c) / sides))\n                      ^~~~\n\
    /tmp/tmpflb2vzjn.swift:13:46: error: binary operator '/' cannot be applied to\
    \ operands of type 'Double' and 'Int'\n    let area = Double(sqrt(Double(a * b\
    \ * c) / sides))\n                           ~~~~~~~~~~~~~~~~~ ^ ~~~~~\n/tmp/tmpflb2vzjn.swift:13:46:\
    \ note: overloads for '/' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n    let area = Double(sqrt(Double(a * b * c) /\
    \ sides))\n                                             ^\n/tmp/tmpflb2vzjn.swift:14:12:\
    \ error: cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ Double(sum) / Double(sides.last)\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpoddwp90g.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpoddwp90g.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpoddwp90g.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpoddwp90g.swift:12:43: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return Double(sum) / Double(sides.last)\n\
    \                                          ^\n/tmp/tmpoddwp90g.swift:12:43: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        return Double(sum) / Double(sides.last)\n                           \
    \               ^\n                                               ?? <#default\
    \ value#>\n/tmp/tmpoddwp90g.swift:12:43: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        return Double(sum) /\
    \ Double(sides.last)\n                                          ^\n          \
    \                                    !\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    if area > 0 {\n        return round(area)\n    } else {\n        return -1\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpsolddmzr.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpsolddmzr.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpsolddmzr.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpsolddmzr.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpsolddmzr.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpsolddmzr.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpsolddmzr.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpsolddmzr.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpsolddmzr.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpsolddmzr.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    if area > 0 {\n        return area\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfvslccgr.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sumOfSides = sides.reduce(0, +)\n    if sumOfSides > sides.last\
    \ {\n        return -1\n    }\n    let third = sides.last\n    return Double(sumOfSides)\
    \ / third\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnntjn63_.swift:11:27: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sumOfSides > sides.last {\n  \
    \                        ^\n/tmp/tmpnntjn63_.swift:11:27: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              \
    \ ?? <#default value#>\n/tmp/tmpnntjn63_.swift:11:27: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n    if sumOfSides\
    \ > sides.last {\n                          ^\n                              !\n\
    /tmp/tmpnntjn63_.swift:15:33: error: cannot convert value of type 'Int?' to expected\
    \ argument type 'Double'\n    return Double(sumOfSides) / third\n            \
    \                    ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ Double(sum)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5cfjt77l.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp5cfjt77l.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp5cfjt77l.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = abs(a)\n\
    \    let b1 = abs(b)\n    let c1 = abs(c)\n    let a2 = a1 + b1\n    let b2 =\
    \ b1 + c1\n    let c2 = c1 + a1\n    if a2 > b2 && a2 > c2 {\n        return a\
    \ * b * c / 2\n    } else if b2 > a2 && b2 > c2 {\n        return b * a * c /\
    \ 2\n    } else {\n        return c * a * a / 2\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpug7bycm0.swift:16:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n/tmp/tmpug7bycm0.swift:18:26:\
    \ error: cannot convert return expression of type 'Int' to return type 'Double'\n\
    \        return b * a * c / 2\n               ~~~~~~~~~~^~~\n               Double(\
    \      )\n/tmp/tmpug7bycm0.swift:20:26: error: cannot convert return expression\
    \ of type 'Int' to return type 'Double'\n        return c * a * a / 2\n      \
    \         ~~~~~~~~~~^~~\n               Double(      )\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n\
    \    if area > 0.0 {\n        return round(area * 100) / 100.0\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmfkopqth.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpmfkopqth.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpmfkopqth.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpmfkopqth.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpmfkopqth.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpmfkopqth.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpmfkopqth.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpmfkopqth.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpmfkopqth.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpmfkopqth.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100.0\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n\
    \    if area > 0.0 {\n        return round(area * 100) / 100.0\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpazydgb27.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpazydgb27.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpazydgb27.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpazydgb27.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpazydgb27.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpazydgb27.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpazydgb27.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpazydgb27.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpazydgb27.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpazydgb27.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100.0\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ Double(sum) / Double(sides.last)\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpoddwp90g.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpoddwp90g.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpoddwp90g.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpoddwp90g.swift:12:43: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return Double(sum) / Double(sides.last)\n\
    \                                          ^\n/tmp/tmpoddwp90g.swift:12:43: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        return Double(sum) / Double(sides.last)\n                           \
    \               ^\n                                               ?? <#default\
    \ value#>\n/tmp/tmpoddwp90g.swift:12:43: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        return Double(sum) /\
    \ Double(sides.last)\n                                          ^\n          \
    \                                    !\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    let area = sides/2.0\n    if area > Double(sides) {\n        return\
    \ area\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpaypt6dvs.swift:10:21: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    let area = sides/2.0\n         \
    \      ~~~~~^~~~\n/tmp/tmpaypt6dvs.swift:10:21: note: overloads for '/' exist\
    \ with these partially matching parameter lists: (Double, Double), (Duration,\
    \ Double), (Int, Int)\n    let area = sides/2.0\n                    ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 * side2 * side3\n\
    \    if area > 0 {\n        return round(area, 2)\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5xcvh45f.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp5xcvh45f.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp5xcvh45f.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp5xcvh45f.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp5xcvh45f.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp5xcvh45f.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp5xcvh45f.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp5xcvh45f.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp5xcvh45f.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp5xcvh45f.swift:12:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp5xcvh45f.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides > 0 {\n        let area = Double(sides) / Double(sides - a)\n\
    \        return round(area, 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpjm0um7d3.swift:12:16: error: cannot find 'round' in scope\n   \
    \     return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides % 2 == 0 {\n        return Double(sides) / 2\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp4sw3ghyi/tmp4sw3ghyi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bd99a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bd9699b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bd9699988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bd96987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sw3ghyi                        0x0000555829081383 <unavailable> + 4995

    5    libc.so.6                          0x00002b7bd9b8e460 __libc_start_main +
    245

    6    tmp4sw3ghyi                        0x0000555829080ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides % 2 == 0 {\n        return Double(sides) / 2.0\n    }\n  \
    \  return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpm9piw8kd/tmpm9piw8kd.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad40813c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad4050ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad4050a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad405097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9piw8kd                        0x00005627bbb08383 <unavailable> + 4995

    5    libc.so.6                          0x00002aad409ff460 __libc_start_main +
    245

    6    tmpm9piw8kd                        0x00005627bbb07ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides == 0 {\n        return -1\n    }\n    let area = Double(sides)\
    \ / Double(sides - a)\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprpijii9e.swift:14:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n \
    \   let b = abs(b)\n    let c = abs(c)\n    if a + b > c {\n        return Double(a\
    \ + b - c)\n    } else {\n        return Double(a + b + c - a)\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpeoptc4tb/tmpeoptc4tb.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac334f07c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac334bfeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac334bfe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac334bfd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeoptc4tb                        0x000055bcea6c02bf <unavailable> + 4799

    5    libc.so.6                          0x00002ac3350f3460 __libc_start_main +
    245

    6    tmpeoptc4tb                        0x000055bcea6bff59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum = a + b + c\n    if sum > c {\n        return Double(sum - c) / Double(2\
    \ * c)\n    }\n    if sum > b {\n        return Double(sum - b) / Double(2 * b)\n\
    \    }\n    if sum > a {\n        return Double(sum - a) / Double(2 * a)\n   \
    \ }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz4foeecr.swift:10:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n    sum = a + b + c\n          ~~~~~~^~~\n          Double(\
    \  )\n/tmp/tmpz4foeecr.swift:11:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpz4foeecr.swift:11:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n/tmp/tmpz4foeecr.swift:12:27: error:\
    \ binary operator '-' cannot be applied to operands of type 'Double' and 'Int'\n\
    \        return Double(sum - c) / Double(2 * c)\n                      ~~~ ^ ~\n\
    /tmp/tmpz4foeecr.swift:12:27: note: overloads for '-' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n        return Double(sum\
    \ - c) / Double(2 * c)\n                          ^\n/tmp/tmpz4foeecr.swift:14:12:\
    \ error: binary operator '>' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    if sum > b {\n       ~~~ ^ ~\n/tmp/tmpz4foeecr.swift:14:12: note:\
    \ overloads for '>' exist with these partially matching parameter lists: (Int,\
    \ Int)\n    if sum > b {\n           ^\n/tmp/tmpz4foeecr.swift:15:27: error: binary\
    \ operator '-' cannot be applied to operands of type 'Double' and 'Int'\n    \
    \    return Double(sum - b) / Double(2 * b)\n                      ~~~ ^ ~\n/tmp/tmpz4foeecr.swift:15:27:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n        return Double(sum - b) / Double(2 * b)\n\
    \                          ^\n/tmp/tmpz4foeecr.swift:17:12: error: binary operator\
    \ '>' cannot be applied to operands of type 'Double' and 'Int'\n    if sum > a\
    \ {\n       ~~~ ^ ~\n/tmp/tmpz4foeecr.swift:17:12: note: overloads for '>' exist\
    \ with these partially matching parameter lists: (Int, Int)\n    if sum > a {\n\
    \           ^\n/tmp/tmpz4foeecr.swift:18:27: error: binary operator '-' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n        return Double(sum\
    \ - a) / Double(2 * a)\n                      ~~~ ^ ~\n/tmp/tmpz4foeecr.swift"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n\
    \    if area > 0.0 {\n        return round(area * 100) / 100.0\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpmfkopqth.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpmfkopqth.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpmfkopqth.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpmfkopqth.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpmfkopqth.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpmfkopqth.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpmfkopqth.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpmfkopqth.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpmfkopqth.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpmfkopqth.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100.0\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2 - side3))\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0xt_3_fb.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0xt_3_fb.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0xt_3_fb.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0xt_3_fb.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0xt_3_fb.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0xt_3_fb.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0xt_3_fb.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0xt_3_fb.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0xt_3_fb.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0xt_3_fb.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2 - side3))\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var a = a\n    var\
    \ b = b\n    var c = c\n    var area: Double = 0\n    if a + b > c {\n       \
    \ a = b\n        b = c\n        c = a\n    }\n    area = (a * b + c) / 2\n   \
    \ if area > 0 {\n        area = round(area, 2)\n    }\n    return area\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpjym6w0mo.swift:18:24: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n    area = (a * b + c) / 2\n           ~~~~~~~~~~~~^~~\n \
    \          Double(        )\n/tmp/tmpjym6w0mo.swift:20:16: error: cannot find\
    \ 'round' in scope\n        area = round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 * side2 * side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmprqslhn6j.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmprqslhn6j.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmprqslhn6j.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmprqslhn6j.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmprqslhn6j.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmprqslhn6j.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmprqslhn6j.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmprqslhn6j.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmprqslhn6j.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmprqslhn6j.swift:12:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmprqslhn6j.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    if area > 0 {\n        return area\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfvslccgr.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var area: Double =\
    \ 0\n    if a + b > c {\n        area = (a * b) / c\n    } else {\n        area\
    \ = -1\n    }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpnshhx5h_.swift:11:24: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = (a * b) / c\n               ~~~~~~~~^~~\n \
    \              Double(    )\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = abs(a)\n\
    \    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 > b1 && b1 > c1 {\n     \
    \   return Double(a1 * b1 * c1)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpnsewl7b9/tmpnsewl7b9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad80164cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad801343b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad801343988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8013427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsewl7b9                        0x0000560a5e6412bf <unavailable> + 4799

    5    libc.so.6                          0x00002ad801838460 __libc_start_main +
    245

    6    tmpnsewl7b9                        0x0000560a5e640f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides == 0 {\n        return -1\n    }\n    let area = Double(sides)\
    \ / Double(2.0 * Double(a + b + c))\n    return round(area, 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2gchl0mr.swift:14:12: error: cannot find 'round' in scope\n   \
    \ return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ Double(sides.last * sides.last)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpuwvj3wi9.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpuwvj3wi9.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpuwvj3wi9.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpuwvj3wi9.swift:12:34: error: binary operator '*' cannot be applied\
    \ to two 'Int?' operands\n        return Double(sides.last * sides.last)\n   \
    \                   ~~~~~~~~~~ ^ ~~~~~~~~~~\n/tmp/tmpuwvj3wi9.swift:12:34: note:\
    \ overloads for '*' exist with these partially matching parameter lists: (Int,\
    \ Int)\n        return Double(sides.last * sides.last)\n                     \
    \            ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sum = a + b +\
    \ c\n    if sum > 0 {\n        let area = Double(a * b * c) / Double(sum)\n  \
    \      return round(area, 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp367zdxvo.swift:12:16: error: cannot find 'round' in scope\n   \
    \     return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    var area: Double = 0\n    if a + b > c {\n        sum = a + b\n    }\
    \ else {\n        sum = a + c\n    }\n    if a + c > b {\n        sum = sum +\
    \ c\n    } else {\n        sum = sum + b\n    }\n    area = Double(sum) / 2.0\n\
    \    if area > 1.0 {\n        area = area - 1\n    }\n    return area\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpl69roj24.swift:12:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        sum = a + b\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmpl69roj24.swift:14:17: error: cannot assign value of type 'Int' to\
    \ type 'Double'\n        sum = a + c\n              ~~^~~\n              Double(\
    \ )\n/tmp/tmpl69roj24.swift:17:21: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n        sum = sum + c\n                   \
    \ ^\n                    Double( )\n/tmp/tmpl69roj24.swift:19:21: error: cannot\
    \ convert value of type 'Int' to expected argument type 'Double'\n        sum\
    \ = sum + b\n                    ^\n                    Double( )\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum += a\n    sum += b\n    sum += c\n    if sum > c {\n        return\
    \ Double(sum)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpo67x99ss.swift:10:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:11:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:12:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:13:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpo67x99ss.swift:13:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n\
    \    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp80xgbme3.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp80xgbme3.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp80xgbme3.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp80xgbme3.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp80xgbme3.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp80xgbme3.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp80xgbme3.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp80xgbme3.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp80xgbme3.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp80xgbme3.swift:13:12: error: cannot find 'round' in\
    \ scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area, 2)\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyr7rojt3.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpyr7rojt3.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpyr7rojt3.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpyr7rojt3.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpyr7rojt3.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpyr7rojt3.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpyr7rojt3.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpyr7rojt3.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpyr7rojt3.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpyr7rojt3.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpyr7rojt3.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ Double(sum)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz2a0nzbg.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpz2a0nzbg.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpz2a0nzbg.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n \
    \   let b = abs(b)\n    let c = abs(c)\n    let s = a + b + c\n    if s > 0 {\n\
    \        let area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area,\
    \ 2)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5j0ojna4.swift:14:20: error: cannot find 'sqrt' in scope\n    \
    \    let area = sqrt(s * (s - a) * (s - b) * (s - c))\n                   ^~~~\n\
    /tmp/tmp5j0ojna4.swift:15:16: error: cannot find 'round' in scope\n        return\
    \ round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ -1\n    }\n    return Double(sum) / Double(sides.last)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpm2z229a3.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpm2z229a3.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpm2z229a3.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpm2z229a3.swift:14:39: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sum) / Double(sides.last)\n\
    \                                      ^\n/tmp/tmpm2z229a3.swift:14:39: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \    return Double(sum) / Double(sides.last)\n                               \
    \       ^\n                                           ?? <#default value#>\n/tmp/tmpm2z229a3.swift:14:39:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return Double(sum) / Double(sides.last)\n                       \
    \               ^\n                                          !\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var area = 0.0\n \
    \   if a + b > c {\n        area = (a * b) / c\n    } else {\n        area = -1\n\
    \    }\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp66oj39yp.swift:11:24: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = (a * b) / c\n               ~~~~~~~~^~~\n \
    \              Double(    )\n/tmp/tmp66oj39yp.swift:15:12: error: cannot find\
    \ 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(sqrt(Double(a * a + b * b + c * c - a * b * c)))\n    }\n\
    \    if a + c > b {\n        return Double(sqrt(Double(a * a + c * c + b * b -\
    \ a * c * b)))\n    }\n    if b + c > a {\n        return Double(sqrt(Double(b\
    \ * b + c * c + a * a - b * c * a)))\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_6hflzwg.swift:10:23: error: cannot find 'sqrt' in scope\n    \
    \    return Double(sqrt(Double(a * a + b * b + c * c - a * b * c)))\n        \
    \              ^~~~\n/tmp/tmp_6hflzwg.swift:13:23: error: cannot find 'sqrt' in\
    \ scope\n        return Double(sqrt(Double(a * a + c * c + b * b - a * c * b)))\n\
    \                      ^~~~\n/tmp/tmp_6hflzwg.swift:16:23: error: cannot find\
    \ 'sqrt' in scope\n        return Double(sqrt(Double(b * b + c * c + a * a - b\
    \ * c * a)))\n                      ^~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n \
    \   let b = abs(b)\n    let c = abs(c)\n    if a + b > c {\n        return Double(a\
    \ / b) * Double(c / b)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpr4m36vu5/tmpr4m36vu5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c0be04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c0bafbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c0bafb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c0bafa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4m36vu5                        0x000056063116934f <unavailable> + 4943

    5    libc.so.6                          0x00002b7c0bff0460 __libc_start_main +
    245

    6    tmpr4m36vu5                        0x0000560631168fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2) / 2)\n    } else {\n        return -1\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpzmq7odq_.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpzmq7odq_.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpzmq7odq_.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpzmq7odq_.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpzmq7odq_.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpzmq7odq_.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpzmq7odq_.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpzmq7odq_.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpzmq7odq_.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpzmq7odq_.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2) / 2)\n                   \
    \   ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 * side2 * side3\n\
    \    if area > 0 {\n        return round(area, 2)\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp5xcvh45f.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp5xcvh45f.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp5xcvh45f.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp5xcvh45f.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp5xcvh45f.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp5xcvh45f.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp5xcvh45f.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp5xcvh45f.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp5xcvh45f.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp5xcvh45f.swift:12:38: error: cannot convert value of\
    \ type 'Duration' to specified type 'Double'\n    let area: Double = side1 * side2\
    \ * side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp5xcvh45f.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = b * b - a\
    \ * c\n    let a2 = a * a\n    let a3 = a * a\n    let b1 = 2 * b * b\n    let\
    \ b2 = b * b\n    let c1 = 2 * c * c\n    let c2 = c * c\n    let c3 = c * c\n\
    \    let det = a1 * b2 - a2 * b1\n    if det < 0 {\n        return -1\n    }\n\
    \    let area = sqrt(a1 * a2 + a2 * b2 + a3 * b1 - a1 * b1 - a2 * b2 - a3 * b3)\n\
    \    if area < 0 {\n        return -1\n    }\n    return round(area, 2)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpc3yre7th.swift:21:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(a1 * a2 + a2 * b2 + a3 * b1 - a1 * b1 - a2 * b2 - a3 * b3)\n   \
    \            ^~~~\n/tmp/tmpc3yre7th.swift:21:76: error: cannot find 'b3' in scope\n\
    \    let area = sqrt(a1 * a2 + a2 * b2 + a3 * b1 - a1 * b1 - a2 * b2 - a3 * b3)\n\
    \                                                                           ^~\n\
    /tmp/tmpc3yre7th.swift:25:12: error: cannot find 'round' in scope\n    return\
    \ round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var area = 0.0\n \
    \   if a + b > c {\n        area = (a * b) / c\n    } else {\n        area = (a\
    \ * c) / b\n    }\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpme6ra05a.swift:11:24: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = (a * b) / c\n               ~~~~~~~~^~~\n \
    \              Double(    )\n/tmp/tmpme6ra05a.swift:13:24: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n        area = (a * c) / b\n         \
    \      ~~~~~~~~^~~\n               Double(    )\n/tmp/tmpme6ra05a.swift:15:12:\
    \ error: cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides == 0 {\n        return -1\n    }\n    let area = sqrt(Double(a\
    \ * b * c) / sides)\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz1igecqf.swift:13:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(Double(a * b * c) / sides)\n               ^~~~\n/tmp/tmpz1igecqf.swift:13:39:\
    \ error: binary operator '/' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    let area = sqrt(Double(a * b * c) / sides)\n                    ~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~\n/tmp/tmpz1igecqf.swift:13:39: note: overloads for '/' exist with these\
    \ partially matching parameter lists: (Double, Double), (Int, Int)\n    let area\
    \ = sqrt(Double(a * b * c) / sides)\n                                      ^\n\
    /tmp/tmpz1igecqf.swift:14:12: error: cannot find 'round' in scope\n    return\
    \ round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = (a + b) /\
    \ 2\n    let b1 = (b + c) / 2\n    let c1 = (c + a) / 2\n    return a1 * b1 *\
    \ c1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp56rjnyyb.swift:12:20: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n    return a1 * b1 * c1\n           ~~~~~~~~^~~~\n\
    \           Double(     )\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n \
    \   let b = abs(b)\n    let c = abs(c)\n    if a + b > c {\n        return Double(a\
    \ * b * 0.5)\n    }\n    if a + c > b {\n        return Double(a * c * 0.5)\n\
    \    }\n    if b + c > a {\n        return Double(b * c * 0.5)\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpruk8vf7i.swift:13:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        return Double(a * b * 0.5)\n\
    \                      ~~~~~ ^ ~~~\n/tmp/tmpruk8vf7i.swift:13:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        return Double(a * b * 0.5)\n                           \
    \ ^\n/tmp/tmpruk8vf7i.swift:16:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        return Double(a * c * 0.5)\n\
    \                      ~~~~~ ^ ~~~\n/tmp/tmpruk8vf7i.swift:16:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        return Double(a * c * 0.5)\n                           \
    \ ^\n/tmp/tmpruk8vf7i.swift:19:29: error: binary operator '*' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n        return Double(b * c * 0.5)\n\
    \                      ~~~~~ ^ ~~~\n/tmp/tmpruk8vf7i.swift:19:29: note: overloads\
    \ for '*' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n        return Double(b * c * 0.5)\n                           \
    \ ^\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sum = a + b +\
    \ c\n    if sum < 0 {\n        return -1\n    }\n    if sum > 3 {\n        return\
    \ 0\n    }\n    let area = Double(sqrt(Double(sum) * Double(sum - b) * Double(sum\
    \ - c)))\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpagkkjhxm.swift:16:23: error: cannot find 'sqrt' in scope\n    let\
    \ area = Double(sqrt(Double(sum) * Double(sum - b) * Double(sum - c)))\n     \
    \                 ^~~~\n/tmp/tmpagkkjhxm.swift:17:12: error: cannot find 'round'\
    \ in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = abs(a)\n\
    \    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 > b1 && b1 > c1 {\n     \
    \   return Double(a1 * b1 * c1)\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpnsewl7b9/tmpnsewl7b9.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad80164cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad801343b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad801343988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad8013427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnsewl7b9                        0x0000560a5e6412bf <unavailable> + 4799

    5    libc.so.6                          0x00002ad801838460 __libc_start_main +
    245

    6    tmpnsewl7b9                        0x0000560a5e640f59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n\
    \    if area > 0 {\n        return round(area * 100) / 100.0\n    } else {\n \
    \       return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp964qv8ri.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp964qv8ri.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp964qv8ri.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp964qv8ri.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp964qv8ri.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp964qv8ri.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp964qv8ri.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp964qv8ri.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp964qv8ri.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp964qv8ri.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100.0\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2) / 2) / 2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwpygvp57.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2) / 2) / 2\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sum = a + b +\
    \ c\n    if sum > c {\n        return Double(sum) / Double(c)\n    }\n    if sum\
    \ > b {\n        return Double(sum) / Double(b)\n    }\n    if sum > a {\n   \
    \     return Double(sum) / Double(a)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpphp9as4x/tmpphp9as4x.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b68dc6aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b68dc3a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b68dc3a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b68dc3a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpphp9as4x                        0x0000561a487011cf <unavailable> + 4559

    5    libc.so.6                          0x00002b68dc89a460 __libc_start_main +
    245

    6    tmpphp9as4x                        0x0000561a48700e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(sqrt(pow((a + b), 2.0) + pow((c + a), 2.0)))\n    } else\
    \ {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpdqh6h6t8.swift:10:23: error: cannot find 'sqrt' in scope\n    \
    \    return Double(sqrt(pow((a + b), 2.0) + pow((c + a), 2.0)))\n            \
    \          ^~~~\n/tmp/tmpdqh6h6t8.swift:10:28: error: cannot find 'pow' in scope\n\
    \        return Double(sqrt(pow((a + b), 2.0) + pow((c + a), 2.0)))\n        \
    \                   ^~~\n/tmp/tmpdqh6h6t8.swift:10:48: error: cannot find 'pow'\
    \ in scope\n        return Double(sqrt(pow((a + b), 2.0) + pow((c + a), 2.0)))\n\
    \                                               ^~~\n"
  stdout: ''
  timestamp: 1660015389
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum += a\n    sum += b\n    sum += c\n    if sum > c {\n        return\
    \ Double(sum - c) / 2\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyoet1ugr.swift:10:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmpyoet1ugr.swift:11:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmpyoet1ugr.swift:12:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmpyoet1ugr.swift:13:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpyoet1ugr.swift:13:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n/tmp/tmpyoet1ugr.swift:14:27: error:\
    \ binary operator '-' cannot be applied to operands of type 'Double' and 'Int'\n\
    \        return Double(sum - c) / 2\n                      ~~~ ^ ~\n/tmp/tmpyoet1ugr.swift:14:27:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n        return Double(sum - c) / 2\n         \
    \                 ^\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2 - side3))\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0xt_3_fb.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0xt_3_fb.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0xt_3_fb.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0xt_3_fb.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0xt_3_fb.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0xt_3_fb.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0xt_3_fb.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0xt_3_fb.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0xt_3_fb.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0xt_3_fb.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2 - side3))\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7l6q34jq.swift:11:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp7l6q34jq.swift:34:47: error: expected '}' at end of brace statement\n\
    assert(triangle_area(a: 2, b: 2, c: 10) == -1)\n                             \
    \                 ^\n/tmp/tmp7l6q34jq.swift:8:54: note: to match this opening\
    \ '{'\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n              \
    \                                       ^\n/tmp/tmp7l6q34jq.swift:14:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sum = a + b +\
    \ c\n    if sum > 0 {\n        return Double(sum) / Double(sum)\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpe5zg66tr/tmpe5zg66tr.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af837fabc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af837ca2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af837ca2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af837ca17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe5zg66tr                        0x000055dfc67911cf <unavailable> + 4559

    5    libc.so.6                          0x00002af838197460 __libc_start_main +
    245

    6    tmpe5zg66tr                        0x000055dfc6790e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2) / 2) / 2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwpygvp57.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2) / 2) / 2\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2) / 2) / 2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwpygvp57.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2) / 2) / 2\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let area: Double =\
    \ Double(a * b * c) / Double(2 * a * b + b * c + c * a + a * b + b * c)\n    return\
    \ area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpg3_8h7_u/tmpg3_8h7_u.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b592aeebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b592abe2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b592abe2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b592abe17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg3_8h7_u                        0x000055b67f08e1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b592b0d7460 __libc_start_main +
    245

    6    tmpg3_8h7_u                        0x000055b67f08de69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides > 0 {\n        let area = Double(sqrt(Double(a * b * c) /\
    \ sides))\n        return round(area, 2)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp_li_x_vi.swift:11:27: error: cannot find 'sqrt' in scope\n    \
    \    let area = Double(sqrt(Double(a * b * c) / sides))\n                    \
    \      ^~~~\n/tmp/tmp_li_x_vi.swift:11:50: error: binary operator '/' cannot be\
    \ applied to operands of type 'Double' and 'Int'\n        let area = Double(sqrt(Double(a\
    \ * b * c) / sides))\n                               ~~~~~~~~~~~~~~~~~ ^ ~~~~~\n\
    /tmp/tmp_li_x_vi.swift:11:50: note: overloads for '/' exist with these partially\
    \ matching parameter lists: (Double, Double), (Int, Int)\n        let area = Double(sqrt(Double(a\
    \ * b * c) / sides))\n                                                 ^\n/tmp/tmp_li_x_vi.swift:12:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = b * b - 4\
    \ * a * c\n    let a2 = sqrt(a1)\n    let a3 = sqrt(a2)\n    let a4 = b * b +\
    \ 4 * a * c\n    let a5 = sqrt(a4)\n    let a6 = a * b + 4 * a * c\n    let a7\
    \ = a * b - a2 * c\n    let a8 = sqrt(a6)\n    let a9 = a * b - a2 * c\n    let\
    \ a10 = a * b - a2 * c\n    let a11 = a * b - a2 * c\n    let a12 = a * b - a2\
    \ * c\n    let a13 = a * b - a2 * c\n    let a14 = a * b - a2 * c\n    let a15\
    \ = a * b - a2 * c\n    let a16 = a * b - a2 * c\n    let a17 = a * b - a2 * c\n\
    \    let a18 = a * b - a2 * c\n    let a19 = a * b - a2 * c\n    let a20 = a *\
    \ b - a2 * c\n    let a21 = a * b - a2 * c\n    let a22 = a * b - a2 * c\n   \
    \ let a23 = a * b - a2 * c\n    let a24 = a * b - a2 * c\n    let a25 = a * b\
    \ - a2 * c\n    let a26 = a * b - a2 * c\n    let a27 = a * b - a2 * c\n    let\
    \ a28 = a * b - a2 * c\n    let a29 = a * b - a2 * c\n    let a30 = a * b - a2\
    \ * c\n    let a31 = a * b - a2 * c\n    let a32 = a * b - a2 * c\n    let a33\
    \ = a * b - a2 * c\n    let a34 = a * b - a2 * c\n    let a35 = a * b - a2 * c\n\
    \    let a36 = a * b - a2 * c\n    let a37 = a * b - a2 * c\n    let a38 = a *\
    \ b - a2 * c\n    let a39 = a * b - a2 * c\n    let a40 = a * b - a2 * c\n   \
    \ let a41 = a * b - a2 * c\n    let a42 = a * b - a2 * c\n    let a43 = a * b\
    \ - a2 * c\n    let a44 = a * b - a2 * c\n    let a45 = a * b - a2 * c\n    let\
    \ a46 = a * b - a2 * c\n    let a47 = a * b - a2 * c\n    let a48 = a * b - a2\
    \ * c\n    let a49 = a * b - a2 * c\n    let a50 = a * b - a2 * c\n    let a51\
    \ = a * b - a2 * c\n    let a52 = a * b - a2 * c\n    let a53 = a * b - a2 * c\n\
    \    let a54 = a * b - a2 * c\n    let a55 = a * b - a2 * c\n    let a56 = a *\
    \ b - a2 * c\n    let a57 = a * b - a2 * c\n    let a58 = a * b - a2 * \n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpccg5mqm5.swift:67:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmpccg5mqm5.swift:10:14: error: cannot find 'sqrt' in scope\n    let\
    \ a2 = sqrt(a1)\n             ^~~~\n/tmp/tmpccg5mqm5.swift:11:14: error: cannot\
    \ find 'sqrt' in scope\n    let a3 = sqrt(a2)\n             ^~~~\n/tmp/tmpccg5mqm5.swift:13:14:\
    \ error: cannot find 'sqrt' in scope\n    let a5 = sqrt(a4)\n             ^~~~\n\
    /tmp/tmpccg5mqm5.swift:16:14: error: cannot find 'sqrt' in scope\n    let a8 =\
    \ sqrt(a6)\n             ^~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum += a\n    sum += b\n    sum += c\n    if sum > c {\n        return\
    \ Double(sum)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpo67x99ss.swift:10:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:11:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:12:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:13:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpo67x99ss.swift:13:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area)\n    } else {\n        return -1\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mn_8211.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp3mn_8211.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp3mn_8211.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp3mn_8211.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp3mn_8211.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp3mn_8211.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp3mn_8211.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp3mn_8211.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp3mn_8211.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp3mn_8211.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp3mn_8211.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area)\n          \
    \     ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = abs(a)\n\
    \    let b1 = abs(b)\n    let c1 = abs(c)\n    let a2 = a1 + b1\n    let b2 =\
    \ b1 + c1\n    let c2 = c1 + a1\n    if a2 > b2 && b2 > c2 {\n        return a\
    \ * b * c / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpbvr0ergf.swift:16:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n \
    \   let b = abs(b)\n    let c = abs(c)\n    if a + b > c {\n        return Double(a\
    \ + b - c)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp2t4yr7ot/tmp2t4yr7ot.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adf0d4b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adf0d1b0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adf0d1b0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adf0d1af7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2t4yr7ot                        0x0000559147e8c2bf <unavailable> + 4799

    5    libc.so.6                          0x00002adf0d6a5460 __libc_start_main +
    245

    6    tmp2t4yr7ot                        0x0000559147e8bf59 <unavailable> + 3929

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides % 2 == 0 {\n        return Double(sides) / 2\n    }\n    return\
    \ -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp4sw3ghyi/tmp4sw3ghyi.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7bd99a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7bd9699b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7bd9699988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7bd96987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4sw3ghyi                        0x0000555829081383 <unavailable> + 4995

    5    libc.so.6                          0x00002b7bd9b8e460 __libc_start_main +
    245

    6    tmp4sw3ghyi                        0x0000555829080ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    if area > 0 {\n        return area\n    } else {\n        return -1\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpfvslccgr.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpfvslccgr.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpfvslccgr.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpfvslccgr.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var area: Double =\
    \ 0\n    if a + b > c {\n        area = (a * b) / c\n    }\n    else {\n     \
    \   area = (a * b) / (a + b)\n    }\n    return area\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpi0nqb_l0.swift:11:24: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = (a * b) / c\n               ~~~~~~~~^~~\n \
    \              Double(    )\n/tmp/tmpi0nqb_l0.swift:14:24: error: cannot assign\
    \ value of type 'Int' to type 'Double'\n        area = (a * b) / (a + b)\n   \
    \            ~~~~~~~~^~~~~~~~~\n               Double(          )\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area, 2)\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyr7rojt3.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpyr7rojt3.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpyr7rojt3.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpyr7rojt3.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpyr7rojt3.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpyr7rojt3.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpyr7rojt3.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpyr7rojt3.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpyr7rojt3.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpyr7rojt3.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpyr7rojt3.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n\
    \    if area > 0 {\n        return round(area, 2)\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1kqfz5lw.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp1kqfz5lw.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp1kqfz5lw.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp1kqfz5lw.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp1kqfz5lw.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp1kqfz5lw.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp1kqfz5lw.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp1kqfz5lw.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp1kqfz5lw.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp1kqfz5lw.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum += a\n    sum += b\n    sum += c\n    if sum > c {\n        return\
    \ Double(sum)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpo67x99ss.swift:10:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:11:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:12:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmpo67x99ss.swift:13:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpo67x99ss.swift:13:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides == 0 {\n        return -1\n    }\n    let area = sqrt(Double(sides)\
    \ * Double(sides) / Double(2))\n    return round(area, 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpu3wvqy39.swift:13:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(Double(sides) * Double(sides) / Double(2))\n               ^~~~\n\
    /tmp/tmpu3wvqy39.swift:14:12: error: cannot find 'round' in scope\n    return\
    \ round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    guard sides.count >= 3 else {\n        return -1\n    }\n    let sum\
    \ = sides[0] + sides[1] + sides[2]\n    if sum > sides[2] {\n        return Double(round(100\
    \ * Double(sides[0]) / Double(sides[2])))\n    }\n    if sum < sides[0] {\n  \
    \      return Double(round(100 * Double(sides[1]) / Double(sides[0])))\n    }\n\
    \    if sum < sides[1] {\n        return Double(round(100 * Double(sides[2]) /\
    \ Double(sides[1])))\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3x73qw0o.swift:15:23: error: cannot find 'round' in scope\n   \
    \     return Double(round(100 * Double(sides[0]) / Double(sides[2])))\n      \
    \                ^~~~~\n/tmp/tmp3x73qw0o.swift:18:23: error: cannot find 'round'\
    \ in scope\n        return Double(round(100 * Double(sides[1]) / Double(sides[0])))\n\
    \                      ^~~~~\n/tmp/tmp3x73qw0o.swift:21:23: error: cannot find\
    \ 'round' in scope\n        return Double(round(100 * Double(sides[2]) / Double(sides[1])))\n\
    \                      ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides > 0 {\n        return Double(sides) / Double(sides)\n    }\
    \ else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpgmuwccxb/tmpgmuwccxb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b211a90bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b211a602b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b211a602988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b211a6017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgmuwccxb                        0x000055f1bfbf81cf <unavailable> + 4559

    5    libc.so.6                          0x00002b211aaf7460 __libc_start_main +
    245

    6    tmpgmuwccxb                        0x000055f1bfbf7e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = side1 + side2 + side3\n    if\
    \ area > 0 {\n        return Double(area)\n    } else {\n        return -1\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7hv87lsn.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp7hv87lsn.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp7hv87lsn.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp7hv87lsn.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp7hv87lsn.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp7hv87lsn.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp7hv87lsn.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp7hv87lsn.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp7hv87lsn.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area)\n    } else {\n        return -1\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3mn_8211.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp3mn_8211.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp3mn_8211.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp3mn_8211.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp3mn_8211.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp3mn_8211.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp3mn_8211.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp3mn_8211.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp3mn_8211.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp3mn_8211.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmp3mn_8211.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area)\n          \
    \     ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides % 2 == 0 {\n        return Double(sides / 2)\n    } else {\n\
    \        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmppeyabz7o/tmppeyabz7o.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4b667b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4b664abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4b664ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4b664aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppeyabz7o                        0x00005637642a7383 <unavailable> + 4995

    5    libc.so.6                          0x00002b4b669a0460 __libc_start_main +
    245

    6    tmppeyabz7o                        0x00005637642a6ef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum = a + b + c\n    if sum > c {\n        return Double(sum - c) / 2.0\n\
    \    }\n    if sum > b {\n        return Double(sum - b) / 2.0\n    }\n    if\
    \ sum > a {\n        return Double(sum - a) / 2.0\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2rfuuqb3.swift:10:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n    sum = a + b + c\n          ~~~~~~^~~\n          Double(\
    \  )\n/tmp/tmp2rfuuqb3.swift:11:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:11:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n/tmp/tmp2rfuuqb3.swift:12:27: error:\
    \ binary operator '-' cannot be applied to operands of type 'Double' and 'Int'\n\
    \        return Double(sum - c) / 2.0\n                      ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:12:27:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n        return Double(sum - c) / 2.0\n       \
    \                   ^\n/tmp/tmp2rfuuqb3.swift:14:12: error: binary operator '>'\
    \ cannot be applied to operands of type 'Double' and 'Int'\n    if sum > b {\n\
    \       ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:14:12: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    if sum > b {\n   \
    \        ^\n/tmp/tmp2rfuuqb3.swift:15:27: error: binary operator '-' cannot be\
    \ applied to operands of type 'Double' and 'Int'\n        return Double(sum -\
    \ b) / 2.0\n                      ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:15:27: note:\
    \ overloads for '-' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n        return Double(sum - b) / 2.0\n                \
    \          ^\n/tmp/tmp2rfuuqb3.swift:17:12: error: binary operator '>' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    if sum > a {\n      \
    \ ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:17:12: note: overloads for '>' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    if sum > a {\n         \
    \  ^\n/tmp/tmp2rfuuqb3.swift:18:27: error: binary operator '-' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n        return Double(sum - a) / 2.0\n\
    \                      ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:18:27: note: overloads\
    \ for '-' exist with these p"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n\
    \    if area > 1.0 {\n        return area\n    } else {\n        return -1\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b:\
    \ 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpabb956i1.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpabb956i1.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpabb956i1.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpabb956i1.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpabb956i1.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpabb956i1.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpabb956i1.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpabb956i1.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpabb956i1.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var area = 0.0\n \
    \   \n    if a + b > c {\n        area = (a * b) / c\n    } else {\n        area\
    \ = -1\n    }\n    \n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp78o2pg35.swift:12:24: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = (a * b) / c\n               ~~~~~~~~^~~\n \
    \              Double(    )\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    guard sides.count >= 3 else {\n        return -1\n    }\n    let sum\
    \ = sides.reduce(0, +)\n    if sum > sides[2] {\n        return Double(round(100\
    \ * sides[0] / sum)) / 100\n    } else {\n        return Double(round(100 * sides[1]\
    \ / sum)) / 100\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp24q5s88o.swift:15:23: error: cannot find 'round' in scope\n   \
    \     return Double(round(100 * sides[0] / sum)) / 100\n                     \
    \ ^~~~~\n/tmp/tmp24q5s88o.swift:17:23: error: cannot find 'round' in scope\n \
    \       return Double(round(100 * sides[1] / sum)) / 100\n                   \
    \   ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides == 0 {\n        return -1\n    }\n    let area = sqrt(Double(a\
    \ * b * c) / sides)\n    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpz1igecqf.swift:13:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(Double(a * b * c) / sides)\n               ^~~~\n/tmp/tmpz1igecqf.swift:13:39:\
    \ error: binary operator '/' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    let area = sqrt(Double(a * b * c) / sides)\n                    ~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~\n/tmp/tmpz1igecqf.swift:13:39: note: overloads for '/' exist with these\
    \ partially matching parameter lists: (Double, Double), (Int, Int)\n    let area\
    \ = sqrt(Double(a * b * c) / sides)\n                                      ^\n\
    /tmp/tmpz1igecqf.swift:14:12: error: cannot find 'round' in scope\n    return\
    \ round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sum = a + b +\
    \ c\n    if sum < 0 {\n        return -1\n    }\n    let area = Double(sqrt(Double(sum)\
    \ * Double(sum) / Double(2)))\n    return round(area, 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmppd_a05f_.swift:13:23: error: cannot find 'sqrt' in scope\n    let\
    \ area = Double(sqrt(Double(sum) * Double(sum) / Double(2)))\n               \
    \       ^~~~\n/tmp/tmppd_a05f_.swift:14:12: error: cannot find 'round' in scope\n\
    \    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    \n    if sides.reduce(0) { $0 + $1 } > sides.reduce(0) { $0 + $2 } {\
    \ return -1 }\n    \n    let area = sides.reduce(0) { $0 + $1 }\n    \n    return\
    \ Double(area) / Double(sides.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp70imyaau.swift:11:54: error: contextual closure type '(Int, Int)\
    \ throws -> Int' expects 2 arguments, but 3 were used in closure body\n    if\
    \ sides.reduce(0) { $0 + $1 } > sides.reduce(0) { $0 + $2 } { return -1 }\n  \
    \                                                   ^\n"
  stdout: ''
  timestamp: 1660015392
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    } else {\n        return Double(a + b +\
    \ c)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp95ybz3zu/tmp95ybz3zu.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b602d596c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b602d28db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b602d28d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b602d28c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp95ybz3zu                        0x000055e4edbd01cf <unavailable> + 4559

    5    libc.so.6                          0x00002b602d782460 __libc_start_main +
    245

    6    tmp95ybz3zu                        0x000055e4edbcfe69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015388
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = abs(a)\n\
    \    let b1 = abs(b)\n    let c1 = abs(c)\n    if a1 + b1 > c1 {\n        return\
    \ Double(a1 * b1 * c1 / 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpfc2_jg7n/tmpfc2_jg7n.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c9a656c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c9a34db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c9a34d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c9a34c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfc2_jg7n                        0x000055a42a1a334f <unavailable> + 4943

    5    libc.so.6                          0x00002b2c9a842460 __libc_start_main +
    245

    6    tmpfc2_jg7n                        0x000055a42a1a2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ Double(sides.last * sides.last)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpuwvj3wi9.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmpuwvj3wi9.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmpuwvj3wi9.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmpuwvj3wi9.swift:12:34: error: binary operator '*' cannot be applied\
    \ to two 'Int?' operands\n        return Double(sides.last * sides.last)\n   \
    \                   ~~~~~~~~~~ ^ ~~~~~~~~~~\n/tmp/tmpuwvj3wi9.swift:12:34: note:\
    \ overloads for '*' exist with these partially matching parameter lists: (Int,\
    \ Int)\n        return Double(sides.last * sides.last)\n                     \
    \            ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2\n\
    \    if area > 0 {\n        return round(area, 2)\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpg5_ikx63.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpg5_ikx63.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpg5_ikx63.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpg5_ikx63.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpg5_ikx63.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpg5_ikx63.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpg5_ikx63.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpg5_ikx63.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpg5_ikx63.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpg5_ikx63.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area, 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sum = a + b +\
    \ c\n    if sum < 0 {\n        return -1\n    }\n    if sum == 0 {\n        return\
    \ 0\n    }\n    let area = sqrt(Double(a * b * c) / sum)\n    return round(area,\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c:\
    \ 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmph3yakjyp.swift:16:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(Double(a * b * c) / sum)\n               ^~~~\n/tmp/tmph3yakjyp.swift:16:39:\
    \ error: binary operator '/' cannot be applied to operands of type 'Double' and\
    \ 'Int'\n    let area = sqrt(Double(a * b * c) / sum)\n                    ~~~~~~~~~~~~~~~~~\
    \ ^ ~~~\n/tmp/tmph3yakjyp.swift:16:39: note: overloads for '/' exist with these\
    \ partially matching parameter lists: (Double, Double), (Int, Int)\n    let area\
    \ = sqrt(Double(a * b * c) / sum)\n                                      ^\n/tmp/tmph3yakjyp.swift:17:12:\
    \ error: cannot find 'round' in scope\n    return round(area, 2)\n           ^~~~~\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides > 0 {\n        let area = Double(sides) / Double(sides - a)\n\
    \        return area\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpgaxbf67y/tmpgaxbf67y.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4276c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4273c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4273c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4273bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgaxbf67y                        0x0000560fbc09f1cf <unavailable> + 4559

    5    libc.so.6                          0x00002ba4278b5460 __libc_start_main +
    245

    6    tmpgaxbf67y                        0x0000560fbc09ee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ -1\n    }\n    let area = Double(sides.last) * Double(sides.last) / Double(sides.last)\n\
    \    return round(area, 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmppka4z68s.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmppka4z68s.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmppka4z68s.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmppka4z68s.swift:14:29: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    let area = Double(sides.last) * Double(sides.last)\
    \ / Double(sides.last)\n                            ^\n/tmp/tmppka4z68s.swift:14:29:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let area = Double(sides.last) * Double(sides.last) / Double(sides.last)\n\
    \                            ^\n                                 ?? <#default\
    \ value#>\n/tmp/tmppka4z68s.swift:14:29: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    let area = Double(sides.last)\
    \ * Double(sides.last) / Double(sides.last)\n                            ^\n \
    \                               !\n/tmp/tmppka4z68s.swift:14:71: error: value\
    \ of optional type 'Int?' must be unwrapped to a value of type 'Int'\n    let\
    \ area = Double(sides.last) * Double(sides.last) / Double(sides.last)\n      \
    \                                                                ^\n/tmp/tmppka4z68s.swift:14:71:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n    let area = Double(sides.last) * Double(sides.last) / Double(sides.last)\n\
    \                                                                      ^\n   \
    \                                                                        ?? <#default\
    \ value#>\n/tmp/tmppka4z68s.swift:14:71: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n    let area = D"
  stdout: ''
  timestamp: 1660015399
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2 - side3))\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp0xt_3_fb.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp0xt_3_fb.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp0xt_3_fb.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp0xt_3_fb.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp0xt_3_fb.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp0xt_3_fb.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp0xt_3_fb.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp0xt_3_fb.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp0xt_3_fb.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp0xt_3_fb.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2 - side3))\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2) / 2) / 2\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpwpygvp57.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpwpygvp57.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpwpygvp57.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpwpygvp57.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2) / 2) / 2\n               \
    \       ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var area = 0.0\n \
    \   if a + b > c {\n        area = (a * b) / c\n    } else {\n        area = -1\n\
    \    }\n    return area\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmps2u3t9mg.swift:11:24: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n        area = (a * b) / c\n               ~~~~~~~~^~~\n \
    \              Double(    )\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    guard sides.count >= 3 else {\n        return -1\n    }\n    let sum\
    \ = sides.reduce(0, combine: +)\n    if sum > sides[2]{\n        return Double(round(100*sides[0]/sum))\n\
    \    }\n    return Double(round(100*sides[1]/sum))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpjj9njnxm.swift:13:27: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = sides.reduce(0, combine: +)\n                       \
    \   ^   ~~~~~~~~~\n                              \n/tmp/tmpjj9njnxm.swift:15:23:\
    \ error: cannot find 'round' in scope\n        return Double(round(100*sides[0]/sum))\n\
    \                      ^~~~~\n/tmp/tmpjj9njnxm.swift:17:19: error: cannot find\
    \ 'round' in scope\n    return Double(round(100*sides[1]/sum))\n             \
    \     ^~~~~\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides == 0 {\n        return -1\n    }\n    let third = sides /\
    \ 3\n    let area = third * (third - a) * (third - b) * (third - c)\n    return\
    \ Double(area / sides)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpb7wsstoj/tmpb7wsstoj.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b661426cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6613f63b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6613f63988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6613f627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpb7wsstoj                        0x0000555790f7b25f <unavailable> + 4703

    5    libc.so.6                          0x00002b6614458460 __libc_start_main +
    245

    6    tmpb7wsstoj                        0x0000555790f7aef9 <unavailable> + 3833

    '
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1) * Double(-1)\
    \ * Double(-1) * \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7l6q34jq.swift:11:1: error: expected expression after operator\n\
    }\n^\n/tmp/tmp7l6q34jq.swift:34:47: error: expected '}' at end of brace statement\n\
    assert(triangle_area(a: 2, b: 2, c: 10) == -1)\n                             \
    \                 ^\n/tmp/tmp7l6q34jq.swift:8:54: note: to match this opening\
    \ '{'\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n              \
    \                                       ^\n/tmp/tmp7l6q34jq.swift:14:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area, 2)\n    } else {\n        return\
    \ -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpyr7rojt3.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpyr7rojt3.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpyr7rojt3.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpyr7rojt3.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpyr7rojt3.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpyr7rojt3.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpyr7rojt3.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpyr7rojt3.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpyr7rojt3.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpyr7rojt3.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpyr7rojt3.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area, 2)\n       \
    \        ^~~~~\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var a = a\n    var\
    \ b = b\n    var c = c\n    var area = 0.0\n    var area_sum = 0.0\n    var area_product\
    \ = 0.0\n    var area_product2 = 0.0\n    var area_product3 = 0.0\n    var area_product4\
    \ = 0.0\n    var area_product5 = 0.0\n    var area_product6 = 0.0\n    var area_product7\
    \ = 0.0\n    var area_product8 = 0.0\n    var area_product9 = 0.0\n    var area_product10\
    \ = 0.0\n    var area_product11 = 0.0\n    var area_product12 = 0.0\n    var area_product13\
    \ = 0.0\n    var area_product14 = 0.0\n    var area_product15 = 0.0\n    var area_product16\
    \ = 0.0\n    var area_product17 = 0.0\n    var area_product18 = 0.0\n    var area_product19\
    \ = 0.0\n    var area_product20 = 0.0\n    var area_product21 = 0.0\n    var area_product22\
    \ = 0.0\n    var area_product23 = 0.0\n    var area_product24 = 0.0\n    var area_product25\
    \ = 0.0\n    var area_product26 = 0.0\n    var area_product27 = 0.0\n    var area_product28\
    \ = 0.0\n    var area_product29 = 0.0\n    var area_product30 = 0.0\n    var area_product31\
    \ = 0.0\n    var area_product32 = 0.0\n    var area_product33 = 0.0\n    var area_product34\
    \ = 0.0\n    var area_product35 = 0.0\n    var area_product36 = 0.0\n    var area_product37\
    \ = 0.0\n    var area_product38 = 0.0\n    var area_product39 = 0.0\n    var area_product40\
    \ = 0.0\n    var area_product41 = 0.0\n    var area_product42 = 0.0\n    var area_product43\
    \ = 0.0\n    var area_product44 = 0.0\n    var area_product45 = 0.0\n    var area_product46\
    \ = 0.0\n    var area_product47 = 0.0\n    var area_product48 = 0.0\n    var area_product49\
    \ = 0.0\n    var area_product50 = 0.0\n    var area_product51 = 0.0\n    var area_product52\
    \ = 0.0\n    var area_product53 = 0.0\n    var area_product54 = 0.0\n    var area_product55\
    \ = 0.0\n    var area_product56 = 0.0\n    var area_product57 = 0.0\n    var area_product58\
    \ = 0.0\n    var area_product59 = 0.0\n    var area_product60 = 0.0\n    var area_product61\
    \ = 0.0\n    var area_product62 = 0.0\n    var area_product63 = 0.0\n    var area_product64\
    \ = 0.0\n    var area_product65 = 0.0\n    var area_product66 = 0.0\n    var area_product67\
    \ = 0.0\n    var area_product68 = 0.0\n    var area_product69 = 0.0\n    var area_product70\
    \ = 0.0\n    var area_product71 = 0.0\n    var area_product72 = 0.0\n    var area_product73\
    \ = 0.0\n    var area_product74 = 0.0\n    var area_product75 = 0.0\n    var area_product76\
    \ = 0.0\n    var area_product77 = 0.0\n    var area_product78 = 0.0\n    var area_product79\
    \ = 0.0\n    var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp1vo9dub3.swift:93:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp1vo9dub3.swift:9:9: warning: initialization of variable 'a' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var a =\
    \ a\n    ~~~~^\n    _\n/tmp/tmp1vo9dub3.swift:10:9: warning: initialization of\
    \ variable 'b' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    var b = b\n    ~~~~^\n    _\n/tmp/tmp1vo9dub3.swift:11:9: warning: initialization\
    \ of variable 'c' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var c = c\n    ~~~~^\n    _\n/tmp/tmp1vo9dub3.swift:12:9: warning:\
    \ initialization of variable 'area' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var area = 0.0\n    ~~~~^~~~\n    _\n/tmp/tmp1vo9dub3.swift:13:9:\
    \ warning: initialization of variable 'area_sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var area_sum = 0.0\n    ~~~~^~~~~~~~\n\
    \    _\n/tmp/tmp1vo9dub3.swift:14:9: warning: initialization of variable 'area_product'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var area_product = 0.0\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmp1vo9dub3.swift:15:9:\
    \ warning: initialization of variable 'area_product2' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var area_product2 = 0.0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp1vo9dub3.swift:16:9: warning: initialization\
    \ of variable 'area_product3' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var area_product3 = 0.0\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmp1vo9dub3.swift:17:9: warning: initialization of variable 'area_product4'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var area_product4 = 0.0\n    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp1vo9dub3.swift:18:9:\
    \ warning: initialization of variable 'area_product5' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var area_product5 = 0.0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmp1vo9dub3.swift:19:9: warning:"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ -1\n    }\n    return Double(sides.last) * Double(sides.last) / Double(sides.first)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp800kymi7.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp800kymi7.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp800kymi7.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmp800kymi7.swift:14:67: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    return Double(sides.last) * Double(sides.last)\
    \ / Double(sides.first)\n                                                    \
    \              ^\n/tmp/tmp800kymi7.swift:14:67: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first)\n                               \
    \                                   ^\n                                      \
    \                                  ?? <#default value#>\n/tmp/tmp800kymi7.swift:14:67:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    return Double(sides.last) * Double(sides.last) / Double(sides.first)\n\
    \                                                                  ^\n       \
    \                                                                !\n/tmp/tmp800kymi7.swift:14:25:\
    \ error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n\
    \    return Double(sides.last) * Double(sides.last) / Double(sides.first)\n  \
    \                      ^\n/tmp/tmp800kymi7.swift:14:25: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n    return Double(sides.last)\
    \ * Double(sides.last) / Double(sides.first)\n                        ^\n    \
    \                         ?? <#default value#>\n/tmp/tmp800kymi7.swift:14:25:\
    \ note: force-unwrap using '!' to abort execution if the optiona"
  stdout: ''
  timestamp: 1660015400
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(sqrt(Double(a * a + b * b + c * c)))\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpx0hsj9u7.swift:10:23: error: cannot find 'sqrt' in scope\n    \
    \    return Double(sqrt(Double(a * a + b * b + c * c)))\n                    \
    \  ^~~~\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    if sides == 0 {\n        return -1\n    }\n    let area = sqrt(pow(a,\
    \ 2) + pow(b, 2) + pow(c, 2))\n    if area > sides {\n        return Double(area)\n\
    \    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpd5afjyge.swift:13:16: error: cannot find 'sqrt' in scope\n    let\
    \ area = sqrt(pow(a, 2) + pow(b, 2) + pow(c, 2))\n               ^~~~\n/tmp/tmpd5afjyge.swift:13:21:\
    \ error: cannot find 'pow' in scope\n    let area = sqrt(pow(a, 2) + pow(b, 2)\
    \ + pow(c, 2))\n                    ^~~\n/tmp/tmpd5afjyge.swift:13:33: error:\
    \ cannot find 'pow' in scope\n    let area = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                ^~~\n/tmp/tmpd5afjyge.swift:13:45: error:\
    \ cannot find 'pow' in scope\n    let area = sqrt(pow(a, 2) + pow(b, 2) + pow(c,\
    \ 2))\n                                            ^~~\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area = (side1 + side2 + side3) / 2.0\n\
    \    if area > 0.0 {\n        return round(area * 100) / 100\n    } else {\n \
    \       return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp7ud2a6is.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmp7ud2a6is.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmp7ud2a6is.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmp7ud2a6is.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmp7ud2a6is.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmp7ud2a6is.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmp7ud2a6is.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmp7ud2a6is.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmp7ud2a6is.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmp7ud2a6is.swift:14:16: error: cannot find 'round' in\
    \ scope\n        return round(area * 100) / 100\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = abs(a)\n\
    \    let b1 = abs(b)\n    let c1 = abs(c)\n    \n    if a1 + b1 > c1 {\n     \
    \   return Double(a1 * b1 * c1 / 2)\n    } else {\n        return -1\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpyk_5b7gh/tmpyk_5b7gh.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1d32cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1d2fc2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1d2fc2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1d2fc17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyk_5b7gh                        0x0000561c1542534f <unavailable> + 4943

    5    libc.so.6                          0x00002ae1d34b7460 __libc_start_main +
    245

    6    tmpyk_5b7gh                        0x0000561c15424fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    if side1 + side2 > side3 {\n        return\
    \ Double(round(side1 + side2))\n    } else {\n        return -1\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpft28oj1t.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpft28oj1t.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpft28oj1t.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpft28oj1t.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpft28oj1t.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpft28oj1t.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpft28oj1t.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpft28oj1t.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpft28oj1t.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpft28oj1t.swift:13:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(side1 + side2))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a + b > c {\n \
    \       return Double(a + b - c)\n    }\n    if a + c > b {\n        return Double(a\
    \ + c - b)\n    }\n    if b + c > a {\n        return Double(b + c - a)\n    }\n\
    \    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmps6pkwt52/tmps6pkwt52.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b4de06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b4dafdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b4dafd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b4dafc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps6pkwt52                        0x000056467efef1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b1b4dff2460 __libc_start_main +
    245

    6    tmps6pkwt52                        0x000056467efeee69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = a + b\
    \ + c\n    let area = Double(sides) / 2.0\n    if area > Double(sides / 2.0) {\n\
    \        return area\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpkjc1026t.swift:11:28: error: binary operator '/' cannot be applied\
    \ to operands of type 'Int' and 'Double'\n    if area > Double(sides / 2.0) {\n\
    \                     ~~~~~ ^ ~~~\n/tmp/tmpkjc1026t.swift:11:28: note: overloads\
    \ for '/' exist with these partially matching parameter lists: (Double, Double),\
    \ (Int, Int)\n    if area > Double(sides / 2.0) {\n                          \
    \ ^\n"
  stdout: ''
  timestamp: 1660015387
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = abs(a)\n\
    \    let b1 = abs(b)\n    let c1 = abs(c)\n    \n    if a1 + b1 > c1 {\n     \
    \   return a * b * c / 2\n    } else {\n        return -1\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpxb27m2l5.swift:14:26: error: cannot convert return expression of\
    \ type 'Int' to return type 'Double'\n        return a * b * c / 2\n         \
    \      ~~~~~~~~~~^~~\n               Double(      )\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum = a + b + c\n    if sum > c {\n        return Double(sum - c) / 2.0\n\
    \    }\n    if sum > b {\n        return Double(sum - b) / 2.0\n    }\n    if\
    \ sum > a {\n        return Double(sum - a) / 2.0\n    }\n    return -1\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp2rfuuqb3.swift:10:17: error: cannot assign value of type 'Int'\
    \ to type 'Double'\n    sum = a + b + c\n          ~~~~~~^~~\n          Double(\
    \  )\n/tmp/tmp2rfuuqb3.swift:11:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:11:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n/tmp/tmp2rfuuqb3.swift:12:27: error:\
    \ binary operator '-' cannot be applied to operands of type 'Double' and 'Int'\n\
    \        return Double(sum - c) / 2.0\n                      ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:12:27:\
    \ note: overloads for '-' exist with these partially matching parameter lists:\
    \ (Double, Double), (Int, Int)\n        return Double(sum - c) / 2.0\n       \
    \                   ^\n/tmp/tmp2rfuuqb3.swift:14:12: error: binary operator '>'\
    \ cannot be applied to operands of type 'Double' and 'Int'\n    if sum > b {\n\
    \       ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:14:12: note: overloads for '>' exist with\
    \ these partially matching parameter lists: (Int, Int)\n    if sum > b {\n   \
    \        ^\n/tmp/tmp2rfuuqb3.swift:15:27: error: binary operator '-' cannot be\
    \ applied to operands of type 'Double' and 'Int'\n        return Double(sum -\
    \ b) / 2.0\n                      ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:15:27: note:\
    \ overloads for '-' exist with these partially matching parameter lists: (Double,\
    \ Double), (Int, Int)\n        return Double(sum - b) / 2.0\n                \
    \          ^\n/tmp/tmp2rfuuqb3.swift:17:12: error: binary operator '>' cannot\
    \ be applied to operands of type 'Double' and 'Int'\n    if sum > a {\n      \
    \ ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:17:12: note: overloads for '>' exist with these\
    \ partially matching parameter lists: (Int, Int)\n    if sum > a {\n         \
    \  ^\n/tmp/tmp2rfuuqb3.swift:18:27: error: binary operator '-' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n        return Double(sum - a) / 2.0\n\
    \                      ~~~ ^ ~\n/tmp/tmp2rfuuqb3.swift:18:27: note: overloads\
    \ for '-' exist with these p"
  stdout: ''
  timestamp: 1660015388
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let area: Double =\
    \ Double(a * b * c) / Double(2 * a * b + 2 * b * c + c * a)\n    return area <\
    \ 0 ? -1 : 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(triangle_area(a: 3,\
    \ b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmpkhlrgec7/tmpkhlrgec7.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b773d87ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b773d571b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b773d571988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b773d5707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkhlrgec7                        0x000055c48adca1cf <unavailable> + 4559

    5    libc.so.6                          0x00002b773da66460 __libc_start_main +
    245

    6    tmpkhlrgec7                        0x000055c48adc9e69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let sum = side1 + side2 + side3\n    if sum\
    \ > 0 {\n        return Double(round(100 * Double(sum) / Double(side3)))\n   \
    \ } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpm8uyzeo7.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpm8uyzeo7.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpm8uyzeo7.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpm8uyzeo7.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpm8uyzeo7.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpm8uyzeo7.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpm8uyzeo7.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpm8uyzeo7.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpm8uyzeo7.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpm8uyzeo7.swift:14:23: error: cannot find 'round' in\
    \ scope\n        return Double(round(100 * Double(sum) / Double(side3)))\n   \
    \                   ^~~~~\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let side1 = sqrt(pow(a,\
    \ 2) + pow(b, 2))\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n    let side3\
    \ = sqrt(pow(c, 2) + pow(a, 2))\n    let area: Double = side1 + side2 + side3\n\
    \    if area > 0 {\n        return round(area * 100) / 100\n    } else {\n   \
    \     return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(triangle_area(a:\
    \ 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a:\
    \ 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
    \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpiw12npuy.swift:9:17: error: cannot find 'sqrt' in scope\n    let\
    \ side1 = sqrt(pow(a, 2) + pow(b, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:9:22:\
    \ error: cannot find 'pow' in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:9:34: error: cannot find 'pow'\
    \ in scope\n    let side1 = sqrt(pow(a, 2) + pow(b, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:10:17: error: cannot find 'sqrt' in\
    \ scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:10:22:\
    \ error: cannot find 'pow' in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:10:34: error: cannot find 'pow'\
    \ in scope\n    let side2 = sqrt(pow(b, 2) + pow(c, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:11:17: error: cannot find 'sqrt' in\
    \ scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                ^~~~\n/tmp/tmpiw12npuy.swift:11:22:\
    \ error: cannot find 'pow' in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n\
    \                     ^~~\n/tmp/tmpiw12npuy.swift:11:34: error: cannot find 'pow'\
    \ in scope\n    let side3 = sqrt(pow(c, 2) + pow(a, 2))\n                    \
    \             ^~~\n/tmp/tmpiw12npuy.swift:12:38: error: cannot convert value of\
    \ type 'String' to specified type 'Double'\n    let area: Double = side1 + side2\
    \ + side3\n                       ~~~~~~~~~~~~~~^~~~~~~\n/tmp/tmpiw12npuy.swift:14:16:\
    \ error: cannot find 'round' in scope\n        return round(area * 100) / 100\n\
    \               ^~~~~\n"
  stdout: ''
  timestamp: 1660015386
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let sides = [a, b,\
    \ c]\n    let sum = sides.reduce(0, +)\n    if sum > sides.last {\n        return\
    \ Double(sum) / Double(sides.last)\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp75vrnpww.swift:11:20: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n    if sum > sides.last {\n         \
    \          ^\n/tmp/tmp75vrnpww.swift:11:20: note: coalesce using '??' to provide\
    \ a default when the optional value contains 'nil'\n    if sum > sides.last {\n\
    \                   ^\n                        ?? <#default value#>\n/tmp/tmp75vrnpww.swift:11:20:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n    if sum > sides.last {\n                   ^\n                   \
    \    !\n/tmp/tmp75vrnpww.swift:12:43: error: value of optional type 'Int?' must\
    \ be unwrapped to a value of type 'Int'\n        return Double(sum) / Double(sides.last)\n\
    \                                          ^\n/tmp/tmp75vrnpww.swift:12:43: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        return Double(sum) / Double(sides.last)\n                           \
    \               ^\n                                               ?? <#default\
    \ value#>\n/tmp/tmp75vrnpww.swift:12:43: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n        return Double(sum) /\
    \ Double(sides.last)\n                                          ^\n          \
    \                                    !\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    var sum: Double =\
    \ 0\n    sum += a\n    sum += b\n    sum += c\n    if sum > c {\n        return\
    \ Double(sum / 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpekwds16y.swift:10:12: error: cannot convert value of type 'Int'\
    \ to expected argument type 'Double'\n    sum += a\n           ^\n           Double(\
    \ )\n/tmp/tmpekwds16y.swift:11:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += b\n           ^\n           Double(\
    \ )\n/tmp/tmpekwds16y.swift:12:12: error: cannot convert value of type 'Int' to\
    \ expected argument type 'Double'\n    sum += c\n           ^\n           Double(\
    \ )\n/tmp/tmpekwds16y.swift:13:12: error: binary operator '>' cannot be applied\
    \ to operands of type 'Double' and 'Int'\n    if sum > c {\n       ~~~ ^ ~\n/tmp/tmpekwds16y.swift:13:12:\
    \ note: overloads for '>' exist with these partially matching parameter lists:\
    \ (Int, Int)\n    if sum > c {\n           ^\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let area: Double =\
    \ abs(a * b - c * c)\n    if area > 0 {\n        return round(area / 2)\n    }\
    \ else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmpr262sdqy.swift:9:24: error: cannot convert value of type 'Int'\
    \ to specified type 'Double'\n    let area: Double = abs(a * b - c * c)\n    \
    \                   ^~~~~~~~~~~~~~~~~~\n                       Double(       \
    \    )\n/tmp/tmpr262sdqy.swift:11:16: error: cannot find 'round' in scope\n  \
    \      return round(area / 2)\n               ^~~~~\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: 1
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a1 = (a + b) /\
    \ 2\n    let a2 = (b + c) / 2\n    let a3 = (c + a) / 2\n    let a4 = (a1 + a2)\
    \ / 2\n    let a5 = (a2 + a3) / 2\n    let a6 = (a3 + a4) / 2\n    let a7 = (a4\
    \ + a5) / 2\n    let a8 = (a5 + a6) / 2\n    let a9 = (a6 + a7) / 2\n    let a10\
    \ = (a7 + a8) / 2\n    let a11 = (a8 + a9) / 2\n    let a12 = (a9 + a10) / 2\n\
    \    let a13 = (a10 + a11) / 2\n    let a14 = (a11 + a12) / 2\n    let a15 = (a12\
    \ + a13) / 2\n    let a16 = (a13 + a14) / 2\n    let a17 = (a14 + a15) / 2\n \
    \   let a18 = (a15 + a16) / 2\n    let a19 = (a16 + a17) / 2\n    let a20 = (a17\
    \ + a18) / 2\n    let a21 = (a18 + a19) / 2\n    let a22 = (a19 + a20) / 2\n \
    \   let a23 = (a20 + a21) / 2\n    let a24 = (a21 + a22) / 2\n    let a25 = (a22\
    \ + a23) / 2\n    let a26 = (a23 + a24) / 2\n    let a27 = (a24 + a25) / 2\n \
    \   let a28 = (a25 + a26) / 2\n    let a29 = (a26 + a27) / 2\n    let a30 = (a27\
    \ + a28) / 2\n    let a31 = (a28 + a29) / 2\n    let a32 = (a29 + a30) / 2\n \
    \   let a33 = (a30 + a31) / 2\n    let a34 = (a31 + a32) / 2\n    let a35 = (a32\
    \ + a33) / 2\n    let a36 = (a33 + a34) / 2\n    let a37 = (a34 + a35) / 2\n \
    \   let a38 = (a35 + a36) / 2\n    let a39 = (a36 + a37) / 2\n    let a40 = (a37\
    \ + a38) / 2\n    let a41 = (a38 + a39) / 2\n    let a42 = (a39 + a40) / 2\n \
    \   let a43 = (a40 + a41) / 2\n    let a44 = (a41 + a42) / 2\n    let a45 = (a42\
    \ + a43) / 2\n    let a46 = (a43 + a44) / 2\n    let a47 = (a44 + a45) / 2\n \
    \   let a48 = (a45 + a46) / 2\n    let a49 = (a46 + a47) / 2\n    let a50 = (a47\
    \ + a48) / 2\n    let a51 = (a48 + a49) / 2\n    let a52 = (a49 + a50) / 2\n \
    \   let a53 = (a50 + a51) / 2\n    let a54 = (a51 + a52) / 2\n    let a55 = (a52\
    \ + a53) / 2\n    let a56 = (a53 + a54) / 2\n    let a57 = (a54 + a55) / 2\n \
    \   let a58 = (a55 + a56) / 2\n    let \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a: 1, b:\
    \ 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: SyntaxError
  stderr: "/tmp/tmp3m16s34v.swift:67:8: error: expected pattern\n    let \n      \
    \ ^\n/tmp/tmp3m16s34v.swift:65:9: warning: initialization of immutable value 'a57'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   let a57 = (a54 + a55) / 2\n    ~~~~^~~\n    _\n/tmp/tmp3m16s34v.swift:66:9:\
    \ warning: initialization of immutable value 'a58' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let a58 = (a55 + a56) / 2\n    ~~~~^~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660015388
- exit_code: -4
  program: "\n/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    func triangle_area(a: Int, b: Int, c: Int) -> Double {\n    let a = abs(a)\n \
    \   let b = abs(b)\n    let c = abs(c)\n    if a + b > c {\n        return Double(a\
    \ * b * c / 2)\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\nassert(triangle_area(a:\
    \ 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8, c: 5) == 8.18)\nassert(triangle_area(a:\
    \ 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a: 1, b: 2, c: 3) == -1)\nassert(triangle_area(a:\
    \ 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a: 2, b: 6, c: 3) == -1)\nassert(triangle_area(a:\
    \ 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a: 2, b: 2, c: 10) == -1)"
  status: Exception
  stderr: 'tmp4c8z18nw/tmp4c8z18nw.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37997dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37994d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37994d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37994d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4c8z18nw                        0x000055f036c3d34f <unavailable> + 4943

    5    libc.so.6                          0x00002b37999c7460 __libc_start_main +
    245

    6    tmp4c8z18nw                        0x000055f036c3cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660015388
