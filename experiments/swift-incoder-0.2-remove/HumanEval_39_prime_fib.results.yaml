language: swift
name: HumanEval_39_prime_fib
results:
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var a = 2\n    var b = 1\n    for _ in 0..<n {\n        let c\
    \ = a + b\n        a = b\n        b = c\n    }\n    return b\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpnjho7xdg/tmpnjho7xdg.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32720b9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3271db0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3271db0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3271daf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnjho7xdg                        0x00005650697ff338 <unavailable> + 4920

    5    libc.so.6                          0x00002b32722a5460 __libc_start_main +
    245

    6    tmpnjho7xdg                        0x00005650697fefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpdn_jxmhv/tmpdn_jxmhv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47ca376c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ca06db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ca06d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ca06c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdn_jxmhv                        0x0000559ac5571338 <unavailable> + 4920

    5    libc.so.6                          0x00002b47ca562460 __libc_start_main +
    245

    6    tmpdn_jxmhv                        0x0000559ac5570fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpdx9m4n5c/tmpdx9m4n5c.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8248d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8248a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8248a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8248a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdx9m4n5c                        0x0000557e5cccf338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8248f8b460 __libc_start_main +
    245

    6    tmpdx9m4n5c                        0x0000557e5cccefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib_number = 0\n    var\
    \ prime_number = 0\n    var prime_flag = false\n    for _ in 0..<n {\n       \
    \ if prime_flag == true {\n            prime_flag = false\n            prime_number\
    \ = fib_number\n        } else {\n            fib_number = fib_number + fib_number\n\
    \        }\n        if fib_number % 2 == 0 {\n            prime_flag = true\n\
    \        }\n    }\n    return prime_number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmptfirwrzx/tmptfirwrzx.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab7ffc5fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab7ff956b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab7ff956988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab7ff9557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfirwrzx                        0x0000564e558bc338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab7ffe4b460 __libc_start_main +
    245

    6    tmptfirwrzx                        0x0000564e558bbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int =\
    \ 0\n    var fib_index2: Int = 0\n    var fib_index3: Int = 0\n    var fib_index4:\
    \ Int = 0\n    var fib_index5: Int = 0\n    var fib_index6: Int = 0\n    var fib_index7:\
    \ Int = 0\n    var fib_index8: Int = 0\n    var fib_index9: Int = 0\n    var fib_index10:\
    \ Int = 0\n    var fib_index11: Int = 0\n    var fib_index12: Int = 0\n    var\
    \ fib_index13: Int = 0\n    var fib_index14: Int = 0\n    var fib_index15: Int\
    \ = 0\n    var fib_index16: Int = 0\n    var fib_index17: Int = 0\n    var fib_index18:\
    \ Int = 0\n    var fib_index19: Int = 0\n    var fib_index20: Int = 0\n    var\
    \ fib_index21: Int = 0\n    var fib_index22: Int = 0\n    var fib_index23: Int\
    \ = 0\n    var fib_index24: Int = 0\n    var fib_index25: Int = 0\n    var fib_index26:\
    \ Int = 0\n    var fib_index27: Int = 0\n    var fib_index28: Int = 0\n    var\
    \ fib_index29: Int = 0\n    var fib_index30: Int = 0\n    var fib_index31: Int\
    \ = 0\n    var fib_index32: Int = 0\n    var fib_index33: Int = 0\n    var fib_index34:\
    \ Int = 0\n    var fib_index35: Int = 0\n    var fib_index36: Int = 0\n    var\
    \ fib_index37: Int = 0\n    var fib_index38: Int = 0\n    var fib_index39: Int\
    \ = 0\n    var fib_index40: Int = 0\n    var fib_index41: Int = 0\n    var fib_index42:\
    \ Int = 0\n    var fib_index43: Int = 0\n    var fib_index44: Int = 0\n    var\
    \ fib_index45: Int = 0\n    var fib_index46: Int = 0\n    var fib_index47: Int\
    \ = 0\n    var fib_index48: Int = 0\n    var fib_index49: Int = 0\n    var fib_index50:\
    \ Int = 0\n    var fib_index51: Int = 0\n    var fib_index52: Int = 0\n    var\
    \ fib_index53: Int = 0\n    var fib_index54: Int = 0\n    var fib_index55: Int\
    \ = 0\n    var fib_index56: Int = 0\n    var fib_index57: Int = 0\n    var fib_index58:\
    \ Int = 0\n    var fib_index59: Int = 0\n    var fib_index60: Int = 0\n    var\
    \ fib_index61: Int = 0\n    var fib_index62: Int = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpj4z7bhb_.swift:69:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpj4z7bhb_.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpj4z7bhb_.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmpj4z7bhb_.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:7:9: warning:\
    \ variable 'fib_index' was never used; consider replacing with '_' or removing\
    \ it\n    var fib_index: Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:8:9:\
    \ warning: variable 'fib_index2' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:9:9:\
    \ warning: variable 'fib_index3' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:10:9:\
    \ warning: variable 'fib_index4' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:11:9:\
    \ warning: variable 'fib_index5' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:12:9:\
    \ warning: variable 'fib_index6' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:13:9:\
    \ warning: variable 'fib_index7' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:14:9:\
    \ warning: variable 'fib_index8' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:15:9:\
    \ warning: variable 'fib_index9' was never used; co"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for i := 2; i < n; i++ {\n        fib[i] = fib[i -\
    \ 1] + fib[i - 2]\n    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpxo10xilr.swift:7:12: error: expected type\n    for i := 2; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpxo10xilr.swift:7:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n       \
    \    ^\n/tmp/tmpxo10xilr.swift:7:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 2; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpsg7ofen8/tmpsg7ofen8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affa6a35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affa672cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affa672c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affa672b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsg7ofen8                        0x0000556581b01338 <unavailable> + 4920

    5    libc.so.6                          0x00002affa6c21460 __libc_start_main +
    245

    6    tmpsg7ofen8                        0x0000556581b00fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var n = 0\n    var prime = 0\n    var prime_fib\
    \ = 0\n    for n in 0..<n {\n        if a > b {\n            prime_fib = b\n \
    \           prime = 1\n        }\n        else {\n            prime_fib = a\n\
    \            prime = 0\n        }\n        if prime == 1 {\n            prime_fib\
    \ = prime_fib + b\n        }\n        if prime_fib > n {\n            prime_fib\
    \ = prime_fib - n\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + c\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + d\n        }\n        if prime_fib > n {\n            prime_fib\
    \ = prime_fib - n\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + c\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + d\n        }\n        if prime_fib > n {\n            prime_fib\
    \ = prime_fib - n\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + c\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + d\n        }\n        if prime_fib > n {\n            prime_fib\
    \ = prime_fib - n\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + c\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + d\n        }\n        if prime_fib > n {\n            prime_fib\
    \ = prime_fib - n\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + c\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + d\n        }\n        if prime_fib > n {\n            prime_fib\
    \ = prime_fib - n\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + c\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + d\n        }\n        if prime_fib > n {\n            prime_fib\
    \ = prime_fib - n\n        }\n        if prime_fib == n {\n            prime_fib\
    \ = prime_fib + c\n        }\n        if prime\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpljf62nj_.swift:83:17: error: expected '{' after 'if' condition\n\
    \        if prime\n                ^\n/tmp/tmpljf62nj_.swift:108:38: error: expected\
    \ '}' at end of brace statement\nassert(prime_fib(n: 10) == 433494437)\n     \
    \                                ^\n/tmp/tmpljf62nj_.swift:3:31: note: to match\
    \ this opening '{'\nfunc prime_fib(n: Int) -> Int {\n                        \
    \      ^\n/tmp/tmpljf62nj_.swift:83:12: error: type 'Int' cannot be used as a\
    \ boolean; test for '!= 0' instead\n        if prime\n           ^\n         \
    \  (     != 0)\n/tmp/tmpljf62nj_.swift:87:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n/tmp/tmpljf62nj_.swift:99:8: error: cannot call value\
    \ of non-function type 'Int'\nassert(prime_fib(n: 1) == 2)\n       ^\n/tmp/tmpljf62nj_.swift:100:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(prime_fib(n: 2)\
    \ == 3)\n       ^\n/tmp/tmpljf62nj_.swift:101:8: error: cannot call value of non-function\
    \ type 'Int'\nassert(prime_fib(n: 3) == 5)\n       ^\n/tmp/tmpljf62nj_.swift:102:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(prime_fib(n: 4)\
    \ == 13)\n       ^\n/tmp/tmpljf62nj_.swift:103:8: error: cannot call value of\
    \ non-function type 'Int'\nassert(prime_fib(n: 5) == 89)\n       ^\n/tmp/tmpljf62nj_.swift:104:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(prime_fib(n: 6)\
    \ == 233)\n       ^\n/tmp/tmpljf62nj_.swift:105:8: error: cannot call value of\
    \ non-function type 'Int'\nassert(prime_fib(n: 7) == 1597)\n       ^\n/tmp/tmpljf62nj_.swift:106:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(prime_fib(n: 8)\
    \ == 28657)\n       ^\n/tmp/tmpljf62nj_.swift:107:8: error: cannot call value\
    \ of non-function type 'Int'\nassert(prime_fib(n: 9) == 514229)\n       ^\n/tmp/tmpljf62nj_.swift:108:8:\
    \ error: cannot call value of non-function type 'Int'\nassert(prime_fib(n: 10)\
    \ == 433494437)\n       ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    for _ in 0..<n {\n  \
    \      fib += prime\n        if fib > n {\n            break\n        }\n    \
    \    if prime_found == true {\n            break\n        }\n        if fib %\
    \ 2 == 0 {\n            prime_found = true\n            prime = fib / 2\n    \
    \    }\n    }\n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpn09ur6g3/tmpn09ur6g3.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb02b36c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb0282db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb0282d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb0282c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn09ur6g3                        0x00005583ecf18338 <unavailable> + 4920

    5    libc.so.6                          0x00002acb02d22460 __libc_start_main +
    245

    6    tmpn09ur6g3                        0x00005583ecf17fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var isPrime: Bool = false\n    var isFibonacci: Bool = false\n\
    \n    if n == 0 {\n        return 0\n    }\n\n    if n == 1 {\n        return\
    \ 1\n    }\n\n    if n == 2 {\n        return 2\n    }\n\n    if n == 3 {\n  \
    \      return 3\n    }\n\n    if n == 4 {\n        return 5\n    }\n\n    if n\
    \ == 5 {\n        return 8\n    }\n\n    if n == 6 {\n        return 13\n    }\n\
    \n    if n == 7 {\n        return 21\n    }\n\n    if n == 8 {\n        return\
    \ 34\n    }\n\n    if n == 9 {\n        return 55\n    }\n\n    if n == 10 {\n\
    \        return 89\n    }\n\n    if n == 11 {\n        return 144\n    }\n\n \
    \   if n == 12 {\n        return 233\n    }\n\n    if n == 13 {\n        return\
    \ 377\n    }\n\n    if n == 14 {\n        return 610\n    }\n\n    if n == 15\
    \ {\n        return 987\n    }\n\n    if n == 16 {\n        return 1597\n    }\n\
    \n    if n == 17 {\n        return 2584\n    }\n\n    if n == 18 {\n        return\
    \ 4181\n    }\n\n    if n == 19 {\n        return 6765\n    }\n\n    if n == 20\
    \ {\n        return 10946\n    }\n\n    if n == 21 {\n        return 17711\n \
    \   }\n\n    if n == 22 {\n        return 28657\n    }\n\n    if n == 23 {\n \
    \       return 46368\n    }\n\n    if n == 24 {\n        return 75025\n    }\n\
    \n    if n == 25 {\n        return 121393\n    }\n\n    if n == 26 {\n       \
    \ return 196418\n    }\n\n    if n == 27 {\n        return 317811\n    }\n\n \
    \   if n == 28 {\n        return 514229\n    }\n\n    if n == 29 {\n        return\
    \ 832040\n    }\n\n    if n == 30 {\n        return 1346269\n    }\n\n    if n\
    \ == 31 {\n        return 2178309\n    }\n\n    if n == 32 {\n        return 3524578\n\
    \    }\n\n    if n == 33 {\n        return 5702887\n    }\n\n    if n == 34 {\n\
    \        return 9131716\n    }\n\n    if n == 35 {\n        return 14466976\n\
    \    }\n\n    if n == 36 {\n        return 19289637\n    }\n\n    if n == 37 {\n\
    \        return 31712586\n    }\n\n    if n == 38 {\n        return 51422919\n\
    \    }\n\n    if n == 39 {\n        return 8320439\n    }\n\n    if n == 40 {\n\
    \        return 134626919\n    }\n\n    if n == 41 {\n        return 217830919\n\
    \    }\n\n    if n == 42 {\n        return 352457819\n    }\n\n    if n == 43\
    \ {\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpgv2ildae.swift:206:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmpgv2ildae.swift:3:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmpgv2ildae.swift:185:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmpgv2ildae.swift:4:9:\
    \ warning: variable 'fib' was never used; consider replacing with '_' or removing\
    \ it\n    var fib: Int = 0\n        ^~~\n        _\n/tmp/tmpgv2ildae.swift:5:9:\
    \ warning: variable 'prime' was never used; consider replacing with '_' or removing\
    \ it\n    var prime: Int = 0\n        ^~~~~\n        _\n/tmp/tmpgv2ildae.swift:6:9:\
    \ warning: variable 'isPrime' was never used; consider replacing with '_' or removing\
    \ it\n    var isPrime: Bool = false\n        ^~~~~~~\n        _\n/tmp/tmpgv2ildae.swift:7:9:\
    \ warning: variable 'isFibonacci' was never used; consider replacing with '_'\
    \ or removing it\n    var isFibonacci: Bool = false\n        ^~~~~~~~~~~\n   \
    \     _\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpd068kzw6.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpd068kzw6.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpd068kzw6.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpd068kzw6.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpd068kzw6.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpd068kzw6.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3)\n                     ^\n                     n: \n/tmp/tmpd068kzw6.swift:19:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n                                        ^\n       \
    \                                 n: \n/tmp/tmpd068kzw6.swift:19:60: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\
    \ + prime_fib(n - 3)\n                                                       \
    \    ^\n                                                           n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for index in 2..<n {\n        fib[index] = fib[index-1]\
    \ + fib[index-2]\n    }\n    return fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b994fc08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b994f8ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b994f8ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b994f8ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b994f8febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b994f6fe7ec <unavailable> + 186348

    6    tmprbgh2har                        0x000056016b8fb943 <unavailable> + 6467

    7    tmprbgh2har                        0x000056016b8fb3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b994fdf4460 __libc_start_main +
    245

    9    tmprbgh2har                        0x000056016b8fb0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = 1 // first two numbers\
    \ are 1 and 1\n    var prime = 1\n    for _ in 0..<n {\n        fib += prime\n\
    \        if fib > n {\n            prime = 0\n        }\n    }\n    return fib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpdpg76g4g/tmpdpg76g4g.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac85ed24c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac85ea1bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac85ea1b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac85ea1a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdpg76g4g                        0x000055c74ad4d42e <unavailable> + 5166

    5    libc.so.6                          0x00002ac85ef10460 __libc_start_main +
    245

    6    tmpdpg76g4g                        0x000055c74ad4cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for index in 2..<n {\n        fib[index] = fib[index-1]\
    \ + fib[index-2]\n    }\n    return fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b994fc08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b994f8ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b994f8ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b994f8ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b994f8febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b994f6fe7ec <unavailable> + 186348

    6    tmprbgh2har                        0x000056016b8fb943 <unavailable> + 6467

    7    tmprbgh2har                        0x000056016b8fb3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b994fdf4460 __libc_start_main +
    245

    9    tmprbgh2har                        0x000056016b8fb0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    for _ in 0..<n {\n        c = a + b\n     \
    \   if c > 1000 {\n            d = c\n        } else {\n            d = c\n  \
    \      }\n        a = b\n        b = d\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpqf98rdlo/tmpqf98rdlo.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60d5048c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60d4d3fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60d4d3f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60d4d3e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqf98rdlo                        0x000055f885454338 <unavailable> + 4920

    5    libc.so.6                          0x00002b60d5234460 __libc_start_main +
    245

    6    tmpqf98rdlo                        0x000055f885453fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpl7nanp6r.swift:8:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpl7nanp6r.swift:8:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpl7nanp6r.swift:10:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpl7nanp6r.swift:10:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    \n    var fib: Int = 0\n    var prime: Int = 0\n    \n    for\
    \ _ in 0..<n {\n        fib = fib + (fib + 1) // fibonacci number\n        prime\
    \ = prime + 1\n    }\n    \n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp_mao8wib/tmp_mao8wib.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab64465bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab644352b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab644352988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6443517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_mao8wib                        0x000055d40f3db338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab644847460 __libc_start_main +
    245

    6    tmp_mao8wib                        0x000055d40f3dafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var isPrime: Bool = false\n    \n    if n <= 1 {\n     \
    \   return n\n    }\n    \n    if n == 2 {\n        fib = 1\n        prime = 1\n\
    \        isPrime = true\n    }\n    \n    for _ in 0..<n {\n        if isPrime\
    \ {\n            prime = fib\n            fib += prime\n        } else {\n   \
    \         prime = fib\n            fib += prime\n        }\n        \n       \
    \ if fib > 1000 {\n            isPrime = false\n        }\n    }\n    \n    return\
    \ fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp42liajht/tmp42liajht.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac0d23a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac0d20a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac0d20a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac0d209f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp42liajht                        0x00005604ee3c6338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac0d2595460 __libc_start_main +
    245

    6    tmp42liajht                        0x00005604ee3c5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib_number = 0\n    var\
    \ prime_number = 0\n    var prime_flag = false\n    var fib_flag = false\n   \
    \ for _ in 0..<n {\n        if prime_flag == true {\n            prime_number\
    \ = prime_number + 1\n            if prime_number == 2 {\n                prime_flag\
    \ = false\n            }\n        } else {\n            fib_number = fib_number\
    \ + 1\n            if fib_number == 2 {\n                fib_flag = false\n  \
    \          }\n        }\n        if fib_flag == true {\n            fib_number\
    \ = fib_number + 1\n            if fib_number == 2 {\n                fib_flag\
    \ = false\n            }\n        }\n    }\n    return fib_number\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp57ilgy0p/tmp57ilgy0p.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7600a55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b760074cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b760074c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b760074b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57ilgy0p                        0x0000556c05e1c338 <unavailable> + 4920

    5    libc.so.6                          0x00002b7600c41460 __libc_start_main +
    245

    6    tmp57ilgy0p                        0x0000556c05e1bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    for _ in 0..<n {\n        fib\
    \ += prime\n        if fib > 1000000000 {\n            prime_found = true\n  \
    \          break\n        }\n        prime = fib\n    }\n    if prime_found {\n\
    \        return fib\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpqkg78ico/tmpqkg78ico.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70b094dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70b0644b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70b0644988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70b06437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqkg78ico                        0x000055f7f1e85338 <unavailable> + 4920

    5    libc.so.6                          0x00002b70b0b39460 __libc_start_main +
    245

    6    tmpqkg78ico                        0x000055f7f1e84fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for index in 2..<n {\n        fib[index] = fib[index-1]\
    \ + fib[index-2]\n    }\n    return fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b994fc08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b994f8ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b994f8ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b994f8ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b994f8febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b994f6fe7ec <unavailable> + 186348

    6    tmprbgh2har                        0x000056016b8fb943 <unavailable> + 6467

    7    tmprbgh2har                        0x000056016b8fb3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b994fdf4460 __libc_start_main +
    245

    9    tmprbgh2har                        0x000056016b8fb0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpdx9m4n5c/tmpdx9m4n5c.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8248d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8248a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8248a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8248a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdx9m4n5c                        0x0000557e5cccf338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8248f8b460 __libc_start_main +
    245

    6    tmpdx9m4n5c                        0x0000557e5cccefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib_number: Int = 0\n\
    \    var prime_number: Int = 0\n    var prime_flag: Bool = false\n    var prime_flag2:\
    \ Bool = false\n    var prime_flag3: Bool = false\n    var prime_flag4: Bool =\
    \ false\n    var prime_flag5: Bool = false\n    var prime_flag6: Bool = false\n\
    \    var prime_flag7: Bool = false\n    var prime_flag8: Bool = false\n    var\
    \ prime_flag9: Bool = false\n    var prime_flag10: Bool = false\n    var prime_flag11:\
    \ Bool = false\n    var prime_flag12: Bool = false\n    var prime_flag13: Bool\
    \ = false\n    var prime_flag14: Bool = false\n    var prime_flag15: Bool = false\n\
    \    var prime_flag16: Bool = false\n    var prime_flag17: Bool = false\n    var\
    \ prime_flag18: Bool = false\n    var prime_flag19: Bool = false\n    var prime_flag20:\
    \ Bool = false\n    var prime_flag21: Bool = false\n    var prime_flag22: Bool\
    \ = false\n    var prime_flag23: Bool = false\n    var prime_flag24: Bool = false\n\
    \    var prime_flag25: Bool = false\n    var prime_flag26: Bool = false\n    var\
    \ prime_flag27: Bool = false\n    var prime_flag28: Bool = false\n    var prime_flag29:\
    \ Bool = false\n    var prime_flag30: Bool = false\n    var prime_flag31: Bool\
    \ = false\n    var prime_flag32: Bool = false\n    var prime_flag33: Bool = false\n\
    \    var prime_flag34: Bool = false\n    var prime_flag35: Bool = false\n    var\
    \ prime_flag36: Bool = false\n    var prime_flag37: Bool = false\n    var prime_flag38:\
    \ Bool = false\n    var prime_flag39: Bool = false\n    var prime_flag40: Bool\
    \ = false\n    var prime_flag41: Bool = false\n    var prime_flag42: Bool = false\n\
    \    var prime_flag43: Bool = false\n    var prime_flag44: Bool = false\n    var\
    \ prime_flag45: Bool = false\n    var prime_flag46: Bool = false\n    var prime_flag47:\
    \ Bool = false\n    var prime_flag48: Bool = false\n    var prime_flag49: Bool\
    \ = false\n    var prime_flag50: Bool = false\n    var prime_flag51: Bool = false\n\
    \    var prime_flag52: Bool = false\n    var prime_flag53: Bool = false\n    var\
    \ prime_flag54: Bool = false\n    var prime_flag55: Bool = false\n    var prime_flag56:\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjl5vi95g.swift:61:22: error: expected type\n    var prime_flag56:\
    \ \n                     ^\n                      <#type#>\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpdx9m4n5c/tmpdx9m4n5c.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8248d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8248a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8248a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8248a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdx9m4n5c                        0x0000557e5cccf338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8248f8b460 __libc_start_main +
    245

    6    tmpdx9m4n5c                        0x0000557e5cccefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 1\n    var prime = 0\n    var fib = 0\n    for _ in\
    \ 0..<n {\n        fib += d\n        if fib > n {\n            break\n       \
    \ }\n        if fib == n {\n            prime = 1\n            break\n       \
    \ }\n        if a > fib {\n            break\n        }\n        if b > fib {\n\
    \            break\n        }\n        if c > fib {\n            break\n     \
    \   }\n        if d > fib {\n            break\n        }\n        c += 1\n  \
    \      d += 1\n        a += b\n        b += c\n    }\n    return fib\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp_8mzilzy/tmp_8mzilzy.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20c1b59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20c1850b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20c1850988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20c184f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_8mzilzy                        0x000055d0666a0338 <unavailable> + 4920

    5    libc.so.6                          0x00002b20c1d45460 __libc_start_main +
    245

    6    tmp_8mzilzy                        0x000055d06669ffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    var d = 1\n    var prime = 0\n    for _ in 0..<n {\n     \
    \   if a > b {\n            prime = 1\n            break\n        }\n        if\
    \ c > d {\n            prime = 1\n            break\n        }\n        if a ==\
    \ b {\n            prime = 1\n            break\n        }\n        if c % a ==\
    \ 0 {\n            prime = 1\n            break\n        }\n        if d % b ==\
    \ 0 {\n            prime = 1\n            break\n        }\n        c += a\n \
    \       d += b\n        prime = 0\n    }\n    return prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp5s9blk78/tmp5s9blk78.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22a3c0bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22a3902b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22a3902988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22a39017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5s9blk78                        0x0000557999708338 <unavailable> + 4920

    5    libc.so.6                          0x00002b22a3df7460 __libc_start_main +
    245

    6    tmp5s9blk78                        0x0000557999707fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    for _ in 0..<n {\n        fib\
    \ += prime\n        if fib > n {\n            break\n        }\n        if prime_found\
    \ {\n            break\n        }\n        prime = fib\n        if prime > n {\n\
    \            break\n        }\n        prime_found = true\n    }\n    return fib\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpldy49o9j/tmpldy49o9j.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee3fa44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee3f73bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee3f73b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee3f73a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpldy49o9j                        0x000055aba3425338 <unavailable> + 4920

    5    libc.so.6                          0x00002aee3fc30460 __libc_start_main +
    245

    6    tmpldy49o9j                        0x000055aba3424fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for index in 2..<n {\n        fib[index] = fib[index-1]\
    \ + fib[index-2]\n    }\n    return fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b994fc08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b994f8ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b994f8ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b994f8ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b994f8febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b994f6fe7ec <unavailable> + 186348

    6    tmprbgh2har                        0x000056016b8fb943 <unavailable> + 6467

    7    tmprbgh2har                        0x000056016b8fb3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b994fdf4460 __libc_start_main +
    245

    9    tmprbgh2har                        0x000056016b8fb0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 1\n    var prime: Bool = false\n    var result: Int\
    \ = 0\n    for _ in 0..<n {\n        c = a + b\n        if c > 1000 {\n      \
    \      result = c\n            break\n        }\n        d = b\n        a = c\n\
    \        b = d\n    }\n    if result == 0 {\n        result = 1\n    }\n    if\
    \ prime == false {\n        return result\n    }\n    return -1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp3f08otm8/tmp3f08otm8.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3858b2dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3858824b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3858824988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38588237b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3f08otm8                        0x0000559998553338 <unavailable> + 4920

    5    libc.so.6                          0x00002b3858d19460 __libc_start_main +
    245

    6    tmp3f08otm8                        0x0000559998552fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib_number: Int = 0\n\
    \    var prime_number: Int = 0\n    var prime_flag: Bool = false\n    var prime_flag2:\
    \ Bool = false\n    var prime_flag3: Bool = false\n    var prime_flag4: Bool =\
    \ false\n    var prime_flag5: Bool = false\n    var prime_flag6: Bool = false\n\
    \    var prime_flag7: Bool = false\n    var prime_flag8: Bool = false\n    var\
    \ prime_flag9: Bool = false\n    var prime_flag10: Bool = false\n    var prime_flag11:\
    \ Bool = false\n    var prime_flag12: Bool = false\n    var prime_flag13: Bool\
    \ = false\n    var prime_flag14: Bool = false\n    var prime_flag15: Bool = false\n\
    \    var prime_flag16: Bool = false\n    var prime_flag17: Bool = false\n    var\
    \ prime_flag18: Bool = false\n    var prime_flag19: Bool = false\n    var prime_flag20:\
    \ Bool = false\n    var prime_flag21: Bool = false\n    var prime_flag22: Bool\
    \ = false\n    var prime_flag23: Bool = false\n    var prime_flag24: Bool = false\n\
    \    var prime_flag25: Bool = false\n    var prime_flag26: Bool = false\n    var\
    \ prime_flag27: Bool = false\n    var prime_flag28: Bool = false\n    var prime_flag29:\
    \ Bool = false\n    var prime_flag30: Bool = false\n    var prime_flag31: Bool\
    \ = false\n    var prime_flag32: Bool = false\n    var prime_flag33: Bool = false\n\
    \    var prime_flag34: Bool = false\n    var prime_flag35: Bool = false\n    var\
    \ prime_flag36: Bool = false\n    var prime_flag37: Bool = false\n    var prime_flag38:\
    \ Bool = false\n    var prime_flag39: Bool = false\n    var prime_flag40: Bool\
    \ = false\n    var prime_flag41: Bool = false\n    var prime_flag42: Bool = false\n\
    \    var prime_flag43: Bool = false\n    var prime_flag44: Bool = false\n    var\
    \ prime_flag45: Bool = false\n    var prime_flag46: Bool = false\n    var prime_flag47:\
    \ Bool = false\n    var prime_flag48: Bool = false\n    var prime_flag49: Bool\
    \ = false\n    var prime_flag50: Bool = false\n    var prime_flag51: Bool = false\n\
    \    var prime_flag52: Bool = false\n    var prime_flag53: Bool = false\n    var\
    \ prime_flag54: Bool = false\n    var prime_flag55: Bool = false\n    var prime_flag56:\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjl5vi95g.swift:61:22: error: expected type\n    var prime_flag56:\
    \ \n                     ^\n                      <#type#>\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for i : Int in 2..<n {\n        fib[i] = fib[i - 1]\
    \ + fib[i - 2]\n    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b1431302c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1430ff9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1430ff9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1430ff913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1430ff8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b1430df87ec <unavailable> + 186348

    6    tmp2js40kwd                        0x000055a6a5c71943 <unavailable> + 6467

    7    tmp2js40kwd                        0x000055a6a5c713cb <unavailable> + 5067

    8    libc.so.6                          0x00002b14314ee460 __libc_start_main +
    245

    9    tmp2js40kwd                        0x000055a6a5c710e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    \n    var a = 2\n    var b = 1\n    var c = 1\n    \n    for _\
    \ in 0..<n {\n        let tmp = a\n        a = b\n        b = c\n        c = tmp\
    \ + a + b\n    }\n    \n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp90cu1sw8/tmp90cu1sw8.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac5fac62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac5fa959b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac5fa959988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac5fa9587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90cu1sw8                        0x0000564ca87cc338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac5fae4e460 __libc_start_main +
    245

    6    tmp90cu1sw8                        0x0000564ca87cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int =\
    \ 0\n\n    if n == 0 || n == 1 {\n        return n\n    }\n\n    for fib_index\
    \ in 1...n {\n        fib = fib + (fib_index * fib_index)\n        if fib_index\
    \ == n {\n            if fib % 2 == 0 {\n                prime = fib\n       \
    \         prime_found = true\n            }\n        }\n    }\n\n    if prime_found\
    \ == false {\n        return -1\n    }\n\n    return prime\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpcrtizreq/tmpcrtizreq.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b62f213ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b62f1e35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b62f1e35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b62f1e347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcrtizreq                        0x0000557b960b7338 <unavailable> + 4920

    5    libc.so.6                          0x00002b62f232a460 __libc_start_main +
    245

    6    tmpcrtizreq                        0x0000557b960b6fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbo99tde3.swift:8:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpbo99tde3.swift:8:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpbo99tde3.swift:10:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n       \
    \              ^\n                     n: \n/tmp/tmpbo99tde3.swift:10:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    for _ in 0..<n {\n        fib\
    \ += prime\n        if fib > 1000 {\n            prime_found = true\n        \
    \    break\n        }\n        if fib == 2 {\n            prime = 1\n        }\n\
    \        if fib == 3 {\n            prime = 2\n        }\n    }\n    if prime_found\
    \ {\n        return fib\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmphs4qv9dm/tmphs4qv9dm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4cee2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4ceb21b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4ceb21988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4ceb207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphs4qv9dm                        0x000055f775f8f338 <unavailable> + 4920

    5    libc.so.6                          0x00002ac4cf016460 __libc_start_main +
    245

    6    tmphs4qv9dm                        0x000055f775f8efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    \n    var fib_numbers = [Int]()\n    fib_numbers.append(1)\n\
    \    fib_numbers.append(2)\n    \n    for index in 2..<n {\n        let fib_number\
    \ = fib_numbers[index-1] + fib_numbers[index-2]\n        fib_numbers.append(fib_number)\n\
    \    }\n    \n    return fib_numbers[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp_tnqfr3e/tmp_tnqfr3e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b1b68dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b1b384b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b1b384988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b1b3837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_tnqfr3e                        0x000055600eac2448 <unavailable> + 5192

    5    libc.so.6                          0x00002b7b1b879460 __libc_start_main +
    245

    6    tmp_tnqfr3e                        0x000055600eac20f9 <unavailable> + 4345

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for i := 2; i < n; i++ {\n        fib[i] = fib[i -\
    \ 1] + fib[i - 2]\n    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpxo10xilr.swift:7:12: error: expected type\n    for i := 2; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpxo10xilr.swift:7:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n       \
    \    ^\n/tmp/tmpxo10xilr.swift:7:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 2; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib_number: Int = 0\n\
    \    var prime_number: Int = 0\n    var prime_flag: Bool = false\n    var prime_flag2:\
    \ Bool = false\n    var prime_flag3: Bool = false\n    var prime_flag4: Bool =\
    \ false\n    var prime_flag5: Bool = false\n    var prime_flag6: Bool = false\n\
    \    var prime_flag7: Bool = false\n    var prime_flag8: Bool = false\n    var\
    \ prime_flag9: Bool = false\n    var prime_flag10: Bool = false\n    var prime_flag11:\
    \ Bool = false\n    var prime_flag12: Bool = false\n    var prime_flag13: Bool\
    \ = false\n    var prime_flag14: Bool = false\n    var prime_flag15: Bool = false\n\
    \    var prime_flag16: Bool = false\n    var prime_flag17: Bool = false\n    var\
    \ prime_flag18: Bool = false\n    var prime_flag19: Bool = false\n    var prime_flag20:\
    \ Bool = false\n    var prime_flag21: Bool = false\n    var prime_flag22: Bool\
    \ = false\n    var prime_flag23: Bool = false\n    var prime_flag24: Bool = false\n\
    \    var prime_flag25: Bool = false\n    var prime_flag26: Bool = false\n    var\
    \ prime_flag27: Bool = false\n    var prime_flag28: Bool = false\n    var prime_flag29:\
    \ Bool = false\n    var prime_flag30: Bool = false\n    var prime_flag31: Bool\
    \ = false\n    var prime_flag32: Bool = false\n    var prime_flag33: Bool = false\n\
    \    var prime_flag34: Bool = false\n    var prime_flag35: Bool = false\n    var\
    \ prime_flag36: Bool = false\n    var prime_flag37: Bool = false\n    var prime_flag38:\
    \ Bool = false\n    var prime_flag39: Bool = false\n    var prime_flag40: Bool\
    \ = false\n    var prime_flag41: Bool = false\n    var prime_flag42: Bool = false\n\
    \    var prime_flag43: Bool = false\n    var prime_flag44: Bool = false\n    var\
    \ prime_flag45: Bool = false\n    var prime_flag46: Bool = false\n    var prime_flag47:\
    \ Bool = false\n    var prime_flag48: Bool = false\n    var prime_flag49: Bool\
    \ = false\n    var prime_flag50: Bool = false\n    var prime_flag51: Bool = false\n\
    \    var prime_flag52: Bool = false\n    var prime_flag53: Bool = false\n    var\
    \ prime_flag54: Bool = false\n    var prime_flag55: Bool = false\n    var prime_flag56:\
    \ \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpjl5vi95g.swift:61:22: error: expected type\n    var prime_flag56:\
    \ \n                     ^\n                      <#type#>\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpqtg8atus/tmpqtg8atus.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37fd4e7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37fd1deb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37fd1de988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37fd1dd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqtg8atus                        0x000055d873c35338 <unavailable> + 4920

    5    libc.so.6                          0x00002b37fd6d3460 __libc_start_main +
    245

    6    tmpqtg8atus                        0x000055d873c34fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    for _ in 0..<n {\n        c = a + b\n     \
    \   a = b\n        b = c\n        d = c + d\n    }\n    return d\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpvcdbmz8u/tmpvcdbmz8u.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b81536adc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b81533a4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b81533a4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b81533a37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvcdbmz8u                        0x000055af1e118338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8153899460 __libc_start_main +
    245

    6    tmpvcdbmz8u                        0x000055af1e117fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpd068kzw6.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpd068kzw6.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpd068kzw6.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpd068kzw6.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpd068kzw6.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpd068kzw6.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3)\n                     ^\n                     n: \n/tmp/tmpd068kzw6.swift:19:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n                                        ^\n       \
    \                                 n: \n/tmp/tmpd068kzw6.swift:19:60: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\
    \ + prime_fib(n - 3)\n                                                       \
    \    ^\n                                                           n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    for _ in 0..<n {\n        c = a + b\n     \
    \   d = b\n        a = b\n        b = c\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpmphwi8aj/tmpmphwi8aj.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af7ce00bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7cdd02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af7cdd02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af7cdd017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmphwi8aj                        0x0000556cd66c9338 <unavailable> + 4920

    5    libc.so.6                          0x00002af7ce1f7460 __libc_start_main +
    245

    6    tmpmphwi8aj                        0x0000556cd66c8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    for _ in 0..<n {\n  \
    \      fib += 2\n        if fib > n {\n            break\n        }\n        if\
    \ isPrime(fib) {\n            prime = fib\n            prime_found = true\n  \
    \      }\n    }\n    if prime_found == false {\n        return 0\n    }\n    return\
    \ prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpwh52etfw.swift:12:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(fib) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpd068kzw6.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpd068kzw6.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpd068kzw6.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpd068kzw6.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpd068kzw6.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpd068kzw6.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3)\n                     ^\n                     n: \n/tmp/tmpd068kzw6.swift:19:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n                                        ^\n       \
    \                                 n: \n/tmp/tmpd068kzw6.swift:19:60: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\
    \ + prime_fib(n - 3)\n                                                       \
    \    ^\n                                                           n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp_qie2wqz/tmp_qie2wqz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d7e876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d7e56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d7e56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d7e56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qie2wqz                        0x0000562934757338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d7ea62460 __libc_start_main +
    245

    6    tmp_qie2wqz                        0x0000562934756fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib_number: Int = 0\n\
    \    var prime_number: Int = 0\n    var is_prime: Bool = false\n    var is_fib_prime:\
    \ Bool = false\n\n    if n == 0 {\n        return 0\n    }\n\n    if n == 1 {\n\
    \        return 1\n    }\n\n    if n == 2 {\n        return 2\n    }\n\n    if\
    \ n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n - 2)\n    }\n\n\
    \    for number in 1...n {\n        if number % 2 == 0 {\n            prime_number\
    \ = prime_fib(number / 2)\n            is_prime = true\n        } else {\n   \
    \         prime_number = prime_fib(3 * number + 2)\n            is_prime = false\n\
    \        }\n\n        if prime_number == fib_number {\n            is_fib_prime\
    \ = true\n        } else {\n            is_fib_prime = false\n        }\n\n  \
    \      if is_prime == is_fib_prime {\n            fib_number = number\n      \
    \  }\n    }\n\n    return fib_number\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpdjwfsh5z.swift:22:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpdjwfsh5z.swift:22:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpdjwfsh5z.swift:27:38: error: missing argument\
    \ label 'n:' in call\n            prime_number = prime_fib(number / 2)\n     \
    \                                ^\n                                     n: \n\
    /tmp/tmpdjwfsh5z.swift:30:38: error: missing argument label 'n:' in call\n   \
    \         prime_number = prime_fib(3 * number + 2)\n                         \
    \            ^\n                                     n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpl7nanp6r.swift:8:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpl7nanp6r.swift:8:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpl7nanp6r.swift:10:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpl7nanp6r.swift:10:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib_number = 0\n    var\
    \ prime_number = 0\n    var prime_flag = 0\n    var prime_flag2 = 0\n    var prime_flag3\
    \ = 0\n    var prime_flag4 = 0\n    var prime_flag5 = 0\n    var prime_flag6 =\
    \ 0\n    var prime_flag7 = 0\n    var prime_flag8 = 0\n    var prime_flag9 = 0\n\
    \    var prime_flag10 = 0\n    var prime_flag11 = 0\n    var prime_flag12 = 0\n\
    \    var prime_flag13 = 0\n    var prime_flag14 = 0\n    var prime_flag15 = 0\n\
    \    var prime_flag16 = 0\n    var prime_flag17 = 0\n    var prime_flag18 = 0\n\
    \    var prime_flag19 = 0\n    var prime_flag20 = 0\n    var prime_flag21 = 0\n\
    \    var prime_flag22 = 0\n    var prime_flag23 = 0\n    var prime_flag24 = 0\n\
    \    var prime_flag25 = 0\n    var prime_flag26 = 0\n    var prime_flag27 = 0\n\
    \    var prime_flag28 = 0\n    var prime_flag29 = 0\n    var prime_flag30 = 0\n\
    \    var prime_flag31 = 0\n    var prime_flag32 = 0\n    var prime_flag33 = 0\n\
    \    var prime_flag34 = 0\n    var prime_flag35 = 0\n    var prime_flag36 = 0\n\
    \    var prime_flag37 = 0\n    var prime_flag38 = 0\n    var prime_flag39 = 0\n\
    \    var prime_flag40 = 0\n    var prime_flag41 = 0\n    var prime_flag42 = 0\n\
    \    var prime_flag43 = 0\n    var prime_flag44 = 0\n    var prime_flag45 = 0\n\
    \    var prime_flag46 = 0\n    var prime_flag47 = 0\n    var prime_flag48 = 0\n\
    \    var prime_flag49 = 0\n    var prime_flag50 = 0\n    var prime_flag51 = 0\n\
    \    var prime_flag52 = 0\n    var prime_flag53 = 0\n    var prime_flag54 = 0\n\
    \    var prime_flag55 = 0\n    var prime_flag56 = 0\n    var prime_flag57 = 0\n\
    \    var prime_flag58 = 0\n    var prime_flag59 = 0\n    var prime_flag60 = 0\n\
    \    var prime_flag61 = 0\n    var prime_flag62 = 0\n    var prime_flag63 = 0\n\
    \    var prime_flag64 = 0\n    var prime_flag65 = 0\n    var prime_flag66 = 0\n\
    \    var prime_flag67 = 0\n    var prime_flag68 = 0\n    var prime_flag69 = 0\n\
    \    var prime_flag70 = 0\n    var prime_flag71 = 0\n    var prime_flag\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpaj1kpt7u.swift:77:9: error: type annotation missing in pattern\n\
    \    var prime_flag\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n \
    \   var h = 0\n    var i = 1\n    var j = 0\n    var k = 0\n    var l = 0\n  \
    \  var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n   \
    \ var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var\
    \ w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b\
    \ = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g =\
    \ 0\n    var h = 0\n    var i = 1\n    var j = 0\n    var k = 0\n    var l = 0\n\
    \    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n \
    \   var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n  \
    \  var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n   \
    \ var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var\
    \ g = 0\n    var h = 0\n    var i = 1\n    var j = 0\n    var k = 0\n    var l\
    \ = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q =\
    \ 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n\
    \    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n \
    \   var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n  \
    \  var g = 0\n    var h = 0\n    var i = 1\n    var j = 0\n    var k = 0\n   \
    \ var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var\
    \ q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v\
    \ = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a =\
    \ 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n\
    \    var g = 0\n    var h = 0\n    var i = 1\n    var j = 0\n    var k = 0\n \
    \   var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n  \
    \  var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   \
    \ var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpdk3an4_b.swift:133:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmpdk3an4_b.swift:30:9: error: invalid redeclaration of 'a'\n    var\
    \ a = 0\n        ^\n/tmp/tmpdk3an4_b.swift:4:9: note: 'a' previously declared\
    \ here\n    var a = 2\n        ^\n/tmp/tmpdk3an4_b.swift:31:9: error: invalid\
    \ redeclaration of 'b'\n    var b = 0\n        ^\n/tmp/tmpdk3an4_b.swift:5:9:\
    \ note: 'b' previously declared here\n    var b = 1\n        ^\n/tmp/tmpdk3an4_b.swift:32:9:\
    \ error: invalid redeclaration of 'c'\n    var c = 0\n        ^\n/tmp/tmpdk3an4_b.swift:6:9:\
    \ note: 'c' previously declared here\n    var c = 0\n        ^\n/tmp/tmpdk3an4_b.swift:33:9:\
    \ error: invalid redeclaration of 'd'\n    var d = 0\n        ^\n/tmp/tmpdk3an4_b.swift:7:9:\
    \ note: 'd' previously declared here\n    var d = 0\n        ^\n/tmp/tmpdk3an4_b.swift:34:9:\
    \ error: invalid redeclaration of 'e'\n    var e = 0\n        ^\n/tmp/tmpdk3an4_b.swift:8:9:\
    \ note: 'e' previously declared here\n    var e = 0\n        ^\n/tmp/tmpdk3an4_b.swift:35:9:\
    \ error: invalid redeclaration of 'f'\n    var f = 0\n        ^\n/tmp/tmpdk3an4_b.swift:9:9:\
    \ note: 'f' previously declared here\n    var f = 0\n        ^\n/tmp/tmpdk3an4_b.swift:36:9:\
    \ error: invalid redeclaration of 'g'\n    var g = 0\n        ^\n/tmp/tmpdk3an4_b.swift:10:9:\
    \ note: 'g' previously declared here\n    var g = 0\n        ^\n/tmp/tmpdk3an4_b.swift:37:9:\
    \ error: invalid redeclaration of 'h'\n    var h = 0\n        ^\n/tmp/tmpdk3an4_b.swift:11:9:\
    \ note: 'h' previously declared here\n    var h = 0\n        ^\n/tmp/tmpdk3an4_b.swift:38:9:\
    \ error: invalid redeclaration of 'i'\n    var i = 1\n        ^\n/tmp/tmpdk3an4_b.swift:12:9:\
    \ note: 'i' previously declared here\n    var i = 1\n        ^\n/tmp/tmpdk3an4_b.swift:39:9:\
    \ error: invalid redeclaration of 'j'\n    var j = 0\n        ^\n/tmp/tmpdk3an4_b.swift:13:9:\
    \ note: 'j' previously declared here\n    var j = 0\n        ^\n/tmp/tmpdk3an4_b.swift:40:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 0\n        ^\n/tmp/tmpdk3an4_b.swift:14:9:\
    \ note: 'k' previously declared here\n    var k = 0\n        ^\n/tmp/tmpdk3an4_b.swift:41:9:\
    \ error:"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpwa5thydk/tmpwa5thydk.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafaa35bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafaa052b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafaa052988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafaa0517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwa5thydk                        0x0000561e8ab8b338 <unavailable> + 4920

    5    libc.so.6                          0x00002aafaa547460 __libc_start_main +
    245

    6    tmpwa5thydk                        0x0000561e8ab8afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpdx9m4n5c/tmpdx9m4n5c.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8248d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8248a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8248a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8248a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdx9m4n5c                        0x0000557e5cccf338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8248f8b460 __libc_start_main +
    245

    6    tmpdx9m4n5c                        0x0000557e5cccefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var isPrime: Bool = false\n\n    for _ in 0..<n {\n    \
    \    fib = fib + (fib * 2)\n        if isPrime {\n            prime = fib\n  \
    \      }\n        if fib > 1000 {\n            isPrime = false\n        }\n  \
    \      if fib == 2 {\n            isPrime = true\n        }\n    }\n    return\
    \ prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmplnk1cewg/tmplnk1cewg.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3b67c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3b64c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3b64c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3b64bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplnk1cewg                        0x00005613dceeb338 <unavailable> + 4920

    5    libc.so.6                          0x00002ae3b69b5460 __libc_start_main +
    245

    6    tmplnk1cewg                        0x00005613dceeafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    var d = 1\n    var prime = 1\n    for _ in 0..<n {\n     \
    \   if b == c {\n            prime = 0\n            break\n        }\n       \
    \ if b > c {\n            prime = 1\n            break\n        }\n        if\
    \ b == c {\n            prime = 1\n            break\n        }\n        if b\
    \ > c {\n            prime = 0\n            break\n        }\n        c += d\n\
    \        d += a\n        a += b\n        b += c\n    }\n    return prime\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp2s9nx3ik/tmp2s9nx3ik.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1ff32a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1ff2f9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1ff2f9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1ff2f9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2s9nx3ik                        0x000056344fe4c338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1ff3490460 __libc_start_main +
    245

    6    tmp2s9nx3ik                        0x000056344fe4bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpwa5thydk/tmpwa5thydk.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafaa35bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafaa052b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafaa052988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafaa0517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwa5thydk                        0x0000561e8ab8b338 <unavailable> + 4920

    5    libc.so.6                          0x00002aafaa547460 __libc_start_main +
    245

    6    tmpwa5thydk                        0x0000561e8ab8afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpdn_jxmhv/tmpdn_jxmhv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47ca376c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ca06db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ca06d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ca06c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdn_jxmhv                        0x0000559ac5571338 <unavailable> + 4920

    5    libc.so.6                          0x00002b47ca562460 __libc_start_main +
    245

    6    tmpdn_jxmhv                        0x0000559ac5570fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for index in 2..<n {\n        fib[index] = fib[index-1]\
    \ + fib[index-2]\n    }\n    return fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b994fc08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b994f8ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b994f8ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b994f8ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b994f8febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b994f6fe7ec <unavailable> + 186348

    6    tmprbgh2har                        0x000056016b8fb943 <unavailable> + 6467

    7    tmprbgh2har                        0x000056016b8fb3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b994fdf4460 __libc_start_main +
    245

    9    tmprbgh2har                        0x000056016b8fb0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    for _ in 0..<n {\n  \
    \      fib += 2\n        if fib > n {\n            break\n        }\n        if\
    \ prime_found == false {\n            if fib % 2 == 0 {\n                prime\
    \ = fib\n                prime_found = true\n            }\n        }\n    }\n\
    \    return prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmppaxe4316/tmppaxe4316.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23b8af0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23b87e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23b87e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23b87e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppaxe4316                        0x000055e661441338 <unavailable> + 4920

    5    libc.so.6                          0x00002b23b8cdc460 __libc_start_main +
    245

    6    tmppaxe4316                        0x000055e661440fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for index in 2..<n {\n        fib[index] = fib[index-1]\
    \ + fib[index-2]\n    }\n    return fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b994fc08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b994f8ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b994f8ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b994f8ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b994f8febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b994f6fe7ec <unavailable> + 186348

    6    tmprbgh2har                        0x000056016b8fb943 <unavailable> + 6467

    7    tmprbgh2har                        0x000056016b8fb3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b994fdf4460 __libc_start_main +
    245

    9    tmprbgh2har                        0x000056016b8fb0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpsg7ofen8/tmpsg7ofen8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affa6a35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affa672cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affa672c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affa672b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsg7ofen8                        0x0000556581b01338 <unavailable> + 4920

    5    libc.so.6                          0x00002affa6c21460 __libc_start_main +
    245

    6    tmpsg7ofen8                        0x0000556581b00fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n\n    if n % 2 == 0 {\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2)\n    }\n\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2zlqq4j2.swift:9:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp2zlqq4j2.swift:9:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp2zlqq4j2.swift:12:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n       \
    \              ^\n                     n: \n/tmp/tmp2zlqq4j2.swift:12:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int =\
    \ 0\n    var fib_index2: Int = 0\n    var fib_index3: Int = 0\n    var fib_index4:\
    \ Int = 0\n    var fib_index5: Int = 0\n    var fib_index6: Int = 0\n    var fib_index7:\
    \ Int = 0\n    var fib_index8: Int = 0\n    var fib_index9: Int = 0\n    var fib_index10:\
    \ Int = 0\n    var fib_index11: Int = 0\n    var fib_index12: Int = 0\n    var\
    \ fib_index13: Int = 0\n    var fib_index14: Int = 0\n    var fib_index15: Int\
    \ = 0\n    var fib_index16: Int = 0\n    var fib_index17: Int = 0\n    var fib_index18:\
    \ Int = 0\n    var fib_index19: Int = 0\n    var fib_index20: Int = 0\n    var\
    \ fib_index21: Int = 0\n    var fib_index22: Int = 0\n    var fib_index23: Int\
    \ = 0\n    var fib_index24: Int = 0\n    var fib_index25: Int = 0\n    var fib_index26:\
    \ Int = 0\n    var fib_index27: Int = 0\n    var fib_index28: Int = 0\n    var\
    \ fib_index29: Int = 0\n    var fib_index30: Int = 0\n    var fib_index31: Int\
    \ = 0\n    var fib_index32: Int = 0\n    var fib_index33: Int = 0\n    var fib_index34:\
    \ Int = 0\n    var fib_index35: Int = 0\n    var fib_index36: Int = 0\n    var\
    \ fib_index37: Int = 0\n    var fib_index38: Int = 0\n    var fib_index39: Int\
    \ = 0\n    var fib_index40: Int = 0\n    var fib_index41: Int = 0\n    var fib_index42:\
    \ Int = 0\n    var fib_index43: Int = 0\n    var fib_index44: Int = 0\n    var\
    \ fib_index45: Int = 0\n    var fib_index46: Int = 0\n    var fib_index47: Int\
    \ = 0\n    var fib_index48: Int = 0\n    var fib_index49: Int = 0\n    var fib_index50:\
    \ Int = 0\n    var fib_index51: Int = 0\n    var fib_index52: Int = 0\n    var\
    \ fib_index53: Int = 0\n    var fib_index54: Int = 0\n    var fib_index55: Int\
    \ = 0\n    var fib_index56: Int = 0\n    var fib_index57: Int = 0\n    var fib_index58:\
    \ Int = 0\n    var fib_index59: Int = 0\n    var fib_index60: Int = 0\n    var\
    \ fib_index61: Int = 0\n    var fib_index62: Int = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpj4z7bhb_.swift:69:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpj4z7bhb_.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpj4z7bhb_.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmpj4z7bhb_.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:7:9: warning:\
    \ variable 'fib_index' was never used; consider replacing with '_' or removing\
    \ it\n    var fib_index: Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:8:9:\
    \ warning: variable 'fib_index2' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:9:9:\
    \ warning: variable 'fib_index3' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:10:9:\
    \ warning: variable 'fib_index4' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:11:9:\
    \ warning: variable 'fib_index5' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:12:9:\
    \ warning: variable 'fib_index6' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:13:9:\
    \ warning: variable 'fib_index7' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:14:9:\
    \ warning: variable 'fib_index8' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:15:9:\
    \ warning: variable 'fib_index9' was never used; co"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    for _ in 0..<n {\n        fib\
    \ += prime\n        if fib > 100 {\n            prime_found = true\n         \
    \   break\n        }\n        prime += 2\n    }\n    if prime_found {\n      \
    \  return fib\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmphsf4gd7u/tmphsf4gd7u.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba468725c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba46841cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba46841c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba46841b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphsf4gd7u                        0x00005647f3288338 <unavailable> + 4920

    5    libc.so.6                          0x00002ba468911460 __libc_start_main +
    245

    6    tmphsf4gd7u                        0x00005647f3287fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    for _ in 0..<n {\n        let tmp = a\n        a = b\n        b = tmp + b\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmprg61j8rf/tmprg61j8rf.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49ec2aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49ebfa1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49ebfa1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49ebfa07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg61j8rf                        0x0000555abd47f338 <unavailable> + 4920

    5    libc.so.6                          0x00002b49ec496460 __libc_start_main +
    245

    6    tmprg61j8rf                        0x0000555abd47efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    for _ in 0..<n {\n        fib\
    \ += prime\n        if fib > n {\n            prime_found = true\n           \
    \ break\n        }\n        if prime_found {\n            prime_found = false\n\
    \            prime = fib\n        }\n    }\n    return fib\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpufhwf9_i/tmpufhwf9_i.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f3a396c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f3a08db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f3a08d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f3a08c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpufhwf9_i                        0x0000561a31295338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9f3a582460 __libc_start_main +
    245

    6    tmpufhwf9_i                        0x0000561a31294fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var isPrime: Bool = false\n    var isFibonacci: Bool = false\n\
    \    var isPrimeFibonacci: Bool = false\n    var isPrimeFibonacciPrime: Bool =\
    \ false\n\n    if n <= 1 {\n        return n\n    }\n\n    if n == 2 {\n     \
    \   fib = 1\n        prime = 1\n        isPrime = true\n        isFibonacci =\
    \ true\n        isPrimeFibonacci = true\n        isPrimeFibonacciPrime = true\n\
    \    }\n\n    if n == 3 {\n        fib = 1\n        prime = 1\n        isPrime\
    \ = true\n        isFibonacci = true\n        isPrimeFibonacci = true\n      \
    \  isPrimeFibonacciPrime = true\n    }\n\n    if n == 4 {\n        fib = 1\n \
    \       prime = 1\n        isPrime = true\n        isFibonacci = true\n      \
    \  isPrimeFibonacci = true\n        isPrimeFibonacciPrime = true\n    }\n\n  \
    \  if n == 5 {\n        fib = 1\n        prime = 1\n        isPrime = true\n \
    \       isFibonacci = true\n        isPrimeFibonacci = true\n        isPrimeFibonacciPrime\
    \ = true\n    }\n\n    if n == 6 {\n        fib = 1\n        prime = 1\n     \
    \   isPrime = true\n        isFibonacci = true\n        isPrimeFibonacci = true\n\
    \        isPrimeFibonacciPrime = true\n    }\n\n    if n == 7 {\n        fib =\
    \ 1\n        prime = 1\n        isPrime = true\n        isFibonacci = true\n \
    \       isPrimeFibonacci = true\n        isPrimeFibonacciPrime = true\n    }\n\
    \n    if n == 8 {\n        fib = 1\n        prime = 1\n        isPrime = true\n\
    \        isFibonacci = true\n        isPrimeFibonacci = true\n        isPrimeFibonacciPrime\
    \ = true\n    }\n\n    if n == 9 {\n        fib = 1\n        prime = 1\n     \
    \   isPrime = true\n        isFibonacci = true\n        isPrimeFibonacci = true\n\
    \        isPrimeFibonacciPrime = true\n    }\n\n    if n == 10 {\n        fib\
    \ = 1\n        prime = 1\n        isPrime = true\n        isFibonacci = true\n\
    \        isPrimeFibonacci = true\n        isPrimeFibonacciPrime = true\n    }\n\
    \n    if n == 11 {\n        fib = 1\n        prime = 1\n        isPrime = true\n\
    \        isFibonacci = true\n        is\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmplse9gfzr.swift:102:1: error: expected type after 'is'\n}\n^\n/tmp/tmplse9gfzr.swift:126:38:\
    \ error: expected '}' at end of brace statement\nassert(prime_fib(n: 10) == 433494437)\n\
    \                                     ^\n/tmp/tmplse9gfzr.swift:3:31: note: to\
    \ match this opening '{'\nfunc prime_fib(n: Int) -> Int {\n                  \
    \            ^\n/tmp/tmplse9gfzr.swift:105:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var prime = 0\n    var fib = 0\n    for _ in\
    \ 0..<n {\n        prime = a + b\n        fib = a + b\n        a = b\n       \
    \ b = prime\n        if prime == 1 {\n            break\n        }\n        if\
    \ prime == 2 {\n            c = 1\n            break\n        }\n        if prime\
    \ == 3 {\n            d = 1\n            break\n        }\n        if prime ==\
    \ 5 {\n            c = 1\n            d = 1\n            break\n        }\n  \
    \      if prime == 7 {\n            d = 1\n            c = 1\n            break\n\
    \        }\n        if prime == 11 {\n            c = 1\n            d = 1\n \
    \           break\n        }\n        if prime == 13 {\n            d = 1\n  \
    \          c = 1\n            break\n        }\n        if prime == 17 {\n   \
    \         c = 1\n            d = 1\n            break\n        }\n        if prime\
    \ == 19 {\n            c = 1\n            d = 1\n            break\n        }\n\
    \        if prime == 231 {\n            c = 1\n            d = 1\n           \
    \ break\n        }\n        if prime == 293 {\n            c = 1\n           \
    \ d = 1\n            break\n        }\n        if prime == 3893 {\n          \
    \  c = 1\n            d = 1\n            break\n        }\n        if prime ==\
    \ 4861 {\n            c = 1\n            d = 1\n            break\n        }\n\
    \        if prime == 5143 {\n            c = 1\n            d = 1\n          \
    \  break\n        }\n        if prime == 5777 {\n            c = 1\n         \
    \   d = 1\n            break\n        }\n        if prime == 6373 {\n        \
    \    c = 1\n            d = 1\n            break\n        }\n        if prime\
    \ == 7097 {\n            c = 1\n            d = 1\n            break\n       \
    \ }\n        if prime == 7891 {\n            c = 1\n            d = 1\n      \
    \      break\n        }\n        if prime == 8591 {\n            c = 1\n     \
    \       d = 1\n            break\n        }\n        if prime == 9791 {\n    \
    \        c = 1\n            d = 1\n            break\n        }\n        if prime\
    \ == 10591 {\n            c = 1\n            d = 1\n            break\n      \
    \  }\n        if prime == 11991 {\n            c = 1\n            d = 1\n    \
    \        break\n        }\n        if prime == 13491 {\n            c = 1\n  \
    \          d = 1\n            break\n        }\n        if prime == 14991 {\n\
    \            c = 1\n            d = 1\n            break\n        }\n        if\
    \ prime == 15491 {\n            c = 1\n            d = 1\n            break\n\
    \        }\n        if prime == 16991 {\n            c = 1\n            d = 1\n\
    \            break\n        }\n        if prime == 17491 {\n            c = 1\n\
    \            d = 1\n            break\n        }\n        if prime == 18991 {\n\
    \            c = 1\n            d = 1\n            break\n        }\n        if\
    \ prime == 19491 {\n            c = 1\n            d = 1\n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8w5i_apz.swift:179:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp8w5i_apz.swift:10:20: note: to match this opening '{'\n    for _ in 0..<n\
    \ {\n                   ^\n/tmp/tmp8w5i_apz.swift:179:38: error: expected '}'\
    \ at end of brace statement\nassert(prime_fib(n: 10) == 433494437)\n         \
    \                            ^\n/tmp/tmp8w5i_apz.swift:3:31: note: to match this\
    \ opening '{'\nfunc prime_fib(n: Int) -> Int {\n                             \
    \ ^\n/tmp/tmp8w5i_apz.swift:158:6: error: operator functions can only be declared\
    \ at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n     ^\n/tmp/tmp8w5i_apz.swift:6:9: warning: variable 'c' was written\
    \ to, but never read\n    var c = 0\n        ^\n/tmp/tmp8w5i_apz.swift:7:9: warning:\
    \ variable 'd' was written to, but never read\n    var d = 0\n        ^\n/tmp/tmp8w5i_apz.swift:9:9:\
    \ warning: variable 'fib' was written to, but never read\n    var fib = 0\n  \
    \      ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var d = 1\n    var e = 1\n    var f = 0\n    var g = 1\n \
    \   var h = 1\n    var i = 1\n    var j = 1\n    var k = 1\n    var l = 1\n  \
    \  var m = 1\n    var n = 1\n    var o = 1\n    var p = 1\n    var q = 1\n   \
    \ var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n    var v = 1\n    var\
    \ w = 1\n    var x = 1\n    var y = 1\n    var z = 1\n    var a = 1\n    var b\
    \ = 1\n    var c = 1\n    var d = 1\n    var e = 1\n    var f = 1\n    var g =\
    \ 1\n    var h = 1\n    var i = 1\n    var j = 1\n    var k = 1\n    var l = 1\n\
    \    var m = 1\n    var n = 1\n    var o = 1\n    var p = 1\n    var q = 1\n \
    \   var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n    var v = 1\n  \
    \  var w = 1\n    var x = 1\n    var y = 1\n    var z = 1\n    var a = 1\n   \
    \ var b = 1\n    var c = 1\n    var d = 1\n    var e = 1\n    var f = 1\n    var\
    \ g = 1\n    var h = 1\n    var i = 1\n    var j = 1\n    var k = 1\n    var l\
    \ = 1\n    var m = 1\n    var n = 1\n    var o = 1\n    var p = 1\n    var q =\
    \ 1\n    var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n    var v = 1\n\
    \    var w = 1\n    var x = 1\n    var y = 1\n    var z = 1\n    var a = 1\n \
    \   var b = 1\n    var c = 1\n    var d = 1\n    var e = 1\n    var f = 1\n  \
    \  var g = 1\n    var h = 1\n    var i = 1\n    var j = 1\n    var k = 1\n   \
    \ var l = 1\n    var m = 1\n    var n = 1\n    var o = 1\n    var p = 1\n    var\
    \ q = 1\n    var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n    var v\
    \ = 1\n    var w = 1\n    var x = 1\n    var y = 1\n    var z = 1\n    var a =\
    \ 1\n    var b = 1\n    var c = 1\n    var d = 1\n    var e = 1\n    var f = 1\n\
    \    var g = 1\n    var h = 1\n    var i = 1\n    var j = 1\n    var k = 1\n \
    \   var l = 1\n    var m = 1\n    var n = 1\n    var o = 1\n    var p = 1\n  \
    \  var q = 1\n    var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n   \
    \ var v = 1\n    var w = 1\n    var x = 1\n    var y = 1\n    var \n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp6ev13y34.swift:133:8: error: expected pattern\n    var \n     \
    \  ^\n/tmp/tmp6ev13y34.swift:30:9: error: invalid redeclaration of 'a'\n    var\
    \ a = 1\n        ^\n/tmp/tmp6ev13y34.swift:4:9: note: 'a' previously declared\
    \ here\n    var a = 2\n        ^\n/tmp/tmp6ev13y34.swift:31:9: error: invalid\
    \ redeclaration of 'b'\n    var b = 1\n        ^\n/tmp/tmp6ev13y34.swift:5:9:\
    \ note: 'b' previously declared here\n    var b = 2\n        ^\n/tmp/tmp6ev13y34.swift:32:9:\
    \ error: invalid redeclaration of 'c'\n    var c = 1\n        ^\n/tmp/tmp6ev13y34.swift:6:9:\
    \ note: 'c' previously declared here\n    var c = 0\n        ^\n/tmp/tmp6ev13y34.swift:33:9:\
    \ error: invalid redeclaration of 'd'\n    var d = 1\n        ^\n/tmp/tmp6ev13y34.swift:7:9:\
    \ note: 'd' previously declared here\n    var d = 1\n        ^\n/tmp/tmp6ev13y34.swift:34:9:\
    \ error: invalid redeclaration of 'e'\n    var e = 1\n        ^\n/tmp/tmp6ev13y34.swift:8:9:\
    \ note: 'e' previously declared here\n    var e = 1\n        ^\n/tmp/tmp6ev13y34.swift:35:9:\
    \ error: invalid redeclaration of 'f'\n    var f = 1\n        ^\n/tmp/tmp6ev13y34.swift:9:9:\
    \ note: 'f' previously declared here\n    var f = 0\n        ^\n/tmp/tmp6ev13y34.swift:36:9:\
    \ error: invalid redeclaration of 'g'\n    var g = 1\n        ^\n/tmp/tmp6ev13y34.swift:10:9:\
    \ note: 'g' previously declared here\n    var g = 1\n        ^\n/tmp/tmp6ev13y34.swift:37:9:\
    \ error: invalid redeclaration of 'h'\n    var h = 1\n        ^\n/tmp/tmp6ev13y34.swift:11:9:\
    \ note: 'h' previously declared here\n    var h = 1\n        ^\n/tmp/tmp6ev13y34.swift:38:9:\
    \ error: invalid redeclaration of 'i'\n    var i = 1\n        ^\n/tmp/tmp6ev13y34.swift:12:9:\
    \ note: 'i' previously declared here\n    var i = 1\n        ^\n/tmp/tmp6ev13y34.swift:39:9:\
    \ error: invalid redeclaration of 'j'\n    var j = 1\n        ^\n/tmp/tmp6ev13y34.swift:13:9:\
    \ note: 'j' previously declared here\n    var j = 1\n        ^\n/tmp/tmp6ev13y34.swift:40:9:\
    \ error: invalid redeclaration of 'k'\n    var k = 1\n        ^\n/tmp/tmp6ev13y34.swift:14:9:\
    \ note: 'k' previously declared here\n    var k = 1\n        ^\n/tmp/tmp6ev13y34.swift:41:9:\
    \ error:"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    var fib = [Int]()\n    fib.append(0)\n    fib.append(1)\n    for\
    \ _ in 1...n {\n        fib.append(fib[fib.count - 2] + fib[fib.count - 1])\n\
    \    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp6ldv67qm/tmp6ldv67qm.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64e7818c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64e750fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64e750f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64e750e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ldv67qm                        0x0000560ca579c4e8 <unavailable> + 5352

    5    libc.so.6                          0x00002b64e7a04460 __libc_start_main +
    245

    6    tmp6ldv67qm                        0x0000560ca579c199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf96cch6g.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpf96cch6g.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpf96cch6g.swift:16:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpf96cch6g.swift:16:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    var d = 1\n    var prime = 1\n    var fib = 1\n    for _ in\
    \ 0..<n {\n        fib += a\n        if fib > n {\n            break\n       \
    \ }\n        prime = 0\n        if fib > n {\n            break\n        }\n \
    \       prime = 1\n        if fib > n {\n            break\n        }\n      \
    \  prime = 1\n        if fib > n {\n            break\n        }\n        prime\
    \ = 1\n        if fib > n {\n            break\n        }\n        prime = 1\n\
    \        if fib > n {\n            break\n        }\n        prime = 1\n     \
    \   if fib > n {\n            break\n        }\n        prime = 1\n        if\
    \ fib > n {\n            break\n        }\n        prime = 1\n        if fib >\
    \ n {\n            break\n        }\n        prime = 1\n        if fib > n {\n\
    \            break\n        }\n        prime = 1\n        if fib > n {\n     \
    \       break\n        }\n        prime = 1\n        if fib > n {\n          \
    \  break\n        }\n        prime = 1\n        if fib > n {\n            break\n\
    \        }\n        prime = 1\n        if fib > n {\n            break\n     \
    \   }\n        prime = 1\n        if fib > n {\n            break\n        }\n\
    \        prime = 1\n        if fib > n {\n            break\n        }\n     \
    \   prime = 1\n        if fib > n {\n            break\n        }\n        prime\
    \ = 1\n        if fib > n {\n            break\n        }\n        prime = 1\n\
    \        if fib > n {\n            break\n        }\n        prime = 1\n     \
    \   if fib > n {\n            break\n        }\n        prime = 1\n        if\
    \ fib > n {\n            break\n        }\n        prime = 1\n        if fib >\
    \ n {\n            break\n        }\n        prime = 1\n        if fib > n {\n\
    \            break\n        }\n        prime = 1\n        if fib > n {\n     \
    \       break\n        }\n        prime = 1\n        if fib > n {\n          \
    \  break\n        }\n        prime = 1\n        if fib > n {\n            break\n\
    \        }\n        prime = 1\n        if fib > n {\n            break\n     \
    \   }\n        prime = 1\n        if fib > n {\n            break\n        }\n\
    \        prime = 1\n        if fib > n {\n            break\n        }\n     \
    \   prime = 1\n        if fib > n {\n            break\n        }\n        prime\
    \ = 1\n        if fib > n {\n            break\n        }\n        prime = 1\n\
    \        if fib > n {\n            break\n        }\n        prime = 1\n     \
    \   if fib > n {\n            break\n        }\n        prime = 1\n        if\
    \ fib > n {\n            break\n        }\n        prime = 1\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp20xoj5j6.swift:172:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp20xoj5j6.swift:3:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmp20xoj5j6.swift:151:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n/tmp/tmp20xoj5j6.swift:4:9:\
    \ warning: variable 'a' was never mutated; consider changing to 'let' constant\n\
    \    var a = 2\n    ~~~ ^\n    let\n/tmp/tmp20xoj5j6.swift:5:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 1\n    ~~~~^\n    _\n/tmp/tmp20xoj5j6.swift:6:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 1\n    ~~~~^\n    _\n/tmp/tmp20xoj5j6.swift:7:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 1\n    ~~~~^\n    _\n/tmp/tmp20xoj5j6.swift:8:9:\
    \ warning: variable 'prime' was written to, but never read\n    var prime = 1\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n\n    if n % 2 == 0 {\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2)\n    }\n\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp2zlqq4j2.swift:9:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmp2zlqq4j2.swift:9:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmp2zlqq4j2.swift:12:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n       \
    \              ^\n                     n: \n/tmp/tmp2zlqq4j2.swift:12:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpd068kzw6.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpd068kzw6.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpd068kzw6.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpd068kzw6.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpd068kzw6.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpd068kzw6.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3)\n                     ^\n                     n: \n/tmp/tmpd068kzw6.swift:19:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n                                        ^\n       \
    \                                 n: \n/tmp/tmpd068kzw6.swift:19:60: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\
    \ + prime_fib(n - 3)\n                                                       \
    \    ^\n                                                           n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    var d = 1\n    var prime_number = 0\n    for _ in 0..<n {\n\
    \        prime_number = a + b\n        a = b\n        b = c\n        c = d\n \
    \       d = prime_number\n    }\n    return prime_number\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmppaw916_9/tmppaw916_9.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af92b0eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af92ade1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af92ade1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af92ade07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppaw916_9                        0x0000559467b31338 <unavailable> + 4920

    5    libc.so.6                          0x00002af92b2d6460 __libc_start_main +
    245

    6    tmppaw916_9                        0x0000559467b30fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var prime_fib_number = 0\n    for _ in 0..<n {\n        c\
    \ = a + b\n        a = b\n        b = c\n        if b == c {\n            prime_fib_number\
    \ += 1\n        }\n    }\n    return prime_fib_number\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpgmw2zif7/tmpgmw2zif7.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a9a3b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a9a0aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a9a0ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a9a0ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgmw2zif7                        0x000055bc756cc338 <unavailable> + 4920

    5    libc.so.6                          0x00002b7a9a5a3460 __libc_start_main +
    245

    6    tmpgmw2zif7                        0x000055bc756cbfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    \n    var a = 2\n    var b = 1\n    \n    for _ in 0..<n {\n \
    \       let c = a + b\n        a = b\n        b = c\n    }\n    \n    return b\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpulwmt8fz/tmpulwmt8fz.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1672a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b167276bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b167276b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b167276a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpulwmt8fz                        0x00005593359c6338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1672c60460 __libc_start_main +
    245

    6    tmpulwmt8fz                        0x00005593359c5fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime2: Int = 0\n    var prime3: Int = 0\n    var prime4:\
    \ Int = 0\n    var prime5: Int = 0\n    var prime6: Int = 0\n    var prime7: Int\
    \ = 0\n    var prime8: Int = 0\n    var prime9: Int = 0\n    var prime10: Int\
    \ = 0\n    var prime11: Int = 0\n    var prime12: Int = 0\n    var prime13: Int\
    \ = 0\n    var prime14: Int = 0\n    var prime15: Int = 0\n    var prime16: Int\
    \ = 0\n    var prime17: Int = 0\n    var prime18: Int = 0\n    var prime19: Int\
    \ = 0\n    var prime20: Int = 0\n    var prime21: Int = 0\n    var prime22: Int\
    \ = 0\n    var prime23: Int = 0\n    var prime24: Int = 0\n    var prime25: Int\
    \ = 0\n    var prime26: Int = 0\n    var prime27: Int = 0\n    var prime28: Int\
    \ = 0\n    var prime29: Int = 0\n    var prime30: Int = 0\n    var prime31: Int\
    \ = 0\n    var prime32: Int = 0\n    var prime33: Int = 0\n    var prime34: Int\
    \ = 0\n    var prime35: Int = 0\n    var prime36: Int = 0\n    var prime37: Int\
    \ = 0\n    var prime38: Int = 0\n    var prime39: Int = 0\n    var prime40: Int\
    \ = 0\n    var prime41: Int = 0\n    var prime42: Int = 0\n    var prime43: Int\
    \ = 0\n    var prime44: Int = 0\n    var prime45: Int = 0\n    var prime46: Int\
    \ = 0\n    var prime47: Int = 0\n    var prime48: Int = 0\n    var prime49: Int\
    \ = 0\n    var prime50: Int = 0\n    var prime51: Int = 0\n    var prime52: Int\
    \ = 0\n    var prime53: Int = 0\n    var prime54: Int = 0\n    var prime55: Int\
    \ = 0\n    var prime56: Int = 0\n    var prime57: Int = 0\n    var prime58: Int\
    \ = 0\n    var prime59: Int = 0\n    var prime60: Int = 0\n    var prime61: Int\
    \ = 0\n    var prime62: Int = 0\n    var prime63: Int = 0\n    var prime64: Int\
    \ = 0\n    var prime65: Int = 0\n    var prime66: Int = 0\n    var prime67: Int\
    \ = 0\n    var prime68: Int = 0\n    var prime69: Int = 0\n    var prime70: Int\
    \ = 0\n    var prime71: Int = 0\n    var prime72: Int = 0\n    var prime73: Int\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf50e_604.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpf50e_604.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmpf50e_604.swift:6:9: warning: variable 'prime2' was never used;\
    \ consider replacing with '_' or removing it\n    var prime2: Int = 0\n      \
    \  ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:7:9: warning: variable 'prime3' was\
    \ never used; consider replacing with '_' or removing it\n    var prime3: Int\
    \ = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:8:9: warning: variable\
    \ 'prime4' was never used; consider replacing with '_' or removing it\n    var\
    \ prime4: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:9:9: warning:\
    \ variable 'prime5' was never used; consider replacing with '_' or removing it\n\
    \    var prime5: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:10:9:\
    \ warning: variable 'prime6' was never used; consider replacing with '_' or removing\
    \ it\n    var prime6: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:11:9:\
    \ warning: variable 'prime7' was never used; consider replacing with '_' or removing\
    \ it\n    var prime7: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:12:9:\
    \ warning: variable 'prime8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime8: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:13:9:\
    \ warning: variable 'prime9' was never used; consider replacing with '_' or removing\
    \ it\n    var prime9: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:14:9:\
    \ warning: variable 'prime10' was never used; consider replacing with '_' or removing\
    \ it\n    var prime10: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpf50e_604.swift:15:9:\
    \ warning: variable 'prime11' was never used; consider replacing with '_' or removing\
    \ it\n    var prime11: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpf50e_604.swift:16:9:\
    \ warning: variable 'prime12' was never used; consider replacing "
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpl7nanp6r.swift:8:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpl7nanp6r.swift:8:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpl7nanp6r.swift:10:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpl7nanp6r.swift:10:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var d = 0\n    var prime = 0\n\n    for _ in 0..<n {\n   \
    \     c = a + b\n        d = b\n        a = b\n        b = c\n        if b ==\
    \ c {\n            prime = 1\n            break\n        }\n    }\n    return\
    \ prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp4qvas6qv/tmp4qvas6qv.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6583aa7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b658379eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b658379e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b658379d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4qvas6qv                        0x000055a65baa5338 <unavailable> + 4920

    5    libc.so.6                          0x00002b6583c93460 __libc_start_main +
    245

    6    tmp4qvas6qv                        0x000055a65baa4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    for _ in 0..<n {\n        fib\
    \ += prime\n        if fib > 1000 {\n            prime_found = true\n        \
    \    break\n        }\n        prime = fib\n    }\n    if prime_found {\n    \
    \    return fib\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpfmvlylae/tmpfmvlylae.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c09532c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c09229b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c09229988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c092287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfmvlylae                        0x0000561534655338 <unavailable> + 4920

    5    libc.so.6                          0x00002b9c0971e460 __libc_start_main +
    245

    6    tmpfmvlylae                        0x0000561534654fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    for _ in 0..<n {\n        let tmp = a\n        a = b\n        b = tmp + b\n\
    \    }\n    return a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmprg61j8rf/tmprg61j8rf.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b49ec2aac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b49ebfa1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b49ebfa1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b49ebfa07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg61j8rf                        0x0000555abd47f338 <unavailable> + 4920

    5    libc.so.6                          0x00002b49ec496460 __libc_start_main +
    245

    6    tmprg61j8rf                        0x0000555abd47efe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbo99tde3.swift:8:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpbo99tde3.swift:8:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpbo99tde3.swift:10:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n       \
    \              ^\n                     n: \n/tmp/tmpbo99tde3.swift:10:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 1\n    var prime = 0\n    var fib = 0\n    var n =\
    \ 0\n\n    for _ in 0..<n {\n        prime = 0\n        fib = 0\n        n = a\
    \ + b\n        a = b\n        b = c\n        c = d\n        d = n\n        if\
    \ n == 2 {\n            prime = 1\n        }\n        if n == 1 {\n          \
    \  prime = 0\n        }\n        if n == 0 {\n            prime = 1\n        }\n\
    \        if n == -1 {\n            prime = 1\n        }\n        if n == -2 {\n\
    \            prime = 1\n        }\n        if n == -3 {\n            prime = 1\n\
    \        }\n        if n == -4 {\n            prime = 1\n        }\n        if\
    \ n == -5 {\n            prime = 1\n        }\n        if n == -6 {\n        \
    \    prime = 1\n        }\n        if n == -7 {\n            prime = 1\n     \
    \   }\n        if n == -8 {\n            prime = 1\n        }\n        if n ==\
    \ -9 {\n            prime = 1\n        }\n        if n == -10 {\n            prime\
    \ = 1\n        }\n        if n == -11 {\n            prime = 1\n        }\n  \
    \      if n == -12 {\n            prime = 1\n        }\n        if n == -13 {\n\
    \            prime = 1\n        }\n        if n == -14 {\n            prime =\
    \ 1\n        }\n        if n == -15 {\n            prime = 1\n        }\n    \
    \    if n == -16 {\n            prime = 1\n        }\n        if n == -17 {\n\
    \            prime = 1\n        }\n        if n == -18 {\n            prime =\
    \ 1\n        }\n        if n == -19 {\n            prime = 1\n        }\n    \
    \    if n == -20 {\n            prime = 1\n        }\n        if n == -21 {\n\
    \            prime = 1\n        }\n        if n == -22 {\n            prime =\
    \ 1\n        }\n        if n == -23 {\n            prime = 1\n        }\n    \
    \    if n == -24 {\n            prime = 1\n        }\n        if n == -25 {\n\
    \            prime = 1\n        }\n        if n == -26 {\n            prime =\
    \ 1\n        }\n        if n == -27 {\n            prime = 1\n        }\n    \
    \    if n == -28 {\n            prime = 1\n        }\n        if n == -29 {\n\
    \            prime = 1\n        }\n        if n == -30 {\n            prime =\
    \ 1\n        }\n        if n == -31 {\n            prime = 1\n        }\n    \
    \    if n == -32 {\n            prime = 1\n        }\n        if n == -33 {\n\
    \            prime = 1\n        }\n        if n == -34 {\n            prime =\
    \ 1\n        }\n        if n == -35 {\n            prime = 1\n        }\n    \
    \    if n == -36 {\n            prime = 1\n        }\n        if n == -37 {\n\
    \            prime = 1\n        }\n        if n == -\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmprynii7pd.swift:140:17: error: unary operator cannot be separated\
    \ from its operand\n        if n == -\n                ^\n                 \n\
    /tmp/tmprynii7pd.swift:141:1: error: expected expression after operator\n}\n^\n\
    /tmp/tmprynii7pd.swift:165:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmprynii7pd.swift:3:31: note: to match this opening '{'\nfunc prime_fib(n:\
    \ Int) -> Int {\n                              ^\n/tmp/tmprynii7pd.swift:144:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 1\n    for _ in 0..<n {\n        c = a + b\n     \
    \   a = b\n        b = c\n        if c % 2 == 0 {\n            d = c\n       \
    \ }\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpa48q5dbi/tmpa48q5dbi.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5eeba4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5eeb742b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5eeb742988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5eeb7417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa48q5dbi                        0x000055f43962d338 <unavailable> + 4920

    5    libc.so.6                          0x00002b5eebc37460 __libc_start_main +
    245

    6    tmpa48q5dbi                        0x000055f43962cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpbo99tde3.swift:8:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpbo99tde3.swift:8:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpbo99tde3.swift:10:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n       \
    \              ^\n                     n: \n/tmp/tmpbo99tde3.swift:10:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib_number = 0\n    var\
    \ prime_number = 0\n    var prime_flag = false\n    for _ in 0..<n {\n       \
    \ fib_number += 2\n        if fib_number % 2 == 0 {\n            prime_flag =\
    \ true\n        }\n        if prime_flag == true {\n            prime_number +=\
    \ 2\n        }\n    }\n    return prime_number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp18fhta6m/tmp18fhta6m.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af983d46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af983a3db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af983a3d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af983a3c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp18fhta6m                        0x00005571860613b3 <unavailable> + 5043

    5    libc.so.6                          0x00002af983f32460 __libc_start_main +
    245

    6    tmp18fhta6m                        0x0000557186060fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpd068kzw6.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpd068kzw6.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpd068kzw6.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpd068kzw6.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpd068kzw6.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpd068kzw6.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3)\n                     ^\n                     n: \n/tmp/tmpd068kzw6.swift:19:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n                                        ^\n       \
    \                                 n: \n/tmp/tmpd068kzw6.swift:19:60: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\
    \ + prime_fib(n - 3)\n                                                       \
    \    ^\n                                                           n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpd068kzw6.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpd068kzw6.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpd068kzw6.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpd068kzw6.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpd068kzw6.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpd068kzw6.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3)\n                     ^\n                     n: \n/tmp/tmpd068kzw6.swift:19:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n                                        ^\n       \
    \                                 n: \n/tmp/tmpd068kzw6.swift:19:60: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\
    \ + prime_fib(n - 3)\n                                                       \
    \    ^\n                                                           n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    for _ in 0..<n {\n        c = a + b\n     \
    \   d = b\n        a = b\n        b = c\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpxfj42kxc/tmpxfj42kxc.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af502ba2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af502899b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af502899988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5028987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxfj42kxc                        0x0000564314e45338 <unavailable> + 4920

    5    libc.so.6                          0x00002af502d8e460 __libc_start_main +
    245

    6    tmpxfj42kxc                        0x0000564314e44fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib_num: Int = 0\n   \
    \ var prime_num: Int = 0\n    var prime_flag: Bool = false\n    var prime_flag2:\
    \ Bool = false\n    var prime_flag3: Bool = false\n    var prime_flag4: Bool =\
    \ false\n    var prime_flag5: Bool = false\n    var prime_flag6: Bool = false\n\
    \    var prime_flag7: Bool = false\n    var prime_flag8: Bool = false\n    var\
    \ prime_flag9: Bool = false\n    var prime_flag10: Bool = false\n    var prime_flag11:\
    \ Bool = false\n    var prime_flag12: Bool = false\n    var prime_flag13: Bool\
    \ = false\n    var prime_flag14: Bool = false\n    var prime_flag15: Bool = false\n\
    \    var prime_flag16: Bool = false\n    var prime_flag17: Bool = false\n    var\
    \ prime_flag18: Bool = false\n    var prime_flag19: Bool = false\n    var prime_flag20:\
    \ Bool = false\n    var prime_flag21: Bool = false\n    var prime_flag22: Bool\
    \ = false\n    var prime_flag23: Bool = false\n    var prime_flag24: Bool = false\n\
    \    var prime_flag25: Bool = false\n    var prime_flag26: Bool = false\n    var\
    \ prime_flag27: Bool = false\n    var prime_flag28: Bool = false\n    var prime_flag29:\
    \ Bool = false\n    var prime_flag30: Bool = false\n    var prime_flag31: Bool\
    \ = false\n    var prime_flag32: Bool = false\n    var prime_flag33: Bool = false\n\
    \    var prime_flag34: Bool = false\n    var prime_flag35: Bool = false\n    var\
    \ prime_flag36: Bool = false\n    var prime_flag37: Bool = false\n    var prime_flag38:\
    \ Bool = false\n    var prime_flag39: Bool = false\n    var prime_flag40: Bool\
    \ = false\n    var prime_flag41: Bool = false\n    var prime_flag42: Bool = false\n\
    \    var prime_flag43: Bool = false\n    var prime_flag44: Bool = false\n    var\
    \ prime_flag45: Bool = false\n    var prime_flag46: Bool = false\n    var prime_flag47:\
    \ Bool = false\n    var prime_flag48: Bool = false\n    var prime_flag49: Bool\
    \ = false\n    var prime_flag50: Bool = false\n    var prime_flag51: Bool = false\n\
    \    var prime_flag52: Bool = false\n    var prime_flag53: Bool = false\n    var\
    \ prime_flag54: Bool = false\n    var prime_flag55: Bool = false\n    var prime_flag56:\
    \ Bool\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpiwu2mb22.swift:4:9: warning: variable 'fib_num' was never used;\
    \ consider replacing with '_' or removing it\n    var fib_num: Int = 0\n     \
    \   ^~~~~~~\n        _\n/tmp/tmpiwu2mb22.swift:5:9: warning: variable 'prime_num'\
    \ was never used; consider replacing with '_' or removing it\n    var prime_num:\
    \ Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmpiwu2mb22.swift:6:9: warning:\
    \ variable 'prime_flag' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_flag: Bool = false\n        ^~~~~~~~~~\n        _\n/tmp/tmpiwu2mb22.swift:7:9:\
    \ warning: variable 'prime_flag2' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_flag2: Bool = false\n        ^~~~~~~~~~~\n   \
    \     _\n/tmp/tmpiwu2mb22.swift:8:9: warning: variable 'prime_flag3' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_flag3: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpiwu2mb22.swift:9:9: warning:\
    \ variable 'prime_flag4' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_flag4: Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpiwu2mb22.swift:10:9:\
    \ warning: variable 'prime_flag5' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_flag5: Bool = false\n        ^~~~~~~~~~~\n   \
    \     _\n/tmp/tmpiwu2mb22.swift:11:9: warning: variable 'prime_flag6' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_flag6: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpiwu2mb22.swift:12:9: warning:\
    \ variable 'prime_flag7' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_flag7: Bool = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpiwu2mb22.swift:13:9:\
    \ warning: variable 'prime_flag8' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_flag8: Bool = false\n        ^~~~~~~~~~~\n   \
    \     _\n/tmp/tmpiwu2mb22.swift:14:9: warning: variable 'prime_flag9' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_flag9: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpiwu2mb22.swift:15:9: warning:\
    \ variable 'prime_flag10'"
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    var d = 1\n    var prime = 0\n    var fib = 0\n    for _ in\
    \ 0..<n {\n        prime = 1\n        fib = 0\n        if a > b {\n          \
    \  prime = 0\n        } else {\n            fib = 1\n        }\n        if a >\
    \ c {\n            prime = 0\n        } else {\n            fib = 1\n        }\n\
    \        if b > c {\n            prime = 0\n        } else {\n            fib\
    \ = 1\n        }\n        if c > d {\n            prime = 0\n        } else {\n\
    \            fib = 1\n        }\n        if prime == 1 {\n            prime =\
    \ 1\n        } else {\n            prime = 0\n        }\n        if fib == 1 {\n\
    \            fib = 1\n        } else {\n            fib = 0\n        }\n     \
    \   prime = prime * fib\n        a = b\n        b = c\n        c = d\n       \
    \ d = prime\n    }\n    return d\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp0p6sil4l/tmp0p6sil4l.swift:65: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17dc5b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17dc2adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17dc2ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17dc2ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0p6sil4l                        0x00005595cae02338 <unavailable> + 4920

    5    libc.so.6                          0x00002b17dc7a2460 __libc_start_main +
    245

    6    tmp0p6sil4l                        0x00005595cae01fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var fib_index = 0\n    var\
    \ fib_index2 = 0\n    var fib_index3 = 0\n    var fib_index4 = 0\n    var fib_index5\
    \ = 0\n    var fib_index6 = 0\n    var fib_index7 = 0\n    var fib_index8 = 0\n\
    \    var fib_index9 = 0\n    var fib_index10 = 0\n    var fib_index11 = 0\n  \
    \  var fib_index12 = 0\n    var fib_index13 = 0\n    var fib_index14 = 0\n   \
    \ var fib_index15 = 0\n    var fib_index16 = 0\n    var fib_index17 = 0\n    var\
    \ fib_index18 = 0\n    var fib_index19 = 0\n    var fib_index20 = 0\n    var fib_index21\
    \ = 0\n    var fib_index22 = 0\n    var fib_index23 = 0\n    var fib_index24 =\
    \ 0\n    var fib_index25 = 0\n    var fib_index26 = 0\n    var fib_index27 = 0\n\
    \    var fib_index28 = 0\n    var fib_index29 = 0\n    var fib_index30 = 0\n \
    \   var fib_index31 = 0\n    var fib_index32 = 0\n    var fib_index33 = 0\n  \
    \  var fib_index34 = 0\n    var fib_index35 = 0\n    var fib_index36 = 0\n   \
    \ var fib_index37 = 0\n    var fib_index38 = 0\n    var fib_index39 = 0\n    var\
    \ fib_index40 = 0\n    var fib_index41 = 0\n    var fib_index42 = 0\n    var fib_index43\
    \ = 0\n    var fib_index44 = 0\n    var fib_index45 = 0\n    var fib_index46 =\
    \ 0\n    var fib_index47 = 0\n    var fib_index48 = 0\n    var fib_index49 = 0\n\
    \    var fib_index50 = 0\n    var fib_index51 = 0\n    var fib_index52 = 0\n \
    \   var fib_index53 = 0\n    var fib_index54 = 0\n    var fib_index55 = 0\n  \
    \  var fib_index56 = 0\n    var fib_index57 = 0\n    var fib_index58 = 0\n   \
    \ var fib_index59 = 0\n    var fib_index60 = 0\n    var fib_index61 = 0\n    var\
    \ fib_index62 = 0\n    var fib_index63 = 0\n    var fib_index64 = 0\n    var fib_index65\
    \ = 0\n    var fib_index66 = 0\n    var fib_index67 = 0\n    var fib_index68 =\
    \ 0\n    var fib_index69 = 0\n    var fib_index70 = 0\n    var fib_index71 = 0\n\
    \    var fib_index72 = 0\n    var fib_index73 = 0\n    var fib_index74 = 0\n \
    \   var fib_index75 = 0\n    var fib_index76 = 0\n    var fib_index77 = 0\n  \
    \  var fib_index78 = 0\n    var fib_index79 = 0\n    var fib_index80 = 0\n   \
    \ var fib_index81 = 0\n    var fib_index82 = 0\n    var fib_index\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmprynw981z.swift:89:9: error: type annotation missing in pattern\n\
    \    var fib_index\n        ^\n"
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpqiuz6txe.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpqiuz6txe.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpqiuz6txe.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpqiuz6txe.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpqiuz6txe.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpqiuz6txe.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpqiuz6txe.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n % 2\
    \ == 0 {\n        return prime_fib(n - 1) + prime_fib(n - 2)\n    }\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmphw_5jsmh.swift:11:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmphw_5jsmh.swift:11:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmphw_5jsmh.swift:13:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmphw_5jsmh.swift:13:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    var d = 1\n    var prime_number = 0\n    for _ in 0..<n {\n\
    \        if a > b {\n            prime_number = c\n        } else {\n        \
    \    prime_number = d\n        }\n        a = b\n        b = c\n        c = d\n\
    \        d = prime_number\n    }\n    return prime_number\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpyws2chen/tmpyws2chen.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adcfedfbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adcfeaf2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adcfeaf2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adcfeaf17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyws2chen                        0x0000558925ad9338 <unavailable> + 4920

    5    libc.so.6                          0x00002adcfefe7460 __libc_start_main +
    245

    6    tmpyws2chen                        0x0000558925ad8fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpd068kzw6.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpd068kzw6.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpd068kzw6.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpd068kzw6.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpd068kzw6.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpd068kzw6.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3)\n                     ^\n                     n: \n/tmp/tmpd068kzw6.swift:19:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n                                        ^\n       \
    \                                 n: \n/tmp/tmpd068kzw6.swift:19:60: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\
    \ + prime_fib(n - 3)\n                                                       \
    \    ^\n                                                           n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var fib2: Int = 0\n \
    \   var fib2_found: Bool = false\n    var fib3: Int = 0\n    var fib3_found: Bool\
    \ = false\n    var fib4: Int = 0\n    var fib4_found: Bool = false\n    var fib5:\
    \ Int = 0\n    var fib5_found: Bool = false\n    var fib6: Int = 0\n    var fib6_found:\
    \ Bool = false\n    var fib7: Int = 0\n    var fib7_found: Bool = false\n    var\
    \ fib8: Int = 0\n    var fib8_found: Bool = false\n    var fib9: Int = 0\n   \
    \ var fib9_found: Bool = false\n    var fib10: Int = 0\n    var fib10_found: Bool\
    \ = false\n    var fib11: Int = 0\n    var fib11_found: Bool = false\n    var\
    \ fib12: Int = 0\n    var fib12_found: Bool = false\n    var fib13: Int = 0\n\
    \    var fib13_found: Bool = false\n    var fib14: Int = 0\n    var fib14_found:\
    \ Bool = false\n    var fib15: Int = 0\n    var fib15_found: Bool = false\n  \
    \  var fib16: Int = 0\n    var fib16_found: Bool = false\n    var fib17: Int =\
    \ 0\n    var fib17_found: Bool = false\n    var fib18: Int = 0\n    var fib18_found:\
    \ Bool = false\n    var fib19: Int = 0\n    var fib19_found: Bool = false\n  \
    \  var fib20: Int = 0\n    var fib20_found: Bool = false\n    var fib21: Int =\
    \ 0\n    var fib21_found: Bool = false\n    var fib22: Int = 0\n    var fib22_found:\
    \ Bool = false\n    var fib23: Int = 0\n    var fib23_found: Bool = false\n  \
    \  var fib24: Int = 0\n    var fib24_found: Bool = false\n    var fib25: Int =\
    \ 0\n    var fib25_found: Bool = false\n    var fib26: Int = 0\n    var fib26_found:\
    \ Bool = false\n    var fib27: Int = 0\n    var fib27_found: Bool = false\n  \
    \  var fib28: Int = 0\n    var fib28_found: Bool = false\n    var fib29: Int =\
    \ 0\n    var fib29_found: Bool = false\n    var fib30: Int = 0\n    var fib30_found:\
    \ Bool = false\n    var fib31: Int = 0\n    var fib31_found: Bool = false\n  \
    \  var fib32: Int = 0\n    var fib32_found: Bool = false\n    var fib33: Int =\
    \ 0\n    var fib33_found: Bool = false\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpm7ijp72c.swift:71:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpm7ijp72c.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpm7ijp72c.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmpm7ijp72c.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpm7ijp72c.swift:7:9: warning:\
    \ variable 'fib2' was never used; consider replacing with '_' or removing it\n\
    \    var fib2: Int = 0\n        ^~~~\n        _\n/tmp/tmpm7ijp72c.swift:8:9: warning:\
    \ variable 'fib2_found' was never used; consider replacing with '_' or removing\
    \ it\n    var fib2_found: Bool = false\n        ^~~~~~~~~~\n        _\n/tmp/tmpm7ijp72c.swift:9:9:\
    \ warning: variable 'fib3' was never used; consider replacing with '_' or removing\
    \ it\n    var fib3: Int = 0\n        ^~~~\n        _\n/tmp/tmpm7ijp72c.swift:10:9:\
    \ warning: variable 'fib3_found' was never used; consider replacing with '_' or\
    \ removing it\n    var fib3_found: Bool = false\n        ^~~~~~~~~~\n        _\n\
    /tmp/tmpm7ijp72c.swift:11:9: warning: variable 'fib4' was never used; consider\
    \ replacing with '_' or removing it\n    var fib4: Int = 0\n        ^~~~\n   \
    \     _\n/tmp/tmpm7ijp72c.swift:12:9: warning: variable 'fib4_found' was never\
    \ used; consider replacing with '_' or removing it\n    var fib4_found: Bool =\
    \ false\n        ^~~~~~~~~~\n        _\n/tmp/tmpm7ijp72c.swift:13:9: warning:\
    \ variable 'fib5' was never used; consider replacing with '_' or removing it\n\
    \    var fib5: Int = 0\n        ^~~~\n        _\n/tmp/tmpm7ijp72c.swift:14:9:\
    \ warning: variable 'fib5_found' was never used; consider replacing with '_' or\
    \ removing it\n    var fib5_found: Bool = false\n        ^~~~~~~~~~\n        _\n\
    /tmp/tmpm7ijp72c.swift:15:9: warning: variable 'fib6' was never used; consider\
    \ replacing with '_' or removing it\n    var fib6: "
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime2: Int = 0\n    var prime3: Int = 0\n    var prime4:\
    \ Int = 0\n    var prime5: Int = 0\n    var prime6: Int = 0\n    var prime7: Int\
    \ = 0\n    var prime8: Int = 0\n    var prime9: Int = 0\n    var prime10: Int\
    \ = 0\n    var prime11: Int = 0\n    var prime12: Int = 0\n    var prime13: Int\
    \ = 0\n    var prime14: Int = 0\n    var prime15: Int = 0\n    var prime16: Int\
    \ = 0\n    var prime17: Int = 0\n    var prime18: Int = 0\n    var prime19: Int\
    \ = 0\n    var prime20: Int = 0\n    var prime21: Int = 0\n    var prime22: Int\
    \ = 0\n    var prime23: Int = 0\n    var prime24: Int = 0\n    var prime25: Int\
    \ = 0\n    var prime26: Int = 0\n    var prime27: Int = 0\n    var prime28: Int\
    \ = 0\n    var prime29: Int = 0\n    var prime30: Int = 0\n    var prime31: Int\
    \ = 0\n    var prime32: Int = 0\n    var prime33: Int = 0\n    var prime34: Int\
    \ = 0\n    var prime35: Int = 0\n    var prime36: Int = 0\n    var prime37: Int\
    \ = 0\n    var prime38: Int = 0\n    var prime39: Int = 0\n    var prime40: Int\
    \ = 0\n    var prime41: Int = 0\n    var prime42: Int = 0\n    var prime43: Int\
    \ = 0\n    var prime44: Int = 0\n    var prime45: Int = 0\n    var prime46: Int\
    \ = 0\n    var prime47: Int = 0\n    var prime48: Int = 0\n    var prime49: Int\
    \ = 0\n    var prime50: Int = 0\n    var prime51: Int = 0\n    var prime52: Int\
    \ = 0\n    var prime53: Int = 0\n    var prime54: Int = 0\n    var prime55: Int\
    \ = 0\n    var prime56: Int = 0\n    var prime57: Int = 0\n    var prime58: Int\
    \ = 0\n    var prime59: Int = 0\n    var prime60: Int = 0\n    var prime61: Int\
    \ = 0\n    var prime62: Int = 0\n    var prime63: Int = 0\n    var prime64: Int\
    \ = 0\n    var prime65: Int = 0\n    var prime66: Int = 0\n    var prime67: Int\
    \ = 0\n    var prime68: Int = 0\n    var prime69: Int = 0\n    var prime70: Int\
    \ = 0\n    var prime71: Int = 0\n    var prime72: Int = 0\n    var prime73: Int\
    \ = 0\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpf50e_604.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpf50e_604.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmpf50e_604.swift:6:9: warning: variable 'prime2' was never used;\
    \ consider replacing with '_' or removing it\n    var prime2: Int = 0\n      \
    \  ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:7:9: warning: variable 'prime3' was\
    \ never used; consider replacing with '_' or removing it\n    var prime3: Int\
    \ = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:8:9: warning: variable\
    \ 'prime4' was never used; consider replacing with '_' or removing it\n    var\
    \ prime4: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:9:9: warning:\
    \ variable 'prime5' was never used; consider replacing with '_' or removing it\n\
    \    var prime5: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:10:9:\
    \ warning: variable 'prime6' was never used; consider replacing with '_' or removing\
    \ it\n    var prime6: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:11:9:\
    \ warning: variable 'prime7' was never used; consider replacing with '_' or removing\
    \ it\n    var prime7: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:12:9:\
    \ warning: variable 'prime8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime8: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:13:9:\
    \ warning: variable 'prime9' was never used; consider replacing with '_' or removing\
    \ it\n    var prime9: Int = 0\n        ^~~~~~\n        _\n/tmp/tmpf50e_604.swift:14:9:\
    \ warning: variable 'prime10' was never used; consider replacing with '_' or removing\
    \ it\n    var prime10: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpf50e_604.swift:15:9:\
    \ warning: variable 'prime11' was never used; consider replacing with '_' or removing\
    \ it\n    var prime11: Int = 0\n        ^~~~~~~\n        _\n/tmp/tmpf50e_604.swift:16:9:\
    \ warning: variable 'prime12' was never used; consider replacing "
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int =\
    \ 0\n    var fib_index2: Int = 0\n    var fib_index3: Int = 0\n    var fib_index4:\
    \ Int = 0\n    var fib_index5: Int = 0\n    var fib_index6: Int = 0\n    var fib_index7:\
    \ Int = 0\n    var fib_index8: Int = 0\n    var fib_index9: Int = 0\n    var fib_index10:\
    \ Int = 0\n    var fib_index11: Int = 0\n    var fib_index12: Int = 0\n    var\
    \ fib_index13: Int = 0\n    var fib_index14: Int = 0\n    var fib_index15: Int\
    \ = 0\n    var fib_index16: Int = 0\n    var fib_index17: Int = 0\n    var fib_index18:\
    \ Int = 0\n    var fib_index19: Int = 0\n    var fib_index20: Int = 0\n    var\
    \ fib_index21: Int = 0\n    var fib_index22: Int = 0\n    var fib_index23: Int\
    \ = 0\n    var fib_index24: Int = 0\n    var fib_index25: Int = 0\n    var fib_index26:\
    \ Int = 0\n    var fib_index27: Int = 0\n    var fib_index28: Int = 0\n    var\
    \ fib_index29: Int = 0\n    var fib_index30: Int = 0\n    var fib_index31: Int\
    \ = 0\n    var fib_index32: Int = 0\n    var fib_index33: Int = 0\n    var fib_index34:\
    \ Int = 0\n    var fib_index35: Int = 0\n    var fib_index36: Int = 0\n    var\
    \ fib_index37: Int = 0\n    var fib_index38: Int = 0\n    var fib_index39: Int\
    \ = 0\n    var fib_index40: Int = 0\n    var fib_index41: Int = 0\n    var fib_index42:\
    \ Int = 0\n    var fib_index43: Int = 0\n    var fib_index44: Int = 0\n    var\
    \ fib_index45: Int = 0\n    var fib_index46: Int = 0\n    var fib_index47: Int\
    \ = 0\n    var fib_index48: Int = 0\n    var fib_index49: Int = 0\n    var fib_index50:\
    \ Int = 0\n    var fib_index51: Int = 0\n    var fib_index52: Int = 0\n    var\
    \ fib_index53: Int = 0\n    var fib_index54: Int = 0\n    var fib_index55: Int\
    \ = 0\n    var fib_index56: Int = 0\n    var fib_index57: Int = 0\n    var fib_index58:\
    \ Int = 0\n    var fib_index59: Int = 0\n    var fib_index60: Int = 0\n    var\
    \ fib_index61: Int = 0\n    var fib_index62: Int = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpj4z7bhb_.swift:69:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpj4z7bhb_.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpj4z7bhb_.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmpj4z7bhb_.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:7:9: warning:\
    \ variable 'fib_index' was never used; consider replacing with '_' or removing\
    \ it\n    var fib_index: Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:8:9:\
    \ warning: variable 'fib_index2' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:9:9:\
    \ warning: variable 'fib_index3' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:10:9:\
    \ warning: variable 'fib_index4' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:11:9:\
    \ warning: variable 'fib_index5' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:12:9:\
    \ warning: variable 'fib_index6' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:13:9:\
    \ warning: variable 'fib_index7' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:14:9:\
    \ warning: variable 'fib_index8' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:15:9:\
    \ warning: variable 'fib_index9' was never used; co"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n <= 1 {\n        return\
    \ n\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpuwtdw_br.swift:7:22: error: missing argument label 'n:' in call\n\
    \    return prime_fib(n - 1) + prime_fib(n - 2)\n                     ^\n    \
    \                 n: \n/tmp/tmpuwtdw_br.swift:7:41: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \                           ^\n                                        n: \n"
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    for _ in 0..<n {\n  \
    \      fib += 2\n        if fib > n {\n            break\n        }\n        if\
    \ prime_found {\n            if fib == n {\n                return fib\n     \
    \       }\n            if fib == 2 * fib {\n                prime_found = false\n\
    \            }\n        } else {\n            if fib == n {\n                prime_found\
    \ = true\n                prime = fib\n            }\n        }\n    }\n    return\
    \ prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp8jz2ty6r/tmp8jz2ty6r.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01db672c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01db369b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01db369988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01db3687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8jz2ty6r                        0x000055af981e0338 <unavailable> + 4920

    5    libc.so.6                          0x00002b01db85e460 __libc_start_main +
    245

    6    tmp8jz2ty6r                        0x000055af981dffe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpdx9m4n5c/tmpdx9m4n5c.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8248d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8248a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8248a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8248a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdx9m4n5c                        0x0000557e5cccf338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8248f8b460 __libc_start_main +
    245

    6    tmpdx9m4n5c                        0x0000557e5cccefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for i := 2; i < n; i++ {\n        fib[i] = fib[i -\
    \ 1] + fib[i - 2]\n    }\n    return fib[n]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpxo10xilr.swift:7:12: error: expected type\n    for i := 2; i <\
    \ n; i++ {\n           ^\n            <#type#>\n/tmp/tmpxo10xilr.swift:7:12: error:\
    \ expected 'in' after for-each pattern\n    for i := 2; i < n; i++ {\n       \
    \    ^\n/tmp/tmpxo10xilr.swift:7:12: error: expected Sequence expression for for-each\
    \ loop\n    for i := 2; i < n; i++ {\n           ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = 2\n    var prime\
    \ = 1\n    for _ in 0..<n {\n        fib += prime\n        prime = fib\n    }\n\
    \    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmport315od/tmport315od.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c6cc1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c6c915b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c6c915988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c6c9147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmport315od                        0x0000557c6309a338 <unavailable> + 4920

    5    libc.so.6                          0x00002b2c6ce0a460 __libc_start_main +
    245

    6    tmport315od                        0x0000557c63099fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    for _ in 0..<n {\n        if b == c {\n            return\
    \ a\n        }\n        c += 2\n        a = b\n        b = c\n    }\n    return\
    \ a\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp669xbbyz/tmp669xbbyz.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a0c8a5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a0c59cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7a0c59c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7a0c59b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp669xbbyz                        0x000055a833d4c3b3 <unavailable> + 5043

    5    libc.so.6                          0x00002b7a0ca91460 __libc_start_main +
    245

    6    tmp669xbbyz                        0x000055a833d4bfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var isPrime: Bool = false\n    \n    if n == 0 {\n     \
    \   return 0\n    }\n    \n    if n == 1 {\n        return 1\n    }\n    \n  \
    \  if n == 2 {\n        return 2\n    }\n    \n    if n == 3 {\n        return\
    \ 3\n    }\n    \n    if n == 4 {\n        return 5\n    }\n    \n    if n ==\
    \ 5 {\n        return 8\n    }\n    \n    if n == 6 {\n        return 13\n   \
    \ }\n    \n    if n == 7 {\n        return 21\n    }\n    \n    if n == 8 {\n\
    \        return 34\n    }\n    \n    if n == 9 {\n        return 55\n    }\n \
    \   \n    if n == 10 {\n        return 89\n    }\n    \n    if n == 11 {\n   \
    \     return 144\n    }\n    \n    if n == 12 {\n        return 233\n    }\n \
    \   \n    if n == 13 {\n        return 377\n    }\n    \n    if n == 14 {\n  \
    \      return 610\n    }\n    \n    if n == 15 {\n        return 987\n    }\n\
    \    \n    if n == 16 {\n        return 1597\n    }\n    \n    if n == 17 {\n\
    \        return 2584\n    }\n    \n    if n == 18 {\n        return 4181\n   \
    \ }\n    \n    if n == 19 {\n        return 6765\n    }\n    \n    if n == 20\
    \ {\n        return 10946\n    }\n    \n    if n == 21 {\n        return 17711\n\
    \    }\n    \n    if n == 22 {\n        return 28657\n    }\n    \n    if n ==\
    \ 23 {\n        return 46368\n    }\n    \n    if n == 24 {\n        return 75025\n\
    \    }\n    \n    if n == 25 {\n        return 121393\n    }\n    \n    if n ==\
    \ 26 {\n        return 196418\n    }\n    \n    if n == 27 {\n        return 317811\n\
    \    }\n    \n    if n == 28 {\n        return 514229\n    }\n    \n    if n ==\
    \ 29 {\n        return 832040\n    }\n    \n    if n == 30 {\n        return 1261035\n\
    \    }\n    \n    if n == 31 {\n        return 1978643\n    }\n    \n    if n\
    \ == 32 {\n        return 3171469\n    }\n    \n    if n == 33 {\n        return\
    \ 514229\n    }\n    \n    if n == 34 {\n        return 832040\n    }\n    \n\
    \    if n == 35 {\n        return 1261035\n    }\n    \n    if n == 36 {\n   \
    \     return 1978643\n    }\n    \n    if n == 37 {\n        return 3171469\n\
    \    }\n    \n    if n == 38\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp7_dyp8zn.swift:160:15: error: expected '{' after 'if' condition\n\
    \    if n == 38\n              ^\n/tmp/tmp7_dyp8zn.swift:4:9: warning: variable\
    \ 'fib' was never used; consider replacing with '_' or removing it\n    var fib:\
    \ Int = 0\n        ^~~\n        _\n/tmp/tmp7_dyp8zn.swift:5:9: warning: variable\
    \ 'prime' was never used; consider replacing with '_' or removing it\n    var\
    \ prime: Int = 0\n        ^~~~~\n        _\n/tmp/tmp7_dyp8zn.swift:6:9: warning:\
    \ variable 'isPrime' was never used; consider replacing with '_' or removing it\n\
    \    var isPrime: Bool = false\n        ^~~~~~~\n        _\n"
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var d = 0\n    for _ in 0..<n {\n        c = a + b\n     \
    \   d = b\n        a = b\n        b = c\n    }\n    return c\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpm022ybor/tmpm022ybor.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8f4c390c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8f4c087b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8f4c087988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8f4c0867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm022ybor                        0x00005595570e2338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8f4c57c460 __libc_start_main +
    245

    6    tmpm022ybor                        0x00005595570e1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var n = 0\n    var prime = 0\n    var fib =\
    \ 0\n    var prime_fib = 0\n    var prime_fib2 = 0\n    var prime_fib3 = 0\n \
    \   var prime_fib4 = 0\n    var prime_fib5 = 0\n    var prime_fib6 = 0\n    var\
    \ prime_fib7 = 0\n    var prime_fib8 = 0\n    var prime_fib9 = 0\n    var prime_fib10\
    \ = 0\n    var prime_fib11 = 0\n    var prime_fib12 = 0\n    var prime_fib13 =\
    \ 0\n    var prime_fib14 = 0\n    var prime_fib15 = 0\n    var prime_fib16 = 0\n\
    \    var prime_fib17 = 0\n    var prime_fib18 = 0\n    var prime_fib19 = 0\n \
    \   var prime_fib20 = 0\n    var prime_fib21 = 0\n    var prime_fib22 = 0\n  \
    \  var prime_fib23 = 0\n    var prime_fib24 = 0\n    var prime_fib25 = 0\n   \
    \ var prime_fib26 = 0\n    var prime_fib27 = 0\n    var prime_fib28 = 0\n    var\
    \ prime_fib29 = 0\n    var prime_fib30 = 0\n    var prime_fib31 = 0\n    var prime_fib32\
    \ = 0\n    var prime_fib33 = 0\n    var prime_fib34 = 0\n    var prime_fib35 =\
    \ 0\n    var prime_fib36 = 0\n    var prime_fib37 = 0\n    var prime_fib38 = 0\n\
    \    var prime_fib39 = 0\n    var prime_fib40 = 0\n    var prime_fib41 = 0\n \
    \   var prime_fib42 = 0\n    var prime_fib43 = 0\n    var prime_fib44 = 0\n  \
    \  var prime_fib45 = 0\n    var prime_fib46 = 0\n    var prime_fib47 = 0\n   \
    \ var prime_fib48 = 0\n    var prime_fib49 = 0\n    var prime_fib50 = 0\n    var\
    \ prime_fib51 = 0\n    var prime_fib52 = 0\n    var prime_fib53 = 0\n    var prime_fib54\
    \ = 0\n    var prime_fib55 = 0\n    var prime_fib56 = 0\n    var prime_fib57 =\
    \ 0\n    var prime_fib58 = 0\n    var prime_fib59 = 0\n    var prime_fib60 = 0\n\
    \    var prime_fib61 = 0\n    var prime_fib62 = 0\n    var prime_fib63 = 0\n \
    \   var prime_fib64 = 0\n    var prime_fib65 = 0\n    var prime_fib66 = 0\n  \
    \  var prime_fib67 = 0\n    var prime_fib68 = 0\n    var prime_fib69 = 0\n   \
    \ var prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpwi6hx9_3.swift:80:9: error: type annotation missing in pattern\n\
    \    var prime\n        ^\n"
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpdx9m4n5c/tmpdx9m4n5c.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8248d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8248a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8248a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8248a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdx9m4n5c                        0x0000557e5cccf338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8248f8b460 __libc_start_main +
    245

    6    tmpdx9m4n5c                        0x0000557e5cccefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    var d = 1\n    var prime = 1\n    var fib = 1\n    var fib2\
    \ = 1\n    var fib3 = 1\n    var fib4 = 2\n    var fib5 = 2\n    var fib6 = 2\n\
    \    var fib7 = 2\n    var fib8 = 2\n    var fib9 = 2\n    var fib10 = 2\n   \
    \ var fib11 = 2\n    var fib12 = 2\n    var fib13 = 2\n    var fib14 = 2\n   \
    \ var fib15 = 2\n    var fib16 = 2\n    var fib17 = 2\n    var fib18 = 2\n   \
    \ var fib19 = 2\n    var fib20 = 2\n    var fib21 = 2\n    var fib22 = 2\n   \
    \ var fib23 = 2\n    var fib24 = 2\n    var fib25 = 2\n    var fib26 = 2\n   \
    \ var fib27 = 2\n    var fib28 = 2\n    var fib29 = 2\n    var fib30 = 2\n   \
    \ var fib31 = 2\n    var fib32 = 2\n    var fib33 = 2\n    var fib34 = 2\n   \
    \ var fib35 = 2\n    var fib36 = 2\n    var fib37 = 2\n    var fib38 = 2\n   \
    \ var fib39 = 2\n    var fib40 = 2\n    var fib41 = 2\n    var fib42 = 2\n   \
    \ var fib43 = 2\n    var fib44 = 2\n    var fib45 = 2\n    var fib46 = 2\n   \
    \ var fib47 = 2\n    var fib48 = 2\n    var fib49 = 2\n    var fib50 = 2\n   \
    \ var fib51 = 2\n    var fib52 = 2\n    var fib53 = 2\n    var fib54 = 2\n   \
    \ var fib55 = 2\n    var fib56 = 2\n    var fib57 = 2\n    var fib58 = 2\n   \
    \ var fib59 = 2\n    var fib60 = 2\n    var fib61 = 2\n    var fib62 = 2\n   \
    \ var fib63 = 2\n    var fib64 = 2\n    var fib65 = 2\n    var fib66 = 2\n   \
    \ var fib67 = 2\n    var fib68 = 2\n    var fib69 = 2\n    var fib70 = 2\n   \
    \ var fib71 = 2\n    var fib72 = 2\n    var fib73 = 2\n    var fib74 = 2\n   \
    \ var fib75 = 2\n    var fib76 = 2\n    var fib77 = 2\n    var fib78 = 2\n   \
    \ var fib79 = 2\n    var fib80 = 2\n    var fib81 = 2\n    var fib82 = 2\n   \
    \ var fib83 = 2\n    var fib84 = 2\n    var fib85 = 2\n    var fib86 = 2\n   \
    \ var fib87 = 2\n    var fib88 = 2\n    var fib89 = 2\n    var fib90 = 2\n   \
    \ var fib91 = 2\n    var fib92 = 2\n    var fib93 = 2\n    var fib94 = 2\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4qh7mzx.swift:4:9: warning: initialization of variable 'a' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ a = 2\n    ~~~~^\n    _\n/tmp/tmpg4qh7mzx.swift:5:9: warning: initialization\
    \ of variable 'b' was never used; consider replacing with assignment to '_' or\
    \ removing it\n    var b = 1\n    ~~~~^\n    _\n/tmp/tmpg4qh7mzx.swift:6:9: warning:\
    \ initialization of variable 'c' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var c = 1\n    ~~~~^\n    _\n/tmp/tmpg4qh7mzx.swift:7:9:\
    \ warning: initialization of variable 'd' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    var d = 1\n    ~~~~^\n    _\n/tmp/tmpg4qh7mzx.swift:8:9:\
    \ warning: initialization of variable 'prime' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var prime = 1\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmpg4qh7mzx.swift:9:9: warning: initialization of variable 'fib' was\
    \ never used; consider replacing with assignment to '_' or removing it\n    var\
    \ fib = 1\n    ~~~~^~~\n    _\n/tmp/tmpg4qh7mzx.swift:10:9: warning: initialization\
    \ of variable 'fib2' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var fib2 = 1\n    ~~~~^~~~\n    _\n/tmp/tmpg4qh7mzx.swift:11:9:\
    \ warning: initialization of variable 'fib3' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var fib3 = 1\n    ~~~~^~~~\n    _\n\
    /tmp/tmpg4qh7mzx.swift:12:9: warning: initialization of variable 'fib4' was never\
    \ used; consider replacing with assignment to '_' or removing it\n    var fib4\
    \ = 2\n    ~~~~^~~~\n    _\n/tmp/tmpg4qh7mzx.swift:13:9: warning: initialization\
    \ of variable 'fib5' was never used; consider replacing with assignment to '_'\
    \ or removing it\n    var fib5 = 2\n    ~~~~^~~~\n    _\n/tmp/tmpg4qh7mzx.swift:14:9:\
    \ warning: initialization of variable 'fib6' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var fib6 = 2\n    ~~~~^~~~\n    _\n\
    /tmp/tmpg4qh7mzx.swift:15:9: warning: initialization of variable 'fib7' was never\
    \ used; consider re"
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var prime = 0\n    var prime_found = false\n    for _ in 0..<n\
    \ {\n        c = a + b\n        if c > n {\n            break\n        }\n   \
    \     if prime_found == false {\n            if c % 2 == 0 {\n               \
    \ prime = c\n                prime_found = true\n            }\n        }\n  \
    \      a = b\n        b = c\n    }\n    return prime\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpqmg0g47l/tmpqmg0g47l.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b99892dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9988fd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9988fd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9988fd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqmg0g47l                        0x00005561fabc5338 <unavailable> + 4920

    5    libc.so.6                          0x00002b99894c7460 __libc_start_main +
    245

    6    tmpqmg0g47l                        0x00005561fabc4fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2) + prime_fib(n - 3)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpd068kzw6.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpd068kzw6.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpd068kzw6.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpd068kzw6.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpd068kzw6.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpd068kzw6.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3)\n                     ^\n                     n: \n/tmp/tmpd068kzw6.swift:19:41:\
    \ error: missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n                                        ^\n       \
    \                                 n: \n/tmp/tmpd068kzw6.swift:19:60: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\
    \ + prime_fib(n - 3)\n                                                       \
    \    ^\n                                                           n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var n = 0\n    var prime = 0\n    var prime_fib\
    \ = 0\n    var prime_fib_prime = 0\n    var prime_fib_prime_prime = 0\n    var\
    \ prime_fib_prime_prime_prime = 0\n    var prime_fib_prime_prime_prime_prime =\
    \ 0\n    var prime_fib_prime_prime_prime_prime_prime = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime = 0\n    var\
    \ prime_fib_prime_prime_prime_prime_prime_prime_prime_prime = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp4efg8a3u.swift:19:9: error: invalid redeclaration of 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime'\n\
    \    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime = 0\n     \
    \   ^\n/tmp/tmp4efg8a3u.swift:18:9: note: 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime'\
    \ previously declared here\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n        ^\n/tmp/tmp4efg8a3u.swift:22:9: error: invalid redeclaration of\
    \ 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\n  \
    \  var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime =\
    \ 0\n        ^\n/tmp/tmp4efg8a3u.swift:21:9: note: 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\
    \ previously declared here\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n        ^\n/tmp/tmp4efg8a3u.swift:23:9: error: invalid redeclaration of\
    \ 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\n  \
    \  var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime =\
    \ 0\n        ^\n/tmp/tmp4efg8a3u.swift:21:9: note: 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\
    \ previously declared here\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n        ^\n/tmp/tmp4efg8a3u.swift:25:9: error: invalid redeclaration of\
    \ 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\n\
    \    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n        ^\n/tmp/tmp4efg8a3u.swift:24:9: note: 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\
    \ previously declared here\n    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n        ^\n/tmp/tmp4efg8a3u.swift:26:9: error: invalid redeclaration of\
    \ 'prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime'\n\
    \    var prime_fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n        ^\n/tmp/tmp4efg8a3u.swift:24:9: note: 'pri"
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var prime_number = 0\n    for _ in 0..<n {\n        c = a\
    \ + b\n        if c > n {\n            break\n        }\n        if c % 2 == 0\
    \ {\n            prime_number = c\n            break\n        }\n        a = b\n\
    \        b = c\n    }\n    return prime_number\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmprv1wvn95/tmprv1wvn95.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad50633fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad506036b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad506036988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad5060357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprv1wvn95                        0x000055e8098fb338 <unavailable> + 4920

    5    libc.so.6                          0x00002ad50652b460 __libc_start_main +
    245

    6    tmprv1wvn95                        0x000055e8098fafe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var prime = 0\n\n    for _ in 0..<n {\n   \
    \     c = a + b\n        d = b\n        a = b\n        b = c\n        if b ==\
    \ c {\n            prime = 1\n            break\n        }\n    }\n\n    return\
    \ prime\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp83lu6s7o/tmp83lu6s7o.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b763ca72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b763c769b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b763c769988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b763c7687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp83lu6s7o                        0x000056470824b338 <unavailable> + 4920

    5    libc.so.6                          0x00002b763cc5e460 __libc_start_main +
    245

    6    tmp83lu6s7o                        0x000056470824afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for index in 2..<n {\n        fib[index] = fib[index-1]\
    \ + fib[index-2]\n    }\n    return fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b994fc08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b994f8ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b994f8ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b994f8ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b994f8febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b994f6fe7ec <unavailable> + 186348

    6    tmprbgh2har                        0x000056016b8fb943 <unavailable> + 6467

    7    tmprbgh2har                        0x000056016b8fb3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b994fdf4460 __libc_start_main +
    245

    9    tmprbgh2har                        0x000056016b8fb0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n    return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpomimh6kk.swift:7:22: error: missing argument label 'n:' in call\n\
    \    return prime_fib(n - 1) + prime_fib(n - 2)\n                     ^\n    \
    \                 n: \n/tmp/tmpomimh6kk.swift:7:41: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \                           ^\n                                        n: \n"
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 1\n    var prime = true\n    var fib = 0\n    for\
    \ _ in 0..<n {\n        fib += d\n        if fib > n {\n            prime = false\n\
    \            break\n        }\n        if a > n {\n            break\n       \
    \ }\n        c += b\n        if c > n {\n            break\n        }\n      \
    \  d += a\n        if d > n {\n            break\n        }\n        a += b\n\
    \        if a > n {\n            break\n        }\n        b += c\n        if\
    \ b > n {\n            break\n        }\n    }\n    if prime {\n        return\
    \ fib\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpl7xbrb12/tmpl7xbrb12.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab75aa33c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab75a72ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab75a72a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab75a7297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl7xbrb12                        0x0000563c964f2338 <unavailable> + 4920

    5    libc.so.6                          0x00002ab75ac1f460 __libc_start_main +
    245

    6    tmpl7xbrb12                        0x0000563c964f1fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    for _ in 0..<n {\n        c = a + b\n     \
    \   a = b\n        b = c\n        d += 1\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpi84le1h0/tmpi84le1h0.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc359afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc356a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc356a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc356a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi84le1h0                        0x000055aa80781338 <unavailable> + 4920

    5    libc.so.6                          0x00002acc35b9b460 __libc_start_main +
    245

    6    tmpi84le1h0                        0x000055aa80780fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 1\n    var prime = true\n    var result = 0\n    for _ in 0..<n {\n\
    \        if prime {\n            if a == b {\n                prime = false\n\
    \                result = a\n            } else {\n                result = a\
    \ + b\n            }\n        } else {\n            if a == b {\n            \
    \    prime = true\n                result = a\n            } else {\n        \
    \        result = a + b\n            }\n        }\n        a = b\n        b =\
    \ c\n        c = result\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpoo531fsh/tmpoo531fsh.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb714cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb711c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb711c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb711c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoo531fsh                        0x000055d31581d338 <unavailable> + 4920

    5    libc.so.6                          0x00002acb716b6460 __libc_start_main +
    245

    6    tmpoo531fsh                        0x000055d31581cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n == 0 || n == 1 {\n  \
    \      return n\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) +\
    \ prime_fib(n - 2)\n    }\n    return prime_fib(n - 1) + prime_fib(n - 3)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpl7nanp6r.swift:8:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpl7nanp6r.swift:8:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpl7nanp6r.swift:10:22: error: missing argument\
    \ label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 3)\n       \
    \              ^\n                     n: \n/tmp/tmpl7nanp6r.swift:10:41: error:\
    \ missing argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 3)\n                                        ^\n                          \
    \              n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp_qie2wqz/tmp_qie2wqz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d7e876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d7e56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d7e56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d7e56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qie2wqz                        0x0000562934757338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d7ea62460 __libc_start_main +
    245

    6    tmp_qie2wqz                        0x0000562934756fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpdx9m4n5c/tmpdx9m4n5c.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8248d9fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8248a96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8248a96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8248a957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdx9m4n5c                        0x0000557e5cccf338 <unavailable> + 4920

    5    libc.so.6                          0x00002b8248f8b460 __libc_start_main +
    245

    6    tmpdx9m4n5c                        0x0000557e5cccefe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpsg7ofen8/tmpsg7ofen8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affa6a35c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affa672cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affa672c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affa672b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsg7ofen8                        0x0000556581b01338 <unavailable> + 4920

    5    libc.so.6                          0x00002affa6c21460 __libc_start_main +
    245

    6    tmpsg7ofen8                        0x0000556581b00fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    var d = 0\n    var prime = 0\n    var fib = 0\n    for _ in\
    \ 0..<n {\n        c = a + b\n        d = b\n        a = b\n        b = c\n  \
    \      if b == c {\n            prime = 1\n        } else {\n            prime\
    \ = 0\n        }\n        if prime == 1 {\n            fib = c\n        }\n  \
    \  }\n    return fib\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpfjj7wo4r/tmpfjj7wo4r.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af52d791c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af52d488b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af52d488988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af52d4877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfjj7wo4r                        0x00005592a62dd338 <unavailable> + 4920

    5    libc.so.6                          0x00002af52d97d460 __libc_start_main +
    245

    6    tmpfjj7wo4r                        0x00005592a62dcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var isPrime: Bool = false\n    var isFibonacci: Bool = false\n\
    \    var isPrimeFibonacci: Bool = false\n    var isPrimeFibonacciPrime: Bool =\
    \ false\n    var isPrimeFibonacciPrimeFibonacci: Bool = false\n    var isPrimeFibonacciPrimeFibonacciPrime:\
    \ Bool = false\n    var isPrimeFibonacciPrimeFibonacciPrimeFibonacci: Bool = false\n\
    \    var isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime: Bool = false\n   \
    \ var isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci: Bool = false\n\
    \    var isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime: Bool\
    \ = false\n    var isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ Bool = false\n    var isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ Bool = false\n    var isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacci:\
    \ Bool = false\n    var isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ Bool = false\n    var isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrime:\
    \ Bool = false\n    var isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibon\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpsaxc26jl.swift:21:9: error: type annotation missing in pattern\n\
    \    var isPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibonacciPrimeFibon\n\
    \        ^\n"
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var fib2: Int = 0\n \
    \   var fib2_found: Bool = false\n    var fib3: Int = 0\n    var fib3_found: Bool\
    \ = false\n    var fib4: Int = 0\n    var fib4_found: Bool = false\n    var fib5:\
    \ Int = 0\n    var fib5_found: Bool = false\n    var fib6: Int = 0\n    var fib6_found:\
    \ Bool = false\n    var fib7: Int = 0\n    var fib7_found: Bool = false\n    var\
    \ fib8: Int = 0\n    var fib8_found: Bool = false\n    var fib9: Int = 0\n   \
    \ var fib9_found: Bool = false\n    var fib10: Int = 0\n    var fib10_found: Bool\
    \ = false\n    var fib11: Int = 0\n    var fib11_found: Bool = false\n    var\
    \ fib12: Int = 0\n    var fib12_found: Bool = false\n    var fib13: Int = 0\n\
    \    var fib13_found: Bool = false\n    var fib14: Int = 0\n    var fib14_found:\
    \ Bool = false\n    var fib15: Int = 0\n    var fib15_found: Bool = false\n  \
    \  var fib16: Int = 0\n    var fib16_found: Bool = false\n    var fib17: Int =\
    \ 0\n    var fib17_found: Bool = false\n    var fib18: Int = 0\n    var fib18_found:\
    \ Bool = false\n    var fib19: Int = 0\n    var fib19_found: Bool = false\n  \
    \  var fib20: Int = 0\n    var fib20_found: Bool = false\n    var fib21: Int =\
    \ 0\n    var fib21_found: Bool = false\n    var fib22: Int = 0\n    var fib22_found:\
    \ Bool = false\n    var fib23: Int = 0\n    var fib23_found: Bool = false\n  \
    \  var fib24: Int = 0\n    var fib24_found: Bool = false\n    var fib25: Int =\
    \ 0\n    var fib25_found: Bool = false\n    var fib26: Int = 0\n    var fib26_found:\
    \ Bool = false\n    var fib27: Int = 0\n    var fib27_found: Bool = false\n  \
    \  var fib28: Int = 0\n    var fib28_found: Bool = false\n    var fib29: Int =\
    \ 0\n    var fib29_found: Bool = false\n    var fib30: Int = 0\n    var fib30_found:\
    \ Bool = false\n    var fib31: Int = 0\n    var fib31_found: Bool = false\n  \
    \  var fib32: Int = 0\n    var fib32_found: Bool = false\n    var fib33: Int =\
    \ 0\n    var fib33_found: Bool = false\n    var \n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpm7ijp72c.swift:71:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpm7ijp72c.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpm7ijp72c.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmpm7ijp72c.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpm7ijp72c.swift:7:9: warning:\
    \ variable 'fib2' was never used; consider replacing with '_' or removing it\n\
    \    var fib2: Int = 0\n        ^~~~\n        _\n/tmp/tmpm7ijp72c.swift:8:9: warning:\
    \ variable 'fib2_found' was never used; consider replacing with '_' or removing\
    \ it\n    var fib2_found: Bool = false\n        ^~~~~~~~~~\n        _\n/tmp/tmpm7ijp72c.swift:9:9:\
    \ warning: variable 'fib3' was never used; consider replacing with '_' or removing\
    \ it\n    var fib3: Int = 0\n        ^~~~\n        _\n/tmp/tmpm7ijp72c.swift:10:9:\
    \ warning: variable 'fib3_found' was never used; consider replacing with '_' or\
    \ removing it\n    var fib3_found: Bool = false\n        ^~~~~~~~~~\n        _\n\
    /tmp/tmpm7ijp72c.swift:11:9: warning: variable 'fib4' was never used; consider\
    \ replacing with '_' or removing it\n    var fib4: Int = 0\n        ^~~~\n   \
    \     _\n/tmp/tmpm7ijp72c.swift:12:9: warning: variable 'fib4_found' was never\
    \ used; consider replacing with '_' or removing it\n    var fib4_found: Bool =\
    \ false\n        ^~~~~~~~~~\n        _\n/tmp/tmpm7ijp72c.swift:13:9: warning:\
    \ variable 'fib5' was never used; consider replacing with '_' or removing it\n\
    \    var fib5: Int = 0\n        ^~~~\n        _\n/tmp/tmpm7ijp72c.swift:14:9:\
    \ warning: variable 'fib5_found' was never used; consider replacing with '_' or\
    \ removing it\n    var fib5_found: Bool = false\n        ^~~~~~~~~~\n        _\n\
    /tmp/tmpm7ijp72c.swift:15:9: warning: variable 'fib6' was never used; consider\
    \ replacing with '_' or removing it\n    var fib6: "
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    for _ in 0..<n {\n        if\
    \ fib == 0 {\n            prime = 1\n            prime_found = true\n        }\
    \ else {\n            prime = fib\n            fib += prime\n        }\n     \
    \   if prime_found {\n            break\n        }\n    }\n    return prime\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmp184y3zlm/tmp184y3zlm.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9a0993c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9a068ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9a068a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9a06897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp184y3zlm                        0x000055d73c2e1338 <unavailable> + 4920

    5    libc.so.6                          0x00002ae9a0b7f460 __libc_start_main +
    245

    6    tmp184y3zlm                        0x000055d73c2e0fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var fib_index: Int =\
    \ 0\n    var fib_index2: Int = 0\n    var fib_index3: Int = 0\n    var fib_index4:\
    \ Int = 0\n    var fib_index5: Int = 0\n    var fib_index6: Int = 0\n    var fib_index7:\
    \ Int = 0\n    var fib_index8: Int = 0\n    var fib_index9: Int = 0\n    var fib_index10:\
    \ Int = 0\n    var fib_index11: Int = 0\n    var fib_index12: Int = 0\n    var\
    \ fib_index13: Int = 0\n    var fib_index14: Int = 0\n    var fib_index15: Int\
    \ = 0\n    var fib_index16: Int = 0\n    var fib_index17: Int = 0\n    var fib_index18:\
    \ Int = 0\n    var fib_index19: Int = 0\n    var fib_index20: Int = 0\n    var\
    \ fib_index21: Int = 0\n    var fib_index22: Int = 0\n    var fib_index23: Int\
    \ = 0\n    var fib_index24: Int = 0\n    var fib_index25: Int = 0\n    var fib_index26:\
    \ Int = 0\n    var fib_index27: Int = 0\n    var fib_index28: Int = 0\n    var\
    \ fib_index29: Int = 0\n    var fib_index30: Int = 0\n    var fib_index31: Int\
    \ = 0\n    var fib_index32: Int = 0\n    var fib_index33: Int = 0\n    var fib_index34:\
    \ Int = 0\n    var fib_index35: Int = 0\n    var fib_index36: Int = 0\n    var\
    \ fib_index37: Int = 0\n    var fib_index38: Int = 0\n    var fib_index39: Int\
    \ = 0\n    var fib_index40: Int = 0\n    var fib_index41: Int = 0\n    var fib_index42:\
    \ Int = 0\n    var fib_index43: Int = 0\n    var fib_index44: Int = 0\n    var\
    \ fib_index45: Int = 0\n    var fib_index46: Int = 0\n    var fib_index47: Int\
    \ = 0\n    var fib_index48: Int = 0\n    var fib_index49: Int = 0\n    var fib_index50:\
    \ Int = 0\n    var fib_index51: Int = 0\n    var fib_index52: Int = 0\n    var\
    \ fib_index53: Int = 0\n    var fib_index54: Int = 0\n    var fib_index55: Int\
    \ = 0\n    var fib_index56: Int = 0\n    var fib_index57: Int = 0\n    var fib_index58:\
    \ Int = 0\n    var fib_index59: Int = 0\n    var fib_index60: Int = 0\n    var\
    \ fib_index61: Int = 0\n    var fib_index62: Int = 0\n    var \n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpj4z7bhb_.swift:69:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmpj4z7bhb_.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmpj4z7bhb_.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmpj4z7bhb_.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:7:9: warning:\
    \ variable 'fib_index' was never used; consider replacing with '_' or removing\
    \ it\n    var fib_index: Int = 0\n        ^~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:8:9:\
    \ warning: variable 'fib_index2' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index2: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:9:9:\
    \ warning: variable 'fib_index3' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index3: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:10:9:\
    \ warning: variable 'fib_index4' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index4: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:11:9:\
    \ warning: variable 'fib_index5' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index5: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:12:9:\
    \ warning: variable 'fib_index6' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index6: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:13:9:\
    \ warning: variable 'fib_index7' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index7: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:14:9:\
    \ warning: variable 'fib_index8' was never used; consider replacing with '_' or\
    \ removing it\n    var fib_index8: Int = 0\n        ^~~~~~~~~~\n        _\n/tmp/tmpj4z7bhb_.swift:15:9:\
    \ warning: variable 'fib_index9' was never used; co"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    if n < 2 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return 1\n    }\n    if n == 3 {\n      \
    \  return 2\n    }\n    if n % 2 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    }\n    if n % 3 == 0 {\n        return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3)\n    }\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n:\
    \ 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmpg4k_rr9u.swift:14:26: error: missing argument label 'n:' in call\n\
    \        return prime_fib(n - 1) + prime_fib(n - 2)\n                        \
    \ ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:14:45: error: missing\
    \ argument label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n                                            ^\n                        \
    \                    n: \n/tmp/tmpg4k_rr9u.swift:17:26: error: missing argument\
    \ label 'n:' in call\n        return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n\
    \ - 3)\n                         ^\n                         n: \n/tmp/tmpg4k_rr9u.swift:17:45:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \        ^\n                                            n: \n/tmp/tmpg4k_rr9u.swift:17:64:\
    \ error: missing argument label 'n:' in call\n        return prime_fib(n - 1)\
    \ + prime_fib(n - 2) + prime_fib(n - 3)\n                                    \
    \                           ^\n                                              \
    \                 n: \n/tmp/tmpg4k_rr9u.swift:19:22: error: missing argument label\
    \ 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n             \
    \        ^\n                     n: \n/tmp/tmpg4k_rr9u.swift:19:41: error: missing\
    \ argument label 'n:' in call\n    return prime_fib(n - 1) + prime_fib(n - 2)\n\
    \                                        ^\n                                 \
    \       n: \n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 0\n    var b = 1\n\
    \    for _ in 0..<n {\n        let c = a + b\n        a = b\n        b = c\n \
    \   }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) ==\
    \ 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpwa5thydk/tmpwa5thydk.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aafaa35bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aafaa052b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aafaa052988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aafaa0517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwa5thydk                        0x0000561e8ab8b338 <unavailable> + 4920

    5    libc.so.6                          0x00002aafaa547460 __libc_start_main +
    245

    6    tmpwa5thydk                        0x0000561e8ab8afe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for index in 2..<n {\n        fib[index] = fib[index-1]\
    \ + fib[index-2]\n    }\n    return fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b994fc08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b994f8ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b994f8ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b994f8ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b994f8febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b994f6fe7ec <unavailable> + 186348

    6    tmprbgh2har                        0x000056016b8fb943 <unavailable> + 6467

    7    tmprbgh2har                        0x000056016b8fb3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b994fdf4460 __libc_start_main +
    245

    9    tmprbgh2har                        0x000056016b8fb0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return b\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmpdn_jxmhv/tmpdn_jxmhv.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47ca376c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47ca06db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47ca06d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47ca06c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdn_jxmhv                        0x0000559ac5571338 <unavailable> + 4920

    5    libc.so.6                          0x00002b47ca562460 __libc_start_main +
    245

    6    tmpdn_jxmhv                        0x0000559ac5570fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var d = 0\n    for _ in 0..<n {\n        c = a + b\n     \
    \   d = b\n        a = b\n        b = c\n    }\n    return d\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: Exception
  stderr: 'tmpx_ya974b/tmpx_ya974b.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b263210bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2631e02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2631e02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2631e017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_ya974b                        0x000055cb4b10d3b3 <unavailable> + 5043

    5    libc.so.6                          0x00002b26322f7460 __libc_start_main +
    245

    6    tmpx_ya974b                        0x000055cb4b10cfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014017
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 1\n\
    \    var c = 0\n    for _ in 0..<n {\n        c = a + b\n        a = b\n     \
    \   b = c\n    }\n    return c\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(prime_fib(n:\
    \ 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'tmp_qie2wqz/tmp_qie2wqz.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d7e876c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d7e56db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d7e56d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d7e56c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_qie2wqz                        0x0000562934757338 <unavailable> + 4920

    5    libc.so.6                          0x00002b1d7ea62460 __libc_start_main +
    245

    6    tmp_qie2wqz                        0x0000562934756fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: -4
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib = [Int]()\n    fib[0]\
    \ = 0\n    fib[1] = 1\n    for index in 2..<n {\n        fib[index] = fib[index-1]\
    \ + fib[index-2]\n    }\n    return fib[n-1]\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\nassert(prime_fib(n:\
    \ 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n:\
    \ 6) == 233)\nassert(prime_fib(n: 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\n\
    assert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n: 10) == 433494437)"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b994fc08c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b994f8ff561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b994f8ff286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b994f8ff13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b994f8febb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b994f6fe7ec <unavailable> + 186348

    6    tmprbgh2har                        0x000056016b8fb943 <unavailable> + 6467

    7    tmprbgh2har                        0x000056016b8fb3cb <unavailable> + 5067

    8    libc.so.6                          0x00002b994fdf4460 __libc_start_main +
    245

    9    tmprbgh2har                        0x000056016b8fb0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var a = 2\n    var b = 2\n\
    \    var c = 0\n    var d = 0\n    var prime = 0\n    var fib = 0\n    var nPrime\
    \ = 0\n    var nFib = 0\n    var nPrimeFib = 0\n    for _ in 0..<n {\n       \
    \ prime = 1\n        fib = 1\n        nPrime = 0\n        nFib = 0\n        nPrimeFib\
    \ = 0\n        if a > b {\n            c = a\n            d = b\n        } else\
    \ {\n            c = b\n            d = a\n        }\n        for _ in 0..<n {\n\
    \            if prime {\n                prime = 0\n                fib = 1\n\
    \                nPrime = 0\n                nFib = 0\n                nPrimeFib\
    \ = 0\n            }\n            if fib == c {\n                prime = 1\n \
    \               fib = 1\n                nPrime = 0\n                nFib = 0\n\
    \                nPrimeFib = 0\n            }\n            if fib > c {\n    \
    \            prime = 0\n                fib = 1\n                nPrime = 0\n\
    \                nFib = 0\n                nPrimeFib = 0\n            }\n    \
    \        if prime {\n                prime = 0\n                fib = 1\n    \
    \            nPrime = 0\n                nFib = 0\n                nPrimeFib =\
    \ 0\n            }\n            if fib > c {\n                prime = 0\n    \
    \            fib = 1\n                nPrime = 0\n                nFib = 0\n \
    \               nPrimeFib = 0\n            }\n            if prime {\n       \
    \         prime = 0\n                fib = 1\n                nPrime = 0\n   \
    \             nFib = 0\n                nPrimeFib = 0\n            }\n       \
    \     if fib > c {\n                prime = 0\n                fib = 1\n     \
    \           nPrime = 0\n                nFib = 0\n                nPrimeFib =\
    \ 0\n            }\n            if prime {\n                prime = 0\n      \
    \          fib = 1\n                nPrime = 0\n                nFib = 0\n   \
    \             nPrimeFib = 0\n            }\n            if fib > c {\n       \
    \         prime = 0\n                fib = 1\n                nPrime = 0\n   \
    \             nFib = 0\n                nPrimeFib = 0\n            }\n       \
    \     if prime {\n                prime = 0\n                fib = 1\n       \
    \         nPrime = 0\n                nFib = 0\n                nPrimeFib = 0\n\
    \            }\n            if fib > c {\n                prime = 0\n        \
    \        fib = 1\n                nPrime = 0\n                nFib = 0\n     \
    \           nPrimeFib = 0\n            }\n            if prime {\n           \
    \     prime = 0\n                fib = 1\n                nPrime = 0\n       \
    \         nFib = 0\n                nPrimeFib = 0\n            }\n           \
    \ if fib > c {\n                prime = 0\n                fib = 1\n         \
    \       nPrime = 0\n                nFib = 0\n                nPrimeFib = 0\n\
    \            }\n            if prime {\n                prime = 0\n          \
    \      fib = 1\n                nPrime = 0\n                n\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2) == 3)\n\
    assert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp69iyf1oa.swift:147:38: error: expected '}' at end of brace statement\n\
    assert(prime_fib(n: 10) == 433494437)\n                                     ^\n\
    /tmp/tmp69iyf1oa.swift:26:24: note: to match this opening '{'\n        for _ in\
    \ 0..<n {\n                       ^\n/tmp/tmp69iyf1oa.swift:147:38: error: expected\
    \ '}' at end of brace statement\nassert(prime_fib(n: 10) == 433494437)\n     \
    \                                ^\n/tmp/tmp69iyf1oa.swift:13:20: note: to match\
    \ this opening '{'\n    for _ in 0..<n {\n                   ^\n/tmp/tmp69iyf1oa.swift:147:38:\
    \ error: expected '}' at end of brace statement\nassert(prime_fib(n: 10) == 433494437)\n\
    \                                     ^\n/tmp/tmp69iyf1oa.swift:3:31: note: to\
    \ match this opening '{'\nfunc prime_fib(n: Int) -> Int {\n                  \
    \            ^\n/tmp/tmp69iyf1oa.swift:27:16: error: type 'Int' cannot be used\
    \ as a boolean; test for '!= 0' instead\n            if prime {\n            \
    \   ^\n               (     != 0)\n/tmp/tmp69iyf1oa.swift:48:16: error: type 'Int'\
    \ cannot be used as a boolean; test for '!= 0' instead\n            if prime {\n\
    \               ^\n               (     != 0)\n/tmp/tmp69iyf1oa.swift:62:16: error:\
    \ type 'Int' cannot be used as a boolean; test for '!= 0' instead\n          \
    \  if prime {\n               ^\n               (     != 0)\n/tmp/tmp69iyf1oa.swift:76:16:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \         if prime {\n               ^\n               (     != 0)\n/tmp/tmp69iyf1oa.swift:90:16:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \         if prime {\n               ^\n               (     != 0)\n/tmp/tmp69iyf1oa.swift:104:16:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \         if prime {\n               ^\n               (     != 0)\n/tmp/tmp69iyf1oa.swift:118:16:\
    \ error: type 'Int' cannot be used as a boolean; test for '!= 0' instead\n   \
    \         if prime {\n               ^\n               (     != 0)\n/tmp/tmp69iyf1oa.swift:122:17:\
    \ warning: expression of type 'Int' is"
  stdout: ''
  timestamp: 1660014017
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found: Bool = false\n    var prime_found2: Bool\
    \ = false\n    var prime_found3: Bool = false\n    var prime_found4: Bool = false\n\
    \    var prime_found5: Bool = false\n    var prime_found6: Bool = false\n    var\
    \ prime_found7: Bool = false\n    var prime_found8: Bool = false\n    var prime_found9:\
    \ Bool = false\n    var prime_found10: Bool = false\n    var prime_found11: Bool\
    \ = false\n    var prime_found12: Bool = false\n    var prime_found13: Bool =\
    \ false\n    var prime_found14: Bool = false\n    var prime_found15: Bool = false\n\
    \    var prime_found16: Bool = false\n    var prime_found17: Bool = false\n  \
    \  var prime_found18: Bool = false\n    var prime_found19: Bool = false\n    var\
    \ prime_found20: Bool = false\n    var prime_found21: Bool = false\n    var prime_found22:\
    \ Bool = false\n    var prime_found23: Bool = false\n    var prime_found24: Bool\
    \ = false\n    var prime_found25: Bool = false\n    var prime_found26: Bool =\
    \ false\n    var prime_found27: Bool = false\n    var prime_found28: Bool = false\n\
    \    var prime_found29: Bool = false\n    var prime_found30: Bool = false\n  \
    \  var prime_found31: Bool = false\n    var prime_found32: Bool = false\n    var\
    \ prime_found33: Bool = false\n    var prime_found34: Bool = false\n    var prime_found35:\
    \ Bool = false\n    var prime_found36: Bool = false\n    var prime_found37: Bool\
    \ = false\n    var prime_found38: Bool = false\n    var prime_found39: Bool =\
    \ false\n    var prime_found40: Bool = false\n    var prime_found41: Bool = false\n\
    \    var prime_found42: Bool = false\n    var prime_found43: Bool = false\n  \
    \  var prime_found44: Bool = false\n    var prime_found45: Bool = false\n    var\
    \ prime_found46: Bool = false\n    var prime_found47: Bool = false\n    var prime_found48:\
    \ Bool = false\n    var prime_found49: Bool = false\n    var prime_found50: Bool\
    \ = false\n    var prime_found51: Bool = false\n    var prime_found52: Bool =\
    \ false\n    var prime_found53: Bool = false\n    var prime_found54: Bool = false\n\
    \    var prime_found55: Bool = false\n    var prime_found56: Bool = false\n  \
    \  var \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(prime_fib(n: 1) == 2)\n\
    assert(prime_fib(n: 2) == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n:\
    \ 4) == 13)\nassert(prime_fib(n: 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n:\
    \ 7) == 1597)\nassert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\n\
    assert(prime_fib(n: 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp8ygha0qv.swift:62:8: error: expected pattern\n    var \n      \
    \ ^\n/tmp/tmp8ygha0qv.swift:4:9: warning: variable 'fib' was never used; consider\
    \ replacing with '_' or removing it\n    var fib: Int = 0\n        ^~~\n     \
    \   _\n/tmp/tmp8ygha0qv.swift:5:9: warning: variable 'prime' was never used; consider\
    \ replacing with '_' or removing it\n    var prime: Int = 0\n        ^~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:6:9: warning: variable 'prime_found' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found: Bool\
    \ = false\n        ^~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:7:9: warning:\
    \ variable 'prime_found2' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found2: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:8:9:\
    \ warning: variable 'prime_found3' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found3: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:9:9: warning: variable 'prime_found4' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found4: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:10:9: warning:\
    \ variable 'prime_found5' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found5: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:11:9:\
    \ warning: variable 'prime_found6' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found6: Bool = false\n        ^~~~~~~~~~~~\n \
    \       _\n/tmp/tmp8ygha0qv.swift:12:9: warning: variable 'prime_found7' was never\
    \ used; consider replacing with '_' or removing it\n    var prime_found7: Bool\
    \ = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:13:9: warning:\
    \ variable 'prime_found8' was never used; consider replacing with '_' or removing\
    \ it\n    var prime_found8: Bool = false\n        ^~~~~~~~~~~~\n        _\n/tmp/tmp8ygha0qv.swift:14:9:\
    \ warning: variable 'prime_found9' was never used; consider replacing with '_'\
    \ or removing it\n    var prime_found9: Bool = false\n        ^~~~~~~~~~"
  stdout: ''
  timestamp: 1660014016
- exit_code: 1
  program: "\n/// prime_fib returns n-th number that is a Fibonacci number and it's\
    \ also prime.\nfunc prime_fib(n: Int) -> Int {\n    var fib: Int = 0\n    var\
    \ prime: Int = 0\n    var prime_found = false\n    var prime_found2 = false\n\
    \    var prime_found3 = false\n    var prime_found4 = false\n    var prime_found5\
    \ = false\n    var prime_found6 = false\n    var prime_found7 = false\n    var\
    \ prime_found8 = false\n    var prime_found9 = false\n    var prime_found10 =\
    \ false\n    var prime_found11 = false\n    var prime_found12 = false\n    var\
    \ prime_found13 = false\n    var prime_found14 = false\n    var prime_found15\
    \ = false\n    var prime_found16 = false\n    var prime_found17 = false\n    var\
    \ prime_found18 = false\n    var prime_found19 = false\n    var prime_found20\
    \ = false\n    var prime_found21 = false\n    var prime_found22 = false\n    var\
    \ prime_found23 = false\n    var prime_found24 = false\n    var prime_found25\
    \ = false\n    var prime_found26 = false\n    var prime_found27 = false\n    var\
    \ prime_found28 = false\n    var prime_found29 = false\n    var prime_found30\
    \ = false\n    var prime_found31 = false\n    var prime_found32 = false\n    var\
    \ prime_found33 = false\n    var prime_found34 = false\n    var prime_found35\
    \ = false\n    var prime_found36 = false\n    var prime_found37 = false\n    var\
    \ prime_found38 = false\n    var prime_found39 = false\n    var prime_found40\
    \ = false\n    var prime_found41 = false\n    var prime_found42 = false\n    var\
    \ prime_found43 = false\n    var prime_found44 = false\n    var prime_found45\
    \ = false\n    var prime_found46 = false\n    var prime_found47 = false\n    var\
    \ prime_found48 = false\n    var prime_found49 = false\n    var prime_found50\
    \ = false\n    var prime_found51 = false\n    var prime_found52 = false\n    var\
    \ prime_found53 = false\n    var prime_found54 = false\n    var prime_found55\
    \ = false\n    var prime_found56 = false\n    var prime_found57 = false\n    var\
    \ prime_found58 = false\n    var prime_found59 = false\n    var prime_found60\
    \ = false\n    var prime_found61 = false\n    var prime_found62 = false\n    var\
    \ prime_found63 = false\n    var prime_found64 = false\n    var prime_found65\
    \ = false\n    var prime_found66 = false\n    var prime_found67 = false\n    var\
    \ prime_found68 = false\n    var prime_found69 = false\n    var prime_found70\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(prime_fib(n: 1) == 2)\nassert(prime_fib(n: 2)\
    \ == 3)\nassert(prime_fib(n: 3) == 5)\nassert(prime_fib(n: 4) == 13)\nassert(prime_fib(n:\
    \ 5) == 89)\nassert(prime_fib(n: 6) == 233)\nassert(prime_fib(n: 7) == 1597)\n\
    assert(prime_fib(n: 8) == 28657)\nassert(prime_fib(n: 9) == 514229)\nassert(prime_fib(n:\
    \ 10) == 433494437)"
  status: SyntaxError
  stderr: "/tmp/tmp115j9dmg.swift:75:9: error: type annotation missing in pattern\n\
    \    var prime_found70\n        ^\n"
  stdout: ''
  timestamp: 1660014016
