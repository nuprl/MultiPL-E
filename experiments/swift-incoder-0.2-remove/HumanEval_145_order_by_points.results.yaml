language: swift
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    return nums.sorted { $0.digits.reduce(0,+) + $1.digits.reduce(0,+)\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpt44m1owj.swift:8:29: error: value of type 'Int' has no member 'digits'\n\
    \    return nums.sorted { $0.digits.reduce(0,+) + $1.digits.reduce(0,+) }\n  \
    \                       ~~ ^~~~~~\n/tmp/tmpt44m1owj.swift:8:53: error: value of\
    \ type 'Int' has no member 'digits'\n    return nums.sorted { $0.digits.reduce(0,+)\
    \ + $1.digits.reduce(0,+) }\n                                                \
    \ ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009356
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var index\
    \ = 0\n    var lastSum = sum\n    for num in nums {\n        if lastSum == sum\
    \ {\n            numsSorted.append(nums[index])\n            index++\n       \
    \ } else {\n            lastSum = sum\n            index = 0\n        }\n    }\n\
    \    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqhus2nk1.swift:19:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy\
    \ = numsSorted.copy()\n    numsSorted.sort()\n    var result = [Int]()\n    for\
    \ num in numsSorted {\n        if numsSortedCopy.contains(num) {\n           \
    \ let index = numsSortedCopy.index(of: num)!\n            result.insert(numsSorted[index],\
    \ at: index)\n            numsSortedCopy.remove(at: index)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp40jxwlrf.swift:14:37: error: value of type '[Int]' has no member\
    \ 'copy'\n    var numsSortedCopy = numsSorted.copy()\n                       \
    \  ~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_5ytp6o8/tmp_5ytp6o8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b03d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b03a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b03a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b03a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5ytp6o8                        0x000055a1e1d0d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0b03f76460 __libc_start_main +
    245

    6    tmp_5ytp6o8                        0x000055a1e1d0d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy\
    \ = numsSorted.copy()\n    numsSorted.sort()\n    var result = [Int]()\n    for\
    \ num in numsSorted {\n        if numsSortedCopy.contains(num) {\n           \
    \ let index = numsSortedCopy.index(of: num)!\n            result.append(numsSorted[index])\n\
    \            numsSortedCopy.remove(at: index)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp74vlr8g3.swift:14:37: error: value of type '[Int]' has no member\
    \ 'copy'\n    var numsSortedCopy = numsSorted.copy()\n                       \
    \  ~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for n in numsSorted {\n        if sum == 0 {\n            numsSortedBySum.append(n)\n\
    \        } else {\n            for m in numsSorted {\n                if m > n\
    \ {\n                    break\n                }\n                if sum == (m\
    \ + n) % 10 {\n                    numsSortedBySum.append(m)\n               \
    \     break\n                }\n            }\n        }\n        sum -= n\n \
    \   }\n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpl4z78xq5/tmpl4z78xq5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6c8ed66c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6c8ea5db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6c8ea5d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6c8ea5c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl4z78xq5                        0x00005630f656e694 <unavailable> + 5780

    5    libc.so.6                          0x00002b6c8ef52460 __libc_start_main +
    245

    6    tmpl4z78xq5                        0x00005630f656e279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    return nums.sorted{ $0.digit > $1.digit }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpccmn24mz.swift:8:28: error: value of type 'Int' has no member 'digit'\n\
    \    return nums.sorted{ $0.digit > $1.digit }\n                        ~~ ^~~~~\n\
    /tmp/tmpccmn24mz.swift:8:39: error: value of type 'Int' has no member 'digit'\n\
    \    return nums.sorted{ $0.digit > $1.digit }\n                             \
    \      ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.digits.reduce(0,+) }\n    sums.sort\
    \ { $0 < $1 }\n    return sums.map { nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmptk7qjgct.swift:8:30: error: value of type 'Int' has no member 'digits'\n\
    \    var sums = nums.map { $0.digits.reduce(0,+) }\n                         \
    \ ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpet9zsrh0.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpet9zsrh0.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSorted2\
    \ = numsSorted\n    for num in numsSorted {\n        var index = numsSorted2.index(of:\
    \ num)\n        if index != nil {\n            numsSorted2.remove(at: index!)\n\
    \            numsSorted2.insert(num, at: index!)\n        }\n    }\n    return\
    \ numsSorted2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpysh4682q/tmpysh4682q.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada6ab74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada6a86bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada6a86b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada6a86a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpysh4682q                        0x00005591f339c7b4 <unavailable> + 6068

    5    libc.so.6                          0x00002ada6ad60460 __libc_start_main +
    245

    6    tmpysh4682q                        0x00005591f339c399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aDigit = a % 10\n        let bDigit = b % 10\n  \
    \      return aDigit < bDigit || (aDigit == bDigit && a.compare(b) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpc9nspirv.swift:17:58: error: value of type 'Int' has no member\
    \ 'compare'\n        return aDigit < bDigit || (aDigit == bDigit && a.compare(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum: Int = 0\n    var result: [Int] = []\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n\
    \        return aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp13tdpiix/tmp13tdpiix.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388a726c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388a41db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388a41d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388a41c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp13tdpiix                        0x0000556b4bbde634 <unavailable> + 5684

    5    libc.so.6                          0x00002b388a912460 __libc_start_main +
    245

    6    tmp13tdpiix                        0x0000556b4bbde219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aDigit = a % 10\n        let bDigit = b % 10\n  \
    \      return aDigit < bDigit || (aDigit == bDigit && a.compare(b) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmploevdx0j.swift:17:58: error: value of type 'Int' has no member\
    \ 'compare'\n        return aDigit < bDigit || (aDigit == bDigit && a.compare(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum == bSum || (aSum > bSum ? true : false )\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqqmivfyy.swift:15:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map{ $0.reduce(0,+) }\n    sums.sort{ $0 < $1\
    \ }\n    return sums.map{ nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjtyirq5b.swift:8:29: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map{ $0.reduce(0,+) }\n                         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for n in numsSorted {\n        if sum == n {\n            numsSortedBySum.append(n)\n\
    \        }\n    }\n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpbzgy_dpt/tmpbzgy_dpt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ec92b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec8fafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec8faf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec8fae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzgy_dpt                        0x00005605b455e604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8ec94a4460 __libc_start_main +
    245

    6    tmpbzgy_dpt                        0x00005605b455e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let sorted = nums.sorted(by: { $0.digits.reduce(0,+) + $1.digits.reduce(0,+)\
    \ })\n    return sorted.map { $0.index }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpoc3x0b42.swift:8:39: error: value of type 'Int' has no member 'digits'\n\
    \    let sorted = nums.sorted(by: { $0.digits.reduce(0,+) + $1.digits.reduce(0,+)\
    \ })\n                                   ~~ ^~~~~~\n/tmp/tmpoc3x0b42.swift:8:63:\
    \ error: value of type 'Int' has no member 'digits'\n    let sorted = nums.sorted(by:\
    \ { $0.digits.reduce(0,+) + $1.digits.reduce(0,+) })\n                       \
    \                                    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009355
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpet9zsrh0.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpet9zsrh0.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var index = 0\n\
    \    var sumOfDigits = 0\n    for n in nums {\n        sumOfDigits += n % 10\n\
    \        n /= 10\n        while n != 0 {\n            sumOfDigits += n % 10\n\
    \            n /= 10\n        }\n        if sumOfDigits > sum {\n            index\
    \ = numsSorted.index(of: n)!\n            numsSorted.remove(at: index)\n     \
    \       numsSorted.insert(n, at: index)\n        }\n    }\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqzmpbiad.swift:18:11: error: left side of mutating operator isn't\
    \ mutable: 'n' is a 'let' constant\n        n /= 10\n        ~ ^\n/tmp/tmpqzmpbiad.swift:21:15:\
    \ error: left side of mutating operator isn't mutable: 'n' is a 'let' constant\n\
    \            n /= 10\n            ~ ^\n/tmp/tmpqzmpbiad.swift:24:32: warning:\
    \ 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n            index\
    \ = numsSorted.index(of: n)!\n                               ^\n/tmp/tmpqzmpbiad.swift:24:32:\
    \ note: use 'firstIndex(of:)' instead\n            index = numsSorted.index(of:\
    \ n)!\n                               ^~~~~\n                               firstIndex\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var index = 0\n\
    \    while index < nums.count {\n        if sum < nums[index] {\n            swap(&numsSorted[index],\
    \ &nums[index])\n            sum += nums[index]\n        }\n        index += 1\n\
    \    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpp9o53s4z.swift:17:38: error: cannot pass immutable value as inout\
    \ argument: 'nums' is a 'let' constant\n            swap(&numsSorted[index], &nums[index])\n\
    \                                     ^~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy\
    \ = numsSorted.copy()\n    numsSorted.sort()\n    var numsSortedCopy = numsSorted.copy()\n\
    \    for num in numsSorted {\n        if numsSortedCopy.contains(num) {\n    \
    \        numsSortedCopy.remove(num)\n        }\n    }\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpys5ajgip.swift:14:37: error: value of type '[Int]' has no member\
    \ 'copy'\n    var numsSortedCopy = numsSorted.copy()\n                       \
    \  ~~~~~~~~~~ ^~~~\n/tmp/tmpys5ajgip.swift:16:37: error: value of type '[Int]'\
    \ has no member 'copy'\n    var numsSortedCopy = numsSorted.copy()\n         \
    \                ~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map{ $0.reduce(0,+) }\n    sums.sort{ $0 < $1\
    \ }\n    return sums.map{ nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjtyirq5b.swift:8:29: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map{ $0.reduce(0,+) }\n                         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.digits.reduce(0, +) }\n    return nums.sorted\
    \ { sums[$0] < sums[$1] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpd93ltsfd.swift:8:30: error: value of type 'Int' has no member 'digits'\n\
    \    var sums = nums.map { $0.digits.reduce(0, +) }\n                        \
    \  ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = numsSorted.sorted()\n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp9_y1jc1q/tmp9_y1jc1q.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad26a13ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad269e35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad269e35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad269e347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_y1jc1q                        0x000055a0034fc6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ad26a32a460 __libc_start_main +
    245

    6    tmp9_y1jc1q                        0x000055a0034fc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = [Int]()\n    for n in nums {\n        sums.append(n.reduce(0,\
    \ +))\n    }\n    return sums.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvuee03ci.swift:10:23: error: value of type 'Int' has no member\
    \ 'reduce'\n        sums.append(n.reduce(0, +))\n                    ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum < bSum || (aSum == bSum && a.compare(b.toInt()) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7gz6__aa.swift:15:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var i = 0\n  \
    \  for n in nums {\n        if sum < n {\n            swap(&nums[i], &nums[sum])\n\
    \            sum += nums[i]\n        }\n        i += 1\n    }\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpmqvj9n71.swift:17:18: error: cannot pass immutable value as inout\
    \ argument: 'nums' is a 'let' constant\n            swap(&nums[i], &nums[sum])\n\
    \                 ^~~~~\n/tmp/tmpmqvj9n71.swift:17:28: error: cannot pass immutable\
    \ value as inout argument: 'nums' is a 'let' constant\n            swap(&nums[i],\
    \ &nums[sum])\n                           ^~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.insert(n, at: result.index(of: n))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpij5_5wbj.swift:15:41: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            result.insert(n, at: result.index(of: n))\n       \
    \                                 ^\n/tmp/tmpij5_5wbj.swift:15:41: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         result.insert(n, at: result.index(of: n))\n                        \
    \                ^\n                                                     ?? <#default\
    \ value#>\n/tmp/tmpij5_5wbj.swift:15:41: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            result.insert(n,\
    \ at: result.index(of: n))\n                                        ^\n      \
    \                                              !\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSorted2\
    \ = numsSorted.sorted()\n    return numsSorted2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp9yu2p7e5/tmp9yu2p7e5.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35b3f9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35b3c92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35b3c92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35b3c917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9yu2p7e5                        0x00005564c857f6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b35b4187460 __libc_start_main +
    245

    6    tmp9yu2p7e5                        0x00005564c857f289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n    \
    \    return aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmptgxfh6a4/tmptgxfh6a4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002add6084cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002add60543b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002add60543988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002add605427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptgxfh6a4                        0x0000561312833684 <unavailable> + 5764

    5    libc.so.6                          0x00002add60a38460 __libc_start_main +
    245

    6    tmptgxfh6a4                        0x0000561312833269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = [Int]()\n    var result = [Int]()\n    for n in nums\
    \ {\n        sums.append(n.reduce(0, +))\n    }\n    for s in sums {\n       \
    \ if s > 0 {\n            result.insert(s, nums.index(of: s))\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpnnhhe79x.swift:11:23: error: value of type 'Int' has no member\
    \ 'reduce'\n        sums.append(n.reduce(0, +))\n                    ~ ^~~~~~\n\
    /tmp/tmpnnhhe79x.swift:15:20: error: no exact matches in call to instance method\
    \ 'insert'\n            result.insert(s, nums.index(of: s))\n                \
    \   ^\n/tmp/tmpnnhhe79x.swift:15:20: note: candidate has partially matching parameter\
    \ list (__owned Int, at: Int)\n            result.insert(s, nums.index(of: s))\n\
    \                   ^\n/tmp/tmpnnhhe79x.swift:15:20: note: candidate has partially\
    \ matching parameter list (__owned Int, at: Array<Int>.Index)\n            result.insert(s,\
    \ nums.index(of: s))\n                   ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sum = 0\n    for n in numsSorted\
    \ {\n        sum += n\n    }\n    var index = 0\n    for n in numsSorted {\n \
    \       if sum == n {\n            numsSorted.remove(at: index)\n            numsSorted.insert(n,\
    \ at: index)\n        }\n        index += 1\n    }\n    return numsSorted\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmphy_5qjo8/tmphy_5qjo8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae117f84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae117c7bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae117c7b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae117c7a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphy_5qjo8                        0x0000557ad9a6d604 <unavailable> + 5636

    5    libc.so.6                          0x00002ae118170460 __libc_start_main +
    245

    6    tmphy_5qjo8                        0x0000557ad9a6d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for num in numsSorted {\n        if sum == num {\n          \
    \  numsSortedBySum.append(num)\n        }\n    }\n    return numsSortedBySum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpm9hld5th/tmpm9hld5th.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba86f445c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba86f13cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba86f13c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba86f13b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9hld5th                        0x000055baf509b604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba86f631460 __libc_start_main +
    245

    6    tmpm9hld5th                        0x000055baf509b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum == bSum || (aSum > bSum ? true : false )\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqqmivfyy.swift:15:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let len = nums.count\n    var numsSorted = [Int](repeating:\
    \ 0, count: len)\n    for i in 0..<len {\n        let sumOfDigits = nums.reduce(0,\
    \ { $0 + $1 * $1 })\n        numsSorted.append(sumOfDigits)\n    }\n    return\
    \ numsSorted.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpzwhx09mb/tmpzwhx09mb.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad07b2b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad07afaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad07afae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad07afad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzwhx09mb                        0x000055ffa40677a4 <unavailable> + 6052

    5    libc.so.6                          0x00002ad07b4a3460 __libc_start_main +
    245

    6    tmpzwhx09mb                        0x000055ffa4067389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.digits.reduce(0) { $0 + $1 } }\n  \
    \  sums.sort { $0 < $1 }\n    return sums.map { nums[$0] }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp76wxmbjh.swift:8:30: error: value of type 'Int' has no member 'digits'\n\
    \    var sums = nums.map { $0.digits.reduce(0) { $0 + $1 } }\n               \
    \           ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum < bSum || (aSum == bSum && a.compare(to: b) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpriel6kp6.swift:15:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n    \
    \    return aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp8exosb5s/tmp8exosb5s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0120e04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0120afbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0120afb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0120afa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8exosb5s                        0x000056243292f684 <unavailable> + 5764

    5    libc.so.6                          0x00002b0120ff0460 __libc_start_main +
    245

    6    tmp8exosb5s                        0x000056243292f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpet9zsrh0.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpet9zsrh0.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: {$0.0\
    \ < $1.0})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpw6v9sgtb.swift:14:25: error: value of type 'Int' has no member\
    \ '0'\n    result.sort(by: {$0.0 < $1.0})\n                     ~~ ^\n/tmp/tmpw6v9sgtb.swift:14:32:\
    \ error: value of type 'Int' has no member '0'\n    result.sort(by: {$0.0 < $1.0})\n\
    \                            ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        result.append(num)\n    }\n    result.sort { $0.0\
    \ < $1.0 }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp8wfip8iz.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmp8wfip8iz.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    \n    var numsSortedBySum\
    \ = [Int]()\n    for n in nums {\n        if sum == n {\n            numsSortedBySum.append(n)\n\
    \        }\n    }\n    \n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpu3ngp94v/tmpu3ngp94v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c58a6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c58762b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c58762988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c587617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu3ngp94v                        0x000055ec08216604 <unavailable> + 5636

    5    libc.so.6                          0x00002b7c58c57460 __libc_start_main +
    245

    6    tmpu3ngp94v                        0x000055ec082161e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var index\
    \ = 0\n    while index < nums.count {\n        var sumOfDigits = sum\n       \
    \ var numToRemove = nums[index]\n        var indexToRemove = index\n        while\
    \ sumOfDigits > 0 {\n            if sumOfDigits % 10 == numToRemove {\n      \
    \          sumOfDigits /= 10\n                numsSorted.remove(at: indexToRemove)\n\
    \            } else {\n                break\n            }\n            indexToRemove\
    \ += 1\n        }\n        index += 1\n    }\n    return numsSorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpl5tv664i/tmpl5tv664i.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b074b2c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b074afbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b074afbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b074afbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl5tv664i                        0x0000561fd513e7a4 <unavailable> + 6052

    5    libc.so.6                          0x00002b074b4b3460 __libc_start_main +
    245

    6    tmpl5tv664i                        0x0000561fd513e389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = numsSorted.sorted()\n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp9_y1jc1q/tmp9_y1jc1q.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad26a13ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad269e35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad269e35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad269e347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_y1jc1q                        0x000055a0034fc6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ad26a32a460 __libc_start_main +
    245

    6    tmp9_y1jc1q                        0x000055a0034fc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map{ $0.reduce(0,+) }\n    return nums.sorted(by:\
    \ { sums[$0] < sums[$1] }).map { $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpi1kk4z9l.swift:8:29: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map{ $0.reduce(0,+) }\n                         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in nums {\n        let sum =\
    \ n.reduce(0, combine: +)\n        if result.contains(sum) {\n            let\
    \ index = result.index(of: sum)!\n            result[index] = n\n        } else\
    \ {\n            result.append(n)\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpeig87kx2.swift:10:21: error: value of type 'Int' has no member\
    \ 'reduce'\n        let sum = n.reduce(0, combine: +)\n                  ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.digits.reduce(0,+) }\n    return sums.sorted\
    \ { $0 < $1 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9ep74jhq.swift:8:30: error: value of type 'Int' has no member 'digits'\n\
    \    var sums = nums.map { $0.digits.reduce(0,+) }\n                         \
    \ ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpet9zsrh0.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpet9zsrh0.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var index = 0\n\
    \    for n in nums {\n        if sum < n {\n            sum -= nums[index]\n \
    \           index += 1\n        }\n    }\n    return numsSorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpakbkkgbz/tmpakbkkgbz.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad0d6417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad0d610eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad0d610e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad0d610d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpakbkkgbz                        0x000055feb7225654 <unavailable> + 5716

    5    libc.so.6                          0x00002ad0d6603460 __libc_start_main +
    245

    6    tmpakbkkgbz                        0x000055feb7225239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_5ytp6o8/tmp_5ytp6o8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b03d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b03a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b03a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b03a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5ytp6o8                        0x000055a1e1d0d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0b03f76460 __libc_start_main +
    245

    6    tmp_5ytp6o8                        0x000055a1e1d0d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sumOfDigits = nums.reduce(0,\
    \ combine: +)\n    var sumOfDigitsSorted = sumOfDigits\n    var index = 0\n  \
    \  while index < nums.count {\n        let currentSumOfDigits = nums[index] +\
    \ nums[index + 1]\n        if currentSumOfDigits > sumOfDigitsSorted {\n     \
    \       sumOfDigitsSorted = currentSumOfDigits\n            numsSorted = nums.sorted{\
    \ $0 + $1 < $1 }\n        }\n        index += 1\n    }\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpi1esemn7.swift:9:34: error: extraneous argument label 'combine:'\
    \ in call\n    var sumOfDigits = nums.reduce(0, combine: +)\n                \
    \                 ^   ~~~~~~~~~\n                                     \n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\n  \
    \      sum - $0\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmplwixtagj.swift:14:21: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort(by:\
    \ {\n                    ^\n/tmp/tmplwixtagj.swift:15:13: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n        sum - $0\n      \
    \  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum: Int = 0\n    var result: [Int] = []\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3fmyphqn.swift:14:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for n in numsSorted {\n        if sum == 0 {\n            numsSortedBySum.append(n)\n\
    \        } else {\n            for m in numsSorted {\n                if n ==\
    \ m {\n                    continue\n                }\n                if sum\
    \ - n == m {\n                    numsSortedBySum.append(n)\n                \
    \    break\n                }\n            }\n        }\n    }\n    return numsSortedBySum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1_lt4509/tmp1_lt4509.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b608a4f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b608a1ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b608a1ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b608a1eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1_lt4509                        0x000055d546d1e604 <unavailable> + 5636

    5    libc.so.6                          0x00002b608a6e1460 __libc_start_main +
    245

    6    tmp1_lt4509                        0x000055d546d1e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    sums.sort\
    \ { $0 < $1 }\n    return sums.map { nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7smdw70q.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n                      \
    \    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sumOfDigits = nums.reduce(0,\
    \ combine: +)\n    var index = 0\n    while index < nums.count {\n        let\
    \ nextIndex = index + 1\n        let nextSumOfDigits = sumOfDigits + nums[index]\n\
    \        if nextSumOfDigits > sumOfDigits {\n            numsSorted = numsSorted.sorted()\n\
    \            sumOfDigits = nextSumOfDigits\n            index = nextIndex\n  \
    \      } else {\n            sumOfDigits = nextSumOfDigits\n        }\n    }\n\
    \    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpmxrj69un.swift:9:34: error: extraneous argument label 'combine:'\
    \ in call\n    var sumOfDigits = nums.reduce(0, combine: +)\n                \
    \                 ^   ~~~~~~~~~\n                                     \n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for n in numsSorted {\n        if sum == n {\n            numsSortedBySum.append(n)\n\
    \        }\n    }\n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpbzgy_dpt/tmpbzgy_dpt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ec92b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec8fafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec8faf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec8fae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzgy_dpt                        0x00005605b455e604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8ec94a4460 __libc_start_main +
    245

    6    tmpbzgy_dpt                        0x00005605b455e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sumOfDigits = nums.reduce(0,\
    \ combine: +)\n    var index = 0\n    while index < nums.count {\n        let\
    \ sum = nums[index] + nums[index + 1]\n        if sumOfDigits > sum {\n      \
    \      numsSorted = numsSorted.sorted()\n        }\n        sumOfDigits -= sum\n\
    \        index += 1\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphyttcaie.swift:9:34: error: extraneous argument label 'combine:'\
    \ in call\n    var sumOfDigits = nums.reduce(0, combine: +)\n                \
    \                 ^   ~~~~~~~~~\n                                     \n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for n in numsSorted {\n        if sum == n {\n            numsSortedBySum.append(n)\n\
    \        }\n    }\n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpbzgy_dpt/tmpbzgy_dpt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ec92b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec8fafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec8faf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec8fae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzgy_dpt                        0x00005605b455e604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8ec94a4460 __libc_start_main +
    245

    6    tmpbzgy_dpt                        0x00005605b455e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(sum)\n    }\n    return result.sorted(by:\
    \ { (a, b) -> Bool in\n        return a < b\n    })\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpfox2prvc/tmpfox2prvc.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b132d14fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b132ce46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b132ce46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b132ce457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfox2prvc                        0x000055b492d35674 <unavailable> + 5748

    5    libc.so.6                          0x00002b132d33b460 __libc_start_main +
    245

    6    tmpfox2prvc                        0x000055b492d35259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    var sorted\
    \ = nums.sorted()\n    var result = [Int]()\n    for idx in 0..<nums.count {\n\
    \        let sum = sums[idx]\n        if sorted.contains(&sum) {\n           \
    \ result.insert(sorted[idx], at: idx)\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpppbsgxtr.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n                      \
    \    ~~ ^~~~~~\n/tmp/tmpppbsgxtr.swift:13:12: error: generic parameter 'C' could\
    \ not be inferred\n        if sorted.contains(&sum) {\n           ^\n_StringProcessing.Collection:3:17:\
    \ note: in call to function 'contains'\n    public func contains<C>(_ other: C)\
    \ -> Bool where C : Collection, Self.Element == C.Element\n                ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var i = 0\n  \
    \  while i < nums.count {\n        if sum < numsSorted[i] {\n            swap(&numsSorted[i],\
    \ &numsSorted[sum])\n            sum += numsSorted[i]\n        }\n        i +=\
    \ 1\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpc90z35e3.swift:17:18: error: overlapping accesses to 'numsSorted',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&numsSorted[i], &numsSorted[sum])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \            numsSorted.swapAt(i, sum)\n/tmp/tmpc90z35e3.swift:17:34: note: conflicting\
    \ access is here\n            swap(&numsSorted[i], &numsSorted[sum])\n       \
    \                          ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_5ytp6o8/tmp_5ytp6o8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b03d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b03a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b03a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b03a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5ytp6o8                        0x000055a1e1d0d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0b03f76460 __libc_start_main +
    245

    6    tmp_5ytp6o8                        0x000055a1e1d0d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let numsSorted = nums.sorted { $0.digits < $1.digits }\n   \
    \ return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqgucfgaa.swift:8:39: error: value of type 'Int' has no member 'digits'\n\
    \    let numsSorted = nums.sorted { $0.digits < $1.digits }\n                \
    \                   ~~ ^~~~~~\n/tmp/tmpqgucfgaa.swift:8:51: error: value of type\
    \ 'Int' has no member 'digits'\n    let numsSorted = nums.sorted { $0.digits <\
    \ $1.digits }\n                                               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let len = nums.count\n    var sums = nums.map { $0.digits }\n\
    \    var sorted = [Int]()\n    for i in 0..<len {\n        let sum = sums[i]\n\
    \        if sorted.contains(sum) {\n            sorted.remove(at: sorted.index(of:\
    \ sum))\n        } else {\n            sorted.append(sum)\n        }\n    }\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpnreed9cn.swift:9:30: error: value of type 'Int' has no member 'digits'\n\
    \    var sums = nums.map { $0.digits }\n                          ~~ ^~~~~~\n\
    /tmp/tmpnreed9cn.swift:14:38: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n            sorted.remove(at: sorted.index(of: sum))\n        \
    \                             ^\n/tmp/tmpnreed9cn.swift:14:38: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \         sorted.remove(at: sorted.index(of: sum))\n                         \
    \            ^\n                                                    ?? <#default\
    \ value#>\n/tmp/tmpnreed9cn.swift:14:38: note: force-unwrap using '!' to abort\
    \ execution if the optional value contains 'nil'\n            sorted.remove(at:\
    \ sorted.index(of: sum))\n                                     ^\n           \
    \                                        !\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpet9zsrh0.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpet9zsrh0.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.insert(n, at: result.endIndex)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmph7mk2yn4/tmph7mk2yn4.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ca1ebfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ca1bb6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ca1bb6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ca1bb57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph7mk2yn4                        0x00005637bee41664 <unavailable> + 5732

    5    libc.so.6                          0x00002b8ca20ab460 __libc_start_main +
    245

    6    tmph7mk2yn4                        0x00005637bee41249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for num in numsSorted {\n        if sum == num {\n          \
    \  numsSortedBySum.append(num)\n        }\n    }\n    return numsSortedBySum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpm9hld5th/tmpm9hld5th.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba86f445c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba86f13cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba86f13c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba86f13b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9hld5th                        0x000055baf509b604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba86f631460 __libc_start_main +
    245

    6    tmpm9hld5th                        0x000055baf509b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum: Int = 0\n    var result: [Int] = []\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort(by: {\
    \ (a: Int, b: Int) -> Bool in\n        let diff = a*10 + b - sum\n        return\
    \ diff < 0\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpj3a51hai/tmpj3a51hai.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad70aec0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad70abb7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad70abb7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad70abb67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj3a51hai                        0x000055b0991cc634 <unavailable> + 5684

    5    libc.so.6                          0x00002ad70b0ac460 __libc_start_main +
    245

    6    tmpj3a51hai                        0x000055b0991cc219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    return nums.sorted(by: { (a, b) -> Bool in\n        let sum1\
    \ = Int(String(describing: a).characters.reduce(\"\")) { sum, char in\n      \
    \      return sum + String(char).characters.reduce(\"\") + String(char)\n    \
    \    }\n        let sum2 = Int(String(describing: b).characters.reduce(\"\"))\
    \ { sum, char in\n            return sum + String(char).characters.reduce(\"\"\
    ) + String(char)\n        }\n        return sum1 < sum2\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpq8b058jg.swift:8:12: error: the compiler is unable to type-check\
    \ this expression in reasonable time; try breaking up the expression into distinct\
    \ sub-expressions\n    return nums.sorted(by: { (a, b) -> Bool in\n          \
    \ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = [Int]()\n    var indexes = [Int]()\n    for n in\
    \ nums {\n        sums.append(n.reduce(0, +))\n        indexes.append(n)\n   \
    \ }\n    sums.sortInPlace()\n    sums.reverse()\n    return sums.map { indexes[$0]\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmplwipl1n7.swift:11:23: error: value of type 'Int' has no member\
    \ 'reduce'\n        sums.append(n.reduce(0, +))\n                    ~ ^~~~~~\n\
    /tmp/tmplwipl1n7.swift:14:10: error: value of type '[Int]' has no member 'sortInPlace'\n\
    \    sums.sortInPlace()\n    ~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpg90nz7rm/tmpg90nz7rm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5d986d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5d983c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5d983c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5d983c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg90nz7rm                        0x0000557326e065a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b5d988be460 __libc_start_main +
    245

    6    tmpg90nz7rm                        0x0000557326e06189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map{ $0.reduce(0,+) }\n    sums.sort{ $0.0 <\
    \ $1.0 }\n    return sums.map{ nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpyg5smo6r.swift:8:29: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map{ $0.reduce(0,+) }\n                         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for num in numsSorted {\n        if sum == num {\n          \
    \  numsSortedBySum.append(num)\n        }\n    }\n    return numsSortedBySum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpm9hld5th/tmpm9hld5th.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba86f445c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba86f13cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba86f13c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba86f13b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9hld5th                        0x000055baf509b604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba86f631460 __libc_start_main +
    245

    6    tmpm9hld5th                        0x000055baf509b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let sum = nums.reduce(0, combine: +)\n    return nums.sorted\
    \ { $0 + $1 < sum }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfdle09ya.swift:8:26: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = nums.reduce(0, combine: +)\n                        \
    \ ^   ~~~~~~~~~\n                             \n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map{$0.reduce(0,+)}\n    sums.sort{$0+$1 < $1}\n\
    \    return sums.map{$0*10 + $1}\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvd61tlgj.swift:8:28: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map{$0.reduce(0,+)}\n                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum < n {\n        \
    \    result.insert(sum, at: 0)\n            sum += n\n        } else {\n     \
    \       result.insert(n, at: 0)\n            sum -= n\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnn35bgnf/tmpnn35bgnf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b2a34dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b2a044b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b2a044988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b2a0437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnn35bgnf                        0x000055f1c0fd3604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8b2a539460 __libc_start_main +
    245

    6    tmpnn35bgnf                        0x000055f1c0fd31e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let digits = nums.map({ String($0) })\n    let sum = digits.reduce(0)\
    \ { $0 + $1 }\n    return digits.sorted(by: { sum - $0.reduce(0, +) })\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6rhd3z6d.swift:9:39: error: cannot convert value of type 'String'\
    \ to expected argument type 'Int'\n    let sum = digits.reduce(0) { $0 + $1 }\n\
    \                                      ^\n/tmp/tmp6rhd3z6d.swift:10:30: error:\
    \ contextual closure type '(String, String) throws -> Bool' expects 2 arguments,\
    \ but 1 was used in closure body\n    return digits.sorted(by: { sum - $0.reduce(0,\
    \ +) })\n                             ^\n/tmp/tmp6rhd3z6d.swift:10:19: error:\
    \ cannot convert return expression of type '[String]' to return type '[Int]'\n\
    \    return digits.sorted(by: { sum - $0.reduce(0, +) })\n                  ^\n\
    /tmp/tmp6rhd3z6d.swift:10:19: note: arguments to generic parameter 'Element' ('String'\
    \ and 'Int') are expected to be equal\n    return digits.sorted(by: { sum - $0.reduce(0,\
    \ +) })\n                  ^\n/tmp/tmp6rhd3z6d.swift:10:36: error: cannot convert\
    \ value of type 'Int' to closure result type 'Bool'\n    return digits.sorted(by:\
    \ { sum - $0.reduce(0, +) })\n                               ~~~~^~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6rhd3z6d.swift:10:51: error: cannot convert value of type '(Int) -> Int'\
    \ to expected argument type '(Int, String.Element) throws -> Int' (aka '(Int,\
    \ Character) throws -> Int')\n    return digits.sorted(by: { sum - $0.reduce(0,\
    \ +) })\n                                                  ^\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum < n {\n        \
    \    result.insert(sum, at: 0)\n            sum += n\n        } else {\n     \
    \       result.insert(n, at: 0)\n            sum -= n\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnn35bgnf/tmpnn35bgnf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b2a34dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b2a044b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b2a044988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b2a0437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnn35bgnf                        0x000055f1c0fd3604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8b2a539460 __libc_start_main +
    245

    6    tmpnn35bgnf                        0x000055f1c0fd31e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        if a\
    \ < b {\n            return true\n        }\n        if a > b {\n            return\
    \ false\n        }\n        return aSum < bSum\n    })\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp78eefq8q/tmp78eefq8q.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6909b6ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6909861b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6909861988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b69098607b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp78eefq8q                        0x0000557d8ee32684 <unavailable> + 5764

    5    libc.so.6                          0x00002b6909d56460 __libc_start_main +
    245

    6    tmp78eefq8q                        0x0000557d8ee32269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        result.append(num)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum < bSum || (aSum == bSum && a.compare(to: b) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpohdktzl4.swift:15:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let numsSorted = nums.sorted()\n    var sum = 0\n    var index\
    \ = 0\n    var result = [Int]()\n    for num in numsSorted {\n        sum += num\n\
    \        if sum > 9 {\n            sum -= 10\n            index += 1\n       \
    \ }\n        result.append(num)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmps2ajez2l/tmps2ajez2l.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b249badac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b249b7d1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b249b7d1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b249b7d07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps2ajez2l                        0x0000557c28e3d6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002b249bcc6460 __libc_start_main +
    245

    6    tmps2ajez2l                        0x0000557c28e3d289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let numsSorted = nums.sorted()\n    let sums = numsSorted.map\
    \ { $0.reduce(0) { $0 + $1 } }\n    return numsSorted.map { sums[$0] }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1etnu_yu.swift:9:36: error: value of type 'Int' has no member 'reduce'\n\
    \    let sums = numsSorted.map { $0.reduce(0) { $0 + $1 } }\n                \
    \                ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        if aSum\
    \ > bSum {\n            return true\n        }\n        if aSum < bSum {\n   \
    \         return false\n        }\n        return a.0 > b.0\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp8z2bqcky.swift:23:18: error: value of type 'Int' has no member\
    \ '0'\n        return a.0 > b.0\n               ~ ^\n/tmp/tmp8z2bqcky.swift:23:24:\
    \ error: value of type 'Int' has no member '0'\n        return a.0 > b.0\n   \
    \                  ~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        let aIndex\
    \ = a.hashValue % aSum\n        let bIndex = b.hashValue % bSum\n        return\
    \ aIndex < bIndex\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpcbboglmk/tmpcbboglmk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b57f4727c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b57f441eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b57f441e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b57f441d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcbboglmk                        0x000056227c461764 <unavailable> + 5988

    5    libc.so.6                          0x00002b57f4913460 __libc_start_main +
    245

    6    tmpcbboglmk                        0x000056227c461349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    \n    var numsSorted2\
    \ = numsSorted\n    \n    for n in numsSorted {\n        var index = numsSorted2.index(of:\
    \ n)\n        if index != nil {\n            numsSorted2.remove(at: index!)\n\
    \        }\n    }\n    \n    return numsSorted2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpwzehfwrz/tmpwzehfwrz.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10fd1eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10fcee5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10fcee5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10fcee47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwzehfwrz                        0x0000555ebc28a754 <unavailable> + 5972

    5    libc.so.6                          0x00002b10fd3da460 __libc_start_main +
    245

    6    tmpwzehfwrz                        0x0000555ebc28a339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    return\
    \ sums.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpd8w018hd.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n                      \
    \    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sum = 0\n    for num in numsSorted\
    \ {\n        sum += num\n    }\n    var index = 0\n    for num in numsSorted {\n\
    \        if sum < num {\n            numsSorted.swapAt(index, numsSorted.index(numsSorted.startIndex,\
    \ offsetBy: index))\n            sum += num\n        }\n        index += 1\n \
    \   }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpzj33c88x/tmpzj33c88x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8902349c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8902040b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8902040988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b890203f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzj33c88x                        0x000055f0f69156b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b8902535460 __libc_start_main +
    245

    6    tmpzj33c88x                        0x000055f0f6915299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map{ $0.reduce(0,+) }\n    return nums.sorted(by:\
    \ { sums[$0] < sums[$1] }).map { $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpi1kk4z9l.swift:8:29: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map{ $0.reduce(0,+) }\n                         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sumOfDigits = nums.reduce(0,\
    \ +)\n    var index = 0\n    while index < nums.count {\n        let currentSum\
    \ = sumOfDigits % 10\n        if currentSum == 0 {\n            numsSorted.append(nums[index])\n\
    \            sumOfDigits /= 10\n        } else {\n            if sumOfDigits <\
    \ nums[index] {\n                numsSorted.append(nums[index])\n            \
    \    sumOfDigits += nums[index]\n            } else {\n                sumOfDigits\
    \ -= nums[index]\n                index++\n            }\n        }\n    }\n \
    \   return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpzw6m7uut.swift:22:22: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n                index++\n                     ^~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    sums.sort\
    \ { $0 < $1 }\n    return sums.map { nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7smdw70q.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n                      \
    \    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_5ytp6o8/tmp_5ytp6o8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b03d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b03a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b03a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b03a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5ytp6o8                        0x000055a1e1d0d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0b03f76460 __libc_start_main +
    245

    6    tmp_5ytp6o8                        0x000055a1e1d0d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = [Int]()\n    var index = 0\n    for n in nums {\n\
    \        sums.append(n.toInt())\n    }\n    sums.sort()\n    var result = [Int]()\n\
    \    for n in sums {\n        result.append(nums[index])\n        index += 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp1nkmibuj.swift:11:23: error: value of type 'Int' has no member\
    \ 'toInt'\n        sums.append(n.toInt())\n                    ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum < bSum || (aSum == bSum && a.compare(b.toInt()) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpybvf83b6.swift:15:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = numsSorted.sorted()\n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp9_y1jc1q/tmp9_y1jc1q.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad26a13ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad269e35b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad269e35988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad269e347b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9_y1jc1q                        0x000055a0034fc6a4 <unavailable> + 5796

    5    libc.so.6                          0x00002ad26a32a460 __libc_start_main +
    245

    6    tmp9_y1jc1q                        0x000055a0034fc289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    numsSorted.sort()\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpdypr2qwe/tmpdypr2qwe.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebc0cdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebc09d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebc09d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebc09d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdypr2qwe                        0x00005616b7a3c504 <unavailable> + 5380

    5    libc.so.6                          0x00002aebc0ec7460 __libc_start_main +
    245

    6    tmpdypr2qwe                        0x00005616b7a3c0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum < bSum || (aSum == bSum && a.compare(b.toInt()) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpybvf83b6.swift:15:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    return nums.sorted { $0.digits + $1.digits < $1.digits + $0.digits\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpxgw6yfc8.swift:8:29: error: value of type 'Int' has no member 'digits'\n\
    \    return nums.sorted { $0.digits + $1.digits < $1.digits + $0.digits }\n  \
    \                       ~~ ^~~~~~\n/tmp/tmpxgw6yfc8.swift:8:41: error: value of\
    \ type 'Int' has no member 'digits'\n    return nums.sorted { $0.digits + $1.digits\
    \ < $1.digits + $0.digits }\n                                     ~~ ^~~~~~\n\
    /tmp/tmpxgw6yfc8.swift:8:53: error: value of type 'Int' has no member 'digits'\n\
    \    return nums.sorted { $0.digits + $1.digits < $1.digits + $0.digits }\n  \
    \                                               ~~ ^~~~~~\n/tmp/tmpxgw6yfc8.swift:8:65:\
    \ error: value of type 'Int' has no member 'digits'\n    return nums.sorted {\
    \ $0.digits + $1.digits < $1.digits + $0.digits }\n                          \
    \                                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.digits.reduce(0,+) }\n    sums.sort\
    \ { $0 > $1 }\n    return sums.map { nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmphivq5em2.swift:8:30: error: value of type 'Int' has no member 'digits'\n\
    \    var sums = nums.map { $0.digits.reduce(0,+) }\n                         \
    \ ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var i = 0\n\
    \    for num in numsSorted {\n        if num != numsSorted[i] {\n            swap(&numsSorted[i],\
    \ &num)\n            i += 1\n        }\n    }\n    return numsSorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpdhfnzx7m.swift:17:34: error: cannot pass immutable value as inout\
    \ argument: 'num' is a 'let' constant\n            swap(&numsSorted[i], &num)\n\
    \                                 ^~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let sums = nums.map({ $0.reduce(0) { $0 + $1 * 10 } })\n   \
    \ return sums.sorted(by: { $0.0 < $1.0 }).map { $0.1 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3_0in7xi.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    let sums = nums.map({ $0.reduce(0) { $0 + $1 * 10 } })\n                \
    \          ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        if aSum == bSum {\n            return a.toInt() < b.toInt()\n       \
    \ }\n        return aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpkvb3luv2.swift:15:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map{ $0.reduce(0,+) }\n    return nums.sorted{\
    \ sums[$0] < sums[$1] }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmppyjnifx2.swift:8:29: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map{ $0.reduce(0,+) }\n                         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    sums.sort\
    \ { $0 < $1 }\n    return sums.map { nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7smdw70q.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n                      \
    \    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var i = 0\n\
    \    while i < nums.count {\n        if sum < numsSorted[i] {\n            swap(&numsSorted[i],\
    \ &numsSorted[sum])\n            sum += numsSorted[i]\n        }\n        i +=\
    \ 1\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpj7zhhh5k.swift:17:18: error: overlapping accesses to 'numsSorted',\
    \ but modification requires exclusive access; consider calling MutableCollection.swapAt(_:_:)\n\
    \            swap(&numsSorted[i], &numsSorted[sum])\n            ~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \            numsSorted.swapAt(i, sum)\n/tmp/tmpj7zhhh5k.swift:17:34: note: conflicting\
    \ access is here\n            swap(&numsSorted[i], &numsSorted[sum])\n       \
    \                          ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var index\
    \ = 0\n    while index < numsSorted.count {\n        if sum < numsSorted[index]\
    \ {\n            swap(&numsSorted[index], &numsSorted[sum])\n            sum +=\
    \ numsSorted[index]\n            index++\n        }\n    }\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp_t2x4iel.swift:19:18: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n            index++\n                 ^~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3n4iyzn7.swift:14:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpkppgmss7.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpkppgmss7.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in nums {\n        let sum =\
    \ n.reduce(0, +) + n.reduce(0, *)\n        result.insert(sum, at: nums.index(n))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmprv56pcg0.swift:10:21: error: value of type 'Int' has no member\
    \ 'reduce'\n        let sum = n.reduce(0, +) + n.reduce(0, *)\n              \
    \    ~ ^~~~~~\n/tmp/tmprv56pcg0.swift:10:38: error: value of type 'Int' has no\
    \ member 'reduce'\n        let sum = n.reduce(0, +) + n.reduce(0, *)\n       \
    \                            ~ ^~~~~~\n/tmp/tmprv56pcg0.swift:11:37: error: no\
    \ exact matches in call to instance method 'index'\n        result.insert(sum,\
    \ at: nums.index(n))\n                                    ^\n/tmp/tmprv56pcg0.swift:11:37:\
    \ note: found candidate with type '(Int) -> Int'\n        result.insert(sum, at:\
    \ nums.index(n))\n                                    ^\n/tmp/tmprv56pcg0.swift:11:37:\
    \ note: found candidate with type '(Int) -> Int'\n        result.insert(sum, at:\
    \ nums.index(n))\n                                    ^\n"
  stdout: ''
  timestamp: 1660009364
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum < n {\n        \
    \    result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpmo072944/tmpmo072944.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eca01ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec9d11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec9d11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec9d107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo072944                        0x00005637a5c40604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8eca206460 __libc_start_main +
    245

    6    tmpmo072944                        0x00005637a5c401e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sum = 0\n    for num in numsSorted\
    \ {\n        sum += num\n    }\n    var index = 0\n    while index < numsSorted.count\
    \ {\n        var sumOfDigits = sum\n        var currentSum = 0\n        for num\
    \ in numsSorted {\n            currentSum += num\n            if currentSum >\
    \ sumOfDigits {\n                numsSorted.remove(at: index)\n              \
    \  numsSorted.insert(num, at: index)\n                sumOfDigits = currentSum\n\
    \                break\n            }\n        }\n        index += 1\n    }\n\
    \    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpwfbiktew/tmpwfbiktew.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afced82fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afced526b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afced526988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afced5257b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwfbiktew                        0x0000559fe32dc664 <unavailable> + 5732

    5    libc.so.6                          0x00002afceda1b460 __libc_start_main +
    245

    6    tmpwfbiktew                        0x0000559fe32dc249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpet9zsrh0.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpet9zsrh0.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in nums {\n        var sum =\
    \ 0\n        for d in n.toString() {\n            sum += Int(d)!\n        }\n\
    \        if result.contains(sum) {\n            result.sort(by: {$0 > $1})\n \
    \       } else {\n            result.append(n)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7et0uvds.swift:11:20: error: value of type 'Int' has no member\
    \ 'toString'\n        for d in n.toString() {\n                 ~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in nums {\n        let digits\
    \ = n.digits\n        let sum = digits.reduce(0, +)\n        if result.contains(sum)\
    \ {\n            result.sort(by: { (a, b) -> Bool in\n                let aDigits\
    \ = a.digits\n                let bDigits = b.digits\n                let aSum\
    \ = aDigits.reduce(0, +)\n                let bSum = bDigits.reduce(0, +)\n  \
    \              return aSum < bSum || (aSum == bSum && aDigits.index(a) < bDigits.index(b))\n\
    \            })\n        } else {\n            result.append(n)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpe4ndc8c6.swift:10:24: error: value of type 'Int' has no member\
    \ 'digits'\n        let digits = n.digits\n                     ~ ^~~~~~\n/tmp/tmpe4ndc8c6.swift:14:33:\
    \ error: value of type 'Int' has no member 'digits'\n                let aDigits\
    \ = a.digits\n                              ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum < bSum || (aSum == aSum && bSum < bSum)\n    })\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpp9dp2sla.swift:15:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sum = 0\n    for n in numsSorted\
    \ {\n        sum += n\n    }\n    var index = 0\n    var index2 = 0\n    var index3\
    \ = 0\n    var index4 = 0\n    var index5 = 0\n    var index6 = 0\n    var index7\
    \ = 0\n    var index8 = 0\n    var index9 = 0\n    var index10 = 0\n    var index11\
    \ = 0\n    var index12 = 0\n    var index13 = 0\n    var index14 = 0\n    var\
    \ index15 = 0\n    var index16 = 0\n    var index17 = 0\n    var index18 = 0\n\
    \    var index19 = 0\n    var index20 = 0\n    var index21 = 0\n    var index22\
    \ = 0\n    var index23 = 0\n    var index24 = 0\n    var index25 = 0\n    var\
    \ index26 = 0\n    var index27 = 0\n    var index28 = 0\n    var index29 = 0\n\
    \    var index30 = 0\n    var index31 = 0\n    var index32 = 0\n    var index33\
    \ = 0\n    var index34 = 0\n    var index35 = 0\n    var index36 = 0\n    var\
    \ index37 = 0\n    var index38 = 0\n    var index39 = 0\n    var index40 = 0\n\
    \    var index41 = 0\n    var index42 = 0\n    var index43 = 0\n    var index44\
    \ = 0\n    var index45 = 0\n    var index46 = 0\n    var index47 = 0\n    var\
    \ index48 = 0\n    var index49 = 0\n    var index50 = 0\n    var index51 = 0\n\
    \    var index52 = 0\n    var index53 = 0\n    var index54 = 0\n    var index55\
    \ = 0\n    var index56 = 0\n    var index57 = 0\n    var index58 = 0\n    var\
    \ index59 = 0\n    var index60 = 0\n    var index61 = 0\n    var index62 = 0\n\
    \    var index63 = 0\n    var index64 = 0\n    var index65 = 0\n    var index66\
    \ = 0\n    var index67 = 0\n    var index68 = 0\n    var index69 = 0\n    var\
    \ index70 = 0\n    var index71 = 0\n    var index72 = 0\n    var index73 = 0\n\
    \    var index74 = 0\n    var index75 = 0\n    var index76 = 0\n    var index77\
    \ = 0\n    var index78 = 0\n    var index79 = 0\n    var index80 = 0\n    var\
    \ index81 = 0\n    var index82 = 0\n    var index83 = 0\n    var index84 = 0\n\
    \    var index85 = 0\n    var index86 = 0\n    var index87 = 0\n    var index88\
    \ = 0\n    var index89 = 0\n    var index90 = 0\n    var index91 = 0\n    var\
    \ index92 = 0\n    var index93 = 0\n    var index94 = 0\n    var index95 = 0\n\
    \    var index96 = 0\n    var index97 = 0\n    var index\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpq7th21qs.swift:110:9: error: type annotation missing in pattern\n\
    \    var index\n        ^\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let sum = nums.reduce(0, combine: +)\n    return nums.sorted(by:\
    \ { $0.0 < $1.0 }).sorted(by: { $0.0 < $1.0 })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp59pe0d5s.swift:8:26: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = nums.reduce(0, combine: +)\n                        \
    \ ^   ~~~~~~~~~\n                             \n/tmp/tmp59pe0d5s.swift:9:33: error:\
    \ value of type 'Int' has no member '0'\n    return nums.sorted(by: { $0.0 < $1.0\
    \ }).sorted(by: { $0.0 < $1.0 })\n                             ~~ ^\n/tmp/tmp59pe0d5s.swift:9:40:\
    \ error: value of type 'Int' has no member '0'\n    return nums.sorted(by: { $0.0\
    \ < $1.0 }).sorted(by: { $0.0 < $1.0 })\n                                    ~~\
    \ ^\n/tmp/tmp59pe0d5s.swift:9:61: error: value of type 'Int' has no member '0'\n\
    \    return nums.sorted(by: { $0.0 < $1.0 }).sorted(by: { $0.0 < $1.0 })\n   \
    \                                                      ~~ ^\n/tmp/tmp59pe0d5s.swift:9:68:\
    \ error: value of type 'Int' has no member '0'\n    return nums.sorted(by: { $0.0\
    \ < $1.0 }).sorted(by: { $0.0 < $1.0 })\n                                    \
    \                            ~~ ^\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    return nums.sorted { $0.digits + $1.digits < $1.digits + $0.digits\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpxgw6yfc8.swift:8:29: error: value of type 'Int' has no member 'digits'\n\
    \    return nums.sorted { $0.digits + $1.digits < $1.digits + $0.digits }\n  \
    \                       ~~ ^~~~~~\n/tmp/tmpxgw6yfc8.swift:8:41: error: value of\
    \ type 'Int' has no member 'digits'\n    return nums.sorted { $0.digits + $1.digits\
    \ < $1.digits + $0.digits }\n                                     ~~ ^~~~~~\n\
    /tmp/tmpxgw6yfc8.swift:8:53: error: value of type 'Int' has no member 'digits'\n\
    \    return nums.sorted { $0.digits + $1.digits < $1.digits + $0.digits }\n  \
    \                                               ~~ ^~~~~~\n/tmp/tmpxgw6yfc8.swift:8:65:\
    \ error: value of type 'Int' has no member 'digits'\n    return nums.sorted {\
    \ $0.digits + $1.digits < $1.digits + $0.digits }\n                          \
    \                                   ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpet9zsrh0.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpet9zsrh0.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n        result.append(num)\n    }\n    result.sort(by: {\
    \ (a, b) -> Bool in\n        let aSum = a.toInt()\n        let bSum = b.toInt()\n\
    \        return aSum == bSum ? a.compare(b) == .orderedAscending : aSum < bSum\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpghieg7tx.swift:15:22: error: value of type 'Int' has no member\
    \ 'toInt'\n        let aSum = a.toInt()\n                   ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    var index = 0\n    while\
    \ index < result.count {\n        var sum = 0\n        for n in result {\n   \
    \         sum += n\n            if sum > index {\n                result.remove(at:\
    \ index)\n                result.insert(sum - index, at: index)\n            \
    \    break\n            }\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpzcjdnev3/tmpzcjdnev3.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b60c29fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b60c26f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b60c26f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b60c26f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzcjdnev3                        0x00005594ce0c0704 <unavailable> + 5892

    5    libc.so.6                          0x00002b60c2be6460 __libc_start_main +
    245

    6    tmpzcjdnev3                        0x00005594ce0c02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var index = 0\n\
    \    var currentSum = 0\n    var currentIndex = 0\n    while index < nums.count\
    \ {\n        currentSum = sum\n        currentIndex = index\n        while currentIndex\
    \ < nums.count {\n            if currentSum - nums[currentIndex] < 0 {\n     \
    \           currentSum += nums[currentIndex]\n                currentIndex +=\
    \ 1\n            } else {\n                break\n            }\n        }\n \
    \       numsSorted.insert(numsSorted[index], at: currentIndex)\n        index\
    \ += 1\n    }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnmar5iaf/tmpnmar5iaf.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b225732cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2257023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2257023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22570227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnmar5iaf                        0x00005570d4746704 <unavailable> + 5892

    5    libc.so.6                          0x00002b2257518460 __libc_start_main +
    245

    6    tmpnmar5iaf                        0x00005570d47462e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aDigit = a % 10\n        let bDigit = b % 10\n  \
    \      return aDigit < bDigit || (aDigit == bDigit && a.compareTo(b) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfps19zsb.swift:17:58: error: value of type 'Int' has no member\
    \ 'compareTo'\n        return aDigit < bDigit || (aDigit == bDigit && a.compareTo(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.reduce([Int](), { (sums, num) -> [Int] in\n\
    \        var s = sums.reduce(0, {$0 + $1}) + num\n        sums.append(s)\n   \
    \     return sums\n    })\n    sums.sort { (sum1, sum2) -> Bool in\n        return\
    \ sum1 < sum2\n    }\n    return sums\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4amaeuih.swift:10:14: error: cannot use mutating member on immutable\
    \ value: 'sums' is a 'let' constant\n        sums.append(s)\n        ~~~~ ^\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = [Int]()\n    for n in nums {\n        sums.append(n.reduce(0,\
    \ +))\n    }\n    return nums.sorted { sums[$0] > sums[$1] }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpds2v7x1p.swift:10:23: error: value of type 'Int' has no member\
    \ 'reduce'\n        sums.append(n.reduce(0, +))\n                    ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpet9zsrh0.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpet9zsrh0.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    sums.sort\
    \ { $0.0 < $1.0 }\n    return sums.map { nums[$0] }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpc0mh9y08.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n                      \
    \    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    for num in nums {\n        let digits\
    \ = num.digits\n        var sum = 0\n        for d in digits {\n            sum\
    \ += d\n        }\n        if result.contains(sum) {\n            result.sort(by:\
    \ {$0 < $1})\n        } else {\n            result.append(num)\n        }\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpgx582iy2.swift:10:26: error: value of type 'Int' has no member\
    \ 'digits'\n        let digits = num.digits\n                     ~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum < n {\n        \
    \    result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpmo072944/tmpmo072944.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eca01ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec9d11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec9d11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec9d107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo072944                        0x00005637a5c40604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8eca206460 __libc_start_main +
    245

    6    tmpmo072944                        0x00005637a5c401e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    return nums.sorted(by: { (a, b) -> Bool in\n        let sumA\
    \ = Int(truncating: Double(a) / 10)\n        let sumB = Int(truncating: Double(b)\
    \ / 10)\n        return sumA > sumB\n    })\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpaphy24lx.swift:9:23: error: extraneous argument label 'truncating:'\
    \ in call\n        let sumA = Int(truncating: Double(a) / 10)\n              \
    \        ^~~~~~~~~~~~~\n                       \n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy\
    \ = numsSorted\n    for num in numsSorted {\n        var index = numsSortedCopy.index(of:\
    \ num)\n        if index != nil {\n            numsSortedCopy.remove(at: index!)\n\
    \            numsSortedCopy.insert(num, at: 0)\n        }\n    }\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_hp1fcxr/tmp_hp1fcxr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9541525c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b954121cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b954121c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b954121b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_hp1fcxr                        0x000055893cd1f7b4 <unavailable> + 6068

    5    libc.so.6                          0x00002b9541711460 __libc_start_main +
    245

    6    tmp_hp1fcxr                        0x000055893cd1f399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum < n {\n        \
    \    result.insert(sum, at: 0)\n            sum -= n\n        } else {\n     \
    \       result.insert(n, at: 0)\n            sum += n\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpomt6bo8l/tmpomt6bo8l.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0d87d76c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0d87a6db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0d87a6d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0d87a6c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpomt6bo8l                        0x000055eb45718604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0d87f62460 __libc_start_main +
    245

    6    tmpomt6bo8l                        0x000055eb457181e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.reduce([Int](), { (sums, num) -> [Int] in\n\
    \        var s = sums.reduce(0, {$0 + $1}) + num\n        sums.append(s)\n   \
    \     return sums\n    })\n    return sums.sorted(by: {$0 < $1})\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpbzez_8lv.swift:10:14: error: cannot use mutating member on immutable\
    \ value: 'sums' is a 'let' constant\n        sums.append(s)\n        ~~~~ ^\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.digits }\n    sums.sort { $0.0 < $1.0\
    \ }\n    return sums.map { $0.sum }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmppqlx0yyb.swift:8:30: error: value of type 'Int' has no member 'digits'\n\
    \    var sums = nums.map { $0.digits }\n                          ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var sum: Int = 0\n    for n in nums\
    \ {\n        sum += n\n    }\n    for n in nums {\n        if sum == n {\n   \
    \         result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpnk1v0qsj/tmpnk1v0qsj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0905cb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09059a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09059a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09059a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnk1v0qsj                        0x0000561acb94e5a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b0905e9d460 __libc_start_main +
    245

    6    tmpnk1v0qsj                        0x0000561acb94e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let sum = nums.reduce(0) { $0 + $1 }\n    return nums.sorted\
    \ { $0.digits < $1.digits || ($0.digits == $1.digits && $0.index > $1.index) }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp2t1mc28l.swift:9:29: error: value of type 'Int' has no member 'digits'\n\
    \    return nums.sorted { $0.digits < $1.digits || ($0.digits == $1.digits &&\
    \ $0.index > $1.index) }\n                         ~~ ^~~~~~\n/tmp/tmp2t1mc28l.swift:9:41:\
    \ error: value of type 'Int' has no member 'digits'\n    return nums.sorted {\
    \ $0.digits < $1.digits || ($0.digits == $1.digits && $0.index > $1.index) }\n\
    \                                     ~~ ^~~~~~\n/tmp/tmp2t1mc28l.swift:9:55:\
    \ error: value of type 'Int' has no member 'digits'\n    return nums.sorted {\
    \ $0.digits < $1.digits || ($0.digits == $1.digits && $0.index > $1.index) }\n\
    \                                                   ~~ ^~~~~~\n/tmp/tmp2t1mc28l.swift:9:68:\
    \ error: value of type 'Int' has no member 'digits'\n    return nums.sorted {\
    \ $0.digits < $1.digits || ($0.digits == $1.digits && $0.index > $1.index) }\n\
    \                                                                ~~ ^~~~~~\n/tmp/tmp2t1mc28l.swift:9:81:\
    \ error: value of type 'Int' has no member 'index'\n    return nums.sorted { $0.digits\
    \ < $1.digits || ($0.digits == $1.digits && $0.index > $1.index) }\n         \
    \                                                                    ~~ ^~~~~\n\
    /tmp/tmp2t1mc28l.swift:9:92: error: value of type 'Int' has no member 'index'\n\
    \    return nums.sorted { $0.digits < $1.digits || ($0.digits == $1.digits &&\
    \ $0.index > $1.index) }\n                                                   \
    \                                     ~~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let numsSorted = nums.sorted { $0.digits < $1.digits }\n   \
    \ return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqgucfgaa.swift:8:39: error: value of type 'Int' has no member 'digits'\n\
    \    let numsSorted = nums.sorted { $0.digits < $1.digits }\n                \
    \                   ~~ ^~~~~~\n/tmp/tmpqgucfgaa.swift:8:51: error: value of type\
    \ 'Int' has no member 'digits'\n    let numsSorted = nums.sorted { $0.digits <\
    \ $1.digits }\n                                               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy\
    \ = numsSorted.copy()\n    numsSorted.sortInPlace()\n    var numsSortedCopy =\
    \ numsSorted.copy()\n    var i = 0\n    while i < numsSorted.count {\n       \
    \ if numsSorted[i] != numsSortedSorted[i] {\n            swap(&numsSorted[i],\
    \ &numsSortedSorted[i])\n        }\n        i += 1\n    }\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp9j19cqun.swift:14:37: error: value of type '[Int]' has no member\
    \ 'copy'\n    var numsSortedCopy = numsSorted.copy()\n                       \
    \  ~~~~~~~~~~ ^~~~\n/tmp/tmp9j19cqun.swift:15:16: error: value of type '[Int]'\
    \ has no member 'sortInPlace'\n    numsSorted.sortInPlace()\n    ~~~~~~~~~~ ^~~~~~~~~~~\n\
    /tmp/tmp9j19cqun.swift:16:37: error: value of type '[Int]' has no member 'copy'\n\
    \    var numsSortedCopy = numsSorted.copy()\n                         ~~~~~~~~~~\
    \ ^~~~\n/tmp/tmp9j19cqun.swift:19:29: error: cannot find 'numsSortedSorted' in\
    \ scope\n        if numsSorted[i] != numsSortedSorted[i] {\n                 \
    \           ^~~~~~~~~~~~~~~~\n/tmp/tmp9j19cqun.swift:20:35: error: cannot find\
    \ 'numsSortedSorted' in scope\n            swap(&numsSorted[i], &numsSortedSorted[i])\n\
    \                                  ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var i = 0\n  \
    \  for n in numsSorted {\n        if sum < n {\n            swap(&nums[i], &nums[sum])\n\
    \            sum += nums[i]\n        }\n        i += 1\n    }\n    return nums\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwkt9xzsb.swift:17:18: error: cannot pass immutable value as inout\
    \ argument: 'nums' is a 'let' constant\n            swap(&nums[i], &nums[sum])\n\
    \                 ^~~~~\n/tmp/tmpwkt9xzsb.swift:17:28: error: cannot pass immutable\
    \ value as inout argument: 'nums' is a 'let' constant\n            swap(&nums[i],\
    \ &nums[sum])\n                           ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for num in numsSorted {\n        if sum == num {\n          \
    \  numsSortedBySum.append(num)\n        }\n    }\n    return numsSortedBySum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpm9hld5th/tmpm9hld5th.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba86f445c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba86f13cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba86f13c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba86f13b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9hld5th                        0x000055baf509b604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba86f631460 __libc_start_main +
    245

    6    tmpm9hld5th                        0x000055baf509b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum < n {\n        \
    \    result.insert(sum, at: 0)\n            sum += n\n        } else {\n     \
    \       result.insert(n, at: 0)\n            sum -= n\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnn35bgnf/tmpnn35bgnf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b2a34dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b2a044b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b2a044988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b2a0437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnn35bgnf                        0x000055f1c0fd3604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8b2a539460 __libc_start_main +
    245

    6    tmpnn35bgnf                        0x000055f1c0fd31e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_5ytp6o8/tmp_5ytp6o8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b03d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b03a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b03a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b03a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5ytp6o8                        0x000055a1e1d0d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0b03f76460 __libc_start_main +
    245

    6    tmp_5ytp6o8                        0x000055a1e1d0d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var sum: Int = 0\n    for n in nums\
    \ {\n        sum += n\n    }\n    for n in nums {\n        if sum == n {\n   \
    \         result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpnk1v0qsj/tmpnk1v0qsj.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0905cb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b09059a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b09059a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b09059a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnk1v0qsj                        0x0000561acb94e5a4 <unavailable> + 5540

    5    libc.so.6                          0x00002b0905e9d460 __libc_start_main +
    245

    6    tmpnk1v0qsj                        0x0000561acb94e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in nums {\n        var sum =\
    \ 0\n        for d in n.toString() {\n            sum += Int(d)!\n        }\n\
    \        result.insert(sum, at: result.index(of: sum))\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpe0_mkh1c.swift:11:20: error: value of type 'Int' has no member\
    \ 'toString'\n        for d in n.toString() {\n                 ~ ^~~~~~~~\n/tmp/tmpe0_mkh1c.swift:14:39:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n        result.insert(sum,\
    \ at: result.index(of: sum))\n                                      ^\n/tmp/tmpe0_mkh1c.swift:14:39:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.insert(sum, at: result.index(of: sum))\n             \
    \                         ^\n                                                \
    \     ?? <#default value#>\n/tmp/tmpe0_mkh1c.swift:14:39: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        result.insert(sum,\
    \ at: result.index(of: sum))\n                                      ^\n      \
    \                                              !\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    return nums.sorted(by: { (num1, num2) in\n        let sum1 =\
    \ num1.reduce(0, +) + 10\n        let sum2 = num2.reduce(0, +) + 10\n        return\
    \ sum1 > sum2\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmprjmlxtsn.swift:9:25: error: value of type 'Int' has no member 'reduce'\n\
    \        let sum1 = num1.reduce(0, +) + 10\n                   ~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.reduce([Int]()) { $0 + [$1] }\n    sums.sort\
    \ { $0.0 < $1.0 }\n    return sums\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpri5v3iod.swift:9:20: error: value of type 'Int' has no member '0'\n\
    \    sums.sort { $0.0 < $1.0 }\n                ~~ ^\n/tmp/tmpri5v3iod.swift:9:27:\
    \ error: value of type 'Int' has no member '0'\n    sums.sort { $0.0 < $1.0 }\n\
    \                       ~~ ^\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    var sumBySum = [Int]()\n    for n in nums {\n        sumBySum[sum]\
    \ = n\n        sum += n\n    }\n    for n in numsSorted {\n        if let index\
    \ = sumBySum.index(of: n) {\n            numsSortedBySum.append(numsSorted[index])\n\
    \        }\n    }\n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:613: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b46824cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b46821c1561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b46821c1286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b46821c113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b46821c0bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b4681fc07ec <unavailable> + 186348

    6    tmpqt8xaz5u                        0x000055fc6da7f1dd <unavailable> + 8669

    7    tmpqt8xaz5u                        0x000055fc6da7e624 <unavailable> + 5668

    8    libc.so.6                          0x00002b46826b6460 __libc_start_main +
    245

    9    tmpqt8xaz5u                        0x000055fc6da7e2f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aDigit = a % 10\n        let bDigit = b % 10\n  \
    \      return aDigit > bDigit || (aDigit == bDigit && a.compareTo(b) == .orderedAscending)\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsx5kctp9.swift:17:58: error: value of type 'Int' has no member\
    \ 'compareTo'\n        return aDigit > bDigit || (aDigit == bDigit && a.compareTo(b)\
    \ == .orderedAscending)\n                                                    \
    \   ~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    for n in nums {\n        let sum =\
    \ n.reduce(0, combine: +)\n        result.append(sum)\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpwqhrw680.swift:10:21: error: value of type 'Int' has no member\
    \ 'reduce'\n        let sum = n.reduce(0, combine: +)\n                  ~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_5ytp6o8/tmp_5ytp6o8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b03d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b03a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b03a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b03a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5ytp6o8                        0x000055a1e1d0d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0b03f76460 __libc_start_main +
    245

    6    tmp_5ytp6o8                        0x000055a1e1d0d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    numsSorted.sort()\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpdypr2qwe/tmpdypr2qwe.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aebc0cdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aebc09d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aebc09d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aebc09d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdypr2qwe                        0x00005616b7a3c504 <unavailable> + 5380

    5    libc.so.6                          0x00002aebc0ec7460 __libc_start_main +
    245

    6    tmpdypr2qwe                        0x00005616b7a3c0e9 <unavailable> + 4329

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var i = 0\n  \
    \  for n in nums {\n        if sum < n {\n            swap(&nums[i], &nums[sum])\n\
    \            sum += nums[i]\n            i += 1\n        }\n    }\n    return\
    \ numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpka7ibk_4.swift:17:18: error: cannot pass immutable value as inout\
    \ argument: 'nums' is a 'let' constant\n            swap(&nums[i], &nums[sum])\n\
    \                 ^~~~~\n/tmp/tmpka7ibk_4.swift:17:28: error: cannot pass immutable\
    \ value as inout argument: 'nums' is a 'let' constant\n            swap(&nums[i],\
    \ &nums[sum])\n                           ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for n in numsSorted {\n        if sum == n {\n            numsSortedBySum.append(n)\n\
    \        }\n    }\n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpbzgy_dpt/tmpbzgy_dpt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ec92b8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec8fafb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec8faf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec8fae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbzgy_dpt                        0x00005605b455e604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8ec94a4460 __libc_start_main +
    245

    6    tmpbzgy_dpt                        0x00005605b455e1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum < n {\n        \
    \    result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpmo072944/tmpmo072944.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eca01ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ec9d11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ec9d11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ec9d107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo072944                        0x00005637a5c40604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8eca206460 __libc_start_main +
    245

    6    tmpmo072944                        0x00005637a5c401e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.reduce(0) { $0 + $1 % 10 } }\n    sums.sort\
    \ { $0 < $1 }\n    return sums.map { nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcbgbant7.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map { $0.reduce(0) { $0 + $1 % 10 } }\n                 \
    \         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map{ $0.reduce(0,+) }\n    sums.sort{ $0 < $1\
    \ }\n    return sums.map{ nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpjtyirq5b.swift:8:29: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map{ $0.reduce(0,+) }\n                         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_5ytp6o8/tmp_5ytp6o8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b03d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b03a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b03a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b03a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5ytp6o8                        0x000055a1e1d0d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0b03f76460 __libc_start_main +
    245

    6    tmp_5ytp6o8                        0x000055a1e1d0d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var i = 0\n\
    \    for num in numsSorted {\n        if sum != num {\n            swap(&numsSorted[i],\
    \ &numsSorted[numsSorted.index(num)!])\n            i += 1\n        }\n    }\n\
    \    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpgnt0wv9b.swift:17:63: error: missing argument label 'of:' in call\n\
    \            swap(&numsSorted[i], &numsSorted[numsSorted.index(num)!])\n     \
    \                                                         ^\n                \
    \                                              of: \n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { sum - $0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpogpz6l1t.swift:14:17: error: contextual closure type '(Int, Int)\
    \ throws -> Bool' expects 2 arguments, but 1 was used in closure body\n    result.sort\
    \ { sum - $0 }\n                ^\n/tmp/tmpogpz6l1t.swift:14:23: error: cannot\
    \ convert value of type 'Int' to closure result type 'Bool'\n    result.sort {\
    \ sum - $0 }\n                  ~~~~^~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSorted2\
    \ = numsSorted\n    for num in numsSorted {\n        var index = numsSorted2.index(of:\
    \ num)\n        numsSorted2.remove(at: index)\n        numsSorted2.insert(num,\
    \ at: index)\n    }\n    return numsSorted2\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpb8gw9kgg.swift:16:33: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n        var index = numsSorted2.index(of: num)\n     \
    \                           ^\n/tmp/tmpb8gw9kgg.swift:16:33: note: use 'firstIndex(of:)'\
    \ instead\n        var index = numsSorted2.index(of: num)\n                  \
    \              ^~~~~\n                                firstIndex\n/tmp/tmpb8gw9kgg.swift:17:32:\
    \ error: value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must\
    \ be unwrapped to a value of type 'Array<Int>.Index' (aka 'Int')\n        numsSorted2.remove(at:\
    \ index)\n                               ^\n/tmp/tmpb8gw9kgg.swift:17:32: note:\
    \ coalesce using '??' to provide a default when the optional value contains 'nil'\n\
    \        numsSorted2.remove(at: index)\n                               ^\n   \
    \                                  ?? <#default value#>\n/tmp/tmpb8gw9kgg.swift:17:32:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        numsSorted2.remove(at: index)\n                             \
    \  ^\n                                    !\n/tmp/tmpb8gw9kgg.swift:18:37: error:\
    \ value of optional type 'Array<Int>.Index?' (aka 'Optional<Int>') must be unwrapped\
    \ to a value of type 'Array<Int>.Index' (aka 'Int')\n        numsSorted2.insert(num,\
    \ at: index)\n                                    ^\n/tmp/tmpb8gw9kgg.swift:18:37:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        numsSorted2.insert(num, at: index)\n                        \
    \            ^\n                                          ?? <#default value#>\n\
    /tmp/tmpb8gw9kgg.swift:18:37: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        numsSorted2.insert(num, at: index)\n\
    \                                    ^\n                                     \
    \    !\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.reduce(0) { $0 + $1 % 10 } }\n    sums.sort\
    \ { $0.0 < $1.0 }\n    return sums.map { $0 / 10 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsaskri4h.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map { $0.reduce(0) { $0 + $1 % 10 } }\n                 \
    \         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n    \
    \    return aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp8exosb5s/tmp8exosb5s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0120e04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0120afbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0120afb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0120afa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8exosb5s                        0x000056243292f684 <unavailable> + 5764

    5    libc.so.6                          0x00002b0120ff0460 __libc_start_main +
    245

    6    tmp8exosb5s                        0x000056243292f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum: Int = 0\n    var result: [Int] = []\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0\
    \ < $1.0 }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmph_gj9yo2.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmph_gj9yo2.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = a.map { $0 }.reduce(0) { $0 + $1 }\n     \
    \   let bSum = b.map { $0 }.reduce(0) { $0 + $1 }\n        return aSum < bSum\n\
    \    })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpcl1qya6n.swift:15:22: error: value of type 'Int' has no member\
    \ 'map'\n        let aSum = a.map { $0 }.reduce(0) { $0 + $1 }\n             \
    \      ~ ^~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let sum = nums.reduce(0, combine: +)\n    return nums.sorted\
    \ { $0.reduce(0, combine: +) < $1.reduce(0, combine: +) }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpgfnz7fla.swift:8:26: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = nums.reduce(0, combine: +)\n                        \
    \ ^   ~~~~~~~~~\n                             \n/tmp/tmpgfnz7fla.swift:9:12: error:\
    \ the compiler is unable to type-check this expression in reasonable time; try\
    \ breaking up the expression into distinct sub-expressions\n    return nums.sorted\
    \ { $0.reduce(0, combine: +) < $1.reduce(0, combine: +) }\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009428
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let numsSorted = nums.sorted { $0.digits < $1.digits }\n   \
    \ return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpqgucfgaa.swift:8:39: error: value of type 'Int' has no member 'digits'\n\
    \    let numsSorted = nums.sorted { $0.digits < $1.digits }\n                \
    \                   ~~ ^~~~~~\n/tmp/tmpqgucfgaa.swift:8:51: error: value of type\
    \ 'Int' has no member 'digits'\n    let numsSorted = nums.sorted { $0.digits <\
    \ $1.digits }\n                                               ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sum = 0\n    for num in numsSorted\
    \ {\n        sum += num\n    }\n    var i = 0\n    for num in numsSorted {\n \
    \       if sum < num {\n            numsSorted.swapAt(i, numsSorted.index(num,\
    \ offsetBy: i))\n            i += 1\n        }\n    }\n    return numsSorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b88a2170c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88a1e67561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b88a1e67286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b88a1e6713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b88a1e66bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b88a1e518a2 <unavailable> + 1345698

    6    libswiftCore.so                    0x00002b88a1e51815 <unavailable> + 1345557

    7    libswiftCore.so                    0x00002b88a1e51450 MutableCollection.swapAt(_:_:)
    + 377

    8    tmp4hk07kml                        0x000055e26dedd12a <unavailable> + 8490

    9    tmp4hk07kml                        0x000055e26dedc564 <unavailable> + 5476

    10   libc.so.6                          0x00002b88a235c460 __libc_start_main +
    245

    11   tmp4hk07kml                        0x000055e26dedc239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        let aSumDigit\
    \ = Int(truncating: aSum % 10)\n        let bSumDigit = Int(truncating: bSum %\
    \ 10)\n        return aSumDigit < bSumDigit\n    })\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmptks_3n6x.swift:17:28: error: extraneous argument label 'truncating:'\
    \ in call\n        let aSumDigit = Int(truncating: aSum % 10)\n              \
    \             ^~~~~~~~~~~~~\n                            \n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var index = 0\n\
    \    for n in nums {\n        if sum == n {\n            numsSorted.append(nums[index])\n\
    \            index += 1\n        }\n    }\n    return numsSorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp5t56zgxw/tmp5t56zgxw.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af067b72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af067869b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af067869988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0678687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5t56zgxw                        0x000056212db92654 <unavailable> + 5716

    5    libc.so.6                          0x00002af067d5e460 __libc_start_main +
    245

    6    tmp5t56zgxw                        0x000056212db92239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result: [Int] = []\n    var sum: Int = 0\n    for n in nums\
    \ {\n        sum += n\n    }\n    for n in nums {\n        if sum < n {\n    \
    \        result.append(n)\n            sum += n\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmptbhbu6qj/tmptbhbu6qj.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af48a96bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af48a662b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af48a662988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af48a6617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptbhbu6qj                        0x0000558a138135a4 <unavailable> + 5540

    5    libc.so.6                          0x00002af48ab57460 __libc_start_main +
    245

    6    tmptbhbu6qj                        0x0000558a13813189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpkppgmss7.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpkppgmss7.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var numsSorted2\
    \ = numsSorted.sorted()\n    var numsSorted3 = numsSorted2.sorted()\n    var numsSorted4\
    \ = numsSorted3.sorted()\n    var numsSorted5 = numsSorted4.sorted()\n    var\
    \ numsSorted6 = numsSorted5.sorted()\n    var numsSorted7 = numsSorted6.sorted()\n\
    \    var numsSorted8 = numsSorted7.sorted()\n    var numsSorted9 = numsSorted8.sorted()\n\
    \    var numsSorted10 = numsSorted9.sorted()\n    var numsSorted11 = numsSorted10.sorted()\n\
    \    var numsSorted12 = numsSorted11.sorted()\n    var numsSorted13 = numsSorted12.sorted()\n\
    \    var numsSorted14 = numsSorted13.sorted()\n    var numsSorted15 = numsSorted14.sorted()\n\
    \    var numsSorted16 = numsSorted15.sorted()\n    var numsSorted17 = numsSorted16.sorted()\n\
    \    var numsSorted18 = numsSorted17.sorted()\n    var numsSorted19 = numsSorted18.sorted()\n\
    \    var numsSorted20 = numsSorted19.sorted()\n    var numsSorted21 = numsSorted20.sorted()\n\
    \    var numsSorted22 = numsSorted21.sorted()\n    var numsSorted23 = numsSorted22.sorted()\n\
    \    var numsSorted24 = numsSorted23.sorted()\n    var numsSorted25 = numsSorted24.sorted()\n\
    \    var numsSorted26 = numsSorted25.sorted()\n    var numsSorted27 = numsSorted26.sorted()\n\
    \    var numsSorted28 = numsSorted27.sorted()\n    var numsSorted29 = numsSorted28.sorted()\n\
    \    var numsSorted30 = numsSorted29.sorted()\n    var numsSorted31 = numsSorted30.sorted()\n\
    \    var numsSorted32 = numsSorted31.sorted()\n    var numsSorted33 = numsSorted32.sorted()\n\
    \    var numsSorted34 = numsSorted33.sorted()\n    var numsSorted35 = numsSorted34.sorted()\n\
    \    var numsSorted36 = numsSorted35.sorted()\n    var numsSorted37 = numsSorted36.sorted()\n\
    \    var numsSorted38 = numsSorted37.sorted()\n    var numsSorted39 = numsSorted38\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpfgao8njs.swift:14:9: warning: variable 'numsSorted2' was never\
    \ mutated; consider changing to 'let' constant\n    var numsSorted2 = numsSorted.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmpfgao8njs.swift:15:9: warning: variable 'numsSorted3'\
    \ was never mutated; consider changing to 'let' constant\n    var numsSorted3\
    \ = numsSorted2.sorted()\n    ~~~ ^\n    let\n/tmp/tmpfgao8njs.swift:16:9: warning:\
    \ variable 'numsSorted4' was never mutated; consider changing to 'let' constant\n\
    \    var numsSorted4 = numsSorted3.sorted()\n    ~~~ ^\n    let\n/tmp/tmpfgao8njs.swift:17:9:\
    \ warning: variable 'numsSorted5' was never mutated; consider changing to 'let'\
    \ constant\n    var numsSorted5 = numsSorted4.sorted()\n    ~~~ ^\n    let\n/tmp/tmpfgao8njs.swift:18:9:\
    \ warning: variable 'numsSorted6' was never mutated; consider changing to 'let'\
    \ constant\n    var numsSorted6 = numsSorted5.sorted()\n    ~~~ ^\n    let\n/tmp/tmpfgao8njs.swift:19:9:\
    \ warning: variable 'numsSorted7' was never mutated; consider changing to 'let'\
    \ constant\n    var numsSorted7 = numsSorted6.sorted()\n    ~~~ ^\n    let\n/tmp/tmpfgao8njs.swift:20:9:\
    \ warning: variable 'numsSorted8' was never mutated; consider changing to 'let'\
    \ constant\n    var numsSorted8 = numsSorted7.sorted()\n    ~~~ ^\n    let\n/tmp/tmpfgao8njs.swift:21:9:\
    \ warning: variable 'numsSorted9' was never mutated; consider changing to 'let'\
    \ constant\n    var numsSorted9 = numsSorted8.sorted()\n    ~~~ ^\n    let\n/tmp/tmpfgao8njs.swift:22:9:\
    \ warning: variable 'numsSorted10' was never mutated; consider changing to 'let'\
    \ constant\n    var numsSorted10 = numsSorted9.sorted()\n    ~~~ ^\n    let\n\
    /tmp/tmpfgao8njs.swift:23:9: warning: variable 'numsSorted11' was never mutated;\
    \ consider changing to 'let' constant\n    var numsSorted11 = numsSorted10.sorted()\n\
    \    ~~~ ^\n    let\n/tmp/tmpfgao8njs.swift:24:9: warning: variable 'numsSorted12'\
    \ was never mutated; consider changing to 'let' constant\n    var numsSorted12\
    \ = numsSorted11.sorted()\n    ~~~ ^\n    let\n/tmp/tmpfgao8njs.swift:25:9: warning:\
    \ variable 'numsSorted13' was never mutated; consider chan"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    var sorted = [Int]()\n\
    \    var index = 0\n    while index < result.count {\n        if sum < result[index]\
    \ {\n            sorted.append(result[index])\n            sum += result[index]\n\
    \            index += 1\n        } else {\n            sorted.append(result[index])\n\
    \            sum -= result[index]\n            index += 1\n        }\n    }\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmplfha0u02/tmplfha0u02.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2a26c20c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2a26917b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2a26917988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2a269167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplfha0u02                        0x000055783cf336b4 <unavailable> + 5812

    5    libc.so.6                          0x00002b2a26e0c460 __libc_start_main +
    245

    6    tmplfha0u02                        0x000055783cf33299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpet9zsrh0.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpet9zsrh0.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpx9um0m11/tmpx9um0m11.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf772e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf76fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf76fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf76fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx9um0m11                        0x000056221f4bd684 <unavailable> + 5764

    5    libc.so.6                          0x00002acf774d5460 __libc_start_main +
    245

    6    tmpx9um0m11                        0x000056221f4bd269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum: Int = 0\n    var result: [Int] = []\n    for n in nums\
    \ {\n        sum += n\n        result.append(n)\n    }\n    result.sortInPlace()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp3fmyphqn.swift:14:12: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n    result.sortInPlace()\n    ~~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    return nums.sorted(by: {\n        let sumOfDigits = $0.reduce(0,\
    \ +) + $1.reduce(0, +)\n        return sumOfDigits > $1.reduce(0, +) ? 1 : sumOfDigits\
    \ < $1.reduce(0, +) ? -1 : 0\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\
    assert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\nassert(order_by_points(nums:\
    \ [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp4kxkzdd2.swift:9:30: error: value of type 'Int' has no member 'reduce'\n\
    \        let sumOfDigits = $0.reduce(0, +) + $1.reduce(0, +)\n               \
    \           ~~ ^~~~~~\n/tmp/tmp4kxkzdd2.swift:9:48: error: value of type 'Int'\
    \ has no member 'reduce'\n        let sumOfDigits = $0.reduce(0, +) + $1.reduce(0,\
    \ +)\n                                            ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009396
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sum = 0\n    for n in numsSorted\
    \ {\n        sum += n\n        numsSorted.remove(at: numsSorted.index(of: n))\n\
    \    }\n    return numsSorted.sorted(by: { $0 + $1 < $1 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpazu3rnbj.swift:12:42: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        numsSorted.remove(at: numsSorted.index(of: n))\n      \
    \                                   ^\n/tmp/tmpazu3rnbj.swift:12:42: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     numsSorted.remove(at: numsSorted.index(of: n))\n                       \
    \                  ^\n                                                      ??\
    \ <#default value#>\n/tmp/tmpazu3rnbj.swift:12:42: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        numsSorted.remove(at:\
    \ numsSorted.index(of: n))\n                                         ^\n     \
    \                                                !\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for num in nums {\n\
    \        sum += num\n    }\n    for num in nums {\n        if sum == num {\n \
    \           result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmptacsl3yd/tmptacsl3yd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac162d88c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac162a7fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac162a7f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac162a7e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptacsl3yd                        0x000055bc89848604 <unavailable> + 5636

    5    libc.so.6                          0x00002ac162f74460 __libc_start_main +
    245

    6    tmptacsl3yd                        0x000055bc898481e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedCopy\
    \ = numsSorted\n    \n    var index = 0\n    while index < numsSorted.count {\n\
    \        if sum < numsSorted[index] {\n            swap(&numsSortedCopy[index],\
    \ &numsSorted[index])\n        }\n        index += 1\n    }\n    return numsSortedCopy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpj8biiyd8/tmpj8biiyd8.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b667835fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6678056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6678056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b66780557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj8biiyd8                        0x000055cf16267754 <unavailable> + 5972

    5    libc.so.6                          0x00002b667854b460 __libc_start_main +
    245

    6    tmpj8biiyd8                        0x000055cf16267339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort { $0.0 < $1.0\
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpet9zsrh0.swift:14:22: error: value of type 'Int' has no member\
    \ '0'\n    result.sort { $0.0 < $1.0 }\n                  ~~ ^\n/tmp/tmpet9zsrh0.swift:14:29:\
    \ error: value of type 'Int' has no member '0'\n    result.sort { $0.0 < $1.0\
    \ }\n                         ~~ ^\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = nums\n    var sum = 0\n    for n in numsSorted\
    \ {\n        sum += n\n        numsSorted.remove(at: numsSorted.index(of: n))\n\
    \    }\n    return numsSorted.sorted(by: { $0 + $1 < $1 })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpazu3rnbj.swift:12:42: error: value of optional type 'Array<Int>.Index?'\
    \ (aka 'Optional<Int>') must be unwrapped to a value of type 'Array<Int>.Index'\
    \ (aka 'Int')\n        numsSorted.remove(at: numsSorted.index(of: n))\n      \
    \                                   ^\n/tmp/tmpazu3rnbj.swift:12:42: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     numsSorted.remove(at: numsSorted.index(of: n))\n                       \
    \                  ^\n                                                      ??\
    \ <#default value#>\n/tmp/tmpazu3rnbj.swift:12:42: note: force-unwrap using '!'\
    \ to abort execution if the optional value contains 'nil'\n        numsSorted.remove(at:\
    \ numsSorted.index(of: n))\n                                         ^\n     \
    \                                                !\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum == n {\n       \
    \     result.append(n)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp_5ytp6o8/tmp_5ytp6o8.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0b03d8ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0b03a81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0b03a81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0b03a807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_5ytp6o8                        0x000055a1e1d0d604 <unavailable> + 5636

    5    libc.so.6                          0x00002b0b03f76460 __libc_start_main +
    245

    6    tmp_5ytp6o8                        0x000055a1e1d0d1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for num in nums\
    \ {\n        sum += num\n        numsSorted.append(num)\n    }\n    var numsSortedBySum\
    \ = [Int]()\n    for num in numsSorted {\n        if sum == num {\n          \
    \  numsSortedBySum.append(num)\n        }\n    }\n    return numsSortedBySum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpm9hld5th/tmpm9hld5th.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba86f445c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba86f13cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba86f13c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba86f13b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm9hld5th                        0x000055baf509b604 <unavailable> + 5636

    5    libc.so.6                          0x00002ba86f631460 __libc_start_main +
    245

    6    tmpm9hld5th                        0x000055baf509b1e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = [Int]()\n    var points = [Int]()\n    for n in nums\
    \ {\n        sums.append(n.toInt())\n        points.append(n)\n    }\n    points.sort(by:\
    \ {sums[$0] > sums[$1]})\n    return points\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp6cjm8npu.swift:11:23: error: value of type 'Int' has no member\
    \ 'toInt'\n        sums.append(n.toInt())\n                    ~ ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var index = 0\n\
    \    while index < nums.count {\n        if sum < nums[index] {\n            swap(&nums[index],\
    \ &nums[sum])\n            sum += nums[index]\n            index++\n        }\
    \ else {\n            sum -= nums[index]\n            index++\n        }\n   \
    \ }\n    return numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmptdlna554.swift:17:18: error: cannot pass immutable value as inout\
    \ argument: 'nums' is a 'let' constant\n            swap(&nums[index], &nums[sum])\n\
    \                 ^~~~~\n/tmp/tmptdlna554.swift:17:32: error: cannot pass immutable\
    \ value as inout argument: 'nums' is a 'let' constant\n            swap(&nums[index],\
    \ &nums[sum])\n                               ^~~~~\n/tmp/tmptdlna554.swift:19:18:\
    \ error: cannot find operator '++' in scope; did you mean '+= 1'?\n          \
    \  index++\n                 ^~\n/tmp/tmptdlna554.swift:22:18: error: cannot find\
    \ operator '++' in scope; did you mean '+= 1'?\n            index++\n        \
    \         ^~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n    }\n    for n in nums {\n        if sum < n {\n        \
    \    result.insert(sum, at: 0)\n            sum += n\n        } else {\n     \
    \       result.insert(n, at: 0)\n            sum -= n\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpnn35bgnf/tmpnn35bgnf.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b2a34dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b2a044b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b2a044988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b2a0437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnn35bgnf                        0x000055f1c0fd3604 <unavailable> + 5636

    5    libc.so.6                          0x00002b8b2a539460 __libc_start_main +
    245

    6    tmpnn35bgnf                        0x000055f1c0fd31e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n    sums.sort\
    \ { $0 < $1 }\n    return sums.map { nums[$0] }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11, 1, -12,\
    \ 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as [Int])\n\
    assert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98,\
    \ -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmp7smdw70q.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map { $0.reduce(0) { $0 + $1 } }\n                      \
    \    ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (n1,\
    \ n2) -> Bool in\n        let diff1 = sum - n1\n        let diff2 = sum - n2\n\
    \        return diff1 < diff2\n    })\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpq_5huqx4/tmpq_5huqx4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9736cfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9733c6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac9733c6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac9733c57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq_5huqx4                        0x0000559c6322a684 <unavailable> + 5764

    5    libc.so.6                          0x00002ac9738bb460 __libc_start_main +
    245

    6    tmpq_5huqx4                        0x0000559c6322a269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var index = 0\n\
    \    for n in nums {\n        if sum == 0 {\n            numsSorted.append(n)\n\
    \        } else {\n            sum -= nums[index]\n            numsSorted.append(n)\n\
    \        }\n        index++\n    }\n    return numsSorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpr1g4w989.swift:22:14: error: cannot find operator '++' in scope;\
    \ did you mean '+= 1'?\n        index++\n             ^~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    \n    var numsSortedBySum\
    \ = [Int]()\n    for n in nums {\n        if sum == n {\n            numsSortedBySum.append(n)\n\
    \        }\n    }\n    \n    return numsSortedBySum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpu3ngp94v/tmpu3ngp94v.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7c58a6bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7c58762b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7c58762988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7c587617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu3ngp94v                        0x000055ec08216604 <unavailable> + 5636

    5    libc.so.6                          0x00002b7c58c57460 __libc_start_main +
    245

    6    tmpu3ngp94v                        0x000055ec082161e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        return sum - a < sum - b\n    })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmpiflw9ghg/tmpiflw9ghg.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac96cf64c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96cc5bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96cc5b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96cc5a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiflw9ghg                        0x00005589ed3e6684 <unavailable> + 5764

    5    libc.so.6                          0x00002ac96d150460 __libc_start_main +
    245

    6    tmpiflw9ghg                        0x00005589ed3e6269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sums = nums.map { $0.reduce(0) { $0 + $1 % 10 } }\n    sums.sort\
    \ { $0.0 < $1.0 }\n    return sums.map { $0 / 10 }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpsaskri4h.swift:8:30: error: value of type 'Int' has no member 'reduce'\n\
    \    var sums = nums.map { $0.reduce(0) { $0 + $1 % 10 } }\n                 \
    \         ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var sum = 0\n    var result = [Int]()\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    return result.sorted(by:\
    \ { (a, b) -> Bool in\n        return sum - a < sum - b\n    })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp1173qijt/tmp1173qijt.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b04a81c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b04a7ebab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b04a7eba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b04a7eb97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1173qijt                        0x000055db5cc60674 <unavailable> + 5748

    5    libc.so.6                          0x00002b04a83af460 __libc_start_main +
    245

    6    tmp1173qijt                        0x000055db5cc60259 <unavailable> + 4697

    '
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    return nums.sorted(by: { ($0 as Int).digitSum() < ($1 as Int).digitSum()\
    \ })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(order_by_points(nums: [1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpvgkbwiy3.swift:8:42: error: value of type 'Int' has no member 'digitSum'\n\
    \    return nums.sorted(by: { ($0 as Int).digitSum() < ($1 as Int).digitSum()\
    \ })\n                             ~~~~~~~~~~~ ^~~~~~~~\n/tmp/tmpvgkbwiy3.swift:8:67:\
    \ error: value of type 'Int' has no member 'digitSum'\n    return nums.sorted(by:\
    \ { ($0 as Int).digitSum() < ($1 as Int).digitSum() })\n                     \
    \                                 ~~~~~~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    var sorted = [Int]()\n\
    \    for n in result {\n        if sum == 0 {\n            sorted.append(n)\n\
    \        } else {\n            sum -= n\n            if sum < 0 {\n          \
    \      sum = 0\n            }\n            sorted.append(n)\n        }\n    }\n\
    \    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: Exception
  stderr: 'tmpszxuhifq/tmpszxuhifq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7237c93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b723798ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b723798a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b72379897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpszxuhifq                        0x0000564d4fb63604 <unavailable> + 5636

    5    libc.so.6                          0x00002b7237e7f460 __libc_start_main +
    245

    6    tmpszxuhifq                        0x0000564d4fb631e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660009345
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = sum\n        let bSum = sum\n        sum =\
    \ aSum + b\n        return sum < bSum\n    })\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int])\
    \ == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2,\
    \ -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmphogcygsu/tmphogcygsu.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b489d32cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b489d023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b489d023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b489d0227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphogcygsu                        0x0000563641aff684 <unavailable> + 5764

    5    libc.so.6                          0x00002b489d518460 __libc_start_main +
    245

    6    tmphogcygsu                        0x0000563641aff269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009345
- exit_code: -4
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for n in nums {\n\
    \        sum += n\n        result.append(n)\n    }\n    result.sort(by: { (a,\
    \ b) -> Bool in\n        let aSum = sum - a\n        let bSum = sum - b\n    \
    \    return aSum < bSum\n    })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: Exception
  stderr: 'tmp8exosb5s/tmp8exosb5s.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0120e04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0120afbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0120afb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0120afa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8exosb5s                        0x000056243292f684 <unavailable> + 5764

    5    libc.so.6                          0x00002b0120ff0460 __libc_start_main +
    245

    6    tmp8exosb5s                        0x000056243292f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660009343
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    var numsSorted = [Int]()\n    var sum = 0\n    for n in nums\
    \ {\n        sum += n\n        numsSorted.append(n)\n    }\n    var i = 0\n  \
    \  for n in nums {\n        if sum < n {\n            swap(&nums[i], &nums[sum])\n\
    \            sum += nums[i]\n            i += 1\n        }\n    }\n    return\
    \ numsSorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(order_by_points(nums:\
    \ [1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\nassert(order_by_points(nums:\
    \ [1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2,\
    \ 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457])\nassert(order_by_points(nums:\
    \ [] as [Int]) == [] as [Int])\nassert(order_by_points(nums: [1, -11, -32, 43,\
    \ 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\
    assert(order_by_points(nums: [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23,\
    \ 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpka7ibk_4.swift:17:18: error: cannot pass immutable value as inout\
    \ argument: 'nums' is a 'let' constant\n            swap(&nums[i], &nums[sum])\n\
    \                 ^~~~~\n/tmp/tmpka7ibk_4.swift:17:28: error: cannot pass immutable\
    \ value as inout argument: 'nums' is a 'let' constant\n            swap(&nums[i],\
    \ &nums[sum])\n                           ^~~~~\n"
  stdout: ''
  timestamp: 1660009344
- exit_code: 1
  program: "\n/// Write a function which sorts the given list of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original list.\n/// For example:\nfunc order_by_points(nums: [Int])\
    \ -> [Int] {\n    let sum = nums.reduce(0, combine: +)\n    return nums.sorted(by:\
    \ { $0.reduce(0, combine: +) > $1.reduce(0, combine: +) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(order_by_points(nums: [1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11])\nassert(order_by_points(nums: [1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457])\nassert(order_by_points(nums: [] as [Int]) == [] as\
    \ [Int])\nassert(order_by_points(nums: [1, -11, -32, 43, 54, -98, 2, -3]) == [-3,\
    \ -32, -98, -11, 1, 2, 43, 54])\nassert(order_by_points(nums: [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\nassert(order_by_points(nums:\
    \ [0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])"
  status: SyntaxError
  stderr: "/tmp/tmpk2jmhhjs.swift:8:26: error: extraneous argument label 'combine:'\
    \ in call\n    let sum = nums.reduce(0, combine: +)\n                        \
    \ ^   ~~~~~~~~~\n                             \n/tmp/tmpk2jmhhjs.swift:9:33: error:\
    \ value of type 'Int' has no member 'reduce'\n    return nums.sorted(by: { $0.reduce(0,\
    \ combine: +) > $1.reduce(0, combine: +) })\n                             ~~ ^~~~~~\n\
    /tmp/tmpk2jmhhjs.swift:9:60: error: value of type 'Int' has no member 'reduce'\n\
    \    return nums.sorted(by: { $0.reduce(0, combine: +) > $1.reduce(0, combine:\
    \ +) })\n                                                        ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1660009384
